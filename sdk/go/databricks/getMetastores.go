// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// Mapping of name to id of all metastores:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			all, err := databricks.GetMetastores(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("allMetastores", all.Ids)
//			return nil
//		})
//	}
//
// ```
// ## Related Resources
//
// The following resources are used in the same context:
//
// * Metastore to get information about a single metastore.
// * Metastore to manage Metastores within Unity Catalog.
// * Catalog to manage catalogs within Unity Catalog.
func GetMetastores(ctx *pulumi.Context, args *GetMetastoresArgs, opts ...pulumi.InvokeOption) (*GetMetastoresResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMetastoresResult
	err := ctx.Invoke("databricks:index/getMetastores:getMetastores", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMetastores.
type GetMetastoresArgs struct {
	// Mapping of name to id of databricks_metastore
	Ids map[string]interface{} `pulumi:"ids"`
}

// A collection of values returned by getMetastores.
type GetMetastoresResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Mapping of name to id of databricks_metastore
	Ids map[string]interface{} `pulumi:"ids"`
}

func GetMetastoresOutput(ctx *pulumi.Context, args GetMetastoresOutputArgs, opts ...pulumi.InvokeOption) GetMetastoresResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMetastoresResult, error) {
			args := v.(GetMetastoresArgs)
			r, err := GetMetastores(ctx, &args, opts...)
			var s GetMetastoresResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetMetastoresResultOutput)
}

// A collection of arguments for invoking getMetastores.
type GetMetastoresOutputArgs struct {
	// Mapping of name to id of databricks_metastore
	Ids pulumi.MapInput `pulumi:"ids"`
}

func (GetMetastoresOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetastoresArgs)(nil)).Elem()
}

// A collection of values returned by getMetastores.
type GetMetastoresResultOutput struct{ *pulumi.OutputState }

func (GetMetastoresResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetastoresResult)(nil)).Elem()
}

func (o GetMetastoresResultOutput) ToGetMetastoresResultOutput() GetMetastoresResultOutput {
	return o
}

func (o GetMetastoresResultOutput) ToGetMetastoresResultOutputWithContext(ctx context.Context) GetMetastoresResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetMetastoresResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetastoresResult) string { return v.Id }).(pulumi.StringOutput)
}

// Mapping of name to id of databricks_metastore
func (o GetMetastoresResultOutput) Ids() pulumi.MapOutput {
	return o.ApplyT(func(v GetMetastoresResult) map[string]interface{} { return v.Ids }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMetastoresResultOutput{})
}
