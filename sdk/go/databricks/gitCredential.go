// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// # The resource cluster can be imported using ID of Git credential that could be obtained via REST APIbash
//
// ```sh
//
//	$ pulumi import databricks:index/gitCredential:GitCredential this <git-credential-id>
//
// ```
type GitCredential struct {
	pulumi.CustomResourceState

	// specify if settings need to be enforced - right now, Databricks allows only single Git credential, so if it's already configured, the apply operation will fail.
	Force pulumi.BoolPtrOutput `pulumi:"force"`
	// case insensitive name of the Git provider.  Following values are supported right now (could be a subject for a change, consult [Git Credentials API documentation](https://docs.databricks.com/dev-tools/api/latest/gitcredentials.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`, `awsCodeCommit`.
	GitProvider pulumi.StringOutput `pulumi:"gitProvider"`
	// user name at Git provider.
	GitUsername pulumi.StringPtrOutput `pulumi:"gitUsername"`
	// The personal access token used to authenticate to the corresponding Git provider. If value is not provided, it's sourced from the first environment variable of `GITHUB_TOKEN`, that has a non-empty value.
	PersonalAccessToken pulumi.StringPtrOutput `pulumi:"personalAccessToken"`
}

// NewGitCredential registers a new resource with the given unique name, arguments, and options.
func NewGitCredential(ctx *pulumi.Context,
	name string, args *GitCredentialArgs, opts ...pulumi.ResourceOption) (*GitCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GitProvider == nil {
		return nil, errors.New("invalid value for required argument 'GitProvider'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitCredential
	err := ctx.RegisterResource("databricks:index/gitCredential:GitCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitCredential gets an existing GitCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitCredentialState, opts ...pulumi.ResourceOption) (*GitCredential, error) {
	var resource GitCredential
	err := ctx.ReadResource("databricks:index/gitCredential:GitCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitCredential resources.
type gitCredentialState struct {
	// specify if settings need to be enforced - right now, Databricks allows only single Git credential, so if it's already configured, the apply operation will fail.
	Force *bool `pulumi:"force"`
	// case insensitive name of the Git provider.  Following values are supported right now (could be a subject for a change, consult [Git Credentials API documentation](https://docs.databricks.com/dev-tools/api/latest/gitcredentials.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`, `awsCodeCommit`.
	GitProvider *string `pulumi:"gitProvider"`
	// user name at Git provider.
	GitUsername *string `pulumi:"gitUsername"`
	// The personal access token used to authenticate to the corresponding Git provider. If value is not provided, it's sourced from the first environment variable of `GITHUB_TOKEN`, that has a non-empty value.
	PersonalAccessToken *string `pulumi:"personalAccessToken"`
}

type GitCredentialState struct {
	// specify if settings need to be enforced - right now, Databricks allows only single Git credential, so if it's already configured, the apply operation will fail.
	Force pulumi.BoolPtrInput
	// case insensitive name of the Git provider.  Following values are supported right now (could be a subject for a change, consult [Git Credentials API documentation](https://docs.databricks.com/dev-tools/api/latest/gitcredentials.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`, `awsCodeCommit`.
	GitProvider pulumi.StringPtrInput
	// user name at Git provider.
	GitUsername pulumi.StringPtrInput
	// The personal access token used to authenticate to the corresponding Git provider. If value is not provided, it's sourced from the first environment variable of `GITHUB_TOKEN`, that has a non-empty value.
	PersonalAccessToken pulumi.StringPtrInput
}

func (GitCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitCredentialState)(nil)).Elem()
}

type gitCredentialArgs struct {
	// specify if settings need to be enforced - right now, Databricks allows only single Git credential, so if it's already configured, the apply operation will fail.
	Force *bool `pulumi:"force"`
	// case insensitive name of the Git provider.  Following values are supported right now (could be a subject for a change, consult [Git Credentials API documentation](https://docs.databricks.com/dev-tools/api/latest/gitcredentials.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`, `awsCodeCommit`.
	GitProvider string `pulumi:"gitProvider"`
	// user name at Git provider.
	GitUsername *string `pulumi:"gitUsername"`
	// The personal access token used to authenticate to the corresponding Git provider. If value is not provided, it's sourced from the first environment variable of `GITHUB_TOKEN`, that has a non-empty value.
	PersonalAccessToken *string `pulumi:"personalAccessToken"`
}

// The set of arguments for constructing a GitCredential resource.
type GitCredentialArgs struct {
	// specify if settings need to be enforced - right now, Databricks allows only single Git credential, so if it's already configured, the apply operation will fail.
	Force pulumi.BoolPtrInput
	// case insensitive name of the Git provider.  Following values are supported right now (could be a subject for a change, consult [Git Credentials API documentation](https://docs.databricks.com/dev-tools/api/latest/gitcredentials.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`, `awsCodeCommit`.
	GitProvider pulumi.StringInput
	// user name at Git provider.
	GitUsername pulumi.StringPtrInput
	// The personal access token used to authenticate to the corresponding Git provider. If value is not provided, it's sourced from the first environment variable of `GITHUB_TOKEN`, that has a non-empty value.
	PersonalAccessToken pulumi.StringPtrInput
}

func (GitCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitCredentialArgs)(nil)).Elem()
}

type GitCredentialInput interface {
	pulumi.Input

	ToGitCredentialOutput() GitCredentialOutput
	ToGitCredentialOutputWithContext(ctx context.Context) GitCredentialOutput
}

func (*GitCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**GitCredential)(nil)).Elem()
}

func (i *GitCredential) ToGitCredentialOutput() GitCredentialOutput {
	return i.ToGitCredentialOutputWithContext(context.Background())
}

func (i *GitCredential) ToGitCredentialOutputWithContext(ctx context.Context) GitCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitCredentialOutput)
}

// GitCredentialArrayInput is an input type that accepts GitCredentialArray and GitCredentialArrayOutput values.
// You can construct a concrete instance of `GitCredentialArrayInput` via:
//
//	GitCredentialArray{ GitCredentialArgs{...} }
type GitCredentialArrayInput interface {
	pulumi.Input

	ToGitCredentialArrayOutput() GitCredentialArrayOutput
	ToGitCredentialArrayOutputWithContext(context.Context) GitCredentialArrayOutput
}

type GitCredentialArray []GitCredentialInput

func (GitCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitCredential)(nil)).Elem()
}

func (i GitCredentialArray) ToGitCredentialArrayOutput() GitCredentialArrayOutput {
	return i.ToGitCredentialArrayOutputWithContext(context.Background())
}

func (i GitCredentialArray) ToGitCredentialArrayOutputWithContext(ctx context.Context) GitCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitCredentialArrayOutput)
}

// GitCredentialMapInput is an input type that accepts GitCredentialMap and GitCredentialMapOutput values.
// You can construct a concrete instance of `GitCredentialMapInput` via:
//
//	GitCredentialMap{ "key": GitCredentialArgs{...} }
type GitCredentialMapInput interface {
	pulumi.Input

	ToGitCredentialMapOutput() GitCredentialMapOutput
	ToGitCredentialMapOutputWithContext(context.Context) GitCredentialMapOutput
}

type GitCredentialMap map[string]GitCredentialInput

func (GitCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitCredential)(nil)).Elem()
}

func (i GitCredentialMap) ToGitCredentialMapOutput() GitCredentialMapOutput {
	return i.ToGitCredentialMapOutputWithContext(context.Background())
}

func (i GitCredentialMap) ToGitCredentialMapOutputWithContext(ctx context.Context) GitCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitCredentialMapOutput)
}

type GitCredentialOutput struct{ *pulumi.OutputState }

func (GitCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitCredential)(nil)).Elem()
}

func (o GitCredentialOutput) ToGitCredentialOutput() GitCredentialOutput {
	return o
}

func (o GitCredentialOutput) ToGitCredentialOutputWithContext(ctx context.Context) GitCredentialOutput {
	return o
}

// specify if settings need to be enforced - right now, Databricks allows only single Git credential, so if it's already configured, the apply operation will fail.
func (o GitCredentialOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitCredential) pulumi.BoolPtrOutput { return v.Force }).(pulumi.BoolPtrOutput)
}

// case insensitive name of the Git provider.  Following values are supported right now (could be a subject for a change, consult [Git Credentials API documentation](https://docs.databricks.com/dev-tools/api/latest/gitcredentials.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`, `awsCodeCommit`.
func (o GitCredentialOutput) GitProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *GitCredential) pulumi.StringOutput { return v.GitProvider }).(pulumi.StringOutput)
}

// user name at Git provider.
func (o GitCredentialOutput) GitUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitCredential) pulumi.StringPtrOutput { return v.GitUsername }).(pulumi.StringPtrOutput)
}

// The personal access token used to authenticate to the corresponding Git provider. If value is not provided, it's sourced from the first environment variable of `GITHUB_TOKEN`, that has a non-empty value.
func (o GitCredentialOutput) PersonalAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitCredential) pulumi.StringPtrOutput { return v.PersonalAccessToken }).(pulumi.StringPtrOutput)
}

type GitCredentialArrayOutput struct{ *pulumi.OutputState }

func (GitCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitCredential)(nil)).Elem()
}

func (o GitCredentialArrayOutput) ToGitCredentialArrayOutput() GitCredentialArrayOutput {
	return o
}

func (o GitCredentialArrayOutput) ToGitCredentialArrayOutputWithContext(ctx context.Context) GitCredentialArrayOutput {
	return o
}

func (o GitCredentialArrayOutput) Index(i pulumi.IntInput) GitCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitCredential {
		return vs[0].([]*GitCredential)[vs[1].(int)]
	}).(GitCredentialOutput)
}

type GitCredentialMapOutput struct{ *pulumi.OutputState }

func (GitCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitCredential)(nil)).Elem()
}

func (o GitCredentialMapOutput) ToGitCredentialMapOutput() GitCredentialMapOutput {
	return o
}

func (o GitCredentialMapOutput) ToGitCredentialMapOutputWithContext(ctx context.Context) GitCredentialMapOutput {
	return o
}

func (o GitCredentialMapOutput) MapIndex(k pulumi.StringInput) GitCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitCredential {
		return vs[0].(map[string]*GitCredential)[vs[1].(string)]
	}).(GitCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitCredentialInput)(nil)).Elem(), &GitCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitCredentialArrayInput)(nil)).Elem(), GitCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitCredentialMapInput)(nil)).Elem(), GitCredentialMap{})
	pulumi.RegisterOutputType(GitCredentialOutput{})
	pulumi.RegisterOutputType(GitCredentialArrayOutput{})
	pulumi.RegisterOutputType(GitCredentialMapOutput{})
}
