// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Users with MANAGE Schema can use quality monitor v2 to set up data quality monitoring checks for UC objects, currently support schema.
//
// > **Note** This resource can only be used with an workspace-level provider!
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			this, err := databricks.NewSchema(ctx, "this", &databricks.SchemaArgs{
//				CatalogName: pulumi.String("my_catalog"),
//				Name:        pulumi.String("my_schema"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewQualityMonitorV2(ctx, "this", &databricks.QualityMonitorV2Args{
//				ObjectType: pulumi.String("schema"),
//				ObjectId:   this.SchemaId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// As of Pulumi v1.5, resources can be imported through configuration.
//
// hcl
//
// import {
//
//	id = object_type,object_id
//
//	to = databricks_quality_monitor_v2.this
//
// }
//
// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
//
// ```sh
// $ pulumi import databricks:index/qualityMonitorV2:QualityMonitorV2 databricks_quality_monitor_v2 object_type,object_id
// ```
type QualityMonitorV2 struct {
	pulumi.CustomResourceState

	// (AnomalyDetectionConfig) -
	AnomalyDetectionConfig QualityMonitorV2AnomalyDetectionConfigOutput `pulumi:"anomalyDetectionConfig"`
	// The uuid of the request object. For example, schema id
	ObjectId pulumi.StringOutput `pulumi:"objectId"`
	// The type of the monitored object. Can be one of the following: schema
	ObjectType pulumi.StringOutput `pulumi:"objectType"`
}

// NewQualityMonitorV2 registers a new resource with the given unique name, arguments, and options.
func NewQualityMonitorV2(ctx *pulumi.Context,
	name string, args *QualityMonitorV2Args, opts ...pulumi.ResourceOption) (*QualityMonitorV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ObjectId == nil {
		return nil, errors.New("invalid value for required argument 'ObjectId'")
	}
	if args.ObjectType == nil {
		return nil, errors.New("invalid value for required argument 'ObjectType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QualityMonitorV2
	err := ctx.RegisterResource("databricks:index/qualityMonitorV2:QualityMonitorV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQualityMonitorV2 gets an existing QualityMonitorV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQualityMonitorV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QualityMonitorV2State, opts ...pulumi.ResourceOption) (*QualityMonitorV2, error) {
	var resource QualityMonitorV2
	err := ctx.ReadResource("databricks:index/qualityMonitorV2:QualityMonitorV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QualityMonitorV2 resources.
type qualityMonitorV2State struct {
	// (AnomalyDetectionConfig) -
	AnomalyDetectionConfig *QualityMonitorV2AnomalyDetectionConfig `pulumi:"anomalyDetectionConfig"`
	// The uuid of the request object. For example, schema id
	ObjectId *string `pulumi:"objectId"`
	// The type of the monitored object. Can be one of the following: schema
	ObjectType *string `pulumi:"objectType"`
}

type QualityMonitorV2State struct {
	// (AnomalyDetectionConfig) -
	AnomalyDetectionConfig QualityMonitorV2AnomalyDetectionConfigPtrInput
	// The uuid of the request object. For example, schema id
	ObjectId pulumi.StringPtrInput
	// The type of the monitored object. Can be one of the following: schema
	ObjectType pulumi.StringPtrInput
}

func (QualityMonitorV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*qualityMonitorV2State)(nil)).Elem()
}

type qualityMonitorV2Args struct {
	// The uuid of the request object. For example, schema id
	ObjectId string `pulumi:"objectId"`
	// The type of the monitored object. Can be one of the following: schema
	ObjectType string `pulumi:"objectType"`
}

// The set of arguments for constructing a QualityMonitorV2 resource.
type QualityMonitorV2Args struct {
	// The uuid of the request object. For example, schema id
	ObjectId pulumi.StringInput
	// The type of the monitored object. Can be one of the following: schema
	ObjectType pulumi.StringInput
}

func (QualityMonitorV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*qualityMonitorV2Args)(nil)).Elem()
}

type QualityMonitorV2Input interface {
	pulumi.Input

	ToQualityMonitorV2Output() QualityMonitorV2Output
	ToQualityMonitorV2OutputWithContext(ctx context.Context) QualityMonitorV2Output
}

func (*QualityMonitorV2) ElementType() reflect.Type {
	return reflect.TypeOf((**QualityMonitorV2)(nil)).Elem()
}

func (i *QualityMonitorV2) ToQualityMonitorV2Output() QualityMonitorV2Output {
	return i.ToQualityMonitorV2OutputWithContext(context.Background())
}

func (i *QualityMonitorV2) ToQualityMonitorV2OutputWithContext(ctx context.Context) QualityMonitorV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(QualityMonitorV2Output)
}

// QualityMonitorV2ArrayInput is an input type that accepts QualityMonitorV2Array and QualityMonitorV2ArrayOutput values.
// You can construct a concrete instance of `QualityMonitorV2ArrayInput` via:
//
//	QualityMonitorV2Array{ QualityMonitorV2Args{...} }
type QualityMonitorV2ArrayInput interface {
	pulumi.Input

	ToQualityMonitorV2ArrayOutput() QualityMonitorV2ArrayOutput
	ToQualityMonitorV2ArrayOutputWithContext(context.Context) QualityMonitorV2ArrayOutput
}

type QualityMonitorV2Array []QualityMonitorV2Input

func (QualityMonitorV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QualityMonitorV2)(nil)).Elem()
}

func (i QualityMonitorV2Array) ToQualityMonitorV2ArrayOutput() QualityMonitorV2ArrayOutput {
	return i.ToQualityMonitorV2ArrayOutputWithContext(context.Background())
}

func (i QualityMonitorV2Array) ToQualityMonitorV2ArrayOutputWithContext(ctx context.Context) QualityMonitorV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualityMonitorV2ArrayOutput)
}

// QualityMonitorV2MapInput is an input type that accepts QualityMonitorV2Map and QualityMonitorV2MapOutput values.
// You can construct a concrete instance of `QualityMonitorV2MapInput` via:
//
//	QualityMonitorV2Map{ "key": QualityMonitorV2Args{...} }
type QualityMonitorV2MapInput interface {
	pulumi.Input

	ToQualityMonitorV2MapOutput() QualityMonitorV2MapOutput
	ToQualityMonitorV2MapOutputWithContext(context.Context) QualityMonitorV2MapOutput
}

type QualityMonitorV2Map map[string]QualityMonitorV2Input

func (QualityMonitorV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QualityMonitorV2)(nil)).Elem()
}

func (i QualityMonitorV2Map) ToQualityMonitorV2MapOutput() QualityMonitorV2MapOutput {
	return i.ToQualityMonitorV2MapOutputWithContext(context.Background())
}

func (i QualityMonitorV2Map) ToQualityMonitorV2MapOutputWithContext(ctx context.Context) QualityMonitorV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QualityMonitorV2MapOutput)
}

type QualityMonitorV2Output struct{ *pulumi.OutputState }

func (QualityMonitorV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**QualityMonitorV2)(nil)).Elem()
}

func (o QualityMonitorV2Output) ToQualityMonitorV2Output() QualityMonitorV2Output {
	return o
}

func (o QualityMonitorV2Output) ToQualityMonitorV2OutputWithContext(ctx context.Context) QualityMonitorV2Output {
	return o
}

// (AnomalyDetectionConfig) -
func (o QualityMonitorV2Output) AnomalyDetectionConfig() QualityMonitorV2AnomalyDetectionConfigOutput {
	return o.ApplyT(func(v *QualityMonitorV2) QualityMonitorV2AnomalyDetectionConfigOutput {
		return v.AnomalyDetectionConfig
	}).(QualityMonitorV2AnomalyDetectionConfigOutput)
}

// The uuid of the request object. For example, schema id
func (o QualityMonitorV2Output) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *QualityMonitorV2) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

// The type of the monitored object. Can be one of the following: schema
func (o QualityMonitorV2Output) ObjectType() pulumi.StringOutput {
	return o.ApplyT(func(v *QualityMonitorV2) pulumi.StringOutput { return v.ObjectType }).(pulumi.StringOutput)
}

type QualityMonitorV2ArrayOutput struct{ *pulumi.OutputState }

func (QualityMonitorV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QualityMonitorV2)(nil)).Elem()
}

func (o QualityMonitorV2ArrayOutput) ToQualityMonitorV2ArrayOutput() QualityMonitorV2ArrayOutput {
	return o
}

func (o QualityMonitorV2ArrayOutput) ToQualityMonitorV2ArrayOutputWithContext(ctx context.Context) QualityMonitorV2ArrayOutput {
	return o
}

func (o QualityMonitorV2ArrayOutput) Index(i pulumi.IntInput) QualityMonitorV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QualityMonitorV2 {
		return vs[0].([]*QualityMonitorV2)[vs[1].(int)]
	}).(QualityMonitorV2Output)
}

type QualityMonitorV2MapOutput struct{ *pulumi.OutputState }

func (QualityMonitorV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QualityMonitorV2)(nil)).Elem()
}

func (o QualityMonitorV2MapOutput) ToQualityMonitorV2MapOutput() QualityMonitorV2MapOutput {
	return o
}

func (o QualityMonitorV2MapOutput) ToQualityMonitorV2MapOutputWithContext(ctx context.Context) QualityMonitorV2MapOutput {
	return o
}

func (o QualityMonitorV2MapOutput) MapIndex(k pulumi.StringInput) QualityMonitorV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QualityMonitorV2 {
		return vs[0].(map[string]*QualityMonitorV2)[vs[1].(string)]
	}).(QualityMonitorV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QualityMonitorV2Input)(nil)).Elem(), &QualityMonitorV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*QualityMonitorV2ArrayInput)(nil)).Elem(), QualityMonitorV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*QualityMonitorV2MapInput)(nil)).Elem(), QualityMonitorV2Map{})
	pulumi.RegisterOutputType(QualityMonitorV2Output{})
	pulumi.RegisterOutputType(QualityMonitorV2ArrayOutput{})
	pulumi.RegisterOutputType(QualityMonitorV2MapOutput{})
}
