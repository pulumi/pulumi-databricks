// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AwsS3Mount struct {
	pulumi.CustomResourceState

	ClusterId       pulumi.StringOutput    `pulumi:"clusterId"`
	InstanceProfile pulumi.StringPtrOutput `pulumi:"instanceProfile"`
	MountName       pulumi.StringOutput    `pulumi:"mountName"`
	S3BucketName    pulumi.StringOutput    `pulumi:"s3BucketName"`
	Source          pulumi.StringOutput    `pulumi:"source"`
}

// NewAwsS3Mount registers a new resource with the given unique name, arguments, and options.
func NewAwsS3Mount(ctx *pulumi.Context,
	name string, args *AwsS3MountArgs, opts ...pulumi.ResourceOption) (*AwsS3Mount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MountName == nil {
		return nil, errors.New("invalid value for required argument 'MountName'")
	}
	if args.S3BucketName == nil {
		return nil, errors.New("invalid value for required argument 'S3BucketName'")
	}
	var resource AwsS3Mount
	err := ctx.RegisterResource("databricks:index/awsS3Mount:AwsS3Mount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsS3Mount gets an existing AwsS3Mount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsS3Mount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsS3MountState, opts ...pulumi.ResourceOption) (*AwsS3Mount, error) {
	var resource AwsS3Mount
	err := ctx.ReadResource("databricks:index/awsS3Mount:AwsS3Mount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsS3Mount resources.
type awsS3MountState struct {
	ClusterId       *string `pulumi:"clusterId"`
	InstanceProfile *string `pulumi:"instanceProfile"`
	MountName       *string `pulumi:"mountName"`
	S3BucketName    *string `pulumi:"s3BucketName"`
	Source          *string `pulumi:"source"`
}

type AwsS3MountState struct {
	ClusterId       pulumi.StringPtrInput
	InstanceProfile pulumi.StringPtrInput
	MountName       pulumi.StringPtrInput
	S3BucketName    pulumi.StringPtrInput
	Source          pulumi.StringPtrInput
}

func (AwsS3MountState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsS3MountState)(nil)).Elem()
}

type awsS3MountArgs struct {
	ClusterId       *string `pulumi:"clusterId"`
	InstanceProfile *string `pulumi:"instanceProfile"`
	MountName       string  `pulumi:"mountName"`
	S3BucketName    string  `pulumi:"s3BucketName"`
}

// The set of arguments for constructing a AwsS3Mount resource.
type AwsS3MountArgs struct {
	ClusterId       pulumi.StringPtrInput
	InstanceProfile pulumi.StringPtrInput
	MountName       pulumi.StringInput
	S3BucketName    pulumi.StringInput
}

func (AwsS3MountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsS3MountArgs)(nil)).Elem()
}

type AwsS3MountInput interface {
	pulumi.Input

	ToAwsS3MountOutput() AwsS3MountOutput
	ToAwsS3MountOutputWithContext(ctx context.Context) AwsS3MountOutput
}

func (*AwsS3Mount) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsS3Mount)(nil)).Elem()
}

func (i *AwsS3Mount) ToAwsS3MountOutput() AwsS3MountOutput {
	return i.ToAwsS3MountOutputWithContext(context.Background())
}

func (i *AwsS3Mount) ToAwsS3MountOutputWithContext(ctx context.Context) AwsS3MountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsS3MountOutput)
}

// AwsS3MountArrayInput is an input type that accepts AwsS3MountArray and AwsS3MountArrayOutput values.
// You can construct a concrete instance of `AwsS3MountArrayInput` via:
//
//	AwsS3MountArray{ AwsS3MountArgs{...} }
type AwsS3MountArrayInput interface {
	pulumi.Input

	ToAwsS3MountArrayOutput() AwsS3MountArrayOutput
	ToAwsS3MountArrayOutputWithContext(context.Context) AwsS3MountArrayOutput
}

type AwsS3MountArray []AwsS3MountInput

func (AwsS3MountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsS3Mount)(nil)).Elem()
}

func (i AwsS3MountArray) ToAwsS3MountArrayOutput() AwsS3MountArrayOutput {
	return i.ToAwsS3MountArrayOutputWithContext(context.Background())
}

func (i AwsS3MountArray) ToAwsS3MountArrayOutputWithContext(ctx context.Context) AwsS3MountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsS3MountArrayOutput)
}

// AwsS3MountMapInput is an input type that accepts AwsS3MountMap and AwsS3MountMapOutput values.
// You can construct a concrete instance of `AwsS3MountMapInput` via:
//
//	AwsS3MountMap{ "key": AwsS3MountArgs{...} }
type AwsS3MountMapInput interface {
	pulumi.Input

	ToAwsS3MountMapOutput() AwsS3MountMapOutput
	ToAwsS3MountMapOutputWithContext(context.Context) AwsS3MountMapOutput
}

type AwsS3MountMap map[string]AwsS3MountInput

func (AwsS3MountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsS3Mount)(nil)).Elem()
}

func (i AwsS3MountMap) ToAwsS3MountMapOutput() AwsS3MountMapOutput {
	return i.ToAwsS3MountMapOutputWithContext(context.Background())
}

func (i AwsS3MountMap) ToAwsS3MountMapOutputWithContext(ctx context.Context) AwsS3MountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsS3MountMapOutput)
}

type AwsS3MountOutput struct{ *pulumi.OutputState }

func (AwsS3MountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsS3Mount)(nil)).Elem()
}

func (o AwsS3MountOutput) ToAwsS3MountOutput() AwsS3MountOutput {
	return o
}

func (o AwsS3MountOutput) ToAwsS3MountOutputWithContext(ctx context.Context) AwsS3MountOutput {
	return o
}

func (o AwsS3MountOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsS3Mount) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o AwsS3MountOutput) InstanceProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsS3Mount) pulumi.StringPtrOutput { return v.InstanceProfile }).(pulumi.StringPtrOutput)
}

func (o AwsS3MountOutput) MountName() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsS3Mount) pulumi.StringOutput { return v.MountName }).(pulumi.StringOutput)
}

func (o AwsS3MountOutput) S3BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsS3Mount) pulumi.StringOutput { return v.S3BucketName }).(pulumi.StringOutput)
}

func (o AwsS3MountOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsS3Mount) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

type AwsS3MountArrayOutput struct{ *pulumi.OutputState }

func (AwsS3MountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsS3Mount)(nil)).Elem()
}

func (o AwsS3MountArrayOutput) ToAwsS3MountArrayOutput() AwsS3MountArrayOutput {
	return o
}

func (o AwsS3MountArrayOutput) ToAwsS3MountArrayOutputWithContext(ctx context.Context) AwsS3MountArrayOutput {
	return o
}

func (o AwsS3MountArrayOutput) Index(i pulumi.IntInput) AwsS3MountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsS3Mount {
		return vs[0].([]*AwsS3Mount)[vs[1].(int)]
	}).(AwsS3MountOutput)
}

type AwsS3MountMapOutput struct{ *pulumi.OutputState }

func (AwsS3MountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsS3Mount)(nil)).Elem()
}

func (o AwsS3MountMapOutput) ToAwsS3MountMapOutput() AwsS3MountMapOutput {
	return o
}

func (o AwsS3MountMapOutput) ToAwsS3MountMapOutputWithContext(ctx context.Context) AwsS3MountMapOutput {
	return o
}

func (o AwsS3MountMapOutput) MapIndex(k pulumi.StringInput) AwsS3MountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsS3Mount {
		return vs[0].(map[string]*AwsS3Mount)[vs[1].(string)]
	}).(AwsS3MountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsS3MountInput)(nil)).Elem(), &AwsS3Mount{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsS3MountArrayInput)(nil)).Elem(), AwsS3MountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsS3MountMapInput)(nil)).Elem(), AwsS3MountMap{})
	pulumi.RegisterOutputType(AwsS3MountOutput{})
	pulumi.RegisterOutputType(AwsS3MountArrayOutput{})
	pulumi.RegisterOutputType(AwsS3MountMapOutput{})
}
