// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to manage Databricks [Dashboards](https://docs.databricks.com/en/dashboards/index.html). To manage [Dashboards](https://docs.databricks.com/en/dashboards/index.html) you must have a warehouse access on your databricks workspace.
//
// > This resource can only be used with a workspace-level provider!
//
// ## Example Usage
//
// Dashboard using `serializedDashboard` attribute:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			starter, err := databricks.GetSqlWarehouse(ctx, &databricks.GetSqlWarehouseArgs{
//				Name: pulumi.StringRef("Starter Warehouse"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewDashboard(ctx, "dashboard", &databricks.DashboardArgs{
//				DisplayName:         pulumi.String("New Dashboard"),
//				WarehouseId:         pulumi.String(starter.Id),
//				SerializedDashboard: pulumi.String("{\"pages\":[{\"name\":\"new_name\",\"displayName\":\"New Page\"}]}"),
//				EmbedCredentials:    pulumi.Bool(false),
//				ParentPath:          pulumi.String("/Shared/provider-test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Dashboard using `filePath` attribute:
//
// ## Import
//
// You can import a `databricks_dashboard` resource with ID like the following:
//
// hcl
//
// import {
//
//	to = databricks_dashboard.this
//
//	id = "<dashboard-id>"
//
// }
//
// Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
//
// bash
//
// ```sh
// $ pulumi import databricks:index/dashboard:Dashboard this <dashboard-id>
// ```
type Dashboard struct {
	pulumi.CustomResourceState

	CreateTime              pulumi.StringOutput  `pulumi:"createTime"`
	DashboardChangeDetected pulumi.BoolPtrOutput `pulumi:"dashboardChangeDetected"`
	DashboardId             pulumi.StringOutput  `pulumi:"dashboardId"`
	// The display name of the dashboard.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Whether to embed credentials in the dashboard. Default is `true`.
	EmbedCredentials pulumi.BoolPtrOutput `pulumi:"embedCredentials"`
	Etag             pulumi.StringOutput  `pulumi:"etag"`
	// The path to the dashboard JSON file. Conflicts with `serializedDashboard`.
	FilePath       pulumi.StringPtrOutput `pulumi:"filePath"`
	LifecycleState pulumi.StringOutput    `pulumi:"lifecycleState"`
	Md5            pulumi.StringOutput    `pulumi:"md5"`
	// The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn't exist, it will be created.
	ParentPath pulumi.StringOutput `pulumi:"parentPath"`
	Path       pulumi.StringOutput `pulumi:"path"`
	// The contents of the dashboard in serialized string form. Conflicts with `filePath`.
	SerializedDashboard pulumi.StringPtrOutput `pulumi:"serializedDashboard"`
	UpdateTime          pulumi.StringOutput    `pulumi:"updateTime"`
	// The warehouse ID used to run the dashboard.
	WarehouseId pulumi.StringOutput `pulumi:"warehouseId"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.ParentPath == nil {
		return nil, errors.New("invalid value for required argument 'ParentPath'")
	}
	if args.WarehouseId == nil {
		return nil, errors.New("invalid value for required argument 'WarehouseId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dashboard
	err := ctx.RegisterResource("databricks:index/dashboard:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("databricks:index/dashboard:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
	CreateTime              *string `pulumi:"createTime"`
	DashboardChangeDetected *bool   `pulumi:"dashboardChangeDetected"`
	DashboardId             *string `pulumi:"dashboardId"`
	// The display name of the dashboard.
	DisplayName *string `pulumi:"displayName"`
	// Whether to embed credentials in the dashboard. Default is `true`.
	EmbedCredentials *bool   `pulumi:"embedCredentials"`
	Etag             *string `pulumi:"etag"`
	// The path to the dashboard JSON file. Conflicts with `serializedDashboard`.
	FilePath       *string `pulumi:"filePath"`
	LifecycleState *string `pulumi:"lifecycleState"`
	Md5            *string `pulumi:"md5"`
	// The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn't exist, it will be created.
	ParentPath *string `pulumi:"parentPath"`
	Path       *string `pulumi:"path"`
	// The contents of the dashboard in serialized string form. Conflicts with `filePath`.
	SerializedDashboard *string `pulumi:"serializedDashboard"`
	UpdateTime          *string `pulumi:"updateTime"`
	// The warehouse ID used to run the dashboard.
	WarehouseId *string `pulumi:"warehouseId"`
}

type DashboardState struct {
	CreateTime              pulumi.StringPtrInput
	DashboardChangeDetected pulumi.BoolPtrInput
	DashboardId             pulumi.StringPtrInput
	// The display name of the dashboard.
	DisplayName pulumi.StringPtrInput
	// Whether to embed credentials in the dashboard. Default is `true`.
	EmbedCredentials pulumi.BoolPtrInput
	Etag             pulumi.StringPtrInput
	// The path to the dashboard JSON file. Conflicts with `serializedDashboard`.
	FilePath       pulumi.StringPtrInput
	LifecycleState pulumi.StringPtrInput
	Md5            pulumi.StringPtrInput
	// The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn't exist, it will be created.
	ParentPath pulumi.StringPtrInput
	Path       pulumi.StringPtrInput
	// The contents of the dashboard in serialized string form. Conflicts with `filePath`.
	SerializedDashboard pulumi.StringPtrInput
	UpdateTime          pulumi.StringPtrInput
	// The warehouse ID used to run the dashboard.
	WarehouseId pulumi.StringPtrInput
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	CreateTime              *string `pulumi:"createTime"`
	DashboardChangeDetected *bool   `pulumi:"dashboardChangeDetected"`
	DashboardId             *string `pulumi:"dashboardId"`
	// The display name of the dashboard.
	DisplayName string `pulumi:"displayName"`
	// Whether to embed credentials in the dashboard. Default is `true`.
	EmbedCredentials *bool   `pulumi:"embedCredentials"`
	Etag             *string `pulumi:"etag"`
	// The path to the dashboard JSON file. Conflicts with `serializedDashboard`.
	FilePath       *string `pulumi:"filePath"`
	LifecycleState *string `pulumi:"lifecycleState"`
	Md5            *string `pulumi:"md5"`
	// The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn't exist, it will be created.
	ParentPath string  `pulumi:"parentPath"`
	Path       *string `pulumi:"path"`
	// The contents of the dashboard in serialized string form. Conflicts with `filePath`.
	SerializedDashboard *string `pulumi:"serializedDashboard"`
	UpdateTime          *string `pulumi:"updateTime"`
	// The warehouse ID used to run the dashboard.
	WarehouseId string `pulumi:"warehouseId"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	CreateTime              pulumi.StringPtrInput
	DashboardChangeDetected pulumi.BoolPtrInput
	DashboardId             pulumi.StringPtrInput
	// The display name of the dashboard.
	DisplayName pulumi.StringInput
	// Whether to embed credentials in the dashboard. Default is `true`.
	EmbedCredentials pulumi.BoolPtrInput
	Etag             pulumi.StringPtrInput
	// The path to the dashboard JSON file. Conflicts with `serializedDashboard`.
	FilePath       pulumi.StringPtrInput
	LifecycleState pulumi.StringPtrInput
	Md5            pulumi.StringPtrInput
	// The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn't exist, it will be created.
	ParentPath pulumi.StringInput
	Path       pulumi.StringPtrInput
	// The contents of the dashboard in serialized string form. Conflicts with `filePath`.
	SerializedDashboard pulumi.StringPtrInput
	UpdateTime          pulumi.StringPtrInput
	// The warehouse ID used to run the dashboard.
	WarehouseId pulumi.StringInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardInput interface {
	pulumi.Input

	ToDashboardOutput() DashboardOutput
	ToDashboardOutputWithContext(ctx context.Context) DashboardOutput
}

func (*Dashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (i *Dashboard) ToDashboardOutput() DashboardOutput {
	return i.ToDashboardOutputWithContext(context.Background())
}

func (i *Dashboard) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardOutput)
}

// DashboardArrayInput is an input type that accepts DashboardArray and DashboardArrayOutput values.
// You can construct a concrete instance of `DashboardArrayInput` via:
//
//	DashboardArray{ DashboardArgs{...} }
type DashboardArrayInput interface {
	pulumi.Input

	ToDashboardArrayOutput() DashboardArrayOutput
	ToDashboardArrayOutputWithContext(context.Context) DashboardArrayOutput
}

type DashboardArray []DashboardInput

func (DashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (i DashboardArray) ToDashboardArrayOutput() DashboardArrayOutput {
	return i.ToDashboardArrayOutputWithContext(context.Background())
}

func (i DashboardArray) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardArrayOutput)
}

// DashboardMapInput is an input type that accepts DashboardMap and DashboardMapOutput values.
// You can construct a concrete instance of `DashboardMapInput` via:
//
//	DashboardMap{ "key": DashboardArgs{...} }
type DashboardMapInput interface {
	pulumi.Input

	ToDashboardMapOutput() DashboardMapOutput
	ToDashboardMapOutputWithContext(context.Context) DashboardMapOutput
}

type DashboardMap map[string]DashboardInput

func (DashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (i DashboardMap) ToDashboardMapOutput() DashboardMapOutput {
	return i.ToDashboardMapOutputWithContext(context.Background())
}

func (i DashboardMap) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardMapOutput)
}

type DashboardOutput struct{ *pulumi.OutputState }

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

func (o DashboardOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o DashboardOutput) DashboardChangeDetected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.BoolPtrOutput { return v.DashboardChangeDetected }).(pulumi.BoolPtrOutput)
}

func (o DashboardOutput) DashboardId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.DashboardId }).(pulumi.StringOutput)
}

// The display name of the dashboard.
func (o DashboardOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether to embed credentials in the dashboard. Default is `true`.
func (o DashboardOutput) EmbedCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.BoolPtrOutput { return v.EmbedCredentials }).(pulumi.BoolPtrOutput)
}

func (o DashboardOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The path to the dashboard JSON file. Conflicts with `serializedDashboard`.
func (o DashboardOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringPtrOutput { return v.FilePath }).(pulumi.StringPtrOutput)
}

func (o DashboardOutput) LifecycleState() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.LifecycleState }).(pulumi.StringOutput)
}

func (o DashboardOutput) Md5() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Md5 }).(pulumi.StringOutput)
}

// The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn't exist, it will be created.
func (o DashboardOutput) ParentPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.ParentPath }).(pulumi.StringOutput)
}

func (o DashboardOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The contents of the dashboard in serialized string form. Conflicts with `filePath`.
func (o DashboardOutput) SerializedDashboard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringPtrOutput { return v.SerializedDashboard }).(pulumi.StringPtrOutput)
}

func (o DashboardOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The warehouse ID used to run the dashboard.
func (o DashboardOutput) WarehouseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.WarehouseId }).(pulumi.StringOutput)
}

type DashboardArrayOutput struct{ *pulumi.OutputState }

func (DashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (o DashboardArrayOutput) ToDashboardArrayOutput() DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) Index(i pulumi.IntInput) DashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].([]*Dashboard)[vs[1].(int)]
	}).(DashboardOutput)
}

type DashboardMapOutput struct{ *pulumi.OutputState }

func (DashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (o DashboardMapOutput) ToDashboardMapOutput() DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) MapIndex(k pulumi.StringInput) DashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].(map[string]*Dashboard)[vs[1].(string)]
	}).(DashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardInput)(nil)).Elem(), &Dashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardArrayInput)(nil)).Elem(), DashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardMapInput)(nil)).Elem(), DashboardMap{})
	pulumi.RegisterOutputType(DashboardOutput{})
	pulumi.RegisterOutputType(DashboardArrayOutput{})
	pulumi.RegisterOutputType(DashboardMapOutput{})
}
