// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type PermissionAssignment struct {
	pulumi.CustomResourceState

	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	PrincipalId pulumi.IntOutput         `pulumi:"principalId"`
}

// NewPermissionAssignment registers a new resource with the given unique name, arguments, and options.
func NewPermissionAssignment(ctx *pulumi.Context,
	name string, args *PermissionAssignmentArgs, opts ...pulumi.ResourceOption) (*PermissionAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.PrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PermissionAssignment
	err := ctx.RegisterResource("databricks:index/permissionAssignment:PermissionAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermissionAssignment gets an existing PermissionAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermissionAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionAssignmentState, opts ...pulumi.ResourceOption) (*PermissionAssignment, error) {
	var resource PermissionAssignment
	err := ctx.ReadResource("databricks:index/permissionAssignment:PermissionAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PermissionAssignment resources.
type permissionAssignmentState struct {
	Permissions []string `pulumi:"permissions"`
	PrincipalId *int     `pulumi:"principalId"`
}

type PermissionAssignmentState struct {
	Permissions pulumi.StringArrayInput
	PrincipalId pulumi.IntPtrInput
}

func (PermissionAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionAssignmentState)(nil)).Elem()
}

type permissionAssignmentArgs struct {
	Permissions []string `pulumi:"permissions"`
	PrincipalId int      `pulumi:"principalId"`
}

// The set of arguments for constructing a PermissionAssignment resource.
type PermissionAssignmentArgs struct {
	Permissions pulumi.StringArrayInput
	PrincipalId pulumi.IntInput
}

func (PermissionAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionAssignmentArgs)(nil)).Elem()
}

type PermissionAssignmentInput interface {
	pulumi.Input

	ToPermissionAssignmentOutput() PermissionAssignmentOutput
	ToPermissionAssignmentOutputWithContext(ctx context.Context) PermissionAssignmentOutput
}

func (*PermissionAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionAssignment)(nil)).Elem()
}

func (i *PermissionAssignment) ToPermissionAssignmentOutput() PermissionAssignmentOutput {
	return i.ToPermissionAssignmentOutputWithContext(context.Background())
}

func (i *PermissionAssignment) ToPermissionAssignmentOutputWithContext(ctx context.Context) PermissionAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionAssignmentOutput)
}

func (i *PermissionAssignment) ToOutput(ctx context.Context) pulumix.Output[*PermissionAssignment] {
	return pulumix.Output[*PermissionAssignment]{
		OutputState: i.ToPermissionAssignmentOutputWithContext(ctx).OutputState,
	}
}

// PermissionAssignmentArrayInput is an input type that accepts PermissionAssignmentArray and PermissionAssignmentArrayOutput values.
// You can construct a concrete instance of `PermissionAssignmentArrayInput` via:
//
//	PermissionAssignmentArray{ PermissionAssignmentArgs{...} }
type PermissionAssignmentArrayInput interface {
	pulumi.Input

	ToPermissionAssignmentArrayOutput() PermissionAssignmentArrayOutput
	ToPermissionAssignmentArrayOutputWithContext(context.Context) PermissionAssignmentArrayOutput
}

type PermissionAssignmentArray []PermissionAssignmentInput

func (PermissionAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionAssignment)(nil)).Elem()
}

func (i PermissionAssignmentArray) ToPermissionAssignmentArrayOutput() PermissionAssignmentArrayOutput {
	return i.ToPermissionAssignmentArrayOutputWithContext(context.Background())
}

func (i PermissionAssignmentArray) ToPermissionAssignmentArrayOutputWithContext(ctx context.Context) PermissionAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionAssignmentArrayOutput)
}

func (i PermissionAssignmentArray) ToOutput(ctx context.Context) pulumix.Output[[]*PermissionAssignment] {
	return pulumix.Output[[]*PermissionAssignment]{
		OutputState: i.ToPermissionAssignmentArrayOutputWithContext(ctx).OutputState,
	}
}

// PermissionAssignmentMapInput is an input type that accepts PermissionAssignmentMap and PermissionAssignmentMapOutput values.
// You can construct a concrete instance of `PermissionAssignmentMapInput` via:
//
//	PermissionAssignmentMap{ "key": PermissionAssignmentArgs{...} }
type PermissionAssignmentMapInput interface {
	pulumi.Input

	ToPermissionAssignmentMapOutput() PermissionAssignmentMapOutput
	ToPermissionAssignmentMapOutputWithContext(context.Context) PermissionAssignmentMapOutput
}

type PermissionAssignmentMap map[string]PermissionAssignmentInput

func (PermissionAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionAssignment)(nil)).Elem()
}

func (i PermissionAssignmentMap) ToPermissionAssignmentMapOutput() PermissionAssignmentMapOutput {
	return i.ToPermissionAssignmentMapOutputWithContext(context.Background())
}

func (i PermissionAssignmentMap) ToPermissionAssignmentMapOutputWithContext(ctx context.Context) PermissionAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionAssignmentMapOutput)
}

func (i PermissionAssignmentMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PermissionAssignment] {
	return pulumix.Output[map[string]*PermissionAssignment]{
		OutputState: i.ToPermissionAssignmentMapOutputWithContext(ctx).OutputState,
	}
}

type PermissionAssignmentOutput struct{ *pulumi.OutputState }

func (PermissionAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionAssignment)(nil)).Elem()
}

func (o PermissionAssignmentOutput) ToPermissionAssignmentOutput() PermissionAssignmentOutput {
	return o
}

func (o PermissionAssignmentOutput) ToPermissionAssignmentOutputWithContext(ctx context.Context) PermissionAssignmentOutput {
	return o
}

func (o PermissionAssignmentOutput) ToOutput(ctx context.Context) pulumix.Output[*PermissionAssignment] {
	return pulumix.Output[*PermissionAssignment]{
		OutputState: o.OutputState,
	}
}

func (o PermissionAssignmentOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionAssignment) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

func (o PermissionAssignmentOutput) PrincipalId() pulumi.IntOutput {
	return o.ApplyT(func(v *PermissionAssignment) pulumi.IntOutput { return v.PrincipalId }).(pulumi.IntOutput)
}

type PermissionAssignmentArrayOutput struct{ *pulumi.OutputState }

func (PermissionAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionAssignment)(nil)).Elem()
}

func (o PermissionAssignmentArrayOutput) ToPermissionAssignmentArrayOutput() PermissionAssignmentArrayOutput {
	return o
}

func (o PermissionAssignmentArrayOutput) ToPermissionAssignmentArrayOutputWithContext(ctx context.Context) PermissionAssignmentArrayOutput {
	return o
}

func (o PermissionAssignmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PermissionAssignment] {
	return pulumix.Output[[]*PermissionAssignment]{
		OutputState: o.OutputState,
	}
}

func (o PermissionAssignmentArrayOutput) Index(i pulumi.IntInput) PermissionAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PermissionAssignment {
		return vs[0].([]*PermissionAssignment)[vs[1].(int)]
	}).(PermissionAssignmentOutput)
}

type PermissionAssignmentMapOutput struct{ *pulumi.OutputState }

func (PermissionAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionAssignment)(nil)).Elem()
}

func (o PermissionAssignmentMapOutput) ToPermissionAssignmentMapOutput() PermissionAssignmentMapOutput {
	return o
}

func (o PermissionAssignmentMapOutput) ToPermissionAssignmentMapOutputWithContext(ctx context.Context) PermissionAssignmentMapOutput {
	return o
}

func (o PermissionAssignmentMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PermissionAssignment] {
	return pulumix.Output[map[string]*PermissionAssignment]{
		OutputState: o.OutputState,
	}
}

func (o PermissionAssignmentMapOutput) MapIndex(k pulumi.StringInput) PermissionAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PermissionAssignment {
		return vs[0].(map[string]*PermissionAssignment)[vs[1].(string)]
	}).(PermissionAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionAssignmentInput)(nil)).Elem(), &PermissionAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionAssignmentArrayInput)(nil)).Elem(), PermissionAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionAssignmentMapInput)(nil)).Elem(), PermissionAssignmentMap{})
	pulumi.RegisterOutputType(PermissionAssignmentOutput{})
	pulumi.RegisterOutputType(PermissionAssignmentArrayOutput{})
	pulumi.RegisterOutputType(PermissionAssignmentMapOutput{})
}
