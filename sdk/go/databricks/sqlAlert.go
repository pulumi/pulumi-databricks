// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource allows you to manage [Databricks SQL Alerts](https://docs.databricks.com/sql/user/queries/index.html).
//
// **Note:** To manage [SQLA resources](https://docs.databricks.com/sql/get-started/concepts.html) you must have `databricksSqlAccess` on your Group or databricks_user.
//
// ## Related Resources
//
// The following resources are often used in the same context:
//
// * End to end workspace management guide.
// * SqlQuery to manage Databricks SQL [Queries](https://docs.databricks.com/sql/user/queries/index.html).
// * SqlEndpoint to manage Databricks SQL [Endpoints](https://docs.databricks.com/sql/admin/sql-endpoints.html).
// * Directory to manage directories in [Databricks Workpace](https://docs.databricks.com/workspace/workspace-objects.html).
type SqlAlert struct {
	pulumi.CustomResourceState

	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Name of the alert.
	Name pulumi.StringOutput `pulumi:"name"`
	// Alert configuration options.
	Options SqlAlertOptionsOutput `pulumi:"options"`
	// The identifier of the workspace folder containing the alert. The default is ther user's home folder. The folder identifier is formatted as `folder/<folder_id>`.
	Parent pulumi.StringPtrOutput `pulumi:"parent"`
	// ID of the query evaluated by the alert.
	QueryId pulumi.StringOutput `pulumi:"queryId"`
	// Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
	Rearm     pulumi.IntPtrOutput `pulumi:"rearm"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewSqlAlert registers a new resource with the given unique name, arguments, and options.
func NewSqlAlert(ctx *pulumi.Context,
	name string, args *SqlAlertArgs, opts ...pulumi.ResourceOption) (*SqlAlert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Options == nil {
		return nil, errors.New("invalid value for required argument 'Options'")
	}
	if args.QueryId == nil {
		return nil, errors.New("invalid value for required argument 'QueryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlAlert
	err := ctx.RegisterResource("databricks:index/sqlAlert:SqlAlert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlAlert gets an existing SqlAlert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlAlertState, opts ...pulumi.ResourceOption) (*SqlAlert, error) {
	var resource SqlAlert
	err := ctx.ReadResource("databricks:index/sqlAlert:SqlAlert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlAlert resources.
type sqlAlertState struct {
	CreatedAt *string `pulumi:"createdAt"`
	// Name of the alert.
	Name *string `pulumi:"name"`
	// Alert configuration options.
	Options *SqlAlertOptions `pulumi:"options"`
	// The identifier of the workspace folder containing the alert. The default is ther user's home folder. The folder identifier is formatted as `folder/<folder_id>`.
	Parent *string `pulumi:"parent"`
	// ID of the query evaluated by the alert.
	QueryId *string `pulumi:"queryId"`
	// Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
	Rearm     *int    `pulumi:"rearm"`
	UpdatedAt *string `pulumi:"updatedAt"`
}

type SqlAlertState struct {
	CreatedAt pulumi.StringPtrInput
	// Name of the alert.
	Name pulumi.StringPtrInput
	// Alert configuration options.
	Options SqlAlertOptionsPtrInput
	// The identifier of the workspace folder containing the alert. The default is ther user's home folder. The folder identifier is formatted as `folder/<folder_id>`.
	Parent pulumi.StringPtrInput
	// ID of the query evaluated by the alert.
	QueryId pulumi.StringPtrInput
	// Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
	Rearm     pulumi.IntPtrInput
	UpdatedAt pulumi.StringPtrInput
}

func (SqlAlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlAlertState)(nil)).Elem()
}

type sqlAlertArgs struct {
	CreatedAt *string `pulumi:"createdAt"`
	// Name of the alert.
	Name *string `pulumi:"name"`
	// Alert configuration options.
	Options SqlAlertOptions `pulumi:"options"`
	// The identifier of the workspace folder containing the alert. The default is ther user's home folder. The folder identifier is formatted as `folder/<folder_id>`.
	Parent *string `pulumi:"parent"`
	// ID of the query evaluated by the alert.
	QueryId string `pulumi:"queryId"`
	// Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
	Rearm     *int    `pulumi:"rearm"`
	UpdatedAt *string `pulumi:"updatedAt"`
}

// The set of arguments for constructing a SqlAlert resource.
type SqlAlertArgs struct {
	CreatedAt pulumi.StringPtrInput
	// Name of the alert.
	Name pulumi.StringPtrInput
	// Alert configuration options.
	Options SqlAlertOptionsInput
	// The identifier of the workspace folder containing the alert. The default is ther user's home folder. The folder identifier is formatted as `folder/<folder_id>`.
	Parent pulumi.StringPtrInput
	// ID of the query evaluated by the alert.
	QueryId pulumi.StringInput
	// Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
	Rearm     pulumi.IntPtrInput
	UpdatedAt pulumi.StringPtrInput
}

func (SqlAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlAlertArgs)(nil)).Elem()
}

type SqlAlertInput interface {
	pulumi.Input

	ToSqlAlertOutput() SqlAlertOutput
	ToSqlAlertOutputWithContext(ctx context.Context) SqlAlertOutput
}

func (*SqlAlert) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlAlert)(nil)).Elem()
}

func (i *SqlAlert) ToSqlAlertOutput() SqlAlertOutput {
	return i.ToSqlAlertOutputWithContext(context.Background())
}

func (i *SqlAlert) ToSqlAlertOutputWithContext(ctx context.Context) SqlAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlAlertOutput)
}

func (i *SqlAlert) ToOutput(ctx context.Context) pulumix.Output[*SqlAlert] {
	return pulumix.Output[*SqlAlert]{
		OutputState: i.ToSqlAlertOutputWithContext(ctx).OutputState,
	}
}

// SqlAlertArrayInput is an input type that accepts SqlAlertArray and SqlAlertArrayOutput values.
// You can construct a concrete instance of `SqlAlertArrayInput` via:
//
//	SqlAlertArray{ SqlAlertArgs{...} }
type SqlAlertArrayInput interface {
	pulumi.Input

	ToSqlAlertArrayOutput() SqlAlertArrayOutput
	ToSqlAlertArrayOutputWithContext(context.Context) SqlAlertArrayOutput
}

type SqlAlertArray []SqlAlertInput

func (SqlAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlAlert)(nil)).Elem()
}

func (i SqlAlertArray) ToSqlAlertArrayOutput() SqlAlertArrayOutput {
	return i.ToSqlAlertArrayOutputWithContext(context.Background())
}

func (i SqlAlertArray) ToSqlAlertArrayOutputWithContext(ctx context.Context) SqlAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlAlertArrayOutput)
}

func (i SqlAlertArray) ToOutput(ctx context.Context) pulumix.Output[[]*SqlAlert] {
	return pulumix.Output[[]*SqlAlert]{
		OutputState: i.ToSqlAlertArrayOutputWithContext(ctx).OutputState,
	}
}

// SqlAlertMapInput is an input type that accepts SqlAlertMap and SqlAlertMapOutput values.
// You can construct a concrete instance of `SqlAlertMapInput` via:
//
//	SqlAlertMap{ "key": SqlAlertArgs{...} }
type SqlAlertMapInput interface {
	pulumi.Input

	ToSqlAlertMapOutput() SqlAlertMapOutput
	ToSqlAlertMapOutputWithContext(context.Context) SqlAlertMapOutput
}

type SqlAlertMap map[string]SqlAlertInput

func (SqlAlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlAlert)(nil)).Elem()
}

func (i SqlAlertMap) ToSqlAlertMapOutput() SqlAlertMapOutput {
	return i.ToSqlAlertMapOutputWithContext(context.Background())
}

func (i SqlAlertMap) ToSqlAlertMapOutputWithContext(ctx context.Context) SqlAlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlAlertMapOutput)
}

func (i SqlAlertMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SqlAlert] {
	return pulumix.Output[map[string]*SqlAlert]{
		OutputState: i.ToSqlAlertMapOutputWithContext(ctx).OutputState,
	}
}

type SqlAlertOutput struct{ *pulumi.OutputState }

func (SqlAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlAlert)(nil)).Elem()
}

func (o SqlAlertOutput) ToSqlAlertOutput() SqlAlertOutput {
	return o
}

func (o SqlAlertOutput) ToSqlAlertOutputWithContext(ctx context.Context) SqlAlertOutput {
	return o
}

func (o SqlAlertOutput) ToOutput(ctx context.Context) pulumix.Output[*SqlAlert] {
	return pulumix.Output[*SqlAlert]{
		OutputState: o.OutputState,
	}
}

func (o SqlAlertOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlAlert) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the alert.
func (o SqlAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlAlert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Alert configuration options.
func (o SqlAlertOutput) Options() SqlAlertOptionsOutput {
	return o.ApplyT(func(v *SqlAlert) SqlAlertOptionsOutput { return v.Options }).(SqlAlertOptionsOutput)
}

// The identifier of the workspace folder containing the alert. The default is ther user's home folder. The folder identifier is formatted as `folder/<folder_id>`.
func (o SqlAlertOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlAlert) pulumi.StringPtrOutput { return v.Parent }).(pulumi.StringPtrOutput)
}

// ID of the query evaluated by the alert.
func (o SqlAlertOutput) QueryId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlAlert) pulumi.StringOutput { return v.QueryId }).(pulumi.StringOutput)
}

// Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
func (o SqlAlertOutput) Rearm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlAlert) pulumi.IntPtrOutput { return v.Rearm }).(pulumi.IntPtrOutput)
}

func (o SqlAlertOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlAlert) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type SqlAlertArrayOutput struct{ *pulumi.OutputState }

func (SqlAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlAlert)(nil)).Elem()
}

func (o SqlAlertArrayOutput) ToSqlAlertArrayOutput() SqlAlertArrayOutput {
	return o
}

func (o SqlAlertArrayOutput) ToSqlAlertArrayOutputWithContext(ctx context.Context) SqlAlertArrayOutput {
	return o
}

func (o SqlAlertArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SqlAlert] {
	return pulumix.Output[[]*SqlAlert]{
		OutputState: o.OutputState,
	}
}

func (o SqlAlertArrayOutput) Index(i pulumi.IntInput) SqlAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlAlert {
		return vs[0].([]*SqlAlert)[vs[1].(int)]
	}).(SqlAlertOutput)
}

type SqlAlertMapOutput struct{ *pulumi.OutputState }

func (SqlAlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlAlert)(nil)).Elem()
}

func (o SqlAlertMapOutput) ToSqlAlertMapOutput() SqlAlertMapOutput {
	return o
}

func (o SqlAlertMapOutput) ToSqlAlertMapOutputWithContext(ctx context.Context) SqlAlertMapOutput {
	return o
}

func (o SqlAlertMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SqlAlert] {
	return pulumix.Output[map[string]*SqlAlert]{
		OutputState: o.OutputState,
	}
}

func (o SqlAlertMapOutput) MapIndex(k pulumi.StringInput) SqlAlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlAlert {
		return vs[0].(map[string]*SqlAlert)[vs[1].(string)]
	}).(SqlAlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlAlertInput)(nil)).Elem(), &SqlAlert{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlAlertArrayInput)(nil)).Elem(), SqlAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlAlertMapInput)(nil)).Elem(), SqlAlertMap{})
	pulumi.RegisterOutputType(SqlAlertOutput{})
	pulumi.RegisterOutputType(SqlAlertArrayOutput{})
	pulumi.RegisterOutputType(SqlAlertMapOutput{})
}
