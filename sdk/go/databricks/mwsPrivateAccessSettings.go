// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// -> **Note** Importing this resource is not currently supported.
type MwsPrivateAccessSettings struct {
	pulumi.CustomResourceState

	// Account Id that could be found in the bottom left corner of [Accounts Console](https://accounts.cloud.databricks.com/)
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// An array of MwsVpcEndpoint `vpcEndpointId` (not `id`). Only used when `privateAccessLevel` is set to `ENDPOINT`. This is an allow list of MwsVpcEndpoint that in your account that can connect to your MwsWorkspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting `publicAccessEnabled` to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
	AllowedVpcEndpointIds pulumi.StringArrayOutput `pulumi:"allowedVpcEndpointIds"`
	// The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. `ACCOUNT` level access _(default)_ lets only MwsVpcEndpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. `ENDPOINT` level access lets only specified MwsVpcEndpoint connect to your workspace. Please see the `allowedVpcEndpointIds` documentation for more details.
	PrivateAccessLevel pulumi.StringPtrOutput `pulumi:"privateAccessLevel"`
	// Canonical unique identifier of Private Access Settings in Databricks Account
	PrivateAccessSettingsId pulumi.StringOutput `pulumi:"privateAccessSettingsId"`
	// Name of Private Access Settings in Databricks Account
	PrivateAccessSettingsName pulumi.StringOutput `pulumi:"privateAccessSettingsName"`
	// If `true`, the MwsWorkspaces can be accessed over the MwsVpcEndpoint as well as over the public network. In such a case, you could also configure an IpAccessList for the workspace, to restrict the source networks that could be used to access it over the public network. If `false` (default), the workspace can be accessed only over VPC endpoints, and not over the public network.
	PublicAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicAccessEnabled"`
	// Region of AWS VPC
	Region pulumi.StringOutput `pulumi:"region"`
	// Status of Private Access Settings
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewMwsPrivateAccessSettings registers a new resource with the given unique name, arguments, and options.
func NewMwsPrivateAccessSettings(ctx *pulumi.Context,
	name string, args *MwsPrivateAccessSettingsArgs, opts ...pulumi.ResourceOption) (*MwsPrivateAccessSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivateAccessSettingsName == nil {
		return nil, errors.New("invalid value for required argument 'PrivateAccessSettingsName'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	var resource MwsPrivateAccessSettings
	err := ctx.RegisterResource("databricks:index/mwsPrivateAccessSettings:MwsPrivateAccessSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMwsPrivateAccessSettings gets an existing MwsPrivateAccessSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMwsPrivateAccessSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MwsPrivateAccessSettingsState, opts ...pulumi.ResourceOption) (*MwsPrivateAccessSettings, error) {
	var resource MwsPrivateAccessSettings
	err := ctx.ReadResource("databricks:index/mwsPrivateAccessSettings:MwsPrivateAccessSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MwsPrivateAccessSettings resources.
type mwsPrivateAccessSettingsState struct {
	// Account Id that could be found in the bottom left corner of [Accounts Console](https://accounts.cloud.databricks.com/)
	AccountId *string `pulumi:"accountId"`
	// An array of MwsVpcEndpoint `vpcEndpointId` (not `id`). Only used when `privateAccessLevel` is set to `ENDPOINT`. This is an allow list of MwsVpcEndpoint that in your account that can connect to your MwsWorkspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting `publicAccessEnabled` to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
	AllowedVpcEndpointIds []string `pulumi:"allowedVpcEndpointIds"`
	// The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. `ACCOUNT` level access _(default)_ lets only MwsVpcEndpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. `ENDPOINT` level access lets only specified MwsVpcEndpoint connect to your workspace. Please see the `allowedVpcEndpointIds` documentation for more details.
	PrivateAccessLevel *string `pulumi:"privateAccessLevel"`
	// Canonical unique identifier of Private Access Settings in Databricks Account
	PrivateAccessSettingsId *string `pulumi:"privateAccessSettingsId"`
	// Name of Private Access Settings in Databricks Account
	PrivateAccessSettingsName *string `pulumi:"privateAccessSettingsName"`
	// If `true`, the MwsWorkspaces can be accessed over the MwsVpcEndpoint as well as over the public network. In such a case, you could also configure an IpAccessList for the workspace, to restrict the source networks that could be used to access it over the public network. If `false` (default), the workspace can be accessed only over VPC endpoints, and not over the public network.
	PublicAccessEnabled *bool `pulumi:"publicAccessEnabled"`
	// Region of AWS VPC
	Region *string `pulumi:"region"`
	// Status of Private Access Settings
	Status *string `pulumi:"status"`
}

type MwsPrivateAccessSettingsState struct {
	// Account Id that could be found in the bottom left corner of [Accounts Console](https://accounts.cloud.databricks.com/)
	AccountId pulumi.StringPtrInput
	// An array of MwsVpcEndpoint `vpcEndpointId` (not `id`). Only used when `privateAccessLevel` is set to `ENDPOINT`. This is an allow list of MwsVpcEndpoint that in your account that can connect to your MwsWorkspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting `publicAccessEnabled` to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
	AllowedVpcEndpointIds pulumi.StringArrayInput
	// The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. `ACCOUNT` level access _(default)_ lets only MwsVpcEndpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. `ENDPOINT` level access lets only specified MwsVpcEndpoint connect to your workspace. Please see the `allowedVpcEndpointIds` documentation for more details.
	PrivateAccessLevel pulumi.StringPtrInput
	// Canonical unique identifier of Private Access Settings in Databricks Account
	PrivateAccessSettingsId pulumi.StringPtrInput
	// Name of Private Access Settings in Databricks Account
	PrivateAccessSettingsName pulumi.StringPtrInput
	// If `true`, the MwsWorkspaces can be accessed over the MwsVpcEndpoint as well as over the public network. In such a case, you could also configure an IpAccessList for the workspace, to restrict the source networks that could be used to access it over the public network. If `false` (default), the workspace can be accessed only over VPC endpoints, and not over the public network.
	PublicAccessEnabled pulumi.BoolPtrInput
	// Region of AWS VPC
	Region pulumi.StringPtrInput
	// Status of Private Access Settings
	Status pulumi.StringPtrInput
}

func (MwsPrivateAccessSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*mwsPrivateAccessSettingsState)(nil)).Elem()
}

type mwsPrivateAccessSettingsArgs struct {
	// Account Id that could be found in the bottom left corner of [Accounts Console](https://accounts.cloud.databricks.com/)
	AccountId *string `pulumi:"accountId"`
	// An array of MwsVpcEndpoint `vpcEndpointId` (not `id`). Only used when `privateAccessLevel` is set to `ENDPOINT`. This is an allow list of MwsVpcEndpoint that in your account that can connect to your MwsWorkspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting `publicAccessEnabled` to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
	AllowedVpcEndpointIds []string `pulumi:"allowedVpcEndpointIds"`
	// The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. `ACCOUNT` level access _(default)_ lets only MwsVpcEndpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. `ENDPOINT` level access lets only specified MwsVpcEndpoint connect to your workspace. Please see the `allowedVpcEndpointIds` documentation for more details.
	PrivateAccessLevel *string `pulumi:"privateAccessLevel"`
	// Canonical unique identifier of Private Access Settings in Databricks Account
	PrivateAccessSettingsId *string `pulumi:"privateAccessSettingsId"`
	// Name of Private Access Settings in Databricks Account
	PrivateAccessSettingsName string `pulumi:"privateAccessSettingsName"`
	// If `true`, the MwsWorkspaces can be accessed over the MwsVpcEndpoint as well as over the public network. In such a case, you could also configure an IpAccessList for the workspace, to restrict the source networks that could be used to access it over the public network. If `false` (default), the workspace can be accessed only over VPC endpoints, and not over the public network.
	PublicAccessEnabled *bool `pulumi:"publicAccessEnabled"`
	// Region of AWS VPC
	Region string `pulumi:"region"`
	// Status of Private Access Settings
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a MwsPrivateAccessSettings resource.
type MwsPrivateAccessSettingsArgs struct {
	// Account Id that could be found in the bottom left corner of [Accounts Console](https://accounts.cloud.databricks.com/)
	AccountId pulumi.StringPtrInput
	// An array of MwsVpcEndpoint `vpcEndpointId` (not `id`). Only used when `privateAccessLevel` is set to `ENDPOINT`. This is an allow list of MwsVpcEndpoint that in your account that can connect to your MwsWorkspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting `publicAccessEnabled` to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
	AllowedVpcEndpointIds pulumi.StringArrayInput
	// The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. `ACCOUNT` level access _(default)_ lets only MwsVpcEndpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. `ENDPOINT` level access lets only specified MwsVpcEndpoint connect to your workspace. Please see the `allowedVpcEndpointIds` documentation for more details.
	PrivateAccessLevel pulumi.StringPtrInput
	// Canonical unique identifier of Private Access Settings in Databricks Account
	PrivateAccessSettingsId pulumi.StringPtrInput
	// Name of Private Access Settings in Databricks Account
	PrivateAccessSettingsName pulumi.StringInput
	// If `true`, the MwsWorkspaces can be accessed over the MwsVpcEndpoint as well as over the public network. In such a case, you could also configure an IpAccessList for the workspace, to restrict the source networks that could be used to access it over the public network. If `false` (default), the workspace can be accessed only over VPC endpoints, and not over the public network.
	PublicAccessEnabled pulumi.BoolPtrInput
	// Region of AWS VPC
	Region pulumi.StringInput
	// Status of Private Access Settings
	Status pulumi.StringPtrInput
}

func (MwsPrivateAccessSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mwsPrivateAccessSettingsArgs)(nil)).Elem()
}

type MwsPrivateAccessSettingsInput interface {
	pulumi.Input

	ToMwsPrivateAccessSettingsOutput() MwsPrivateAccessSettingsOutput
	ToMwsPrivateAccessSettingsOutputWithContext(ctx context.Context) MwsPrivateAccessSettingsOutput
}

func (*MwsPrivateAccessSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**MwsPrivateAccessSettings)(nil)).Elem()
}

func (i *MwsPrivateAccessSettings) ToMwsPrivateAccessSettingsOutput() MwsPrivateAccessSettingsOutput {
	return i.ToMwsPrivateAccessSettingsOutputWithContext(context.Background())
}

func (i *MwsPrivateAccessSettings) ToMwsPrivateAccessSettingsOutputWithContext(ctx context.Context) MwsPrivateAccessSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MwsPrivateAccessSettingsOutput)
}

// MwsPrivateAccessSettingsArrayInput is an input type that accepts MwsPrivateAccessSettingsArray and MwsPrivateAccessSettingsArrayOutput values.
// You can construct a concrete instance of `MwsPrivateAccessSettingsArrayInput` via:
//
//	MwsPrivateAccessSettingsArray{ MwsPrivateAccessSettingsArgs{...} }
type MwsPrivateAccessSettingsArrayInput interface {
	pulumi.Input

	ToMwsPrivateAccessSettingsArrayOutput() MwsPrivateAccessSettingsArrayOutput
	ToMwsPrivateAccessSettingsArrayOutputWithContext(context.Context) MwsPrivateAccessSettingsArrayOutput
}

type MwsPrivateAccessSettingsArray []MwsPrivateAccessSettingsInput

func (MwsPrivateAccessSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MwsPrivateAccessSettings)(nil)).Elem()
}

func (i MwsPrivateAccessSettingsArray) ToMwsPrivateAccessSettingsArrayOutput() MwsPrivateAccessSettingsArrayOutput {
	return i.ToMwsPrivateAccessSettingsArrayOutputWithContext(context.Background())
}

func (i MwsPrivateAccessSettingsArray) ToMwsPrivateAccessSettingsArrayOutputWithContext(ctx context.Context) MwsPrivateAccessSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MwsPrivateAccessSettingsArrayOutput)
}

// MwsPrivateAccessSettingsMapInput is an input type that accepts MwsPrivateAccessSettingsMap and MwsPrivateAccessSettingsMapOutput values.
// You can construct a concrete instance of `MwsPrivateAccessSettingsMapInput` via:
//
//	MwsPrivateAccessSettingsMap{ "key": MwsPrivateAccessSettingsArgs{...} }
type MwsPrivateAccessSettingsMapInput interface {
	pulumi.Input

	ToMwsPrivateAccessSettingsMapOutput() MwsPrivateAccessSettingsMapOutput
	ToMwsPrivateAccessSettingsMapOutputWithContext(context.Context) MwsPrivateAccessSettingsMapOutput
}

type MwsPrivateAccessSettingsMap map[string]MwsPrivateAccessSettingsInput

func (MwsPrivateAccessSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MwsPrivateAccessSettings)(nil)).Elem()
}

func (i MwsPrivateAccessSettingsMap) ToMwsPrivateAccessSettingsMapOutput() MwsPrivateAccessSettingsMapOutput {
	return i.ToMwsPrivateAccessSettingsMapOutputWithContext(context.Background())
}

func (i MwsPrivateAccessSettingsMap) ToMwsPrivateAccessSettingsMapOutputWithContext(ctx context.Context) MwsPrivateAccessSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MwsPrivateAccessSettingsMapOutput)
}

type MwsPrivateAccessSettingsOutput struct{ *pulumi.OutputState }

func (MwsPrivateAccessSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MwsPrivateAccessSettings)(nil)).Elem()
}

func (o MwsPrivateAccessSettingsOutput) ToMwsPrivateAccessSettingsOutput() MwsPrivateAccessSettingsOutput {
	return o
}

func (o MwsPrivateAccessSettingsOutput) ToMwsPrivateAccessSettingsOutputWithContext(ctx context.Context) MwsPrivateAccessSettingsOutput {
	return o
}

// Account Id that could be found in the bottom left corner of [Accounts Console](https://accounts.cloud.databricks.com/)
func (o MwsPrivateAccessSettingsOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MwsPrivateAccessSettings) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// An array of MwsVpcEndpoint `vpcEndpointId` (not `id`). Only used when `privateAccessLevel` is set to `ENDPOINT`. This is an allow list of MwsVpcEndpoint that in your account that can connect to your MwsWorkspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting `publicAccessEnabled` to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
func (o MwsPrivateAccessSettingsOutput) AllowedVpcEndpointIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MwsPrivateAccessSettings) pulumi.StringArrayOutput { return v.AllowedVpcEndpointIds }).(pulumi.StringArrayOutput)
}

// The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. `ACCOUNT` level access _(default)_ lets only MwsVpcEndpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. `ENDPOINT` level access lets only specified MwsVpcEndpoint connect to your workspace. Please see the `allowedVpcEndpointIds` documentation for more details.
func (o MwsPrivateAccessSettingsOutput) PrivateAccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MwsPrivateAccessSettings) pulumi.StringPtrOutput { return v.PrivateAccessLevel }).(pulumi.StringPtrOutput)
}

// Canonical unique identifier of Private Access Settings in Databricks Account
func (o MwsPrivateAccessSettingsOutput) PrivateAccessSettingsId() pulumi.StringOutput {
	return o.ApplyT(func(v *MwsPrivateAccessSettings) pulumi.StringOutput { return v.PrivateAccessSettingsId }).(pulumi.StringOutput)
}

// Name of Private Access Settings in Databricks Account
func (o MwsPrivateAccessSettingsOutput) PrivateAccessSettingsName() pulumi.StringOutput {
	return o.ApplyT(func(v *MwsPrivateAccessSettings) pulumi.StringOutput { return v.PrivateAccessSettingsName }).(pulumi.StringOutput)
}

// If `true`, the MwsWorkspaces can be accessed over the MwsVpcEndpoint as well as over the public network. In such a case, you could also configure an IpAccessList for the workspace, to restrict the source networks that could be used to access it over the public network. If `false` (default), the workspace can be accessed only over VPC endpoints, and not over the public network.
func (o MwsPrivateAccessSettingsOutput) PublicAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MwsPrivateAccessSettings) pulumi.BoolPtrOutput { return v.PublicAccessEnabled }).(pulumi.BoolPtrOutput)
}

// Region of AWS VPC
func (o MwsPrivateAccessSettingsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MwsPrivateAccessSettings) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Status of Private Access Settings
func (o MwsPrivateAccessSettingsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MwsPrivateAccessSettings) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type MwsPrivateAccessSettingsArrayOutput struct{ *pulumi.OutputState }

func (MwsPrivateAccessSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MwsPrivateAccessSettings)(nil)).Elem()
}

func (o MwsPrivateAccessSettingsArrayOutput) ToMwsPrivateAccessSettingsArrayOutput() MwsPrivateAccessSettingsArrayOutput {
	return o
}

func (o MwsPrivateAccessSettingsArrayOutput) ToMwsPrivateAccessSettingsArrayOutputWithContext(ctx context.Context) MwsPrivateAccessSettingsArrayOutput {
	return o
}

func (o MwsPrivateAccessSettingsArrayOutput) Index(i pulumi.IntInput) MwsPrivateAccessSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MwsPrivateAccessSettings {
		return vs[0].([]*MwsPrivateAccessSettings)[vs[1].(int)]
	}).(MwsPrivateAccessSettingsOutput)
}

type MwsPrivateAccessSettingsMapOutput struct{ *pulumi.OutputState }

func (MwsPrivateAccessSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MwsPrivateAccessSettings)(nil)).Elem()
}

func (o MwsPrivateAccessSettingsMapOutput) ToMwsPrivateAccessSettingsMapOutput() MwsPrivateAccessSettingsMapOutput {
	return o
}

func (o MwsPrivateAccessSettingsMapOutput) ToMwsPrivateAccessSettingsMapOutputWithContext(ctx context.Context) MwsPrivateAccessSettingsMapOutput {
	return o
}

func (o MwsPrivateAccessSettingsMapOutput) MapIndex(k pulumi.StringInput) MwsPrivateAccessSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MwsPrivateAccessSettings {
		return vs[0].(map[string]*MwsPrivateAccessSettings)[vs[1].(string)]
	}).(MwsPrivateAccessSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MwsPrivateAccessSettingsInput)(nil)).Elem(), &MwsPrivateAccessSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*MwsPrivateAccessSettingsArrayInput)(nil)).Elem(), MwsPrivateAccessSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MwsPrivateAccessSettingsMapInput)(nil)).Elem(), MwsPrivateAccessSettingsMap{})
	pulumi.RegisterOutputType(MwsPrivateAccessSettingsOutput{})
	pulumi.RegisterOutputType(MwsPrivateAccessSettingsArrayOutput{})
	pulumi.RegisterOutputType(MwsPrivateAccessSettingsMapOutput{})
}
