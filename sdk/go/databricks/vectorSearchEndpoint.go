// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Note** This resource could be only used on Unity Catalog-enabled workspace!
//
// This resource allows you to create [Vector Search Endpoint](https://docs.databricks.com/en/generative-ai/vector-search.html) in Databricks.  Vector Search is a serverless similarity search engine that allows you to store a vector representation of your data, including metadata, in a vector database.  The Vector Search Endpoint is used to create and access vector search indexes.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewVectorSearchEndpoint(ctx, "this", &databricks.VectorSearchEndpointArgs{
//				EndpointType: pulumi.String("STANDARD"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// # The resource can be imported using the name of the Vector Search Endpoint
//
// bash
//
// ```sh
// $ pulumi import databricks:index/vectorSearchEndpoint:VectorSearchEndpoint this <endpoint-name>
// ```
type VectorSearchEndpoint struct {
	pulumi.CustomResourceState

	// Timestamp of endpoint creation (milliseconds).
	CreationTimestamp pulumi.IntOutput `pulumi:"creationTimestamp"`
	// Creator of the endpoint.
	Creator pulumi.StringOutput `pulumi:"creator"`
	// Unique internal identifier of the endpoint (UUID).
	EndpointId pulumi.StringOutput `pulumi:"endpointId"`
	// Object describing the current status of the endpoint consisting of following fields:
	EndpointStatuses VectorSearchEndpointEndpointStatusArrayOutput `pulumi:"endpointStatuses"`
	// type of Vector Search Endpoint.  Currently only accepting single value: `STANDARD` (See [documentation](https://docs.databricks.com/api/workspace/vectorsearchendpoints/createendpoint) for the list of currently supported values).  If it's changed, Vector Search Endpoint is recreated.
	EndpointType pulumi.StringOutput `pulumi:"endpointType"`
	// Timestamp of last update to the endpoint (milliseconds).
	LastUpdatedTimestamp pulumi.IntOutput `pulumi:"lastUpdatedTimestamp"`
	// User who last updated the endpoint.
	LastUpdatedUser pulumi.StringOutput `pulumi:"lastUpdatedUser"`
	// Name of the Vector Search Endpoint to create.  If name is changed, Vector Search Endpoint is recreated.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of indexes on the endpoint.
	NumIndexes pulumi.IntOutput `pulumi:"numIndexes"`
}

// NewVectorSearchEndpoint registers a new resource with the given unique name, arguments, and options.
func NewVectorSearchEndpoint(ctx *pulumi.Context,
	name string, args *VectorSearchEndpointArgs, opts ...pulumi.ResourceOption) (*VectorSearchEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointType == nil {
		return nil, errors.New("invalid value for required argument 'EndpointType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VectorSearchEndpoint
	err := ctx.RegisterResource("databricks:index/vectorSearchEndpoint:VectorSearchEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVectorSearchEndpoint gets an existing VectorSearchEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVectorSearchEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VectorSearchEndpointState, opts ...pulumi.ResourceOption) (*VectorSearchEndpoint, error) {
	var resource VectorSearchEndpoint
	err := ctx.ReadResource("databricks:index/vectorSearchEndpoint:VectorSearchEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VectorSearchEndpoint resources.
type vectorSearchEndpointState struct {
	// Timestamp of endpoint creation (milliseconds).
	CreationTimestamp *int `pulumi:"creationTimestamp"`
	// Creator of the endpoint.
	Creator *string `pulumi:"creator"`
	// Unique internal identifier of the endpoint (UUID).
	EndpointId *string `pulumi:"endpointId"`
	// Object describing the current status of the endpoint consisting of following fields:
	EndpointStatuses []VectorSearchEndpointEndpointStatus `pulumi:"endpointStatuses"`
	// type of Vector Search Endpoint.  Currently only accepting single value: `STANDARD` (See [documentation](https://docs.databricks.com/api/workspace/vectorsearchendpoints/createendpoint) for the list of currently supported values).  If it's changed, Vector Search Endpoint is recreated.
	EndpointType *string `pulumi:"endpointType"`
	// Timestamp of last update to the endpoint (milliseconds).
	LastUpdatedTimestamp *int `pulumi:"lastUpdatedTimestamp"`
	// User who last updated the endpoint.
	LastUpdatedUser *string `pulumi:"lastUpdatedUser"`
	// Name of the Vector Search Endpoint to create.  If name is changed, Vector Search Endpoint is recreated.
	Name *string `pulumi:"name"`
	// Number of indexes on the endpoint.
	NumIndexes *int `pulumi:"numIndexes"`
}

type VectorSearchEndpointState struct {
	// Timestamp of endpoint creation (milliseconds).
	CreationTimestamp pulumi.IntPtrInput
	// Creator of the endpoint.
	Creator pulumi.StringPtrInput
	// Unique internal identifier of the endpoint (UUID).
	EndpointId pulumi.StringPtrInput
	// Object describing the current status of the endpoint consisting of following fields:
	EndpointStatuses VectorSearchEndpointEndpointStatusArrayInput
	// type of Vector Search Endpoint.  Currently only accepting single value: `STANDARD` (See [documentation](https://docs.databricks.com/api/workspace/vectorsearchendpoints/createendpoint) for the list of currently supported values).  If it's changed, Vector Search Endpoint is recreated.
	EndpointType pulumi.StringPtrInput
	// Timestamp of last update to the endpoint (milliseconds).
	LastUpdatedTimestamp pulumi.IntPtrInput
	// User who last updated the endpoint.
	LastUpdatedUser pulumi.StringPtrInput
	// Name of the Vector Search Endpoint to create.  If name is changed, Vector Search Endpoint is recreated.
	Name pulumi.StringPtrInput
	// Number of indexes on the endpoint.
	NumIndexes pulumi.IntPtrInput
}

func (VectorSearchEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*vectorSearchEndpointState)(nil)).Elem()
}

type vectorSearchEndpointArgs struct {
	// type of Vector Search Endpoint.  Currently only accepting single value: `STANDARD` (See [documentation](https://docs.databricks.com/api/workspace/vectorsearchendpoints/createendpoint) for the list of currently supported values).  If it's changed, Vector Search Endpoint is recreated.
	EndpointType string `pulumi:"endpointType"`
	// Name of the Vector Search Endpoint to create.  If name is changed, Vector Search Endpoint is recreated.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a VectorSearchEndpoint resource.
type VectorSearchEndpointArgs struct {
	// type of Vector Search Endpoint.  Currently only accepting single value: `STANDARD` (See [documentation](https://docs.databricks.com/api/workspace/vectorsearchendpoints/createendpoint) for the list of currently supported values).  If it's changed, Vector Search Endpoint is recreated.
	EndpointType pulumi.StringInput
	// Name of the Vector Search Endpoint to create.  If name is changed, Vector Search Endpoint is recreated.
	Name pulumi.StringPtrInput
}

func (VectorSearchEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vectorSearchEndpointArgs)(nil)).Elem()
}

type VectorSearchEndpointInput interface {
	pulumi.Input

	ToVectorSearchEndpointOutput() VectorSearchEndpointOutput
	ToVectorSearchEndpointOutputWithContext(ctx context.Context) VectorSearchEndpointOutput
}

func (*VectorSearchEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorSearchEndpoint)(nil)).Elem()
}

func (i *VectorSearchEndpoint) ToVectorSearchEndpointOutput() VectorSearchEndpointOutput {
	return i.ToVectorSearchEndpointOutputWithContext(context.Background())
}

func (i *VectorSearchEndpoint) ToVectorSearchEndpointOutputWithContext(ctx context.Context) VectorSearchEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorSearchEndpointOutput)
}

// VectorSearchEndpointArrayInput is an input type that accepts VectorSearchEndpointArray and VectorSearchEndpointArrayOutput values.
// You can construct a concrete instance of `VectorSearchEndpointArrayInput` via:
//
//	VectorSearchEndpointArray{ VectorSearchEndpointArgs{...} }
type VectorSearchEndpointArrayInput interface {
	pulumi.Input

	ToVectorSearchEndpointArrayOutput() VectorSearchEndpointArrayOutput
	ToVectorSearchEndpointArrayOutputWithContext(context.Context) VectorSearchEndpointArrayOutput
}

type VectorSearchEndpointArray []VectorSearchEndpointInput

func (VectorSearchEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VectorSearchEndpoint)(nil)).Elem()
}

func (i VectorSearchEndpointArray) ToVectorSearchEndpointArrayOutput() VectorSearchEndpointArrayOutput {
	return i.ToVectorSearchEndpointArrayOutputWithContext(context.Background())
}

func (i VectorSearchEndpointArray) ToVectorSearchEndpointArrayOutputWithContext(ctx context.Context) VectorSearchEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorSearchEndpointArrayOutput)
}

// VectorSearchEndpointMapInput is an input type that accepts VectorSearchEndpointMap and VectorSearchEndpointMapOutput values.
// You can construct a concrete instance of `VectorSearchEndpointMapInput` via:
//
//	VectorSearchEndpointMap{ "key": VectorSearchEndpointArgs{...} }
type VectorSearchEndpointMapInput interface {
	pulumi.Input

	ToVectorSearchEndpointMapOutput() VectorSearchEndpointMapOutput
	ToVectorSearchEndpointMapOutputWithContext(context.Context) VectorSearchEndpointMapOutput
}

type VectorSearchEndpointMap map[string]VectorSearchEndpointInput

func (VectorSearchEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VectorSearchEndpoint)(nil)).Elem()
}

func (i VectorSearchEndpointMap) ToVectorSearchEndpointMapOutput() VectorSearchEndpointMapOutput {
	return i.ToVectorSearchEndpointMapOutputWithContext(context.Background())
}

func (i VectorSearchEndpointMap) ToVectorSearchEndpointMapOutputWithContext(ctx context.Context) VectorSearchEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorSearchEndpointMapOutput)
}

type VectorSearchEndpointOutput struct{ *pulumi.OutputState }

func (VectorSearchEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorSearchEndpoint)(nil)).Elem()
}

func (o VectorSearchEndpointOutput) ToVectorSearchEndpointOutput() VectorSearchEndpointOutput {
	return o
}

func (o VectorSearchEndpointOutput) ToVectorSearchEndpointOutputWithContext(ctx context.Context) VectorSearchEndpointOutput {
	return o
}

// Timestamp of endpoint creation (milliseconds).
func (o VectorSearchEndpointOutput) CreationTimestamp() pulumi.IntOutput {
	return o.ApplyT(func(v *VectorSearchEndpoint) pulumi.IntOutput { return v.CreationTimestamp }).(pulumi.IntOutput)
}

// Creator of the endpoint.
func (o VectorSearchEndpointOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorSearchEndpoint) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

// Unique internal identifier of the endpoint (UUID).
func (o VectorSearchEndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorSearchEndpoint) pulumi.StringOutput { return v.EndpointId }).(pulumi.StringOutput)
}

// Object describing the current status of the endpoint consisting of following fields:
func (o VectorSearchEndpointOutput) EndpointStatuses() VectorSearchEndpointEndpointStatusArrayOutput {
	return o.ApplyT(func(v *VectorSearchEndpoint) VectorSearchEndpointEndpointStatusArrayOutput { return v.EndpointStatuses }).(VectorSearchEndpointEndpointStatusArrayOutput)
}

// type of Vector Search Endpoint.  Currently only accepting single value: `STANDARD` (See [documentation](https://docs.databricks.com/api/workspace/vectorsearchendpoints/createendpoint) for the list of currently supported values).  If it's changed, Vector Search Endpoint is recreated.
func (o VectorSearchEndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorSearchEndpoint) pulumi.StringOutput { return v.EndpointType }).(pulumi.StringOutput)
}

// Timestamp of last update to the endpoint (milliseconds).
func (o VectorSearchEndpointOutput) LastUpdatedTimestamp() pulumi.IntOutput {
	return o.ApplyT(func(v *VectorSearchEndpoint) pulumi.IntOutput { return v.LastUpdatedTimestamp }).(pulumi.IntOutput)
}

// User who last updated the endpoint.
func (o VectorSearchEndpointOutput) LastUpdatedUser() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorSearchEndpoint) pulumi.StringOutput { return v.LastUpdatedUser }).(pulumi.StringOutput)
}

// Name of the Vector Search Endpoint to create.  If name is changed, Vector Search Endpoint is recreated.
func (o VectorSearchEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorSearchEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of indexes on the endpoint.
func (o VectorSearchEndpointOutput) NumIndexes() pulumi.IntOutput {
	return o.ApplyT(func(v *VectorSearchEndpoint) pulumi.IntOutput { return v.NumIndexes }).(pulumi.IntOutput)
}

type VectorSearchEndpointArrayOutput struct{ *pulumi.OutputState }

func (VectorSearchEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VectorSearchEndpoint)(nil)).Elem()
}

func (o VectorSearchEndpointArrayOutput) ToVectorSearchEndpointArrayOutput() VectorSearchEndpointArrayOutput {
	return o
}

func (o VectorSearchEndpointArrayOutput) ToVectorSearchEndpointArrayOutputWithContext(ctx context.Context) VectorSearchEndpointArrayOutput {
	return o
}

func (o VectorSearchEndpointArrayOutput) Index(i pulumi.IntInput) VectorSearchEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VectorSearchEndpoint {
		return vs[0].([]*VectorSearchEndpoint)[vs[1].(int)]
	}).(VectorSearchEndpointOutput)
}

type VectorSearchEndpointMapOutput struct{ *pulumi.OutputState }

func (VectorSearchEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VectorSearchEndpoint)(nil)).Elem()
}

func (o VectorSearchEndpointMapOutput) ToVectorSearchEndpointMapOutput() VectorSearchEndpointMapOutput {
	return o
}

func (o VectorSearchEndpointMapOutput) ToVectorSearchEndpointMapOutputWithContext(ctx context.Context) VectorSearchEndpointMapOutput {
	return o
}

func (o VectorSearchEndpointMapOutput) MapIndex(k pulumi.StringInput) VectorSearchEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VectorSearchEndpoint {
		return vs[0].(map[string]*VectorSearchEndpoint)[vs[1].(string)]
	}).(VectorSearchEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VectorSearchEndpointInput)(nil)).Elem(), &VectorSearchEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*VectorSearchEndpointArrayInput)(nil)).Elem(), VectorSearchEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VectorSearchEndpointMapInput)(nil)).Elem(), VectorSearchEndpointMap{})
	pulumi.RegisterOutputType(VectorSearchEndpointOutput{})
	pulumi.RegisterOutputType(VectorSearchEndpointArrayOutput{})
	pulumi.RegisterOutputType(VectorSearchEndpointMapOutput{})
}
