// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves details about Volume that was created by Pulumi or manually.
// A volume can be identified by its three-level (fully qualified) name (in the form of: `catalogName`.`schemaName`.`volumeName`) as input. This can be retrieved programmatically using getVolumes data source.
func LookupVolume(ctx *pulumi.Context, args *LookupVolumeArgs, opts ...pulumi.InvokeOption) (*LookupVolumeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVolumeResult
	err := ctx.Invoke("databricks:index/getVolume:getVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolume.
type LookupVolumeArgs struct {
	// ID of this Unity Catalog Volume in form of `<catalog>.<schema>.<name>`.
	Id *string `pulumi:"id"`
	// a fully qualified name of databricks_volume: *`catalog`.`schema`.`volume`*
	Name string `pulumi:"name"`
	// `VolumeInfo` object for a Unity Catalog volume. This contains the following attributes:
	VolumeInfo *GetVolumeVolumeInfo `pulumi:"volumeInfo"`
}

// A collection of values returned by getVolume.
type LookupVolumeResult struct {
	// ID of this Unity Catalog Volume in form of `<catalog>.<schema>.<name>`.
	Id string `pulumi:"id"`
	// the name of the volume
	Name string `pulumi:"name"`
	// `VolumeInfo` object for a Unity Catalog volume. This contains the following attributes:
	VolumeInfo GetVolumeVolumeInfo `pulumi:"volumeInfo"`
}

func LookupVolumeOutput(ctx *pulumi.Context, args LookupVolumeOutputArgs, opts ...pulumi.InvokeOption) LookupVolumeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVolumeResult, error) {
			args := v.(LookupVolumeArgs)
			r, err := LookupVolume(ctx, &args, opts...)
			var s LookupVolumeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVolumeResultOutput)
}

// A collection of arguments for invoking getVolume.
type LookupVolumeOutputArgs struct {
	// ID of this Unity Catalog Volume in form of `<catalog>.<schema>.<name>`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// a fully qualified name of databricks_volume: *`catalog`.`schema`.`volume`*
	Name pulumi.StringInput `pulumi:"name"`
	// `VolumeInfo` object for a Unity Catalog volume. This contains the following attributes:
	VolumeInfo GetVolumeVolumeInfoPtrInput `pulumi:"volumeInfo"`
}

func (LookupVolumeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeArgs)(nil)).Elem()
}

// A collection of values returned by getVolume.
type LookupVolumeResultOutput struct{ *pulumi.OutputState }

func (LookupVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeResult)(nil)).Elem()
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutput() LookupVolumeResultOutput {
	return o
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutputWithContext(ctx context.Context) LookupVolumeResultOutput {
	return o
}

// ID of this Unity Catalog Volume in form of `<catalog>.<schema>.<name>`.
func (o LookupVolumeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Id }).(pulumi.StringOutput)
}

// the name of the volume
func (o LookupVolumeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Name }).(pulumi.StringOutput)
}

// `VolumeInfo` object for a Unity Catalog volume. This contains the following attributes:
func (o LookupVolumeResultOutput) VolumeInfo() GetVolumeVolumeInfoOutput {
	return o.ApplyT(func(v LookupVolumeResult) GetVolumeVolumeInfo { return v.VolumeInfo }).(GetVolumeVolumeInfoOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVolumeResultOutput{})
}
