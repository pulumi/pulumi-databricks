// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves details about Volume that was created by Pulumi or manually.
// A volume can be identified by its three-level (fully qualified) name (in the form of: `catalogName`.`schemaName`.`volumeName`) as input. This can be retrieved programmatically using getVolumes data source.
//
// > This data source can only be used with a workspace-level provider!
//
// ## Example Usage
//
// * Retrieve details of all volumes in in a _things_ Schema of a  _sandbox_ databricks_catalog:
//
// * Search for a specific volume by its fully qualified name
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.LookupVolume(ctx, &databricks.LookupVolumeArgs{
//				Name: "catalog.schema.volume",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Related Resources
//
// The following resources are used in the same context:
//
// * Volume to manage volumes within Unity Catalog.
// * Schema to manage schemas within Unity Catalog.
// * Catalog to manage catalogs within Unity Catalog.
func LookupVolume(ctx *pulumi.Context, args *LookupVolumeArgs, opts ...pulumi.InvokeOption) (*LookupVolumeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVolumeResult
	err := ctx.Invoke("databricks:index/getVolume:getVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolume.
type LookupVolumeArgs struct {
	// ID of this Unity Catalog Volume in form of `<catalog>.<schema>.<name>`.
	Id *string `pulumi:"id"`
	// a fully qualified name of databricks_volume: *`catalog`.`schema`.`volume`*
	Name string `pulumi:"name"`
	// `VolumeInfo` object for a Unity Catalog volume. This contains the following attributes:
	VolumeInfo *GetVolumeVolumeInfo `pulumi:"volumeInfo"`
}

// A collection of values returned by getVolume.
type LookupVolumeResult struct {
	// ID of this Unity Catalog Volume in form of `<catalog>.<schema>.<name>`.
	Id string `pulumi:"id"`
	// the name of the volume
	Name string `pulumi:"name"`
	// `VolumeInfo` object for a Unity Catalog volume. This contains the following attributes:
	VolumeInfo GetVolumeVolumeInfo `pulumi:"volumeInfo"`
}

func LookupVolumeOutput(ctx *pulumi.Context, args LookupVolumeOutputArgs, opts ...pulumi.InvokeOption) LookupVolumeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVolumeResultOutput, error) {
			args := v.(LookupVolumeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("databricks:index/getVolume:getVolume", args, LookupVolumeResultOutput{}, options).(LookupVolumeResultOutput), nil
		}).(LookupVolumeResultOutput)
}

// A collection of arguments for invoking getVolume.
type LookupVolumeOutputArgs struct {
	// ID of this Unity Catalog Volume in form of `<catalog>.<schema>.<name>`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// a fully qualified name of databricks_volume: *`catalog`.`schema`.`volume`*
	Name pulumi.StringInput `pulumi:"name"`
	// `VolumeInfo` object for a Unity Catalog volume. This contains the following attributes:
	VolumeInfo GetVolumeVolumeInfoPtrInput `pulumi:"volumeInfo"`
}

func (LookupVolumeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeArgs)(nil)).Elem()
}

// A collection of values returned by getVolume.
type LookupVolumeResultOutput struct{ *pulumi.OutputState }

func (LookupVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeResult)(nil)).Elem()
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutput() LookupVolumeResultOutput {
	return o
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutputWithContext(ctx context.Context) LookupVolumeResultOutput {
	return o
}

// ID of this Unity Catalog Volume in form of `<catalog>.<schema>.<name>`.
func (o LookupVolumeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Id }).(pulumi.StringOutput)
}

// the name of the volume
func (o LookupVolumeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Name }).(pulumi.StringOutput)
}

// `VolumeInfo` object for a Unity Catalog volume. This contains the following attributes:
func (o LookupVolumeResultOutput) VolumeInfo() GetVolumeVolumeInfoOutput {
	return o.ApplyT(func(v LookupVolumeResult) GetVolumeVolumeInfo { return v.VolumeInfo }).(GetVolumeVolumeInfoOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVolumeResultOutput{})
}
