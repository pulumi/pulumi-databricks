// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Note** This resource could be used with account or workspace-level provider.
//
// A metastore is the top-level container of objects in Unity Catalog. It stores data assets (tables and views) and the permissions that govern access to them. Databricks account admins can create metastores and assign them to Databricks workspaces in order to control which workloads use each metastore.
//
// Unity Catalog offers a new metastore with built in security and auditing. This is distinct to the metastore used in previous versions of Databricks (based on the Hive Metastore).
//
// A Unity Catalog metastore can be created without a root location & credential to maintain strict separation of storage across catalogs or environments.
//
// ## Example Usage
//
// # For AWS
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			this, err := databricks.NewMetastore(ctx, "this", &databricks.MetastoreArgs{
//				Name:         pulumi.String("primary"),
//				StorageRoot:  pulumi.String(fmt.Sprintf("s3://%v/metastore", metastore.Id)),
//				Owner:        pulumi.String("uc admins"),
//				Region:       pulumi.String("us-east-1"),
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewMetastoreAssignment(ctx, "this", &databricks.MetastoreAssignmentArgs{
//				MetastoreId: this.ID(),
//				WorkspaceId: pulumi.Any(workspaceId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// # For Azure
//
// ## Import
//
// This resource can be imported by ID:
//
// bash
//
// ```sh
// $ pulumi import databricks:index/metastore:Metastore this <id>
// ```
type Metastore struct {
	pulumi.CustomResourceState

	Cloud                     pulumi.StringOutput    `pulumi:"cloud"`
	CreatedAt                 pulumi.IntOutput       `pulumi:"createdAt"`
	CreatedBy                 pulumi.StringOutput    `pulumi:"createdBy"`
	DefaultDataAccessConfigId pulumi.StringPtrOutput `pulumi:"defaultDataAccessConfigId"`
	// The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing. Once this is set it cannot be removed and can only be modified to another valid value. To delete this value please taint and recreate the resource.
	DeltaSharingOrganizationName pulumi.StringPtrOutput `pulumi:"deltaSharingOrganizationName"`
	// Required along with `deltaSharingScope`. Used to set expiration duration in seconds on recipient data access tokens. Set to 0 for unlimited duration.
	DeltaSharingRecipientTokenLifetimeInSeconds pulumi.IntPtrOutput `pulumi:"deltaSharingRecipientTokenLifetimeInSeconds"`
	// Required along with `deltaSharingRecipientTokenLifetimeInSeconds`. Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL.  INTERNAL only allows sharing within the same account, and INTERNAL_AND_EXTERNAL allows cross account sharing and token based sharing.
	DeltaSharingScope pulumi.StringPtrOutput `pulumi:"deltaSharingScope"`
	// Destroy metastore regardless of its contents.
	ForceDestroy      pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	GlobalMetastoreId pulumi.StringOutput  `pulumi:"globalMetastoreId"`
	MetastoreId       pulumi.StringOutput  `pulumi:"metastoreId"`
	// Name of metastore.
	Name pulumi.StringOutput `pulumi:"name"`
	// Username/groupname/sp applicationId of the metastore owner.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The region of the metastore
	Region pulumi.StringOutput `pulumi:"region"`
	// Path on cloud storage account, where managed `Table` are stored. Change forces creation of a new resource. If no `storageRoot` is defined for the metastore, each catalog must have a `storageRoot` defined.
	StorageRoot             pulumi.StringPtrOutput `pulumi:"storageRoot"`
	StorageRootCredentialId pulumi.StringPtrOutput `pulumi:"storageRootCredentialId"`
	UpdatedAt               pulumi.IntOutput       `pulumi:"updatedAt"`
	UpdatedBy               pulumi.StringOutput    `pulumi:"updatedBy"`
}

// NewMetastore registers a new resource with the given unique name, arguments, and options.
func NewMetastore(ctx *pulumi.Context,
	name string, args *MetastoreArgs, opts ...pulumi.ResourceOption) (*Metastore, error) {
	if args == nil {
		args = &MetastoreArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Metastore
	err := ctx.RegisterResource("databricks:index/metastore:Metastore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetastore gets an existing Metastore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetastore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetastoreState, opts ...pulumi.ResourceOption) (*Metastore, error) {
	var resource Metastore
	err := ctx.ReadResource("databricks:index/metastore:Metastore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Metastore resources.
type metastoreState struct {
	Cloud                     *string `pulumi:"cloud"`
	CreatedAt                 *int    `pulumi:"createdAt"`
	CreatedBy                 *string `pulumi:"createdBy"`
	DefaultDataAccessConfigId *string `pulumi:"defaultDataAccessConfigId"`
	// The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing. Once this is set it cannot be removed and can only be modified to another valid value. To delete this value please taint and recreate the resource.
	DeltaSharingOrganizationName *string `pulumi:"deltaSharingOrganizationName"`
	// Required along with `deltaSharingScope`. Used to set expiration duration in seconds on recipient data access tokens. Set to 0 for unlimited duration.
	DeltaSharingRecipientTokenLifetimeInSeconds *int `pulumi:"deltaSharingRecipientTokenLifetimeInSeconds"`
	// Required along with `deltaSharingRecipientTokenLifetimeInSeconds`. Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL.  INTERNAL only allows sharing within the same account, and INTERNAL_AND_EXTERNAL allows cross account sharing and token based sharing.
	DeltaSharingScope *string `pulumi:"deltaSharingScope"`
	// Destroy metastore regardless of its contents.
	ForceDestroy      *bool   `pulumi:"forceDestroy"`
	GlobalMetastoreId *string `pulumi:"globalMetastoreId"`
	MetastoreId       *string `pulumi:"metastoreId"`
	// Name of metastore.
	Name *string `pulumi:"name"`
	// Username/groupname/sp applicationId of the metastore owner.
	Owner *string `pulumi:"owner"`
	// The region of the metastore
	Region *string `pulumi:"region"`
	// Path on cloud storage account, where managed `Table` are stored. Change forces creation of a new resource. If no `storageRoot` is defined for the metastore, each catalog must have a `storageRoot` defined.
	StorageRoot             *string `pulumi:"storageRoot"`
	StorageRootCredentialId *string `pulumi:"storageRootCredentialId"`
	UpdatedAt               *int    `pulumi:"updatedAt"`
	UpdatedBy               *string `pulumi:"updatedBy"`
}

type MetastoreState struct {
	Cloud                     pulumi.StringPtrInput
	CreatedAt                 pulumi.IntPtrInput
	CreatedBy                 pulumi.StringPtrInput
	DefaultDataAccessConfigId pulumi.StringPtrInput
	// The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing. Once this is set it cannot be removed and can only be modified to another valid value. To delete this value please taint and recreate the resource.
	DeltaSharingOrganizationName pulumi.StringPtrInput
	// Required along with `deltaSharingScope`. Used to set expiration duration in seconds on recipient data access tokens. Set to 0 for unlimited duration.
	DeltaSharingRecipientTokenLifetimeInSeconds pulumi.IntPtrInput
	// Required along with `deltaSharingRecipientTokenLifetimeInSeconds`. Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL.  INTERNAL only allows sharing within the same account, and INTERNAL_AND_EXTERNAL allows cross account sharing and token based sharing.
	DeltaSharingScope pulumi.StringPtrInput
	// Destroy metastore regardless of its contents.
	ForceDestroy      pulumi.BoolPtrInput
	GlobalMetastoreId pulumi.StringPtrInput
	MetastoreId       pulumi.StringPtrInput
	// Name of metastore.
	Name pulumi.StringPtrInput
	// Username/groupname/sp applicationId of the metastore owner.
	Owner pulumi.StringPtrInput
	// The region of the metastore
	Region pulumi.StringPtrInput
	// Path on cloud storage account, where managed `Table` are stored. Change forces creation of a new resource. If no `storageRoot` is defined for the metastore, each catalog must have a `storageRoot` defined.
	StorageRoot             pulumi.StringPtrInput
	StorageRootCredentialId pulumi.StringPtrInput
	UpdatedAt               pulumi.IntPtrInput
	UpdatedBy               pulumi.StringPtrInput
}

func (MetastoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreState)(nil)).Elem()
}

type metastoreArgs struct {
	Cloud                     *string `pulumi:"cloud"`
	CreatedAt                 *int    `pulumi:"createdAt"`
	CreatedBy                 *string `pulumi:"createdBy"`
	DefaultDataAccessConfigId *string `pulumi:"defaultDataAccessConfigId"`
	// The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing. Once this is set it cannot be removed and can only be modified to another valid value. To delete this value please taint and recreate the resource.
	DeltaSharingOrganizationName *string `pulumi:"deltaSharingOrganizationName"`
	// Required along with `deltaSharingScope`. Used to set expiration duration in seconds on recipient data access tokens. Set to 0 for unlimited duration.
	DeltaSharingRecipientTokenLifetimeInSeconds *int `pulumi:"deltaSharingRecipientTokenLifetimeInSeconds"`
	// Required along with `deltaSharingRecipientTokenLifetimeInSeconds`. Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL.  INTERNAL only allows sharing within the same account, and INTERNAL_AND_EXTERNAL allows cross account sharing and token based sharing.
	DeltaSharingScope *string `pulumi:"deltaSharingScope"`
	// Destroy metastore regardless of its contents.
	ForceDestroy      *bool   `pulumi:"forceDestroy"`
	GlobalMetastoreId *string `pulumi:"globalMetastoreId"`
	MetastoreId       *string `pulumi:"metastoreId"`
	// Name of metastore.
	Name *string `pulumi:"name"`
	// Username/groupname/sp applicationId of the metastore owner.
	Owner *string `pulumi:"owner"`
	// The region of the metastore
	Region *string `pulumi:"region"`
	// Path on cloud storage account, where managed `Table` are stored. Change forces creation of a new resource. If no `storageRoot` is defined for the metastore, each catalog must have a `storageRoot` defined.
	StorageRoot             *string `pulumi:"storageRoot"`
	StorageRootCredentialId *string `pulumi:"storageRootCredentialId"`
	UpdatedAt               *int    `pulumi:"updatedAt"`
	UpdatedBy               *string `pulumi:"updatedBy"`
}

// The set of arguments for constructing a Metastore resource.
type MetastoreArgs struct {
	Cloud                     pulumi.StringPtrInput
	CreatedAt                 pulumi.IntPtrInput
	CreatedBy                 pulumi.StringPtrInput
	DefaultDataAccessConfigId pulumi.StringPtrInput
	// The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing. Once this is set it cannot be removed and can only be modified to another valid value. To delete this value please taint and recreate the resource.
	DeltaSharingOrganizationName pulumi.StringPtrInput
	// Required along with `deltaSharingScope`. Used to set expiration duration in seconds on recipient data access tokens. Set to 0 for unlimited duration.
	DeltaSharingRecipientTokenLifetimeInSeconds pulumi.IntPtrInput
	// Required along with `deltaSharingRecipientTokenLifetimeInSeconds`. Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL.  INTERNAL only allows sharing within the same account, and INTERNAL_AND_EXTERNAL allows cross account sharing and token based sharing.
	DeltaSharingScope pulumi.StringPtrInput
	// Destroy metastore regardless of its contents.
	ForceDestroy      pulumi.BoolPtrInput
	GlobalMetastoreId pulumi.StringPtrInput
	MetastoreId       pulumi.StringPtrInput
	// Name of metastore.
	Name pulumi.StringPtrInput
	// Username/groupname/sp applicationId of the metastore owner.
	Owner pulumi.StringPtrInput
	// The region of the metastore
	Region pulumi.StringPtrInput
	// Path on cloud storage account, where managed `Table` are stored. Change forces creation of a new resource. If no `storageRoot` is defined for the metastore, each catalog must have a `storageRoot` defined.
	StorageRoot             pulumi.StringPtrInput
	StorageRootCredentialId pulumi.StringPtrInput
	UpdatedAt               pulumi.IntPtrInput
	UpdatedBy               pulumi.StringPtrInput
}

func (MetastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metastoreArgs)(nil)).Elem()
}

type MetastoreInput interface {
	pulumi.Input

	ToMetastoreOutput() MetastoreOutput
	ToMetastoreOutputWithContext(ctx context.Context) MetastoreOutput
}

func (*Metastore) ElementType() reflect.Type {
	return reflect.TypeOf((**Metastore)(nil)).Elem()
}

func (i *Metastore) ToMetastoreOutput() MetastoreOutput {
	return i.ToMetastoreOutputWithContext(context.Background())
}

func (i *Metastore) ToMetastoreOutputWithContext(ctx context.Context) MetastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreOutput)
}

// MetastoreArrayInput is an input type that accepts MetastoreArray and MetastoreArrayOutput values.
// You can construct a concrete instance of `MetastoreArrayInput` via:
//
//	MetastoreArray{ MetastoreArgs{...} }
type MetastoreArrayInput interface {
	pulumi.Input

	ToMetastoreArrayOutput() MetastoreArrayOutput
	ToMetastoreArrayOutputWithContext(context.Context) MetastoreArrayOutput
}

type MetastoreArray []MetastoreInput

func (MetastoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Metastore)(nil)).Elem()
}

func (i MetastoreArray) ToMetastoreArrayOutput() MetastoreArrayOutput {
	return i.ToMetastoreArrayOutputWithContext(context.Background())
}

func (i MetastoreArray) ToMetastoreArrayOutputWithContext(ctx context.Context) MetastoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreArrayOutput)
}

// MetastoreMapInput is an input type that accepts MetastoreMap and MetastoreMapOutput values.
// You can construct a concrete instance of `MetastoreMapInput` via:
//
//	MetastoreMap{ "key": MetastoreArgs{...} }
type MetastoreMapInput interface {
	pulumi.Input

	ToMetastoreMapOutput() MetastoreMapOutput
	ToMetastoreMapOutputWithContext(context.Context) MetastoreMapOutput
}

type MetastoreMap map[string]MetastoreInput

func (MetastoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Metastore)(nil)).Elem()
}

func (i MetastoreMap) ToMetastoreMapOutput() MetastoreMapOutput {
	return i.ToMetastoreMapOutputWithContext(context.Background())
}

func (i MetastoreMap) ToMetastoreMapOutputWithContext(ctx context.Context) MetastoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreMapOutput)
}

type MetastoreOutput struct{ *pulumi.OutputState }

func (MetastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Metastore)(nil)).Elem()
}

func (o MetastoreOutput) ToMetastoreOutput() MetastoreOutput {
	return o
}

func (o MetastoreOutput) ToMetastoreOutputWithContext(ctx context.Context) MetastoreOutput {
	return o
}

func (o MetastoreOutput) Cloud() pulumi.StringOutput {
	return o.ApplyT(func(v *Metastore) pulumi.StringOutput { return v.Cloud }).(pulumi.StringOutput)
}

func (o MetastoreOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *Metastore) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

func (o MetastoreOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Metastore) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

func (o MetastoreOutput) DefaultDataAccessConfigId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metastore) pulumi.StringPtrOutput { return v.DefaultDataAccessConfigId }).(pulumi.StringPtrOutput)
}

// The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing. Once this is set it cannot be removed and can only be modified to another valid value. To delete this value please taint and recreate the resource.
func (o MetastoreOutput) DeltaSharingOrganizationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metastore) pulumi.StringPtrOutput { return v.DeltaSharingOrganizationName }).(pulumi.StringPtrOutput)
}

// Required along with `deltaSharingScope`. Used to set expiration duration in seconds on recipient data access tokens. Set to 0 for unlimited duration.
func (o MetastoreOutput) DeltaSharingRecipientTokenLifetimeInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Metastore) pulumi.IntPtrOutput { return v.DeltaSharingRecipientTokenLifetimeInSeconds }).(pulumi.IntPtrOutput)
}

// Required along with `deltaSharingRecipientTokenLifetimeInSeconds`. Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL.  INTERNAL only allows sharing within the same account, and INTERNAL_AND_EXTERNAL allows cross account sharing and token based sharing.
func (o MetastoreOutput) DeltaSharingScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metastore) pulumi.StringPtrOutput { return v.DeltaSharingScope }).(pulumi.StringPtrOutput)
}

// Destroy metastore regardless of its contents.
func (o MetastoreOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Metastore) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

func (o MetastoreOutput) GlobalMetastoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Metastore) pulumi.StringOutput { return v.GlobalMetastoreId }).(pulumi.StringOutput)
}

func (o MetastoreOutput) MetastoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Metastore) pulumi.StringOutput { return v.MetastoreId }).(pulumi.StringOutput)
}

// Name of metastore.
func (o MetastoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Metastore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Username/groupname/sp applicationId of the metastore owner.
func (o MetastoreOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Metastore) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The region of the metastore
func (o MetastoreOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Metastore) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Path on cloud storage account, where managed `Table` are stored. Change forces creation of a new resource. If no `storageRoot` is defined for the metastore, each catalog must have a `storageRoot` defined.
func (o MetastoreOutput) StorageRoot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metastore) pulumi.StringPtrOutput { return v.StorageRoot }).(pulumi.StringPtrOutput)
}

func (o MetastoreOutput) StorageRootCredentialId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metastore) pulumi.StringPtrOutput { return v.StorageRootCredentialId }).(pulumi.StringPtrOutput)
}

func (o MetastoreOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *Metastore) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

func (o MetastoreOutput) UpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Metastore) pulumi.StringOutput { return v.UpdatedBy }).(pulumi.StringOutput)
}

type MetastoreArrayOutput struct{ *pulumi.OutputState }

func (MetastoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Metastore)(nil)).Elem()
}

func (o MetastoreArrayOutput) ToMetastoreArrayOutput() MetastoreArrayOutput {
	return o
}

func (o MetastoreArrayOutput) ToMetastoreArrayOutputWithContext(ctx context.Context) MetastoreArrayOutput {
	return o
}

func (o MetastoreArrayOutput) Index(i pulumi.IntInput) MetastoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Metastore {
		return vs[0].([]*Metastore)[vs[1].(int)]
	}).(MetastoreOutput)
}

type MetastoreMapOutput struct{ *pulumi.OutputState }

func (MetastoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Metastore)(nil)).Elem()
}

func (o MetastoreMapOutput) ToMetastoreMapOutput() MetastoreMapOutput {
	return o
}

func (o MetastoreMapOutput) ToMetastoreMapOutputWithContext(ctx context.Context) MetastoreMapOutput {
	return o
}

func (o MetastoreMapOutput) MapIndex(k pulumi.StringInput) MetastoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Metastore {
		return vs[0].(map[string]*Metastore)[vs[1].(string)]
	}).(MetastoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreInput)(nil)).Elem(), &Metastore{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreArrayInput)(nil)).Elem(), MetastoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreMapInput)(nil)).Elem(), MetastoreMap{})
	pulumi.RegisterOutputType(MetastoreOutput{})
	pulumi.RegisterOutputType(MetastoreArrayOutput{})
	pulumi.RegisterOutputType(MetastoreMapOutput{})
}
