// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can be used to get a single Database Catalog.
//
// ## Example Usage
//
// Referring to a Database Catalog by name:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.LookupDatabaseDatabaseCatalog(ctx, &databricks.LookupDatabaseDatabaseCatalogArgs{
//				Name: "my-database-catalog",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDatabaseDatabaseCatalog(ctx *pulumi.Context, args *LookupDatabaseDatabaseCatalogArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseDatabaseCatalogResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabaseDatabaseCatalogResult
	err := ctx.Invoke("databricks:index/getDatabaseDatabaseCatalog:getDatabaseDatabaseCatalog", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabaseDatabaseCatalog.
type LookupDatabaseDatabaseCatalogArgs struct {
	// (boolean)
	CreateDatabaseIfNotExists *bool `pulumi:"createDatabaseIfNotExists"`
	// (string) - The name of the DatabaseInstance housing the database
	DatabaseInstanceName string `pulumi:"databaseInstanceName"`
	// (string) - The name of the database (in a instance) associated with the catalog
	DatabaseName string `pulumi:"databaseName"`
	// The name of the catalog in UC
	Name string `pulumi:"name"`
}

// A collection of values returned by getDatabaseDatabaseCatalog.
type LookupDatabaseDatabaseCatalogResult struct {
	// (boolean)
	CreateDatabaseIfNotExists bool `pulumi:"createDatabaseIfNotExists"`
	// (string) - The name of the DatabaseInstance housing the database
	DatabaseInstanceName string `pulumi:"databaseInstanceName"`
	// (string) - The name of the database (in a instance) associated with the catalog
	DatabaseName string `pulumi:"databaseName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (string) - The name of the catalog in UC
	Name string `pulumi:"name"`
	// (string)
	Uid string `pulumi:"uid"`
}

func LookupDatabaseDatabaseCatalogOutput(ctx *pulumi.Context, args LookupDatabaseDatabaseCatalogOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseDatabaseCatalogResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDatabaseDatabaseCatalogResultOutput, error) {
			args := v.(LookupDatabaseDatabaseCatalogArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("databricks:index/getDatabaseDatabaseCatalog:getDatabaseDatabaseCatalog", args, LookupDatabaseDatabaseCatalogResultOutput{}, options).(LookupDatabaseDatabaseCatalogResultOutput), nil
		}).(LookupDatabaseDatabaseCatalogResultOutput)
}

// A collection of arguments for invoking getDatabaseDatabaseCatalog.
type LookupDatabaseDatabaseCatalogOutputArgs struct {
	// (boolean)
	CreateDatabaseIfNotExists pulumi.BoolPtrInput `pulumi:"createDatabaseIfNotExists"`
	// (string) - The name of the DatabaseInstance housing the database
	DatabaseInstanceName pulumi.StringInput `pulumi:"databaseInstanceName"`
	// (string) - The name of the database (in a instance) associated with the catalog
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The name of the catalog in UC
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDatabaseDatabaseCatalogOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseDatabaseCatalogArgs)(nil)).Elem()
}

// A collection of values returned by getDatabaseDatabaseCatalog.
type LookupDatabaseDatabaseCatalogResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseDatabaseCatalogResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseDatabaseCatalogResult)(nil)).Elem()
}

func (o LookupDatabaseDatabaseCatalogResultOutput) ToLookupDatabaseDatabaseCatalogResultOutput() LookupDatabaseDatabaseCatalogResultOutput {
	return o
}

func (o LookupDatabaseDatabaseCatalogResultOutput) ToLookupDatabaseDatabaseCatalogResultOutputWithContext(ctx context.Context) LookupDatabaseDatabaseCatalogResultOutput {
	return o
}

// (boolean)
func (o LookupDatabaseDatabaseCatalogResultOutput) CreateDatabaseIfNotExists() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabaseDatabaseCatalogResult) bool { return v.CreateDatabaseIfNotExists }).(pulumi.BoolOutput)
}

// (string) - The name of the DatabaseInstance housing the database
func (o LookupDatabaseDatabaseCatalogResultOutput) DatabaseInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseDatabaseCatalogResult) string { return v.DatabaseInstanceName }).(pulumi.StringOutput)
}

// (string) - The name of the database (in a instance) associated with the catalog
func (o LookupDatabaseDatabaseCatalogResultOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseDatabaseCatalogResult) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDatabaseDatabaseCatalogResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseDatabaseCatalogResult) string { return v.Id }).(pulumi.StringOutput)
}

// (string) - The name of the catalog in UC
func (o LookupDatabaseDatabaseCatalogResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseDatabaseCatalogResult) string { return v.Name }).(pulumi.StringOutput)
}

// (string)
func (o LookupDatabaseDatabaseCatalogResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseDatabaseCatalogResult) string { return v.Uid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabaseDatabaseCatalogResultOutput{})
}
