// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClusterPolicy struct {
	pulumi.CustomResourceState

	Definition                      pulumi.StringOutput             `pulumi:"definition"`
	Description                     pulumi.StringPtrOutput          `pulumi:"description"`
	Libraries                       ClusterPolicyLibraryArrayOutput `pulumi:"libraries"`
	MaxClustersPerUser              pulumi.IntPtrOutput             `pulumi:"maxClustersPerUser"`
	Name                            pulumi.StringOutput             `pulumi:"name"`
	PolicyFamilyDefinitionOverrides pulumi.StringPtrOutput          `pulumi:"policyFamilyDefinitionOverrides"`
	PolicyFamilyId                  pulumi.StringPtrOutput          `pulumi:"policyFamilyId"`
	PolicyId                        pulumi.StringOutput             `pulumi:"policyId"`
}

// NewClusterPolicy registers a new resource with the given unique name, arguments, and options.
func NewClusterPolicy(ctx *pulumi.Context,
	name string, args *ClusterPolicyArgs, opts ...pulumi.ResourceOption) (*ClusterPolicy, error) {
	if args == nil {
		args = &ClusterPolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterPolicy
	err := ctx.RegisterResource("databricks:index/clusterPolicy:ClusterPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterPolicy gets an existing ClusterPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterPolicyState, opts ...pulumi.ResourceOption) (*ClusterPolicy, error) {
	var resource ClusterPolicy
	err := ctx.ReadResource("databricks:index/clusterPolicy:ClusterPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterPolicy resources.
type clusterPolicyState struct {
	Definition                      *string                `pulumi:"definition"`
	Description                     *string                `pulumi:"description"`
	Libraries                       []ClusterPolicyLibrary `pulumi:"libraries"`
	MaxClustersPerUser              *int                   `pulumi:"maxClustersPerUser"`
	Name                            *string                `pulumi:"name"`
	PolicyFamilyDefinitionOverrides *string                `pulumi:"policyFamilyDefinitionOverrides"`
	PolicyFamilyId                  *string                `pulumi:"policyFamilyId"`
	PolicyId                        *string                `pulumi:"policyId"`
}

type ClusterPolicyState struct {
	Definition                      pulumi.StringPtrInput
	Description                     pulumi.StringPtrInput
	Libraries                       ClusterPolicyLibraryArrayInput
	MaxClustersPerUser              pulumi.IntPtrInput
	Name                            pulumi.StringPtrInput
	PolicyFamilyDefinitionOverrides pulumi.StringPtrInput
	PolicyFamilyId                  pulumi.StringPtrInput
	PolicyId                        pulumi.StringPtrInput
}

func (ClusterPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterPolicyState)(nil)).Elem()
}

type clusterPolicyArgs struct {
	Definition                      *string                `pulumi:"definition"`
	Description                     *string                `pulumi:"description"`
	Libraries                       []ClusterPolicyLibrary `pulumi:"libraries"`
	MaxClustersPerUser              *int                   `pulumi:"maxClustersPerUser"`
	Name                            *string                `pulumi:"name"`
	PolicyFamilyDefinitionOverrides *string                `pulumi:"policyFamilyDefinitionOverrides"`
	PolicyFamilyId                  *string                `pulumi:"policyFamilyId"`
}

// The set of arguments for constructing a ClusterPolicy resource.
type ClusterPolicyArgs struct {
	Definition                      pulumi.StringPtrInput
	Description                     pulumi.StringPtrInput
	Libraries                       ClusterPolicyLibraryArrayInput
	MaxClustersPerUser              pulumi.IntPtrInput
	Name                            pulumi.StringPtrInput
	PolicyFamilyDefinitionOverrides pulumi.StringPtrInput
	PolicyFamilyId                  pulumi.StringPtrInput
}

func (ClusterPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterPolicyArgs)(nil)).Elem()
}

type ClusterPolicyInput interface {
	pulumi.Input

	ToClusterPolicyOutput() ClusterPolicyOutput
	ToClusterPolicyOutputWithContext(ctx context.Context) ClusterPolicyOutput
}

func (*ClusterPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPolicy)(nil)).Elem()
}

func (i *ClusterPolicy) ToClusterPolicyOutput() ClusterPolicyOutput {
	return i.ToClusterPolicyOutputWithContext(context.Background())
}

func (i *ClusterPolicy) ToClusterPolicyOutputWithContext(ctx context.Context) ClusterPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPolicyOutput)
}

// ClusterPolicyArrayInput is an input type that accepts ClusterPolicyArray and ClusterPolicyArrayOutput values.
// You can construct a concrete instance of `ClusterPolicyArrayInput` via:
//
//	ClusterPolicyArray{ ClusterPolicyArgs{...} }
type ClusterPolicyArrayInput interface {
	pulumi.Input

	ToClusterPolicyArrayOutput() ClusterPolicyArrayOutput
	ToClusterPolicyArrayOutputWithContext(context.Context) ClusterPolicyArrayOutput
}

type ClusterPolicyArray []ClusterPolicyInput

func (ClusterPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterPolicy)(nil)).Elem()
}

func (i ClusterPolicyArray) ToClusterPolicyArrayOutput() ClusterPolicyArrayOutput {
	return i.ToClusterPolicyArrayOutputWithContext(context.Background())
}

func (i ClusterPolicyArray) ToClusterPolicyArrayOutputWithContext(ctx context.Context) ClusterPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPolicyArrayOutput)
}

// ClusterPolicyMapInput is an input type that accepts ClusterPolicyMap and ClusterPolicyMapOutput values.
// You can construct a concrete instance of `ClusterPolicyMapInput` via:
//
//	ClusterPolicyMap{ "key": ClusterPolicyArgs{...} }
type ClusterPolicyMapInput interface {
	pulumi.Input

	ToClusterPolicyMapOutput() ClusterPolicyMapOutput
	ToClusterPolicyMapOutputWithContext(context.Context) ClusterPolicyMapOutput
}

type ClusterPolicyMap map[string]ClusterPolicyInput

func (ClusterPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterPolicy)(nil)).Elem()
}

func (i ClusterPolicyMap) ToClusterPolicyMapOutput() ClusterPolicyMapOutput {
	return i.ToClusterPolicyMapOutputWithContext(context.Background())
}

func (i ClusterPolicyMap) ToClusterPolicyMapOutputWithContext(ctx context.Context) ClusterPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPolicyMapOutput)
}

type ClusterPolicyOutput struct{ *pulumi.OutputState }

func (ClusterPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPolicy)(nil)).Elem()
}

func (o ClusterPolicyOutput) ToClusterPolicyOutput() ClusterPolicyOutput {
	return o
}

func (o ClusterPolicyOutput) ToClusterPolicyOutputWithContext(ctx context.Context) ClusterPolicyOutput {
	return o
}

func (o ClusterPolicyOutput) Definition() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterPolicy) pulumi.StringOutput { return v.Definition }).(pulumi.StringOutput)
}

func (o ClusterPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ClusterPolicyOutput) Libraries() ClusterPolicyLibraryArrayOutput {
	return o.ApplyT(func(v *ClusterPolicy) ClusterPolicyLibraryArrayOutput { return v.Libraries }).(ClusterPolicyLibraryArrayOutput)
}

func (o ClusterPolicyOutput) MaxClustersPerUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterPolicy) pulumi.IntPtrOutput { return v.MaxClustersPerUser }).(pulumi.IntPtrOutput)
}

func (o ClusterPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ClusterPolicyOutput) PolicyFamilyDefinitionOverrides() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPolicy) pulumi.StringPtrOutput { return v.PolicyFamilyDefinitionOverrides }).(pulumi.StringPtrOutput)
}

func (o ClusterPolicyOutput) PolicyFamilyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPolicy) pulumi.StringPtrOutput { return v.PolicyFamilyId }).(pulumi.StringPtrOutput)
}

func (o ClusterPolicyOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterPolicy) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

type ClusterPolicyArrayOutput struct{ *pulumi.OutputState }

func (ClusterPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterPolicy)(nil)).Elem()
}

func (o ClusterPolicyArrayOutput) ToClusterPolicyArrayOutput() ClusterPolicyArrayOutput {
	return o
}

func (o ClusterPolicyArrayOutput) ToClusterPolicyArrayOutputWithContext(ctx context.Context) ClusterPolicyArrayOutput {
	return o
}

func (o ClusterPolicyArrayOutput) Index(i pulumi.IntInput) ClusterPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterPolicy {
		return vs[0].([]*ClusterPolicy)[vs[1].(int)]
	}).(ClusterPolicyOutput)
}

type ClusterPolicyMapOutput struct{ *pulumi.OutputState }

func (ClusterPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterPolicy)(nil)).Elem()
}

func (o ClusterPolicyMapOutput) ToClusterPolicyMapOutput() ClusterPolicyMapOutput {
	return o
}

func (o ClusterPolicyMapOutput) ToClusterPolicyMapOutputWithContext(ctx context.Context) ClusterPolicyMapOutput {
	return o
}

func (o ClusterPolicyMapOutput) MapIndex(k pulumi.StringInput) ClusterPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterPolicy {
		return vs[0].(map[string]*ClusterPolicy)[vs[1].(string)]
	}).(ClusterPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPolicyInput)(nil)).Elem(), &ClusterPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPolicyArrayInput)(nil)).Elem(), ClusterPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPolicyMapInput)(nil)).Elem(), ClusterPolicyMap{})
	pulumi.RegisterOutputType(ClusterPolicyOutput{})
	pulumi.RegisterOutputType(ClusterPolicyArrayOutput{})
	pulumi.RegisterOutputType(ClusterPolicyMapOutput{})
}
