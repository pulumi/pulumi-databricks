// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to manage [Notification Destinations](https://docs.databricks.com/api/workspace/notificationdestinations). Notification destinations are used to send notifications for query alerts and jobs to destinations outside of Databricks. Only workspace admins can create, update, and delete notification destinations.
//
// > This resource can only be used with a workspace-level provider!
//
// ## Example Usage
//
// `Email` notification destination:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewNotificationDestination(ctx, "ndresource", &databricks.NotificationDestinationArgs{
//				DisplayName: pulumi.String("Notification Destination"),
//				Config: &databricks.NotificationDestinationConfigArgs{
//					Email: &databricks.NotificationDestinationConfigEmailArgs{
//						Addresses: pulumi.StringArray{
//							pulumi.String("abc@gmail.com"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// `Slack` notification destination:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewNotificationDestination(ctx, "ndresource", &databricks.NotificationDestinationArgs{
//				DisplayName: pulumi.String("Notification Destination"),
//				Config: &databricks.NotificationDestinationConfigArgs{
//					Slack: &databricks.NotificationDestinationConfigSlackArgs{
//						Url: pulumi.String("https://hooks.slack.com/services/..."),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// `PagerDuty` notification destination:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewNotificationDestination(ctx, "ndresource", &databricks.NotificationDestinationArgs{
//				DisplayName: pulumi.String("Notification Destination"),
//				Config: &databricks.NotificationDestinationConfigArgs{
//					Pagerduty: &databricks.NotificationDestinationConfigPagerdutyArgs{
//						IntegrationKey: pulumi.String("xxxxxx"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// `Microsoft Teams` notification destination:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewNotificationDestination(ctx, "ndresource", &databricks.NotificationDestinationArgs{
//				DisplayName: pulumi.String("Notification Destination"),
//				Config: &databricks.NotificationDestinationConfigArgs{
//					MicrosoftTeams: &databricks.NotificationDestinationConfigMicrosoftTeamsArgs{
//						Url: pulumi.String("https://outlook.office.com/webhook/..."),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// `Generic Webhook` notification destination:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewNotificationDestination(ctx, "ndresource", &databricks.NotificationDestinationArgs{
//				DisplayName: pulumi.String("Notification Destination"),
//				Config: &databricks.NotificationDestinationConfigArgs{
//					GenericWebhook: &databricks.NotificationDestinationConfigGenericWebhookArgs{
//						Url:      pulumi.String("https://example.com/webhook"),
//						Username: pulumi.String("username"),
//						Password: pulumi.String("password"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource can be imported by notification ID:
//
// hcl
//
// import {
//
//	to = databricks_notification_destination.this
//
//	id = "<notification-id>"
//
// }
//
// Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
//
// bash
//
// ```sh
// $ pulumi import databricks:index/notificationDestination:NotificationDestination this <notification-id>
// ```
type NotificationDestination struct {
	pulumi.CustomResourceState

	// The configuration of the Notification Destination. It must contain exactly one of the following blocks:
	Config NotificationDestinationConfigPtrOutput `pulumi:"config"`
	// the type of Notification Destination.
	DestinationType pulumi.StringOutput `pulumi:"destinationType"`
	// The display name of the Notification Destination.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
}

// NewNotificationDestination registers a new resource with the given unique name, arguments, and options.
func NewNotificationDestination(ctx *pulumi.Context,
	name string, args *NotificationDestinationArgs, opts ...pulumi.ResourceOption) (*NotificationDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotificationDestination
	err := ctx.RegisterResource("databricks:index/notificationDestination:NotificationDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationDestination gets an existing NotificationDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationDestinationState, opts ...pulumi.ResourceOption) (*NotificationDestination, error) {
	var resource NotificationDestination
	err := ctx.ReadResource("databricks:index/notificationDestination:NotificationDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationDestination resources.
type notificationDestinationState struct {
	// The configuration of the Notification Destination. It must contain exactly one of the following blocks:
	Config *NotificationDestinationConfig `pulumi:"config"`
	// the type of Notification Destination.
	DestinationType *string `pulumi:"destinationType"`
	// The display name of the Notification Destination.
	DisplayName *string `pulumi:"displayName"`
}

type NotificationDestinationState struct {
	// The configuration of the Notification Destination. It must contain exactly one of the following blocks:
	Config NotificationDestinationConfigPtrInput
	// the type of Notification Destination.
	DestinationType pulumi.StringPtrInput
	// The display name of the Notification Destination.
	DisplayName pulumi.StringPtrInput
}

func (NotificationDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationDestinationState)(nil)).Elem()
}

type notificationDestinationArgs struct {
	// The configuration of the Notification Destination. It must contain exactly one of the following blocks:
	Config *NotificationDestinationConfig `pulumi:"config"`
	// the type of Notification Destination.
	DestinationType *string `pulumi:"destinationType"`
	// The display name of the Notification Destination.
	DisplayName string `pulumi:"displayName"`
}

// The set of arguments for constructing a NotificationDestination resource.
type NotificationDestinationArgs struct {
	// The configuration of the Notification Destination. It must contain exactly one of the following blocks:
	Config NotificationDestinationConfigPtrInput
	// the type of Notification Destination.
	DestinationType pulumi.StringPtrInput
	// The display name of the Notification Destination.
	DisplayName pulumi.StringInput
}

func (NotificationDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationDestinationArgs)(nil)).Elem()
}

type NotificationDestinationInput interface {
	pulumi.Input

	ToNotificationDestinationOutput() NotificationDestinationOutput
	ToNotificationDestinationOutputWithContext(ctx context.Context) NotificationDestinationOutput
}

func (*NotificationDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationDestination)(nil)).Elem()
}

func (i *NotificationDestination) ToNotificationDestinationOutput() NotificationDestinationOutput {
	return i.ToNotificationDestinationOutputWithContext(context.Background())
}

func (i *NotificationDestination) ToNotificationDestinationOutputWithContext(ctx context.Context) NotificationDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationDestinationOutput)
}

// NotificationDestinationArrayInput is an input type that accepts NotificationDestinationArray and NotificationDestinationArrayOutput values.
// You can construct a concrete instance of `NotificationDestinationArrayInput` via:
//
//	NotificationDestinationArray{ NotificationDestinationArgs{...} }
type NotificationDestinationArrayInput interface {
	pulumi.Input

	ToNotificationDestinationArrayOutput() NotificationDestinationArrayOutput
	ToNotificationDestinationArrayOutputWithContext(context.Context) NotificationDestinationArrayOutput
}

type NotificationDestinationArray []NotificationDestinationInput

func (NotificationDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationDestination)(nil)).Elem()
}

func (i NotificationDestinationArray) ToNotificationDestinationArrayOutput() NotificationDestinationArrayOutput {
	return i.ToNotificationDestinationArrayOutputWithContext(context.Background())
}

func (i NotificationDestinationArray) ToNotificationDestinationArrayOutputWithContext(ctx context.Context) NotificationDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationDestinationArrayOutput)
}

// NotificationDestinationMapInput is an input type that accepts NotificationDestinationMap and NotificationDestinationMapOutput values.
// You can construct a concrete instance of `NotificationDestinationMapInput` via:
//
//	NotificationDestinationMap{ "key": NotificationDestinationArgs{...} }
type NotificationDestinationMapInput interface {
	pulumi.Input

	ToNotificationDestinationMapOutput() NotificationDestinationMapOutput
	ToNotificationDestinationMapOutputWithContext(context.Context) NotificationDestinationMapOutput
}

type NotificationDestinationMap map[string]NotificationDestinationInput

func (NotificationDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationDestination)(nil)).Elem()
}

func (i NotificationDestinationMap) ToNotificationDestinationMapOutput() NotificationDestinationMapOutput {
	return i.ToNotificationDestinationMapOutputWithContext(context.Background())
}

func (i NotificationDestinationMap) ToNotificationDestinationMapOutputWithContext(ctx context.Context) NotificationDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationDestinationMapOutput)
}

type NotificationDestinationOutput struct{ *pulumi.OutputState }

func (NotificationDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationDestination)(nil)).Elem()
}

func (o NotificationDestinationOutput) ToNotificationDestinationOutput() NotificationDestinationOutput {
	return o
}

func (o NotificationDestinationOutput) ToNotificationDestinationOutputWithContext(ctx context.Context) NotificationDestinationOutput {
	return o
}

// The configuration of the Notification Destination. It must contain exactly one of the following blocks:
func (o NotificationDestinationOutput) Config() NotificationDestinationConfigPtrOutput {
	return o.ApplyT(func(v *NotificationDestination) NotificationDestinationConfigPtrOutput { return v.Config }).(NotificationDestinationConfigPtrOutput)
}

// the type of Notification Destination.
func (o NotificationDestinationOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// The display name of the Notification Destination.
func (o NotificationDestinationOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

type NotificationDestinationArrayOutput struct{ *pulumi.OutputState }

func (NotificationDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationDestination)(nil)).Elem()
}

func (o NotificationDestinationArrayOutput) ToNotificationDestinationArrayOutput() NotificationDestinationArrayOutput {
	return o
}

func (o NotificationDestinationArrayOutput) ToNotificationDestinationArrayOutputWithContext(ctx context.Context) NotificationDestinationArrayOutput {
	return o
}

func (o NotificationDestinationArrayOutput) Index(i pulumi.IntInput) NotificationDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationDestination {
		return vs[0].([]*NotificationDestination)[vs[1].(int)]
	}).(NotificationDestinationOutput)
}

type NotificationDestinationMapOutput struct{ *pulumi.OutputState }

func (NotificationDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationDestination)(nil)).Elem()
}

func (o NotificationDestinationMapOutput) ToNotificationDestinationMapOutput() NotificationDestinationMapOutput {
	return o
}

func (o NotificationDestinationMapOutput) ToNotificationDestinationMapOutputWithContext(ctx context.Context) NotificationDestinationMapOutput {
	return o
}

func (o NotificationDestinationMapOutput) MapIndex(k pulumi.StringInput) NotificationDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationDestination {
		return vs[0].(map[string]*NotificationDestination)[vs[1].(string)]
	}).(NotificationDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationDestinationInput)(nil)).Elem(), &NotificationDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationDestinationArrayInput)(nil)).Elem(), NotificationDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationDestinationMapInput)(nil)).Elem(), NotificationDestinationMap{})
	pulumi.RegisterOutputType(NotificationDestinationOutput{})
	pulumi.RegisterOutputType(NotificationDestinationArrayOutput{})
	pulumi.RegisterOutputType(NotificationDestinationMapOutput{})
}
