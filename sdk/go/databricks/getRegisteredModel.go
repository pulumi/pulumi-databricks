// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to get information about [Model in Unity Catalog](https://docs.databricks.com/en/mlflow/models-in-uc.html) in Databricks.
//
// > This data source can only be used with a workspace-level provider!
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.LookupRegisteredModel(ctx, &databricks.LookupRegisteredModelArgs{
//				FullName: "main.default.my_model",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Related Resources
//
// The following resources are often used in the same context:
//
// * RegisteredModel resource to manage models within Unity Catalog.
// * ModelServing to serve this model on a Databricks serving endpoint.
// * MlflowExperiment to manage [MLflow experiments](https://docs.databricks.com/data/data-sources/mlflow-experiment.html) in Databricks.
func LookupRegisteredModel(ctx *pulumi.Context, args *LookupRegisteredModelArgs, opts ...pulumi.InvokeOption) (*LookupRegisteredModelResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRegisteredModelResult
	err := ctx.Invoke("databricks:index/getRegisteredModel:getRegisteredModel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegisteredModel.
type LookupRegisteredModelArgs struct {
	// The fully-qualified name of the registered model (`catalog_name.schema_name.name`).
	FullName string `pulumi:"fullName"`
	// flag to specify if list of aliases should be included into output.
	IncludeAliases *bool `pulumi:"includeAliases"`
	// flag to specify if include registered models in the response for which the principal can only access selective metadata for.
	IncludeBrowse *bool `pulumi:"includeBrowse"`
	// block with information about the model in Unity Catalog:
	ModelInfos []GetRegisteredModelModelInfo `pulumi:"modelInfos"`
}

// A collection of values returned by getRegisteredModel.
type LookupRegisteredModelResult struct {
	// The fully-qualified name of the registered model (`catalog_name.schema_name.name`).
	FullName string `pulumi:"fullName"`
	// The provider-assigned unique ID for this managed resource.
	Id             string `pulumi:"id"`
	IncludeAliases *bool  `pulumi:"includeAliases"`
	IncludeBrowse  *bool  `pulumi:"includeBrowse"`
	// block with information about the model in Unity Catalog:
	ModelInfos []GetRegisteredModelModelInfo `pulumi:"modelInfos"`
}

func LookupRegisteredModelOutput(ctx *pulumi.Context, args LookupRegisteredModelOutputArgs, opts ...pulumi.InvokeOption) LookupRegisteredModelResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRegisteredModelResultOutput, error) {
			args := v.(LookupRegisteredModelArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("databricks:index/getRegisteredModel:getRegisteredModel", args, LookupRegisteredModelResultOutput{}, options).(LookupRegisteredModelResultOutput), nil
		}).(LookupRegisteredModelResultOutput)
}

// A collection of arguments for invoking getRegisteredModel.
type LookupRegisteredModelOutputArgs struct {
	// The fully-qualified name of the registered model (`catalog_name.schema_name.name`).
	FullName pulumi.StringInput `pulumi:"fullName"`
	// flag to specify if list of aliases should be included into output.
	IncludeAliases pulumi.BoolPtrInput `pulumi:"includeAliases"`
	// flag to specify if include registered models in the response for which the principal can only access selective metadata for.
	IncludeBrowse pulumi.BoolPtrInput `pulumi:"includeBrowse"`
	// block with information about the model in Unity Catalog:
	ModelInfos GetRegisteredModelModelInfoArrayInput `pulumi:"modelInfos"`
}

func (LookupRegisteredModelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegisteredModelArgs)(nil)).Elem()
}

// A collection of values returned by getRegisteredModel.
type LookupRegisteredModelResultOutput struct{ *pulumi.OutputState }

func (LookupRegisteredModelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegisteredModelResult)(nil)).Elem()
}

func (o LookupRegisteredModelResultOutput) ToLookupRegisteredModelResultOutput() LookupRegisteredModelResultOutput {
	return o
}

func (o LookupRegisteredModelResultOutput) ToLookupRegisteredModelResultOutputWithContext(ctx context.Context) LookupRegisteredModelResultOutput {
	return o
}

// The fully-qualified name of the registered model (`catalog_name.schema_name.name`).
func (o LookupRegisteredModelResultOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegisteredModelResult) string { return v.FullName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRegisteredModelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegisteredModelResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRegisteredModelResultOutput) IncludeAliases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupRegisteredModelResult) *bool { return v.IncludeAliases }).(pulumi.BoolPtrOutput)
}

func (o LookupRegisteredModelResultOutput) IncludeBrowse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupRegisteredModelResult) *bool { return v.IncludeBrowse }).(pulumi.BoolPtrOutput)
}

// block with information about the model in Unity Catalog:
func (o LookupRegisteredModelResultOutput) ModelInfos() GetRegisteredModelModelInfoArrayOutput {
	return o.ApplyT(func(v LookupRegisteredModelResult) []GetRegisteredModelModelInfo { return v.ModelInfos }).(GetRegisteredModelModelInfoArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegisteredModelResultOutput{})
}
