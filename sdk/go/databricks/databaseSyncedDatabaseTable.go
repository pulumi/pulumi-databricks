// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Lakebase Synced Database Tables are Postgres tables automatically synced from a source table inside Unity Catalog.
// They can be used to serve realtime queries without the operational overhead of managing ETL pipelines.
//
// Synced Database Tables can be configured inside either Database Catalogs or Standard Catalogs. Multiple
// Synced Database Tables can be bin packed inside a single pipeline to optimize costs.
//
// ## Example Usage
//
// ## Import
//
// As of Pulumi v1.5, resources can be imported through configuration.
//
// hcl
//
// import {
//
//	id = "name"
//
//	to = databricks_database_synced_database_table.this
//
// }
//
// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
//
// ```sh
// $ pulumi import databricks:index/databaseSyncedDatabaseTable:DatabaseSyncedDatabaseTable databricks_database_synced_database_table "name"
// ```
type DatabaseSyncedDatabaseTable struct {
	pulumi.CustomResourceState

	// (SyncedTableStatus) - Synced Table data synchronization status
	DataSynchronizationStatus DatabaseSyncedDatabaseTableDataSynchronizationStatusOutput `pulumi:"dataSynchronizationStatus"`
	// Name of the target database instance. This is required when creating synced database tables in standard catalogs.
	// This is optional when creating synced database tables in registered catalogs. If this field is specified
	// when creating synced database tables in registered catalogs, the database instance name MUST
	// match that of the registered catalog (or the request will be rejected)
	DatabaseInstanceName pulumi.StringOutput `pulumi:"databaseInstanceName"`
	// (string) - The name of the database instance that this table is registered to. This field is always returned, and for
	// tables inside database catalogs is inferred database instance associated with the catalog
	EffectiveDatabaseInstanceName pulumi.StringOutput `pulumi:"effectiveDatabaseInstanceName"`
	// (string) - The name of the logical database that this table is registered to
	EffectiveLogicalDatabaseName pulumi.StringOutput `pulumi:"effectiveLogicalDatabaseName"`
	// Target Postgres database object (logical database) name for this table.
	//
	// When creating a synced table in a registered Postgres catalog, the
	// target Postgres database name is inferred to be that of the registered catalog.
	// If this field is specified in this scenario, the Postgres database name MUST
	// match that of the registered catalog (or the request will be rejected).
	//
	// When creating a synced table in a standard catalog, this field is required.
	// In this scenario, specifying this field will allow targeting an arbitrary postgres database.
	// Note that this has implications for the `createDatabaseObjectsIsMissing` field in `spec`
	LogicalDatabaseName pulumi.StringOutput `pulumi:"logicalDatabaseName"`
	// Full three-part (catalog, schema, table) name of the table
	Name pulumi.StringOutput                      `pulumi:"name"`
	Spec DatabaseSyncedDatabaseTableSpecPtrOutput `pulumi:"spec"`
	// (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
	// state of the data synchronization pipeline (i.e. the table may be in "ACTIVE" but the pipeline
	// may be in "PROVISIONING" as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
	UnityCatalogProvisioningState pulumi.StringOutput `pulumi:"unityCatalogProvisioningState"`
	// Workspace ID of the resource
	WorkspaceId pulumi.StringPtrOutput `pulumi:"workspaceId"`
}

// NewDatabaseSyncedDatabaseTable registers a new resource with the given unique name, arguments, and options.
func NewDatabaseSyncedDatabaseTable(ctx *pulumi.Context,
	name string, args *DatabaseSyncedDatabaseTableArgs, opts ...pulumi.ResourceOption) (*DatabaseSyncedDatabaseTable, error) {
	if args == nil {
		args = &DatabaseSyncedDatabaseTableArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseSyncedDatabaseTable
	err := ctx.RegisterResource("databricks:index/databaseSyncedDatabaseTable:DatabaseSyncedDatabaseTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseSyncedDatabaseTable gets an existing DatabaseSyncedDatabaseTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseSyncedDatabaseTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseSyncedDatabaseTableState, opts ...pulumi.ResourceOption) (*DatabaseSyncedDatabaseTable, error) {
	var resource DatabaseSyncedDatabaseTable
	err := ctx.ReadResource("databricks:index/databaseSyncedDatabaseTable:DatabaseSyncedDatabaseTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseSyncedDatabaseTable resources.
type databaseSyncedDatabaseTableState struct {
	// (SyncedTableStatus) - Synced Table data synchronization status
	DataSynchronizationStatus *DatabaseSyncedDatabaseTableDataSynchronizationStatus `pulumi:"dataSynchronizationStatus"`
	// Name of the target database instance. This is required when creating synced database tables in standard catalogs.
	// This is optional when creating synced database tables in registered catalogs. If this field is specified
	// when creating synced database tables in registered catalogs, the database instance name MUST
	// match that of the registered catalog (or the request will be rejected)
	DatabaseInstanceName *string `pulumi:"databaseInstanceName"`
	// (string) - The name of the database instance that this table is registered to. This field is always returned, and for
	// tables inside database catalogs is inferred database instance associated with the catalog
	EffectiveDatabaseInstanceName *string `pulumi:"effectiveDatabaseInstanceName"`
	// (string) - The name of the logical database that this table is registered to
	EffectiveLogicalDatabaseName *string `pulumi:"effectiveLogicalDatabaseName"`
	// Target Postgres database object (logical database) name for this table.
	//
	// When creating a synced table in a registered Postgres catalog, the
	// target Postgres database name is inferred to be that of the registered catalog.
	// If this field is specified in this scenario, the Postgres database name MUST
	// match that of the registered catalog (or the request will be rejected).
	//
	// When creating a synced table in a standard catalog, this field is required.
	// In this scenario, specifying this field will allow targeting an arbitrary postgres database.
	// Note that this has implications for the `createDatabaseObjectsIsMissing` field in `spec`
	LogicalDatabaseName *string `pulumi:"logicalDatabaseName"`
	// Full three-part (catalog, schema, table) name of the table
	Name *string                          `pulumi:"name"`
	Spec *DatabaseSyncedDatabaseTableSpec `pulumi:"spec"`
	// (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
	// state of the data synchronization pipeline (i.e. the table may be in "ACTIVE" but the pipeline
	// may be in "PROVISIONING" as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
	UnityCatalogProvisioningState *string `pulumi:"unityCatalogProvisioningState"`
	// Workspace ID of the resource
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DatabaseSyncedDatabaseTableState struct {
	// (SyncedTableStatus) - Synced Table data synchronization status
	DataSynchronizationStatus DatabaseSyncedDatabaseTableDataSynchronizationStatusPtrInput
	// Name of the target database instance. This is required when creating synced database tables in standard catalogs.
	// This is optional when creating synced database tables in registered catalogs. If this field is specified
	// when creating synced database tables in registered catalogs, the database instance name MUST
	// match that of the registered catalog (or the request will be rejected)
	DatabaseInstanceName pulumi.StringPtrInput
	// (string) - The name of the database instance that this table is registered to. This field is always returned, and for
	// tables inside database catalogs is inferred database instance associated with the catalog
	EffectiveDatabaseInstanceName pulumi.StringPtrInput
	// (string) - The name of the logical database that this table is registered to
	EffectiveLogicalDatabaseName pulumi.StringPtrInput
	// Target Postgres database object (logical database) name for this table.
	//
	// When creating a synced table in a registered Postgres catalog, the
	// target Postgres database name is inferred to be that of the registered catalog.
	// If this field is specified in this scenario, the Postgres database name MUST
	// match that of the registered catalog (or the request will be rejected).
	//
	// When creating a synced table in a standard catalog, this field is required.
	// In this scenario, specifying this field will allow targeting an arbitrary postgres database.
	// Note that this has implications for the `createDatabaseObjectsIsMissing` field in `spec`
	LogicalDatabaseName pulumi.StringPtrInput
	// Full three-part (catalog, schema, table) name of the table
	Name pulumi.StringPtrInput
	Spec DatabaseSyncedDatabaseTableSpecPtrInput
	// (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
	// state of the data synchronization pipeline (i.e. the table may be in "ACTIVE" but the pipeline
	// may be in "PROVISIONING" as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
	UnityCatalogProvisioningState pulumi.StringPtrInput
	// Workspace ID of the resource
	WorkspaceId pulumi.StringPtrInput
}

func (DatabaseSyncedDatabaseTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseSyncedDatabaseTableState)(nil)).Elem()
}

type databaseSyncedDatabaseTableArgs struct {
	// Name of the target database instance. This is required when creating synced database tables in standard catalogs.
	// This is optional when creating synced database tables in registered catalogs. If this field is specified
	// when creating synced database tables in registered catalogs, the database instance name MUST
	// match that of the registered catalog (or the request will be rejected)
	DatabaseInstanceName *string `pulumi:"databaseInstanceName"`
	// Target Postgres database object (logical database) name for this table.
	//
	// When creating a synced table in a registered Postgres catalog, the
	// target Postgres database name is inferred to be that of the registered catalog.
	// If this field is specified in this scenario, the Postgres database name MUST
	// match that of the registered catalog (or the request will be rejected).
	//
	// When creating a synced table in a standard catalog, this field is required.
	// In this scenario, specifying this field will allow targeting an arbitrary postgres database.
	// Note that this has implications for the `createDatabaseObjectsIsMissing` field in `spec`
	LogicalDatabaseName *string `pulumi:"logicalDatabaseName"`
	// Full three-part (catalog, schema, table) name of the table
	Name *string                          `pulumi:"name"`
	Spec *DatabaseSyncedDatabaseTableSpec `pulumi:"spec"`
	// Workspace ID of the resource
	WorkspaceId *string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DatabaseSyncedDatabaseTable resource.
type DatabaseSyncedDatabaseTableArgs struct {
	// Name of the target database instance. This is required when creating synced database tables in standard catalogs.
	// This is optional when creating synced database tables in registered catalogs. If this field is specified
	// when creating synced database tables in registered catalogs, the database instance name MUST
	// match that of the registered catalog (or the request will be rejected)
	DatabaseInstanceName pulumi.StringPtrInput
	// Target Postgres database object (logical database) name for this table.
	//
	// When creating a synced table in a registered Postgres catalog, the
	// target Postgres database name is inferred to be that of the registered catalog.
	// If this field is specified in this scenario, the Postgres database name MUST
	// match that of the registered catalog (or the request will be rejected).
	//
	// When creating a synced table in a standard catalog, this field is required.
	// In this scenario, specifying this field will allow targeting an arbitrary postgres database.
	// Note that this has implications for the `createDatabaseObjectsIsMissing` field in `spec`
	LogicalDatabaseName pulumi.StringPtrInput
	// Full three-part (catalog, schema, table) name of the table
	Name pulumi.StringPtrInput
	Spec DatabaseSyncedDatabaseTableSpecPtrInput
	// Workspace ID of the resource
	WorkspaceId pulumi.StringPtrInput
}

func (DatabaseSyncedDatabaseTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseSyncedDatabaseTableArgs)(nil)).Elem()
}

type DatabaseSyncedDatabaseTableInput interface {
	pulumi.Input

	ToDatabaseSyncedDatabaseTableOutput() DatabaseSyncedDatabaseTableOutput
	ToDatabaseSyncedDatabaseTableOutputWithContext(ctx context.Context) DatabaseSyncedDatabaseTableOutput
}

func (*DatabaseSyncedDatabaseTable) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseSyncedDatabaseTable)(nil)).Elem()
}

func (i *DatabaseSyncedDatabaseTable) ToDatabaseSyncedDatabaseTableOutput() DatabaseSyncedDatabaseTableOutput {
	return i.ToDatabaseSyncedDatabaseTableOutputWithContext(context.Background())
}

func (i *DatabaseSyncedDatabaseTable) ToDatabaseSyncedDatabaseTableOutputWithContext(ctx context.Context) DatabaseSyncedDatabaseTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSyncedDatabaseTableOutput)
}

// DatabaseSyncedDatabaseTableArrayInput is an input type that accepts DatabaseSyncedDatabaseTableArray and DatabaseSyncedDatabaseTableArrayOutput values.
// You can construct a concrete instance of `DatabaseSyncedDatabaseTableArrayInput` via:
//
//	DatabaseSyncedDatabaseTableArray{ DatabaseSyncedDatabaseTableArgs{...} }
type DatabaseSyncedDatabaseTableArrayInput interface {
	pulumi.Input

	ToDatabaseSyncedDatabaseTableArrayOutput() DatabaseSyncedDatabaseTableArrayOutput
	ToDatabaseSyncedDatabaseTableArrayOutputWithContext(context.Context) DatabaseSyncedDatabaseTableArrayOutput
}

type DatabaseSyncedDatabaseTableArray []DatabaseSyncedDatabaseTableInput

func (DatabaseSyncedDatabaseTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseSyncedDatabaseTable)(nil)).Elem()
}

func (i DatabaseSyncedDatabaseTableArray) ToDatabaseSyncedDatabaseTableArrayOutput() DatabaseSyncedDatabaseTableArrayOutput {
	return i.ToDatabaseSyncedDatabaseTableArrayOutputWithContext(context.Background())
}

func (i DatabaseSyncedDatabaseTableArray) ToDatabaseSyncedDatabaseTableArrayOutputWithContext(ctx context.Context) DatabaseSyncedDatabaseTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSyncedDatabaseTableArrayOutput)
}

// DatabaseSyncedDatabaseTableMapInput is an input type that accepts DatabaseSyncedDatabaseTableMap and DatabaseSyncedDatabaseTableMapOutput values.
// You can construct a concrete instance of `DatabaseSyncedDatabaseTableMapInput` via:
//
//	DatabaseSyncedDatabaseTableMap{ "key": DatabaseSyncedDatabaseTableArgs{...} }
type DatabaseSyncedDatabaseTableMapInput interface {
	pulumi.Input

	ToDatabaseSyncedDatabaseTableMapOutput() DatabaseSyncedDatabaseTableMapOutput
	ToDatabaseSyncedDatabaseTableMapOutputWithContext(context.Context) DatabaseSyncedDatabaseTableMapOutput
}

type DatabaseSyncedDatabaseTableMap map[string]DatabaseSyncedDatabaseTableInput

func (DatabaseSyncedDatabaseTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseSyncedDatabaseTable)(nil)).Elem()
}

func (i DatabaseSyncedDatabaseTableMap) ToDatabaseSyncedDatabaseTableMapOutput() DatabaseSyncedDatabaseTableMapOutput {
	return i.ToDatabaseSyncedDatabaseTableMapOutputWithContext(context.Background())
}

func (i DatabaseSyncedDatabaseTableMap) ToDatabaseSyncedDatabaseTableMapOutputWithContext(ctx context.Context) DatabaseSyncedDatabaseTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSyncedDatabaseTableMapOutput)
}

type DatabaseSyncedDatabaseTableOutput struct{ *pulumi.OutputState }

func (DatabaseSyncedDatabaseTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseSyncedDatabaseTable)(nil)).Elem()
}

func (o DatabaseSyncedDatabaseTableOutput) ToDatabaseSyncedDatabaseTableOutput() DatabaseSyncedDatabaseTableOutput {
	return o
}

func (o DatabaseSyncedDatabaseTableOutput) ToDatabaseSyncedDatabaseTableOutputWithContext(ctx context.Context) DatabaseSyncedDatabaseTableOutput {
	return o
}

// (SyncedTableStatus) - Synced Table data synchronization status
func (o DatabaseSyncedDatabaseTableOutput) DataSynchronizationStatus() DatabaseSyncedDatabaseTableDataSynchronizationStatusOutput {
	return o.ApplyT(func(v *DatabaseSyncedDatabaseTable) DatabaseSyncedDatabaseTableDataSynchronizationStatusOutput {
		return v.DataSynchronizationStatus
	}).(DatabaseSyncedDatabaseTableDataSynchronizationStatusOutput)
}

// Name of the target database instance. This is required when creating synced database tables in standard catalogs.
// This is optional when creating synced database tables in registered catalogs. If this field is specified
// when creating synced database tables in registered catalogs, the database instance name MUST
// match that of the registered catalog (or the request will be rejected)
func (o DatabaseSyncedDatabaseTableOutput) DatabaseInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseSyncedDatabaseTable) pulumi.StringOutput { return v.DatabaseInstanceName }).(pulumi.StringOutput)
}

// (string) - The name of the database instance that this table is registered to. This field is always returned, and for
// tables inside database catalogs is inferred database instance associated with the catalog
func (o DatabaseSyncedDatabaseTableOutput) EffectiveDatabaseInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseSyncedDatabaseTable) pulumi.StringOutput { return v.EffectiveDatabaseInstanceName }).(pulumi.StringOutput)
}

// (string) - The name of the logical database that this table is registered to
func (o DatabaseSyncedDatabaseTableOutput) EffectiveLogicalDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseSyncedDatabaseTable) pulumi.StringOutput { return v.EffectiveLogicalDatabaseName }).(pulumi.StringOutput)
}

// Target Postgres database object (logical database) name for this table.
//
// When creating a synced table in a registered Postgres catalog, the
// target Postgres database name is inferred to be that of the registered catalog.
// If this field is specified in this scenario, the Postgres database name MUST
// match that of the registered catalog (or the request will be rejected).
//
// When creating a synced table in a standard catalog, this field is required.
// In this scenario, specifying this field will allow targeting an arbitrary postgres database.
// Note that this has implications for the `createDatabaseObjectsIsMissing` field in `spec`
func (o DatabaseSyncedDatabaseTableOutput) LogicalDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseSyncedDatabaseTable) pulumi.StringOutput { return v.LogicalDatabaseName }).(pulumi.StringOutput)
}

// Full three-part (catalog, schema, table) name of the table
func (o DatabaseSyncedDatabaseTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseSyncedDatabaseTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatabaseSyncedDatabaseTableOutput) Spec() DatabaseSyncedDatabaseTableSpecPtrOutput {
	return o.ApplyT(func(v *DatabaseSyncedDatabaseTable) DatabaseSyncedDatabaseTableSpecPtrOutput { return v.Spec }).(DatabaseSyncedDatabaseTableSpecPtrOutput)
}

// (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
// state of the data synchronization pipeline (i.e. the table may be in "ACTIVE" but the pipeline
// may be in "PROVISIONING" as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
func (o DatabaseSyncedDatabaseTableOutput) UnityCatalogProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseSyncedDatabaseTable) pulumi.StringOutput { return v.UnityCatalogProvisioningState }).(pulumi.StringOutput)
}

// Workspace ID of the resource
func (o DatabaseSyncedDatabaseTableOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseSyncedDatabaseTable) pulumi.StringPtrOutput { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

type DatabaseSyncedDatabaseTableArrayOutput struct{ *pulumi.OutputState }

func (DatabaseSyncedDatabaseTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseSyncedDatabaseTable)(nil)).Elem()
}

func (o DatabaseSyncedDatabaseTableArrayOutput) ToDatabaseSyncedDatabaseTableArrayOutput() DatabaseSyncedDatabaseTableArrayOutput {
	return o
}

func (o DatabaseSyncedDatabaseTableArrayOutput) ToDatabaseSyncedDatabaseTableArrayOutputWithContext(ctx context.Context) DatabaseSyncedDatabaseTableArrayOutput {
	return o
}

func (o DatabaseSyncedDatabaseTableArrayOutput) Index(i pulumi.IntInput) DatabaseSyncedDatabaseTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseSyncedDatabaseTable {
		return vs[0].([]*DatabaseSyncedDatabaseTable)[vs[1].(int)]
	}).(DatabaseSyncedDatabaseTableOutput)
}

type DatabaseSyncedDatabaseTableMapOutput struct{ *pulumi.OutputState }

func (DatabaseSyncedDatabaseTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseSyncedDatabaseTable)(nil)).Elem()
}

func (o DatabaseSyncedDatabaseTableMapOutput) ToDatabaseSyncedDatabaseTableMapOutput() DatabaseSyncedDatabaseTableMapOutput {
	return o
}

func (o DatabaseSyncedDatabaseTableMapOutput) ToDatabaseSyncedDatabaseTableMapOutputWithContext(ctx context.Context) DatabaseSyncedDatabaseTableMapOutput {
	return o
}

func (o DatabaseSyncedDatabaseTableMapOutput) MapIndex(k pulumi.StringInput) DatabaseSyncedDatabaseTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseSyncedDatabaseTable {
		return vs[0].(map[string]*DatabaseSyncedDatabaseTable)[vs[1].(string)]
	}).(DatabaseSyncedDatabaseTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseSyncedDatabaseTableInput)(nil)).Elem(), &DatabaseSyncedDatabaseTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseSyncedDatabaseTableArrayInput)(nil)).Elem(), DatabaseSyncedDatabaseTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseSyncedDatabaseTableMapInput)(nil)).Elem(), DatabaseSyncedDatabaseTableMap{})
	pulumi.RegisterOutputType(DatabaseSyncedDatabaseTableOutput{})
	pulumi.RegisterOutputType(DatabaseSyncedDatabaseTableArrayOutput{})
	pulumi.RegisterOutputType(DatabaseSyncedDatabaseTableMapOutput{})
}
