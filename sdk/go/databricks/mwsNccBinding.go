// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MwsNccBinding struct {
	pulumi.CustomResourceState

	NetworkConnectivityConfigId pulumi.StringOutput `pulumi:"networkConnectivityConfigId"`
	WorkspaceId                 pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewMwsNccBinding registers a new resource with the given unique name, arguments, and options.
func NewMwsNccBinding(ctx *pulumi.Context,
	name string, args *MwsNccBindingArgs, opts ...pulumi.ResourceOption) (*MwsNccBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkConnectivityConfigId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkConnectivityConfigId'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MwsNccBinding
	err := ctx.RegisterResource("databricks:index/mwsNccBinding:MwsNccBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMwsNccBinding gets an existing MwsNccBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMwsNccBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MwsNccBindingState, opts ...pulumi.ResourceOption) (*MwsNccBinding, error) {
	var resource MwsNccBinding
	err := ctx.ReadResource("databricks:index/mwsNccBinding:MwsNccBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MwsNccBinding resources.
type mwsNccBindingState struct {
	NetworkConnectivityConfigId *string `pulumi:"networkConnectivityConfigId"`
	WorkspaceId                 *string `pulumi:"workspaceId"`
}

type MwsNccBindingState struct {
	NetworkConnectivityConfigId pulumi.StringPtrInput
	WorkspaceId                 pulumi.StringPtrInput
}

func (MwsNccBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*mwsNccBindingState)(nil)).Elem()
}

type mwsNccBindingArgs struct {
	NetworkConnectivityConfigId string `pulumi:"networkConnectivityConfigId"`
	WorkspaceId                 string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a MwsNccBinding resource.
type MwsNccBindingArgs struct {
	NetworkConnectivityConfigId pulumi.StringInput
	WorkspaceId                 pulumi.StringInput
}

func (MwsNccBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mwsNccBindingArgs)(nil)).Elem()
}

type MwsNccBindingInput interface {
	pulumi.Input

	ToMwsNccBindingOutput() MwsNccBindingOutput
	ToMwsNccBindingOutputWithContext(ctx context.Context) MwsNccBindingOutput
}

func (*MwsNccBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**MwsNccBinding)(nil)).Elem()
}

func (i *MwsNccBinding) ToMwsNccBindingOutput() MwsNccBindingOutput {
	return i.ToMwsNccBindingOutputWithContext(context.Background())
}

func (i *MwsNccBinding) ToMwsNccBindingOutputWithContext(ctx context.Context) MwsNccBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MwsNccBindingOutput)
}

// MwsNccBindingArrayInput is an input type that accepts MwsNccBindingArray and MwsNccBindingArrayOutput values.
// You can construct a concrete instance of `MwsNccBindingArrayInput` via:
//
//	MwsNccBindingArray{ MwsNccBindingArgs{...} }
type MwsNccBindingArrayInput interface {
	pulumi.Input

	ToMwsNccBindingArrayOutput() MwsNccBindingArrayOutput
	ToMwsNccBindingArrayOutputWithContext(context.Context) MwsNccBindingArrayOutput
}

type MwsNccBindingArray []MwsNccBindingInput

func (MwsNccBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MwsNccBinding)(nil)).Elem()
}

func (i MwsNccBindingArray) ToMwsNccBindingArrayOutput() MwsNccBindingArrayOutput {
	return i.ToMwsNccBindingArrayOutputWithContext(context.Background())
}

func (i MwsNccBindingArray) ToMwsNccBindingArrayOutputWithContext(ctx context.Context) MwsNccBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MwsNccBindingArrayOutput)
}

// MwsNccBindingMapInput is an input type that accepts MwsNccBindingMap and MwsNccBindingMapOutput values.
// You can construct a concrete instance of `MwsNccBindingMapInput` via:
//
//	MwsNccBindingMap{ "key": MwsNccBindingArgs{...} }
type MwsNccBindingMapInput interface {
	pulumi.Input

	ToMwsNccBindingMapOutput() MwsNccBindingMapOutput
	ToMwsNccBindingMapOutputWithContext(context.Context) MwsNccBindingMapOutput
}

type MwsNccBindingMap map[string]MwsNccBindingInput

func (MwsNccBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MwsNccBinding)(nil)).Elem()
}

func (i MwsNccBindingMap) ToMwsNccBindingMapOutput() MwsNccBindingMapOutput {
	return i.ToMwsNccBindingMapOutputWithContext(context.Background())
}

func (i MwsNccBindingMap) ToMwsNccBindingMapOutputWithContext(ctx context.Context) MwsNccBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MwsNccBindingMapOutput)
}

type MwsNccBindingOutput struct{ *pulumi.OutputState }

func (MwsNccBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MwsNccBinding)(nil)).Elem()
}

func (o MwsNccBindingOutput) ToMwsNccBindingOutput() MwsNccBindingOutput {
	return o
}

func (o MwsNccBindingOutput) ToMwsNccBindingOutputWithContext(ctx context.Context) MwsNccBindingOutput {
	return o
}

func (o MwsNccBindingOutput) NetworkConnectivityConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *MwsNccBinding) pulumi.StringOutput { return v.NetworkConnectivityConfigId }).(pulumi.StringOutput)
}

func (o MwsNccBindingOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MwsNccBinding) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type MwsNccBindingArrayOutput struct{ *pulumi.OutputState }

func (MwsNccBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MwsNccBinding)(nil)).Elem()
}

func (o MwsNccBindingArrayOutput) ToMwsNccBindingArrayOutput() MwsNccBindingArrayOutput {
	return o
}

func (o MwsNccBindingArrayOutput) ToMwsNccBindingArrayOutputWithContext(ctx context.Context) MwsNccBindingArrayOutput {
	return o
}

func (o MwsNccBindingArrayOutput) Index(i pulumi.IntInput) MwsNccBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MwsNccBinding {
		return vs[0].([]*MwsNccBinding)[vs[1].(int)]
	}).(MwsNccBindingOutput)
}

type MwsNccBindingMapOutput struct{ *pulumi.OutputState }

func (MwsNccBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MwsNccBinding)(nil)).Elem()
}

func (o MwsNccBindingMapOutput) ToMwsNccBindingMapOutput() MwsNccBindingMapOutput {
	return o
}

func (o MwsNccBindingMapOutput) ToMwsNccBindingMapOutputWithContext(ctx context.Context) MwsNccBindingMapOutput {
	return o
}

func (o MwsNccBindingMapOutput) MapIndex(k pulumi.StringInput) MwsNccBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MwsNccBinding {
		return vs[0].(map[string]*MwsNccBinding)[vs[1].(string)]
	}).(MwsNccBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MwsNccBindingInput)(nil)).Elem(), &MwsNccBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*MwsNccBindingArrayInput)(nil)).Elem(), MwsNccBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MwsNccBindingMapInput)(nil)).Elem(), MwsNccBindingMap{})
	pulumi.RegisterOutputType(MwsNccBindingOutput{})
	pulumi.RegisterOutputType(MwsNccBindingArrayOutput{})
	pulumi.RegisterOutputType(MwsNccBindingMapOutput{})
}
