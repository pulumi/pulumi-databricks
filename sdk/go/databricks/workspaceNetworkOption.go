// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Workspace network options allow configuration of network settings for Databricks workspaces by selecting which network policy to associate with the workspace.
//
// Each workspace is always associated with exactly one network policy that controls which network destinations can be accessed from the Databricks environment. By default, workspaces are associated with the `default-policy` network policy.
//
// This resource has the following characteristics:
//
// - You cannot create or delete a workspace's network option
// - You can only update it to associate the workspace with a different policy
// - This resource is used to change the network policy assignment for existing workspaces
//
// > **Note** This resource can only be used with an account-level provider!
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewWorkspaceNetworkOption(ctx, "example_workspace_network_option", &databricks.WorkspaceNetworkOptionArgs{
//				WorkspaceId:     pulumi.String("9999999999999999"),
//				NetworkPolicyId: pulumi.String("default-policy"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// As of Pulumi v1.5, resources can be imported through configuration.
//
// hcl
//
// import {
//
//	id = workspace_id
//
//	to = databricks_workspace_network_option.this
//
// }
//
// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
//
// ```sh
// $ pulumi import databricks:index/workspaceNetworkOption:WorkspaceNetworkOption databricks_workspace_network_option workspace_id
// ```
type WorkspaceNetworkOption struct {
	pulumi.CustomResourceState

	// The network policy ID to apply to the workspace. This controls the network access rules
	// for all serverless compute resources in the workspace. Each workspace can only be
	// linked to one policy at a time. If no policy is explicitly assigned,
	// the workspace will use 'default-policy'
	NetworkPolicyId pulumi.StringPtrOutput `pulumi:"networkPolicyId"`
	// The workspace ID
	WorkspaceId pulumi.StringPtrOutput `pulumi:"workspaceId"`
}

// NewWorkspaceNetworkOption registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceNetworkOption(ctx *pulumi.Context,
	name string, args *WorkspaceNetworkOptionArgs, opts ...pulumi.ResourceOption) (*WorkspaceNetworkOption, error) {
	if args == nil {
		args = &WorkspaceNetworkOptionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceNetworkOption
	err := ctx.RegisterResource("databricks:index/workspaceNetworkOption:WorkspaceNetworkOption", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceNetworkOption gets an existing WorkspaceNetworkOption resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceNetworkOption(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceNetworkOptionState, opts ...pulumi.ResourceOption) (*WorkspaceNetworkOption, error) {
	var resource WorkspaceNetworkOption
	err := ctx.ReadResource("databricks:index/workspaceNetworkOption:WorkspaceNetworkOption", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceNetworkOption resources.
type workspaceNetworkOptionState struct {
	// The network policy ID to apply to the workspace. This controls the network access rules
	// for all serverless compute resources in the workspace. Each workspace can only be
	// linked to one policy at a time. If no policy is explicitly assigned,
	// the workspace will use 'default-policy'
	NetworkPolicyId *string `pulumi:"networkPolicyId"`
	// The workspace ID
	WorkspaceId *string `pulumi:"workspaceId"`
}

type WorkspaceNetworkOptionState struct {
	// The network policy ID to apply to the workspace. This controls the network access rules
	// for all serverless compute resources in the workspace. Each workspace can only be
	// linked to one policy at a time. If no policy is explicitly assigned,
	// the workspace will use 'default-policy'
	NetworkPolicyId pulumi.StringPtrInput
	// The workspace ID
	WorkspaceId pulumi.StringPtrInput
}

func (WorkspaceNetworkOptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceNetworkOptionState)(nil)).Elem()
}

type workspaceNetworkOptionArgs struct {
	// The network policy ID to apply to the workspace. This controls the network access rules
	// for all serverless compute resources in the workspace. Each workspace can only be
	// linked to one policy at a time. If no policy is explicitly assigned,
	// the workspace will use 'default-policy'
	NetworkPolicyId *string `pulumi:"networkPolicyId"`
	// The workspace ID
	WorkspaceId *string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceNetworkOption resource.
type WorkspaceNetworkOptionArgs struct {
	// The network policy ID to apply to the workspace. This controls the network access rules
	// for all serverless compute resources in the workspace. Each workspace can only be
	// linked to one policy at a time. If no policy is explicitly assigned,
	// the workspace will use 'default-policy'
	NetworkPolicyId pulumi.StringPtrInput
	// The workspace ID
	WorkspaceId pulumi.StringPtrInput
}

func (WorkspaceNetworkOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceNetworkOptionArgs)(nil)).Elem()
}

type WorkspaceNetworkOptionInput interface {
	pulumi.Input

	ToWorkspaceNetworkOptionOutput() WorkspaceNetworkOptionOutput
	ToWorkspaceNetworkOptionOutputWithContext(ctx context.Context) WorkspaceNetworkOptionOutput
}

func (*WorkspaceNetworkOption) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceNetworkOption)(nil)).Elem()
}

func (i *WorkspaceNetworkOption) ToWorkspaceNetworkOptionOutput() WorkspaceNetworkOptionOutput {
	return i.ToWorkspaceNetworkOptionOutputWithContext(context.Background())
}

func (i *WorkspaceNetworkOption) ToWorkspaceNetworkOptionOutputWithContext(ctx context.Context) WorkspaceNetworkOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceNetworkOptionOutput)
}

// WorkspaceNetworkOptionArrayInput is an input type that accepts WorkspaceNetworkOptionArray and WorkspaceNetworkOptionArrayOutput values.
// You can construct a concrete instance of `WorkspaceNetworkOptionArrayInput` via:
//
//	WorkspaceNetworkOptionArray{ WorkspaceNetworkOptionArgs{...} }
type WorkspaceNetworkOptionArrayInput interface {
	pulumi.Input

	ToWorkspaceNetworkOptionArrayOutput() WorkspaceNetworkOptionArrayOutput
	ToWorkspaceNetworkOptionArrayOutputWithContext(context.Context) WorkspaceNetworkOptionArrayOutput
}

type WorkspaceNetworkOptionArray []WorkspaceNetworkOptionInput

func (WorkspaceNetworkOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceNetworkOption)(nil)).Elem()
}

func (i WorkspaceNetworkOptionArray) ToWorkspaceNetworkOptionArrayOutput() WorkspaceNetworkOptionArrayOutput {
	return i.ToWorkspaceNetworkOptionArrayOutputWithContext(context.Background())
}

func (i WorkspaceNetworkOptionArray) ToWorkspaceNetworkOptionArrayOutputWithContext(ctx context.Context) WorkspaceNetworkOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceNetworkOptionArrayOutput)
}

// WorkspaceNetworkOptionMapInput is an input type that accepts WorkspaceNetworkOptionMap and WorkspaceNetworkOptionMapOutput values.
// You can construct a concrete instance of `WorkspaceNetworkOptionMapInput` via:
//
//	WorkspaceNetworkOptionMap{ "key": WorkspaceNetworkOptionArgs{...} }
type WorkspaceNetworkOptionMapInput interface {
	pulumi.Input

	ToWorkspaceNetworkOptionMapOutput() WorkspaceNetworkOptionMapOutput
	ToWorkspaceNetworkOptionMapOutputWithContext(context.Context) WorkspaceNetworkOptionMapOutput
}

type WorkspaceNetworkOptionMap map[string]WorkspaceNetworkOptionInput

func (WorkspaceNetworkOptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceNetworkOption)(nil)).Elem()
}

func (i WorkspaceNetworkOptionMap) ToWorkspaceNetworkOptionMapOutput() WorkspaceNetworkOptionMapOutput {
	return i.ToWorkspaceNetworkOptionMapOutputWithContext(context.Background())
}

func (i WorkspaceNetworkOptionMap) ToWorkspaceNetworkOptionMapOutputWithContext(ctx context.Context) WorkspaceNetworkOptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceNetworkOptionMapOutput)
}

type WorkspaceNetworkOptionOutput struct{ *pulumi.OutputState }

func (WorkspaceNetworkOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceNetworkOption)(nil)).Elem()
}

func (o WorkspaceNetworkOptionOutput) ToWorkspaceNetworkOptionOutput() WorkspaceNetworkOptionOutput {
	return o
}

func (o WorkspaceNetworkOptionOutput) ToWorkspaceNetworkOptionOutputWithContext(ctx context.Context) WorkspaceNetworkOptionOutput {
	return o
}

// The network policy ID to apply to the workspace. This controls the network access rules
// for all serverless compute resources in the workspace. Each workspace can only be
// linked to one policy at a time. If no policy is explicitly assigned,
// the workspace will use 'default-policy'
func (o WorkspaceNetworkOptionOutput) NetworkPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceNetworkOption) pulumi.StringPtrOutput { return v.NetworkPolicyId }).(pulumi.StringPtrOutput)
}

// The workspace ID
func (o WorkspaceNetworkOptionOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceNetworkOption) pulumi.StringPtrOutput { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

type WorkspaceNetworkOptionArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceNetworkOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceNetworkOption)(nil)).Elem()
}

func (o WorkspaceNetworkOptionArrayOutput) ToWorkspaceNetworkOptionArrayOutput() WorkspaceNetworkOptionArrayOutput {
	return o
}

func (o WorkspaceNetworkOptionArrayOutput) ToWorkspaceNetworkOptionArrayOutputWithContext(ctx context.Context) WorkspaceNetworkOptionArrayOutput {
	return o
}

func (o WorkspaceNetworkOptionArrayOutput) Index(i pulumi.IntInput) WorkspaceNetworkOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceNetworkOption {
		return vs[0].([]*WorkspaceNetworkOption)[vs[1].(int)]
	}).(WorkspaceNetworkOptionOutput)
}

type WorkspaceNetworkOptionMapOutput struct{ *pulumi.OutputState }

func (WorkspaceNetworkOptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceNetworkOption)(nil)).Elem()
}

func (o WorkspaceNetworkOptionMapOutput) ToWorkspaceNetworkOptionMapOutput() WorkspaceNetworkOptionMapOutput {
	return o
}

func (o WorkspaceNetworkOptionMapOutput) ToWorkspaceNetworkOptionMapOutputWithContext(ctx context.Context) WorkspaceNetworkOptionMapOutput {
	return o
}

func (o WorkspaceNetworkOptionMapOutput) MapIndex(k pulumi.StringInput) WorkspaceNetworkOptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceNetworkOption {
		return vs[0].(map[string]*WorkspaceNetworkOption)[vs[1].(string)]
	}).(WorkspaceNetworkOptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceNetworkOptionInput)(nil)).Elem(), &WorkspaceNetworkOption{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceNetworkOptionArrayInput)(nil)).Elem(), WorkspaceNetworkOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceNetworkOptionMapInput)(nil)).Elem(), WorkspaceNetworkOptionMap{})
	pulumi.RegisterOutputType(WorkspaceNetworkOptionOutput{})
	pulumi.RegisterOutputType(WorkspaceNetworkOptionArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceNetworkOptionMapOutput{})
}
