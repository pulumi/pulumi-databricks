// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create or overwrite the ACL associated with the given principal (user or group) on the specified databricks_secret_scope. Please consult [Secrets User Guide](https://docs.databricks.com/security/secrets/index.html#secrets-user-guide) for more details.
//
// ## Example Usage
//
// This way, data scientists can read the Publishing API key that is synchronized from, for example, Azure Key Vault.
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ds, err := databricks.NewGroup(ctx, "ds", nil)
//			if err != nil {
//				return err
//			}
//			app, err := databricks.NewSecretScope(ctx, "app", nil)
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewSecretAcl(ctx, "mySecretAcl", &databricks.SecretAclArgs{
//				Principal:  ds.DisplayName,
//				Permission: pulumi.String("READ"),
//				Scope:      app.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewSecret(ctx, "publishingApi", &databricks.SecretArgs{
//				Key:         pulumi.String("publishing_api"),
//				StringValue: pulumi.Any(data.Azurerm_key_vault_secret.Example.Value),
//				Scope:       app.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Related Resources
//
// The following resources are often used in the same context:
//
// * End to end workspace management guide.
// * Notebook to manage [Databricks Notebooks](https://docs.databricks.com/notebooks/index.html).
// * Permissions to manage [access control](https://docs.databricks.com/security/access-control/index.html) in Databricks workspace.
// * Repo to manage [Databricks Repos](https://docs.databricks.com/repos.html).
// * Secret to manage [secrets](https://docs.databricks.com/security/secrets/index.html#secrets-user-guide) in Databricks workspace.
// * SecretScope to create [secret scopes](https://docs.databricks.com/security/secrets/index.html#secrets-user-guide) in Databricks workspace.
//
// ## Import
//
// The resource secret acl can be imported using `scopeName|||principalName` combination.
//
// bash
//
// ```sh
// $ pulumi import databricks:index/secretAcl:SecretAcl object `scopeName|||principalName`
// ```
type SecretAcl struct {
	pulumi.CustomResourceState

	// `READ`, `WRITE` or `MANAGE`.
	Permission pulumi.StringOutput `pulumi:"permission"`
	// principal's identifier. It can be:
	Principal pulumi.StringOutput `pulumi:"principal"`
	// name of the scope
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewSecretAcl registers a new resource with the given unique name, arguments, and options.
func NewSecretAcl(ctx *pulumi.Context,
	name string, args *SecretAclArgs, opts ...pulumi.ResourceOption) (*SecretAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretAcl
	err := ctx.RegisterResource("databricks:index/secretAcl:SecretAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretAcl gets an existing SecretAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretAclState, opts ...pulumi.ResourceOption) (*SecretAcl, error) {
	var resource SecretAcl
	err := ctx.ReadResource("databricks:index/secretAcl:SecretAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretAcl resources.
type secretAclState struct {
	// `READ`, `WRITE` or `MANAGE`.
	Permission *string `pulumi:"permission"`
	// principal's identifier. It can be:
	Principal *string `pulumi:"principal"`
	// name of the scope
	Scope *string `pulumi:"scope"`
}

type SecretAclState struct {
	// `READ`, `WRITE` or `MANAGE`.
	Permission pulumi.StringPtrInput
	// principal's identifier. It can be:
	Principal pulumi.StringPtrInput
	// name of the scope
	Scope pulumi.StringPtrInput
}

func (SecretAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretAclState)(nil)).Elem()
}

type secretAclArgs struct {
	// `READ`, `WRITE` or `MANAGE`.
	Permission string `pulumi:"permission"`
	// principal's identifier. It can be:
	Principal string `pulumi:"principal"`
	// name of the scope
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a SecretAcl resource.
type SecretAclArgs struct {
	// `READ`, `WRITE` or `MANAGE`.
	Permission pulumi.StringInput
	// principal's identifier. It can be:
	Principal pulumi.StringInput
	// name of the scope
	Scope pulumi.StringInput
}

func (SecretAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretAclArgs)(nil)).Elem()
}

type SecretAclInput interface {
	pulumi.Input

	ToSecretAclOutput() SecretAclOutput
	ToSecretAclOutputWithContext(ctx context.Context) SecretAclOutput
}

func (*SecretAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretAcl)(nil)).Elem()
}

func (i *SecretAcl) ToSecretAclOutput() SecretAclOutput {
	return i.ToSecretAclOutputWithContext(context.Background())
}

func (i *SecretAcl) ToSecretAclOutputWithContext(ctx context.Context) SecretAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretAclOutput)
}

// SecretAclArrayInput is an input type that accepts SecretAclArray and SecretAclArrayOutput values.
// You can construct a concrete instance of `SecretAclArrayInput` via:
//
//	SecretAclArray{ SecretAclArgs{...} }
type SecretAclArrayInput interface {
	pulumi.Input

	ToSecretAclArrayOutput() SecretAclArrayOutput
	ToSecretAclArrayOutputWithContext(context.Context) SecretAclArrayOutput
}

type SecretAclArray []SecretAclInput

func (SecretAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretAcl)(nil)).Elem()
}

func (i SecretAclArray) ToSecretAclArrayOutput() SecretAclArrayOutput {
	return i.ToSecretAclArrayOutputWithContext(context.Background())
}

func (i SecretAclArray) ToSecretAclArrayOutputWithContext(ctx context.Context) SecretAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretAclArrayOutput)
}

// SecretAclMapInput is an input type that accepts SecretAclMap and SecretAclMapOutput values.
// You can construct a concrete instance of `SecretAclMapInput` via:
//
//	SecretAclMap{ "key": SecretAclArgs{...} }
type SecretAclMapInput interface {
	pulumi.Input

	ToSecretAclMapOutput() SecretAclMapOutput
	ToSecretAclMapOutputWithContext(context.Context) SecretAclMapOutput
}

type SecretAclMap map[string]SecretAclInput

func (SecretAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretAcl)(nil)).Elem()
}

func (i SecretAclMap) ToSecretAclMapOutput() SecretAclMapOutput {
	return i.ToSecretAclMapOutputWithContext(context.Background())
}

func (i SecretAclMap) ToSecretAclMapOutputWithContext(ctx context.Context) SecretAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretAclMapOutput)
}

type SecretAclOutput struct{ *pulumi.OutputState }

func (SecretAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretAcl)(nil)).Elem()
}

func (o SecretAclOutput) ToSecretAclOutput() SecretAclOutput {
	return o
}

func (o SecretAclOutput) ToSecretAclOutputWithContext(ctx context.Context) SecretAclOutput {
	return o
}

// `READ`, `WRITE` or `MANAGE`.
func (o SecretAclOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretAcl) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

// principal's identifier. It can be:
func (o SecretAclOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretAcl) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

// name of the scope
func (o SecretAclOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretAcl) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

type SecretAclArrayOutput struct{ *pulumi.OutputState }

func (SecretAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretAcl)(nil)).Elem()
}

func (o SecretAclArrayOutput) ToSecretAclArrayOutput() SecretAclArrayOutput {
	return o
}

func (o SecretAclArrayOutput) ToSecretAclArrayOutputWithContext(ctx context.Context) SecretAclArrayOutput {
	return o
}

func (o SecretAclArrayOutput) Index(i pulumi.IntInput) SecretAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretAcl {
		return vs[0].([]*SecretAcl)[vs[1].(int)]
	}).(SecretAclOutput)
}

type SecretAclMapOutput struct{ *pulumi.OutputState }

func (SecretAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretAcl)(nil)).Elem()
}

func (o SecretAclMapOutput) ToSecretAclMapOutput() SecretAclMapOutput {
	return o
}

func (o SecretAclMapOutput) ToSecretAclMapOutputWithContext(ctx context.Context) SecretAclMapOutput {
	return o
}

func (o SecretAclMapOutput) MapIndex(k pulumi.StringInput) SecretAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretAcl {
		return vs[0].(map[string]*SecretAcl)[vs[1].(string)]
	}).(SecretAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretAclInput)(nil)).Elem(), &SecretAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretAclArrayInput)(nil)).Elem(), SecretAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretAclMapInput)(nil)).Elem(), SecretAclMap{})
	pulumi.RegisterOutputType(SecretAclOutput{})
	pulumi.RegisterOutputType(SecretAclArrayOutput{})
	pulumi.RegisterOutputType(SecretAclMapOutput{})
}
