// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MlflowModel struct {
	pulumi.CustomResourceState

	Description       pulumi.StringPtrOutput    `pulumi:"description"`
	Name              pulumi.StringOutput       `pulumi:"name"`
	RegisteredModelId pulumi.StringOutput       `pulumi:"registeredModelId"`
	Tags              MlflowModelTagArrayOutput `pulumi:"tags"`
}

// NewMlflowModel registers a new resource with the given unique name, arguments, and options.
func NewMlflowModel(ctx *pulumi.Context,
	name string, args *MlflowModelArgs, opts ...pulumi.ResourceOption) (*MlflowModel, error) {
	if args == nil {
		args = &MlflowModelArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MlflowModel
	err := ctx.RegisterResource("databricks:index/mlflowModel:MlflowModel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMlflowModel gets an existing MlflowModel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMlflowModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MlflowModelState, opts ...pulumi.ResourceOption) (*MlflowModel, error) {
	var resource MlflowModel
	err := ctx.ReadResource("databricks:index/mlflowModel:MlflowModel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MlflowModel resources.
type mlflowModelState struct {
	Description       *string          `pulumi:"description"`
	Name              *string          `pulumi:"name"`
	RegisteredModelId *string          `pulumi:"registeredModelId"`
	Tags              []MlflowModelTag `pulumi:"tags"`
}

type MlflowModelState struct {
	Description       pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	RegisteredModelId pulumi.StringPtrInput
	Tags              MlflowModelTagArrayInput
}

func (MlflowModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*mlflowModelState)(nil)).Elem()
}

type mlflowModelArgs struct {
	Description *string          `pulumi:"description"`
	Name        *string          `pulumi:"name"`
	Tags        []MlflowModelTag `pulumi:"tags"`
}

// The set of arguments for constructing a MlflowModel resource.
type MlflowModelArgs struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Tags        MlflowModelTagArrayInput
}

func (MlflowModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mlflowModelArgs)(nil)).Elem()
}

type MlflowModelInput interface {
	pulumi.Input

	ToMlflowModelOutput() MlflowModelOutput
	ToMlflowModelOutputWithContext(ctx context.Context) MlflowModelOutput
}

func (*MlflowModel) ElementType() reflect.Type {
	return reflect.TypeOf((**MlflowModel)(nil)).Elem()
}

func (i *MlflowModel) ToMlflowModelOutput() MlflowModelOutput {
	return i.ToMlflowModelOutputWithContext(context.Background())
}

func (i *MlflowModel) ToMlflowModelOutputWithContext(ctx context.Context) MlflowModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlflowModelOutput)
}

// MlflowModelArrayInput is an input type that accepts MlflowModelArray and MlflowModelArrayOutput values.
// You can construct a concrete instance of `MlflowModelArrayInput` via:
//
//	MlflowModelArray{ MlflowModelArgs{...} }
type MlflowModelArrayInput interface {
	pulumi.Input

	ToMlflowModelArrayOutput() MlflowModelArrayOutput
	ToMlflowModelArrayOutputWithContext(context.Context) MlflowModelArrayOutput
}

type MlflowModelArray []MlflowModelInput

func (MlflowModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MlflowModel)(nil)).Elem()
}

func (i MlflowModelArray) ToMlflowModelArrayOutput() MlflowModelArrayOutput {
	return i.ToMlflowModelArrayOutputWithContext(context.Background())
}

func (i MlflowModelArray) ToMlflowModelArrayOutputWithContext(ctx context.Context) MlflowModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlflowModelArrayOutput)
}

// MlflowModelMapInput is an input type that accepts MlflowModelMap and MlflowModelMapOutput values.
// You can construct a concrete instance of `MlflowModelMapInput` via:
//
//	MlflowModelMap{ "key": MlflowModelArgs{...} }
type MlflowModelMapInput interface {
	pulumi.Input

	ToMlflowModelMapOutput() MlflowModelMapOutput
	ToMlflowModelMapOutputWithContext(context.Context) MlflowModelMapOutput
}

type MlflowModelMap map[string]MlflowModelInput

func (MlflowModelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MlflowModel)(nil)).Elem()
}

func (i MlflowModelMap) ToMlflowModelMapOutput() MlflowModelMapOutput {
	return i.ToMlflowModelMapOutputWithContext(context.Background())
}

func (i MlflowModelMap) ToMlflowModelMapOutputWithContext(ctx context.Context) MlflowModelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlflowModelMapOutput)
}

type MlflowModelOutput struct{ *pulumi.OutputState }

func (MlflowModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MlflowModel)(nil)).Elem()
}

func (o MlflowModelOutput) ToMlflowModelOutput() MlflowModelOutput {
	return o
}

func (o MlflowModelOutput) ToMlflowModelOutputWithContext(ctx context.Context) MlflowModelOutput {
	return o
}

func (o MlflowModelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MlflowModel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MlflowModelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MlflowModel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MlflowModelOutput) RegisteredModelId() pulumi.StringOutput {
	return o.ApplyT(func(v *MlflowModel) pulumi.StringOutput { return v.RegisteredModelId }).(pulumi.StringOutput)
}

func (o MlflowModelOutput) Tags() MlflowModelTagArrayOutput {
	return o.ApplyT(func(v *MlflowModel) MlflowModelTagArrayOutput { return v.Tags }).(MlflowModelTagArrayOutput)
}

type MlflowModelArrayOutput struct{ *pulumi.OutputState }

func (MlflowModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MlflowModel)(nil)).Elem()
}

func (o MlflowModelArrayOutput) ToMlflowModelArrayOutput() MlflowModelArrayOutput {
	return o
}

func (o MlflowModelArrayOutput) ToMlflowModelArrayOutputWithContext(ctx context.Context) MlflowModelArrayOutput {
	return o
}

func (o MlflowModelArrayOutput) Index(i pulumi.IntInput) MlflowModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MlflowModel {
		return vs[0].([]*MlflowModel)[vs[1].(int)]
	}).(MlflowModelOutput)
}

type MlflowModelMapOutput struct{ *pulumi.OutputState }

func (MlflowModelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MlflowModel)(nil)).Elem()
}

func (o MlflowModelMapOutput) ToMlflowModelMapOutput() MlflowModelMapOutput {
	return o
}

func (o MlflowModelMapOutput) ToMlflowModelMapOutputWithContext(ctx context.Context) MlflowModelMapOutput {
	return o
}

func (o MlflowModelMapOutput) MapIndex(k pulumi.StringInput) MlflowModelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MlflowModel {
		return vs[0].(map[string]*MlflowModel)[vs[1].(string)]
	}).(MlflowModelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MlflowModelInput)(nil)).Elem(), &MlflowModel{})
	pulumi.RegisterInputType(reflect.TypeOf((*MlflowModelArrayInput)(nil)).Elem(), MlflowModelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MlflowModelMapInput)(nil)).Elem(), MlflowModelMap{})
	pulumi.RegisterOutputType(MlflowModelOutput{})
	pulumi.RegisterOutputType(MlflowModelArrayOutput{})
	pulumi.RegisterOutputType(MlflowModelMapOutput{})
}
