// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > This article refers to the privileges and inheritance model in Privilege Model version 1.0. If you created your metastore during the public preview (before August 25, 2022), you can upgrade to Privilege Model version 1.0 following [Upgrade to privilege inheritance](https://docs.databricks.com/data-governance/unity-catalog/hive-metastore.html)
//
// > Most of Unity Catalog APIs are only accessible via **workspace-level APIs**. This design may change in the future. Account-level principal grants can be assigned with any valid workspace as the Unity Catalog is decoupled from specific workspaces. More information in [the official documentation](https://docs.databricks.com/data-governance/unity-catalog/index.html).
//
// In Unity Catalog all users initially have no access to data. Only Metastore Admins can create objects and can grant/revoke access on individual objects to users and groups. Every securable object in Unity Catalog has an owner. The owner can be any account-level user or group, called principals in general. The principal that creates an object becomes its owner. Owners receive `ALL_PRIVILEGES` on the securable object (e.g., `SELECT` and `MODIFY` on a table), as well as the permission to grant privileges to other principals.
//
// Securable objects are hierarchical and privileges are inherited downward. The highest level object that privileges are inherited from is the catalog. This means that granting a privilege on a catalog or schema automatically grants the privilege to all current and future objects within the catalog or schema. Privileges that are granted on a metastore are not inherited.
//
// Every `Grant` resource must have exactly one securable identifier and the following arguments:
//
// - `principal` - User name, group name or service principal application ID.
// - `privileges` - One or more privileges that are specific to a securable type.
//
// For the latest list of privilege types that apply to each securable object in Unity Catalog, please refer to the [official documentation](https://docs.databricks.com/en/data-governance/unity-catalog/manage-privileges/privileges.html#privilege-types-by-securable-object-in-unity-catalog)
//
// Pulumi will handle any configuration drift for the specified principal on every `pulumi up` run, even when grants are changed outside of Pulumi state.
//
// See Grants for the list of privilege types that apply to each securable object.
//
// ## Metastore grants
//
// See Grants Metastore grants for the list of privileges that apply to Metastores.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewGrant(ctx, "sandbox_data_engineers", &databricks.GrantArgs{
//				Metastore: pulumi.String("metastore_id"),
//				Principal: pulumi.String("Data Engineers"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("CREATE_CATALOG"),
//					pulumi.String("CREATE_EXTERNAL_LOCATION"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "sandbox_data_sharer", &databricks.GrantArgs{
//				Metastore: pulumi.String("metastore_id"),
//				Principal: pulumi.String("Data Sharer"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("CREATE_RECIPIENT"),
//					pulumi.String("CREATE_SHARE"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Catalog grants
//
// See Grants Catalog grants for the list of privileges that apply to Catalogs.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sandbox, err := databricks.NewCatalog(ctx, "sandbox", &databricks.CatalogArgs{
//				Name:    pulumi.String("sandbox"),
//				Comment: pulumi.String("this catalog is managed by terraform"),
//				Properties: pulumi.StringMap{
//					"purpose": pulumi.String("testing"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "sandbox_data_scientists", &databricks.GrantArgs{
//				Catalog:   sandbox.Name,
//				Principal: pulumi.String("Data Scientists"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("USE_CATALOG"),
//					pulumi.String("USE_SCHEMA"),
//					pulumi.String("CREATE_TABLE"),
//					pulumi.String("SELECT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "sandbox_data_engineers", &databricks.GrantArgs{
//				Catalog:   sandbox.Name,
//				Principal: pulumi.String("Data Engineers"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("USE_CATALOG"),
//					pulumi.String("USE_SCHEMA"),
//					pulumi.String("CREATE_SCHEMA"),
//					pulumi.String("CREATE_TABLE"),
//					pulumi.String("MODIFY"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "sandbox_data_analyst", &databricks.GrantArgs{
//				Catalog:   sandbox.Name,
//				Principal: pulumi.String("Data Analyst"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("USE_CATALOG"),
//					pulumi.String("USE_SCHEMA"),
//					pulumi.String("SELECT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Schema grants
//
// See Grants Schema grants for the list of privileges that apply to Schemas.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			things, err := databricks.NewSchema(ctx, "things", &databricks.SchemaArgs{
//				CatalogName: pulumi.Any(sandbox.Id),
//				Name:        pulumi.String("things"),
//				Comment:     pulumi.String("this schema is managed by terraform"),
//				Properties: pulumi.StringMap{
//					"kind": pulumi.String("various"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "things", &databricks.GrantArgs{
//				Schema:    things.ID(),
//				Principal: pulumi.String("Data Engineers"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("USE_SCHEMA"),
//					pulumi.String("MODIFY"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Table grants
//
// See Grants Table grants for the list of privileges that apply to Tables.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewGrant(ctx, "customers_data_engineers", &databricks.GrantArgs{
//				Table:     pulumi.String("main.reporting.customers"),
//				Principal: pulumi.String("Data Engineers"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("MODIFY"),
//					pulumi.String("SELECT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "customers_data_analysts", &databricks.GrantArgs{
//				Table:     pulumi.String("main.reporting.customers"),
//				Principal: pulumi.String("Data Analysts"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("SELECT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// You can also apply grants dynamically with getTables data resource:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			things, err := databricks.GetTables(ctx, &databricks.GetTablesArgs{
//				CatalogName: "sandbox",
//				SchemaName:  "things",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var thingsGrant []*databricks.Grant
//			for key0, val0 := range things.Ids {
//				__res, err := databricks.NewGrant(ctx, fmt.Sprintf("things-%v", key0), &databricks.GrantArgs{
//					Table:     pulumi.String(val0),
//					Principal: pulumi.String("sensitive"),
//					Privileges: pulumi.StringArray{
//						pulumi.String("SELECT"),
//						pulumi.String("MODIFY"),
//					},
//				})
//				if err != nil {
//					return err
//				}
//				thingsGrant = append(thingsGrant, __res)
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## View grants
//
// See Grants View grants for the list of privileges that apply to Views.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewGrant(ctx, "customer360", &databricks.GrantArgs{
//				Table:     pulumi.String("main.reporting.customer360"),
//				Principal: pulumi.String("Data Analysts"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("SELECT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// You can also apply grants dynamically with getViews data resource:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			customers, err := databricks.GetViews(ctx, &databricks.GetViewsArgs{
//				CatalogName: "main",
//				SchemaName:  "customers",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var customersGrant []*databricks.Grant
//			for key0, val0 := range customers.Ids {
//				__res, err := databricks.NewGrant(ctx, fmt.Sprintf("customers-%v", key0), &databricks.GrantArgs{
//					Table:     pulumi.String(val0),
//					Principal: pulumi.String("sensitive"),
//					Privileges: pulumi.StringArray{
//						pulumi.String("SELECT"),
//						pulumi.String("MODIFY"),
//					},
//				})
//				if err != nil {
//					return err
//				}
//				customersGrant = append(customersGrant, __res)
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Volume grants
//
// See Grants Volume grants for the list of privileges that apply to Volumes.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			this, err := databricks.NewVolume(ctx, "this", &databricks.VolumeArgs{
//				Name:            pulumi.String("quickstart_volume"),
//				CatalogName:     pulumi.Any(sandbox.Name),
//				SchemaName:      pulumi.Any(things.Name),
//				VolumeType:      pulumi.String("EXTERNAL"),
//				StorageLocation: pulumi.Any(some.Url),
//				Comment:         pulumi.String("this volume is managed by terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "volume", &databricks.GrantArgs{
//				Volume:    this.ID(),
//				Principal: pulumi.String("Data Engineers"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("WRITE_VOLUME"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Registered model grants
//
// See Grants Registered model grants for the list of privileges that apply to Registered models.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewGrant(ctx, "customers_data_engineers", &databricks.GrantArgs{
//				Model:     pulumi.String("main.reporting.customer_model"),
//				Principal: pulumi.String("Data Engineers"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("APPLY_TAG"),
//					pulumi.String("EXECUTE"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "customers_data_analysts", &databricks.GrantArgs{
//				Model:     pulumi.String("main.reporting.customer_model"),
//				Principal: pulumi.String("Data Analysts"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("EXECUTE"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Function grants
//
// See Grants Function grants for the list of privileges that apply to Registered models.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewGrant(ctx, "udf_data_engineers", &databricks.GrantArgs{
//				Function:  pulumi.String("main.reporting.udf"),
//				Principal: pulumi.String("Data Engineers"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("EXECUTE"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "udf_data_analysts", &databricks.GrantArgs{
//				Function:  pulumi.String("main.reporting.udf"),
//				Principal: pulumi.String("Data Analysts"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("EXECUTE"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Service credential grants
//
// See Grants Service credential grants for the list of privileges that apply to Service credentials.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			external, err := databricks.NewCredential(ctx, "external", &databricks.CredentialArgs{
//				Name: pulumi.Any(externalDataAccess.Name),
//				AwsIamRole: &databricks.CredentialAwsIamRoleArgs{
//					RoleArn: pulumi.Any(externalDataAccess.Arn),
//				},
//				Purpose: pulumi.String("SERVICE"),
//				Comment: pulumi.String("Managed by TF"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "external_creds", &databricks.GrantArgs{
//				Credential: external.ID(),
//				Principal:  pulumi.String("Data Engineers"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("ACCESS"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Storage credential grants
//
// See Grants Storage credential grants for the list of privileges that apply to Storage credentials.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			external, err := databricks.NewStorageCredential(ctx, "external", &databricks.StorageCredentialArgs{
//				Name: pulumi.Any(externalDataAccess.Name),
//				AwsIamRole: &databricks.StorageCredentialAwsIamRoleArgs{
//					RoleArn: pulumi.Any(externalDataAccess.Arn),
//				},
//				Comment: pulumi.String("Managed by TF"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "external_creds", &databricks.GrantArgs{
//				StorageCredential: external.ID(),
//				Principal:         pulumi.String("Data Engineers"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("CREATE_EXTERNAL_TABLE"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## External location grants
//
// See Grants External location grants for the list of privileges that apply to External locations.
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			some, err := databricks.NewExternalLocation(ctx, "some", &databricks.ExternalLocationArgs{
//				Name:           pulumi.String("external"),
//				Url:            pulumi.Sprintf("s3://%v/some", externalAwsS3Bucket.Id),
//				CredentialName: pulumi.Any(external.Id),
//				Comment:        pulumi.String("Managed by TF"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "some_data_engineers", &databricks.GrantArgs{
//				ExternalLocation: some.ID(),
//				Principal:        pulumi.String("Data Engineers"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("CREATE_EXTERNAL_TABLE"),
//					pulumi.String("READ_FILES"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "some_service_principal", &databricks.GrantArgs{
//				ExternalLocation: some.ID(),
//				Principal:        pulumi.Any(mySp.ApplicationId),
//				Privileges: pulumi.StringArray{
//					pulumi.String("USE_SCHEMA"),
//					pulumi.String("MODIFY"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "some_group", &databricks.GrantArgs{
//				ExternalLocation: some.ID(),
//				Principal:        pulumi.Any(myGroup.DisplayName),
//				Privileges: pulumi.StringArray{
//					pulumi.String("USE_SCHEMA"),
//					pulumi.String("MODIFY"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "some_user", &databricks.GrantArgs{
//				ExternalLocation: some.ID(),
//				Principal:        pulumi.Any(myUser.UserName),
//				Privileges: pulumi.StringArray{
//					pulumi.String("USE_SCHEMA"),
//					pulumi.String("MODIFY"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Connection grants
//
// See Grants Connection grants for the list of privileges that apply to Connections.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mysql, err := databricks.NewConnection(ctx, "mysql", &databricks.ConnectionArgs{
//				Name:           pulumi.String("mysql_connection"),
//				ConnectionType: pulumi.String("MYSQL"),
//				Comment:        pulumi.String("this is a connection to mysql db"),
//				Options: pulumi.StringMap{
//					"host":     pulumi.String("test.mysql.database.azure.com"),
//					"port":     pulumi.String("3306"),
//					"user":     pulumi.String("user"),
//					"password": pulumi.String("password"),
//				},
//				Properties: pulumi.StringMap{
//					"purpose": pulumi.String("testing"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "some", &databricks.GrantArgs{
//				ForeignConnection: mysql.Name,
//				Principal:         pulumi.String("Data Engineers"),
//				Privileges: pulumi.StringArray{
//					pulumi.String("CREATE_FOREIGN_CATALOG"),
//					pulumi.String("USE_CONNECTION"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Delta Sharing share grants
//
// See Grants Delta Sharing share grants for the list of privileges that apply to Delta Sharing shares.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			some, err := databricks.NewShare(ctx, "some", &databricks.ShareArgs{
//				Name: pulumi.String("my_share"),
//			})
//			if err != nil {
//				return err
//			}
//			someRecipient, err := databricks.NewRecipient(ctx, "some", &databricks.RecipientArgs{
//				Name: pulumi.String("my_recipient"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrant(ctx, "some", &databricks.GrantArgs{
//				Share:     some.Name,
//				Principal: someRecipient.Name,
//				Privileges: pulumi.StringArray{
//					pulumi.String("SELECT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Other access control
//
// You can control Databricks General Permissions through Permissions resource.
//
// ## Import
//
// The resource can be imported using combination of securable type (`table`, `catalog`, `foreign_connection`, ...), it's name and `principal`:
//
// hcl
//
// import {
//
//	to = databricks_grant.this
//
//	id = "<securable_type>/<securable_name>/<principal>"
//
// }
//
// Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
//
// bash
//
// ```sh
// $ pulumi import databricks:index/grant:Grant this <securable_type>/<securable_name>/<principal>
// ```
type Grant struct {
	pulumi.CustomResourceState

	Catalog           pulumi.StringPtrOutput   `pulumi:"catalog"`
	Credential        pulumi.StringPtrOutput   `pulumi:"credential"`
	ExternalLocation  pulumi.StringPtrOutput   `pulumi:"externalLocation"`
	ForeignConnection pulumi.StringPtrOutput   `pulumi:"foreignConnection"`
	Function          pulumi.StringPtrOutput   `pulumi:"function"`
	Metastore         pulumi.StringPtrOutput   `pulumi:"metastore"`
	Model             pulumi.StringPtrOutput   `pulumi:"model"`
	Pipeline          pulumi.StringPtrOutput   `pulumi:"pipeline"`
	Principal         pulumi.StringOutput      `pulumi:"principal"`
	Privileges        pulumi.StringArrayOutput `pulumi:"privileges"`
	Recipient         pulumi.StringPtrOutput   `pulumi:"recipient"`
	Schema            pulumi.StringPtrOutput   `pulumi:"schema"`
	Share             pulumi.StringPtrOutput   `pulumi:"share"`
	StorageCredential pulumi.StringPtrOutput   `pulumi:"storageCredential"`
	Table             pulumi.StringPtrOutput   `pulumi:"table"`
	Volume            pulumi.StringPtrOutput   `pulumi:"volume"`
}

// NewGrant registers a new resource with the given unique name, arguments, and options.
func NewGrant(ctx *pulumi.Context,
	name string, args *GrantArgs, opts ...pulumi.ResourceOption) (*Grant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.Privileges == nil {
		return nil, errors.New("invalid value for required argument 'Privileges'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Grant
	err := ctx.RegisterResource("databricks:index/grant:Grant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrant gets an existing Grant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrantState, opts ...pulumi.ResourceOption) (*Grant, error) {
	var resource Grant
	err := ctx.ReadResource("databricks:index/grant:Grant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Grant resources.
type grantState struct {
	Catalog           *string  `pulumi:"catalog"`
	Credential        *string  `pulumi:"credential"`
	ExternalLocation  *string  `pulumi:"externalLocation"`
	ForeignConnection *string  `pulumi:"foreignConnection"`
	Function          *string  `pulumi:"function"`
	Metastore         *string  `pulumi:"metastore"`
	Model             *string  `pulumi:"model"`
	Pipeline          *string  `pulumi:"pipeline"`
	Principal         *string  `pulumi:"principal"`
	Privileges        []string `pulumi:"privileges"`
	Recipient         *string  `pulumi:"recipient"`
	Schema            *string  `pulumi:"schema"`
	Share             *string  `pulumi:"share"`
	StorageCredential *string  `pulumi:"storageCredential"`
	Table             *string  `pulumi:"table"`
	Volume            *string  `pulumi:"volume"`
}

type GrantState struct {
	Catalog           pulumi.StringPtrInput
	Credential        pulumi.StringPtrInput
	ExternalLocation  pulumi.StringPtrInput
	ForeignConnection pulumi.StringPtrInput
	Function          pulumi.StringPtrInput
	Metastore         pulumi.StringPtrInput
	Model             pulumi.StringPtrInput
	Pipeline          pulumi.StringPtrInput
	Principal         pulumi.StringPtrInput
	Privileges        pulumi.StringArrayInput
	Recipient         pulumi.StringPtrInput
	Schema            pulumi.StringPtrInput
	Share             pulumi.StringPtrInput
	StorageCredential pulumi.StringPtrInput
	Table             pulumi.StringPtrInput
	Volume            pulumi.StringPtrInput
}

func (GrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*grantState)(nil)).Elem()
}

type grantArgs struct {
	Catalog           *string  `pulumi:"catalog"`
	Credential        *string  `pulumi:"credential"`
	ExternalLocation  *string  `pulumi:"externalLocation"`
	ForeignConnection *string  `pulumi:"foreignConnection"`
	Function          *string  `pulumi:"function"`
	Metastore         *string  `pulumi:"metastore"`
	Model             *string  `pulumi:"model"`
	Pipeline          *string  `pulumi:"pipeline"`
	Principal         string   `pulumi:"principal"`
	Privileges        []string `pulumi:"privileges"`
	Recipient         *string  `pulumi:"recipient"`
	Schema            *string  `pulumi:"schema"`
	Share             *string  `pulumi:"share"`
	StorageCredential *string  `pulumi:"storageCredential"`
	Table             *string  `pulumi:"table"`
	Volume            *string  `pulumi:"volume"`
}

// The set of arguments for constructing a Grant resource.
type GrantArgs struct {
	Catalog           pulumi.StringPtrInput
	Credential        pulumi.StringPtrInput
	ExternalLocation  pulumi.StringPtrInput
	ForeignConnection pulumi.StringPtrInput
	Function          pulumi.StringPtrInput
	Metastore         pulumi.StringPtrInput
	Model             pulumi.StringPtrInput
	Pipeline          pulumi.StringPtrInput
	Principal         pulumi.StringInput
	Privileges        pulumi.StringArrayInput
	Recipient         pulumi.StringPtrInput
	Schema            pulumi.StringPtrInput
	Share             pulumi.StringPtrInput
	StorageCredential pulumi.StringPtrInput
	Table             pulumi.StringPtrInput
	Volume            pulumi.StringPtrInput
}

func (GrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grantArgs)(nil)).Elem()
}

type GrantInput interface {
	pulumi.Input

	ToGrantOutput() GrantOutput
	ToGrantOutputWithContext(ctx context.Context) GrantOutput
}

func (*Grant) ElementType() reflect.Type {
	return reflect.TypeOf((**Grant)(nil)).Elem()
}

func (i *Grant) ToGrantOutput() GrantOutput {
	return i.ToGrantOutputWithContext(context.Background())
}

func (i *Grant) ToGrantOutputWithContext(ctx context.Context) GrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantOutput)
}

// GrantArrayInput is an input type that accepts GrantArray and GrantArrayOutput values.
// You can construct a concrete instance of `GrantArrayInput` via:
//
//	GrantArray{ GrantArgs{...} }
type GrantArrayInput interface {
	pulumi.Input

	ToGrantArrayOutput() GrantArrayOutput
	ToGrantArrayOutputWithContext(context.Context) GrantArrayOutput
}

type GrantArray []GrantInput

func (GrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Grant)(nil)).Elem()
}

func (i GrantArray) ToGrantArrayOutput() GrantArrayOutput {
	return i.ToGrantArrayOutputWithContext(context.Background())
}

func (i GrantArray) ToGrantArrayOutputWithContext(ctx context.Context) GrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantArrayOutput)
}

// GrantMapInput is an input type that accepts GrantMap and GrantMapOutput values.
// You can construct a concrete instance of `GrantMapInput` via:
//
//	GrantMap{ "key": GrantArgs{...} }
type GrantMapInput interface {
	pulumi.Input

	ToGrantMapOutput() GrantMapOutput
	ToGrantMapOutputWithContext(context.Context) GrantMapOutput
}

type GrantMap map[string]GrantInput

func (GrantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Grant)(nil)).Elem()
}

func (i GrantMap) ToGrantMapOutput() GrantMapOutput {
	return i.ToGrantMapOutputWithContext(context.Background())
}

func (i GrantMap) ToGrantMapOutputWithContext(ctx context.Context) GrantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantMapOutput)
}

type GrantOutput struct{ *pulumi.OutputState }

func (GrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Grant)(nil)).Elem()
}

func (o GrantOutput) ToGrantOutput() GrantOutput {
	return o
}

func (o GrantOutput) ToGrantOutputWithContext(ctx context.Context) GrantOutput {
	return o
}

func (o GrantOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.Catalog }).(pulumi.StringPtrOutput)
}

func (o GrantOutput) Credential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.Credential }).(pulumi.StringPtrOutput)
}

func (o GrantOutput) ExternalLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.ExternalLocation }).(pulumi.StringPtrOutput)
}

func (o GrantOutput) ForeignConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.ForeignConnection }).(pulumi.StringPtrOutput)
}

func (o GrantOutput) Function() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.Function }).(pulumi.StringPtrOutput)
}

func (o GrantOutput) Metastore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.Metastore }).(pulumi.StringPtrOutput)
}

func (o GrantOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.Model }).(pulumi.StringPtrOutput)
}

func (o GrantOutput) Pipeline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.Pipeline }).(pulumi.StringPtrOutput)
}

func (o GrantOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

func (o GrantOutput) Privileges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringArrayOutput { return v.Privileges }).(pulumi.StringArrayOutput)
}

func (o GrantOutput) Recipient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.Recipient }).(pulumi.StringPtrOutput)
}

func (o GrantOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.Schema }).(pulumi.StringPtrOutput)
}

func (o GrantOutput) Share() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.Share }).(pulumi.StringPtrOutput)
}

func (o GrantOutput) StorageCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.StorageCredential }).(pulumi.StringPtrOutput)
}

func (o GrantOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.Table }).(pulumi.StringPtrOutput)
}

func (o GrantOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grant) pulumi.StringPtrOutput { return v.Volume }).(pulumi.StringPtrOutput)
}

type GrantArrayOutput struct{ *pulumi.OutputState }

func (GrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Grant)(nil)).Elem()
}

func (o GrantArrayOutput) ToGrantArrayOutput() GrantArrayOutput {
	return o
}

func (o GrantArrayOutput) ToGrantArrayOutputWithContext(ctx context.Context) GrantArrayOutput {
	return o
}

func (o GrantArrayOutput) Index(i pulumi.IntInput) GrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Grant {
		return vs[0].([]*Grant)[vs[1].(int)]
	}).(GrantOutput)
}

type GrantMapOutput struct{ *pulumi.OutputState }

func (GrantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Grant)(nil)).Elem()
}

func (o GrantMapOutput) ToGrantMapOutput() GrantMapOutput {
	return o
}

func (o GrantMapOutput) ToGrantMapOutputWithContext(ctx context.Context) GrantMapOutput {
	return o
}

func (o GrantMapOutput) MapIndex(k pulumi.StringInput) GrantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Grant {
		return vs[0].(map[string]*Grant)[vs[1].(string)]
	}).(GrantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrantInput)(nil)).Elem(), &Grant{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantArrayInput)(nil)).Elem(), GrantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantMapInput)(nil)).Elem(), GrantMap{})
	pulumi.RegisterOutputType(GrantOutput{})
	pulumi.RegisterOutputType(GrantArrayOutput{})
	pulumi.RegisterOutputType(GrantMapOutput{})
}
