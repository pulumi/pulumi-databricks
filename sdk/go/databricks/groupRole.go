// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GroupRole struct {
	pulumi.CustomResourceState

	GroupId pulumi.StringOutput `pulumi:"groupId"`
	Role    pulumi.StringOutput `pulumi:"role"`
}

// NewGroupRole registers a new resource with the given unique name, arguments, and options.
func NewGroupRole(ctx *pulumi.Context,
	name string, args *GroupRoleArgs, opts ...pulumi.ResourceOption) (*GroupRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupRole
	err := ctx.RegisterResource("databricks:index/groupRole:GroupRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupRole gets an existing GroupRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupRoleState, opts ...pulumi.ResourceOption) (*GroupRole, error) {
	var resource GroupRole
	err := ctx.ReadResource("databricks:index/groupRole:GroupRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupRole resources.
type groupRoleState struct {
	GroupId *string `pulumi:"groupId"`
	Role    *string `pulumi:"role"`
}

type GroupRoleState struct {
	GroupId pulumi.StringPtrInput
	Role    pulumi.StringPtrInput
}

func (GroupRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupRoleState)(nil)).Elem()
}

type groupRoleArgs struct {
	GroupId string `pulumi:"groupId"`
	Role    string `pulumi:"role"`
}

// The set of arguments for constructing a GroupRole resource.
type GroupRoleArgs struct {
	GroupId pulumi.StringInput
	Role    pulumi.StringInput
}

func (GroupRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupRoleArgs)(nil)).Elem()
}

type GroupRoleInput interface {
	pulumi.Input

	ToGroupRoleOutput() GroupRoleOutput
	ToGroupRoleOutputWithContext(ctx context.Context) GroupRoleOutput
}

func (*GroupRole) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupRole)(nil)).Elem()
}

func (i *GroupRole) ToGroupRoleOutput() GroupRoleOutput {
	return i.ToGroupRoleOutputWithContext(context.Background())
}

func (i *GroupRole) ToGroupRoleOutputWithContext(ctx context.Context) GroupRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRoleOutput)
}

// GroupRoleArrayInput is an input type that accepts GroupRoleArray and GroupRoleArrayOutput values.
// You can construct a concrete instance of `GroupRoleArrayInput` via:
//
//	GroupRoleArray{ GroupRoleArgs{...} }
type GroupRoleArrayInput interface {
	pulumi.Input

	ToGroupRoleArrayOutput() GroupRoleArrayOutput
	ToGroupRoleArrayOutputWithContext(context.Context) GroupRoleArrayOutput
}

type GroupRoleArray []GroupRoleInput

func (GroupRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupRole)(nil)).Elem()
}

func (i GroupRoleArray) ToGroupRoleArrayOutput() GroupRoleArrayOutput {
	return i.ToGroupRoleArrayOutputWithContext(context.Background())
}

func (i GroupRoleArray) ToGroupRoleArrayOutputWithContext(ctx context.Context) GroupRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRoleArrayOutput)
}

// GroupRoleMapInput is an input type that accepts GroupRoleMap and GroupRoleMapOutput values.
// You can construct a concrete instance of `GroupRoleMapInput` via:
//
//	GroupRoleMap{ "key": GroupRoleArgs{...} }
type GroupRoleMapInput interface {
	pulumi.Input

	ToGroupRoleMapOutput() GroupRoleMapOutput
	ToGroupRoleMapOutputWithContext(context.Context) GroupRoleMapOutput
}

type GroupRoleMap map[string]GroupRoleInput

func (GroupRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupRole)(nil)).Elem()
}

func (i GroupRoleMap) ToGroupRoleMapOutput() GroupRoleMapOutput {
	return i.ToGroupRoleMapOutputWithContext(context.Background())
}

func (i GroupRoleMap) ToGroupRoleMapOutputWithContext(ctx context.Context) GroupRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRoleMapOutput)
}

type GroupRoleOutput struct{ *pulumi.OutputState }

func (GroupRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupRole)(nil)).Elem()
}

func (o GroupRoleOutput) ToGroupRoleOutput() GroupRoleOutput {
	return o
}

func (o GroupRoleOutput) ToGroupRoleOutputWithContext(ctx context.Context) GroupRoleOutput {
	return o
}

func (o GroupRoleOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupRole) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o GroupRoleOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupRole) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type GroupRoleArrayOutput struct{ *pulumi.OutputState }

func (GroupRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupRole)(nil)).Elem()
}

func (o GroupRoleArrayOutput) ToGroupRoleArrayOutput() GroupRoleArrayOutput {
	return o
}

func (o GroupRoleArrayOutput) ToGroupRoleArrayOutputWithContext(ctx context.Context) GroupRoleArrayOutput {
	return o
}

func (o GroupRoleArrayOutput) Index(i pulumi.IntInput) GroupRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupRole {
		return vs[0].([]*GroupRole)[vs[1].(int)]
	}).(GroupRoleOutput)
}

type GroupRoleMapOutput struct{ *pulumi.OutputState }

func (GroupRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupRole)(nil)).Elem()
}

func (o GroupRoleMapOutput) ToGroupRoleMapOutput() GroupRoleMapOutput {
	return o
}

func (o GroupRoleMapOutput) ToGroupRoleMapOutputWithContext(ctx context.Context) GroupRoleMapOutput {
	return o
}

func (o GroupRoleMapOutput) MapIndex(k pulumi.StringInput) GroupRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupRole {
		return vs[0].(map[string]*GroupRole)[vs[1].(string)]
	}).(GroupRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRoleInput)(nil)).Elem(), &GroupRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRoleArrayInput)(nil)).Elem(), GroupRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRoleMapInput)(nil)).Elem(), GroupRoleMap{})
	pulumi.RegisterOutputType(GroupRoleOutput{})
	pulumi.RegisterOutputType(GroupRoleArrayOutput{})
	pulumi.RegisterOutputType(GroupRoleMapOutput{})
}
