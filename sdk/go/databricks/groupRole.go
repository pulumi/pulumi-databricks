// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to attach a role to databricks_group. This role could be a pre-defined role such as account admin, or an instance profile ARN.
//
// ## Example Usage
//
// # Attach an instance profile to a group
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			instanceProfile, err := databricks.NewInstanceProfile(ctx, "instance_profile", &databricks.InstanceProfileArgs{
//				InstanceProfileArn: pulumi.String("my_instance_profile_arn"),
//			})
//			if err != nil {
//				return err
//			}
//			myGroup, err := databricks.NewGroup(ctx, "my_group", &databricks.GroupArgs{
//				DisplayName: pulumi.String("my_group_name"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGroupRole(ctx, "my_group_instance_profile", &databricks.GroupRoleArgs{
//				GroupId: myGroup.ID(),
//				Role:    instanceProfile.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// # Attach account admin role to an account-level group
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myGroup, err := databricks.NewGroup(ctx, "my_group", &databricks.GroupArgs{
//				DisplayName: pulumi.String("my_group_name"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGroupRole(ctx, "my_group_account_admin", &databricks.GroupRoleArgs{
//				GroupId: myGroup.ID(),
//				Role:    pulumi.String("account_admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Related Resources
//
// The following resources are often used in the same context:
//
// * End to end workspace management guide.
// * getAwsBucketPolicy data to configure a simple access policy for AWS S3 buckets, so that Databricks can access data in it.
// * ClusterPolicy to create a Cluster policy, which limits the ability to create clusters based on a set of rules.
// * Group to manage [groups in Databricks Workspace](https://docs.databricks.com/administration-guide/users-groups/groups.html) or [Account Console](https://accounts.cloud.databricks.com/) (for AWS deployments).
// * Group data to retrieve information about Group members, entitlements and instance profiles.
// * GroupMember to attach users and groups as group members.
// * InstancePool to manage [instance pools](https://docs.databricks.com/clusters/instance-pools/index.html) to reduce cluster start and auto-scaling times by maintaining a set of idle, ready-to-use instances.
// * InstanceProfile to manage AWS EC2 instance profiles that users can launch Cluster and access data, like databricks_mount.
// * UserInstanceProfile to attach InstanceProfile (AWS) to databricks_user.
//
// ## Import
//
// -> **Note** Importing this resource is not currently supported.
type GroupRole struct {
	pulumi.CustomResourceState

	// This is the id of the group resource.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Either a role name or the ARN/ID of the instance profile resource.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewGroupRole registers a new resource with the given unique name, arguments, and options.
func NewGroupRole(ctx *pulumi.Context,
	name string, args *GroupRoleArgs, opts ...pulumi.ResourceOption) (*GroupRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupRole
	err := ctx.RegisterResource("databricks:index/groupRole:GroupRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupRole gets an existing GroupRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupRoleState, opts ...pulumi.ResourceOption) (*GroupRole, error) {
	var resource GroupRole
	err := ctx.ReadResource("databricks:index/groupRole:GroupRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupRole resources.
type groupRoleState struct {
	// This is the id of the group resource.
	GroupId *string `pulumi:"groupId"`
	// Either a role name or the ARN/ID of the instance profile resource.
	Role *string `pulumi:"role"`
}

type GroupRoleState struct {
	// This is the id of the group resource.
	GroupId pulumi.StringPtrInput
	// Either a role name or the ARN/ID of the instance profile resource.
	Role pulumi.StringPtrInput
}

func (GroupRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupRoleState)(nil)).Elem()
}

type groupRoleArgs struct {
	// This is the id of the group resource.
	GroupId string `pulumi:"groupId"`
	// Either a role name or the ARN/ID of the instance profile resource.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a GroupRole resource.
type GroupRoleArgs struct {
	// This is the id of the group resource.
	GroupId pulumi.StringInput
	// Either a role name or the ARN/ID of the instance profile resource.
	Role pulumi.StringInput
}

func (GroupRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupRoleArgs)(nil)).Elem()
}

type GroupRoleInput interface {
	pulumi.Input

	ToGroupRoleOutput() GroupRoleOutput
	ToGroupRoleOutputWithContext(ctx context.Context) GroupRoleOutput
}

func (*GroupRole) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupRole)(nil)).Elem()
}

func (i *GroupRole) ToGroupRoleOutput() GroupRoleOutput {
	return i.ToGroupRoleOutputWithContext(context.Background())
}

func (i *GroupRole) ToGroupRoleOutputWithContext(ctx context.Context) GroupRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRoleOutput)
}

// GroupRoleArrayInput is an input type that accepts GroupRoleArray and GroupRoleArrayOutput values.
// You can construct a concrete instance of `GroupRoleArrayInput` via:
//
//	GroupRoleArray{ GroupRoleArgs{...} }
type GroupRoleArrayInput interface {
	pulumi.Input

	ToGroupRoleArrayOutput() GroupRoleArrayOutput
	ToGroupRoleArrayOutputWithContext(context.Context) GroupRoleArrayOutput
}

type GroupRoleArray []GroupRoleInput

func (GroupRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupRole)(nil)).Elem()
}

func (i GroupRoleArray) ToGroupRoleArrayOutput() GroupRoleArrayOutput {
	return i.ToGroupRoleArrayOutputWithContext(context.Background())
}

func (i GroupRoleArray) ToGroupRoleArrayOutputWithContext(ctx context.Context) GroupRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRoleArrayOutput)
}

// GroupRoleMapInput is an input type that accepts GroupRoleMap and GroupRoleMapOutput values.
// You can construct a concrete instance of `GroupRoleMapInput` via:
//
//	GroupRoleMap{ "key": GroupRoleArgs{...} }
type GroupRoleMapInput interface {
	pulumi.Input

	ToGroupRoleMapOutput() GroupRoleMapOutput
	ToGroupRoleMapOutputWithContext(context.Context) GroupRoleMapOutput
}

type GroupRoleMap map[string]GroupRoleInput

func (GroupRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupRole)(nil)).Elem()
}

func (i GroupRoleMap) ToGroupRoleMapOutput() GroupRoleMapOutput {
	return i.ToGroupRoleMapOutputWithContext(context.Background())
}

func (i GroupRoleMap) ToGroupRoleMapOutputWithContext(ctx context.Context) GroupRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRoleMapOutput)
}

type GroupRoleOutput struct{ *pulumi.OutputState }

func (GroupRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupRole)(nil)).Elem()
}

func (o GroupRoleOutput) ToGroupRoleOutput() GroupRoleOutput {
	return o
}

func (o GroupRoleOutput) ToGroupRoleOutputWithContext(ctx context.Context) GroupRoleOutput {
	return o
}

// This is the id of the group resource.
func (o GroupRoleOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupRole) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// Either a role name or the ARN/ID of the instance profile resource.
func (o GroupRoleOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupRole) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type GroupRoleArrayOutput struct{ *pulumi.OutputState }

func (GroupRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupRole)(nil)).Elem()
}

func (o GroupRoleArrayOutput) ToGroupRoleArrayOutput() GroupRoleArrayOutput {
	return o
}

func (o GroupRoleArrayOutput) ToGroupRoleArrayOutputWithContext(ctx context.Context) GroupRoleArrayOutput {
	return o
}

func (o GroupRoleArrayOutput) Index(i pulumi.IntInput) GroupRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupRole {
		return vs[0].([]*GroupRole)[vs[1].(int)]
	}).(GroupRoleOutput)
}

type GroupRoleMapOutput struct{ *pulumi.OutputState }

func (GroupRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupRole)(nil)).Elem()
}

func (o GroupRoleMapOutput) ToGroupRoleMapOutput() GroupRoleMapOutput {
	return o
}

func (o GroupRoleMapOutput) ToGroupRoleMapOutputWithContext(ctx context.Context) GroupRoleMapOutput {
	return o
}

func (o GroupRoleMapOutput) MapIndex(k pulumi.StringInput) GroupRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupRole {
		return vs[0].(map[string]*GroupRole)[vs[1].(string)]
	}).(GroupRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRoleInput)(nil)).Elem(), &GroupRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRoleArrayInput)(nil)).Elem(), GroupRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRoleMapInput)(nil)).Elem(), GroupRoleMap{})
	pulumi.RegisterOutputType(GroupRoleOutput{})
	pulumi.RegisterOutputType(GroupRoleArrayOutput{})
	pulumi.RegisterOutputType(GroupRoleMapOutput{})
}
