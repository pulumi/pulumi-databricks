// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type App struct {
	pulumi.CustomResourceState

	ActiveDeployment         AppActiveDeploymentOutput  `pulumi:"activeDeployment"`
	AppStatus                AppAppStatusOutput         `pulumi:"appStatus"`
	ComputeStatus            AppComputeStatusOutput     `pulumi:"computeStatus"`
	CreateTime               pulumi.StringOutput        `pulumi:"createTime"`
	Creator                  pulumi.StringOutput        `pulumi:"creator"`
	DefaultSourceCodePath    pulumi.StringOutput        `pulumi:"defaultSourceCodePath"`
	Description              pulumi.StringPtrOutput     `pulumi:"description"`
	Name                     pulumi.StringOutput        `pulumi:"name"`
	PendingDeployment        AppPendingDeploymentOutput `pulumi:"pendingDeployment"`
	Resources                AppResourceArrayOutput     `pulumi:"resources"`
	ServicePrincipalClientId pulumi.StringOutput        `pulumi:"servicePrincipalClientId"`
	ServicePrincipalId       pulumi.IntOutput           `pulumi:"servicePrincipalId"`
	ServicePrincipalName     pulumi.StringOutput        `pulumi:"servicePrincipalName"`
	UpdateTime               pulumi.StringOutput        `pulumi:"updateTime"`
	Updater                  pulumi.StringOutput        `pulumi:"updater"`
	Url                      pulumi.StringOutput        `pulumi:"url"`
}

// NewApp registers a new resource with the given unique name, arguments, and options.
func NewApp(ctx *pulumi.Context,
	name string, args *AppArgs, opts ...pulumi.ResourceOption) (*App, error) {
	if args == nil {
		args = &AppArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource App
	err := ctx.RegisterResource("databricks:index/app:App", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApp gets an existing App resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppState, opts ...pulumi.ResourceOption) (*App, error) {
	var resource App
	err := ctx.ReadResource("databricks:index/app:App", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering App resources.
type appState struct {
	ActiveDeployment         *AppActiveDeployment  `pulumi:"activeDeployment"`
	AppStatus                *AppAppStatus         `pulumi:"appStatus"`
	ComputeStatus            *AppComputeStatus     `pulumi:"computeStatus"`
	CreateTime               *string               `pulumi:"createTime"`
	Creator                  *string               `pulumi:"creator"`
	DefaultSourceCodePath    *string               `pulumi:"defaultSourceCodePath"`
	Description              *string               `pulumi:"description"`
	Name                     *string               `pulumi:"name"`
	PendingDeployment        *AppPendingDeployment `pulumi:"pendingDeployment"`
	Resources                []AppResource         `pulumi:"resources"`
	ServicePrincipalClientId *string               `pulumi:"servicePrincipalClientId"`
	ServicePrincipalId       *int                  `pulumi:"servicePrincipalId"`
	ServicePrincipalName     *string               `pulumi:"servicePrincipalName"`
	UpdateTime               *string               `pulumi:"updateTime"`
	Updater                  *string               `pulumi:"updater"`
	Url                      *string               `pulumi:"url"`
}

type AppState struct {
	ActiveDeployment         AppActiveDeploymentPtrInput
	AppStatus                AppAppStatusPtrInput
	ComputeStatus            AppComputeStatusPtrInput
	CreateTime               pulumi.StringPtrInput
	Creator                  pulumi.StringPtrInput
	DefaultSourceCodePath    pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	PendingDeployment        AppPendingDeploymentPtrInput
	Resources                AppResourceArrayInput
	ServicePrincipalClientId pulumi.StringPtrInput
	ServicePrincipalId       pulumi.IntPtrInput
	ServicePrincipalName     pulumi.StringPtrInput
	UpdateTime               pulumi.StringPtrInput
	Updater                  pulumi.StringPtrInput
	Url                      pulumi.StringPtrInput
}

func (AppState) ElementType() reflect.Type {
	return reflect.TypeOf((*appState)(nil)).Elem()
}

type appArgs struct {
	Description *string       `pulumi:"description"`
	Name        *string       `pulumi:"name"`
	Resources   []AppResource `pulumi:"resources"`
}

// The set of arguments for constructing a App resource.
type AppArgs struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Resources   AppResourceArrayInput
}

func (AppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appArgs)(nil)).Elem()
}

type AppInput interface {
	pulumi.Input

	ToAppOutput() AppOutput
	ToAppOutputWithContext(ctx context.Context) AppOutput
}

func (*App) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (i *App) ToAppOutput() AppOutput {
	return i.ToAppOutputWithContext(context.Background())
}

func (i *App) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOutput)
}

// AppArrayInput is an input type that accepts AppArray and AppArrayOutput values.
// You can construct a concrete instance of `AppArrayInput` via:
//
//	AppArray{ AppArgs{...} }
type AppArrayInput interface {
	pulumi.Input

	ToAppArrayOutput() AppArrayOutput
	ToAppArrayOutputWithContext(context.Context) AppArrayOutput
}

type AppArray []AppInput

func (AppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (i AppArray) ToAppArrayOutput() AppArrayOutput {
	return i.ToAppArrayOutputWithContext(context.Background())
}

func (i AppArray) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppArrayOutput)
}

// AppMapInput is an input type that accepts AppMap and AppMapOutput values.
// You can construct a concrete instance of `AppMapInput` via:
//
//	AppMap{ "key": AppArgs{...} }
type AppMapInput interface {
	pulumi.Input

	ToAppMapOutput() AppMapOutput
	ToAppMapOutputWithContext(context.Context) AppMapOutput
}

type AppMap map[string]AppInput

func (AppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (i AppMap) ToAppMapOutput() AppMapOutput {
	return i.ToAppMapOutputWithContext(context.Background())
}

func (i AppMap) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMapOutput)
}

type AppOutput struct{ *pulumi.OutputState }

func (AppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (o AppOutput) ToAppOutput() AppOutput {
	return o
}

func (o AppOutput) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return o
}

func (o AppOutput) ActiveDeployment() AppActiveDeploymentOutput {
	return o.ApplyT(func(v *App) AppActiveDeploymentOutput { return v.ActiveDeployment }).(AppActiveDeploymentOutput)
}

func (o AppOutput) AppStatus() AppAppStatusOutput {
	return o.ApplyT(func(v *App) AppAppStatusOutput { return v.AppStatus }).(AppAppStatusOutput)
}

func (o AppOutput) ComputeStatus() AppComputeStatusOutput {
	return o.ApplyT(func(v *App) AppComputeStatusOutput { return v.ComputeStatus }).(AppComputeStatusOutput)
}

func (o AppOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o AppOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

func (o AppOutput) DefaultSourceCodePath() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.DefaultSourceCodePath }).(pulumi.StringOutput)
}

func (o AppOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *App) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AppOutput) PendingDeployment() AppPendingDeploymentOutput {
	return o.ApplyT(func(v *App) AppPendingDeploymentOutput { return v.PendingDeployment }).(AppPendingDeploymentOutput)
}

func (o AppOutput) Resources() AppResourceArrayOutput {
	return o.ApplyT(func(v *App) AppResourceArrayOutput { return v.Resources }).(AppResourceArrayOutput)
}

func (o AppOutput) ServicePrincipalClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.ServicePrincipalClientId }).(pulumi.StringOutput)
}

func (o AppOutput) ServicePrincipalId() pulumi.IntOutput {
	return o.ApplyT(func(v *App) pulumi.IntOutput { return v.ServicePrincipalId }).(pulumi.IntOutput)
}

func (o AppOutput) ServicePrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.ServicePrincipalName }).(pulumi.StringOutput)
}

func (o AppOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o AppOutput) Updater() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Updater }).(pulumi.StringOutput)
}

func (o AppOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type AppArrayOutput struct{ *pulumi.OutputState }

func (AppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (o AppArrayOutput) ToAppArrayOutput() AppArrayOutput {
	return o
}

func (o AppArrayOutput) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return o
}

func (o AppArrayOutput) Index(i pulumi.IntInput) AppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *App {
		return vs[0].([]*App)[vs[1].(int)]
	}).(AppOutput)
}

type AppMapOutput struct{ *pulumi.OutputState }

func (AppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (o AppMapOutput) ToAppMapOutput() AppMapOutput {
	return o
}

func (o AppMapOutput) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return o
}

func (o AppMapOutput) MapIndex(k pulumi.StringInput) AppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *App {
		return vs[0].(map[string]*App)[vs[1].(string)]
	}).(AppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppInput)(nil)).Elem(), &App{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppArrayInput)(nil)).Elem(), AppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMapInput)(nil)).Elem(), AppMap{})
	pulumi.RegisterOutputType(AppOutput{})
	pulumi.RegisterOutputType(AppArrayOutput{})
	pulumi.RegisterOutputType(AppMapOutput{})
}
