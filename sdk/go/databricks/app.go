// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > This feature is in [Public Preview](https://docs.databricks.com/release-notes/release-types.html).
//
// [Databricks Apps](https://docs.databricks.com/en/dev-tools/databricks-apps/index.html) run directly on a customerâ€™s Databricks instance, integrate with their data, use and extend Databricks services, and enable users to interact through single sign-on. This resource creates the application but does not handle app deployment, which should be handled separately as part of your CI/CD pipeline.
//
// ## Import
//
// This resource can be imported by name:
//
// hcl
//
// import {
//
//	to = databricks_app.this
//
//	id = "<app_name>"
//
// }
//
// or using the `terraform` CLI:
//
// bash
//
// ```sh
// $ pulumi import databricks:index/app:App this <app_name>
// ```
type App struct {
	pulumi.CustomResourceState

	ActiveDeployment AppActiveDeploymentOutput `pulumi:"activeDeployment"`
	// attribute
	AppStatus      AppAppStatusOutput     `pulumi:"appStatus"`
	BudgetPolicyId pulumi.StringPtrOutput `pulumi:"budgetPolicyId"`
	// attribute
	ComputeStatus AppComputeStatusOutput `pulumi:"computeStatus"`
	// The creation time of the app.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The email of the user that created the app.
	Creator pulumi.StringOutput `pulumi:"creator"`
	// The default workspace file system path of the source code from which app deployment are created. This field tracks the workspace source code path of the last active deployment.
	DefaultSourceCodePath pulumi.StringOutput `pulumi:"defaultSourceCodePath"`
	// The description of the app.
	Description             pulumi.StringPtrOutput `pulumi:"description"`
	EffectiveBudgetPolicyId pulumi.StringOutput    `pulumi:"effectiveBudgetPolicyId"`
	// The name of the app. The name must contain only lowercase alphanumeric characters and hyphens. It must be unique within the workspace.
	Name              pulumi.StringOutput        `pulumi:"name"`
	NoCompute         pulumi.BoolPtrOutput       `pulumi:"noCompute"`
	PendingDeployment AppPendingDeploymentOutput `pulumi:"pendingDeployment"`
	// A list of resources that the app have access to.
	Resources                AppResourceArrayOutput `pulumi:"resources"`
	ServicePrincipalClientId pulumi.StringOutput    `pulumi:"servicePrincipalClientId"`
	// id of the app service principal
	ServicePrincipalId pulumi.IntOutput `pulumi:"servicePrincipalId"`
	// name of the app service principal
	ServicePrincipalName pulumi.StringOutput `pulumi:"servicePrincipalName"`
	// The update time of the app.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The email of the user that last updated the app.
	Updater pulumi.StringOutput `pulumi:"updater"`
	// The URL of the app once it is deployed.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewApp registers a new resource with the given unique name, arguments, and options.
func NewApp(ctx *pulumi.Context,
	name string, args *AppArgs, opts ...pulumi.ResourceOption) (*App, error) {
	if args == nil {
		args = &AppArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource App
	err := ctx.RegisterResource("databricks:index/app:App", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApp gets an existing App resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppState, opts ...pulumi.ResourceOption) (*App, error) {
	var resource App
	err := ctx.ReadResource("databricks:index/app:App", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering App resources.
type appState struct {
	ActiveDeployment *AppActiveDeployment `pulumi:"activeDeployment"`
	// attribute
	AppStatus      *AppAppStatus `pulumi:"appStatus"`
	BudgetPolicyId *string       `pulumi:"budgetPolicyId"`
	// attribute
	ComputeStatus *AppComputeStatus `pulumi:"computeStatus"`
	// The creation time of the app.
	CreateTime *string `pulumi:"createTime"`
	// The email of the user that created the app.
	Creator *string `pulumi:"creator"`
	// The default workspace file system path of the source code from which app deployment are created. This field tracks the workspace source code path of the last active deployment.
	DefaultSourceCodePath *string `pulumi:"defaultSourceCodePath"`
	// The description of the app.
	Description             *string `pulumi:"description"`
	EffectiveBudgetPolicyId *string `pulumi:"effectiveBudgetPolicyId"`
	// The name of the app. The name must contain only lowercase alphanumeric characters and hyphens. It must be unique within the workspace.
	Name              *string               `pulumi:"name"`
	NoCompute         *bool                 `pulumi:"noCompute"`
	PendingDeployment *AppPendingDeployment `pulumi:"pendingDeployment"`
	// A list of resources that the app have access to.
	Resources                []AppResource `pulumi:"resources"`
	ServicePrincipalClientId *string       `pulumi:"servicePrincipalClientId"`
	// id of the app service principal
	ServicePrincipalId *int `pulumi:"servicePrincipalId"`
	// name of the app service principal
	ServicePrincipalName *string `pulumi:"servicePrincipalName"`
	// The update time of the app.
	UpdateTime *string `pulumi:"updateTime"`
	// The email of the user that last updated the app.
	Updater *string `pulumi:"updater"`
	// The URL of the app once it is deployed.
	Url *string `pulumi:"url"`
}

type AppState struct {
	ActiveDeployment AppActiveDeploymentPtrInput
	// attribute
	AppStatus      AppAppStatusPtrInput
	BudgetPolicyId pulumi.StringPtrInput
	// attribute
	ComputeStatus AppComputeStatusPtrInput
	// The creation time of the app.
	CreateTime pulumi.StringPtrInput
	// The email of the user that created the app.
	Creator pulumi.StringPtrInput
	// The default workspace file system path of the source code from which app deployment are created. This field tracks the workspace source code path of the last active deployment.
	DefaultSourceCodePath pulumi.StringPtrInput
	// The description of the app.
	Description             pulumi.StringPtrInput
	EffectiveBudgetPolicyId pulumi.StringPtrInput
	// The name of the app. The name must contain only lowercase alphanumeric characters and hyphens. It must be unique within the workspace.
	Name              pulumi.StringPtrInput
	NoCompute         pulumi.BoolPtrInput
	PendingDeployment AppPendingDeploymentPtrInput
	// A list of resources that the app have access to.
	Resources                AppResourceArrayInput
	ServicePrincipalClientId pulumi.StringPtrInput
	// id of the app service principal
	ServicePrincipalId pulumi.IntPtrInput
	// name of the app service principal
	ServicePrincipalName pulumi.StringPtrInput
	// The update time of the app.
	UpdateTime pulumi.StringPtrInput
	// The email of the user that last updated the app.
	Updater pulumi.StringPtrInput
	// The URL of the app once it is deployed.
	Url pulumi.StringPtrInput
}

func (AppState) ElementType() reflect.Type {
	return reflect.TypeOf((*appState)(nil)).Elem()
}

type appArgs struct {
	BudgetPolicyId *string `pulumi:"budgetPolicyId"`
	// The description of the app.
	Description *string `pulumi:"description"`
	// The name of the app. The name must contain only lowercase alphanumeric characters and hyphens. It must be unique within the workspace.
	Name      *string `pulumi:"name"`
	NoCompute *bool   `pulumi:"noCompute"`
	// A list of resources that the app have access to.
	Resources []AppResource `pulumi:"resources"`
}

// The set of arguments for constructing a App resource.
type AppArgs struct {
	BudgetPolicyId pulumi.StringPtrInput
	// The description of the app.
	Description pulumi.StringPtrInput
	// The name of the app. The name must contain only lowercase alphanumeric characters and hyphens. It must be unique within the workspace.
	Name      pulumi.StringPtrInput
	NoCompute pulumi.BoolPtrInput
	// A list of resources that the app have access to.
	Resources AppResourceArrayInput
}

func (AppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appArgs)(nil)).Elem()
}

type AppInput interface {
	pulumi.Input

	ToAppOutput() AppOutput
	ToAppOutputWithContext(ctx context.Context) AppOutput
}

func (*App) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (i *App) ToAppOutput() AppOutput {
	return i.ToAppOutputWithContext(context.Background())
}

func (i *App) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOutput)
}

// AppArrayInput is an input type that accepts AppArray and AppArrayOutput values.
// You can construct a concrete instance of `AppArrayInput` via:
//
//	AppArray{ AppArgs{...} }
type AppArrayInput interface {
	pulumi.Input

	ToAppArrayOutput() AppArrayOutput
	ToAppArrayOutputWithContext(context.Context) AppArrayOutput
}

type AppArray []AppInput

func (AppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (i AppArray) ToAppArrayOutput() AppArrayOutput {
	return i.ToAppArrayOutputWithContext(context.Background())
}

func (i AppArray) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppArrayOutput)
}

// AppMapInput is an input type that accepts AppMap and AppMapOutput values.
// You can construct a concrete instance of `AppMapInput` via:
//
//	AppMap{ "key": AppArgs{...} }
type AppMapInput interface {
	pulumi.Input

	ToAppMapOutput() AppMapOutput
	ToAppMapOutputWithContext(context.Context) AppMapOutput
}

type AppMap map[string]AppInput

func (AppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (i AppMap) ToAppMapOutput() AppMapOutput {
	return i.ToAppMapOutputWithContext(context.Background())
}

func (i AppMap) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMapOutput)
}

type AppOutput struct{ *pulumi.OutputState }

func (AppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (o AppOutput) ToAppOutput() AppOutput {
	return o
}

func (o AppOutput) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return o
}

func (o AppOutput) ActiveDeployment() AppActiveDeploymentOutput {
	return o.ApplyT(func(v *App) AppActiveDeploymentOutput { return v.ActiveDeployment }).(AppActiveDeploymentOutput)
}

// attribute
func (o AppOutput) AppStatus() AppAppStatusOutput {
	return o.ApplyT(func(v *App) AppAppStatusOutput { return v.AppStatus }).(AppAppStatusOutput)
}

func (o AppOutput) BudgetPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *App) pulumi.StringPtrOutput { return v.BudgetPolicyId }).(pulumi.StringPtrOutput)
}

// attribute
func (o AppOutput) ComputeStatus() AppComputeStatusOutput {
	return o.ApplyT(func(v *App) AppComputeStatusOutput { return v.ComputeStatus }).(AppComputeStatusOutput)
}

// The creation time of the app.
func (o AppOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The email of the user that created the app.
func (o AppOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

// The default workspace file system path of the source code from which app deployment are created. This field tracks the workspace source code path of the last active deployment.
func (o AppOutput) DefaultSourceCodePath() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.DefaultSourceCodePath }).(pulumi.StringOutput)
}

// The description of the app.
func (o AppOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *App) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AppOutput) EffectiveBudgetPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.EffectiveBudgetPolicyId }).(pulumi.StringOutput)
}

// The name of the app. The name must contain only lowercase alphanumeric characters and hyphens. It must be unique within the workspace.
func (o AppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AppOutput) NoCompute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *App) pulumi.BoolPtrOutput { return v.NoCompute }).(pulumi.BoolPtrOutput)
}

func (o AppOutput) PendingDeployment() AppPendingDeploymentOutput {
	return o.ApplyT(func(v *App) AppPendingDeploymentOutput { return v.PendingDeployment }).(AppPendingDeploymentOutput)
}

// A list of resources that the app have access to.
func (o AppOutput) Resources() AppResourceArrayOutput {
	return o.ApplyT(func(v *App) AppResourceArrayOutput { return v.Resources }).(AppResourceArrayOutput)
}

func (o AppOutput) ServicePrincipalClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.ServicePrincipalClientId }).(pulumi.StringOutput)
}

// id of the app service principal
func (o AppOutput) ServicePrincipalId() pulumi.IntOutput {
	return o.ApplyT(func(v *App) pulumi.IntOutput { return v.ServicePrincipalId }).(pulumi.IntOutput)
}

// name of the app service principal
func (o AppOutput) ServicePrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.ServicePrincipalName }).(pulumi.StringOutput)
}

// The update time of the app.
func (o AppOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The email of the user that last updated the app.
func (o AppOutput) Updater() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Updater }).(pulumi.StringOutput)
}

// The URL of the app once it is deployed.
func (o AppOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type AppArrayOutput struct{ *pulumi.OutputState }

func (AppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (o AppArrayOutput) ToAppArrayOutput() AppArrayOutput {
	return o
}

func (o AppArrayOutput) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return o
}

func (o AppArrayOutput) Index(i pulumi.IntInput) AppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *App {
		return vs[0].([]*App)[vs[1].(int)]
	}).(AppOutput)
}

type AppMapOutput struct{ *pulumi.OutputState }

func (AppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (o AppMapOutput) ToAppMapOutput() AppMapOutput {
	return o
}

func (o AppMapOutput) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return o
}

func (o AppMapOutput) MapIndex(k pulumi.StringInput) AppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *App {
		return vs[0].(map[string]*App)[vs[1].(string)]
	}).(AppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppInput)(nil)).Elem(), &App{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppArrayInput)(nil)).Elem(), AppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMapInput)(nil)).Elem(), AppMap{})
	pulumi.RegisterOutputType(AppOutput{})
	pulumi.RegisterOutputType(AppArrayOutput{})
	pulumi.RegisterOutputType(AppMapOutput{})
}
