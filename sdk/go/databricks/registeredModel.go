// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RegisteredModel struct {
	pulumi.CustomResourceState

	CatalogName     pulumi.StringOutput    `pulumi:"catalogName"`
	Comment         pulumi.StringPtrOutput `pulumi:"comment"`
	Name            pulumi.StringOutput    `pulumi:"name"`
	Owner           pulumi.StringOutput    `pulumi:"owner"`
	SchemaName      pulumi.StringOutput    `pulumi:"schemaName"`
	StorageLocation pulumi.StringOutput    `pulumi:"storageLocation"`
}

// NewRegisteredModel registers a new resource with the given unique name, arguments, and options.
func NewRegisteredModel(ctx *pulumi.Context,
	name string, args *RegisteredModelArgs, opts ...pulumi.ResourceOption) (*RegisteredModel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogName == nil {
		return nil, errors.New("invalid value for required argument 'CatalogName'")
	}
	if args.SchemaName == nil {
		return nil, errors.New("invalid value for required argument 'SchemaName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegisteredModel
	err := ctx.RegisterResource("databricks:index/registeredModel:RegisteredModel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegisteredModel gets an existing RegisteredModel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegisteredModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegisteredModelState, opts ...pulumi.ResourceOption) (*RegisteredModel, error) {
	var resource RegisteredModel
	err := ctx.ReadResource("databricks:index/registeredModel:RegisteredModel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegisteredModel resources.
type registeredModelState struct {
	CatalogName     *string `pulumi:"catalogName"`
	Comment         *string `pulumi:"comment"`
	Name            *string `pulumi:"name"`
	Owner           *string `pulumi:"owner"`
	SchemaName      *string `pulumi:"schemaName"`
	StorageLocation *string `pulumi:"storageLocation"`
}

type RegisteredModelState struct {
	CatalogName     pulumi.StringPtrInput
	Comment         pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	Owner           pulumi.StringPtrInput
	SchemaName      pulumi.StringPtrInput
	StorageLocation pulumi.StringPtrInput
}

func (RegisteredModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*registeredModelState)(nil)).Elem()
}

type registeredModelArgs struct {
	CatalogName     string  `pulumi:"catalogName"`
	Comment         *string `pulumi:"comment"`
	Name            *string `pulumi:"name"`
	Owner           *string `pulumi:"owner"`
	SchemaName      string  `pulumi:"schemaName"`
	StorageLocation *string `pulumi:"storageLocation"`
}

// The set of arguments for constructing a RegisteredModel resource.
type RegisteredModelArgs struct {
	CatalogName     pulumi.StringInput
	Comment         pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	Owner           pulumi.StringPtrInput
	SchemaName      pulumi.StringInput
	StorageLocation pulumi.StringPtrInput
}

func (RegisteredModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registeredModelArgs)(nil)).Elem()
}

type RegisteredModelInput interface {
	pulumi.Input

	ToRegisteredModelOutput() RegisteredModelOutput
	ToRegisteredModelOutputWithContext(ctx context.Context) RegisteredModelOutput
}

func (*RegisteredModel) ElementType() reflect.Type {
	return reflect.TypeOf((**RegisteredModel)(nil)).Elem()
}

func (i *RegisteredModel) ToRegisteredModelOutput() RegisteredModelOutput {
	return i.ToRegisteredModelOutputWithContext(context.Background())
}

func (i *RegisteredModel) ToRegisteredModelOutputWithContext(ctx context.Context) RegisteredModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredModelOutput)
}

// RegisteredModelArrayInput is an input type that accepts RegisteredModelArray and RegisteredModelArrayOutput values.
// You can construct a concrete instance of `RegisteredModelArrayInput` via:
//
//	RegisteredModelArray{ RegisteredModelArgs{...} }
type RegisteredModelArrayInput interface {
	pulumi.Input

	ToRegisteredModelArrayOutput() RegisteredModelArrayOutput
	ToRegisteredModelArrayOutputWithContext(context.Context) RegisteredModelArrayOutput
}

type RegisteredModelArray []RegisteredModelInput

func (RegisteredModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegisteredModel)(nil)).Elem()
}

func (i RegisteredModelArray) ToRegisteredModelArrayOutput() RegisteredModelArrayOutput {
	return i.ToRegisteredModelArrayOutputWithContext(context.Background())
}

func (i RegisteredModelArray) ToRegisteredModelArrayOutputWithContext(ctx context.Context) RegisteredModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredModelArrayOutput)
}

// RegisteredModelMapInput is an input type that accepts RegisteredModelMap and RegisteredModelMapOutput values.
// You can construct a concrete instance of `RegisteredModelMapInput` via:
//
//	RegisteredModelMap{ "key": RegisteredModelArgs{...} }
type RegisteredModelMapInput interface {
	pulumi.Input

	ToRegisteredModelMapOutput() RegisteredModelMapOutput
	ToRegisteredModelMapOutputWithContext(context.Context) RegisteredModelMapOutput
}

type RegisteredModelMap map[string]RegisteredModelInput

func (RegisteredModelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegisteredModel)(nil)).Elem()
}

func (i RegisteredModelMap) ToRegisteredModelMapOutput() RegisteredModelMapOutput {
	return i.ToRegisteredModelMapOutputWithContext(context.Background())
}

func (i RegisteredModelMap) ToRegisteredModelMapOutputWithContext(ctx context.Context) RegisteredModelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredModelMapOutput)
}

type RegisteredModelOutput struct{ *pulumi.OutputState }

func (RegisteredModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegisteredModel)(nil)).Elem()
}

func (o RegisteredModelOutput) ToRegisteredModelOutput() RegisteredModelOutput {
	return o
}

func (o RegisteredModelOutput) ToRegisteredModelOutputWithContext(ctx context.Context) RegisteredModelOutput {
	return o
}

func (o RegisteredModelOutput) CatalogName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredModel) pulumi.StringOutput { return v.CatalogName }).(pulumi.StringOutput)
}

func (o RegisteredModelOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegisteredModel) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o RegisteredModelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredModel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RegisteredModelOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredModel) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o RegisteredModelOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredModel) pulumi.StringOutput { return v.SchemaName }).(pulumi.StringOutput)
}

func (o RegisteredModelOutput) StorageLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredModel) pulumi.StringOutput { return v.StorageLocation }).(pulumi.StringOutput)
}

type RegisteredModelArrayOutput struct{ *pulumi.OutputState }

func (RegisteredModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegisteredModel)(nil)).Elem()
}

func (o RegisteredModelArrayOutput) ToRegisteredModelArrayOutput() RegisteredModelArrayOutput {
	return o
}

func (o RegisteredModelArrayOutput) ToRegisteredModelArrayOutputWithContext(ctx context.Context) RegisteredModelArrayOutput {
	return o
}

func (o RegisteredModelArrayOutput) Index(i pulumi.IntInput) RegisteredModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegisteredModel {
		return vs[0].([]*RegisteredModel)[vs[1].(int)]
	}).(RegisteredModelOutput)
}

type RegisteredModelMapOutput struct{ *pulumi.OutputState }

func (RegisteredModelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegisteredModel)(nil)).Elem()
}

func (o RegisteredModelMapOutput) ToRegisteredModelMapOutput() RegisteredModelMapOutput {
	return o
}

func (o RegisteredModelMapOutput) ToRegisteredModelMapOutputWithContext(ctx context.Context) RegisteredModelMapOutput {
	return o
}

func (o RegisteredModelMapOutput) MapIndex(k pulumi.StringInput) RegisteredModelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegisteredModel {
		return vs[0].(map[string]*RegisteredModel)[vs[1].(string)]
	}).(RegisteredModelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredModelInput)(nil)).Elem(), &RegisteredModel{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredModelArrayInput)(nil)).Elem(), RegisteredModelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredModelMapInput)(nil)).Elem(), RegisteredModelMap{})
	pulumi.RegisterOutputType(RegisteredModelOutput{})
	pulumi.RegisterOutputType(RegisteredModelArrayOutput{})
	pulumi.RegisterOutputType(RegisteredModelMapOutput{})
}
