// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// This resource can be imported using alert ID:
//
// bash
//
// ```sh
// $ pulumi import databricks:index/alert:Alert this <alert-id>
// ```
type Alert struct {
	pulumi.CustomResourceState

	// Trigger conditions of the alert. Block consists of the following attributes:
	Condition AlertConditionOutput `pulumi:"condition"`
	// The timestamp string indicating when the alert was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
	CustomBody pulumi.StringPtrOutput `pulumi:"customBody"`
	// Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
	CustomSubject pulumi.StringPtrOutput `pulumi:"customSubject"`
	// Name of the alert.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The workspace state of the alert. Used for tracking trashed status. (Possible values are `ACTIVE` or `TRASHED`).
	LifecycleState pulumi.StringOutput `pulumi:"lifecycleState"`
	// Whether to notify alert subscribers when alert returns back to normal.
	NotifyOnOk pulumi.BoolPtrOutput `pulumi:"notifyOnOk"`
	// Alert owner's username.
	OwnerUserName pulumi.StringPtrOutput `pulumi:"ownerUserName"`
	// The path to a workspace folder containing the alert. The default is the user's home folder.  If changed, the alert will be recreated.
	ParentPath pulumi.StringPtrOutput `pulumi:"parentPath"`
	// ID of the query evaluated by the alert.
	QueryId pulumi.StringOutput `pulumi:"queryId"`
	// Number of seconds an alert must wait after being triggered to rearm itself. After rearming, it can be triggered again. If 0 or not specified, the alert will not be triggered again.
	SecondsToRetrigger pulumi.IntPtrOutput `pulumi:"secondsToRetrigger"`
	// Current state of the alert's trigger status (`UNKNOWN`, `OK`, `TRIGGERED`). This field is set to `UNKNOWN` if the alert has not yet been evaluated or ran into an error during the last evaluation.
	State pulumi.StringOutput `pulumi:"state"`
	// The timestamp string when the alert was last triggered if the alert has been triggered before.
	TriggerTime pulumi.StringOutput `pulumi:"triggerTime"`
	// The timestamp string indicating when the alert was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAlert registers a new resource with the given unique name, arguments, and options.
func NewAlert(ctx *pulumi.Context,
	name string, args *AlertArgs, opts ...pulumi.ResourceOption) (*Alert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Condition == nil {
		return nil, errors.New("invalid value for required argument 'Condition'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.QueryId == nil {
		return nil, errors.New("invalid value for required argument 'QueryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Alert
	err := ctx.RegisterResource("databricks:index/alert:Alert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlert gets an existing Alert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertState, opts ...pulumi.ResourceOption) (*Alert, error) {
	var resource Alert
	err := ctx.ReadResource("databricks:index/alert:Alert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alert resources.
type alertState struct {
	// Trigger conditions of the alert. Block consists of the following attributes:
	Condition *AlertCondition `pulumi:"condition"`
	// The timestamp string indicating when the alert was created.
	CreateTime *string `pulumi:"createTime"`
	// Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
	CustomBody *string `pulumi:"customBody"`
	// Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
	CustomSubject *string `pulumi:"customSubject"`
	// Name of the alert.
	DisplayName *string `pulumi:"displayName"`
	// The workspace state of the alert. Used for tracking trashed status. (Possible values are `ACTIVE` or `TRASHED`).
	LifecycleState *string `pulumi:"lifecycleState"`
	// Whether to notify alert subscribers when alert returns back to normal.
	NotifyOnOk *bool `pulumi:"notifyOnOk"`
	// Alert owner's username.
	OwnerUserName *string `pulumi:"ownerUserName"`
	// The path to a workspace folder containing the alert. The default is the user's home folder.  If changed, the alert will be recreated.
	ParentPath *string `pulumi:"parentPath"`
	// ID of the query evaluated by the alert.
	QueryId *string `pulumi:"queryId"`
	// Number of seconds an alert must wait after being triggered to rearm itself. After rearming, it can be triggered again. If 0 or not specified, the alert will not be triggered again.
	SecondsToRetrigger *int `pulumi:"secondsToRetrigger"`
	// Current state of the alert's trigger status (`UNKNOWN`, `OK`, `TRIGGERED`). This field is set to `UNKNOWN` if the alert has not yet been evaluated or ran into an error during the last evaluation.
	State *string `pulumi:"state"`
	// The timestamp string when the alert was last triggered if the alert has been triggered before.
	TriggerTime *string `pulumi:"triggerTime"`
	// The timestamp string indicating when the alert was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type AlertState struct {
	// Trigger conditions of the alert. Block consists of the following attributes:
	Condition AlertConditionPtrInput
	// The timestamp string indicating when the alert was created.
	CreateTime pulumi.StringPtrInput
	// Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
	CustomBody pulumi.StringPtrInput
	// Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
	CustomSubject pulumi.StringPtrInput
	// Name of the alert.
	DisplayName pulumi.StringPtrInput
	// The workspace state of the alert. Used for tracking trashed status. (Possible values are `ACTIVE` or `TRASHED`).
	LifecycleState pulumi.StringPtrInput
	// Whether to notify alert subscribers when alert returns back to normal.
	NotifyOnOk pulumi.BoolPtrInput
	// Alert owner's username.
	OwnerUserName pulumi.StringPtrInput
	// The path to a workspace folder containing the alert. The default is the user's home folder.  If changed, the alert will be recreated.
	ParentPath pulumi.StringPtrInput
	// ID of the query evaluated by the alert.
	QueryId pulumi.StringPtrInput
	// Number of seconds an alert must wait after being triggered to rearm itself. After rearming, it can be triggered again. If 0 or not specified, the alert will not be triggered again.
	SecondsToRetrigger pulumi.IntPtrInput
	// Current state of the alert's trigger status (`UNKNOWN`, `OK`, `TRIGGERED`). This field is set to `UNKNOWN` if the alert has not yet been evaluated or ran into an error during the last evaluation.
	State pulumi.StringPtrInput
	// The timestamp string when the alert was last triggered if the alert has been triggered before.
	TriggerTime pulumi.StringPtrInput
	// The timestamp string indicating when the alert was updated.
	UpdateTime pulumi.StringPtrInput
}

func (AlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertState)(nil)).Elem()
}

type alertArgs struct {
	// Trigger conditions of the alert. Block consists of the following attributes:
	Condition AlertCondition `pulumi:"condition"`
	// Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
	CustomBody *string `pulumi:"customBody"`
	// Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
	CustomSubject *string `pulumi:"customSubject"`
	// Name of the alert.
	DisplayName string `pulumi:"displayName"`
	// Whether to notify alert subscribers when alert returns back to normal.
	NotifyOnOk *bool `pulumi:"notifyOnOk"`
	// Alert owner's username.
	OwnerUserName *string `pulumi:"ownerUserName"`
	// The path to a workspace folder containing the alert. The default is the user's home folder.  If changed, the alert will be recreated.
	ParentPath *string `pulumi:"parentPath"`
	// ID of the query evaluated by the alert.
	QueryId string `pulumi:"queryId"`
	// Number of seconds an alert must wait after being triggered to rearm itself. After rearming, it can be triggered again. If 0 or not specified, the alert will not be triggered again.
	SecondsToRetrigger *int `pulumi:"secondsToRetrigger"`
}

// The set of arguments for constructing a Alert resource.
type AlertArgs struct {
	// Trigger conditions of the alert. Block consists of the following attributes:
	Condition AlertConditionInput
	// Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
	CustomBody pulumi.StringPtrInput
	// Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
	CustomSubject pulumi.StringPtrInput
	// Name of the alert.
	DisplayName pulumi.StringInput
	// Whether to notify alert subscribers when alert returns back to normal.
	NotifyOnOk pulumi.BoolPtrInput
	// Alert owner's username.
	OwnerUserName pulumi.StringPtrInput
	// The path to a workspace folder containing the alert. The default is the user's home folder.  If changed, the alert will be recreated.
	ParentPath pulumi.StringPtrInput
	// ID of the query evaluated by the alert.
	QueryId pulumi.StringInput
	// Number of seconds an alert must wait after being triggered to rearm itself. After rearming, it can be triggered again. If 0 or not specified, the alert will not be triggered again.
	SecondsToRetrigger pulumi.IntPtrInput
}

func (AlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertArgs)(nil)).Elem()
}

type AlertInput interface {
	pulumi.Input

	ToAlertOutput() AlertOutput
	ToAlertOutputWithContext(ctx context.Context) AlertOutput
}

func (*Alert) ElementType() reflect.Type {
	return reflect.TypeOf((**Alert)(nil)).Elem()
}

func (i *Alert) ToAlertOutput() AlertOutput {
	return i.ToAlertOutputWithContext(context.Background())
}

func (i *Alert) ToAlertOutputWithContext(ctx context.Context) AlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertOutput)
}

// AlertArrayInput is an input type that accepts AlertArray and AlertArrayOutput values.
// You can construct a concrete instance of `AlertArrayInput` via:
//
//	AlertArray{ AlertArgs{...} }
type AlertArrayInput interface {
	pulumi.Input

	ToAlertArrayOutput() AlertArrayOutput
	ToAlertArrayOutputWithContext(context.Context) AlertArrayOutput
}

type AlertArray []AlertInput

func (AlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alert)(nil)).Elem()
}

func (i AlertArray) ToAlertArrayOutput() AlertArrayOutput {
	return i.ToAlertArrayOutputWithContext(context.Background())
}

func (i AlertArray) ToAlertArrayOutputWithContext(ctx context.Context) AlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertArrayOutput)
}

// AlertMapInput is an input type that accepts AlertMap and AlertMapOutput values.
// You can construct a concrete instance of `AlertMapInput` via:
//
//	AlertMap{ "key": AlertArgs{...} }
type AlertMapInput interface {
	pulumi.Input

	ToAlertMapOutput() AlertMapOutput
	ToAlertMapOutputWithContext(context.Context) AlertMapOutput
}

type AlertMap map[string]AlertInput

func (AlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alert)(nil)).Elem()
}

func (i AlertMap) ToAlertMapOutput() AlertMapOutput {
	return i.ToAlertMapOutputWithContext(context.Background())
}

func (i AlertMap) ToAlertMapOutputWithContext(ctx context.Context) AlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMapOutput)
}

type AlertOutput struct{ *pulumi.OutputState }

func (AlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Alert)(nil)).Elem()
}

func (o AlertOutput) ToAlertOutput() AlertOutput {
	return o
}

func (o AlertOutput) ToAlertOutputWithContext(ctx context.Context) AlertOutput {
	return o
}

// Trigger conditions of the alert. Block consists of the following attributes:
func (o AlertOutput) Condition() AlertConditionOutput {
	return o.ApplyT(func(v *Alert) AlertConditionOutput { return v.Condition }).(AlertConditionOutput)
}

// The timestamp string indicating when the alert was created.
func (o AlertOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
func (o AlertOutput) CustomBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.CustomBody }).(pulumi.StringPtrOutput)
}

// Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
func (o AlertOutput) CustomSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.CustomSubject }).(pulumi.StringPtrOutput)
}

// Name of the alert.
func (o AlertOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The workspace state of the alert. Used for tracking trashed status. (Possible values are `ACTIVE` or `TRASHED`).
func (o AlertOutput) LifecycleState() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.LifecycleState }).(pulumi.StringOutput)
}

// Whether to notify alert subscribers when alert returns back to normal.
func (o AlertOutput) NotifyOnOk() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.BoolPtrOutput { return v.NotifyOnOk }).(pulumi.BoolPtrOutput)
}

// Alert owner's username.
func (o AlertOutput) OwnerUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.OwnerUserName }).(pulumi.StringPtrOutput)
}

// The path to a workspace folder containing the alert. The default is the user's home folder.  If changed, the alert will be recreated.
func (o AlertOutput) ParentPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.ParentPath }).(pulumi.StringPtrOutput)
}

// ID of the query evaluated by the alert.
func (o AlertOutput) QueryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.QueryId }).(pulumi.StringOutput)
}

// Number of seconds an alert must wait after being triggered to rearm itself. After rearming, it can be triggered again. If 0 or not specified, the alert will not be triggered again.
func (o AlertOutput) SecondsToRetrigger() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.IntPtrOutput { return v.SecondsToRetrigger }).(pulumi.IntPtrOutput)
}

// Current state of the alert's trigger status (`UNKNOWN`, `OK`, `TRIGGERED`). This field is set to `UNKNOWN` if the alert has not yet been evaluated or ran into an error during the last evaluation.
func (o AlertOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The timestamp string when the alert was last triggered if the alert has been triggered before.
func (o AlertOutput) TriggerTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.TriggerTime }).(pulumi.StringOutput)
}

// The timestamp string indicating when the alert was updated.
func (o AlertOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AlertArrayOutput struct{ *pulumi.OutputState }

func (AlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alert)(nil)).Elem()
}

func (o AlertArrayOutput) ToAlertArrayOutput() AlertArrayOutput {
	return o
}

func (o AlertArrayOutput) ToAlertArrayOutputWithContext(ctx context.Context) AlertArrayOutput {
	return o
}

func (o AlertArrayOutput) Index(i pulumi.IntInput) AlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Alert {
		return vs[0].([]*Alert)[vs[1].(int)]
	}).(AlertOutput)
}

type AlertMapOutput struct{ *pulumi.OutputState }

func (AlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alert)(nil)).Elem()
}

func (o AlertMapOutput) ToAlertMapOutput() AlertMapOutput {
	return o
}

func (o AlertMapOutput) ToAlertMapOutputWithContext(ctx context.Context) AlertMapOutput {
	return o
}

func (o AlertMapOutput) MapIndex(k pulumi.StringInput) AlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Alert {
		return vs[0].(map[string]*Alert)[vs[1].(string)]
	}).(AlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertInput)(nil)).Elem(), &Alert{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertArrayInput)(nil)).Elem(), AlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMapInput)(nil)).Elem(), AlertMap{})
	pulumi.RegisterOutputType(AlertOutput{})
	pulumi.RegisterOutputType(AlertArrayOutput{})
	pulumi.RegisterOutputType(AlertMapOutput{})
}
