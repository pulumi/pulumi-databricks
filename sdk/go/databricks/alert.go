// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Alert struct {
	pulumi.CustomResourceState

	Condition          AlertConditionOutput   `pulumi:"condition"`
	CreateTime         pulumi.StringOutput    `pulumi:"createTime"`
	CustomBody         pulumi.StringPtrOutput `pulumi:"customBody"`
	CustomSubject      pulumi.StringPtrOutput `pulumi:"customSubject"`
	DisplayName        pulumi.StringOutput    `pulumi:"displayName"`
	LifecycleState     pulumi.StringOutput    `pulumi:"lifecycleState"`
	NotifyOnOk         pulumi.BoolPtrOutput   `pulumi:"notifyOnOk"`
	OwnerUserName      pulumi.StringPtrOutput `pulumi:"ownerUserName"`
	ParentPath         pulumi.StringPtrOutput `pulumi:"parentPath"`
	QueryId            pulumi.StringOutput    `pulumi:"queryId"`
	SecondsToRetrigger pulumi.IntPtrOutput    `pulumi:"secondsToRetrigger"`
	State              pulumi.StringOutput    `pulumi:"state"`
	TriggerTime        pulumi.StringOutput    `pulumi:"triggerTime"`
	UpdateTime         pulumi.StringOutput    `pulumi:"updateTime"`
}

// NewAlert registers a new resource with the given unique name, arguments, and options.
func NewAlert(ctx *pulumi.Context,
	name string, args *AlertArgs, opts ...pulumi.ResourceOption) (*Alert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Condition == nil {
		return nil, errors.New("invalid value for required argument 'Condition'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.QueryId == nil {
		return nil, errors.New("invalid value for required argument 'QueryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Alert
	err := ctx.RegisterResource("databricks:index/alert:Alert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlert gets an existing Alert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertState, opts ...pulumi.ResourceOption) (*Alert, error) {
	var resource Alert
	err := ctx.ReadResource("databricks:index/alert:Alert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alert resources.
type alertState struct {
	Condition          *AlertCondition `pulumi:"condition"`
	CreateTime         *string         `pulumi:"createTime"`
	CustomBody         *string         `pulumi:"customBody"`
	CustomSubject      *string         `pulumi:"customSubject"`
	DisplayName        *string         `pulumi:"displayName"`
	LifecycleState     *string         `pulumi:"lifecycleState"`
	NotifyOnOk         *bool           `pulumi:"notifyOnOk"`
	OwnerUserName      *string         `pulumi:"ownerUserName"`
	ParentPath         *string         `pulumi:"parentPath"`
	QueryId            *string         `pulumi:"queryId"`
	SecondsToRetrigger *int            `pulumi:"secondsToRetrigger"`
	State              *string         `pulumi:"state"`
	TriggerTime        *string         `pulumi:"triggerTime"`
	UpdateTime         *string         `pulumi:"updateTime"`
}

type AlertState struct {
	Condition          AlertConditionPtrInput
	CreateTime         pulumi.StringPtrInput
	CustomBody         pulumi.StringPtrInput
	CustomSubject      pulumi.StringPtrInput
	DisplayName        pulumi.StringPtrInput
	LifecycleState     pulumi.StringPtrInput
	NotifyOnOk         pulumi.BoolPtrInput
	OwnerUserName      pulumi.StringPtrInput
	ParentPath         pulumi.StringPtrInput
	QueryId            pulumi.StringPtrInput
	SecondsToRetrigger pulumi.IntPtrInput
	State              pulumi.StringPtrInput
	TriggerTime        pulumi.StringPtrInput
	UpdateTime         pulumi.StringPtrInput
}

func (AlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertState)(nil)).Elem()
}

type alertArgs struct {
	Condition          AlertCondition `pulumi:"condition"`
	CustomBody         *string        `pulumi:"customBody"`
	CustomSubject      *string        `pulumi:"customSubject"`
	DisplayName        string         `pulumi:"displayName"`
	NotifyOnOk         *bool          `pulumi:"notifyOnOk"`
	OwnerUserName      *string        `pulumi:"ownerUserName"`
	ParentPath         *string        `pulumi:"parentPath"`
	QueryId            string         `pulumi:"queryId"`
	SecondsToRetrigger *int           `pulumi:"secondsToRetrigger"`
}

// The set of arguments for constructing a Alert resource.
type AlertArgs struct {
	Condition          AlertConditionInput
	CustomBody         pulumi.StringPtrInput
	CustomSubject      pulumi.StringPtrInput
	DisplayName        pulumi.StringInput
	NotifyOnOk         pulumi.BoolPtrInput
	OwnerUserName      pulumi.StringPtrInput
	ParentPath         pulumi.StringPtrInput
	QueryId            pulumi.StringInput
	SecondsToRetrigger pulumi.IntPtrInput
}

func (AlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertArgs)(nil)).Elem()
}

type AlertInput interface {
	pulumi.Input

	ToAlertOutput() AlertOutput
	ToAlertOutputWithContext(ctx context.Context) AlertOutput
}

func (*Alert) ElementType() reflect.Type {
	return reflect.TypeOf((**Alert)(nil)).Elem()
}

func (i *Alert) ToAlertOutput() AlertOutput {
	return i.ToAlertOutputWithContext(context.Background())
}

func (i *Alert) ToAlertOutputWithContext(ctx context.Context) AlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertOutput)
}

// AlertArrayInput is an input type that accepts AlertArray and AlertArrayOutput values.
// You can construct a concrete instance of `AlertArrayInput` via:
//
//	AlertArray{ AlertArgs{...} }
type AlertArrayInput interface {
	pulumi.Input

	ToAlertArrayOutput() AlertArrayOutput
	ToAlertArrayOutputWithContext(context.Context) AlertArrayOutput
}

type AlertArray []AlertInput

func (AlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alert)(nil)).Elem()
}

func (i AlertArray) ToAlertArrayOutput() AlertArrayOutput {
	return i.ToAlertArrayOutputWithContext(context.Background())
}

func (i AlertArray) ToAlertArrayOutputWithContext(ctx context.Context) AlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertArrayOutput)
}

// AlertMapInput is an input type that accepts AlertMap and AlertMapOutput values.
// You can construct a concrete instance of `AlertMapInput` via:
//
//	AlertMap{ "key": AlertArgs{...} }
type AlertMapInput interface {
	pulumi.Input

	ToAlertMapOutput() AlertMapOutput
	ToAlertMapOutputWithContext(context.Context) AlertMapOutput
}

type AlertMap map[string]AlertInput

func (AlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alert)(nil)).Elem()
}

func (i AlertMap) ToAlertMapOutput() AlertMapOutput {
	return i.ToAlertMapOutputWithContext(context.Background())
}

func (i AlertMap) ToAlertMapOutputWithContext(ctx context.Context) AlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMapOutput)
}

type AlertOutput struct{ *pulumi.OutputState }

func (AlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Alert)(nil)).Elem()
}

func (o AlertOutput) ToAlertOutput() AlertOutput {
	return o
}

func (o AlertOutput) ToAlertOutputWithContext(ctx context.Context) AlertOutput {
	return o
}

func (o AlertOutput) Condition() AlertConditionOutput {
	return o.ApplyT(func(v *Alert) AlertConditionOutput { return v.Condition }).(AlertConditionOutput)
}

func (o AlertOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o AlertOutput) CustomBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.CustomBody }).(pulumi.StringPtrOutput)
}

func (o AlertOutput) CustomSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.CustomSubject }).(pulumi.StringPtrOutput)
}

func (o AlertOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o AlertOutput) LifecycleState() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.LifecycleState }).(pulumi.StringOutput)
}

func (o AlertOutput) NotifyOnOk() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.BoolPtrOutput { return v.NotifyOnOk }).(pulumi.BoolPtrOutput)
}

func (o AlertOutput) OwnerUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.OwnerUserName }).(pulumi.StringPtrOutput)
}

func (o AlertOutput) ParentPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.ParentPath }).(pulumi.StringPtrOutput)
}

func (o AlertOutput) QueryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.QueryId }).(pulumi.StringOutput)
}

func (o AlertOutput) SecondsToRetrigger() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.IntPtrOutput { return v.SecondsToRetrigger }).(pulumi.IntPtrOutput)
}

func (o AlertOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o AlertOutput) TriggerTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.TriggerTime }).(pulumi.StringOutput)
}

func (o AlertOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AlertArrayOutput struct{ *pulumi.OutputState }

func (AlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alert)(nil)).Elem()
}

func (o AlertArrayOutput) ToAlertArrayOutput() AlertArrayOutput {
	return o
}

func (o AlertArrayOutput) ToAlertArrayOutputWithContext(ctx context.Context) AlertArrayOutput {
	return o
}

func (o AlertArrayOutput) Index(i pulumi.IntInput) AlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Alert {
		return vs[0].([]*Alert)[vs[1].(int)]
	}).(AlertOutput)
}

type AlertMapOutput struct{ *pulumi.OutputState }

func (AlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alert)(nil)).Elem()
}

func (o AlertMapOutput) ToAlertMapOutput() AlertMapOutput {
	return o
}

func (o AlertMapOutput) ToAlertMapOutputWithContext(ctx context.Context) AlertMapOutput {
	return o
}

func (o AlertMapOutput) MapIndex(k pulumi.StringInput) AlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Alert {
		return vs[0].(map[string]*Alert)[vs[1].(string)]
	}).(AlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertInput)(nil)).Elem(), &Alert{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertArrayInput)(nil)).Elem(), AlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMapInput)(nil)).Elem(), AlertMap{})
	pulumi.RegisterOutputType(AlertOutput{})
	pulumi.RegisterOutputType(AlertArrayOutput{})
	pulumi.RegisterOutputType(AlertMapOutput{})
}
