// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SqlPermissions struct {
	pulumi.CustomResourceState

	AnonymousFunction    pulumi.BoolPtrOutput                         `pulumi:"anonymousFunction"`
	AnyFile              pulumi.BoolPtrOutput                         `pulumi:"anyFile"`
	Catalog              pulumi.BoolPtrOutput                         `pulumi:"catalog"`
	ClusterId            pulumi.StringOutput                          `pulumi:"clusterId"`
	Database             pulumi.StringPtrOutput                       `pulumi:"database"`
	PrivilegeAssignments SqlPermissionsPrivilegeAssignmentArrayOutput `pulumi:"privilegeAssignments"`
	Table                pulumi.StringPtrOutput                       `pulumi:"table"`
	View                 pulumi.StringPtrOutput                       `pulumi:"view"`
}

// NewSqlPermissions registers a new resource with the given unique name, arguments, and options.
func NewSqlPermissions(ctx *pulumi.Context,
	name string, args *SqlPermissionsArgs, opts ...pulumi.ResourceOption) (*SqlPermissions, error) {
	if args == nil {
		args = &SqlPermissionsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlPermissions
	err := ctx.RegisterResource("databricks:index/sqlPermissions:SqlPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlPermissions gets an existing SqlPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlPermissionsState, opts ...pulumi.ResourceOption) (*SqlPermissions, error) {
	var resource SqlPermissions
	err := ctx.ReadResource("databricks:index/sqlPermissions:SqlPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlPermissions resources.
type sqlPermissionsState struct {
	AnonymousFunction    *bool                               `pulumi:"anonymousFunction"`
	AnyFile              *bool                               `pulumi:"anyFile"`
	Catalog              *bool                               `pulumi:"catalog"`
	ClusterId            *string                             `pulumi:"clusterId"`
	Database             *string                             `pulumi:"database"`
	PrivilegeAssignments []SqlPermissionsPrivilegeAssignment `pulumi:"privilegeAssignments"`
	Table                *string                             `pulumi:"table"`
	View                 *string                             `pulumi:"view"`
}

type SqlPermissionsState struct {
	AnonymousFunction    pulumi.BoolPtrInput
	AnyFile              pulumi.BoolPtrInput
	Catalog              pulumi.BoolPtrInput
	ClusterId            pulumi.StringPtrInput
	Database             pulumi.StringPtrInput
	PrivilegeAssignments SqlPermissionsPrivilegeAssignmentArrayInput
	Table                pulumi.StringPtrInput
	View                 pulumi.StringPtrInput
}

func (SqlPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPermissionsState)(nil)).Elem()
}

type sqlPermissionsArgs struct {
	AnonymousFunction    *bool                               `pulumi:"anonymousFunction"`
	AnyFile              *bool                               `pulumi:"anyFile"`
	Catalog              *bool                               `pulumi:"catalog"`
	ClusterId            *string                             `pulumi:"clusterId"`
	Database             *string                             `pulumi:"database"`
	PrivilegeAssignments []SqlPermissionsPrivilegeAssignment `pulumi:"privilegeAssignments"`
	Table                *string                             `pulumi:"table"`
	View                 *string                             `pulumi:"view"`
}

// The set of arguments for constructing a SqlPermissions resource.
type SqlPermissionsArgs struct {
	AnonymousFunction    pulumi.BoolPtrInput
	AnyFile              pulumi.BoolPtrInput
	Catalog              pulumi.BoolPtrInput
	ClusterId            pulumi.StringPtrInput
	Database             pulumi.StringPtrInput
	PrivilegeAssignments SqlPermissionsPrivilegeAssignmentArrayInput
	Table                pulumi.StringPtrInput
	View                 pulumi.StringPtrInput
}

func (SqlPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPermissionsArgs)(nil)).Elem()
}

type SqlPermissionsInput interface {
	pulumi.Input

	ToSqlPermissionsOutput() SqlPermissionsOutput
	ToSqlPermissionsOutputWithContext(ctx context.Context) SqlPermissionsOutput
}

func (*SqlPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPermissions)(nil)).Elem()
}

func (i *SqlPermissions) ToSqlPermissionsOutput() SqlPermissionsOutput {
	return i.ToSqlPermissionsOutputWithContext(context.Background())
}

func (i *SqlPermissions) ToSqlPermissionsOutputWithContext(ctx context.Context) SqlPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPermissionsOutput)
}

// SqlPermissionsArrayInput is an input type that accepts SqlPermissionsArray and SqlPermissionsArrayOutput values.
// You can construct a concrete instance of `SqlPermissionsArrayInput` via:
//
//	SqlPermissionsArray{ SqlPermissionsArgs{...} }
type SqlPermissionsArrayInput interface {
	pulumi.Input

	ToSqlPermissionsArrayOutput() SqlPermissionsArrayOutput
	ToSqlPermissionsArrayOutputWithContext(context.Context) SqlPermissionsArrayOutput
}

type SqlPermissionsArray []SqlPermissionsInput

func (SqlPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPermissions)(nil)).Elem()
}

func (i SqlPermissionsArray) ToSqlPermissionsArrayOutput() SqlPermissionsArrayOutput {
	return i.ToSqlPermissionsArrayOutputWithContext(context.Background())
}

func (i SqlPermissionsArray) ToSqlPermissionsArrayOutputWithContext(ctx context.Context) SqlPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPermissionsArrayOutput)
}

// SqlPermissionsMapInput is an input type that accepts SqlPermissionsMap and SqlPermissionsMapOutput values.
// You can construct a concrete instance of `SqlPermissionsMapInput` via:
//
//	SqlPermissionsMap{ "key": SqlPermissionsArgs{...} }
type SqlPermissionsMapInput interface {
	pulumi.Input

	ToSqlPermissionsMapOutput() SqlPermissionsMapOutput
	ToSqlPermissionsMapOutputWithContext(context.Context) SqlPermissionsMapOutput
}

type SqlPermissionsMap map[string]SqlPermissionsInput

func (SqlPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPermissions)(nil)).Elem()
}

func (i SqlPermissionsMap) ToSqlPermissionsMapOutput() SqlPermissionsMapOutput {
	return i.ToSqlPermissionsMapOutputWithContext(context.Background())
}

func (i SqlPermissionsMap) ToSqlPermissionsMapOutputWithContext(ctx context.Context) SqlPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPermissionsMapOutput)
}

type SqlPermissionsOutput struct{ *pulumi.OutputState }

func (SqlPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPermissions)(nil)).Elem()
}

func (o SqlPermissionsOutput) ToSqlPermissionsOutput() SqlPermissionsOutput {
	return o
}

func (o SqlPermissionsOutput) ToSqlPermissionsOutputWithContext(ctx context.Context) SqlPermissionsOutput {
	return o
}

func (o SqlPermissionsOutput) AnonymousFunction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlPermissions) pulumi.BoolPtrOutput { return v.AnonymousFunction }).(pulumi.BoolPtrOutput)
}

func (o SqlPermissionsOutput) AnyFile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlPermissions) pulumi.BoolPtrOutput { return v.AnyFile }).(pulumi.BoolPtrOutput)
}

func (o SqlPermissionsOutput) Catalog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlPermissions) pulumi.BoolPtrOutput { return v.Catalog }).(pulumi.BoolPtrOutput)
}

func (o SqlPermissionsOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPermissions) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o SqlPermissionsOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPermissions) pulumi.StringPtrOutput { return v.Database }).(pulumi.StringPtrOutput)
}

func (o SqlPermissionsOutput) PrivilegeAssignments() SqlPermissionsPrivilegeAssignmentArrayOutput {
	return o.ApplyT(func(v *SqlPermissions) SqlPermissionsPrivilegeAssignmentArrayOutput { return v.PrivilegeAssignments }).(SqlPermissionsPrivilegeAssignmentArrayOutput)
}

func (o SqlPermissionsOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPermissions) pulumi.StringPtrOutput { return v.Table }).(pulumi.StringPtrOutput)
}

func (o SqlPermissionsOutput) View() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPermissions) pulumi.StringPtrOutput { return v.View }).(pulumi.StringPtrOutput)
}

type SqlPermissionsArrayOutput struct{ *pulumi.OutputState }

func (SqlPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPermissions)(nil)).Elem()
}

func (o SqlPermissionsArrayOutput) ToSqlPermissionsArrayOutput() SqlPermissionsArrayOutput {
	return o
}

func (o SqlPermissionsArrayOutput) ToSqlPermissionsArrayOutputWithContext(ctx context.Context) SqlPermissionsArrayOutput {
	return o
}

func (o SqlPermissionsArrayOutput) Index(i pulumi.IntInput) SqlPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlPermissions {
		return vs[0].([]*SqlPermissions)[vs[1].(int)]
	}).(SqlPermissionsOutput)
}

type SqlPermissionsMapOutput struct{ *pulumi.OutputState }

func (SqlPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPermissions)(nil)).Elem()
}

func (o SqlPermissionsMapOutput) ToSqlPermissionsMapOutput() SqlPermissionsMapOutput {
	return o
}

func (o SqlPermissionsMapOutput) ToSqlPermissionsMapOutputWithContext(ctx context.Context) SqlPermissionsMapOutput {
	return o
}

func (o SqlPermissionsMapOutput) MapIndex(k pulumi.StringInput) SqlPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlPermissions {
		return vs[0].(map[string]*SqlPermissions)[vs[1].(string)]
	}).(SqlPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPermissionsInput)(nil)).Elem(), &SqlPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPermissionsArrayInput)(nil)).Elem(), SqlPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPermissionsMapInput)(nil)).Elem(), SqlPermissionsMap{})
	pulumi.RegisterOutputType(SqlPermissionsOutput{})
	pulumi.RegisterOutputType(SqlPermissionsArrayOutput{})
	pulumi.RegisterOutputType(SqlPermissionsMapOutput{})
}
