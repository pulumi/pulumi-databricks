// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Catalog struct {
	pulumi.CustomResourceState

	Comment                      pulumi.StringPtrOutput `pulumi:"comment"`
	ConnectionName               pulumi.StringPtrOutput `pulumi:"connectionName"`
	EnablePredictiveOptimization pulumi.StringOutput    `pulumi:"enablePredictiveOptimization"`
	ForceDestroy                 pulumi.BoolPtrOutput   `pulumi:"forceDestroy"`
	IsolationMode                pulumi.StringOutput    `pulumi:"isolationMode"`
	MetastoreId                  pulumi.StringOutput    `pulumi:"metastoreId"`
	Name                         pulumi.StringOutput    `pulumi:"name"`
	Options                      pulumi.StringMapOutput `pulumi:"options"`
	Owner                        pulumi.StringOutput    `pulumi:"owner"`
	Properties                   pulumi.StringMapOutput `pulumi:"properties"`
	ProviderName                 pulumi.StringPtrOutput `pulumi:"providerName"`
	ShareName                    pulumi.StringPtrOutput `pulumi:"shareName"`
	StorageRoot                  pulumi.StringPtrOutput `pulumi:"storageRoot"`
}

// NewCatalog registers a new resource with the given unique name, arguments, and options.
func NewCatalog(ctx *pulumi.Context,
	name string, args *CatalogArgs, opts ...pulumi.ResourceOption) (*Catalog, error) {
	if args == nil {
		args = &CatalogArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Catalog
	err := ctx.RegisterResource("databricks:index/catalog:Catalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalog gets an existing Catalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogState, opts ...pulumi.ResourceOption) (*Catalog, error) {
	var resource Catalog
	err := ctx.ReadResource("databricks:index/catalog:Catalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Catalog resources.
type catalogState struct {
	Comment                      *string           `pulumi:"comment"`
	ConnectionName               *string           `pulumi:"connectionName"`
	EnablePredictiveOptimization *string           `pulumi:"enablePredictiveOptimization"`
	ForceDestroy                 *bool             `pulumi:"forceDestroy"`
	IsolationMode                *string           `pulumi:"isolationMode"`
	MetastoreId                  *string           `pulumi:"metastoreId"`
	Name                         *string           `pulumi:"name"`
	Options                      map[string]string `pulumi:"options"`
	Owner                        *string           `pulumi:"owner"`
	Properties                   map[string]string `pulumi:"properties"`
	ProviderName                 *string           `pulumi:"providerName"`
	ShareName                    *string           `pulumi:"shareName"`
	StorageRoot                  *string           `pulumi:"storageRoot"`
}

type CatalogState struct {
	Comment                      pulumi.StringPtrInput
	ConnectionName               pulumi.StringPtrInput
	EnablePredictiveOptimization pulumi.StringPtrInput
	ForceDestroy                 pulumi.BoolPtrInput
	IsolationMode                pulumi.StringPtrInput
	MetastoreId                  pulumi.StringPtrInput
	Name                         pulumi.StringPtrInput
	Options                      pulumi.StringMapInput
	Owner                        pulumi.StringPtrInput
	Properties                   pulumi.StringMapInput
	ProviderName                 pulumi.StringPtrInput
	ShareName                    pulumi.StringPtrInput
	StorageRoot                  pulumi.StringPtrInput
}

func (CatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogState)(nil)).Elem()
}

type catalogArgs struct {
	Comment                      *string           `pulumi:"comment"`
	ConnectionName               *string           `pulumi:"connectionName"`
	EnablePredictiveOptimization *string           `pulumi:"enablePredictiveOptimization"`
	ForceDestroy                 *bool             `pulumi:"forceDestroy"`
	IsolationMode                *string           `pulumi:"isolationMode"`
	MetastoreId                  *string           `pulumi:"metastoreId"`
	Name                         *string           `pulumi:"name"`
	Options                      map[string]string `pulumi:"options"`
	Owner                        *string           `pulumi:"owner"`
	Properties                   map[string]string `pulumi:"properties"`
	ProviderName                 *string           `pulumi:"providerName"`
	ShareName                    *string           `pulumi:"shareName"`
	StorageRoot                  *string           `pulumi:"storageRoot"`
}

// The set of arguments for constructing a Catalog resource.
type CatalogArgs struct {
	Comment                      pulumi.StringPtrInput
	ConnectionName               pulumi.StringPtrInput
	EnablePredictiveOptimization pulumi.StringPtrInput
	ForceDestroy                 pulumi.BoolPtrInput
	IsolationMode                pulumi.StringPtrInput
	MetastoreId                  pulumi.StringPtrInput
	Name                         pulumi.StringPtrInput
	Options                      pulumi.StringMapInput
	Owner                        pulumi.StringPtrInput
	Properties                   pulumi.StringMapInput
	ProviderName                 pulumi.StringPtrInput
	ShareName                    pulumi.StringPtrInput
	StorageRoot                  pulumi.StringPtrInput
}

func (CatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogArgs)(nil)).Elem()
}

type CatalogInput interface {
	pulumi.Input

	ToCatalogOutput() CatalogOutput
	ToCatalogOutputWithContext(ctx context.Context) CatalogOutput
}

func (*Catalog) ElementType() reflect.Type {
	return reflect.TypeOf((**Catalog)(nil)).Elem()
}

func (i *Catalog) ToCatalogOutput() CatalogOutput {
	return i.ToCatalogOutputWithContext(context.Background())
}

func (i *Catalog) ToCatalogOutputWithContext(ctx context.Context) CatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogOutput)
}

// CatalogArrayInput is an input type that accepts CatalogArray and CatalogArrayOutput values.
// You can construct a concrete instance of `CatalogArrayInput` via:
//
//	CatalogArray{ CatalogArgs{...} }
type CatalogArrayInput interface {
	pulumi.Input

	ToCatalogArrayOutput() CatalogArrayOutput
	ToCatalogArrayOutputWithContext(context.Context) CatalogArrayOutput
}

type CatalogArray []CatalogInput

func (CatalogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Catalog)(nil)).Elem()
}

func (i CatalogArray) ToCatalogArrayOutput() CatalogArrayOutput {
	return i.ToCatalogArrayOutputWithContext(context.Background())
}

func (i CatalogArray) ToCatalogArrayOutputWithContext(ctx context.Context) CatalogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogArrayOutput)
}

// CatalogMapInput is an input type that accepts CatalogMap and CatalogMapOutput values.
// You can construct a concrete instance of `CatalogMapInput` via:
//
//	CatalogMap{ "key": CatalogArgs{...} }
type CatalogMapInput interface {
	pulumi.Input

	ToCatalogMapOutput() CatalogMapOutput
	ToCatalogMapOutputWithContext(context.Context) CatalogMapOutput
}

type CatalogMap map[string]CatalogInput

func (CatalogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Catalog)(nil)).Elem()
}

func (i CatalogMap) ToCatalogMapOutput() CatalogMapOutput {
	return i.ToCatalogMapOutputWithContext(context.Background())
}

func (i CatalogMap) ToCatalogMapOutputWithContext(ctx context.Context) CatalogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogMapOutput)
}

type CatalogOutput struct{ *pulumi.OutputState }

func (CatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Catalog)(nil)).Elem()
}

func (o CatalogOutput) ToCatalogOutput() CatalogOutput {
	return o
}

func (o CatalogOutput) ToCatalogOutputWithContext(ctx context.Context) CatalogOutput {
	return o
}

func (o CatalogOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o CatalogOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringPtrOutput { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

func (o CatalogOutput) EnablePredictiveOptimization() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.EnablePredictiveOptimization }).(pulumi.StringOutput)
}

func (o CatalogOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Catalog) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

func (o CatalogOutput) IsolationMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.IsolationMode }).(pulumi.StringOutput)
}

func (o CatalogOutput) MetastoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.MetastoreId }).(pulumi.StringOutput)
}

func (o CatalogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CatalogOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringMapOutput { return v.Options }).(pulumi.StringMapOutput)
}

func (o CatalogOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o CatalogOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringMapOutput { return v.Properties }).(pulumi.StringMapOutput)
}

func (o CatalogOutput) ProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringPtrOutput { return v.ProviderName }).(pulumi.StringPtrOutput)
}

func (o CatalogOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringPtrOutput { return v.ShareName }).(pulumi.StringPtrOutput)
}

func (o CatalogOutput) StorageRoot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringPtrOutput { return v.StorageRoot }).(pulumi.StringPtrOutput)
}

type CatalogArrayOutput struct{ *pulumi.OutputState }

func (CatalogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Catalog)(nil)).Elem()
}

func (o CatalogArrayOutput) ToCatalogArrayOutput() CatalogArrayOutput {
	return o
}

func (o CatalogArrayOutput) ToCatalogArrayOutputWithContext(ctx context.Context) CatalogArrayOutput {
	return o
}

func (o CatalogArrayOutput) Index(i pulumi.IntInput) CatalogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Catalog {
		return vs[0].([]*Catalog)[vs[1].(int)]
	}).(CatalogOutput)
}

type CatalogMapOutput struct{ *pulumi.OutputState }

func (CatalogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Catalog)(nil)).Elem()
}

func (o CatalogMapOutput) ToCatalogMapOutput() CatalogMapOutput {
	return o
}

func (o CatalogMapOutput) ToCatalogMapOutputWithContext(ctx context.Context) CatalogMapOutput {
	return o
}

func (o CatalogMapOutput) MapIndex(k pulumi.StringInput) CatalogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Catalog {
		return vs[0].(map[string]*Catalog)[vs[1].(string)]
	}).(CatalogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogInput)(nil)).Elem(), &Catalog{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogArrayInput)(nil)).Elem(), CatalogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogMapInput)(nil)).Elem(), CatalogMap{})
	pulumi.RegisterOutputType(CatalogOutput{})
	pulumi.RegisterOutputType(CatalogArrayOutput{})
	pulumi.RegisterOutputType(CatalogMapOutput{})
}
