// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ModelServing struct {
	pulumi.CustomResourceState

	AiGateway         ModelServingAiGatewayPtrOutput   `pulumi:"aiGateway"`
	Config            ModelServingConfigOutput         `pulumi:"config"`
	Name              pulumi.StringOutput              `pulumi:"name"`
	RateLimits        ModelServingRateLimitArrayOutput `pulumi:"rateLimits"`
	RouteOptimized    pulumi.BoolPtrOutput             `pulumi:"routeOptimized"`
	ServingEndpointId pulumi.StringOutput              `pulumi:"servingEndpointId"`
	Tags              ModelServingTagArrayOutput       `pulumi:"tags"`
}

// NewModelServing registers a new resource with the given unique name, arguments, and options.
func NewModelServing(ctx *pulumi.Context,
	name string, args *ModelServingArgs, opts ...pulumi.ResourceOption) (*ModelServing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ModelServing
	err := ctx.RegisterResource("databricks:index/modelServing:ModelServing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModelServing gets an existing ModelServing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModelServing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelServingState, opts ...pulumi.ResourceOption) (*ModelServing, error) {
	var resource ModelServing
	err := ctx.ReadResource("databricks:index/modelServing:ModelServing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ModelServing resources.
type modelServingState struct {
	AiGateway         *ModelServingAiGateway  `pulumi:"aiGateway"`
	Config            *ModelServingConfig     `pulumi:"config"`
	Name              *string                 `pulumi:"name"`
	RateLimits        []ModelServingRateLimit `pulumi:"rateLimits"`
	RouteOptimized    *bool                   `pulumi:"routeOptimized"`
	ServingEndpointId *string                 `pulumi:"servingEndpointId"`
	Tags              []ModelServingTag       `pulumi:"tags"`
}

type ModelServingState struct {
	AiGateway         ModelServingAiGatewayPtrInput
	Config            ModelServingConfigPtrInput
	Name              pulumi.StringPtrInput
	RateLimits        ModelServingRateLimitArrayInput
	RouteOptimized    pulumi.BoolPtrInput
	ServingEndpointId pulumi.StringPtrInput
	Tags              ModelServingTagArrayInput
}

func (ModelServingState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelServingState)(nil)).Elem()
}

type modelServingArgs struct {
	AiGateway      *ModelServingAiGateway  `pulumi:"aiGateway"`
	Config         ModelServingConfig      `pulumi:"config"`
	Name           *string                 `pulumi:"name"`
	RateLimits     []ModelServingRateLimit `pulumi:"rateLimits"`
	RouteOptimized *bool                   `pulumi:"routeOptimized"`
	Tags           []ModelServingTag       `pulumi:"tags"`
}

// The set of arguments for constructing a ModelServing resource.
type ModelServingArgs struct {
	AiGateway      ModelServingAiGatewayPtrInput
	Config         ModelServingConfigInput
	Name           pulumi.StringPtrInput
	RateLimits     ModelServingRateLimitArrayInput
	RouteOptimized pulumi.BoolPtrInput
	Tags           ModelServingTagArrayInput
}

func (ModelServingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelServingArgs)(nil)).Elem()
}

type ModelServingInput interface {
	pulumi.Input

	ToModelServingOutput() ModelServingOutput
	ToModelServingOutputWithContext(ctx context.Context) ModelServingOutput
}

func (*ModelServing) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelServing)(nil)).Elem()
}

func (i *ModelServing) ToModelServingOutput() ModelServingOutput {
	return i.ToModelServingOutputWithContext(context.Background())
}

func (i *ModelServing) ToModelServingOutputWithContext(ctx context.Context) ModelServingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelServingOutput)
}

// ModelServingArrayInput is an input type that accepts ModelServingArray and ModelServingArrayOutput values.
// You can construct a concrete instance of `ModelServingArrayInput` via:
//
//	ModelServingArray{ ModelServingArgs{...} }
type ModelServingArrayInput interface {
	pulumi.Input

	ToModelServingArrayOutput() ModelServingArrayOutput
	ToModelServingArrayOutputWithContext(context.Context) ModelServingArrayOutput
}

type ModelServingArray []ModelServingInput

func (ModelServingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModelServing)(nil)).Elem()
}

func (i ModelServingArray) ToModelServingArrayOutput() ModelServingArrayOutput {
	return i.ToModelServingArrayOutputWithContext(context.Background())
}

func (i ModelServingArray) ToModelServingArrayOutputWithContext(ctx context.Context) ModelServingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelServingArrayOutput)
}

// ModelServingMapInput is an input type that accepts ModelServingMap and ModelServingMapOutput values.
// You can construct a concrete instance of `ModelServingMapInput` via:
//
//	ModelServingMap{ "key": ModelServingArgs{...} }
type ModelServingMapInput interface {
	pulumi.Input

	ToModelServingMapOutput() ModelServingMapOutput
	ToModelServingMapOutputWithContext(context.Context) ModelServingMapOutput
}

type ModelServingMap map[string]ModelServingInput

func (ModelServingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModelServing)(nil)).Elem()
}

func (i ModelServingMap) ToModelServingMapOutput() ModelServingMapOutput {
	return i.ToModelServingMapOutputWithContext(context.Background())
}

func (i ModelServingMap) ToModelServingMapOutputWithContext(ctx context.Context) ModelServingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelServingMapOutput)
}

type ModelServingOutput struct{ *pulumi.OutputState }

func (ModelServingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelServing)(nil)).Elem()
}

func (o ModelServingOutput) ToModelServingOutput() ModelServingOutput {
	return o
}

func (o ModelServingOutput) ToModelServingOutputWithContext(ctx context.Context) ModelServingOutput {
	return o
}

func (o ModelServingOutput) AiGateway() ModelServingAiGatewayPtrOutput {
	return o.ApplyT(func(v *ModelServing) ModelServingAiGatewayPtrOutput { return v.AiGateway }).(ModelServingAiGatewayPtrOutput)
}

func (o ModelServingOutput) Config() ModelServingConfigOutput {
	return o.ApplyT(func(v *ModelServing) ModelServingConfigOutput { return v.Config }).(ModelServingConfigOutput)
}

func (o ModelServingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelServing) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ModelServingOutput) RateLimits() ModelServingRateLimitArrayOutput {
	return o.ApplyT(func(v *ModelServing) ModelServingRateLimitArrayOutput { return v.RateLimits }).(ModelServingRateLimitArrayOutput)
}

func (o ModelServingOutput) RouteOptimized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ModelServing) pulumi.BoolPtrOutput { return v.RouteOptimized }).(pulumi.BoolPtrOutput)
}

func (o ModelServingOutput) ServingEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelServing) pulumi.StringOutput { return v.ServingEndpointId }).(pulumi.StringOutput)
}

func (o ModelServingOutput) Tags() ModelServingTagArrayOutput {
	return o.ApplyT(func(v *ModelServing) ModelServingTagArrayOutput { return v.Tags }).(ModelServingTagArrayOutput)
}

type ModelServingArrayOutput struct{ *pulumi.OutputState }

func (ModelServingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModelServing)(nil)).Elem()
}

func (o ModelServingArrayOutput) ToModelServingArrayOutput() ModelServingArrayOutput {
	return o
}

func (o ModelServingArrayOutput) ToModelServingArrayOutputWithContext(ctx context.Context) ModelServingArrayOutput {
	return o
}

func (o ModelServingArrayOutput) Index(i pulumi.IntInput) ModelServingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ModelServing {
		return vs[0].([]*ModelServing)[vs[1].(int)]
	}).(ModelServingOutput)
}

type ModelServingMapOutput struct{ *pulumi.OutputState }

func (ModelServingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModelServing)(nil)).Elem()
}

func (o ModelServingMapOutput) ToModelServingMapOutput() ModelServingMapOutput {
	return o
}

func (o ModelServingMapOutput) ToModelServingMapOutputWithContext(ctx context.Context) ModelServingMapOutput {
	return o
}

func (o ModelServingMapOutput) MapIndex(k pulumi.StringInput) ModelServingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ModelServing {
		return vs[0].(map[string]*ModelServing)[vs[1].(string)]
	}).(ModelServingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModelServingInput)(nil)).Elem(), &ModelServing{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelServingArrayInput)(nil)).Elem(), ModelServingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelServingMapInput)(nil)).Elem(), ModelServingMap{})
	pulumi.RegisterOutputType(ModelServingOutput{})
	pulumi.RegisterOutputType(ModelServingArrayOutput{})
	pulumi.RegisterOutputType(ModelServingMapOutput{})
}
