// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Pipeline struct {
	pulumi.CustomResourceState

	AllowDuplicateNames  pulumi.BoolPtrOutput                 `pulumi:"allowDuplicateNames"`
	BudgetPolicyId       pulumi.StringPtrOutput               `pulumi:"budgetPolicyId"`
	Catalog              pulumi.StringPtrOutput               `pulumi:"catalog"`
	Cause                pulumi.StringOutput                  `pulumi:"cause"`
	Channel              pulumi.StringPtrOutput               `pulumi:"channel"`
	ClusterId            pulumi.StringOutput                  `pulumi:"clusterId"`
	Clusters             PipelineClusterArrayOutput           `pulumi:"clusters"`
	Configuration        pulumi.StringMapOutput               `pulumi:"configuration"`
	Continuous           pulumi.BoolPtrOutput                 `pulumi:"continuous"`
	CreatorUserName      pulumi.StringOutput                  `pulumi:"creatorUserName"`
	Deployment           PipelineDeploymentPtrOutput          `pulumi:"deployment"`
	Development          pulumi.BoolPtrOutput                 `pulumi:"development"`
	Edition              pulumi.StringPtrOutput               `pulumi:"edition"`
	ExpectedLastModified pulumi.IntPtrOutput                  `pulumi:"expectedLastModified"`
	Filters              PipelineFiltersPtrOutput             `pulumi:"filters"`
	GatewayDefinition    PipelineGatewayDefinitionPtrOutput   `pulumi:"gatewayDefinition"`
	Health               pulumi.StringOutput                  `pulumi:"health"`
	IngestionDefinition  PipelineIngestionDefinitionPtrOutput `pulumi:"ingestionDefinition"`
	LastModified         pulumi.IntOutput                     `pulumi:"lastModified"`
	LatestUpdates        PipelineLatestUpdateArrayOutput      `pulumi:"latestUpdates"`
	Libraries            PipelineLibraryArrayOutput           `pulumi:"libraries"`
	Name                 pulumi.StringOutput                  `pulumi:"name"`
	Notifications        PipelineNotificationArrayOutput      `pulumi:"notifications"`
	Photon               pulumi.BoolPtrOutput                 `pulumi:"photon"`
	RestartWindow        PipelineRestartWindowPtrOutput       `pulumi:"restartWindow"`
	RunAsUserName        pulumi.StringOutput                  `pulumi:"runAsUserName"`
	Schema               pulumi.StringPtrOutput               `pulumi:"schema"`
	Serverless           pulumi.BoolPtrOutput                 `pulumi:"serverless"`
	State                pulumi.StringOutput                  `pulumi:"state"`
	Storage              pulumi.StringPtrOutput               `pulumi:"storage"`
	Target               pulumi.StringPtrOutput               `pulumi:"target"`
	Trigger              PipelineTriggerPtrOutput             `pulumi:"trigger"`
	Url                  pulumi.StringOutput                  `pulumi:"url"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		args = &PipelineArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pipeline
	err := ctx.RegisterResource("databricks:index/pipeline:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("databricks:index/pipeline:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
	AllowDuplicateNames  *bool                        `pulumi:"allowDuplicateNames"`
	BudgetPolicyId       *string                      `pulumi:"budgetPolicyId"`
	Catalog              *string                      `pulumi:"catalog"`
	Cause                *string                      `pulumi:"cause"`
	Channel              *string                      `pulumi:"channel"`
	ClusterId            *string                      `pulumi:"clusterId"`
	Clusters             []PipelineCluster            `pulumi:"clusters"`
	Configuration        map[string]string            `pulumi:"configuration"`
	Continuous           *bool                        `pulumi:"continuous"`
	CreatorUserName      *string                      `pulumi:"creatorUserName"`
	Deployment           *PipelineDeployment          `pulumi:"deployment"`
	Development          *bool                        `pulumi:"development"`
	Edition              *string                      `pulumi:"edition"`
	ExpectedLastModified *int                         `pulumi:"expectedLastModified"`
	Filters              *PipelineFilters             `pulumi:"filters"`
	GatewayDefinition    *PipelineGatewayDefinition   `pulumi:"gatewayDefinition"`
	Health               *string                      `pulumi:"health"`
	IngestionDefinition  *PipelineIngestionDefinition `pulumi:"ingestionDefinition"`
	LastModified         *int                         `pulumi:"lastModified"`
	LatestUpdates        []PipelineLatestUpdate       `pulumi:"latestUpdates"`
	Libraries            []PipelineLibrary            `pulumi:"libraries"`
	Name                 *string                      `pulumi:"name"`
	Notifications        []PipelineNotification       `pulumi:"notifications"`
	Photon               *bool                        `pulumi:"photon"`
	RestartWindow        *PipelineRestartWindow       `pulumi:"restartWindow"`
	RunAsUserName        *string                      `pulumi:"runAsUserName"`
	Schema               *string                      `pulumi:"schema"`
	Serverless           *bool                        `pulumi:"serverless"`
	State                *string                      `pulumi:"state"`
	Storage              *string                      `pulumi:"storage"`
	Target               *string                      `pulumi:"target"`
	Trigger              *PipelineTrigger             `pulumi:"trigger"`
	Url                  *string                      `pulumi:"url"`
}

type PipelineState struct {
	AllowDuplicateNames  pulumi.BoolPtrInput
	BudgetPolicyId       pulumi.StringPtrInput
	Catalog              pulumi.StringPtrInput
	Cause                pulumi.StringPtrInput
	Channel              pulumi.StringPtrInput
	ClusterId            pulumi.StringPtrInput
	Clusters             PipelineClusterArrayInput
	Configuration        pulumi.StringMapInput
	Continuous           pulumi.BoolPtrInput
	CreatorUserName      pulumi.StringPtrInput
	Deployment           PipelineDeploymentPtrInput
	Development          pulumi.BoolPtrInput
	Edition              pulumi.StringPtrInput
	ExpectedLastModified pulumi.IntPtrInput
	Filters              PipelineFiltersPtrInput
	GatewayDefinition    PipelineGatewayDefinitionPtrInput
	Health               pulumi.StringPtrInput
	IngestionDefinition  PipelineIngestionDefinitionPtrInput
	LastModified         pulumi.IntPtrInput
	LatestUpdates        PipelineLatestUpdateArrayInput
	Libraries            PipelineLibraryArrayInput
	Name                 pulumi.StringPtrInput
	Notifications        PipelineNotificationArrayInput
	Photon               pulumi.BoolPtrInput
	RestartWindow        PipelineRestartWindowPtrInput
	RunAsUserName        pulumi.StringPtrInput
	Schema               pulumi.StringPtrInput
	Serverless           pulumi.BoolPtrInput
	State                pulumi.StringPtrInput
	Storage              pulumi.StringPtrInput
	Target               pulumi.StringPtrInput
	Trigger              PipelineTriggerPtrInput
	Url                  pulumi.StringPtrInput
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	AllowDuplicateNames  *bool                        `pulumi:"allowDuplicateNames"`
	BudgetPolicyId       *string                      `pulumi:"budgetPolicyId"`
	Catalog              *string                      `pulumi:"catalog"`
	Cause                *string                      `pulumi:"cause"`
	Channel              *string                      `pulumi:"channel"`
	ClusterId            *string                      `pulumi:"clusterId"`
	Clusters             []PipelineCluster            `pulumi:"clusters"`
	Configuration        map[string]string            `pulumi:"configuration"`
	Continuous           *bool                        `pulumi:"continuous"`
	CreatorUserName      *string                      `pulumi:"creatorUserName"`
	Deployment           *PipelineDeployment          `pulumi:"deployment"`
	Development          *bool                        `pulumi:"development"`
	Edition              *string                      `pulumi:"edition"`
	ExpectedLastModified *int                         `pulumi:"expectedLastModified"`
	Filters              *PipelineFilters             `pulumi:"filters"`
	GatewayDefinition    *PipelineGatewayDefinition   `pulumi:"gatewayDefinition"`
	Health               *string                      `pulumi:"health"`
	IngestionDefinition  *PipelineIngestionDefinition `pulumi:"ingestionDefinition"`
	LastModified         *int                         `pulumi:"lastModified"`
	LatestUpdates        []PipelineLatestUpdate       `pulumi:"latestUpdates"`
	Libraries            []PipelineLibrary            `pulumi:"libraries"`
	Name                 *string                      `pulumi:"name"`
	Notifications        []PipelineNotification       `pulumi:"notifications"`
	Photon               *bool                        `pulumi:"photon"`
	RestartWindow        *PipelineRestartWindow       `pulumi:"restartWindow"`
	RunAsUserName        *string                      `pulumi:"runAsUserName"`
	Schema               *string                      `pulumi:"schema"`
	Serverless           *bool                        `pulumi:"serverless"`
	State                *string                      `pulumi:"state"`
	Storage              *string                      `pulumi:"storage"`
	Target               *string                      `pulumi:"target"`
	Trigger              *PipelineTrigger             `pulumi:"trigger"`
	Url                  *string                      `pulumi:"url"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	AllowDuplicateNames  pulumi.BoolPtrInput
	BudgetPolicyId       pulumi.StringPtrInput
	Catalog              pulumi.StringPtrInput
	Cause                pulumi.StringPtrInput
	Channel              pulumi.StringPtrInput
	ClusterId            pulumi.StringPtrInput
	Clusters             PipelineClusterArrayInput
	Configuration        pulumi.StringMapInput
	Continuous           pulumi.BoolPtrInput
	CreatorUserName      pulumi.StringPtrInput
	Deployment           PipelineDeploymentPtrInput
	Development          pulumi.BoolPtrInput
	Edition              pulumi.StringPtrInput
	ExpectedLastModified pulumi.IntPtrInput
	Filters              PipelineFiltersPtrInput
	GatewayDefinition    PipelineGatewayDefinitionPtrInput
	Health               pulumi.StringPtrInput
	IngestionDefinition  PipelineIngestionDefinitionPtrInput
	LastModified         pulumi.IntPtrInput
	LatestUpdates        PipelineLatestUpdateArrayInput
	Libraries            PipelineLibraryArrayInput
	Name                 pulumi.StringPtrInput
	Notifications        PipelineNotificationArrayInput
	Photon               pulumi.BoolPtrInput
	RestartWindow        PipelineRestartWindowPtrInput
	RunAsUserName        pulumi.StringPtrInput
	Schema               pulumi.StringPtrInput
	Serverless           pulumi.BoolPtrInput
	State                pulumi.StringPtrInput
	Storage              pulumi.StringPtrInput
	Target               pulumi.StringPtrInput
	Trigger              PipelineTriggerPtrInput
	Url                  pulumi.StringPtrInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

// PipelineArrayInput is an input type that accepts PipelineArray and PipelineArrayOutput values.
// You can construct a concrete instance of `PipelineArrayInput` via:
//
//	PipelineArray{ PipelineArgs{...} }
type PipelineArrayInput interface {
	pulumi.Input

	ToPipelineArrayOutput() PipelineArrayOutput
	ToPipelineArrayOutputWithContext(context.Context) PipelineArrayOutput
}

type PipelineArray []PipelineInput

func (PipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (i PipelineArray) ToPipelineArrayOutput() PipelineArrayOutput {
	return i.ToPipelineArrayOutputWithContext(context.Background())
}

func (i PipelineArray) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArrayOutput)
}

// PipelineMapInput is an input type that accepts PipelineMap and PipelineMapOutput values.
// You can construct a concrete instance of `PipelineMapInput` via:
//
//	PipelineMap{ "key": PipelineArgs{...} }
type PipelineMapInput interface {
	pulumi.Input

	ToPipelineMapOutput() PipelineMapOutput
	ToPipelineMapOutputWithContext(context.Context) PipelineMapOutput
}

type PipelineMap map[string]PipelineInput

func (PipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (i PipelineMap) ToPipelineMapOutput() PipelineMapOutput {
	return i.ToPipelineMapOutputWithContext(context.Background())
}

func (i PipelineMap) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineMapOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

func (o PipelineOutput) AllowDuplicateNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.BoolPtrOutput { return v.AllowDuplicateNames }).(pulumi.BoolPtrOutput)
}

func (o PipelineOutput) BudgetPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.BudgetPolicyId }).(pulumi.StringPtrOutput)
}

func (o PipelineOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.Catalog }).(pulumi.StringPtrOutput)
}

func (o PipelineOutput) Cause() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Cause }).(pulumi.StringOutput)
}

func (o PipelineOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.Channel }).(pulumi.StringPtrOutput)
}

func (o PipelineOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o PipelineOutput) Clusters() PipelineClusterArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineClusterArrayOutput { return v.Clusters }).(PipelineClusterArrayOutput)
}

func (o PipelineOutput) Configuration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringMapOutput { return v.Configuration }).(pulumi.StringMapOutput)
}

func (o PipelineOutput) Continuous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.BoolPtrOutput { return v.Continuous }).(pulumi.BoolPtrOutput)
}

func (o PipelineOutput) CreatorUserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.CreatorUserName }).(pulumi.StringOutput)
}

func (o PipelineOutput) Deployment() PipelineDeploymentPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineDeploymentPtrOutput { return v.Deployment }).(PipelineDeploymentPtrOutput)
}

func (o PipelineOutput) Development() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.BoolPtrOutput { return v.Development }).(pulumi.BoolPtrOutput)
}

func (o PipelineOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.Edition }).(pulumi.StringPtrOutput)
}

func (o PipelineOutput) ExpectedLastModified() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.IntPtrOutput { return v.ExpectedLastModified }).(pulumi.IntPtrOutput)
}

func (o PipelineOutput) Filters() PipelineFiltersPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineFiltersPtrOutput { return v.Filters }).(PipelineFiltersPtrOutput)
}

func (o PipelineOutput) GatewayDefinition() PipelineGatewayDefinitionPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineGatewayDefinitionPtrOutput { return v.GatewayDefinition }).(PipelineGatewayDefinitionPtrOutput)
}

func (o PipelineOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Health }).(pulumi.StringOutput)
}

func (o PipelineOutput) IngestionDefinition() PipelineIngestionDefinitionPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineIngestionDefinitionPtrOutput { return v.IngestionDefinition }).(PipelineIngestionDefinitionPtrOutput)
}

func (o PipelineOutput) LastModified() pulumi.IntOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.IntOutput { return v.LastModified }).(pulumi.IntOutput)
}

func (o PipelineOutput) LatestUpdates() PipelineLatestUpdateArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineLatestUpdateArrayOutput { return v.LatestUpdates }).(PipelineLatestUpdateArrayOutput)
}

func (o PipelineOutput) Libraries() PipelineLibraryArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineLibraryArrayOutput { return v.Libraries }).(PipelineLibraryArrayOutput)
}

func (o PipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PipelineOutput) Notifications() PipelineNotificationArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineNotificationArrayOutput { return v.Notifications }).(PipelineNotificationArrayOutput)
}

func (o PipelineOutput) Photon() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.BoolPtrOutput { return v.Photon }).(pulumi.BoolPtrOutput)
}

func (o PipelineOutput) RestartWindow() PipelineRestartWindowPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineRestartWindowPtrOutput { return v.RestartWindow }).(PipelineRestartWindowPtrOutput)
}

func (o PipelineOutput) RunAsUserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.RunAsUserName }).(pulumi.StringOutput)
}

func (o PipelineOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.Schema }).(pulumi.StringPtrOutput)
}

func (o PipelineOutput) Serverless() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.BoolPtrOutput { return v.Serverless }).(pulumi.BoolPtrOutput)
}

func (o PipelineOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o PipelineOutput) Storage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.Storage }).(pulumi.StringPtrOutput)
}

func (o PipelineOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.Target }).(pulumi.StringPtrOutput)
}

func (o PipelineOutput) Trigger() PipelineTriggerPtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineTriggerPtrOutput { return v.Trigger }).(PipelineTriggerPtrOutput)
}

func (o PipelineOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type PipelineArrayOutput struct{ *pulumi.OutputState }

func (PipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (o PipelineArrayOutput) ToPipelineArrayOutput() PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) Index(i pulumi.IntInput) PipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].([]*Pipeline)[vs[1].(int)]
	}).(PipelineOutput)
}

type PipelineMapOutput struct{ *pulumi.OutputState }

func (PipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (o PipelineMapOutput) ToPipelineMapOutput() PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) MapIndex(k pulumi.StringInput) PipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].(map[string]*Pipeline)[vs[1].(string)]
	}).(PipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineInput)(nil)).Elem(), &Pipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineArrayInput)(nil)).Elem(), PipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineMapInput)(nil)).Elem(), PipelineMap{})
	pulumi.RegisterOutputType(PipelineOutput{})
	pulumi.RegisterOutputType(PipelineArrayOutput{})
	pulumi.RegisterOutputType(PipelineMapOutput{})
}
