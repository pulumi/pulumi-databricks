// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to manage [Foundation Model provisioned throughput](https://docs.databricks.com/aws/en/machine-learning/foundation-model-apis/deploy-prov-throughput-foundation-model-apis) endpoints in Databricks.
//
// > This resource is currently in private preview, and only available for enrolled customers.
//
// > This resource can only be used with a workspace-level provider!
//
// ## Example Usage
//
// # Creating a Foundation Model provisioned throughput endpoint
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewModelServingProvisionedThroughput(ctx, "llama", &databricks.ModelServingProvisionedThroughputArgs{
//				AiGateway: &databricks.ModelServingProvisionedThroughputAiGatewayArgs{
//					UsageTrackingConfig: &databricks.ModelServingProvisionedThroughputAiGatewayUsageTrackingConfigArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//				Config: &databricks.ModelServingProvisionedThroughputConfigArgs{
//					ServedEntities: databricks.ModelServingProvisionedThroughputConfigServedEntityArray{
//						&databricks.ModelServingProvisionedThroughputConfigServedEntityArgs{
//							EntityName:            pulumi.String("system.ai.llama-4-maverick"),
//							EntityVersion:         pulumi.String("1"),
//							ProvisionedModelUnits: pulumi.Int(100),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Access Control
//
// * Permissions can control which groups or individual users can *Manage*, *Query* or *View* individual serving endpoints.
//
// ## Related Resources
//
// The following resources are often used in the same context:
//
// * ModelServing to create custom and external serving endpoints in Databricks.
// * RegisteredModel to create [Models in Unity Catalog](https://docs.databricks.com/en/mlflow/models-in-uc.html) in Databricks.
// * End to end workspace management guide.
// * Directory to manage directories in [Databricks Workspace](https://docs.databricks.com/workspace/workspace-objects.html).
// * MlflowModel to create models in the [workspace model registry](https://docs.databricks.com/en/mlflow/model-registry.html) in Databricks.
// * Notebook to manage [Databricks Notebooks](https://docs.databricks.com/notebooks/index.html).
// * Notebook data to export a notebook from Databricks Workspace.
// * Repo to manage [Databricks Repos](https://docs.databricks.com/repos.html).
//
// ## Import
//
// The model serving provisioned throughput resource can be imported using the name of the endpoint:
//
// hcl
//
// import {
//
//	to = databricks_model_serving_provisioned_throughput.this
//
//	id = "<model-serving-endpoint-name>"
//
// }
//
// ```sh
// $ pulumi import databricks:index/modelServingProvisionedThroughput:ModelServingProvisionedThroughput Alternatively, when using Pulumi version 1.4 or earlier, import using the command:
// ```
//
// bash
//
// ```sh
// $ pulumi import databricks:index/modelServingProvisionedThroughput:ModelServingProvisionedThroughput this <model-serving-endpoint-name>
// ```
type ModelServingProvisionedThroughput struct {
	pulumi.CustomResourceState

	// A block with AI Gateway configuration for the serving endpoint. *Note: only external model endpoints are supported as of now.*
	AiGateway ModelServingProvisionedThroughputAiGatewayPtrOutput `pulumi:"aiGateway"`
	// The Budget Policy ID set for this serving endpoint.
	BudgetPolicyId pulumi.StringPtrOutput `pulumi:"budgetPolicyId"`
	// The model serving endpoint configuration.
	Config ModelServingProvisionedThroughputConfigOutput `pulumi:"config"`
	// A block with Email notification setting.
	EmailNotifications ModelServingProvisionedThroughputEmailNotificationsPtrOutput `pulumi:"emailNotifications"`
	// The name of the model serving endpoint. This field is required and must be unique across a workspace. An endpoint name can consist of alphanumeric characters, dashes, and underscores. NOTE: Changing this name will delete the existing endpoint and create a new endpoint with the updated name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the serving endpoint primarily used to set permissions and refer to this instance for other operations.
	ServingEndpointId pulumi.StringOutput `pulumi:"servingEndpointId"`
	// Tags to be attached to the serving endpoint and automatically propagated to billing logs.
	Tags ModelServingProvisionedThroughputTagArrayOutput `pulumi:"tags"`
}

// NewModelServingProvisionedThroughput registers a new resource with the given unique name, arguments, and options.
func NewModelServingProvisionedThroughput(ctx *pulumi.Context,
	name string, args *ModelServingProvisionedThroughputArgs, opts ...pulumi.ResourceOption) (*ModelServingProvisionedThroughput, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ModelServingProvisionedThroughput
	err := ctx.RegisterResource("databricks:index/modelServingProvisionedThroughput:ModelServingProvisionedThroughput", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModelServingProvisionedThroughput gets an existing ModelServingProvisionedThroughput resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModelServingProvisionedThroughput(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelServingProvisionedThroughputState, opts ...pulumi.ResourceOption) (*ModelServingProvisionedThroughput, error) {
	var resource ModelServingProvisionedThroughput
	err := ctx.ReadResource("databricks:index/modelServingProvisionedThroughput:ModelServingProvisionedThroughput", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ModelServingProvisionedThroughput resources.
type modelServingProvisionedThroughputState struct {
	// A block with AI Gateway configuration for the serving endpoint. *Note: only external model endpoints are supported as of now.*
	AiGateway *ModelServingProvisionedThroughputAiGateway `pulumi:"aiGateway"`
	// The Budget Policy ID set for this serving endpoint.
	BudgetPolicyId *string `pulumi:"budgetPolicyId"`
	// The model serving endpoint configuration.
	Config *ModelServingProvisionedThroughputConfig `pulumi:"config"`
	// A block with Email notification setting.
	EmailNotifications *ModelServingProvisionedThroughputEmailNotifications `pulumi:"emailNotifications"`
	// The name of the model serving endpoint. This field is required and must be unique across a workspace. An endpoint name can consist of alphanumeric characters, dashes, and underscores. NOTE: Changing this name will delete the existing endpoint and create a new endpoint with the updated name.
	Name *string `pulumi:"name"`
	// Unique identifier of the serving endpoint primarily used to set permissions and refer to this instance for other operations.
	ServingEndpointId *string `pulumi:"servingEndpointId"`
	// Tags to be attached to the serving endpoint and automatically propagated to billing logs.
	Tags []ModelServingProvisionedThroughputTag `pulumi:"tags"`
}

type ModelServingProvisionedThroughputState struct {
	// A block with AI Gateway configuration for the serving endpoint. *Note: only external model endpoints are supported as of now.*
	AiGateway ModelServingProvisionedThroughputAiGatewayPtrInput
	// The Budget Policy ID set for this serving endpoint.
	BudgetPolicyId pulumi.StringPtrInput
	// The model serving endpoint configuration.
	Config ModelServingProvisionedThroughputConfigPtrInput
	// A block with Email notification setting.
	EmailNotifications ModelServingProvisionedThroughputEmailNotificationsPtrInput
	// The name of the model serving endpoint. This field is required and must be unique across a workspace. An endpoint name can consist of alphanumeric characters, dashes, and underscores. NOTE: Changing this name will delete the existing endpoint and create a new endpoint with the updated name.
	Name pulumi.StringPtrInput
	// Unique identifier of the serving endpoint primarily used to set permissions and refer to this instance for other operations.
	ServingEndpointId pulumi.StringPtrInput
	// Tags to be attached to the serving endpoint and automatically propagated to billing logs.
	Tags ModelServingProvisionedThroughputTagArrayInput
}

func (ModelServingProvisionedThroughputState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelServingProvisionedThroughputState)(nil)).Elem()
}

type modelServingProvisionedThroughputArgs struct {
	// A block with AI Gateway configuration for the serving endpoint. *Note: only external model endpoints are supported as of now.*
	AiGateway *ModelServingProvisionedThroughputAiGateway `pulumi:"aiGateway"`
	// The Budget Policy ID set for this serving endpoint.
	BudgetPolicyId *string `pulumi:"budgetPolicyId"`
	// The model serving endpoint configuration.
	Config ModelServingProvisionedThroughputConfig `pulumi:"config"`
	// A block with Email notification setting.
	EmailNotifications *ModelServingProvisionedThroughputEmailNotifications `pulumi:"emailNotifications"`
	// The name of the model serving endpoint. This field is required and must be unique across a workspace. An endpoint name can consist of alphanumeric characters, dashes, and underscores. NOTE: Changing this name will delete the existing endpoint and create a new endpoint with the updated name.
	Name *string `pulumi:"name"`
	// Tags to be attached to the serving endpoint and automatically propagated to billing logs.
	Tags []ModelServingProvisionedThroughputTag `pulumi:"tags"`
}

// The set of arguments for constructing a ModelServingProvisionedThroughput resource.
type ModelServingProvisionedThroughputArgs struct {
	// A block with AI Gateway configuration for the serving endpoint. *Note: only external model endpoints are supported as of now.*
	AiGateway ModelServingProvisionedThroughputAiGatewayPtrInput
	// The Budget Policy ID set for this serving endpoint.
	BudgetPolicyId pulumi.StringPtrInput
	// The model serving endpoint configuration.
	Config ModelServingProvisionedThroughputConfigInput
	// A block with Email notification setting.
	EmailNotifications ModelServingProvisionedThroughputEmailNotificationsPtrInput
	// The name of the model serving endpoint. This field is required and must be unique across a workspace. An endpoint name can consist of alphanumeric characters, dashes, and underscores. NOTE: Changing this name will delete the existing endpoint and create a new endpoint with the updated name.
	Name pulumi.StringPtrInput
	// Tags to be attached to the serving endpoint and automatically propagated to billing logs.
	Tags ModelServingProvisionedThroughputTagArrayInput
}

func (ModelServingProvisionedThroughputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelServingProvisionedThroughputArgs)(nil)).Elem()
}

type ModelServingProvisionedThroughputInput interface {
	pulumi.Input

	ToModelServingProvisionedThroughputOutput() ModelServingProvisionedThroughputOutput
	ToModelServingProvisionedThroughputOutputWithContext(ctx context.Context) ModelServingProvisionedThroughputOutput
}

func (*ModelServingProvisionedThroughput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelServingProvisionedThroughput)(nil)).Elem()
}

func (i *ModelServingProvisionedThroughput) ToModelServingProvisionedThroughputOutput() ModelServingProvisionedThroughputOutput {
	return i.ToModelServingProvisionedThroughputOutputWithContext(context.Background())
}

func (i *ModelServingProvisionedThroughput) ToModelServingProvisionedThroughputOutputWithContext(ctx context.Context) ModelServingProvisionedThroughputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelServingProvisionedThroughputOutput)
}

// ModelServingProvisionedThroughputArrayInput is an input type that accepts ModelServingProvisionedThroughputArray and ModelServingProvisionedThroughputArrayOutput values.
// You can construct a concrete instance of `ModelServingProvisionedThroughputArrayInput` via:
//
//	ModelServingProvisionedThroughputArray{ ModelServingProvisionedThroughputArgs{...} }
type ModelServingProvisionedThroughputArrayInput interface {
	pulumi.Input

	ToModelServingProvisionedThroughputArrayOutput() ModelServingProvisionedThroughputArrayOutput
	ToModelServingProvisionedThroughputArrayOutputWithContext(context.Context) ModelServingProvisionedThroughputArrayOutput
}

type ModelServingProvisionedThroughputArray []ModelServingProvisionedThroughputInput

func (ModelServingProvisionedThroughputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModelServingProvisionedThroughput)(nil)).Elem()
}

func (i ModelServingProvisionedThroughputArray) ToModelServingProvisionedThroughputArrayOutput() ModelServingProvisionedThroughputArrayOutput {
	return i.ToModelServingProvisionedThroughputArrayOutputWithContext(context.Background())
}

func (i ModelServingProvisionedThroughputArray) ToModelServingProvisionedThroughputArrayOutputWithContext(ctx context.Context) ModelServingProvisionedThroughputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelServingProvisionedThroughputArrayOutput)
}

// ModelServingProvisionedThroughputMapInput is an input type that accepts ModelServingProvisionedThroughputMap and ModelServingProvisionedThroughputMapOutput values.
// You can construct a concrete instance of `ModelServingProvisionedThroughputMapInput` via:
//
//	ModelServingProvisionedThroughputMap{ "key": ModelServingProvisionedThroughputArgs{...} }
type ModelServingProvisionedThroughputMapInput interface {
	pulumi.Input

	ToModelServingProvisionedThroughputMapOutput() ModelServingProvisionedThroughputMapOutput
	ToModelServingProvisionedThroughputMapOutputWithContext(context.Context) ModelServingProvisionedThroughputMapOutput
}

type ModelServingProvisionedThroughputMap map[string]ModelServingProvisionedThroughputInput

func (ModelServingProvisionedThroughputMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModelServingProvisionedThroughput)(nil)).Elem()
}

func (i ModelServingProvisionedThroughputMap) ToModelServingProvisionedThroughputMapOutput() ModelServingProvisionedThroughputMapOutput {
	return i.ToModelServingProvisionedThroughputMapOutputWithContext(context.Background())
}

func (i ModelServingProvisionedThroughputMap) ToModelServingProvisionedThroughputMapOutputWithContext(ctx context.Context) ModelServingProvisionedThroughputMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelServingProvisionedThroughputMapOutput)
}

type ModelServingProvisionedThroughputOutput struct{ *pulumi.OutputState }

func (ModelServingProvisionedThroughputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelServingProvisionedThroughput)(nil)).Elem()
}

func (o ModelServingProvisionedThroughputOutput) ToModelServingProvisionedThroughputOutput() ModelServingProvisionedThroughputOutput {
	return o
}

func (o ModelServingProvisionedThroughputOutput) ToModelServingProvisionedThroughputOutputWithContext(ctx context.Context) ModelServingProvisionedThroughputOutput {
	return o
}

// A block with AI Gateway configuration for the serving endpoint. *Note: only external model endpoints are supported as of now.*
func (o ModelServingProvisionedThroughputOutput) AiGateway() ModelServingProvisionedThroughputAiGatewayPtrOutput {
	return o.ApplyT(func(v *ModelServingProvisionedThroughput) ModelServingProvisionedThroughputAiGatewayPtrOutput {
		return v.AiGateway
	}).(ModelServingProvisionedThroughputAiGatewayPtrOutput)
}

// The Budget Policy ID set for this serving endpoint.
func (o ModelServingProvisionedThroughputOutput) BudgetPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelServingProvisionedThroughput) pulumi.StringPtrOutput { return v.BudgetPolicyId }).(pulumi.StringPtrOutput)
}

// The model serving endpoint configuration.
func (o ModelServingProvisionedThroughputOutput) Config() ModelServingProvisionedThroughputConfigOutput {
	return o.ApplyT(func(v *ModelServingProvisionedThroughput) ModelServingProvisionedThroughputConfigOutput {
		return v.Config
	}).(ModelServingProvisionedThroughputConfigOutput)
}

// A block with Email notification setting.
func (o ModelServingProvisionedThroughputOutput) EmailNotifications() ModelServingProvisionedThroughputEmailNotificationsPtrOutput {
	return o.ApplyT(func(v *ModelServingProvisionedThroughput) ModelServingProvisionedThroughputEmailNotificationsPtrOutput {
		return v.EmailNotifications
	}).(ModelServingProvisionedThroughputEmailNotificationsPtrOutput)
}

// The name of the model serving endpoint. This field is required and must be unique across a workspace. An endpoint name can consist of alphanumeric characters, dashes, and underscores. NOTE: Changing this name will delete the existing endpoint and create a new endpoint with the updated name.
func (o ModelServingProvisionedThroughputOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelServingProvisionedThroughput) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the serving endpoint primarily used to set permissions and refer to this instance for other operations.
func (o ModelServingProvisionedThroughputOutput) ServingEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelServingProvisionedThroughput) pulumi.StringOutput { return v.ServingEndpointId }).(pulumi.StringOutput)
}

// Tags to be attached to the serving endpoint and automatically propagated to billing logs.
func (o ModelServingProvisionedThroughputOutput) Tags() ModelServingProvisionedThroughputTagArrayOutput {
	return o.ApplyT(func(v *ModelServingProvisionedThroughput) ModelServingProvisionedThroughputTagArrayOutput {
		return v.Tags
	}).(ModelServingProvisionedThroughputTagArrayOutput)
}

type ModelServingProvisionedThroughputArrayOutput struct{ *pulumi.OutputState }

func (ModelServingProvisionedThroughputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModelServingProvisionedThroughput)(nil)).Elem()
}

func (o ModelServingProvisionedThroughputArrayOutput) ToModelServingProvisionedThroughputArrayOutput() ModelServingProvisionedThroughputArrayOutput {
	return o
}

func (o ModelServingProvisionedThroughputArrayOutput) ToModelServingProvisionedThroughputArrayOutputWithContext(ctx context.Context) ModelServingProvisionedThroughputArrayOutput {
	return o
}

func (o ModelServingProvisionedThroughputArrayOutput) Index(i pulumi.IntInput) ModelServingProvisionedThroughputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ModelServingProvisionedThroughput {
		return vs[0].([]*ModelServingProvisionedThroughput)[vs[1].(int)]
	}).(ModelServingProvisionedThroughputOutput)
}

type ModelServingProvisionedThroughputMapOutput struct{ *pulumi.OutputState }

func (ModelServingProvisionedThroughputMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModelServingProvisionedThroughput)(nil)).Elem()
}

func (o ModelServingProvisionedThroughputMapOutput) ToModelServingProvisionedThroughputMapOutput() ModelServingProvisionedThroughputMapOutput {
	return o
}

func (o ModelServingProvisionedThroughputMapOutput) ToModelServingProvisionedThroughputMapOutputWithContext(ctx context.Context) ModelServingProvisionedThroughputMapOutput {
	return o
}

func (o ModelServingProvisionedThroughputMapOutput) MapIndex(k pulumi.StringInput) ModelServingProvisionedThroughputOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ModelServingProvisionedThroughput {
		return vs[0].(map[string]*ModelServingProvisionedThroughput)[vs[1].(string)]
	}).(ModelServingProvisionedThroughputOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModelServingProvisionedThroughputInput)(nil)).Elem(), &ModelServingProvisionedThroughput{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelServingProvisionedThroughputArrayInput)(nil)).Elem(), ModelServingProvisionedThroughputArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelServingProvisionedThroughputMapInput)(nil)).Elem(), ModelServingProvisionedThroughputMap{})
	pulumi.RegisterOutputType(ModelServingProvisionedThroughputOutput{})
	pulumi.RegisterOutputType(ModelServingProvisionedThroughputArrayOutput{})
	pulumi.RegisterOutputType(ModelServingProvisionedThroughputMapOutput{})
}
