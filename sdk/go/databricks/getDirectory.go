// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source allows to get information about a directory in a Databricks Workspace.
//
// > This data source can only be used with a workspace-level provider!
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.LookupDirectory(ctx, &databricks.LookupDirectoryArgs{
//				Path: "/Production",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDirectory(ctx *pulumi.Context, args *LookupDirectoryArgs, opts ...pulumi.InvokeOption) (*LookupDirectoryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDirectoryResult
	err := ctx.Invoke("databricks:index/getDirectory:getDirectory", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDirectory.
type LookupDirectoryArgs struct {
	Id *string `pulumi:"id"`
	// directory object ID
	ObjectId *int `pulumi:"objectId"`
	// Path to a directory in the workspace
	Path string `pulumi:"path"`
	// path on Workspace File System (WSFS) in form of `/Workspace` + `path`
	WorkspacePath *string `pulumi:"workspacePath"`
}

// A collection of values returned by getDirectory.
type LookupDirectoryResult struct {
	Id string `pulumi:"id"`
	// directory object ID
	ObjectId int    `pulumi:"objectId"`
	Path     string `pulumi:"path"`
	// path on Workspace File System (WSFS) in form of `/Workspace` + `path`
	WorkspacePath string `pulumi:"workspacePath"`
}

func LookupDirectoryOutput(ctx *pulumi.Context, args LookupDirectoryOutputArgs, opts ...pulumi.InvokeOption) LookupDirectoryResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDirectoryResultOutput, error) {
			args := v.(LookupDirectoryArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("databricks:index/getDirectory:getDirectory", args, LookupDirectoryResultOutput{}, options).(LookupDirectoryResultOutput), nil
		}).(LookupDirectoryResultOutput)
}

// A collection of arguments for invoking getDirectory.
type LookupDirectoryOutputArgs struct {
	Id pulumi.StringPtrInput `pulumi:"id"`
	// directory object ID
	ObjectId pulumi.IntPtrInput `pulumi:"objectId"`
	// Path to a directory in the workspace
	Path pulumi.StringInput `pulumi:"path"`
	// path on Workspace File System (WSFS) in form of `/Workspace` + `path`
	WorkspacePath pulumi.StringPtrInput `pulumi:"workspacePath"`
}

func (LookupDirectoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDirectoryArgs)(nil)).Elem()
}

// A collection of values returned by getDirectory.
type LookupDirectoryResultOutput struct{ *pulumi.OutputState }

func (LookupDirectoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDirectoryResult)(nil)).Elem()
}

func (o LookupDirectoryResultOutput) ToLookupDirectoryResultOutput() LookupDirectoryResultOutput {
	return o
}

func (o LookupDirectoryResultOutput) ToLookupDirectoryResultOutputWithContext(ctx context.Context) LookupDirectoryResultOutput {
	return o
}

func (o LookupDirectoryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDirectoryResult) string { return v.Id }).(pulumi.StringOutput)
}

// directory object ID
func (o LookupDirectoryResultOutput) ObjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDirectoryResult) int { return v.ObjectId }).(pulumi.IntOutput)
}

func (o LookupDirectoryResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDirectoryResult) string { return v.Path }).(pulumi.StringOutput)
}

// path on Workspace File System (WSFS) in form of `/Workspace` + `path`
func (o LookupDirectoryResultOutput) WorkspacePath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDirectoryResult) string { return v.WorkspacePath }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDirectoryResultOutput{})
}
