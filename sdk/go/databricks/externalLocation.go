// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// To work with external tables, Unity Catalog introduces two new objects to access and work with external cloud storage:
//
// - StorageCredential represent authentication methods to access cloud storage (e.g. an IAM role for Amazon S3 or a service principal for Azure Storage). Storage credentials are access-controlled to determine which users can use the credential.
// - `ExternalLocation` are objects that combine a cloud storage path with a Storage Credential that can be used to access the location.
//
// > This resource can only be used with a workspace-level provider!
//
// ## Example Usage
//
// # For AWS
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			external, err := databricks.NewStorageCredential(ctx, "external", &databricks.StorageCredentialArgs{
//				Name: pulumi.Any(externalDataAccess.Name),
//				AwsIamRole: &databricks.StorageCredentialAwsIamRoleArgs{
//					RoleArn: pulumi.Any(externalDataAccess.Arn),
//				},
//				Comment: pulumi.String("Managed by TF"),
//			})
//			if err != nil {
//				return err
//			}
//			some, err := databricks.NewExternalLocation(ctx, "some", &databricks.ExternalLocationArgs{
//				Name:           pulumi.String("external"),
//				Url:            pulumi.Sprintf("s3://%v/some", externalAwsS3Bucket.Id),
//				CredentialName: external.ID(),
//				Comment:        pulumi.String("Managed by TF"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrants(ctx, "some", &databricks.GrantsArgs{
//				ExternalLocation: some.ID(),
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Engineers"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("CREATE_EXTERNAL_TABLE"),
//							pulumi.String("READ_FILES"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// # For Azure
//
// ## Import
//
// This resource can be imported by `name`:
//
// hcl
//
// import {
//
//	to = databricks_external_location.this
//
//	id = "<name>"
//
// }
//
// Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
//
// bash
//
// ```sh
// $ pulumi import databricks:index/externalLocation:ExternalLocation this <name>
// ```
type ExternalLocation struct {
	pulumi.CustomResourceState

	BrowseOnly pulumi.BoolOutput `pulumi:"browseOnly"`
	// User-supplied free-form text.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Time at which this external location was created, in epoch milliseconds.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Username of external location creator.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Unique ID of the location's storage credential.
	CredentialId pulumi.StringOutput `pulumi:"credentialId"`
	// Name of the StorageCredential to use with this external location.
	CredentialName pulumi.StringOutput `pulumi:"credentialName"`
	// indicates if managed file events are enabled for this external location.  Requires `fileEventQueue` block.
	EnableFileEvents pulumi.BoolPtrOutput `pulumi:"enableFileEvents"`
	// The options for Server-Side Encryption to be used by each Databricks s3 client when connecting to S3 cloud storage (AWS).
	EncryptionDetails ExternalLocationEncryptionDetailsPtrOutput `pulumi:"encryptionDetails"`
	// Indicates whether fallback mode is enabled for this external location. When fallback mode is enabled (disabled by default), the access to the location falls back to cluster credentials if UC credentials are not sufficient.
	Fallback       pulumi.BoolPtrOutput                    `pulumi:"fallback"`
	FileEventQueue ExternalLocationFileEventQueuePtrOutput `pulumi:"fileEventQueue"`
	// Destroy external location regardless of its dependents.
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	// Update external location regardless of its dependents.
	ForceUpdate pulumi.BoolPtrOutput `pulumi:"forceUpdate"`
	// Whether the external location is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the external location to `ISOLATION_MODE_ISOLATED` will automatically allow access from the current workspace.
	IsolationMode pulumi.StringOutput `pulumi:"isolationMode"`
	MetastoreId   pulumi.StringOutput `pulumi:"metastoreId"`
	// Name of External Location, which must be unique within the databricks_metastore. Change forces creation of a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Username/groupname/sp applicationId of the external location owner.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Indicates whether the external location is read-only.
	ReadOnly pulumi.BoolPtrOutput `pulumi:"readOnly"`
	// Suppress validation errors if any & force save the external location
	SkipValidation pulumi.BoolPtrOutput `pulumi:"skipValidation"`
	// Time at which external location this was last modified, in epoch milliseconds.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
	// Username of user who last modified the external location.
	UpdatedBy pulumi.StringOutput `pulumi:"updatedBy"`
	// Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewExternalLocation registers a new resource with the given unique name, arguments, and options.
func NewExternalLocation(ctx *pulumi.Context,
	name string, args *ExternalLocationArgs, opts ...pulumi.ResourceOption) (*ExternalLocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CredentialName == nil {
		return nil, errors.New("invalid value for required argument 'CredentialName'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExternalLocation
	err := ctx.RegisterResource("databricks:index/externalLocation:ExternalLocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExternalLocation gets an existing ExternalLocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExternalLocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExternalLocationState, opts ...pulumi.ResourceOption) (*ExternalLocation, error) {
	var resource ExternalLocation
	err := ctx.ReadResource("databricks:index/externalLocation:ExternalLocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExternalLocation resources.
type externalLocationState struct {
	BrowseOnly *bool `pulumi:"browseOnly"`
	// User-supplied free-form text.
	Comment *string `pulumi:"comment"`
	// Time at which this external location was created, in epoch milliseconds.
	CreatedAt *int `pulumi:"createdAt"`
	// Username of external location creator.
	CreatedBy *string `pulumi:"createdBy"`
	// Unique ID of the location's storage credential.
	CredentialId *string `pulumi:"credentialId"`
	// Name of the StorageCredential to use with this external location.
	CredentialName *string `pulumi:"credentialName"`
	// indicates if managed file events are enabled for this external location.  Requires `fileEventQueue` block.
	EnableFileEvents *bool `pulumi:"enableFileEvents"`
	// The options for Server-Side Encryption to be used by each Databricks s3 client when connecting to S3 cloud storage (AWS).
	EncryptionDetails *ExternalLocationEncryptionDetails `pulumi:"encryptionDetails"`
	// Indicates whether fallback mode is enabled for this external location. When fallback mode is enabled (disabled by default), the access to the location falls back to cluster credentials if UC credentials are not sufficient.
	Fallback       *bool                           `pulumi:"fallback"`
	FileEventQueue *ExternalLocationFileEventQueue `pulumi:"fileEventQueue"`
	// Destroy external location regardless of its dependents.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Update external location regardless of its dependents.
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Whether the external location is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the external location to `ISOLATION_MODE_ISOLATED` will automatically allow access from the current workspace.
	IsolationMode *string `pulumi:"isolationMode"`
	MetastoreId   *string `pulumi:"metastoreId"`
	// Name of External Location, which must be unique within the databricks_metastore. Change forces creation of a new resource.
	Name *string `pulumi:"name"`
	// Username/groupname/sp applicationId of the external location owner.
	Owner *string `pulumi:"owner"`
	// Indicates whether the external location is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// Suppress validation errors if any & force save the external location
	SkipValidation *bool `pulumi:"skipValidation"`
	// Time at which external location this was last modified, in epoch milliseconds.
	UpdatedAt *int `pulumi:"updatedAt"`
	// Username of user who last modified the external location.
	UpdatedBy *string `pulumi:"updatedBy"`
	// Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
	Url *string `pulumi:"url"`
}

type ExternalLocationState struct {
	BrowseOnly pulumi.BoolPtrInput
	// User-supplied free-form text.
	Comment pulumi.StringPtrInput
	// Time at which this external location was created, in epoch milliseconds.
	CreatedAt pulumi.IntPtrInput
	// Username of external location creator.
	CreatedBy pulumi.StringPtrInput
	// Unique ID of the location's storage credential.
	CredentialId pulumi.StringPtrInput
	// Name of the StorageCredential to use with this external location.
	CredentialName pulumi.StringPtrInput
	// indicates if managed file events are enabled for this external location.  Requires `fileEventQueue` block.
	EnableFileEvents pulumi.BoolPtrInput
	// The options for Server-Side Encryption to be used by each Databricks s3 client when connecting to S3 cloud storage (AWS).
	EncryptionDetails ExternalLocationEncryptionDetailsPtrInput
	// Indicates whether fallback mode is enabled for this external location. When fallback mode is enabled (disabled by default), the access to the location falls back to cluster credentials if UC credentials are not sufficient.
	Fallback       pulumi.BoolPtrInput
	FileEventQueue ExternalLocationFileEventQueuePtrInput
	// Destroy external location regardless of its dependents.
	ForceDestroy pulumi.BoolPtrInput
	// Update external location regardless of its dependents.
	ForceUpdate pulumi.BoolPtrInput
	// Whether the external location is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the external location to `ISOLATION_MODE_ISOLATED` will automatically allow access from the current workspace.
	IsolationMode pulumi.StringPtrInput
	MetastoreId   pulumi.StringPtrInput
	// Name of External Location, which must be unique within the databricks_metastore. Change forces creation of a new resource.
	Name pulumi.StringPtrInput
	// Username/groupname/sp applicationId of the external location owner.
	Owner pulumi.StringPtrInput
	// Indicates whether the external location is read-only.
	ReadOnly pulumi.BoolPtrInput
	// Suppress validation errors if any & force save the external location
	SkipValidation pulumi.BoolPtrInput
	// Time at which external location this was last modified, in epoch milliseconds.
	UpdatedAt pulumi.IntPtrInput
	// Username of user who last modified the external location.
	UpdatedBy pulumi.StringPtrInput
	// Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
	Url pulumi.StringPtrInput
}

func (ExternalLocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*externalLocationState)(nil)).Elem()
}

type externalLocationArgs struct {
	// User-supplied free-form text.
	Comment *string `pulumi:"comment"`
	// Name of the StorageCredential to use with this external location.
	CredentialName string `pulumi:"credentialName"`
	// indicates if managed file events are enabled for this external location.  Requires `fileEventQueue` block.
	EnableFileEvents *bool `pulumi:"enableFileEvents"`
	// The options for Server-Side Encryption to be used by each Databricks s3 client when connecting to S3 cloud storage (AWS).
	EncryptionDetails *ExternalLocationEncryptionDetails `pulumi:"encryptionDetails"`
	// Indicates whether fallback mode is enabled for this external location. When fallback mode is enabled (disabled by default), the access to the location falls back to cluster credentials if UC credentials are not sufficient.
	Fallback       *bool                           `pulumi:"fallback"`
	FileEventQueue *ExternalLocationFileEventQueue `pulumi:"fileEventQueue"`
	// Destroy external location regardless of its dependents.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Update external location regardless of its dependents.
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Whether the external location is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the external location to `ISOLATION_MODE_ISOLATED` will automatically allow access from the current workspace.
	IsolationMode *string `pulumi:"isolationMode"`
	MetastoreId   *string `pulumi:"metastoreId"`
	// Name of External Location, which must be unique within the databricks_metastore. Change forces creation of a new resource.
	Name *string `pulumi:"name"`
	// Username/groupname/sp applicationId of the external location owner.
	Owner *string `pulumi:"owner"`
	// Indicates whether the external location is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// Suppress validation errors if any & force save the external location
	SkipValidation *bool `pulumi:"skipValidation"`
	// Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a ExternalLocation resource.
type ExternalLocationArgs struct {
	// User-supplied free-form text.
	Comment pulumi.StringPtrInput
	// Name of the StorageCredential to use with this external location.
	CredentialName pulumi.StringInput
	// indicates if managed file events are enabled for this external location.  Requires `fileEventQueue` block.
	EnableFileEvents pulumi.BoolPtrInput
	// The options for Server-Side Encryption to be used by each Databricks s3 client when connecting to S3 cloud storage (AWS).
	EncryptionDetails ExternalLocationEncryptionDetailsPtrInput
	// Indicates whether fallback mode is enabled for this external location. When fallback mode is enabled (disabled by default), the access to the location falls back to cluster credentials if UC credentials are not sufficient.
	Fallback       pulumi.BoolPtrInput
	FileEventQueue ExternalLocationFileEventQueuePtrInput
	// Destroy external location regardless of its dependents.
	ForceDestroy pulumi.BoolPtrInput
	// Update external location regardless of its dependents.
	ForceUpdate pulumi.BoolPtrInput
	// Whether the external location is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the external location to `ISOLATION_MODE_ISOLATED` will automatically allow access from the current workspace.
	IsolationMode pulumi.StringPtrInput
	MetastoreId   pulumi.StringPtrInput
	// Name of External Location, which must be unique within the databricks_metastore. Change forces creation of a new resource.
	Name pulumi.StringPtrInput
	// Username/groupname/sp applicationId of the external location owner.
	Owner pulumi.StringPtrInput
	// Indicates whether the external location is read-only.
	ReadOnly pulumi.BoolPtrInput
	// Suppress validation errors if any & force save the external location
	SkipValidation pulumi.BoolPtrInput
	// Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
	Url pulumi.StringInput
}

func (ExternalLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*externalLocationArgs)(nil)).Elem()
}

type ExternalLocationInput interface {
	pulumi.Input

	ToExternalLocationOutput() ExternalLocationOutput
	ToExternalLocationOutputWithContext(ctx context.Context) ExternalLocationOutput
}

func (*ExternalLocation) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalLocation)(nil)).Elem()
}

func (i *ExternalLocation) ToExternalLocationOutput() ExternalLocationOutput {
	return i.ToExternalLocationOutputWithContext(context.Background())
}

func (i *ExternalLocation) ToExternalLocationOutputWithContext(ctx context.Context) ExternalLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalLocationOutput)
}

// ExternalLocationArrayInput is an input type that accepts ExternalLocationArray and ExternalLocationArrayOutput values.
// You can construct a concrete instance of `ExternalLocationArrayInput` via:
//
//	ExternalLocationArray{ ExternalLocationArgs{...} }
type ExternalLocationArrayInput interface {
	pulumi.Input

	ToExternalLocationArrayOutput() ExternalLocationArrayOutput
	ToExternalLocationArrayOutputWithContext(context.Context) ExternalLocationArrayOutput
}

type ExternalLocationArray []ExternalLocationInput

func (ExternalLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalLocation)(nil)).Elem()
}

func (i ExternalLocationArray) ToExternalLocationArrayOutput() ExternalLocationArrayOutput {
	return i.ToExternalLocationArrayOutputWithContext(context.Background())
}

func (i ExternalLocationArray) ToExternalLocationArrayOutputWithContext(ctx context.Context) ExternalLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalLocationArrayOutput)
}

// ExternalLocationMapInput is an input type that accepts ExternalLocationMap and ExternalLocationMapOutput values.
// You can construct a concrete instance of `ExternalLocationMapInput` via:
//
//	ExternalLocationMap{ "key": ExternalLocationArgs{...} }
type ExternalLocationMapInput interface {
	pulumi.Input

	ToExternalLocationMapOutput() ExternalLocationMapOutput
	ToExternalLocationMapOutputWithContext(context.Context) ExternalLocationMapOutput
}

type ExternalLocationMap map[string]ExternalLocationInput

func (ExternalLocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalLocation)(nil)).Elem()
}

func (i ExternalLocationMap) ToExternalLocationMapOutput() ExternalLocationMapOutput {
	return i.ToExternalLocationMapOutputWithContext(context.Background())
}

func (i ExternalLocationMap) ToExternalLocationMapOutputWithContext(ctx context.Context) ExternalLocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalLocationMapOutput)
}

type ExternalLocationOutput struct{ *pulumi.OutputState }

func (ExternalLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalLocation)(nil)).Elem()
}

func (o ExternalLocationOutput) ToExternalLocationOutput() ExternalLocationOutput {
	return o
}

func (o ExternalLocationOutput) ToExternalLocationOutputWithContext(ctx context.Context) ExternalLocationOutput {
	return o
}

func (o ExternalLocationOutput) BrowseOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.BoolOutput { return v.BrowseOnly }).(pulumi.BoolOutput)
}

// User-supplied free-form text.
func (o ExternalLocationOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Time at which this external location was created, in epoch milliseconds.
func (o ExternalLocationOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Username of external location creator.
func (o ExternalLocationOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Unique ID of the location's storage credential.
func (o ExternalLocationOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.StringOutput { return v.CredentialId }).(pulumi.StringOutput)
}

// Name of the StorageCredential to use with this external location.
func (o ExternalLocationOutput) CredentialName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.StringOutput { return v.CredentialName }).(pulumi.StringOutput)
}

// indicates if managed file events are enabled for this external location.  Requires `fileEventQueue` block.
func (o ExternalLocationOutput) EnableFileEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.BoolPtrOutput { return v.EnableFileEvents }).(pulumi.BoolPtrOutput)
}

// The options for Server-Side Encryption to be used by each Databricks s3 client when connecting to S3 cloud storage (AWS).
func (o ExternalLocationOutput) EncryptionDetails() ExternalLocationEncryptionDetailsPtrOutput {
	return o.ApplyT(func(v *ExternalLocation) ExternalLocationEncryptionDetailsPtrOutput { return v.EncryptionDetails }).(ExternalLocationEncryptionDetailsPtrOutput)
}

// Indicates whether fallback mode is enabled for this external location. When fallback mode is enabled (disabled by default), the access to the location falls back to cluster credentials if UC credentials are not sufficient.
func (o ExternalLocationOutput) Fallback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.BoolPtrOutput { return v.Fallback }).(pulumi.BoolPtrOutput)
}

func (o ExternalLocationOutput) FileEventQueue() ExternalLocationFileEventQueuePtrOutput {
	return o.ApplyT(func(v *ExternalLocation) ExternalLocationFileEventQueuePtrOutput { return v.FileEventQueue }).(ExternalLocationFileEventQueuePtrOutput)
}

// Destroy external location regardless of its dependents.
func (o ExternalLocationOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// Update external location regardless of its dependents.
func (o ExternalLocationOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.BoolPtrOutput { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Whether the external location is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the external location to `ISOLATION_MODE_ISOLATED` will automatically allow access from the current workspace.
func (o ExternalLocationOutput) IsolationMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.StringOutput { return v.IsolationMode }).(pulumi.StringOutput)
}

func (o ExternalLocationOutput) MetastoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.StringOutput { return v.MetastoreId }).(pulumi.StringOutput)
}

// Name of External Location, which must be unique within the databricks_metastore. Change forces creation of a new resource.
func (o ExternalLocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Username/groupname/sp applicationId of the external location owner.
func (o ExternalLocationOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Indicates whether the external location is read-only.
func (o ExternalLocationOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.BoolPtrOutput { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Suppress validation errors if any & force save the external location
func (o ExternalLocationOutput) SkipValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.BoolPtrOutput { return v.SkipValidation }).(pulumi.BoolPtrOutput)
}

// Time at which external location this was last modified, in epoch milliseconds.
func (o ExternalLocationOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

// Username of user who last modified the external location.
func (o ExternalLocationOutput) UpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.StringOutput { return v.UpdatedBy }).(pulumi.StringOutput)
}

// Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
func (o ExternalLocationOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalLocation) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type ExternalLocationArrayOutput struct{ *pulumi.OutputState }

func (ExternalLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalLocation)(nil)).Elem()
}

func (o ExternalLocationArrayOutput) ToExternalLocationArrayOutput() ExternalLocationArrayOutput {
	return o
}

func (o ExternalLocationArrayOutput) ToExternalLocationArrayOutputWithContext(ctx context.Context) ExternalLocationArrayOutput {
	return o
}

func (o ExternalLocationArrayOutput) Index(i pulumi.IntInput) ExternalLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExternalLocation {
		return vs[0].([]*ExternalLocation)[vs[1].(int)]
	}).(ExternalLocationOutput)
}

type ExternalLocationMapOutput struct{ *pulumi.OutputState }

func (ExternalLocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalLocation)(nil)).Elem()
}

func (o ExternalLocationMapOutput) ToExternalLocationMapOutput() ExternalLocationMapOutput {
	return o
}

func (o ExternalLocationMapOutput) ToExternalLocationMapOutputWithContext(ctx context.Context) ExternalLocationMapOutput {
	return o
}

func (o ExternalLocationMapOutput) MapIndex(k pulumi.StringInput) ExternalLocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExternalLocation {
		return vs[0].(map[string]*ExternalLocation)[vs[1].(string)]
	}).(ExternalLocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalLocationInput)(nil)).Elem(), &ExternalLocation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalLocationArrayInput)(nil)).Elem(), ExternalLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalLocationMapInput)(nil)).Elem(), ExternalLocationMap{})
	pulumi.RegisterOutputType(ExternalLocationOutput{})
	pulumi.RegisterOutputType(ExternalLocationArrayOutput{})
	pulumi.RegisterOutputType(ExternalLocationMapOutput{})
}
