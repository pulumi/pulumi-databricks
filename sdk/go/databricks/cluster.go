// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to manage [Databricks Clusters](https://docs.databricks.com/clusters/index.html).
//
// > **Note** In case of `Cannot access cluster ####-######-####### that was terminated or unpinned more than 30 days ago` command.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			smallest, err := databricks.GetNodeType(ctx, &databricks.GetNodeTypeArgs{
//				LocalDisk: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			latestLts, err := databricks.GetSparkVersion(ctx, &databricks.GetSparkVersionArgs{
//				LongTermSupport: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewCluster(ctx, "sharedAutoscaling", &databricks.ClusterArgs{
//				ClusterName:            pulumi.String("Shared Autoscaling"),
//				SparkVersion:           *pulumi.String(latestLts.Id),
//				NodeTypeId:             *pulumi.String(smallest.Id),
//				AutoterminationMinutes: pulumi.Int(20),
//				Autoscale: &databricks.ClusterAutoscaleArgs{
//					MinWorkers: pulumi.Int(1),
//					MaxWorkers: pulumi.Int(50),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Access Control
//
// * Group and User can control which groups or individual users can create clusters.
// * ClusterPolicy can control which kinds of clusters users can create.
// * Users, who have access to Cluster Policy, but do not have an `allowClusterCreate` argument set would still be able to create clusters, but within the boundary of the policy.
// * Permissions can control which groups or individual users can *Manage*, *Restart* or *Attach to* individual clusters.
// * `instanceProfileArn` *(AWS only)* can control which data a given cluster can access through cloud-native controls.
//
// ## Related Resources
//
// The following resources are often used in the same context:
//
// * Dynamic Passthrough Clusters for a Group guide.
// * End to end workspace management guide.
// * getClusters data to retrieve a list of Cluster ids.
// * ClusterPolicy to create a Cluster policy, which limits the ability to create clusters based on a set of rules.
// * getCurrentUser data to retrieve information about User or databricks_service_principal, that is calling Databricks REST API.
// * GlobalInitScript to manage [global init scripts](https://docs.databricks.com/clusters/init-scripts.html#global-init-scripts), which are run on all Cluster and databricks_job.
// * InstancePool to manage [instance pools](https://docs.databricks.com/clusters/instance-pools/index.html) to reduce cluster start and auto-scaling times by maintaining a set of idle, ready-to-use instances.
// * InstanceProfile to manage AWS EC2 instance profiles that users can launch Cluster and access data, like databricks_mount.
// * Job to manage [Databricks Jobs](https://docs.databricks.com/jobs.html) to run non-interactive code in a databricks_cluster.
// * Library to install a [library](https://docs.databricks.com/libraries/index.html) on databricks_cluster.
// * Mount to [mount your cloud storage](https://docs.databricks.com/data/databricks-file-system.html#mount-object-storage-to-dbfs) on `dbfs:/mnt/name`.
// * getNodeType data to get the smallest node type for Cluster that fits search criteria, like amount of RAM or number of cores.
// * Pipeline to deploy [Delta Live Tables](https://docs.databricks.com/data-engineering/delta-live-tables/index.html).
// * getSparkVersion data to get [Databricks Runtime (DBR)](https://docs.databricks.com/runtime/dbr.html) version that could be used for `sparkVersion` parameter in Cluster and other resources.
// * getZones data to fetch all available AWS availability zones on your workspace on AWS.
//
// ## Import
//
// The resource cluster can be imported using cluster id.
//
//	bash
//
// ```sh
// $ pulumi import databricks:index/cluster:Cluster this <cluster-id>
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// Whether to use policy default values for missing cluster attributes.
	ApplyPolicyDefaultValues pulumi.BoolPtrOutput      `pulumi:"applyPolicyDefaultValues"`
	Autoscale                ClusterAutoscalePtrOutput `pulumi:"autoscale"`
	// Automatically terminate the cluster after being inactive for this time in minutes. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination. Defaults to `60`.  *We highly recommend having this setting present for Interactive/BI clusters.*
	AutoterminationMinutes pulumi.IntPtrOutput                `pulumi:"autoterminationMinutes"`
	AwsAttributes          ClusterAwsAttributesPtrOutput      `pulumi:"awsAttributes"`
	AzureAttributes        ClusterAzureAttributesPtrOutput    `pulumi:"azureAttributes"`
	ClusterId              pulumi.StringOutput                `pulumi:"clusterId"`
	ClusterLogConf         ClusterClusterLogConfPtrOutput     `pulumi:"clusterLogConf"`
	ClusterMountInfos      ClusterClusterMountInfoArrayOutput `pulumi:"clusterMountInfos"`
	// Cluster name, which doesn’t have to be unique. If not specified at creation, the cluster name will be an empty string.
	ClusterName   pulumi.StringPtrOutput `pulumi:"clusterName"`
	ClusterSource pulumi.StringOutput    `pulumi:"clusterSource"`
	// should have tag `ResourceClass` set to value `Serverless`
	//
	// For example:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := databricks.NewCluster(ctx, "clusterWithTableAccessControl", &databricks.ClusterArgs{
	// 			ClusterName:            pulumi.String("Shared High-Concurrency"),
	// 			SparkVersion:           pulumi.Any(data.Databricks_spark_version.Latest_lts.Id),
	// 			NodeTypeId:             pulumi.Any(data.Databricks_node_type.Smallest.Id),
	// 			AutoterminationMinutes: pulumi.Int(20),
	// 			SparkConf: pulumi.Map{
	// 				"spark.databricks.repl.allowedLanguages": pulumi.Any("python,sql"),
	// 				"spark.databricks.cluster.profile":       pulumi.Any("serverless"),
	// 			},
	// 			CustomTags: pulumi.Map{
	// 				"ResourceClass": pulumi.Any("Serverless"),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	CustomTags pulumi.MapOutput `pulumi:"customTags"`
	// Select the security features of the cluster. [Unity Catalog requires](https://docs.databricks.com/data-governance/unity-catalog/compute.html#create-clusters--sql-warehouses-with-unity-catalog-access) `SINGLE_USER` or `USER_ISOLATION` mode. `LEGACY_PASSTHROUGH` for passthrough cluster and `LEGACY_TABLE_ACL` for Table ACL cluster. If omitted, no security features are enabled. In the Databricks UI, this has been recently been renamed *Access Mode* and `USER_ISOLATION` has been renamed *Shared*, but use these terms here.
	DataSecurityMode pulumi.StringPtrOutput `pulumi:"dataSecurityMode"`
	// (map) Tags that are added by Databricks by default, regardless of any `customTags` that may have been added. These include: Vendor: Databricks, Creator: <username_of_creator>, ClusterName: <name_of_cluster>, ClusterId: <id_of_cluster>, Name: <Databricks internal use>, and any workspace and pool tags.
	DefaultTags pulumi.MapOutput            `pulumi:"defaultTags"`
	DockerImage ClusterDockerImagePtrOutput `pulumi:"dockerImage"`
	// similar to `instancePoolId`, but for driver node. If omitted, and `instancePoolId` is specified, then the driver will be allocated from that pool.
	DriverInstancePoolId pulumi.StringOutput `pulumi:"driverInstancePoolId"`
	// The node type of the Spark driver. This field is optional; if unset, API will set the driver node type to the same value as `nodeTypeId` defined above.
	DriverNodeTypeId pulumi.StringOutput `pulumi:"driverNodeTypeId"`
	// If you don’t want to allocate a fixed number of EBS volumes at cluster creation time, use autoscaling local storage. With autoscaling local storage, Databricks monitors the amount of free disk space available on your cluster’s Spark workers. If a worker begins to run too low on disk, Databricks automatically attaches a new EBS volume to the worker before it runs out of disk space. EBS volumes are attached up to a limit of 5 TB of total disk space per instance (including the instance’s local storage). To scale down EBS usage, make sure you have `autoterminationMinutes` and `autoscale` attributes set. More documentation available at [cluster configuration page](https://docs.databricks.com/clusters/configure.html#autoscaling-local-storage-1).
	EnableElasticDisk pulumi.BoolOutput `pulumi:"enableElasticDisk"`
	// Some instance types you use to run clusters may have locally attached disks. Databricks may store shuffle data or temporary data on these locally attached disks. To ensure that all data at rest is encrypted for all storage types, including shuffle data stored temporarily on your cluster’s local disks, you can enable local disk encryption. When local disk encryption is enabled, Databricks generates an encryption key locally unique to each cluster node and uses it to encrypt all data stored on local disks. The scope of the key is local to each cluster node and is destroyed along with the cluster node itself. During its lifetime, the key resides in memory for encryption and decryption and is stored encrypted on the disk. *Your workloads may run more slowly because of the performance impact of reading and writing encrypted data to and from local volumes. This feature is not available for all Azure Databricks subscriptions. Contact your Microsoft or Databricks account representative to request access.*
	EnableLocalDiskEncryption pulumi.BoolOutput             `pulumi:"enableLocalDiskEncryption"`
	GcpAttributes             ClusterGcpAttributesPtrOutput `pulumi:"gcpAttributes"`
	// An optional token to guarantee the idempotency of cluster creation requests. If an active cluster with the provided token already exists, the request will not create a new cluster, but it will return the existing running cluster's ID instead. If you specify the idempotency token, upon failure, you can retry until the request succeeds. Databricks platform guarantees to launch exactly one cluster with that idempotency token. This token should have at most 64 characters.
	IdempotencyToken pulumi.StringPtrOutput       `pulumi:"idempotencyToken"`
	InitScripts      ClusterInitScriptArrayOutput `pulumi:"initScripts"`
	// To reduce cluster start time, you can attach a cluster to a predefined pool of idle instances. When attached to a pool, a cluster allocates its driver and worker nodes from the pool. If the pool does not have sufficient idle resources to accommodate the cluster’s request, it expands by allocating new instances from the instance provider. When an attached cluster changes its state to `TERMINATED`, the instances it used are returned to the pool and reused by a different cluster.
	InstancePoolId pulumi.StringPtrOutput `pulumi:"instancePoolId"`
	// boolean value specifying if the cluster is pinned (not pinned by default). You must be a Databricks administrator to use this.  The pinned clusters' maximum number is [limited to 100](https://docs.databricks.com/clusters/clusters-manage.html#pin-a-cluster), so `apply` may fail if you have more than that (this number may change over time, so check Databricks documentation for actual number).
	//
	// The following example demonstrates how to create an autoscaling cluster with [Delta Cache](https://docs.databricks.com/delta/optimizations/delta-cache.html) enabled:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		smallest, err := databricks.GetNodeType(ctx, &databricks.GetNodeTypeArgs{
	// 			LocalDisk: pulumi.BoolRef(true),
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		latestLts, err := databricks.GetSparkVersion(ctx, &databricks.GetSparkVersionArgs{
	// 			LongTermSupport: pulumi.BoolRef(true),
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		_, err = databricks.NewCluster(ctx, "sharedAutoscaling", &databricks.ClusterArgs{
	// 			ClusterName:            pulumi.String("Shared Autoscaling"),
	// 			SparkVersion:           *pulumi.String(latestLts.Id),
	// 			NodeTypeId:             *pulumi.String(smallest.Id),
	// 			AutoterminationMinutes: pulumi.Int(20),
	// 			Autoscale: &databricks.ClusterAutoscaleArgs{
	// 				MinWorkers: pulumi.Int(1),
	// 				MaxWorkers: pulumi.Int(50),
	// 			},
	// 			SparkConf: pulumi.Map{
	// 				"spark.databricks.io.cache.enabled":          pulumi.Any(true),
	// 				"spark.databricks.io.cache.maxDiskUsage":     pulumi.Any("50g"),
	// 				"spark.databricks.io.cache.maxMetaDataCache": pulumi.Any("1g"),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	IsPinned  pulumi.BoolPtrOutput      `pulumi:"isPinned"`
	Libraries ClusterLibraryArrayOutput `pulumi:"libraries"`
	// Any supported getNodeType id. If `instancePoolId` is specified, this field is not needed.
	NodeTypeId pulumi.StringOutput `pulumi:"nodeTypeId"`
	// Number of worker nodes that this cluster should have. A cluster has one Spark driver and `numWorkers` executors for a total of `numWorkers` + 1 Spark nodes.
	NumWorkers pulumi.IntPtrOutput    `pulumi:"numWorkers"`
	PolicyId   pulumi.StringPtrOutput `pulumi:"policyId"`
	// The type of runtime engine to use. If not specified, the runtime engine type is inferred based on the sparkVersion value. Allowed values include: `PHOTON`, `STANDARD`.
	RuntimeEngine pulumi.StringPtrOutput `pulumi:"runtimeEngine"`
	// The optional user name of the user to assign to an interactive cluster. This field is required when using `dataSecurityMode` set to `SINGLE_USER` or AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
	SingleUserName pulumi.StringPtrOutput `pulumi:"singleUserName"`
	// should have following items:
	// * `spark.databricks.repl.allowedLanguages` set to a list of supported languages, for example: `python,sql`, or `python,sql,r`.  Scala is not supported!
	// * `spark.databricks.cluster.profile` set to `serverless`
	SparkConf pulumi.MapOutput `pulumi:"sparkConf"`
	// Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
	SparkEnvVars pulumi.MapOutput `pulumi:"sparkEnvVars"`
	// [Runtime version](https://docs.databricks.com/runtime/index.html) of the cluster. Any supported getSparkVersion id.  We advise using Cluster Policies to restrict the list of versions for simplicity while maintaining enough control.
	SparkVersion pulumi.StringOutput `pulumi:"sparkVersion"`
	// SSH public key contents that will be added to each Spark node in this cluster. The corresponding private keys can be used to login with the user name ubuntu on port 2200. You can specify up to 10 keys.
	SshPublicKeys pulumi.StringArrayOutput `pulumi:"sshPublicKeys"`
	// (string) State of the cluster.
	State pulumi.StringOutput `pulumi:"state"`
	// URL for the Docker image
	Url          pulumi.StringOutput          `pulumi:"url"`
	WorkloadType ClusterWorkloadTypePtrOutput `pulumi:"workloadType"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SparkVersion == nil {
		return nil, errors.New("invalid value for required argument 'SparkVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("databricks:index/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("databricks:index/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Whether to use policy default values for missing cluster attributes.
	ApplyPolicyDefaultValues *bool             `pulumi:"applyPolicyDefaultValues"`
	Autoscale                *ClusterAutoscale `pulumi:"autoscale"`
	// Automatically terminate the cluster after being inactive for this time in minutes. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination. Defaults to `60`.  *We highly recommend having this setting present for Interactive/BI clusters.*
	AutoterminationMinutes *int                      `pulumi:"autoterminationMinutes"`
	AwsAttributes          *ClusterAwsAttributes     `pulumi:"awsAttributes"`
	AzureAttributes        *ClusterAzureAttributes   `pulumi:"azureAttributes"`
	ClusterId              *string                   `pulumi:"clusterId"`
	ClusterLogConf         *ClusterClusterLogConf    `pulumi:"clusterLogConf"`
	ClusterMountInfos      []ClusterClusterMountInfo `pulumi:"clusterMountInfos"`
	// Cluster name, which doesn’t have to be unique. If not specified at creation, the cluster name will be an empty string.
	ClusterName   *string `pulumi:"clusterName"`
	ClusterSource *string `pulumi:"clusterSource"`
	// should have tag `ResourceClass` set to value `Serverless`
	//
	// For example:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := databricks.NewCluster(ctx, "clusterWithTableAccessControl", &databricks.ClusterArgs{
	// 			ClusterName:            pulumi.String("Shared High-Concurrency"),
	// 			SparkVersion:           pulumi.Any(data.Databricks_spark_version.Latest_lts.Id),
	// 			NodeTypeId:             pulumi.Any(data.Databricks_node_type.Smallest.Id),
	// 			AutoterminationMinutes: pulumi.Int(20),
	// 			SparkConf: pulumi.Map{
	// 				"spark.databricks.repl.allowedLanguages": pulumi.Any("python,sql"),
	// 				"spark.databricks.cluster.profile":       pulumi.Any("serverless"),
	// 			},
	// 			CustomTags: pulumi.Map{
	// 				"ResourceClass": pulumi.Any("Serverless"),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	CustomTags map[string]interface{} `pulumi:"customTags"`
	// Select the security features of the cluster. [Unity Catalog requires](https://docs.databricks.com/data-governance/unity-catalog/compute.html#create-clusters--sql-warehouses-with-unity-catalog-access) `SINGLE_USER` or `USER_ISOLATION` mode. `LEGACY_PASSTHROUGH` for passthrough cluster and `LEGACY_TABLE_ACL` for Table ACL cluster. If omitted, no security features are enabled. In the Databricks UI, this has been recently been renamed *Access Mode* and `USER_ISOLATION` has been renamed *Shared*, but use these terms here.
	DataSecurityMode *string `pulumi:"dataSecurityMode"`
	// (map) Tags that are added by Databricks by default, regardless of any `customTags` that may have been added. These include: Vendor: Databricks, Creator: <username_of_creator>, ClusterName: <name_of_cluster>, ClusterId: <id_of_cluster>, Name: <Databricks internal use>, and any workspace and pool tags.
	DefaultTags map[string]interface{} `pulumi:"defaultTags"`
	DockerImage *ClusterDockerImage    `pulumi:"dockerImage"`
	// similar to `instancePoolId`, but for driver node. If omitted, and `instancePoolId` is specified, then the driver will be allocated from that pool.
	DriverInstancePoolId *string `pulumi:"driverInstancePoolId"`
	// The node type of the Spark driver. This field is optional; if unset, API will set the driver node type to the same value as `nodeTypeId` defined above.
	DriverNodeTypeId *string `pulumi:"driverNodeTypeId"`
	// If you don’t want to allocate a fixed number of EBS volumes at cluster creation time, use autoscaling local storage. With autoscaling local storage, Databricks monitors the amount of free disk space available on your cluster’s Spark workers. If a worker begins to run too low on disk, Databricks automatically attaches a new EBS volume to the worker before it runs out of disk space. EBS volumes are attached up to a limit of 5 TB of total disk space per instance (including the instance’s local storage). To scale down EBS usage, make sure you have `autoterminationMinutes` and `autoscale` attributes set. More documentation available at [cluster configuration page](https://docs.databricks.com/clusters/configure.html#autoscaling-local-storage-1).
	EnableElasticDisk *bool `pulumi:"enableElasticDisk"`
	// Some instance types you use to run clusters may have locally attached disks. Databricks may store shuffle data or temporary data on these locally attached disks. To ensure that all data at rest is encrypted for all storage types, including shuffle data stored temporarily on your cluster’s local disks, you can enable local disk encryption. When local disk encryption is enabled, Databricks generates an encryption key locally unique to each cluster node and uses it to encrypt all data stored on local disks. The scope of the key is local to each cluster node and is destroyed along with the cluster node itself. During its lifetime, the key resides in memory for encryption and decryption and is stored encrypted on the disk. *Your workloads may run more slowly because of the performance impact of reading and writing encrypted data to and from local volumes. This feature is not available for all Azure Databricks subscriptions. Contact your Microsoft or Databricks account representative to request access.*
	EnableLocalDiskEncryption *bool                 `pulumi:"enableLocalDiskEncryption"`
	GcpAttributes             *ClusterGcpAttributes `pulumi:"gcpAttributes"`
	// An optional token to guarantee the idempotency of cluster creation requests. If an active cluster with the provided token already exists, the request will not create a new cluster, but it will return the existing running cluster's ID instead. If you specify the idempotency token, upon failure, you can retry until the request succeeds. Databricks platform guarantees to launch exactly one cluster with that idempotency token. This token should have at most 64 characters.
	IdempotencyToken *string             `pulumi:"idempotencyToken"`
	InitScripts      []ClusterInitScript `pulumi:"initScripts"`
	// To reduce cluster start time, you can attach a cluster to a predefined pool of idle instances. When attached to a pool, a cluster allocates its driver and worker nodes from the pool. If the pool does not have sufficient idle resources to accommodate the cluster’s request, it expands by allocating new instances from the instance provider. When an attached cluster changes its state to `TERMINATED`, the instances it used are returned to the pool and reused by a different cluster.
	InstancePoolId *string `pulumi:"instancePoolId"`
	// boolean value specifying if the cluster is pinned (not pinned by default). You must be a Databricks administrator to use this.  The pinned clusters' maximum number is [limited to 100](https://docs.databricks.com/clusters/clusters-manage.html#pin-a-cluster), so `apply` may fail if you have more than that (this number may change over time, so check Databricks documentation for actual number).
	//
	// The following example demonstrates how to create an autoscaling cluster with [Delta Cache](https://docs.databricks.com/delta/optimizations/delta-cache.html) enabled:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		smallest, err := databricks.GetNodeType(ctx, &databricks.GetNodeTypeArgs{
	// 			LocalDisk: pulumi.BoolRef(true),
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		latestLts, err := databricks.GetSparkVersion(ctx, &databricks.GetSparkVersionArgs{
	// 			LongTermSupport: pulumi.BoolRef(true),
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		_, err = databricks.NewCluster(ctx, "sharedAutoscaling", &databricks.ClusterArgs{
	// 			ClusterName:            pulumi.String("Shared Autoscaling"),
	// 			SparkVersion:           *pulumi.String(latestLts.Id),
	// 			NodeTypeId:             *pulumi.String(smallest.Id),
	// 			AutoterminationMinutes: pulumi.Int(20),
	// 			Autoscale: &databricks.ClusterAutoscaleArgs{
	// 				MinWorkers: pulumi.Int(1),
	// 				MaxWorkers: pulumi.Int(50),
	// 			},
	// 			SparkConf: pulumi.Map{
	// 				"spark.databricks.io.cache.enabled":          pulumi.Any(true),
	// 				"spark.databricks.io.cache.maxDiskUsage":     pulumi.Any("50g"),
	// 				"spark.databricks.io.cache.maxMetaDataCache": pulumi.Any("1g"),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	IsPinned  *bool            `pulumi:"isPinned"`
	Libraries []ClusterLibrary `pulumi:"libraries"`
	// Any supported getNodeType id. If `instancePoolId` is specified, this field is not needed.
	NodeTypeId *string `pulumi:"nodeTypeId"`
	// Number of worker nodes that this cluster should have. A cluster has one Spark driver and `numWorkers` executors for a total of `numWorkers` + 1 Spark nodes.
	NumWorkers *int    `pulumi:"numWorkers"`
	PolicyId   *string `pulumi:"policyId"`
	// The type of runtime engine to use. If not specified, the runtime engine type is inferred based on the sparkVersion value. Allowed values include: `PHOTON`, `STANDARD`.
	RuntimeEngine *string `pulumi:"runtimeEngine"`
	// The optional user name of the user to assign to an interactive cluster. This field is required when using `dataSecurityMode` set to `SINGLE_USER` or AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
	SingleUserName *string `pulumi:"singleUserName"`
	// should have following items:
	// * `spark.databricks.repl.allowedLanguages` set to a list of supported languages, for example: `python,sql`, or `python,sql,r`.  Scala is not supported!
	// * `spark.databricks.cluster.profile` set to `serverless`
	SparkConf map[string]interface{} `pulumi:"sparkConf"`
	// Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
	SparkEnvVars map[string]interface{} `pulumi:"sparkEnvVars"`
	// [Runtime version](https://docs.databricks.com/runtime/index.html) of the cluster. Any supported getSparkVersion id.  We advise using Cluster Policies to restrict the list of versions for simplicity while maintaining enough control.
	SparkVersion *string `pulumi:"sparkVersion"`
	// SSH public key contents that will be added to each Spark node in this cluster. The corresponding private keys can be used to login with the user name ubuntu on port 2200. You can specify up to 10 keys.
	SshPublicKeys []string `pulumi:"sshPublicKeys"`
	// (string) State of the cluster.
	State *string `pulumi:"state"`
	// URL for the Docker image
	Url          *string              `pulumi:"url"`
	WorkloadType *ClusterWorkloadType `pulumi:"workloadType"`
}

type ClusterState struct {
	// Whether to use policy default values for missing cluster attributes.
	ApplyPolicyDefaultValues pulumi.BoolPtrInput
	Autoscale                ClusterAutoscalePtrInput
	// Automatically terminate the cluster after being inactive for this time in minutes. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination. Defaults to `60`.  *We highly recommend having this setting present for Interactive/BI clusters.*
	AutoterminationMinutes pulumi.IntPtrInput
	AwsAttributes          ClusterAwsAttributesPtrInput
	AzureAttributes        ClusterAzureAttributesPtrInput
	ClusterId              pulumi.StringPtrInput
	ClusterLogConf         ClusterClusterLogConfPtrInput
	ClusterMountInfos      ClusterClusterMountInfoArrayInput
	// Cluster name, which doesn’t have to be unique. If not specified at creation, the cluster name will be an empty string.
	ClusterName   pulumi.StringPtrInput
	ClusterSource pulumi.StringPtrInput
	// should have tag `ResourceClass` set to value `Serverless`
	//
	// For example:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := databricks.NewCluster(ctx, "clusterWithTableAccessControl", &databricks.ClusterArgs{
	// 			ClusterName:            pulumi.String("Shared High-Concurrency"),
	// 			SparkVersion:           pulumi.Any(data.Databricks_spark_version.Latest_lts.Id),
	// 			NodeTypeId:             pulumi.Any(data.Databricks_node_type.Smallest.Id),
	// 			AutoterminationMinutes: pulumi.Int(20),
	// 			SparkConf: pulumi.Map{
	// 				"spark.databricks.repl.allowedLanguages": pulumi.Any("python,sql"),
	// 				"spark.databricks.cluster.profile":       pulumi.Any("serverless"),
	// 			},
	// 			CustomTags: pulumi.Map{
	// 				"ResourceClass": pulumi.Any("Serverless"),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	CustomTags pulumi.MapInput
	// Select the security features of the cluster. [Unity Catalog requires](https://docs.databricks.com/data-governance/unity-catalog/compute.html#create-clusters--sql-warehouses-with-unity-catalog-access) `SINGLE_USER` or `USER_ISOLATION` mode. `LEGACY_PASSTHROUGH` for passthrough cluster and `LEGACY_TABLE_ACL` for Table ACL cluster. If omitted, no security features are enabled. In the Databricks UI, this has been recently been renamed *Access Mode* and `USER_ISOLATION` has been renamed *Shared*, but use these terms here.
	DataSecurityMode pulumi.StringPtrInput
	// (map) Tags that are added by Databricks by default, regardless of any `customTags` that may have been added. These include: Vendor: Databricks, Creator: <username_of_creator>, ClusterName: <name_of_cluster>, ClusterId: <id_of_cluster>, Name: <Databricks internal use>, and any workspace and pool tags.
	DefaultTags pulumi.MapInput
	DockerImage ClusterDockerImagePtrInput
	// similar to `instancePoolId`, but for driver node. If omitted, and `instancePoolId` is specified, then the driver will be allocated from that pool.
	DriverInstancePoolId pulumi.StringPtrInput
	// The node type of the Spark driver. This field is optional; if unset, API will set the driver node type to the same value as `nodeTypeId` defined above.
	DriverNodeTypeId pulumi.StringPtrInput
	// If you don’t want to allocate a fixed number of EBS volumes at cluster creation time, use autoscaling local storage. With autoscaling local storage, Databricks monitors the amount of free disk space available on your cluster’s Spark workers. If a worker begins to run too low on disk, Databricks automatically attaches a new EBS volume to the worker before it runs out of disk space. EBS volumes are attached up to a limit of 5 TB of total disk space per instance (including the instance’s local storage). To scale down EBS usage, make sure you have `autoterminationMinutes` and `autoscale` attributes set. More documentation available at [cluster configuration page](https://docs.databricks.com/clusters/configure.html#autoscaling-local-storage-1).
	EnableElasticDisk pulumi.BoolPtrInput
	// Some instance types you use to run clusters may have locally attached disks. Databricks may store shuffle data or temporary data on these locally attached disks. To ensure that all data at rest is encrypted for all storage types, including shuffle data stored temporarily on your cluster’s local disks, you can enable local disk encryption. When local disk encryption is enabled, Databricks generates an encryption key locally unique to each cluster node and uses it to encrypt all data stored on local disks. The scope of the key is local to each cluster node and is destroyed along with the cluster node itself. During its lifetime, the key resides in memory for encryption and decryption and is stored encrypted on the disk. *Your workloads may run more slowly because of the performance impact of reading and writing encrypted data to and from local volumes. This feature is not available for all Azure Databricks subscriptions. Contact your Microsoft or Databricks account representative to request access.*
	EnableLocalDiskEncryption pulumi.BoolPtrInput
	GcpAttributes             ClusterGcpAttributesPtrInput
	// An optional token to guarantee the idempotency of cluster creation requests. If an active cluster with the provided token already exists, the request will not create a new cluster, but it will return the existing running cluster's ID instead. If you specify the idempotency token, upon failure, you can retry until the request succeeds. Databricks platform guarantees to launch exactly one cluster with that idempotency token. This token should have at most 64 characters.
	IdempotencyToken pulumi.StringPtrInput
	InitScripts      ClusterInitScriptArrayInput
	// To reduce cluster start time, you can attach a cluster to a predefined pool of idle instances. When attached to a pool, a cluster allocates its driver and worker nodes from the pool. If the pool does not have sufficient idle resources to accommodate the cluster’s request, it expands by allocating new instances from the instance provider. When an attached cluster changes its state to `TERMINATED`, the instances it used are returned to the pool and reused by a different cluster.
	InstancePoolId pulumi.StringPtrInput
	// boolean value specifying if the cluster is pinned (not pinned by default). You must be a Databricks administrator to use this.  The pinned clusters' maximum number is [limited to 100](https://docs.databricks.com/clusters/clusters-manage.html#pin-a-cluster), so `apply` may fail if you have more than that (this number may change over time, so check Databricks documentation for actual number).
	//
	// The following example demonstrates how to create an autoscaling cluster with [Delta Cache](https://docs.databricks.com/delta/optimizations/delta-cache.html) enabled:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		smallest, err := databricks.GetNodeType(ctx, &databricks.GetNodeTypeArgs{
	// 			LocalDisk: pulumi.BoolRef(true),
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		latestLts, err := databricks.GetSparkVersion(ctx, &databricks.GetSparkVersionArgs{
	// 			LongTermSupport: pulumi.BoolRef(true),
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		_, err = databricks.NewCluster(ctx, "sharedAutoscaling", &databricks.ClusterArgs{
	// 			ClusterName:            pulumi.String("Shared Autoscaling"),
	// 			SparkVersion:           *pulumi.String(latestLts.Id),
	// 			NodeTypeId:             *pulumi.String(smallest.Id),
	// 			AutoterminationMinutes: pulumi.Int(20),
	// 			Autoscale: &databricks.ClusterAutoscaleArgs{
	// 				MinWorkers: pulumi.Int(1),
	// 				MaxWorkers: pulumi.Int(50),
	// 			},
	// 			SparkConf: pulumi.Map{
	// 				"spark.databricks.io.cache.enabled":          pulumi.Any(true),
	// 				"spark.databricks.io.cache.maxDiskUsage":     pulumi.Any("50g"),
	// 				"spark.databricks.io.cache.maxMetaDataCache": pulumi.Any("1g"),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	IsPinned  pulumi.BoolPtrInput
	Libraries ClusterLibraryArrayInput
	// Any supported getNodeType id. If `instancePoolId` is specified, this field is not needed.
	NodeTypeId pulumi.StringPtrInput
	// Number of worker nodes that this cluster should have. A cluster has one Spark driver and `numWorkers` executors for a total of `numWorkers` + 1 Spark nodes.
	NumWorkers pulumi.IntPtrInput
	PolicyId   pulumi.StringPtrInput
	// The type of runtime engine to use. If not specified, the runtime engine type is inferred based on the sparkVersion value. Allowed values include: `PHOTON`, `STANDARD`.
	RuntimeEngine pulumi.StringPtrInput
	// The optional user name of the user to assign to an interactive cluster. This field is required when using `dataSecurityMode` set to `SINGLE_USER` or AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
	SingleUserName pulumi.StringPtrInput
	// should have following items:
	// * `spark.databricks.repl.allowedLanguages` set to a list of supported languages, for example: `python,sql`, or `python,sql,r`.  Scala is not supported!
	// * `spark.databricks.cluster.profile` set to `serverless`
	SparkConf pulumi.MapInput
	// Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
	SparkEnvVars pulumi.MapInput
	// [Runtime version](https://docs.databricks.com/runtime/index.html) of the cluster. Any supported getSparkVersion id.  We advise using Cluster Policies to restrict the list of versions for simplicity while maintaining enough control.
	SparkVersion pulumi.StringPtrInput
	// SSH public key contents that will be added to each Spark node in this cluster. The corresponding private keys can be used to login with the user name ubuntu on port 2200. You can specify up to 10 keys.
	SshPublicKeys pulumi.StringArrayInput
	// (string) State of the cluster.
	State pulumi.StringPtrInput
	// URL for the Docker image
	Url          pulumi.StringPtrInput
	WorkloadType ClusterWorkloadTypePtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Whether to use policy default values for missing cluster attributes.
	ApplyPolicyDefaultValues *bool             `pulumi:"applyPolicyDefaultValues"`
	Autoscale                *ClusterAutoscale `pulumi:"autoscale"`
	// Automatically terminate the cluster after being inactive for this time in minutes. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination. Defaults to `60`.  *We highly recommend having this setting present for Interactive/BI clusters.*
	AutoterminationMinutes *int                      `pulumi:"autoterminationMinutes"`
	AwsAttributes          *ClusterAwsAttributes     `pulumi:"awsAttributes"`
	AzureAttributes        *ClusterAzureAttributes   `pulumi:"azureAttributes"`
	ClusterId              *string                   `pulumi:"clusterId"`
	ClusterLogConf         *ClusterClusterLogConf    `pulumi:"clusterLogConf"`
	ClusterMountInfos      []ClusterClusterMountInfo `pulumi:"clusterMountInfos"`
	// Cluster name, which doesn’t have to be unique. If not specified at creation, the cluster name will be an empty string.
	ClusterName *string `pulumi:"clusterName"`
	// should have tag `ResourceClass` set to value `Serverless`
	//
	// For example:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := databricks.NewCluster(ctx, "clusterWithTableAccessControl", &databricks.ClusterArgs{
	// 			ClusterName:            pulumi.String("Shared High-Concurrency"),
	// 			SparkVersion:           pulumi.Any(data.Databricks_spark_version.Latest_lts.Id),
	// 			NodeTypeId:             pulumi.Any(data.Databricks_node_type.Smallest.Id),
	// 			AutoterminationMinutes: pulumi.Int(20),
	// 			SparkConf: pulumi.Map{
	// 				"spark.databricks.repl.allowedLanguages": pulumi.Any("python,sql"),
	// 				"spark.databricks.cluster.profile":       pulumi.Any("serverless"),
	// 			},
	// 			CustomTags: pulumi.Map{
	// 				"ResourceClass": pulumi.Any("Serverless"),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	CustomTags map[string]interface{} `pulumi:"customTags"`
	// Select the security features of the cluster. [Unity Catalog requires](https://docs.databricks.com/data-governance/unity-catalog/compute.html#create-clusters--sql-warehouses-with-unity-catalog-access) `SINGLE_USER` or `USER_ISOLATION` mode. `LEGACY_PASSTHROUGH` for passthrough cluster and `LEGACY_TABLE_ACL` for Table ACL cluster. If omitted, no security features are enabled. In the Databricks UI, this has been recently been renamed *Access Mode* and `USER_ISOLATION` has been renamed *Shared*, but use these terms here.
	DataSecurityMode *string             `pulumi:"dataSecurityMode"`
	DockerImage      *ClusterDockerImage `pulumi:"dockerImage"`
	// similar to `instancePoolId`, but for driver node. If omitted, and `instancePoolId` is specified, then the driver will be allocated from that pool.
	DriverInstancePoolId *string `pulumi:"driverInstancePoolId"`
	// The node type of the Spark driver. This field is optional; if unset, API will set the driver node type to the same value as `nodeTypeId` defined above.
	DriverNodeTypeId *string `pulumi:"driverNodeTypeId"`
	// If you don’t want to allocate a fixed number of EBS volumes at cluster creation time, use autoscaling local storage. With autoscaling local storage, Databricks monitors the amount of free disk space available on your cluster’s Spark workers. If a worker begins to run too low on disk, Databricks automatically attaches a new EBS volume to the worker before it runs out of disk space. EBS volumes are attached up to a limit of 5 TB of total disk space per instance (including the instance’s local storage). To scale down EBS usage, make sure you have `autoterminationMinutes` and `autoscale` attributes set. More documentation available at [cluster configuration page](https://docs.databricks.com/clusters/configure.html#autoscaling-local-storage-1).
	EnableElasticDisk *bool `pulumi:"enableElasticDisk"`
	// Some instance types you use to run clusters may have locally attached disks. Databricks may store shuffle data or temporary data on these locally attached disks. To ensure that all data at rest is encrypted for all storage types, including shuffle data stored temporarily on your cluster’s local disks, you can enable local disk encryption. When local disk encryption is enabled, Databricks generates an encryption key locally unique to each cluster node and uses it to encrypt all data stored on local disks. The scope of the key is local to each cluster node and is destroyed along with the cluster node itself. During its lifetime, the key resides in memory for encryption and decryption and is stored encrypted on the disk. *Your workloads may run more slowly because of the performance impact of reading and writing encrypted data to and from local volumes. This feature is not available for all Azure Databricks subscriptions. Contact your Microsoft or Databricks account representative to request access.*
	EnableLocalDiskEncryption *bool                 `pulumi:"enableLocalDiskEncryption"`
	GcpAttributes             *ClusterGcpAttributes `pulumi:"gcpAttributes"`
	// An optional token to guarantee the idempotency of cluster creation requests. If an active cluster with the provided token already exists, the request will not create a new cluster, but it will return the existing running cluster's ID instead. If you specify the idempotency token, upon failure, you can retry until the request succeeds. Databricks platform guarantees to launch exactly one cluster with that idempotency token. This token should have at most 64 characters.
	IdempotencyToken *string             `pulumi:"idempotencyToken"`
	InitScripts      []ClusterInitScript `pulumi:"initScripts"`
	// To reduce cluster start time, you can attach a cluster to a predefined pool of idle instances. When attached to a pool, a cluster allocates its driver and worker nodes from the pool. If the pool does not have sufficient idle resources to accommodate the cluster’s request, it expands by allocating new instances from the instance provider. When an attached cluster changes its state to `TERMINATED`, the instances it used are returned to the pool and reused by a different cluster.
	InstancePoolId *string `pulumi:"instancePoolId"`
	// boolean value specifying if the cluster is pinned (not pinned by default). You must be a Databricks administrator to use this.  The pinned clusters' maximum number is [limited to 100](https://docs.databricks.com/clusters/clusters-manage.html#pin-a-cluster), so `apply` may fail if you have more than that (this number may change over time, so check Databricks documentation for actual number).
	//
	// The following example demonstrates how to create an autoscaling cluster with [Delta Cache](https://docs.databricks.com/delta/optimizations/delta-cache.html) enabled:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		smallest, err := databricks.GetNodeType(ctx, &databricks.GetNodeTypeArgs{
	// 			LocalDisk: pulumi.BoolRef(true),
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		latestLts, err := databricks.GetSparkVersion(ctx, &databricks.GetSparkVersionArgs{
	// 			LongTermSupport: pulumi.BoolRef(true),
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		_, err = databricks.NewCluster(ctx, "sharedAutoscaling", &databricks.ClusterArgs{
	// 			ClusterName:            pulumi.String("Shared Autoscaling"),
	// 			SparkVersion:           *pulumi.String(latestLts.Id),
	// 			NodeTypeId:             *pulumi.String(smallest.Id),
	// 			AutoterminationMinutes: pulumi.Int(20),
	// 			Autoscale: &databricks.ClusterAutoscaleArgs{
	// 				MinWorkers: pulumi.Int(1),
	// 				MaxWorkers: pulumi.Int(50),
	// 			},
	// 			SparkConf: pulumi.Map{
	// 				"spark.databricks.io.cache.enabled":          pulumi.Any(true),
	// 				"spark.databricks.io.cache.maxDiskUsage":     pulumi.Any("50g"),
	// 				"spark.databricks.io.cache.maxMetaDataCache": pulumi.Any("1g"),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	IsPinned  *bool            `pulumi:"isPinned"`
	Libraries []ClusterLibrary `pulumi:"libraries"`
	// Any supported getNodeType id. If `instancePoolId` is specified, this field is not needed.
	NodeTypeId *string `pulumi:"nodeTypeId"`
	// Number of worker nodes that this cluster should have. A cluster has one Spark driver and `numWorkers` executors for a total of `numWorkers` + 1 Spark nodes.
	NumWorkers *int    `pulumi:"numWorkers"`
	PolicyId   *string `pulumi:"policyId"`
	// The type of runtime engine to use. If not specified, the runtime engine type is inferred based on the sparkVersion value. Allowed values include: `PHOTON`, `STANDARD`.
	RuntimeEngine *string `pulumi:"runtimeEngine"`
	// The optional user name of the user to assign to an interactive cluster. This field is required when using `dataSecurityMode` set to `SINGLE_USER` or AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
	SingleUserName *string `pulumi:"singleUserName"`
	// should have following items:
	// * `spark.databricks.repl.allowedLanguages` set to a list of supported languages, for example: `python,sql`, or `python,sql,r`.  Scala is not supported!
	// * `spark.databricks.cluster.profile` set to `serverless`
	SparkConf map[string]interface{} `pulumi:"sparkConf"`
	// Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
	SparkEnvVars map[string]interface{} `pulumi:"sparkEnvVars"`
	// [Runtime version](https://docs.databricks.com/runtime/index.html) of the cluster. Any supported getSparkVersion id.  We advise using Cluster Policies to restrict the list of versions for simplicity while maintaining enough control.
	SparkVersion string `pulumi:"sparkVersion"`
	// SSH public key contents that will be added to each Spark node in this cluster. The corresponding private keys can be used to login with the user name ubuntu on port 2200. You can specify up to 10 keys.
	SshPublicKeys []string             `pulumi:"sshPublicKeys"`
	WorkloadType  *ClusterWorkloadType `pulumi:"workloadType"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Whether to use policy default values for missing cluster attributes.
	ApplyPolicyDefaultValues pulumi.BoolPtrInput
	Autoscale                ClusterAutoscalePtrInput
	// Automatically terminate the cluster after being inactive for this time in minutes. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination. Defaults to `60`.  *We highly recommend having this setting present for Interactive/BI clusters.*
	AutoterminationMinutes pulumi.IntPtrInput
	AwsAttributes          ClusterAwsAttributesPtrInput
	AzureAttributes        ClusterAzureAttributesPtrInput
	ClusterId              pulumi.StringPtrInput
	ClusterLogConf         ClusterClusterLogConfPtrInput
	ClusterMountInfos      ClusterClusterMountInfoArrayInput
	// Cluster name, which doesn’t have to be unique. If not specified at creation, the cluster name will be an empty string.
	ClusterName pulumi.StringPtrInput
	// should have tag `ResourceClass` set to value `Serverless`
	//
	// For example:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := databricks.NewCluster(ctx, "clusterWithTableAccessControl", &databricks.ClusterArgs{
	// 			ClusterName:            pulumi.String("Shared High-Concurrency"),
	// 			SparkVersion:           pulumi.Any(data.Databricks_spark_version.Latest_lts.Id),
	// 			NodeTypeId:             pulumi.Any(data.Databricks_node_type.Smallest.Id),
	// 			AutoterminationMinutes: pulumi.Int(20),
	// 			SparkConf: pulumi.Map{
	// 				"spark.databricks.repl.allowedLanguages": pulumi.Any("python,sql"),
	// 				"spark.databricks.cluster.profile":       pulumi.Any("serverless"),
	// 			},
	// 			CustomTags: pulumi.Map{
	// 				"ResourceClass": pulumi.Any("Serverless"),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	CustomTags pulumi.MapInput
	// Select the security features of the cluster. [Unity Catalog requires](https://docs.databricks.com/data-governance/unity-catalog/compute.html#create-clusters--sql-warehouses-with-unity-catalog-access) `SINGLE_USER` or `USER_ISOLATION` mode. `LEGACY_PASSTHROUGH` for passthrough cluster and `LEGACY_TABLE_ACL` for Table ACL cluster. If omitted, no security features are enabled. In the Databricks UI, this has been recently been renamed *Access Mode* and `USER_ISOLATION` has been renamed *Shared*, but use these terms here.
	DataSecurityMode pulumi.StringPtrInput
	DockerImage      ClusterDockerImagePtrInput
	// similar to `instancePoolId`, but for driver node. If omitted, and `instancePoolId` is specified, then the driver will be allocated from that pool.
	DriverInstancePoolId pulumi.StringPtrInput
	// The node type of the Spark driver. This field is optional; if unset, API will set the driver node type to the same value as `nodeTypeId` defined above.
	DriverNodeTypeId pulumi.StringPtrInput
	// If you don’t want to allocate a fixed number of EBS volumes at cluster creation time, use autoscaling local storage. With autoscaling local storage, Databricks monitors the amount of free disk space available on your cluster’s Spark workers. If a worker begins to run too low on disk, Databricks automatically attaches a new EBS volume to the worker before it runs out of disk space. EBS volumes are attached up to a limit of 5 TB of total disk space per instance (including the instance’s local storage). To scale down EBS usage, make sure you have `autoterminationMinutes` and `autoscale` attributes set. More documentation available at [cluster configuration page](https://docs.databricks.com/clusters/configure.html#autoscaling-local-storage-1).
	EnableElasticDisk pulumi.BoolPtrInput
	// Some instance types you use to run clusters may have locally attached disks. Databricks may store shuffle data or temporary data on these locally attached disks. To ensure that all data at rest is encrypted for all storage types, including shuffle data stored temporarily on your cluster’s local disks, you can enable local disk encryption. When local disk encryption is enabled, Databricks generates an encryption key locally unique to each cluster node and uses it to encrypt all data stored on local disks. The scope of the key is local to each cluster node and is destroyed along with the cluster node itself. During its lifetime, the key resides in memory for encryption and decryption and is stored encrypted on the disk. *Your workloads may run more slowly because of the performance impact of reading and writing encrypted data to and from local volumes. This feature is not available for all Azure Databricks subscriptions. Contact your Microsoft or Databricks account representative to request access.*
	EnableLocalDiskEncryption pulumi.BoolPtrInput
	GcpAttributes             ClusterGcpAttributesPtrInput
	// An optional token to guarantee the idempotency of cluster creation requests. If an active cluster with the provided token already exists, the request will not create a new cluster, but it will return the existing running cluster's ID instead. If you specify the idempotency token, upon failure, you can retry until the request succeeds. Databricks platform guarantees to launch exactly one cluster with that idempotency token. This token should have at most 64 characters.
	IdempotencyToken pulumi.StringPtrInput
	InitScripts      ClusterInitScriptArrayInput
	// To reduce cluster start time, you can attach a cluster to a predefined pool of idle instances. When attached to a pool, a cluster allocates its driver and worker nodes from the pool. If the pool does not have sufficient idle resources to accommodate the cluster’s request, it expands by allocating new instances from the instance provider. When an attached cluster changes its state to `TERMINATED`, the instances it used are returned to the pool and reused by a different cluster.
	InstancePoolId pulumi.StringPtrInput
	// boolean value specifying if the cluster is pinned (not pinned by default). You must be a Databricks administrator to use this.  The pinned clusters' maximum number is [limited to 100](https://docs.databricks.com/clusters/clusters-manage.html#pin-a-cluster), so `apply` may fail if you have more than that (this number may change over time, so check Databricks documentation for actual number).
	//
	// The following example demonstrates how to create an autoscaling cluster with [Delta Cache](https://docs.databricks.com/delta/optimizations/delta-cache.html) enabled:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		smallest, err := databricks.GetNodeType(ctx, &databricks.GetNodeTypeArgs{
	// 			LocalDisk: pulumi.BoolRef(true),
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		latestLts, err := databricks.GetSparkVersion(ctx, &databricks.GetSparkVersionArgs{
	// 			LongTermSupport: pulumi.BoolRef(true),
	// 		}, nil)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		_, err = databricks.NewCluster(ctx, "sharedAutoscaling", &databricks.ClusterArgs{
	// 			ClusterName:            pulumi.String("Shared Autoscaling"),
	// 			SparkVersion:           *pulumi.String(latestLts.Id),
	// 			NodeTypeId:             *pulumi.String(smallest.Id),
	// 			AutoterminationMinutes: pulumi.Int(20),
	// 			Autoscale: &databricks.ClusterAutoscaleArgs{
	// 				MinWorkers: pulumi.Int(1),
	// 				MaxWorkers: pulumi.Int(50),
	// 			},
	// 			SparkConf: pulumi.Map{
	// 				"spark.databricks.io.cache.enabled":          pulumi.Any(true),
	// 				"spark.databricks.io.cache.maxDiskUsage":     pulumi.Any("50g"),
	// 				"spark.databricks.io.cache.maxMetaDataCache": pulumi.Any("1g"),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	IsPinned  pulumi.BoolPtrInput
	Libraries ClusterLibraryArrayInput
	// Any supported getNodeType id. If `instancePoolId` is specified, this field is not needed.
	NodeTypeId pulumi.StringPtrInput
	// Number of worker nodes that this cluster should have. A cluster has one Spark driver and `numWorkers` executors for a total of `numWorkers` + 1 Spark nodes.
	NumWorkers pulumi.IntPtrInput
	PolicyId   pulumi.StringPtrInput
	// The type of runtime engine to use. If not specified, the runtime engine type is inferred based on the sparkVersion value. Allowed values include: `PHOTON`, `STANDARD`.
	RuntimeEngine pulumi.StringPtrInput
	// The optional user name of the user to assign to an interactive cluster. This field is required when using `dataSecurityMode` set to `SINGLE_USER` or AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
	SingleUserName pulumi.StringPtrInput
	// should have following items:
	// * `spark.databricks.repl.allowedLanguages` set to a list of supported languages, for example: `python,sql`, or `python,sql,r`.  Scala is not supported!
	// * `spark.databricks.cluster.profile` set to `serverless`
	SparkConf pulumi.MapInput
	// Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
	SparkEnvVars pulumi.MapInput
	// [Runtime version](https://docs.databricks.com/runtime/index.html) of the cluster. Any supported getSparkVersion id.  We advise using Cluster Policies to restrict the list of versions for simplicity while maintaining enough control.
	SparkVersion pulumi.StringInput
	// SSH public key contents that will be added to each Spark node in this cluster. The corresponding private keys can be used to login with the user name ubuntu on port 2200. You can specify up to 10 keys.
	SshPublicKeys pulumi.StringArrayInput
	WorkloadType  ClusterWorkloadTypePtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// Whether to use policy default values for missing cluster attributes.
func (o ClusterOutput) ApplyPolicyDefaultValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.ApplyPolicyDefaultValues }).(pulumi.BoolPtrOutput)
}

func (o ClusterOutput) Autoscale() ClusterAutoscalePtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAutoscalePtrOutput { return v.Autoscale }).(ClusterAutoscalePtrOutput)
}

// Automatically terminate the cluster after being inactive for this time in minutes. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination. Defaults to `60`.  *We highly recommend having this setting present for Interactive/BI clusters.*
func (o ClusterOutput) AutoterminationMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.AutoterminationMinutes }).(pulumi.IntPtrOutput)
}

func (o ClusterOutput) AwsAttributes() ClusterAwsAttributesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAwsAttributesPtrOutput { return v.AwsAttributes }).(ClusterAwsAttributesPtrOutput)
}

func (o ClusterOutput) AzureAttributes() ClusterAzureAttributesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAzureAttributesPtrOutput { return v.AzureAttributes }).(ClusterAzureAttributesPtrOutput)
}

func (o ClusterOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o ClusterOutput) ClusterLogConf() ClusterClusterLogConfPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterClusterLogConfPtrOutput { return v.ClusterLogConf }).(ClusterClusterLogConfPtrOutput)
}

func (o ClusterOutput) ClusterMountInfos() ClusterClusterMountInfoArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterClusterMountInfoArrayOutput { return v.ClusterMountInfos }).(ClusterClusterMountInfoArrayOutput)
}

// Cluster name, which doesn’t have to be unique. If not specified at creation, the cluster name will be an empty string.
func (o ClusterOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) ClusterSource() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterSource }).(pulumi.StringOutput)
}

// should have tag `ResourceClass` set to value `Serverless`
//
// For example:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewCluster(ctx, "clusterWithTableAccessControl", &databricks.ClusterArgs{
//				ClusterName:            pulumi.String("Shared High-Concurrency"),
//				SparkVersion:           pulumi.Any(data.Databricks_spark_version.Latest_lts.Id),
//				NodeTypeId:             pulumi.Any(data.Databricks_node_type.Smallest.Id),
//				AutoterminationMinutes: pulumi.Int(20),
//				SparkConf: pulumi.Map{
//					"spark.databricks.repl.allowedLanguages": pulumi.Any("python,sql"),
//					"spark.databricks.cluster.profile":       pulumi.Any("serverless"),
//				},
//				CustomTags: pulumi.Map{
//					"ResourceClass": pulumi.Any("Serverless"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func (o ClusterOutput) CustomTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.CustomTags }).(pulumi.MapOutput)
}

// Select the security features of the cluster. [Unity Catalog requires](https://docs.databricks.com/data-governance/unity-catalog/compute.html#create-clusters--sql-warehouses-with-unity-catalog-access) `SINGLE_USER` or `USER_ISOLATION` mode. `LEGACY_PASSTHROUGH` for passthrough cluster and `LEGACY_TABLE_ACL` for Table ACL cluster. If omitted, no security features are enabled. In the Databricks UI, this has been recently been renamed *Access Mode* and `USER_ISOLATION` has been renamed *Shared*, but use these terms here.
func (o ClusterOutput) DataSecurityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.DataSecurityMode }).(pulumi.StringPtrOutput)
}

// (map) Tags that are added by Databricks by default, regardless of any `customTags` that may have been added. These include: Vendor: Databricks, Creator: <username_of_creator>, ClusterName: <name_of_cluster>, ClusterId: <id_of_cluster>, Name: <Databricks internal use>, and any workspace and pool tags.
func (o ClusterOutput) DefaultTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.DefaultTags }).(pulumi.MapOutput)
}

func (o ClusterOutput) DockerImage() ClusterDockerImagePtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterDockerImagePtrOutput { return v.DockerImage }).(ClusterDockerImagePtrOutput)
}

// similar to `instancePoolId`, but for driver node. If omitted, and `instancePoolId` is specified, then the driver will be allocated from that pool.
func (o ClusterOutput) DriverInstancePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DriverInstancePoolId }).(pulumi.StringOutput)
}

// The node type of the Spark driver. This field is optional; if unset, API will set the driver node type to the same value as `nodeTypeId` defined above.
func (o ClusterOutput) DriverNodeTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DriverNodeTypeId }).(pulumi.StringOutput)
}

// If you don’t want to allocate a fixed number of EBS volumes at cluster creation time, use autoscaling local storage. With autoscaling local storage, Databricks monitors the amount of free disk space available on your cluster’s Spark workers. If a worker begins to run too low on disk, Databricks automatically attaches a new EBS volume to the worker before it runs out of disk space. EBS volumes are attached up to a limit of 5 TB of total disk space per instance (including the instance’s local storage). To scale down EBS usage, make sure you have `autoterminationMinutes` and `autoscale` attributes set. More documentation available at [cluster configuration page](https://docs.databricks.com/clusters/configure.html#autoscaling-local-storage-1).
func (o ClusterOutput) EnableElasticDisk() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.EnableElasticDisk }).(pulumi.BoolOutput)
}

// Some instance types you use to run clusters may have locally attached disks. Databricks may store shuffle data or temporary data on these locally attached disks. To ensure that all data at rest is encrypted for all storage types, including shuffle data stored temporarily on your cluster’s local disks, you can enable local disk encryption. When local disk encryption is enabled, Databricks generates an encryption key locally unique to each cluster node and uses it to encrypt all data stored on local disks. The scope of the key is local to each cluster node and is destroyed along with the cluster node itself. During its lifetime, the key resides in memory for encryption and decryption and is stored encrypted on the disk. *Your workloads may run more slowly because of the performance impact of reading and writing encrypted data to and from local volumes. This feature is not available for all Azure Databricks subscriptions. Contact your Microsoft or Databricks account representative to request access.*
func (o ClusterOutput) EnableLocalDiskEncryption() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.EnableLocalDiskEncryption }).(pulumi.BoolOutput)
}

func (o ClusterOutput) GcpAttributes() ClusterGcpAttributesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterGcpAttributesPtrOutput { return v.GcpAttributes }).(ClusterGcpAttributesPtrOutput)
}

// An optional token to guarantee the idempotency of cluster creation requests. If an active cluster with the provided token already exists, the request will not create a new cluster, but it will return the existing running cluster's ID instead. If you specify the idempotency token, upon failure, you can retry until the request succeeds. Databricks platform guarantees to launch exactly one cluster with that idempotency token. This token should have at most 64 characters.
func (o ClusterOutput) IdempotencyToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.IdempotencyToken }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) InitScripts() ClusterInitScriptArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterInitScriptArrayOutput { return v.InitScripts }).(ClusterInitScriptArrayOutput)
}

// To reduce cluster start time, you can attach a cluster to a predefined pool of idle instances. When attached to a pool, a cluster allocates its driver and worker nodes from the pool. If the pool does not have sufficient idle resources to accommodate the cluster’s request, it expands by allocating new instances from the instance provider. When an attached cluster changes its state to `TERMINATED`, the instances it used are returned to the pool and reused by a different cluster.
func (o ClusterOutput) InstancePoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.InstancePoolId }).(pulumi.StringPtrOutput)
}

// boolean value specifying if the cluster is pinned (not pinned by default). You must be a Databricks administrator to use this.  The pinned clusters' maximum number is [limited to 100](https://docs.databricks.com/clusters/clusters-manage.html#pin-a-cluster), so `apply` may fail if you have more than that (this number may change over time, so check Databricks documentation for actual number).
//
// The following example demonstrates how to create an autoscaling cluster with [Delta Cache](https://docs.databricks.com/delta/optimizations/delta-cache.html) enabled:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			smallest, err := databricks.GetNodeType(ctx, &databricks.GetNodeTypeArgs{
//				LocalDisk: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			latestLts, err := databricks.GetSparkVersion(ctx, &databricks.GetSparkVersionArgs{
//				LongTermSupport: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewCluster(ctx, "sharedAutoscaling", &databricks.ClusterArgs{
//				ClusterName:            pulumi.String("Shared Autoscaling"),
//				SparkVersion:           *pulumi.String(latestLts.Id),
//				NodeTypeId:             *pulumi.String(smallest.Id),
//				AutoterminationMinutes: pulumi.Int(20),
//				Autoscale: &databricks.ClusterAutoscaleArgs{
//					MinWorkers: pulumi.Int(1),
//					MaxWorkers: pulumi.Int(50),
//				},
//				SparkConf: pulumi.Map{
//					"spark.databricks.io.cache.enabled":          pulumi.Any(true),
//					"spark.databricks.io.cache.maxDiskUsage":     pulumi.Any("50g"),
//					"spark.databricks.io.cache.maxMetaDataCache": pulumi.Any("1g"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func (o ClusterOutput) IsPinned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.IsPinned }).(pulumi.BoolPtrOutput)
}

func (o ClusterOutput) Libraries() ClusterLibraryArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterLibraryArrayOutput { return v.Libraries }).(ClusterLibraryArrayOutput)
}

// Any supported getNodeType id. If `instancePoolId` is specified, this field is not needed.
func (o ClusterOutput) NodeTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NodeTypeId }).(pulumi.StringOutput)
}

// Number of worker nodes that this cluster should have. A cluster has one Spark driver and `numWorkers` executors for a total of `numWorkers` + 1 Spark nodes.
func (o ClusterOutput) NumWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.NumWorkers }).(pulumi.IntPtrOutput)
}

func (o ClusterOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.PolicyId }).(pulumi.StringPtrOutput)
}

// The type of runtime engine to use. If not specified, the runtime engine type is inferred based on the sparkVersion value. Allowed values include: `PHOTON`, `STANDARD`.
func (o ClusterOutput) RuntimeEngine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.RuntimeEngine }).(pulumi.StringPtrOutput)
}

// The optional user name of the user to assign to an interactive cluster. This field is required when using `dataSecurityMode` set to `SINGLE_USER` or AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
func (o ClusterOutput) SingleUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.SingleUserName }).(pulumi.StringPtrOutput)
}

// should have following items:
// * `spark.databricks.repl.allowedLanguages` set to a list of supported languages, for example: `python,sql`, or `python,sql,r`.  Scala is not supported!
// * `spark.databricks.cluster.profile` set to `serverless`
func (o ClusterOutput) SparkConf() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.SparkConf }).(pulumi.MapOutput)
}

// Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
func (o ClusterOutput) SparkEnvVars() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.SparkEnvVars }).(pulumi.MapOutput)
}

// [Runtime version](https://docs.databricks.com/runtime/index.html) of the cluster. Any supported getSparkVersion id.  We advise using Cluster Policies to restrict the list of versions for simplicity while maintaining enough control.
func (o ClusterOutput) SparkVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SparkVersion }).(pulumi.StringOutput)
}

// SSH public key contents that will be added to each Spark node in this cluster. The corresponding private keys can be used to login with the user name ubuntu on port 2200. You can specify up to 10 keys.
func (o ClusterOutput) SshPublicKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.SshPublicKeys }).(pulumi.StringArrayOutput)
}

// (string) State of the cluster.
func (o ClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// URL for the Docker image
func (o ClusterOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o ClusterOutput) WorkloadType() ClusterWorkloadTypePtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterWorkloadTypePtrOutput { return v.WorkloadType }).(ClusterWorkloadTypePtrOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
