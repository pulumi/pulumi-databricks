// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Note** If you have a fully automated setup with workspaces created by databricks_mws_workspaces, please make sure to add dependsOn attribute in order to prevent _default auth: cannot configure default credentials_ errors.
//
// Retrieves information about a Cluster using its id. This could be retrieved programmatically using getClusters data source.
//
// ## Example Usage
//
// # Retrieve attributes of each SQL warehouses in a workspace
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.GetClusters(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_ := "TODO: For expression"
//			return nil
//		})
//	}
//
// ```
// ## Related Resources
//
// The following resources are often used in the same context:
//
// * End to end workspace management guide.
// * Cluster to create [Databricks Clusters](https://docs.databricks.com/clusters/index.html).
// * ClusterPolicy to create a Cluster policy, which limits the ability to create clusters based on a set of rules.
// * InstancePool to manage [instance pools](https://docs.databricks.com/clusters/instance-pools/index.html) to reduce cluster start and auto-scaling times by maintaining a set of idle, ready-to-use instances.
// * Job to manage [Databricks Jobs](https://docs.databricks.com/jobs.html) to run non-interactive code in a databricks_cluster.
// * Library to install a [library](https://docs.databricks.com/libraries/index.html) on databricks_cluster.
// * Pipeline to deploy [Delta Live Tables](https://docs.databricks.com/data-engineering/delta-live-tables/index.html).
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("databricks:index/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// The id of the cluster
	ClusterId *string `pulumi:"clusterId"`
	// block, consisting of following fields:
	ClusterInfo *GetClusterClusterInfo `pulumi:"clusterInfo"`
	// The exact name of the cluster to search
	ClusterName *string `pulumi:"clusterName"`
	// cluster ID
	Id *string `pulumi:"id"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	ClusterId string `pulumi:"clusterId"`
	// block, consisting of following fields:
	ClusterInfo GetClusterClusterInfo `pulumi:"clusterInfo"`
	// Cluster name, which doesn’t have to be unique.
	ClusterName string `pulumi:"clusterName"`
	// cluster ID
	Id string `pulumi:"id"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterResult, error) {
			args := v.(LookupClusterArgs)
			r, err := LookupCluster(ctx, &args, opts...)
			var s LookupClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClusterResultOutput)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	// The id of the cluster
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// block, consisting of following fields:
	ClusterInfo GetClusterClusterInfoPtrInput `pulumi:"clusterInfo"`
	// The exact name of the cluster to search
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	// cluster ID
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

// A collection of values returned by getCluster.
type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// block, consisting of following fields:
func (o LookupClusterResultOutput) ClusterInfo() GetClusterClusterInfoOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterClusterInfo { return v.ClusterInfo }).(GetClusterClusterInfoOutput)
}

// Cluster name, which doesn’t have to be unique.
func (o LookupClusterResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterName }).(pulumi.StringOutput)
}

// cluster ID
func (o LookupClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
