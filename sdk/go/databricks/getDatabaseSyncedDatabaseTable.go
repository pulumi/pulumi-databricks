// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can be used to get a single Synced Database Table.
//
// ## Example Usage
//
// Referring to a Database Instance by name:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.LookupDatabaseSyncedDatabaseTable(ctx, &databricks.LookupDatabaseSyncedDatabaseTableArgs{
//				Name: "my_database_catalog.public.synced_table",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDatabaseSyncedDatabaseTable(ctx *pulumi.Context, args *LookupDatabaseSyncedDatabaseTableArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseSyncedDatabaseTableResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabaseSyncedDatabaseTableResult
	err := ctx.Invoke("databricks:index/getDatabaseSyncedDatabaseTable:getDatabaseSyncedDatabaseTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabaseSyncedDatabaseTable.
type LookupDatabaseSyncedDatabaseTableArgs struct {
	// (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
	// This is optional when creating synced database tables in registered catalogs. If this field is specified
	// when creating synced database tables in registered catalogs, the database instance name MUST
	// match that of the registered catalog (or the request will be rejected)
	DatabaseInstanceName *string `pulumi:"databaseInstanceName"`
	// (string) - Target Postgres database object (logical database) name for this table.
	LogicalDatabaseName *string `pulumi:"logicalDatabaseName"`
	// Full three-part (catalog, schema, table) name of the table
	Name string `pulumi:"name"`
	// (SyncedTableSpec)
	Spec *GetDatabaseSyncedDatabaseTableSpec `pulumi:"spec"`
}

// A collection of values returned by getDatabaseSyncedDatabaseTable.
type LookupDatabaseSyncedDatabaseTableResult struct {
	// (SyncedTableStatus) - Synced Table data synchronization status
	DataSynchronizationStatus GetDatabaseSyncedDatabaseTableDataSynchronizationStatus `pulumi:"dataSynchronizationStatus"`
	// (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
	// This is optional when creating synced database tables in registered catalogs. If this field is specified
	// when creating synced database tables in registered catalogs, the database instance name MUST
	// match that of the registered catalog (or the request will be rejected)
	DatabaseInstanceName string `pulumi:"databaseInstanceName"`
	// (string) - The name of the database instance that this table is registered to. This field is always returned, and for
	// tables inside database catalogs is inferred database instance associated with the catalog
	EffectiveDatabaseInstanceName string `pulumi:"effectiveDatabaseInstanceName"`
	// (string) - The name of the logical database that this table is registered to
	EffectiveLogicalDatabaseName string `pulumi:"effectiveLogicalDatabaseName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (string) - Target Postgres database object (logical database) name for this table.
	LogicalDatabaseName string `pulumi:"logicalDatabaseName"`
	// (string) - Full three-part (catalog, schema, table) name of the table
	Name string `pulumi:"name"`
	// (SyncedTableSpec)
	Spec *GetDatabaseSyncedDatabaseTableSpec `pulumi:"spec"`
	// (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
	// state of the data synchronization pipeline (i.e. the table may be in "ACTIVE" but the pipeline
	// may be in "PROVISIONING" as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
	UnityCatalogProvisioningState string `pulumi:"unityCatalogProvisioningState"`
}

func LookupDatabaseSyncedDatabaseTableOutput(ctx *pulumi.Context, args LookupDatabaseSyncedDatabaseTableOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseSyncedDatabaseTableResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDatabaseSyncedDatabaseTableResultOutput, error) {
			args := v.(LookupDatabaseSyncedDatabaseTableArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("databricks:index/getDatabaseSyncedDatabaseTable:getDatabaseSyncedDatabaseTable", args, LookupDatabaseSyncedDatabaseTableResultOutput{}, options).(LookupDatabaseSyncedDatabaseTableResultOutput), nil
		}).(LookupDatabaseSyncedDatabaseTableResultOutput)
}

// A collection of arguments for invoking getDatabaseSyncedDatabaseTable.
type LookupDatabaseSyncedDatabaseTableOutputArgs struct {
	// (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
	// This is optional when creating synced database tables in registered catalogs. If this field is specified
	// when creating synced database tables in registered catalogs, the database instance name MUST
	// match that of the registered catalog (or the request will be rejected)
	DatabaseInstanceName pulumi.StringPtrInput `pulumi:"databaseInstanceName"`
	// (string) - Target Postgres database object (logical database) name for this table.
	LogicalDatabaseName pulumi.StringPtrInput `pulumi:"logicalDatabaseName"`
	// Full three-part (catalog, schema, table) name of the table
	Name pulumi.StringInput `pulumi:"name"`
	// (SyncedTableSpec)
	Spec GetDatabaseSyncedDatabaseTableSpecPtrInput `pulumi:"spec"`
}

func (LookupDatabaseSyncedDatabaseTableOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseSyncedDatabaseTableArgs)(nil)).Elem()
}

// A collection of values returned by getDatabaseSyncedDatabaseTable.
type LookupDatabaseSyncedDatabaseTableResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseSyncedDatabaseTableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseSyncedDatabaseTableResult)(nil)).Elem()
}

func (o LookupDatabaseSyncedDatabaseTableResultOutput) ToLookupDatabaseSyncedDatabaseTableResultOutput() LookupDatabaseSyncedDatabaseTableResultOutput {
	return o
}

func (o LookupDatabaseSyncedDatabaseTableResultOutput) ToLookupDatabaseSyncedDatabaseTableResultOutputWithContext(ctx context.Context) LookupDatabaseSyncedDatabaseTableResultOutput {
	return o
}

// (SyncedTableStatus) - Synced Table data synchronization status
func (o LookupDatabaseSyncedDatabaseTableResultOutput) DataSynchronizationStatus() GetDatabaseSyncedDatabaseTableDataSynchronizationStatusOutput {
	return o.ApplyT(func(v LookupDatabaseSyncedDatabaseTableResult) GetDatabaseSyncedDatabaseTableDataSynchronizationStatus {
		return v.DataSynchronizationStatus
	}).(GetDatabaseSyncedDatabaseTableDataSynchronizationStatusOutput)
}

// (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
// This is optional when creating synced database tables in registered catalogs. If this field is specified
// when creating synced database tables in registered catalogs, the database instance name MUST
// match that of the registered catalog (or the request will be rejected)
func (o LookupDatabaseSyncedDatabaseTableResultOutput) DatabaseInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseSyncedDatabaseTableResult) string { return v.DatabaseInstanceName }).(pulumi.StringOutput)
}

// (string) - The name of the database instance that this table is registered to. This field is always returned, and for
// tables inside database catalogs is inferred database instance associated with the catalog
func (o LookupDatabaseSyncedDatabaseTableResultOutput) EffectiveDatabaseInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseSyncedDatabaseTableResult) string { return v.EffectiveDatabaseInstanceName }).(pulumi.StringOutput)
}

// (string) - The name of the logical database that this table is registered to
func (o LookupDatabaseSyncedDatabaseTableResultOutput) EffectiveLogicalDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseSyncedDatabaseTableResult) string { return v.EffectiveLogicalDatabaseName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDatabaseSyncedDatabaseTableResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseSyncedDatabaseTableResult) string { return v.Id }).(pulumi.StringOutput)
}

// (string) - Target Postgres database object (logical database) name for this table.
func (o LookupDatabaseSyncedDatabaseTableResultOutput) LogicalDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseSyncedDatabaseTableResult) string { return v.LogicalDatabaseName }).(pulumi.StringOutput)
}

// (string) - Full three-part (catalog, schema, table) name of the table
func (o LookupDatabaseSyncedDatabaseTableResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseSyncedDatabaseTableResult) string { return v.Name }).(pulumi.StringOutput)
}

// (SyncedTableSpec)
func (o LookupDatabaseSyncedDatabaseTableResultOutput) Spec() GetDatabaseSyncedDatabaseTableSpecPtrOutput {
	return o.ApplyT(func(v LookupDatabaseSyncedDatabaseTableResult) *GetDatabaseSyncedDatabaseTableSpec { return v.Spec }).(GetDatabaseSyncedDatabaseTableSpecPtrOutput)
}

// (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
// state of the data synchronization pipeline (i.e. the table may be in "ACTIVE" but the pipeline
// may be in "PROVISIONING" as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
func (o LookupDatabaseSyncedDatabaseTableResultOutput) UnityCatalogProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseSyncedDatabaseTableResult) string { return v.UnityCatalogProvisioningState }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabaseSyncedDatabaseTableResultOutput{})
}
