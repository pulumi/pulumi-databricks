// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Database Instances are managed Postgres instances, composed of a primary Postgres compute instance and 0 or more read replica instances.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewDatabaseInstance(ctx, "this", &databricks.DatabaseInstanceArgs{
//				Name:     pulumi.String("my-database-instance"),
//				Capacity: pulumi.String("CU_2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// As of Pulumi v1.5, resources can be imported through configuration.
//
// hcl
//
// import {
//
//	id = name
//
//	to = databricks_database_instance.this
//
// }
//
// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
//
// ```sh
// $ pulumi import databricks:index/databaseInstance:DatabaseInstance databricks_database_instance name
// ```
type DatabaseInstance struct {
	pulumi.CustomResourceState

	// The sku of the instance. Valid values are "CU_1", "CU_2", "CU_4", "CU_8"
	Capacity pulumi.StringPtrOutput `pulumi:"capacity"`
	// (string) - The timestamp when the instance was created
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// (string) - The email of the creator of the instance
	Creator pulumi.StringOutput `pulumi:"creator"`
	// (boolean) - xref AIP-129. `stopped` is owned by the client, while `effectiveStopped` is owned by the server.
	// `stopped` will only be set in Create/Update response messages if and only if the user provides the field via the request.
	// `effectiveStopped` on the other hand will always bet set in all response messages (Create/Update/Get/List)
	EffectiveStopped pulumi.BoolOutput `pulumi:"effectiveStopped"`
	// The name of the instance. This is the unique identifier for the instance
	Name pulumi.StringOutput `pulumi:"name"`
	// (string) - The version of Postgres running on the instance
	PgVersion pulumi.StringOutput `pulumi:"pgVersion"`
	// (string) - The DNS endpoint to connect to the instance for read+write access
	ReadWriteDns pulumi.StringOutput `pulumi:"readWriteDns"`
	// (string) - The current state of the instance. Possible values are: `AVAILABLE`, `DELETING`, `FAILING_OVER`, `STARTING`, `STOPPED`, `UPDATING`
	State pulumi.StringOutput `pulumi:"state"`
	// Whether the instance is stopped
	Stopped pulumi.BoolPtrOutput `pulumi:"stopped"`
	// (string) - An immutable UUID identifier for the instance
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewDatabaseInstance registers a new resource with the given unique name, arguments, and options.
func NewDatabaseInstance(ctx *pulumi.Context,
	name string, args *DatabaseInstanceArgs, opts ...pulumi.ResourceOption) (*DatabaseInstance, error) {
	if args == nil {
		args = &DatabaseInstanceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseInstance
	err := ctx.RegisterResource("databricks:index/databaseInstance:DatabaseInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseInstance gets an existing DatabaseInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseInstanceState, opts ...pulumi.ResourceOption) (*DatabaseInstance, error) {
	var resource DatabaseInstance
	err := ctx.ReadResource("databricks:index/databaseInstance:DatabaseInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseInstance resources.
type databaseInstanceState struct {
	// The sku of the instance. Valid values are "CU_1", "CU_2", "CU_4", "CU_8"
	Capacity *string `pulumi:"capacity"`
	// (string) - The timestamp when the instance was created
	CreationTime *string `pulumi:"creationTime"`
	// (string) - The email of the creator of the instance
	Creator *string `pulumi:"creator"`
	// (boolean) - xref AIP-129. `stopped` is owned by the client, while `effectiveStopped` is owned by the server.
	// `stopped` will only be set in Create/Update response messages if and only if the user provides the field via the request.
	// `effectiveStopped` on the other hand will always bet set in all response messages (Create/Update/Get/List)
	EffectiveStopped *bool `pulumi:"effectiveStopped"`
	// The name of the instance. This is the unique identifier for the instance
	Name *string `pulumi:"name"`
	// (string) - The version of Postgres running on the instance
	PgVersion *string `pulumi:"pgVersion"`
	// (string) - The DNS endpoint to connect to the instance for read+write access
	ReadWriteDns *string `pulumi:"readWriteDns"`
	// (string) - The current state of the instance. Possible values are: `AVAILABLE`, `DELETING`, `FAILING_OVER`, `STARTING`, `STOPPED`, `UPDATING`
	State *string `pulumi:"state"`
	// Whether the instance is stopped
	Stopped *bool `pulumi:"stopped"`
	// (string) - An immutable UUID identifier for the instance
	Uid *string `pulumi:"uid"`
}

type DatabaseInstanceState struct {
	// The sku of the instance. Valid values are "CU_1", "CU_2", "CU_4", "CU_8"
	Capacity pulumi.StringPtrInput
	// (string) - The timestamp when the instance was created
	CreationTime pulumi.StringPtrInput
	// (string) - The email of the creator of the instance
	Creator pulumi.StringPtrInput
	// (boolean) - xref AIP-129. `stopped` is owned by the client, while `effectiveStopped` is owned by the server.
	// `stopped` will only be set in Create/Update response messages if and only if the user provides the field via the request.
	// `effectiveStopped` on the other hand will always bet set in all response messages (Create/Update/Get/List)
	EffectiveStopped pulumi.BoolPtrInput
	// The name of the instance. This is the unique identifier for the instance
	Name pulumi.StringPtrInput
	// (string) - The version of Postgres running on the instance
	PgVersion pulumi.StringPtrInput
	// (string) - The DNS endpoint to connect to the instance for read+write access
	ReadWriteDns pulumi.StringPtrInput
	// (string) - The current state of the instance. Possible values are: `AVAILABLE`, `DELETING`, `FAILING_OVER`, `STARTING`, `STOPPED`, `UPDATING`
	State pulumi.StringPtrInput
	// Whether the instance is stopped
	Stopped pulumi.BoolPtrInput
	// (string) - An immutable UUID identifier for the instance
	Uid pulumi.StringPtrInput
}

func (DatabaseInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseInstanceState)(nil)).Elem()
}

type databaseInstanceArgs struct {
	// The sku of the instance. Valid values are "CU_1", "CU_2", "CU_4", "CU_8"
	Capacity *string `pulumi:"capacity"`
	// The name of the instance. This is the unique identifier for the instance
	Name *string `pulumi:"name"`
	// Whether the instance is stopped
	Stopped *bool `pulumi:"stopped"`
}

// The set of arguments for constructing a DatabaseInstance resource.
type DatabaseInstanceArgs struct {
	// The sku of the instance. Valid values are "CU_1", "CU_2", "CU_4", "CU_8"
	Capacity pulumi.StringPtrInput
	// The name of the instance. This is the unique identifier for the instance
	Name pulumi.StringPtrInput
	// Whether the instance is stopped
	Stopped pulumi.BoolPtrInput
}

func (DatabaseInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseInstanceArgs)(nil)).Elem()
}

type DatabaseInstanceInput interface {
	pulumi.Input

	ToDatabaseInstanceOutput() DatabaseInstanceOutput
	ToDatabaseInstanceOutputWithContext(ctx context.Context) DatabaseInstanceOutput
}

func (*DatabaseInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseInstance)(nil)).Elem()
}

func (i *DatabaseInstance) ToDatabaseInstanceOutput() DatabaseInstanceOutput {
	return i.ToDatabaseInstanceOutputWithContext(context.Background())
}

func (i *DatabaseInstance) ToDatabaseInstanceOutputWithContext(ctx context.Context) DatabaseInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInstanceOutput)
}

// DatabaseInstanceArrayInput is an input type that accepts DatabaseInstanceArray and DatabaseInstanceArrayOutput values.
// You can construct a concrete instance of `DatabaseInstanceArrayInput` via:
//
//	DatabaseInstanceArray{ DatabaseInstanceArgs{...} }
type DatabaseInstanceArrayInput interface {
	pulumi.Input

	ToDatabaseInstanceArrayOutput() DatabaseInstanceArrayOutput
	ToDatabaseInstanceArrayOutputWithContext(context.Context) DatabaseInstanceArrayOutput
}

type DatabaseInstanceArray []DatabaseInstanceInput

func (DatabaseInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseInstance)(nil)).Elem()
}

func (i DatabaseInstanceArray) ToDatabaseInstanceArrayOutput() DatabaseInstanceArrayOutput {
	return i.ToDatabaseInstanceArrayOutputWithContext(context.Background())
}

func (i DatabaseInstanceArray) ToDatabaseInstanceArrayOutputWithContext(ctx context.Context) DatabaseInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInstanceArrayOutput)
}

// DatabaseInstanceMapInput is an input type that accepts DatabaseInstanceMap and DatabaseInstanceMapOutput values.
// You can construct a concrete instance of `DatabaseInstanceMapInput` via:
//
//	DatabaseInstanceMap{ "key": DatabaseInstanceArgs{...} }
type DatabaseInstanceMapInput interface {
	pulumi.Input

	ToDatabaseInstanceMapOutput() DatabaseInstanceMapOutput
	ToDatabaseInstanceMapOutputWithContext(context.Context) DatabaseInstanceMapOutput
}

type DatabaseInstanceMap map[string]DatabaseInstanceInput

func (DatabaseInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseInstance)(nil)).Elem()
}

func (i DatabaseInstanceMap) ToDatabaseInstanceMapOutput() DatabaseInstanceMapOutput {
	return i.ToDatabaseInstanceMapOutputWithContext(context.Background())
}

func (i DatabaseInstanceMap) ToDatabaseInstanceMapOutputWithContext(ctx context.Context) DatabaseInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInstanceMapOutput)
}

type DatabaseInstanceOutput struct{ *pulumi.OutputState }

func (DatabaseInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseInstance)(nil)).Elem()
}

func (o DatabaseInstanceOutput) ToDatabaseInstanceOutput() DatabaseInstanceOutput {
	return o
}

func (o DatabaseInstanceOutput) ToDatabaseInstanceOutputWithContext(ctx context.Context) DatabaseInstanceOutput {
	return o
}

// The sku of the instance. Valid values are "CU_1", "CU_2", "CU_4", "CU_8"
func (o DatabaseInstanceOutput) Capacity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringPtrOutput { return v.Capacity }).(pulumi.StringPtrOutput)
}

// (string) - The timestamp when the instance was created
func (o DatabaseInstanceOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// (string) - The email of the creator of the instance
func (o DatabaseInstanceOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

// (boolean) - xref AIP-129. `stopped` is owned by the client, while `effectiveStopped` is owned by the server.
// `stopped` will only be set in Create/Update response messages if and only if the user provides the field via the request.
// `effectiveStopped` on the other hand will always bet set in all response messages (Create/Update/Get/List)
func (o DatabaseInstanceOutput) EffectiveStopped() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.BoolOutput { return v.EffectiveStopped }).(pulumi.BoolOutput)
}

// The name of the instance. This is the unique identifier for the instance
func (o DatabaseInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (string) - The version of Postgres running on the instance
func (o DatabaseInstanceOutput) PgVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.PgVersion }).(pulumi.StringOutput)
}

// (string) - The DNS endpoint to connect to the instance for read+write access
func (o DatabaseInstanceOutput) ReadWriteDns() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.ReadWriteDns }).(pulumi.StringOutput)
}

// (string) - The current state of the instance. Possible values are: `AVAILABLE`, `DELETING`, `FAILING_OVER`, `STARTING`, `STOPPED`, `UPDATING`
func (o DatabaseInstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Whether the instance is stopped
func (o DatabaseInstanceOutput) Stopped() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.BoolPtrOutput { return v.Stopped }).(pulumi.BoolPtrOutput)
}

// (string) - An immutable UUID identifier for the instance
func (o DatabaseInstanceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseInstance) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

type DatabaseInstanceArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseInstance)(nil)).Elem()
}

func (o DatabaseInstanceArrayOutput) ToDatabaseInstanceArrayOutput() DatabaseInstanceArrayOutput {
	return o
}

func (o DatabaseInstanceArrayOutput) ToDatabaseInstanceArrayOutputWithContext(ctx context.Context) DatabaseInstanceArrayOutput {
	return o
}

func (o DatabaseInstanceArrayOutput) Index(i pulumi.IntInput) DatabaseInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseInstance {
		return vs[0].([]*DatabaseInstance)[vs[1].(int)]
	}).(DatabaseInstanceOutput)
}

type DatabaseInstanceMapOutput struct{ *pulumi.OutputState }

func (DatabaseInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseInstance)(nil)).Elem()
}

func (o DatabaseInstanceMapOutput) ToDatabaseInstanceMapOutput() DatabaseInstanceMapOutput {
	return o
}

func (o DatabaseInstanceMapOutput) ToDatabaseInstanceMapOutputWithContext(ctx context.Context) DatabaseInstanceMapOutput {
	return o
}

func (o DatabaseInstanceMapOutput) MapIndex(k pulumi.StringInput) DatabaseInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseInstance {
		return vs[0].(map[string]*DatabaseInstance)[vs[1].(string)]
	}).(DatabaseInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInstanceInput)(nil)).Elem(), &DatabaseInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInstanceArrayInput)(nil)).Elem(), DatabaseInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInstanceMapInput)(nil)).Elem(), DatabaseInstanceMap{})
	pulumi.RegisterOutputType(DatabaseInstanceOutput{})
	pulumi.RegisterOutputType(DatabaseInstanceArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInstanceMapOutput{})
}
