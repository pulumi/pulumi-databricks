// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Repo struct {
	pulumi.CustomResourceState

	Branch         pulumi.StringOutput         `pulumi:"branch"`
	CommitHash     pulumi.StringOutput         `pulumi:"commitHash"`
	GitProvider    pulumi.StringOutput         `pulumi:"gitProvider"`
	Path           pulumi.StringOutput         `pulumi:"path"`
	SparseCheckout RepoSparseCheckoutPtrOutput `pulumi:"sparseCheckout"`
	Tag            pulumi.StringPtrOutput      `pulumi:"tag"`
	Url            pulumi.StringOutput         `pulumi:"url"`
	WorkspacePath  pulumi.StringOutput         `pulumi:"workspacePath"`
}

// NewRepo registers a new resource with the given unique name, arguments, and options.
func NewRepo(ctx *pulumi.Context,
	name string, args *RepoArgs, opts ...pulumi.ResourceOption) (*Repo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Repo
	err := ctx.RegisterResource("databricks:index/repo:Repo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepo gets an existing Repo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepoState, opts ...pulumi.ResourceOption) (*Repo, error) {
	var resource Repo
	err := ctx.ReadResource("databricks:index/repo:Repo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repo resources.
type repoState struct {
	Branch         *string             `pulumi:"branch"`
	CommitHash     *string             `pulumi:"commitHash"`
	GitProvider    *string             `pulumi:"gitProvider"`
	Path           *string             `pulumi:"path"`
	SparseCheckout *RepoSparseCheckout `pulumi:"sparseCheckout"`
	Tag            *string             `pulumi:"tag"`
	Url            *string             `pulumi:"url"`
	WorkspacePath  *string             `pulumi:"workspacePath"`
}

type RepoState struct {
	Branch         pulumi.StringPtrInput
	CommitHash     pulumi.StringPtrInput
	GitProvider    pulumi.StringPtrInput
	Path           pulumi.StringPtrInput
	SparseCheckout RepoSparseCheckoutPtrInput
	Tag            pulumi.StringPtrInput
	Url            pulumi.StringPtrInput
	WorkspacePath  pulumi.StringPtrInput
}

func (RepoState) ElementType() reflect.Type {
	return reflect.TypeOf((*repoState)(nil)).Elem()
}

type repoArgs struct {
	Branch         *string             `pulumi:"branch"`
	CommitHash     *string             `pulumi:"commitHash"`
	GitProvider    *string             `pulumi:"gitProvider"`
	Path           *string             `pulumi:"path"`
	SparseCheckout *RepoSparseCheckout `pulumi:"sparseCheckout"`
	Tag            *string             `pulumi:"tag"`
	Url            string              `pulumi:"url"`
}

// The set of arguments for constructing a Repo resource.
type RepoArgs struct {
	Branch         pulumi.StringPtrInput
	CommitHash     pulumi.StringPtrInput
	GitProvider    pulumi.StringPtrInput
	Path           pulumi.StringPtrInput
	SparseCheckout RepoSparseCheckoutPtrInput
	Tag            pulumi.StringPtrInput
	Url            pulumi.StringInput
}

func (RepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repoArgs)(nil)).Elem()
}

type RepoInput interface {
	pulumi.Input

	ToRepoOutput() RepoOutput
	ToRepoOutputWithContext(ctx context.Context) RepoOutput
}

func (*Repo) ElementType() reflect.Type {
	return reflect.TypeOf((**Repo)(nil)).Elem()
}

func (i *Repo) ToRepoOutput() RepoOutput {
	return i.ToRepoOutputWithContext(context.Background())
}

func (i *Repo) ToRepoOutputWithContext(ctx context.Context) RepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoOutput)
}

// RepoArrayInput is an input type that accepts RepoArray and RepoArrayOutput values.
// You can construct a concrete instance of `RepoArrayInput` via:
//
//	RepoArray{ RepoArgs{...} }
type RepoArrayInput interface {
	pulumi.Input

	ToRepoArrayOutput() RepoArrayOutput
	ToRepoArrayOutputWithContext(context.Context) RepoArrayOutput
}

type RepoArray []RepoInput

func (RepoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repo)(nil)).Elem()
}

func (i RepoArray) ToRepoArrayOutput() RepoArrayOutput {
	return i.ToRepoArrayOutputWithContext(context.Background())
}

func (i RepoArray) ToRepoArrayOutputWithContext(ctx context.Context) RepoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoArrayOutput)
}

// RepoMapInput is an input type that accepts RepoMap and RepoMapOutput values.
// You can construct a concrete instance of `RepoMapInput` via:
//
//	RepoMap{ "key": RepoArgs{...} }
type RepoMapInput interface {
	pulumi.Input

	ToRepoMapOutput() RepoMapOutput
	ToRepoMapOutputWithContext(context.Context) RepoMapOutput
}

type RepoMap map[string]RepoInput

func (RepoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repo)(nil)).Elem()
}

func (i RepoMap) ToRepoMapOutput() RepoMapOutput {
	return i.ToRepoMapOutputWithContext(context.Background())
}

func (i RepoMap) ToRepoMapOutputWithContext(ctx context.Context) RepoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoMapOutput)
}

type RepoOutput struct{ *pulumi.OutputState }

func (RepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Repo)(nil)).Elem()
}

func (o RepoOutput) ToRepoOutput() RepoOutput {
	return o
}

func (o RepoOutput) ToRepoOutputWithContext(ctx context.Context) RepoOutput {
	return o
}

func (o RepoOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.Branch }).(pulumi.StringOutput)
}

func (o RepoOutput) CommitHash() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.CommitHash }).(pulumi.StringOutput)
}

func (o RepoOutput) GitProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.GitProvider }).(pulumi.StringOutput)
}

func (o RepoOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

func (o RepoOutput) SparseCheckout() RepoSparseCheckoutPtrOutput {
	return o.ApplyT(func(v *Repo) RepoSparseCheckoutPtrOutput { return v.SparseCheckout }).(RepoSparseCheckoutPtrOutput)
}

func (o RepoOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringPtrOutput { return v.Tag }).(pulumi.StringPtrOutput)
}

func (o RepoOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o RepoOutput) WorkspacePath() pulumi.StringOutput {
	return o.ApplyT(func(v *Repo) pulumi.StringOutput { return v.WorkspacePath }).(pulumi.StringOutput)
}

type RepoArrayOutput struct{ *pulumi.OutputState }

func (RepoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repo)(nil)).Elem()
}

func (o RepoArrayOutput) ToRepoArrayOutput() RepoArrayOutput {
	return o
}

func (o RepoArrayOutput) ToRepoArrayOutputWithContext(ctx context.Context) RepoArrayOutput {
	return o
}

func (o RepoArrayOutput) Index(i pulumi.IntInput) RepoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Repo {
		return vs[0].([]*Repo)[vs[1].(int)]
	}).(RepoOutput)
}

type RepoMapOutput struct{ *pulumi.OutputState }

func (RepoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repo)(nil)).Elem()
}

func (o RepoMapOutput) ToRepoMapOutput() RepoMapOutput {
	return o
}

func (o RepoMapOutput) ToRepoMapOutputWithContext(ctx context.Context) RepoMapOutput {
	return o
}

func (o RepoMapOutput) MapIndex(k pulumi.StringInput) RepoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Repo {
		return vs[0].(map[string]*Repo)[vs[1].(string)]
	}).(RepoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepoInput)(nil)).Elem(), &Repo{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoArrayInput)(nil)).Elem(), RepoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoMapInput)(nil)).Elem(), RepoMap{})
	pulumi.RegisterOutputType(RepoOutput{})
	pulumi.RegisterOutputType(RepoArrayOutput{})
	pulumi.RegisterOutputType(RepoMapOutput{})
}
