// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.GetNotebookPaths(ctx, &databricks.GetNotebookPathsArgs{
//				Path:      "/Production",
//				Recursive: true,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNotebookPaths(ctx *pulumi.Context, args *GetNotebookPathsArgs, opts ...pulumi.InvokeOption) (*GetNotebookPathsResult, error) {
	var rv GetNotebookPathsResult
	err := ctx.Invoke("databricks:index/getNotebookPaths:getNotebookPaths", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNotebookPaths.
type GetNotebookPathsArgs struct {
	// Path to workspace directory
	Path string `pulumi:"path"`
	// Either or recursively walk given path
	Recursive bool `pulumi:"recursive"`
}

// A collection of values returned by getNotebookPaths.
type GetNotebookPathsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// list of objects with `path` and `language` attributes
	NotebookPathLists []GetNotebookPathsNotebookPathList `pulumi:"notebookPathLists"`
	Path              string                             `pulumi:"path"`
	Recursive         bool                               `pulumi:"recursive"`
}

func GetNotebookPathsOutput(ctx *pulumi.Context, args GetNotebookPathsOutputArgs, opts ...pulumi.InvokeOption) GetNotebookPathsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNotebookPathsResult, error) {
			args := v.(GetNotebookPathsArgs)
			r, err := GetNotebookPaths(ctx, &args, opts...)
			var s GetNotebookPathsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetNotebookPathsResultOutput)
}

// A collection of arguments for invoking getNotebookPaths.
type GetNotebookPathsOutputArgs struct {
	// Path to workspace directory
	Path pulumi.StringInput `pulumi:"path"`
	// Either or recursively walk given path
	Recursive pulumi.BoolInput `pulumi:"recursive"`
}

func (GetNotebookPathsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNotebookPathsArgs)(nil)).Elem()
}

// A collection of values returned by getNotebookPaths.
type GetNotebookPathsResultOutput struct{ *pulumi.OutputState }

func (GetNotebookPathsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNotebookPathsResult)(nil)).Elem()
}

func (o GetNotebookPathsResultOutput) ToGetNotebookPathsResultOutput() GetNotebookPathsResultOutput {
	return o
}

func (o GetNotebookPathsResultOutput) ToGetNotebookPathsResultOutputWithContext(ctx context.Context) GetNotebookPathsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetNotebookPathsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotebookPathsResult) string { return v.Id }).(pulumi.StringOutput)
}

// list of objects with `path` and `language` attributes
func (o GetNotebookPathsResultOutput) NotebookPathLists() GetNotebookPathsNotebookPathListArrayOutput {
	return o.ApplyT(func(v GetNotebookPathsResult) []GetNotebookPathsNotebookPathList { return v.NotebookPathLists }).(GetNotebookPathsNotebookPathListArrayOutput)
}

func (o GetNotebookPathsResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotebookPathsResult) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetNotebookPathsResultOutput) Recursive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNotebookPathsResult) bool { return v.Recursive }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNotebookPathsResultOutput{})
}
