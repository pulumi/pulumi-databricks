// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Note** If you have a fully automated setup with workspaces created by databricks_mws_workspaces, please make sure to add dependsOn attribute in order to prevent _default auth: cannot configure default credentials_ errors.
//
// Retrieves information about a getSqlWarehouse using its id. This could be retrieved programmatically using getSqlWarehouses data source.
//
// ## Example Usage
//
// * Retrieve attributes of each SQL warehouses in a workspace:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.GetSqlWarehouses(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_ := "TODO: For expression"
//			return nil
//		})
//	}
//
// ```
//
// * Search for a specific SQL Warehouse by name:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.GetSqlWarehouse(ctx, &databricks.GetSqlWarehouseArgs{
//				Name: pulumi.StringRef("Starter Warehouse"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Related resources
//
// The following resources are often used in the same context:
//
// * End to end workspace management guide.
// * InstanceProfile to manage AWS EC2 instance profiles that users can launch Cluster and access data, like databricks_mount.
// * SqlDashboard to manage Databricks SQL [Dashboards](https://docs.databricks.com/sql/user/dashboards/index.html).
// * SqlGlobalConfig to configure the security policy, databricks_instance_profile, and [data access properties](https://docs.databricks.com/sql/admin/data-access-configuration.html) for all getSqlWarehouse of workspace.
// * SqlPermissions to manage data object access control lists in Databricks workspaces for things like tables, views, databases, and [more](https://docs.databricks.com/security/access-control/table-acls/object-privileges.html).
func GetSqlWarehouse(ctx *pulumi.Context, args *GetSqlWarehouseArgs, opts ...pulumi.InvokeOption) (*GetSqlWarehouseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSqlWarehouseResult
	err := ctx.Invoke("databricks:index/getSqlWarehouse:getSqlWarehouse", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlWarehouse.
type GetSqlWarehouseArgs struct {
	// Time in minutes until an idle SQL warehouse terminates all clusters and stops.
	AutoStopMins *int `pulumi:"autoStopMins"`
	// block, consisting of following fields:
	Channel *GetSqlWarehouseChannel `pulumi:"channel"`
	// The size of the clusters allocated to the warehouse: "2X-Small", "X-Small", "Small", "Medium", "Large", "X-Large", "2X-Large", "3X-Large", "4X-Large".
	ClusterSize *string `pulumi:"clusterSize"`
	// ID of the data source for this warehouse. This is used to bind an Databricks SQL query to an warehouse.
	DataSourceId *string `pulumi:"dataSourceId"`
	// Whether [Photon](https://databricks.com/product/delta-engine) is enabled.
	EnablePhoton *bool `pulumi:"enablePhoton"`
	// Whether this SQL warehouse is a serverless SQL warehouse.
	EnableServerlessCompute *bool `pulumi:"enableServerlessCompute"`
	// The ID of the SQL warehouse.
	Id                 *string `pulumi:"id"`
	InstanceProfileArn *string `pulumi:"instanceProfileArn"`
	// JDBC connection string.
	JdbcUrl *string `pulumi:"jdbcUrl"`
	// Maximum number of clusters available when a SQL warehouse is running.
	MaxNumClusters *int `pulumi:"maxNumClusters"`
	// Minimum number of clusters available when a SQL warehouse is running.
	MinNumClusters *int `pulumi:"minNumClusters"`
	// Name of the SQL warehouse to search (case-sensitive).
	Name        *string `pulumi:"name"`
	NumClusters *int    `pulumi:"numClusters"`
	// ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
	OdbcParams *GetSqlWarehouseOdbcParams `pulumi:"odbcParams"`
	// The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`.
	SpotInstancePolicy *string `pulumi:"spotInstancePolicy"`
	State              *string `pulumi:"state"`
	// tags used for SQL warehouse resources.
	Tags *GetSqlWarehouseTags `pulumi:"tags"`
}

// A collection of values returned by getSqlWarehouse.
type GetSqlWarehouseResult struct {
	// Time in minutes until an idle SQL warehouse terminates all clusters and stops.
	AutoStopMins int `pulumi:"autoStopMins"`
	// block, consisting of following fields:
	Channel GetSqlWarehouseChannel `pulumi:"channel"`
	// The size of the clusters allocated to the warehouse: "2X-Small", "X-Small", "Small", "Medium", "Large", "X-Large", "2X-Large", "3X-Large", "4X-Large".
	ClusterSize string `pulumi:"clusterSize"`
	// ID of the data source for this warehouse. This is used to bind an Databricks SQL query to an warehouse.
	DataSourceId string `pulumi:"dataSourceId"`
	// Whether [Photon](https://databricks.com/product/delta-engine) is enabled.
	EnablePhoton bool `pulumi:"enablePhoton"`
	// Whether this SQL warehouse is a serverless SQL warehouse.
	EnableServerlessCompute bool `pulumi:"enableServerlessCompute"`
	// The ID of the SQL warehouse.
	Id                 string `pulumi:"id"`
	InstanceProfileArn string `pulumi:"instanceProfileArn"`
	// JDBC connection string.
	JdbcUrl string `pulumi:"jdbcUrl"`
	// Maximum number of clusters available when a SQL warehouse is running.
	MaxNumClusters int `pulumi:"maxNumClusters"`
	// Minimum number of clusters available when a SQL warehouse is running.
	MinNumClusters int `pulumi:"minNumClusters"`
	// Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
	Name        string `pulumi:"name"`
	NumClusters int    `pulumi:"numClusters"`
	// ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
	OdbcParams GetSqlWarehouseOdbcParams `pulumi:"odbcParams"`
	// The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`.
	SpotInstancePolicy string `pulumi:"spotInstancePolicy"`
	State              string `pulumi:"state"`
	// tags used for SQL warehouse resources.
	Tags GetSqlWarehouseTags `pulumi:"tags"`
}

func GetSqlWarehouseOutput(ctx *pulumi.Context, args GetSqlWarehouseOutputArgs, opts ...pulumi.InvokeOption) GetSqlWarehouseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSqlWarehouseResult, error) {
			args := v.(GetSqlWarehouseArgs)
			r, err := GetSqlWarehouse(ctx, &args, opts...)
			var s GetSqlWarehouseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSqlWarehouseResultOutput)
}

// A collection of arguments for invoking getSqlWarehouse.
type GetSqlWarehouseOutputArgs struct {
	// Time in minutes until an idle SQL warehouse terminates all clusters and stops.
	AutoStopMins pulumi.IntPtrInput `pulumi:"autoStopMins"`
	// block, consisting of following fields:
	Channel GetSqlWarehouseChannelPtrInput `pulumi:"channel"`
	// The size of the clusters allocated to the warehouse: "2X-Small", "X-Small", "Small", "Medium", "Large", "X-Large", "2X-Large", "3X-Large", "4X-Large".
	ClusterSize pulumi.StringPtrInput `pulumi:"clusterSize"`
	// ID of the data source for this warehouse. This is used to bind an Databricks SQL query to an warehouse.
	DataSourceId pulumi.StringPtrInput `pulumi:"dataSourceId"`
	// Whether [Photon](https://databricks.com/product/delta-engine) is enabled.
	EnablePhoton pulumi.BoolPtrInput `pulumi:"enablePhoton"`
	// Whether this SQL warehouse is a serverless SQL warehouse.
	EnableServerlessCompute pulumi.BoolPtrInput `pulumi:"enableServerlessCompute"`
	// The ID of the SQL warehouse.
	Id                 pulumi.StringPtrInput `pulumi:"id"`
	InstanceProfileArn pulumi.StringPtrInput `pulumi:"instanceProfileArn"`
	// JDBC connection string.
	JdbcUrl pulumi.StringPtrInput `pulumi:"jdbcUrl"`
	// Maximum number of clusters available when a SQL warehouse is running.
	MaxNumClusters pulumi.IntPtrInput `pulumi:"maxNumClusters"`
	// Minimum number of clusters available when a SQL warehouse is running.
	MinNumClusters pulumi.IntPtrInput `pulumi:"minNumClusters"`
	// Name of the SQL warehouse to search (case-sensitive).
	Name        pulumi.StringPtrInput `pulumi:"name"`
	NumClusters pulumi.IntPtrInput    `pulumi:"numClusters"`
	// ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
	OdbcParams GetSqlWarehouseOdbcParamsPtrInput `pulumi:"odbcParams"`
	// The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`.
	SpotInstancePolicy pulumi.StringPtrInput `pulumi:"spotInstancePolicy"`
	State              pulumi.StringPtrInput `pulumi:"state"`
	// tags used for SQL warehouse resources.
	Tags GetSqlWarehouseTagsPtrInput `pulumi:"tags"`
}

func (GetSqlWarehouseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlWarehouseArgs)(nil)).Elem()
}

// A collection of values returned by getSqlWarehouse.
type GetSqlWarehouseResultOutput struct{ *pulumi.OutputState }

func (GetSqlWarehouseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlWarehouseResult)(nil)).Elem()
}

func (o GetSqlWarehouseResultOutput) ToGetSqlWarehouseResultOutput() GetSqlWarehouseResultOutput {
	return o
}

func (o GetSqlWarehouseResultOutput) ToGetSqlWarehouseResultOutputWithContext(ctx context.Context) GetSqlWarehouseResultOutput {
	return o
}

// Time in minutes until an idle SQL warehouse terminates all clusters and stops.
func (o GetSqlWarehouseResultOutput) AutoStopMins() pulumi.IntOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) int { return v.AutoStopMins }).(pulumi.IntOutput)
}

// block, consisting of following fields:
func (o GetSqlWarehouseResultOutput) Channel() GetSqlWarehouseChannelOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) GetSqlWarehouseChannel { return v.Channel }).(GetSqlWarehouseChannelOutput)
}

// The size of the clusters allocated to the warehouse: "2X-Small", "X-Small", "Small", "Medium", "Large", "X-Large", "2X-Large", "3X-Large", "4X-Large".
func (o GetSqlWarehouseResultOutput) ClusterSize() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) string { return v.ClusterSize }).(pulumi.StringOutput)
}

// ID of the data source for this warehouse. This is used to bind an Databricks SQL query to an warehouse.
func (o GetSqlWarehouseResultOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) string { return v.DataSourceId }).(pulumi.StringOutput)
}

// Whether [Photon](https://databricks.com/product/delta-engine) is enabled.
func (o GetSqlWarehouseResultOutput) EnablePhoton() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) bool { return v.EnablePhoton }).(pulumi.BoolOutput)
}

// Whether this SQL warehouse is a serverless SQL warehouse.
func (o GetSqlWarehouseResultOutput) EnableServerlessCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) bool { return v.EnableServerlessCompute }).(pulumi.BoolOutput)
}

// The ID of the SQL warehouse.
func (o GetSqlWarehouseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSqlWarehouseResultOutput) InstanceProfileArn() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) string { return v.InstanceProfileArn }).(pulumi.StringOutput)
}

// JDBC connection string.
func (o GetSqlWarehouseResultOutput) JdbcUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) string { return v.JdbcUrl }).(pulumi.StringOutput)
}

// Maximum number of clusters available when a SQL warehouse is running.
func (o GetSqlWarehouseResultOutput) MaxNumClusters() pulumi.IntOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) int { return v.MaxNumClusters }).(pulumi.IntOutput)
}

// Minimum number of clusters available when a SQL warehouse is running.
func (o GetSqlWarehouseResultOutput) MinNumClusters() pulumi.IntOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) int { return v.MinNumClusters }).(pulumi.IntOutput)
}

// Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
func (o GetSqlWarehouseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSqlWarehouseResultOutput) NumClusters() pulumi.IntOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) int { return v.NumClusters }).(pulumi.IntOutput)
}

// ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
func (o GetSqlWarehouseResultOutput) OdbcParams() GetSqlWarehouseOdbcParamsOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) GetSqlWarehouseOdbcParams { return v.OdbcParams }).(GetSqlWarehouseOdbcParamsOutput)
}

// The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`.
func (o GetSqlWarehouseResultOutput) SpotInstancePolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) string { return v.SpotInstancePolicy }).(pulumi.StringOutput)
}

func (o GetSqlWarehouseResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) string { return v.State }).(pulumi.StringOutput)
}

// tags used for SQL warehouse resources.
func (o GetSqlWarehouseResultOutput) Tags() GetSqlWarehouseTagsOutput {
	return o.ApplyT(func(v GetSqlWarehouseResult) GetSqlWarehouseTags { return v.Tags }).(GetSqlWarehouseTagsOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSqlWarehouseResultOutput{})
}
