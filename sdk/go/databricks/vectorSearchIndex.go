// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VectorSearchIndex struct {
	pulumi.CustomResourceState

	Creator               pulumi.StringOutput                             `pulumi:"creator"`
	DeltaSyncIndexSpec    VectorSearchIndexDeltaSyncIndexSpecPtrOutput    `pulumi:"deltaSyncIndexSpec"`
	DirectAccessIndexSpec VectorSearchIndexDirectAccessIndexSpecPtrOutput `pulumi:"directAccessIndexSpec"`
	EndpointName          pulumi.StringOutput                             `pulumi:"endpointName"`
	IndexType             pulumi.StringOutput                             `pulumi:"indexType"`
	Name                  pulumi.StringOutput                             `pulumi:"name"`
	PrimaryKey            pulumi.StringOutput                             `pulumi:"primaryKey"`
	Statuses              VectorSearchIndexStatusArrayOutput              `pulumi:"statuses"`
}

// NewVectorSearchIndex registers a new resource with the given unique name, arguments, and options.
func NewVectorSearchIndex(ctx *pulumi.Context,
	name string, args *VectorSearchIndexArgs, opts ...pulumi.ResourceOption) (*VectorSearchIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointName == nil {
		return nil, errors.New("invalid value for required argument 'EndpointName'")
	}
	if args.IndexType == nil {
		return nil, errors.New("invalid value for required argument 'IndexType'")
	}
	if args.PrimaryKey == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VectorSearchIndex
	err := ctx.RegisterResource("databricks:index/vectorSearchIndex:VectorSearchIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVectorSearchIndex gets an existing VectorSearchIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVectorSearchIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VectorSearchIndexState, opts ...pulumi.ResourceOption) (*VectorSearchIndex, error) {
	var resource VectorSearchIndex
	err := ctx.ReadResource("databricks:index/vectorSearchIndex:VectorSearchIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VectorSearchIndex resources.
type vectorSearchIndexState struct {
	Creator               *string                                 `pulumi:"creator"`
	DeltaSyncIndexSpec    *VectorSearchIndexDeltaSyncIndexSpec    `pulumi:"deltaSyncIndexSpec"`
	DirectAccessIndexSpec *VectorSearchIndexDirectAccessIndexSpec `pulumi:"directAccessIndexSpec"`
	EndpointName          *string                                 `pulumi:"endpointName"`
	IndexType             *string                                 `pulumi:"indexType"`
	Name                  *string                                 `pulumi:"name"`
	PrimaryKey            *string                                 `pulumi:"primaryKey"`
	Statuses              []VectorSearchIndexStatus               `pulumi:"statuses"`
}

type VectorSearchIndexState struct {
	Creator               pulumi.StringPtrInput
	DeltaSyncIndexSpec    VectorSearchIndexDeltaSyncIndexSpecPtrInput
	DirectAccessIndexSpec VectorSearchIndexDirectAccessIndexSpecPtrInput
	EndpointName          pulumi.StringPtrInput
	IndexType             pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	PrimaryKey            pulumi.StringPtrInput
	Statuses              VectorSearchIndexStatusArrayInput
}

func (VectorSearchIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*vectorSearchIndexState)(nil)).Elem()
}

type vectorSearchIndexArgs struct {
	DeltaSyncIndexSpec    *VectorSearchIndexDeltaSyncIndexSpec    `pulumi:"deltaSyncIndexSpec"`
	DirectAccessIndexSpec *VectorSearchIndexDirectAccessIndexSpec `pulumi:"directAccessIndexSpec"`
	EndpointName          string                                  `pulumi:"endpointName"`
	IndexType             string                                  `pulumi:"indexType"`
	Name                  *string                                 `pulumi:"name"`
	PrimaryKey            string                                  `pulumi:"primaryKey"`
}

// The set of arguments for constructing a VectorSearchIndex resource.
type VectorSearchIndexArgs struct {
	DeltaSyncIndexSpec    VectorSearchIndexDeltaSyncIndexSpecPtrInput
	DirectAccessIndexSpec VectorSearchIndexDirectAccessIndexSpecPtrInput
	EndpointName          pulumi.StringInput
	IndexType             pulumi.StringInput
	Name                  pulumi.StringPtrInput
	PrimaryKey            pulumi.StringInput
}

func (VectorSearchIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vectorSearchIndexArgs)(nil)).Elem()
}

type VectorSearchIndexInput interface {
	pulumi.Input

	ToVectorSearchIndexOutput() VectorSearchIndexOutput
	ToVectorSearchIndexOutputWithContext(ctx context.Context) VectorSearchIndexOutput
}

func (*VectorSearchIndex) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorSearchIndex)(nil)).Elem()
}

func (i *VectorSearchIndex) ToVectorSearchIndexOutput() VectorSearchIndexOutput {
	return i.ToVectorSearchIndexOutputWithContext(context.Background())
}

func (i *VectorSearchIndex) ToVectorSearchIndexOutputWithContext(ctx context.Context) VectorSearchIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorSearchIndexOutput)
}

// VectorSearchIndexArrayInput is an input type that accepts VectorSearchIndexArray and VectorSearchIndexArrayOutput values.
// You can construct a concrete instance of `VectorSearchIndexArrayInput` via:
//
//	VectorSearchIndexArray{ VectorSearchIndexArgs{...} }
type VectorSearchIndexArrayInput interface {
	pulumi.Input

	ToVectorSearchIndexArrayOutput() VectorSearchIndexArrayOutput
	ToVectorSearchIndexArrayOutputWithContext(context.Context) VectorSearchIndexArrayOutput
}

type VectorSearchIndexArray []VectorSearchIndexInput

func (VectorSearchIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VectorSearchIndex)(nil)).Elem()
}

func (i VectorSearchIndexArray) ToVectorSearchIndexArrayOutput() VectorSearchIndexArrayOutput {
	return i.ToVectorSearchIndexArrayOutputWithContext(context.Background())
}

func (i VectorSearchIndexArray) ToVectorSearchIndexArrayOutputWithContext(ctx context.Context) VectorSearchIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorSearchIndexArrayOutput)
}

// VectorSearchIndexMapInput is an input type that accepts VectorSearchIndexMap and VectorSearchIndexMapOutput values.
// You can construct a concrete instance of `VectorSearchIndexMapInput` via:
//
//	VectorSearchIndexMap{ "key": VectorSearchIndexArgs{...} }
type VectorSearchIndexMapInput interface {
	pulumi.Input

	ToVectorSearchIndexMapOutput() VectorSearchIndexMapOutput
	ToVectorSearchIndexMapOutputWithContext(context.Context) VectorSearchIndexMapOutput
}

type VectorSearchIndexMap map[string]VectorSearchIndexInput

func (VectorSearchIndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VectorSearchIndex)(nil)).Elem()
}

func (i VectorSearchIndexMap) ToVectorSearchIndexMapOutput() VectorSearchIndexMapOutput {
	return i.ToVectorSearchIndexMapOutputWithContext(context.Background())
}

func (i VectorSearchIndexMap) ToVectorSearchIndexMapOutputWithContext(ctx context.Context) VectorSearchIndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorSearchIndexMapOutput)
}

type VectorSearchIndexOutput struct{ *pulumi.OutputState }

func (VectorSearchIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorSearchIndex)(nil)).Elem()
}

func (o VectorSearchIndexOutput) ToVectorSearchIndexOutput() VectorSearchIndexOutput {
	return o
}

func (o VectorSearchIndexOutput) ToVectorSearchIndexOutputWithContext(ctx context.Context) VectorSearchIndexOutput {
	return o
}

func (o VectorSearchIndexOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorSearchIndex) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

func (o VectorSearchIndexOutput) DeltaSyncIndexSpec() VectorSearchIndexDeltaSyncIndexSpecPtrOutput {
	return o.ApplyT(func(v *VectorSearchIndex) VectorSearchIndexDeltaSyncIndexSpecPtrOutput { return v.DeltaSyncIndexSpec }).(VectorSearchIndexDeltaSyncIndexSpecPtrOutput)
}

func (o VectorSearchIndexOutput) DirectAccessIndexSpec() VectorSearchIndexDirectAccessIndexSpecPtrOutput {
	return o.ApplyT(func(v *VectorSearchIndex) VectorSearchIndexDirectAccessIndexSpecPtrOutput {
		return v.DirectAccessIndexSpec
	}).(VectorSearchIndexDirectAccessIndexSpecPtrOutput)
}

func (o VectorSearchIndexOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorSearchIndex) pulumi.StringOutput { return v.EndpointName }).(pulumi.StringOutput)
}

func (o VectorSearchIndexOutput) IndexType() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorSearchIndex) pulumi.StringOutput { return v.IndexType }).(pulumi.StringOutput)
}

func (o VectorSearchIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorSearchIndex) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VectorSearchIndexOutput) PrimaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorSearchIndex) pulumi.StringOutput { return v.PrimaryKey }).(pulumi.StringOutput)
}

func (o VectorSearchIndexOutput) Statuses() VectorSearchIndexStatusArrayOutput {
	return o.ApplyT(func(v *VectorSearchIndex) VectorSearchIndexStatusArrayOutput { return v.Statuses }).(VectorSearchIndexStatusArrayOutput)
}

type VectorSearchIndexArrayOutput struct{ *pulumi.OutputState }

func (VectorSearchIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VectorSearchIndex)(nil)).Elem()
}

func (o VectorSearchIndexArrayOutput) ToVectorSearchIndexArrayOutput() VectorSearchIndexArrayOutput {
	return o
}

func (o VectorSearchIndexArrayOutput) ToVectorSearchIndexArrayOutputWithContext(ctx context.Context) VectorSearchIndexArrayOutput {
	return o
}

func (o VectorSearchIndexArrayOutput) Index(i pulumi.IntInput) VectorSearchIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VectorSearchIndex {
		return vs[0].([]*VectorSearchIndex)[vs[1].(int)]
	}).(VectorSearchIndexOutput)
}

type VectorSearchIndexMapOutput struct{ *pulumi.OutputState }

func (VectorSearchIndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VectorSearchIndex)(nil)).Elem()
}

func (o VectorSearchIndexMapOutput) ToVectorSearchIndexMapOutput() VectorSearchIndexMapOutput {
	return o
}

func (o VectorSearchIndexMapOutput) ToVectorSearchIndexMapOutputWithContext(ctx context.Context) VectorSearchIndexMapOutput {
	return o
}

func (o VectorSearchIndexMapOutput) MapIndex(k pulumi.StringInput) VectorSearchIndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VectorSearchIndex {
		return vs[0].(map[string]*VectorSearchIndex)[vs[1].(string)]
	}).(VectorSearchIndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VectorSearchIndexInput)(nil)).Elem(), &VectorSearchIndex{})
	pulumi.RegisterInputType(reflect.TypeOf((*VectorSearchIndexArrayInput)(nil)).Elem(), VectorSearchIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VectorSearchIndexMapInput)(nil)).Elem(), VectorSearchIndexMap{})
	pulumi.RegisterOutputType(VectorSearchIndexOutput{})
	pulumi.RegisterOutputType(VectorSearchIndexArrayOutput{})
	pulumi.RegisterOutputType(VectorSearchIndexMapOutput{})
}
