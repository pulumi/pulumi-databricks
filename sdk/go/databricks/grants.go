// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > This article refers to the privileges and inheritance model in Privilege Model version 1.0. If you created your metastore during the public preview (before August 25, 2022), you can upgrade to Privilege Model version 1.0 following [Upgrade to privilege inheritance](https://docs.databricks.com/data-governance/unity-catalog/hive-metastore.html)
//
// > Most of Unity Catalog APIs are only accessible via **workspace-level APIs**. This design may change in the future. Account-level principal grants can be assigned with any valid workspace as the Unity Catalog is decoupled from specific workspaces. More information in [the official documentation](https://docs.databricks.com/data-governance/unity-catalog/index.html).
//
// Two different resources help you manage your Unity Catalog grants for a securable. Each of these resources serves a different use case:
//
// - databricks_grants: Authoritative. Sets the grants of a securable and *replaces* any existing grants defined inside or outside of Pulumi.
// - databricks_grant: Authoritative for a given principal. Updates the grants of a securable to a single principal. Other principals within the grants for the securables are preserved.
//
// In Unity Catalog all users initially have no access to data. Only Metastore Admins can create objects and can grant/revoke access on individual objects to users and groups. Every securable object in Unity Catalog has an owner. The owner can be any account-level user or group, called principals in general. The principal that creates an object becomes its owner. Owners receive `ALL_PRIVILEGES` on the securable object (e.g., `SELECT` and `MODIFY` on a table), as well as the permission to grant privileges to other principals.
//
// Securable objects are hierarchical and privileges are inherited downward. The highest level object that privileges are inherited from is the catalog. This means that granting a privilege on a catalog or schema automatically grants the privilege to all current and future objects within the catalog or schema. Privileges that are granted on a metastore are not inherited.
//
// Every `Grants` resource must have exactly one securable identifier and one or more `grant` blocks with the following arguments:
//
// - `principal` - User name, group name or service principal application ID.
// - `privileges` - One or more privileges that are specific to a securable type.
//
// For the latest list of privilege types that apply to each securable object in Unity Catalog, please refer to the [official documentation](https://docs.databricks.com/en/data-governance/unity-catalog/manage-privileges/privileges.html#privilege-types-by-securable-object-in-unity-catalog)
//
// Pulumi will handle any configuration drift on every `pulumi up` run, even when grants are changed outside of Pulumi state.
//
// When applying grants using an identity with [`MANAGE` permission](https://docs.databricks.com/aws/en/data-governance/unity-catalog/manage-privileges/ownership#ownership-versus-the-manage-privilege), their `MANAGE` permission must also be defined, otherwise Pulumi will remove their permissions, leading to errors.
//
// Unlike the [SQL specification](https://docs.databricks.com/sql/language-manual/sql-ref-privileges.html#privilege-types), all privileges to be written with underscore instead of space, e.g. `CREATE_TABLE` and not `CREATE TABLE`. Below summarizes which privilege types apply to each securable object in the catalog:
//
// ## Metastore grants
//
// You can grant `CREATE_CATALOG`, `CREATE_CLEAN_ROOM`, `CREATE_CONNECTION`, `CREATE_EXTERNAL_LOCATION`, `CREATE_PROVIDER`, `CREATE_RECIPIENT`, `CREATE_SHARE`, `CREATE_SERVICE_CREDENTIAL`, `CREATE_STORAGE_CREDENTIAL`, `SET_SHARE_PERMISSION`, `USE_MARKETPLACE_ASSETS`, `USE_PROVIDER`, `USE_RECIPIENT`, and `USE_SHARE` privileges to Metastore assigned to the workspace.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewGrants(ctx, "sandbox", &databricks.GrantsArgs{
//				Metastore: pulumi.String("metastore_id"),
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Engineers"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("CREATE_CATALOG"),
//							pulumi.String("CREATE_EXTERNAL_LOCATION"),
//						},
//					},
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Sharer"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("CREATE_RECIPIENT"),
//							pulumi.String("CREATE_SHARE"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Catalog grants
//
// You can grant `ALL_PRIVILEGES`, `APPLY_TAG`, `CREATE_CONNECTION`, `CREATE_SCHEMA`, `MANAGE`, and `USE_CATALOG` privileges to Catalog specified in the `catalog` attribute. You can also grant `CREATE_FUNCTION`, `CREATE_TABLE`, `CREATE_VOLUME`, `EXECUTE`, `MODIFY`, `REFRESH`, `SELECT`, `READ_VOLUME`, `WRITE_VOLUME` and `USE_SCHEMA` at the catalog level to apply them to the pertinent current and future securable objects within the catalog:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sandbox, err := databricks.NewCatalog(ctx, "sandbox", &databricks.CatalogArgs{
//				Name:    pulumi.String("sandbox"),
//				Comment: pulumi.String("this catalog is managed by terraform"),
//				Properties: pulumi.StringMap{
//					"purpose": pulumi.String("testing"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrants(ctx, "sandbox", &databricks.GrantsArgs{
//				Catalog: sandbox.Name,
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Scientists"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("USE_CATALOG"),
//							pulumi.String("USE_SCHEMA"),
//							pulumi.String("CREATE_TABLE"),
//							pulumi.String("SELECT"),
//						},
//					},
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Engineers"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("USE_CATALOG"),
//							pulumi.String("USE_SCHEMA"),
//							pulumi.String("CREATE_SCHEMA"),
//							pulumi.String("CREATE_TABLE"),
//							pulumi.String("MODIFY"),
//						},
//					},
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Analyst"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("USE_CATALOG"),
//							pulumi.String("USE_SCHEMA"),
//							pulumi.String("SELECT"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Schema grants
//
// You can grant `ALL_PRIVILEGES`, `APPLY_TAG`, `CREATE_FUNCTION`, `CREATE_TABLE`, `CREATE_VOLUME`, `MANAGE` and `USE_SCHEMA` privileges to *`catalog.schema`* specified in the `schema` attribute. You can also grant `EXECUTE`, `MODIFY`, `REFRESH`, `SELECT`, `READ_VOLUME`, `WRITE_VOLUME` at the schema level to apply them to the pertinent current and future securable objects within the schema:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			things, err := databricks.NewSchema(ctx, "things", &databricks.SchemaArgs{
//				CatalogName: pulumi.Any(sandbox.Id),
//				Name:        pulumi.String("things"),
//				Comment:     pulumi.String("this schema is managed by terraform"),
//				Properties: pulumi.StringMap{
//					"kind": pulumi.String("various"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrants(ctx, "things", &databricks.GrantsArgs{
//				Schema: things.ID(),
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Engineers"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("USE_SCHEMA"),
//							pulumi.String("MODIFY"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Table grants
//
// You can grant `ALL_PRIVILEGES`, `APPLY_TAG`, `MANAGE`, `SELECT` and `MODIFY` privileges to *`catalog.schema.table`* specified in the `table` attribute.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewGrants(ctx, "customers", &databricks.GrantsArgs{
//				Table: pulumi.String("main.reporting.customers"),
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Engineers"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("MODIFY"),
//							pulumi.String("SELECT"),
//						},
//					},
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Analysts"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("SELECT"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// You can also apply grants dynamically with getTables data resource:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			things, err := databricks.GetTables(ctx, &databricks.GetTablesArgs{
//				CatalogName: "sandbox",
//				SchemaName:  "things",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var thingsGrants []*databricks.Grants
//			for key0, val0 := range things.Ids {
//				__res, err := databricks.NewGrants(ctx, fmt.Sprintf("things-%v", key0), &databricks.GrantsArgs{
//					Table: pulumi.String(val0),
//					Grants: databricks.GrantsGrantArray{
//						&databricks.GrantsGrantArgs{
//							Principal: pulumi.String("sensitive"),
//							Privileges: pulumi.StringArray{
//								pulumi.String("SELECT"),
//								pulumi.String("MODIFY"),
//							},
//						},
//					},
//				})
//				if err != nil {
//					return err
//				}
//				thingsGrants = append(thingsGrants, __res)
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## View grants
//
// You can grant `ALL_PRIVILEGES`, `APPLY_TAG`, `MANAGE` and `SELECT` privileges to *`catalog.schema.view`* specified in `table` attribute.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewGrants(ctx, "customer360", &databricks.GrantsArgs{
//				Table: pulumi.String("main.reporting.customer360"),
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Analysts"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("SELECT"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// You can also apply grants dynamically with getViews data resource:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			customers, err := databricks.GetViews(ctx, &databricks.GetViewsArgs{
//				CatalogName: "main",
//				SchemaName:  "customers",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var customersGrants []*databricks.Grants
//			for key0, val0 := range customers.Ids {
//				__res, err := databricks.NewGrants(ctx, fmt.Sprintf("customers-%v", key0), &databricks.GrantsArgs{
//					Table: pulumi.String(val0),
//					Grants: databricks.GrantsGrantArray{
//						&databricks.GrantsGrantArgs{
//							Principal: pulumi.String("sensitive"),
//							Privileges: pulumi.StringArray{
//								pulumi.String("SELECT"),
//								pulumi.String("MODIFY"),
//							},
//						},
//					},
//				})
//				if err != nil {
//					return err
//				}
//				customersGrants = append(customersGrants, __res)
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Volume grants
//
// You can grant `ALL_PRIVILEGES`, `MANAGE`, `READ_VOLUME` and `WRITE_VOLUME` privileges to *`catalog.schema.volume`* specified in the `volume` attribute.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			this, err := databricks.NewVolume(ctx, "this", &databricks.VolumeArgs{
//				Name:            pulumi.String("quickstart_volume"),
//				CatalogName:     pulumi.Any(sandbox.Name),
//				SchemaName:      pulumi.Any(things.Name),
//				VolumeType:      pulumi.String("EXTERNAL"),
//				StorageLocation: pulumi.Any(some.Url),
//				Comment:         pulumi.String("this volume is managed by terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrants(ctx, "volume", &databricks.GrantsArgs{
//				Volume: this.ID(),
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Engineers"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("WRITE_VOLUME"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Registered model grants
//
// You can grant `ALL_PRIVILEGES`, `APPLY_TAG`, `EXECUTE`, and `MANAGE` privileges to *`catalog.schema.model`* specified in the `model` attribute.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewGrants(ctx, "customers", &databricks.GrantsArgs{
//				Model: pulumi.String("main.reporting.customer_model"),
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Engineers"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("APPLY_TAG"),
//							pulumi.String("EXECUTE"),
//						},
//					},
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Analysts"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("EXECUTE"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Function grants
//
// You can grant `ALL_PRIVILEGES`, `EXECUTE`, and `MANAGE` privileges to *`catalog.schema.function`* specified in the `function` attribute.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewGrants(ctx, "udf", &databricks.GrantsArgs{
//				Function: pulumi.String("main.reporting.udf"),
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Engineers"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("EXECUTE"),
//						},
//					},
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Analysts"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("EXECUTE"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Service credential grants
//
// You can grant `ALL_PRIVILEGES`, `ACCESS`, `CREATE_CONNECTION`, and `MANAGE` privileges to Credential id specified in `credential` attribute:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			external, err := databricks.NewCredential(ctx, "external", &databricks.CredentialArgs{
//				Name: pulumi.Any(externalDataAccess.Name),
//				AwsIamRole: &databricks.CredentialAwsIamRoleArgs{
//					RoleArn: pulumi.Any(externalDataAccess.Arn),
//				},
//				Purpose: pulumi.String("SERVICE"),
//				Comment: pulumi.String("Managed by TF"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrants(ctx, "external_creds", &databricks.GrantsArgs{
//				Credential: external.ID(),
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Engineers"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("CREATE_CONNECTION"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Storage credential grants
//
// You can grant `ALL_PRIVILEGES`, `CREATE_EXTERNAL_LOCATION`, `CREATE_EXTERNAL_TABLE`, `MANAGE`, `READ_FILES` and `WRITE_FILES` privileges to StorageCredential id specified in `storageCredential` attribute:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			external, err := databricks.NewStorageCredential(ctx, "external", &databricks.StorageCredentialArgs{
//				Name: pulumi.Any(externalDataAccess.Name),
//				AwsIamRole: &databricks.StorageCredentialAwsIamRoleArgs{
//					RoleArn: pulumi.Any(externalDataAccess.Arn),
//				},
//				Comment: pulumi.String("Managed by TF"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrants(ctx, "external_creds", &databricks.GrantsArgs{
//				StorageCredential: external.ID(),
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Engineers"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("CREATE_EXTERNAL_TABLE"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## External location grants
//
// You can grant `ALL_PRIVILEGES`, `CREATE_EXTERNAL_TABLE`, `CREATE_MANAGED_STORAGE`, `CREATE EXTERNAL VOLUME`, `MANAGE`, `READ_FILES` and `WRITE_FILES` privileges to ExternalLocation id specified in `externalLocation` attribute:
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			some, err := databricks.NewExternalLocation(ctx, "some", &databricks.ExternalLocationArgs{
//				Name:           pulumi.String("external"),
//				Url:            pulumi.Sprintf("s3://%v/some", externalAwsS3Bucket.Id),
//				CredentialName: pulumi.Any(external.Id),
//				Comment:        pulumi.String("Managed by TF"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrants(ctx, "some", &databricks.GrantsArgs{
//				ExternalLocation: some.ID(),
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Engineers"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("CREATE_EXTERNAL_TABLE"),
//							pulumi.String("READ_FILES"),
//						},
//					},
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.Any(mySp.ApplicationId),
//						Privileges: pulumi.StringArray{
//							pulumi.String("CREATE_EXTERNAL_TABLE"),
//							pulumi.String("READ_FILES"),
//						},
//					},
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.Any(myGroup.DisplayName),
//						Privileges: pulumi.StringArray{
//							pulumi.String("CREATE_EXTERNAL_TABLE"),
//							pulumi.String("READ_FILES"),
//						},
//					},
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.Any(myUser.UserName),
//						Privileges: pulumi.StringArray{
//							pulumi.String("CREATE_EXTERNAL_TABLE"),
//							pulumi.String("READ_FILES"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Connection grants
//
// You can grant `ALL_PRIVILEGES`, `MANAGE`, `USE_CONNECTION` and `CREATE_FOREIGN_CATALOG` to Connection specified in `foreignConnection` attribute:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mysql, err := databricks.NewConnection(ctx, "mysql", &databricks.ConnectionArgs{
//				Name:           pulumi.String("mysql_connection"),
//				ConnectionType: pulumi.String("MYSQL"),
//				Comment:        pulumi.String("this is a connection to mysql db"),
//				Options: pulumi.StringMap{
//					"host":     pulumi.String("test.mysql.database.azure.com"),
//					"port":     pulumi.String("3306"),
//					"user":     pulumi.String("user"),
//					"password": pulumi.String("password"),
//				},
//				Properties: pulumi.StringMap{
//					"purpose": pulumi.String("testing"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrants(ctx, "some", &databricks.GrantsArgs{
//				ForeignConnection: mysql.Name,
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: pulumi.String("Data Engineers"),
//						Privileges: pulumi.StringArray{
//							pulumi.String("CREATE_FOREIGN_CATALOG"),
//							pulumi.String("USE_CONNECTION"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Delta Sharing share grants
//
// You can grant `SELECT` to Recipient on Share name specified in `share` attribute:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			some, err := databricks.NewShare(ctx, "some", &databricks.ShareArgs{
//				Name: pulumi.String("my_share"),
//			})
//			if err != nil {
//				return err
//			}
//			someRecipient, err := databricks.NewRecipient(ctx, "some", &databricks.RecipientArgs{
//				Name: pulumi.String("my_recipient"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGrants(ctx, "some", &databricks.GrantsArgs{
//				Share: some.Name,
//				Grants: databricks.GrantsGrantArray{
//					&databricks.GrantsGrantArgs{
//						Principal: someRecipient.Name,
//						Privileges: pulumi.StringArray{
//							pulumi.String("SELECT"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Other access control
//
// You can control Databricks General Permissions through Permissions resource.
//
// ## Import
//
// The resource can be imported using combination of securable type (`table`, `catalog`, `foreign_connection`, ...) and it's name:
//
// bash
//
// ```sh
// $ pulumi import databricks:index/grants:Grants this catalog/abc
// ```
type Grants struct {
	pulumi.CustomResourceState

	Catalog           pulumi.StringPtrOutput `pulumi:"catalog"`
	Credential        pulumi.StringPtrOutput `pulumi:"credential"`
	ExternalLocation  pulumi.StringPtrOutput `pulumi:"externalLocation"`
	ForeignConnection pulumi.StringPtrOutput `pulumi:"foreignConnection"`
	Function          pulumi.StringPtrOutput `pulumi:"function"`
	Grants            GrantsGrantArrayOutput `pulumi:"grants"`
	Metastore         pulumi.StringPtrOutput `pulumi:"metastore"`
	Model             pulumi.StringPtrOutput `pulumi:"model"`
	Pipeline          pulumi.StringPtrOutput `pulumi:"pipeline"`
	Recipient         pulumi.StringPtrOutput `pulumi:"recipient"`
	Schema            pulumi.StringPtrOutput `pulumi:"schema"`
	Share             pulumi.StringPtrOutput `pulumi:"share"`
	StorageCredential pulumi.StringPtrOutput `pulumi:"storageCredential"`
	Table             pulumi.StringPtrOutput `pulumi:"table"`
	Volume            pulumi.StringPtrOutput `pulumi:"volume"`
}

// NewGrants registers a new resource with the given unique name, arguments, and options.
func NewGrants(ctx *pulumi.Context,
	name string, args *GrantsArgs, opts ...pulumi.ResourceOption) (*Grants, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Grants == nil {
		return nil, errors.New("invalid value for required argument 'Grants'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Grants
	err := ctx.RegisterResource("databricks:index/grants:Grants", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrants gets an existing Grants resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrants(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrantsState, opts ...pulumi.ResourceOption) (*Grants, error) {
	var resource Grants
	err := ctx.ReadResource("databricks:index/grants:Grants", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Grants resources.
type grantsState struct {
	Catalog           *string       `pulumi:"catalog"`
	Credential        *string       `pulumi:"credential"`
	ExternalLocation  *string       `pulumi:"externalLocation"`
	ForeignConnection *string       `pulumi:"foreignConnection"`
	Function          *string       `pulumi:"function"`
	Grants            []GrantsGrant `pulumi:"grants"`
	Metastore         *string       `pulumi:"metastore"`
	Model             *string       `pulumi:"model"`
	Pipeline          *string       `pulumi:"pipeline"`
	Recipient         *string       `pulumi:"recipient"`
	Schema            *string       `pulumi:"schema"`
	Share             *string       `pulumi:"share"`
	StorageCredential *string       `pulumi:"storageCredential"`
	Table             *string       `pulumi:"table"`
	Volume            *string       `pulumi:"volume"`
}

type GrantsState struct {
	Catalog           pulumi.StringPtrInput
	Credential        pulumi.StringPtrInput
	ExternalLocation  pulumi.StringPtrInput
	ForeignConnection pulumi.StringPtrInput
	Function          pulumi.StringPtrInput
	Grants            GrantsGrantArrayInput
	Metastore         pulumi.StringPtrInput
	Model             pulumi.StringPtrInput
	Pipeline          pulumi.StringPtrInput
	Recipient         pulumi.StringPtrInput
	Schema            pulumi.StringPtrInput
	Share             pulumi.StringPtrInput
	StorageCredential pulumi.StringPtrInput
	Table             pulumi.StringPtrInput
	Volume            pulumi.StringPtrInput
}

func (GrantsState) ElementType() reflect.Type {
	return reflect.TypeOf((*grantsState)(nil)).Elem()
}

type grantsArgs struct {
	Catalog           *string       `pulumi:"catalog"`
	Credential        *string       `pulumi:"credential"`
	ExternalLocation  *string       `pulumi:"externalLocation"`
	ForeignConnection *string       `pulumi:"foreignConnection"`
	Function          *string       `pulumi:"function"`
	Grants            []GrantsGrant `pulumi:"grants"`
	Metastore         *string       `pulumi:"metastore"`
	Model             *string       `pulumi:"model"`
	Pipeline          *string       `pulumi:"pipeline"`
	Recipient         *string       `pulumi:"recipient"`
	Schema            *string       `pulumi:"schema"`
	Share             *string       `pulumi:"share"`
	StorageCredential *string       `pulumi:"storageCredential"`
	Table             *string       `pulumi:"table"`
	Volume            *string       `pulumi:"volume"`
}

// The set of arguments for constructing a Grants resource.
type GrantsArgs struct {
	Catalog           pulumi.StringPtrInput
	Credential        pulumi.StringPtrInput
	ExternalLocation  pulumi.StringPtrInput
	ForeignConnection pulumi.StringPtrInput
	Function          pulumi.StringPtrInput
	Grants            GrantsGrantArrayInput
	Metastore         pulumi.StringPtrInput
	Model             pulumi.StringPtrInput
	Pipeline          pulumi.StringPtrInput
	Recipient         pulumi.StringPtrInput
	Schema            pulumi.StringPtrInput
	Share             pulumi.StringPtrInput
	StorageCredential pulumi.StringPtrInput
	Table             pulumi.StringPtrInput
	Volume            pulumi.StringPtrInput
}

func (GrantsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grantsArgs)(nil)).Elem()
}

type GrantsInput interface {
	pulumi.Input

	ToGrantsOutput() GrantsOutput
	ToGrantsOutputWithContext(ctx context.Context) GrantsOutput
}

func (*Grants) ElementType() reflect.Type {
	return reflect.TypeOf((**Grants)(nil)).Elem()
}

func (i *Grants) ToGrantsOutput() GrantsOutput {
	return i.ToGrantsOutputWithContext(context.Background())
}

func (i *Grants) ToGrantsOutputWithContext(ctx context.Context) GrantsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantsOutput)
}

// GrantsArrayInput is an input type that accepts GrantsArray and GrantsArrayOutput values.
// You can construct a concrete instance of `GrantsArrayInput` via:
//
//	GrantsArray{ GrantsArgs{...} }
type GrantsArrayInput interface {
	pulumi.Input

	ToGrantsArrayOutput() GrantsArrayOutput
	ToGrantsArrayOutputWithContext(context.Context) GrantsArrayOutput
}

type GrantsArray []GrantsInput

func (GrantsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Grants)(nil)).Elem()
}

func (i GrantsArray) ToGrantsArrayOutput() GrantsArrayOutput {
	return i.ToGrantsArrayOutputWithContext(context.Background())
}

func (i GrantsArray) ToGrantsArrayOutputWithContext(ctx context.Context) GrantsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantsArrayOutput)
}

// GrantsMapInput is an input type that accepts GrantsMap and GrantsMapOutput values.
// You can construct a concrete instance of `GrantsMapInput` via:
//
//	GrantsMap{ "key": GrantsArgs{...} }
type GrantsMapInput interface {
	pulumi.Input

	ToGrantsMapOutput() GrantsMapOutput
	ToGrantsMapOutputWithContext(context.Context) GrantsMapOutput
}

type GrantsMap map[string]GrantsInput

func (GrantsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Grants)(nil)).Elem()
}

func (i GrantsMap) ToGrantsMapOutput() GrantsMapOutput {
	return i.ToGrantsMapOutputWithContext(context.Background())
}

func (i GrantsMap) ToGrantsMapOutputWithContext(ctx context.Context) GrantsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantsMapOutput)
}

type GrantsOutput struct{ *pulumi.OutputState }

func (GrantsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Grants)(nil)).Elem()
}

func (o GrantsOutput) ToGrantsOutput() GrantsOutput {
	return o
}

func (o GrantsOutput) ToGrantsOutputWithContext(ctx context.Context) GrantsOutput {
	return o
}

func (o GrantsOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.Catalog }).(pulumi.StringPtrOutput)
}

func (o GrantsOutput) Credential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.Credential }).(pulumi.StringPtrOutput)
}

func (o GrantsOutput) ExternalLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.ExternalLocation }).(pulumi.StringPtrOutput)
}

func (o GrantsOutput) ForeignConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.ForeignConnection }).(pulumi.StringPtrOutput)
}

func (o GrantsOutput) Function() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.Function }).(pulumi.StringPtrOutput)
}

func (o GrantsOutput) Grants() GrantsGrantArrayOutput {
	return o.ApplyT(func(v *Grants) GrantsGrantArrayOutput { return v.Grants }).(GrantsGrantArrayOutput)
}

func (o GrantsOutput) Metastore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.Metastore }).(pulumi.StringPtrOutput)
}

func (o GrantsOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.Model }).(pulumi.StringPtrOutput)
}

func (o GrantsOutput) Pipeline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.Pipeline }).(pulumi.StringPtrOutput)
}

func (o GrantsOutput) Recipient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.Recipient }).(pulumi.StringPtrOutput)
}

func (o GrantsOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.Schema }).(pulumi.StringPtrOutput)
}

func (o GrantsOutput) Share() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.Share }).(pulumi.StringPtrOutput)
}

func (o GrantsOutput) StorageCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.StorageCredential }).(pulumi.StringPtrOutput)
}

func (o GrantsOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.Table }).(pulumi.StringPtrOutput)
}

func (o GrantsOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grants) pulumi.StringPtrOutput { return v.Volume }).(pulumi.StringPtrOutput)
}

type GrantsArrayOutput struct{ *pulumi.OutputState }

func (GrantsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Grants)(nil)).Elem()
}

func (o GrantsArrayOutput) ToGrantsArrayOutput() GrantsArrayOutput {
	return o
}

func (o GrantsArrayOutput) ToGrantsArrayOutputWithContext(ctx context.Context) GrantsArrayOutput {
	return o
}

func (o GrantsArrayOutput) Index(i pulumi.IntInput) GrantsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Grants {
		return vs[0].([]*Grants)[vs[1].(int)]
	}).(GrantsOutput)
}

type GrantsMapOutput struct{ *pulumi.OutputState }

func (GrantsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Grants)(nil)).Elem()
}

func (o GrantsMapOutput) ToGrantsMapOutput() GrantsMapOutput {
	return o
}

func (o GrantsMapOutput) ToGrantsMapOutputWithContext(ctx context.Context) GrantsMapOutput {
	return o
}

func (o GrantsMapOutput) MapIndex(k pulumi.StringInput) GrantsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Grants {
		return vs[0].(map[string]*Grants)[vs[1].(string)]
	}).(GrantsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrantsInput)(nil)).Elem(), &Grants{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantsArrayInput)(nil)).Elem(), GrantsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantsMapInput)(nil)).Elem(), GrantsMap{})
	pulumi.RegisterOutputType(GrantsOutput{})
	pulumi.RegisterOutputType(GrantsArrayOutput{})
	pulumi.RegisterOutputType(GrantsMapOutput{})
}
