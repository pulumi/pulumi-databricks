// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// As of Pulumi v1.5, resources can be imported through configuration.
//
// hcl
//
// import {
//
//	id = "entity_type,entity_name,tag_key"
//
//	to = databricks_entity_tag_assignment.this
//
// }
//
// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
//
// ```sh
// $ pulumi import databricks:index/entityTagAssignment:EntityTagAssignment databricks_entity_tag_assignment "entity_type,entity_name,tag_key"
// ```
type EntityTagAssignment struct {
	pulumi.CustomResourceState

	// The fully qualified name of the entity to which the tag is assigned
	EntityName pulumi.StringOutput `pulumi:"entityName"`
	// The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
	EntityType pulumi.StringOutput `pulumi:"entityType"`
	// The key of the tag
	TagKey pulumi.StringOutput `pulumi:"tagKey"`
	// The value of the tag
	TagValue pulumi.StringPtrOutput `pulumi:"tagValue"`
	// Workspace ID of the resource
	WorkspaceId pulumi.StringPtrOutput `pulumi:"workspaceId"`
}

// NewEntityTagAssignment registers a new resource with the given unique name, arguments, and options.
func NewEntityTagAssignment(ctx *pulumi.Context,
	name string, args *EntityTagAssignmentArgs, opts ...pulumi.ResourceOption) (*EntityTagAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityName == nil {
		return nil, errors.New("invalid value for required argument 'EntityName'")
	}
	if args.EntityType == nil {
		return nil, errors.New("invalid value for required argument 'EntityType'")
	}
	if args.TagKey == nil {
		return nil, errors.New("invalid value for required argument 'TagKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EntityTagAssignment
	err := ctx.RegisterResource("databricks:index/entityTagAssignment:EntityTagAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntityTagAssignment gets an existing EntityTagAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntityTagAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntityTagAssignmentState, opts ...pulumi.ResourceOption) (*EntityTagAssignment, error) {
	var resource EntityTagAssignment
	err := ctx.ReadResource("databricks:index/entityTagAssignment:EntityTagAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntityTagAssignment resources.
type entityTagAssignmentState struct {
	// The fully qualified name of the entity to which the tag is assigned
	EntityName *string `pulumi:"entityName"`
	// The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
	EntityType *string `pulumi:"entityType"`
	// The key of the tag
	TagKey *string `pulumi:"tagKey"`
	// The value of the tag
	TagValue *string `pulumi:"tagValue"`
	// Workspace ID of the resource
	WorkspaceId *string `pulumi:"workspaceId"`
}

type EntityTagAssignmentState struct {
	// The fully qualified name of the entity to which the tag is assigned
	EntityName pulumi.StringPtrInput
	// The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
	EntityType pulumi.StringPtrInput
	// The key of the tag
	TagKey pulumi.StringPtrInput
	// The value of the tag
	TagValue pulumi.StringPtrInput
	// Workspace ID of the resource
	WorkspaceId pulumi.StringPtrInput
}

func (EntityTagAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*entityTagAssignmentState)(nil)).Elem()
}

type entityTagAssignmentArgs struct {
	// The fully qualified name of the entity to which the tag is assigned
	EntityName string `pulumi:"entityName"`
	// The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
	EntityType string `pulumi:"entityType"`
	// The key of the tag
	TagKey string `pulumi:"tagKey"`
	// The value of the tag
	TagValue *string `pulumi:"tagValue"`
	// Workspace ID of the resource
	WorkspaceId *string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a EntityTagAssignment resource.
type EntityTagAssignmentArgs struct {
	// The fully qualified name of the entity to which the tag is assigned
	EntityName pulumi.StringInput
	// The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
	EntityType pulumi.StringInput
	// The key of the tag
	TagKey pulumi.StringInput
	// The value of the tag
	TagValue pulumi.StringPtrInput
	// Workspace ID of the resource
	WorkspaceId pulumi.StringPtrInput
}

func (EntityTagAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entityTagAssignmentArgs)(nil)).Elem()
}

type EntityTagAssignmentInput interface {
	pulumi.Input

	ToEntityTagAssignmentOutput() EntityTagAssignmentOutput
	ToEntityTagAssignmentOutputWithContext(ctx context.Context) EntityTagAssignmentOutput
}

func (*EntityTagAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityTagAssignment)(nil)).Elem()
}

func (i *EntityTagAssignment) ToEntityTagAssignmentOutput() EntityTagAssignmentOutput {
	return i.ToEntityTagAssignmentOutputWithContext(context.Background())
}

func (i *EntityTagAssignment) ToEntityTagAssignmentOutputWithContext(ctx context.Context) EntityTagAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTagAssignmentOutput)
}

// EntityTagAssignmentArrayInput is an input type that accepts EntityTagAssignmentArray and EntityTagAssignmentArrayOutput values.
// You can construct a concrete instance of `EntityTagAssignmentArrayInput` via:
//
//	EntityTagAssignmentArray{ EntityTagAssignmentArgs{...} }
type EntityTagAssignmentArrayInput interface {
	pulumi.Input

	ToEntityTagAssignmentArrayOutput() EntityTagAssignmentArrayOutput
	ToEntityTagAssignmentArrayOutputWithContext(context.Context) EntityTagAssignmentArrayOutput
}

type EntityTagAssignmentArray []EntityTagAssignmentInput

func (EntityTagAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntityTagAssignment)(nil)).Elem()
}

func (i EntityTagAssignmentArray) ToEntityTagAssignmentArrayOutput() EntityTagAssignmentArrayOutput {
	return i.ToEntityTagAssignmentArrayOutputWithContext(context.Background())
}

func (i EntityTagAssignmentArray) ToEntityTagAssignmentArrayOutputWithContext(ctx context.Context) EntityTagAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTagAssignmentArrayOutput)
}

// EntityTagAssignmentMapInput is an input type that accepts EntityTagAssignmentMap and EntityTagAssignmentMapOutput values.
// You can construct a concrete instance of `EntityTagAssignmentMapInput` via:
//
//	EntityTagAssignmentMap{ "key": EntityTagAssignmentArgs{...} }
type EntityTagAssignmentMapInput interface {
	pulumi.Input

	ToEntityTagAssignmentMapOutput() EntityTagAssignmentMapOutput
	ToEntityTagAssignmentMapOutputWithContext(context.Context) EntityTagAssignmentMapOutput
}

type EntityTagAssignmentMap map[string]EntityTagAssignmentInput

func (EntityTagAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntityTagAssignment)(nil)).Elem()
}

func (i EntityTagAssignmentMap) ToEntityTagAssignmentMapOutput() EntityTagAssignmentMapOutput {
	return i.ToEntityTagAssignmentMapOutputWithContext(context.Background())
}

func (i EntityTagAssignmentMap) ToEntityTagAssignmentMapOutputWithContext(ctx context.Context) EntityTagAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTagAssignmentMapOutput)
}

type EntityTagAssignmentOutput struct{ *pulumi.OutputState }

func (EntityTagAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityTagAssignment)(nil)).Elem()
}

func (o EntityTagAssignmentOutput) ToEntityTagAssignmentOutput() EntityTagAssignmentOutput {
	return o
}

func (o EntityTagAssignmentOutput) ToEntityTagAssignmentOutputWithContext(ctx context.Context) EntityTagAssignmentOutput {
	return o
}

// The fully qualified name of the entity to which the tag is assigned
func (o EntityTagAssignmentOutput) EntityName() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityTagAssignment) pulumi.StringOutput { return v.EntityName }).(pulumi.StringOutput)
}

// The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
func (o EntityTagAssignmentOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityTagAssignment) pulumi.StringOutput { return v.EntityType }).(pulumi.StringOutput)
}

// The key of the tag
func (o EntityTagAssignmentOutput) TagKey() pulumi.StringOutput {
	return o.ApplyT(func(v *EntityTagAssignment) pulumi.StringOutput { return v.TagKey }).(pulumi.StringOutput)
}

// The value of the tag
func (o EntityTagAssignmentOutput) TagValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityTagAssignment) pulumi.StringPtrOutput { return v.TagValue }).(pulumi.StringPtrOutput)
}

// Workspace ID of the resource
func (o EntityTagAssignmentOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityTagAssignment) pulumi.StringPtrOutput { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

type EntityTagAssignmentArrayOutput struct{ *pulumi.OutputState }

func (EntityTagAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EntityTagAssignment)(nil)).Elem()
}

func (o EntityTagAssignmentArrayOutput) ToEntityTagAssignmentArrayOutput() EntityTagAssignmentArrayOutput {
	return o
}

func (o EntityTagAssignmentArrayOutput) ToEntityTagAssignmentArrayOutputWithContext(ctx context.Context) EntityTagAssignmentArrayOutput {
	return o
}

func (o EntityTagAssignmentArrayOutput) Index(i pulumi.IntInput) EntityTagAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EntityTagAssignment {
		return vs[0].([]*EntityTagAssignment)[vs[1].(int)]
	}).(EntityTagAssignmentOutput)
}

type EntityTagAssignmentMapOutput struct{ *pulumi.OutputState }

func (EntityTagAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EntityTagAssignment)(nil)).Elem()
}

func (o EntityTagAssignmentMapOutput) ToEntityTagAssignmentMapOutput() EntityTagAssignmentMapOutput {
	return o
}

func (o EntityTagAssignmentMapOutput) ToEntityTagAssignmentMapOutputWithContext(ctx context.Context) EntityTagAssignmentMapOutput {
	return o
}

func (o EntityTagAssignmentMapOutput) MapIndex(k pulumi.StringInput) EntityTagAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EntityTagAssignment {
		return vs[0].(map[string]*EntityTagAssignment)[vs[1].(string)]
	}).(EntityTagAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntityTagAssignmentInput)(nil)).Elem(), &EntityTagAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityTagAssignmentArrayInput)(nil)).Elem(), EntityTagAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityTagAssignmentMapInput)(nil)).Elem(), EntityTagAssignmentMap{})
	pulumi.RegisterOutputType(EntityTagAssignmentOutput{})
	pulumi.RegisterOutputType(EntityTagAssignmentArrayOutput{})
	pulumi.RegisterOutputType(EntityTagAssignmentMapOutput{})
}
