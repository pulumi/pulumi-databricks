// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The SQL Alert v2 data source allows you to retrieve detailed information about a specific alert in Databricks SQL. This data source provides access to all alert properties, including its configuration, evaluation criteria, notification settings, and schedule.
//
// You can use this data source to:
// - Retrieve alert details for reference in other resources
// - Check the current state and configuration of an alert
// - Verify notification settings and subscribers
// - Examine the schedule configuration
//
// ## Example Usage
func LookupAlertV2(ctx *pulumi.Context, args *LookupAlertV2Args, opts ...pulumi.InvokeOption) (*LookupAlertV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAlertV2Result
	err := ctx.Invoke("databricks:index/getAlertV2:getAlertV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlertV2.
type LookupAlertV2Args struct {
	// (string) - Custom description for the alert. support mustache template
	CustomDescription *string `pulumi:"customDescription"`
	// (string) - Custom summary for the alert. support mustache template
	CustomSummary *string `pulumi:"customSummary"`
	// (string) - The display name of the alert
	DisplayName *string `pulumi:"displayName"`
	// (AlertV2Evaluation)
	Evaluation *GetAlertV2Evaluation `pulumi:"evaluation"`
	// (string) - The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
	ParentPath *string `pulumi:"parentPath"`
	// (string) - Text of the query to be run
	QueryText *string `pulumi:"queryText"`
	// (string) - The run as username or application ID of service principal.
	// On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role
	RunAsUserName *string `pulumi:"runAsUserName"`
	// (CronSchedule)
	Schedule *GetAlertV2Schedule `pulumi:"schedule"`
	// (string) - ID of the SQL warehouse attached to the alert
	WarehouseId *string `pulumi:"warehouseId"`
}

// A collection of values returned by getAlertV2.
type LookupAlertV2Result struct {
	// (string) - The timestamp indicating when the alert was created
	CreateTime string `pulumi:"createTime"`
	// (string) - Custom description for the alert. support mustache template
	CustomDescription *string `pulumi:"customDescription"`
	// (string) - Custom summary for the alert. support mustache template
	CustomSummary *string `pulumi:"customSummary"`
	// (string) - The display name of the alert
	DisplayName *string `pulumi:"displayName"`
	// (AlertV2Evaluation)
	Evaluation *GetAlertV2Evaluation `pulumi:"evaluation"`
	// (string) - UUID identifying the alert
	Id string `pulumi:"id"`
	// (string) - Indicates whether the query is trashed. Possible values are: `ACTIVE`, `TRASHED`
	LifecycleState string `pulumi:"lifecycleState"`
	// (string) - The owner's username. This field is set to "Unavailable" if the user has been deleted
	OwnerUserName string `pulumi:"ownerUserName"`
	// (string) - The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
	ParentPath *string `pulumi:"parentPath"`
	// (string) - Text of the query to be run
	QueryText *string `pulumi:"queryText"`
	// (string) - The run as username or application ID of service principal.
	// On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role
	RunAsUserName *string `pulumi:"runAsUserName"`
	// (CronSchedule)
	Schedule *GetAlertV2Schedule `pulumi:"schedule"`
	// (string) - The timestamp indicating when the alert was updated
	UpdateTime string `pulumi:"updateTime"`
	// (string) - ID of the SQL warehouse attached to the alert
	WarehouseId *string `pulumi:"warehouseId"`
}

func LookupAlertV2Output(ctx *pulumi.Context, args LookupAlertV2OutputArgs, opts ...pulumi.InvokeOption) LookupAlertV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAlertV2ResultOutput, error) {
			args := v.(LookupAlertV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("databricks:index/getAlertV2:getAlertV2", args, LookupAlertV2ResultOutput{}, options).(LookupAlertV2ResultOutput), nil
		}).(LookupAlertV2ResultOutput)
}

// A collection of arguments for invoking getAlertV2.
type LookupAlertV2OutputArgs struct {
	// (string) - Custom description for the alert. support mustache template
	CustomDescription pulumi.StringPtrInput `pulumi:"customDescription"`
	// (string) - Custom summary for the alert. support mustache template
	CustomSummary pulumi.StringPtrInput `pulumi:"customSummary"`
	// (string) - The display name of the alert
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// (AlertV2Evaluation)
	Evaluation GetAlertV2EvaluationPtrInput `pulumi:"evaluation"`
	// (string) - The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
	ParentPath pulumi.StringPtrInput `pulumi:"parentPath"`
	// (string) - Text of the query to be run
	QueryText pulumi.StringPtrInput `pulumi:"queryText"`
	// (string) - The run as username or application ID of service principal.
	// On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role
	RunAsUserName pulumi.StringPtrInput `pulumi:"runAsUserName"`
	// (CronSchedule)
	Schedule GetAlertV2SchedulePtrInput `pulumi:"schedule"`
	// (string) - ID of the SQL warehouse attached to the alert
	WarehouseId pulumi.StringPtrInput `pulumi:"warehouseId"`
}

func (LookupAlertV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlertV2Args)(nil)).Elem()
}

// A collection of values returned by getAlertV2.
type LookupAlertV2ResultOutput struct{ *pulumi.OutputState }

func (LookupAlertV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlertV2Result)(nil)).Elem()
}

func (o LookupAlertV2ResultOutput) ToLookupAlertV2ResultOutput() LookupAlertV2ResultOutput {
	return o
}

func (o LookupAlertV2ResultOutput) ToLookupAlertV2ResultOutputWithContext(ctx context.Context) LookupAlertV2ResultOutput {
	return o
}

// (string) - The timestamp indicating when the alert was created
func (o LookupAlertV2ResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertV2Result) string { return v.CreateTime }).(pulumi.StringOutput)
}

// (string) - Custom description for the alert. support mustache template
func (o LookupAlertV2ResultOutput) CustomDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlertV2Result) *string { return v.CustomDescription }).(pulumi.StringPtrOutput)
}

// (string) - Custom summary for the alert. support mustache template
func (o LookupAlertV2ResultOutput) CustomSummary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlertV2Result) *string { return v.CustomSummary }).(pulumi.StringPtrOutput)
}

// (string) - The display name of the alert
func (o LookupAlertV2ResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlertV2Result) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// (AlertV2Evaluation)
func (o LookupAlertV2ResultOutput) Evaluation() GetAlertV2EvaluationPtrOutput {
	return o.ApplyT(func(v LookupAlertV2Result) *GetAlertV2Evaluation { return v.Evaluation }).(GetAlertV2EvaluationPtrOutput)
}

// (string) - UUID identifying the alert
func (o LookupAlertV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// (string) - Indicates whether the query is trashed. Possible values are: `ACTIVE`, `TRASHED`
func (o LookupAlertV2ResultOutput) LifecycleState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertV2Result) string { return v.LifecycleState }).(pulumi.StringOutput)
}

// (string) - The owner's username. This field is set to "Unavailable" if the user has been deleted
func (o LookupAlertV2ResultOutput) OwnerUserName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertV2Result) string { return v.OwnerUserName }).(pulumi.StringOutput)
}

// (string) - The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
func (o LookupAlertV2ResultOutput) ParentPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlertV2Result) *string { return v.ParentPath }).(pulumi.StringPtrOutput)
}

// (string) - Text of the query to be run
func (o LookupAlertV2ResultOutput) QueryText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlertV2Result) *string { return v.QueryText }).(pulumi.StringPtrOutput)
}

// (string) - The run as username or application ID of service principal.
// On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role
func (o LookupAlertV2ResultOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlertV2Result) *string { return v.RunAsUserName }).(pulumi.StringPtrOutput)
}

// (CronSchedule)
func (o LookupAlertV2ResultOutput) Schedule() GetAlertV2SchedulePtrOutput {
	return o.ApplyT(func(v LookupAlertV2Result) *GetAlertV2Schedule { return v.Schedule }).(GetAlertV2SchedulePtrOutput)
}

// (string) - The timestamp indicating when the alert was updated
func (o LookupAlertV2ResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertV2Result) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// (string) - ID of the SQL warehouse attached to the alert
func (o LookupAlertV2ResultOutput) WarehouseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlertV2Result) *string { return v.WarehouseId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAlertV2ResultOutput{})
}
