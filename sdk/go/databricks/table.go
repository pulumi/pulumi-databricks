// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Public Preview** This feature is in [Public Preview](https://docs.databricks.com/release-notes/release-types.html). Contact your Databricks representative to request access.
//
// Within a metastore, Unity Catalog provides a 3-level namespace for organizing data: Catalogs, databases (also called schemas), and tables / views.
//
// > **Note** This resource has an evolving API, which will change in the upcoming versions of the provider in order to simplify user experience.
//
// A `Table` is contained within databricks_schema.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sandbox, err := databricks.NewCatalog(ctx, "sandbox", &databricks.CatalogArgs{
//				MetastoreId: pulumi.Any(databricks_metastore.This.Id),
//				Comment:     pulumi.String("this catalog is managed by terraform"),
//				Properties: pulumi.AnyMap{
//					"purpose": pulumi.Any("testing"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			things, err := databricks.NewSchema(ctx, "things", &databricks.SchemaArgs{
//				CatalogName: sandbox.ID(),
//				Comment:     pulumi.String("this database is managed by terraform"),
//				Properties: pulumi.AnyMap{
//					"kind": pulumi.Any("various"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewTable(ctx, "thing", &databricks.TableArgs{
//				CatalogName:      sandbox.ID(),
//				SchemaName:       things.Name,
//				TableType:        pulumi.String("MANAGED"),
//				DataSourceFormat: pulumi.String("DELTA"),
//				Columns: TableColumnArray{
//					&TableColumnArgs{
//						Name:     pulumi.String("id"),
//						Position: pulumi.Int(0),
//						TypeName: pulumi.String("INT"),
//						TypeText: pulumi.String("int"),
//						TypeJson: pulumi.String("{\"name\":\"id\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}}"),
//					},
//					&TableColumnArgs{
//						Name:     pulumi.String("name"),
//						Position: pulumi.Int(1),
//						TypeName: pulumi.String("STRING"),
//						TypeText: pulumi.String("varchar(64)"),
//						TypeJson: pulumi.String("{\"name\":\"name\",\"type\":\"varchar(64)\",\"nullable\":true,\"metadata\":{}}"),
//					},
//				},
//				Comment: pulumi.String("this table is managed by terraform"),
//			}, pulumi.Provider(databricks.Workspace))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Related Resources
//
// The following resources are used in the same context:
//
// * Table data to list tables within Unity Catalog.
// * Schema data to list schemas within Unity Catalog.
// * Catalog data to list catalogs within Unity Catalog.
//
// ## Import
//
// This resource can be imported by full name*`catalog`.`schema`.`table`*bash
//
// ```sh
//
//	$ pulumi import databricks:index/table:Table this <full-name>
//
// ```
type Table struct {
	pulumi.CustomResourceState

	// Name of parent catalog
	CatalogName pulumi.StringOutput    `pulumi:"catalogName"`
	Columns     TableColumnArrayOutput `pulumi:"columns"`
	// User-supplied free-form text.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// External tables are supported in multiple data source formats. The string constants identifying these formats are `DELTA`, `CSV`, `JSON`, `AVRO`, `PARQUET`, `ORC`, `TEXT`
	DataSourceFormat pulumi.StringOutput `pulumi:"dataSourceFormat"`
	// User-visible name of column
	Name pulumi.StringOutput `pulumi:"name"`
	// Username/groupname/sp applicationId of the table owner.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Extensible Table properties.
	Properties pulumi.MapOutput `pulumi:"properties"`
	// Name of parent Schema relative to parent Catalog
	SchemaName pulumi.StringOutput `pulumi:"schemaName"`
	// For EXTERNAL Tables only: the name of storage credential to use. This cannot be updated
	StorageCredentialName pulumi.StringPtrOutput `pulumi:"storageCredentialName"`
	// URL of storage location for Table data (required for EXTERNAL Tables. For Managed Tables, if the path is provided it needs to be a Staging Table path that has been generated through the Staging Table API, otherwise should be empty)
	StorageLocation pulumi.StringPtrOutput `pulumi:"storageLocation"`
	// Distinguishes a view vs. managed/external Table. `MANAGED`, `EXTERNAL` or `VIEW`
	TableType pulumi.StringOutput `pulumi:"tableType"`
	// SQL text defining the view (for `tableType == "VIEW"`)
	ViewDefinition pulumi.StringPtrOutput `pulumi:"viewDefinition"`
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOption) (*Table, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogName == nil {
		return nil, errors.New("invalid value for required argument 'CatalogName'")
	}
	if args.Columns == nil {
		return nil, errors.New("invalid value for required argument 'Columns'")
	}
	if args.DataSourceFormat == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceFormat'")
	}
	if args.SchemaName == nil {
		return nil, errors.New("invalid value for required argument 'SchemaName'")
	}
	if args.TableType == nil {
		return nil, errors.New("invalid value for required argument 'TableType'")
	}
	var resource Table
	err := ctx.RegisterResource("databricks:index/table:Table", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableState, opts ...pulumi.ResourceOption) (*Table, error) {
	var resource Table
	err := ctx.ReadResource("databricks:index/table:Table", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Table resources.
type tableState struct {
	// Name of parent catalog
	CatalogName *string       `pulumi:"catalogName"`
	Columns     []TableColumn `pulumi:"columns"`
	// User-supplied free-form text.
	Comment *string `pulumi:"comment"`
	// External tables are supported in multiple data source formats. The string constants identifying these formats are `DELTA`, `CSV`, `JSON`, `AVRO`, `PARQUET`, `ORC`, `TEXT`
	DataSourceFormat *string `pulumi:"dataSourceFormat"`
	// User-visible name of column
	Name *string `pulumi:"name"`
	// Username/groupname/sp applicationId of the table owner.
	Owner *string `pulumi:"owner"`
	// Extensible Table properties.
	Properties map[string]interface{} `pulumi:"properties"`
	// Name of parent Schema relative to parent Catalog
	SchemaName *string `pulumi:"schemaName"`
	// For EXTERNAL Tables only: the name of storage credential to use. This cannot be updated
	StorageCredentialName *string `pulumi:"storageCredentialName"`
	// URL of storage location for Table data (required for EXTERNAL Tables. For Managed Tables, if the path is provided it needs to be a Staging Table path that has been generated through the Staging Table API, otherwise should be empty)
	StorageLocation *string `pulumi:"storageLocation"`
	// Distinguishes a view vs. managed/external Table. `MANAGED`, `EXTERNAL` or `VIEW`
	TableType *string `pulumi:"tableType"`
	// SQL text defining the view (for `tableType == "VIEW"`)
	ViewDefinition *string `pulumi:"viewDefinition"`
}

type TableState struct {
	// Name of parent catalog
	CatalogName pulumi.StringPtrInput
	Columns     TableColumnArrayInput
	// User-supplied free-form text.
	Comment pulumi.StringPtrInput
	// External tables are supported in multiple data source formats. The string constants identifying these formats are `DELTA`, `CSV`, `JSON`, `AVRO`, `PARQUET`, `ORC`, `TEXT`
	DataSourceFormat pulumi.StringPtrInput
	// User-visible name of column
	Name pulumi.StringPtrInput
	// Username/groupname/sp applicationId of the table owner.
	Owner pulumi.StringPtrInput
	// Extensible Table properties.
	Properties pulumi.MapInput
	// Name of parent Schema relative to parent Catalog
	SchemaName pulumi.StringPtrInput
	// For EXTERNAL Tables only: the name of storage credential to use. This cannot be updated
	StorageCredentialName pulumi.StringPtrInput
	// URL of storage location for Table data (required for EXTERNAL Tables. For Managed Tables, if the path is provided it needs to be a Staging Table path that has been generated through the Staging Table API, otherwise should be empty)
	StorageLocation pulumi.StringPtrInput
	// Distinguishes a view vs. managed/external Table. `MANAGED`, `EXTERNAL` or `VIEW`
	TableType pulumi.StringPtrInput
	// SQL text defining the view (for `tableType == "VIEW"`)
	ViewDefinition pulumi.StringPtrInput
}

func (TableState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableState)(nil)).Elem()
}

type tableArgs struct {
	// Name of parent catalog
	CatalogName string        `pulumi:"catalogName"`
	Columns     []TableColumn `pulumi:"columns"`
	// User-supplied free-form text.
	Comment *string `pulumi:"comment"`
	// External tables are supported in multiple data source formats. The string constants identifying these formats are `DELTA`, `CSV`, `JSON`, `AVRO`, `PARQUET`, `ORC`, `TEXT`
	DataSourceFormat string `pulumi:"dataSourceFormat"`
	// User-visible name of column
	Name *string `pulumi:"name"`
	// Username/groupname/sp applicationId of the table owner.
	Owner *string `pulumi:"owner"`
	// Extensible Table properties.
	Properties map[string]interface{} `pulumi:"properties"`
	// Name of parent Schema relative to parent Catalog
	SchemaName string `pulumi:"schemaName"`
	// For EXTERNAL Tables only: the name of storage credential to use. This cannot be updated
	StorageCredentialName *string `pulumi:"storageCredentialName"`
	// URL of storage location for Table data (required for EXTERNAL Tables. For Managed Tables, if the path is provided it needs to be a Staging Table path that has been generated through the Staging Table API, otherwise should be empty)
	StorageLocation *string `pulumi:"storageLocation"`
	// Distinguishes a view vs. managed/external Table. `MANAGED`, `EXTERNAL` or `VIEW`
	TableType string `pulumi:"tableType"`
	// SQL text defining the view (for `tableType == "VIEW"`)
	ViewDefinition *string `pulumi:"viewDefinition"`
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	// Name of parent catalog
	CatalogName pulumi.StringInput
	Columns     TableColumnArrayInput
	// User-supplied free-form text.
	Comment pulumi.StringPtrInput
	// External tables are supported in multiple data source formats. The string constants identifying these formats are `DELTA`, `CSV`, `JSON`, `AVRO`, `PARQUET`, `ORC`, `TEXT`
	DataSourceFormat pulumi.StringInput
	// User-visible name of column
	Name pulumi.StringPtrInput
	// Username/groupname/sp applicationId of the table owner.
	Owner pulumi.StringPtrInput
	// Extensible Table properties.
	Properties pulumi.MapInput
	// Name of parent Schema relative to parent Catalog
	SchemaName pulumi.StringInput
	// For EXTERNAL Tables only: the name of storage credential to use. This cannot be updated
	StorageCredentialName pulumi.StringPtrInput
	// URL of storage location for Table data (required for EXTERNAL Tables. For Managed Tables, if the path is provided it needs to be a Staging Table path that has been generated through the Staging Table API, otherwise should be empty)
	StorageLocation pulumi.StringPtrInput
	// Distinguishes a view vs. managed/external Table. `MANAGED`, `EXTERNAL` or `VIEW`
	TableType pulumi.StringInput
	// SQL text defining the view (for `tableType == "VIEW"`)
	ViewDefinition pulumi.StringPtrInput
}

func (TableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableArgs)(nil)).Elem()
}

type TableInput interface {
	pulumi.Input

	ToTableOutput() TableOutput
	ToTableOutputWithContext(ctx context.Context) TableOutput
}

func (*Table) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (i *Table) ToTableOutput() TableOutput {
	return i.ToTableOutputWithContext(context.Background())
}

func (i *Table) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOutput)
}

// TableArrayInput is an input type that accepts TableArray and TableArrayOutput values.
// You can construct a concrete instance of `TableArrayInput` via:
//
//	TableArray{ TableArgs{...} }
type TableArrayInput interface {
	pulumi.Input

	ToTableArrayOutput() TableArrayOutput
	ToTableArrayOutputWithContext(context.Context) TableArrayOutput
}

type TableArray []TableInput

func (TableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (i TableArray) ToTableArrayOutput() TableArrayOutput {
	return i.ToTableArrayOutputWithContext(context.Background())
}

func (i TableArray) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableArrayOutput)
}

// TableMapInput is an input type that accepts TableMap and TableMapOutput values.
// You can construct a concrete instance of `TableMapInput` via:
//
//	TableMap{ "key": TableArgs{...} }
type TableMapInput interface {
	pulumi.Input

	ToTableMapOutput() TableMapOutput
	ToTableMapOutputWithContext(context.Context) TableMapOutput
}

type TableMap map[string]TableInput

func (TableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (i TableMap) ToTableMapOutput() TableMapOutput {
	return i.ToTableMapOutputWithContext(context.Background())
}

func (i TableMap) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMapOutput)
}

type TableOutput struct{ *pulumi.OutputState }

func (TableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (o TableOutput) ToTableOutput() TableOutput {
	return o
}

func (o TableOutput) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return o
}

// Name of parent catalog
func (o TableOutput) CatalogName() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.CatalogName }).(pulumi.StringOutput)
}

func (o TableOutput) Columns() TableColumnArrayOutput {
	return o.ApplyT(func(v *Table) TableColumnArrayOutput { return v.Columns }).(TableColumnArrayOutput)
}

// User-supplied free-form text.
func (o TableOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// External tables are supported in multiple data source formats. The string constants identifying these formats are `DELTA`, `CSV`, `JSON`, `AVRO`, `PARQUET`, `ORC`, `TEXT`
func (o TableOutput) DataSourceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.DataSourceFormat }).(pulumi.StringOutput)
}

// User-visible name of column
func (o TableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Username/groupname/sp applicationId of the table owner.
func (o TableOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Extensible Table properties.
func (o TableOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *Table) pulumi.MapOutput { return v.Properties }).(pulumi.MapOutput)
}

// Name of parent Schema relative to parent Catalog
func (o TableOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.SchemaName }).(pulumi.StringOutput)
}

// For EXTERNAL Tables only: the name of storage credential to use. This cannot be updated
func (o TableOutput) StorageCredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.StringPtrOutput { return v.StorageCredentialName }).(pulumi.StringPtrOutput)
}

// URL of storage location for Table data (required for EXTERNAL Tables. For Managed Tables, if the path is provided it needs to be a Staging Table path that has been generated through the Staging Table API, otherwise should be empty)
func (o TableOutput) StorageLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.StringPtrOutput { return v.StorageLocation }).(pulumi.StringPtrOutput)
}

// Distinguishes a view vs. managed/external Table. `MANAGED`, `EXTERNAL` or `VIEW`
func (o TableOutput) TableType() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.TableType }).(pulumi.StringOutput)
}

// SQL text defining the view (for `tableType == "VIEW"`)
func (o TableOutput) ViewDefinition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.StringPtrOutput { return v.ViewDefinition }).(pulumi.StringPtrOutput)
}

type TableArrayOutput struct{ *pulumi.OutputState }

func (TableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (o TableArrayOutput) ToTableArrayOutput() TableArrayOutput {
	return o
}

func (o TableArrayOutput) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return o
}

func (o TableArrayOutput) Index(i pulumi.IntInput) TableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Table {
		return vs[0].([]*Table)[vs[1].(int)]
	}).(TableOutput)
}

type TableMapOutput struct{ *pulumi.OutputState }

func (TableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (o TableMapOutput) ToTableMapOutput() TableMapOutput {
	return o
}

func (o TableMapOutput) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return o
}

func (o TableMapOutput) MapIndex(k pulumi.StringInput) TableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Table {
		return vs[0].(map[string]*Table)[vs[1].(string)]
	}).(TableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableInput)(nil)).Elem(), &Table{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableArrayInput)(nil)).Elem(), TableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMapInput)(nil)).Elem(), TableMap{})
	pulumi.RegisterOutputType(TableOutput{})
	pulumi.RegisterOutputType(TableArrayOutput{})
	pulumi.RegisterOutputType(TableMapOutput{})
}
