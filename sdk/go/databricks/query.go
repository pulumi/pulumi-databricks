// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Query struct {
	pulumi.CustomResourceState

	ApplyAutoLimit       pulumi.BoolPtrOutput      `pulumi:"applyAutoLimit"`
	Catalog              pulumi.StringPtrOutput    `pulumi:"catalog"`
	CreateTime           pulumi.StringOutput       `pulumi:"createTime"`
	Description          pulumi.StringPtrOutput    `pulumi:"description"`
	DisplayName          pulumi.StringOutput       `pulumi:"displayName"`
	LastModifierUserName pulumi.StringOutput       `pulumi:"lastModifierUserName"`
	LifecycleState       pulumi.StringOutput       `pulumi:"lifecycleState"`
	OwnerUserName        pulumi.StringPtrOutput    `pulumi:"ownerUserName"`
	Parameters           QueryParameterArrayOutput `pulumi:"parameters"`
	ParentPath           pulumi.StringPtrOutput    `pulumi:"parentPath"`
	QueryText            pulumi.StringOutput       `pulumi:"queryText"`
	RunAsMode            pulumi.StringPtrOutput    `pulumi:"runAsMode"`
	Schema               pulumi.StringPtrOutput    `pulumi:"schema"`
	Tags                 pulumi.StringArrayOutput  `pulumi:"tags"`
	UpdateTime           pulumi.StringOutput       `pulumi:"updateTime"`
	WarehouseId          pulumi.StringOutput       `pulumi:"warehouseId"`
}

// NewQuery registers a new resource with the given unique name, arguments, and options.
func NewQuery(ctx *pulumi.Context,
	name string, args *QueryArgs, opts ...pulumi.ResourceOption) (*Query, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.QueryText == nil {
		return nil, errors.New("invalid value for required argument 'QueryText'")
	}
	if args.WarehouseId == nil {
		return nil, errors.New("invalid value for required argument 'WarehouseId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Query
	err := ctx.RegisterResource("databricks:index/query:Query", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQuery gets an existing Query resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQuery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueryState, opts ...pulumi.ResourceOption) (*Query, error) {
	var resource Query
	err := ctx.ReadResource("databricks:index/query:Query", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Query resources.
type queryState struct {
	ApplyAutoLimit       *bool            `pulumi:"applyAutoLimit"`
	Catalog              *string          `pulumi:"catalog"`
	CreateTime           *string          `pulumi:"createTime"`
	Description          *string          `pulumi:"description"`
	DisplayName          *string          `pulumi:"displayName"`
	LastModifierUserName *string          `pulumi:"lastModifierUserName"`
	LifecycleState       *string          `pulumi:"lifecycleState"`
	OwnerUserName        *string          `pulumi:"ownerUserName"`
	Parameters           []QueryParameter `pulumi:"parameters"`
	ParentPath           *string          `pulumi:"parentPath"`
	QueryText            *string          `pulumi:"queryText"`
	RunAsMode            *string          `pulumi:"runAsMode"`
	Schema               *string          `pulumi:"schema"`
	Tags                 []string         `pulumi:"tags"`
	UpdateTime           *string          `pulumi:"updateTime"`
	WarehouseId          *string          `pulumi:"warehouseId"`
}

type QueryState struct {
	ApplyAutoLimit       pulumi.BoolPtrInput
	Catalog              pulumi.StringPtrInput
	CreateTime           pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	DisplayName          pulumi.StringPtrInput
	LastModifierUserName pulumi.StringPtrInput
	LifecycleState       pulumi.StringPtrInput
	OwnerUserName        pulumi.StringPtrInput
	Parameters           QueryParameterArrayInput
	ParentPath           pulumi.StringPtrInput
	QueryText            pulumi.StringPtrInput
	RunAsMode            pulumi.StringPtrInput
	Schema               pulumi.StringPtrInput
	Tags                 pulumi.StringArrayInput
	UpdateTime           pulumi.StringPtrInput
	WarehouseId          pulumi.StringPtrInput
}

func (QueryState) ElementType() reflect.Type {
	return reflect.TypeOf((*queryState)(nil)).Elem()
}

type queryArgs struct {
	ApplyAutoLimit *bool            `pulumi:"applyAutoLimit"`
	Catalog        *string          `pulumi:"catalog"`
	Description    *string          `pulumi:"description"`
	DisplayName    string           `pulumi:"displayName"`
	OwnerUserName  *string          `pulumi:"ownerUserName"`
	Parameters     []QueryParameter `pulumi:"parameters"`
	ParentPath     *string          `pulumi:"parentPath"`
	QueryText      string           `pulumi:"queryText"`
	RunAsMode      *string          `pulumi:"runAsMode"`
	Schema         *string          `pulumi:"schema"`
	Tags           []string         `pulumi:"tags"`
	WarehouseId    string           `pulumi:"warehouseId"`
}

// The set of arguments for constructing a Query resource.
type QueryArgs struct {
	ApplyAutoLimit pulumi.BoolPtrInput
	Catalog        pulumi.StringPtrInput
	Description    pulumi.StringPtrInput
	DisplayName    pulumi.StringInput
	OwnerUserName  pulumi.StringPtrInput
	Parameters     QueryParameterArrayInput
	ParentPath     pulumi.StringPtrInput
	QueryText      pulumi.StringInput
	RunAsMode      pulumi.StringPtrInput
	Schema         pulumi.StringPtrInput
	Tags           pulumi.StringArrayInput
	WarehouseId    pulumi.StringInput
}

func (QueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queryArgs)(nil)).Elem()
}

type QueryInput interface {
	pulumi.Input

	ToQueryOutput() QueryOutput
	ToQueryOutputWithContext(ctx context.Context) QueryOutput
}

func (*Query) ElementType() reflect.Type {
	return reflect.TypeOf((**Query)(nil)).Elem()
}

func (i *Query) ToQueryOutput() QueryOutput {
	return i.ToQueryOutputWithContext(context.Background())
}

func (i *Query) ToQueryOutputWithContext(ctx context.Context) QueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryOutput)
}

// QueryArrayInput is an input type that accepts QueryArray and QueryArrayOutput values.
// You can construct a concrete instance of `QueryArrayInput` via:
//
//	QueryArray{ QueryArgs{...} }
type QueryArrayInput interface {
	pulumi.Input

	ToQueryArrayOutput() QueryArrayOutput
	ToQueryArrayOutputWithContext(context.Context) QueryArrayOutput
}

type QueryArray []QueryInput

func (QueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Query)(nil)).Elem()
}

func (i QueryArray) ToQueryArrayOutput() QueryArrayOutput {
	return i.ToQueryArrayOutputWithContext(context.Background())
}

func (i QueryArray) ToQueryArrayOutputWithContext(ctx context.Context) QueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryArrayOutput)
}

// QueryMapInput is an input type that accepts QueryMap and QueryMapOutput values.
// You can construct a concrete instance of `QueryMapInput` via:
//
//	QueryMap{ "key": QueryArgs{...} }
type QueryMapInput interface {
	pulumi.Input

	ToQueryMapOutput() QueryMapOutput
	ToQueryMapOutputWithContext(context.Context) QueryMapOutput
}

type QueryMap map[string]QueryInput

func (QueryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Query)(nil)).Elem()
}

func (i QueryMap) ToQueryMapOutput() QueryMapOutput {
	return i.ToQueryMapOutputWithContext(context.Background())
}

func (i QueryMap) ToQueryMapOutputWithContext(ctx context.Context) QueryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryMapOutput)
}

type QueryOutput struct{ *pulumi.OutputState }

func (QueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Query)(nil)).Elem()
}

func (o QueryOutput) ToQueryOutput() QueryOutput {
	return o
}

func (o QueryOutput) ToQueryOutputWithContext(ctx context.Context) QueryOutput {
	return o
}

func (o QueryOutput) ApplyAutoLimit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Query) pulumi.BoolPtrOutput { return v.ApplyAutoLimit }).(pulumi.BoolPtrOutput)
}

func (o QueryOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Query) pulumi.StringPtrOutput { return v.Catalog }).(pulumi.StringPtrOutput)
}

func (o QueryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o QueryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Query) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o QueryOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o QueryOutput) LastModifierUserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.LastModifierUserName }).(pulumi.StringOutput)
}

func (o QueryOutput) LifecycleState() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.LifecycleState }).(pulumi.StringOutput)
}

func (o QueryOutput) OwnerUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Query) pulumi.StringPtrOutput { return v.OwnerUserName }).(pulumi.StringPtrOutput)
}

func (o QueryOutput) Parameters() QueryParameterArrayOutput {
	return o.ApplyT(func(v *Query) QueryParameterArrayOutput { return v.Parameters }).(QueryParameterArrayOutput)
}

func (o QueryOutput) ParentPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Query) pulumi.StringPtrOutput { return v.ParentPath }).(pulumi.StringPtrOutput)
}

func (o QueryOutput) QueryText() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.QueryText }).(pulumi.StringOutput)
}

func (o QueryOutput) RunAsMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Query) pulumi.StringPtrOutput { return v.RunAsMode }).(pulumi.StringPtrOutput)
}

func (o QueryOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Query) pulumi.StringPtrOutput { return v.Schema }).(pulumi.StringPtrOutput)
}

func (o QueryOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Query) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o QueryOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o QueryOutput) WarehouseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.WarehouseId }).(pulumi.StringOutput)
}

type QueryArrayOutput struct{ *pulumi.OutputState }

func (QueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Query)(nil)).Elem()
}

func (o QueryArrayOutput) ToQueryArrayOutput() QueryArrayOutput {
	return o
}

func (o QueryArrayOutput) ToQueryArrayOutputWithContext(ctx context.Context) QueryArrayOutput {
	return o
}

func (o QueryArrayOutput) Index(i pulumi.IntInput) QueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Query {
		return vs[0].([]*Query)[vs[1].(int)]
	}).(QueryOutput)
}

type QueryMapOutput struct{ *pulumi.OutputState }

func (QueryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Query)(nil)).Elem()
}

func (o QueryMapOutput) ToQueryMapOutput() QueryMapOutput {
	return o
}

func (o QueryMapOutput) ToQueryMapOutputWithContext(ctx context.Context) QueryMapOutput {
	return o
}

func (o QueryMapOutput) MapIndex(k pulumi.StringInput) QueryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Query {
		return vs[0].(map[string]*Query)[vs[1].(string)]
	}).(QueryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueryInput)(nil)).Elem(), &Query{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryArrayInput)(nil)).Elem(), QueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryMapInput)(nil)).Elem(), QueryMap{})
	pulumi.RegisterOutputType(QueryOutput{})
	pulumi.RegisterOutputType(QueryArrayOutput{})
	pulumi.RegisterOutputType(QueryMapOutput{})
}
