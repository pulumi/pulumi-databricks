// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Databricks on AWS usage
//
// > **Note** Initialize provider with `alias = "mws"`, `host  = "https://accounts.cloud.databricks.com"` and use `provider = databricks.mws`
//
// Use this resource to [configure VPC](https://docs.databricks.com/administration-guide/cloud-configurations/aws/customer-managed-vpc.html) & subnets for new workspaces within AWS. It is essential to understand that this will require you to configure your provider separately for the multiple workspaces resources.
//
// * Databricks must have access to at least two subnets for each workspace, with each subnet in a different Availability Zone. You cannot specify more than one Databricks workspace subnet per Availability Zone in the Create network configuration API call. You can have more than one subnet per Availability Zone as part of your network setup, but you can choose only one subnet per Availability Zone for the Databricks workspace.
// * Databricks assigns two IP addresses per node, one for management traffic and one for Spark applications. The total number of instances for each subnet is equal to half of the available IP addresses.
// * Each subnet must have a netmask between /17 and /25.
// * Subnets must be private.
// * Subnets must have outbound access to the public network using a aws_nat_gateway, or other similar customer-managed appliance infrastructure.
// * The NAT gateway must be set up in its subnet (public_subnets in the example below) that routes quad-zero (0.0.0.0/0) traffic to an internet gateway or other customer-managed appliance infrastructure.
//
// > **Note** The NAT gateway needs only one IP address per AZ. Hence, the public subnet only needs two IP addresses. In order to limit the number of IP addresses in the public subnet, you can specify a secondary CIDR block (cidr_block_public) using the argument secondaryCidrBlocks then pass it to the publicSubnets argument. Please review the [IPv4 CIDR block association restrictions](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) when choosing the secondary cidr block.
//
// Please follow this complete runnable example & subnet for new workspaces within GCP. It is essential to understand that this will require you to configure your provider separately for the multiple workspaces resources.
//
// * Databricks must have access to a subnet in the same region as the workspace, of which IP range will be used to allocate your workspace’s GKE cluster nodes.
// * The subnet must have a netmask between /29 and /9.
// * Databricks must have access to 2 secondary IP ranges, one between /21 to /9 for workspace’s GKE cluster pods, and one between /27 to /16 for workspace’s GKE cluster services.
// * Subnet must have outbound access to the public network using a gcpComputeRouterNat or other similar customer-managed appliance infrastructure.
//
// Please follow this complete runnable example]
//
//	  privateSubnets = [cidrsubnet(var.cidr_block, 3, 1),
//	  cidrsubnet(var.cidr_block, 3, 2)]
//
//	  defaultSecurityGroupEgress = [{
//	    cidrBlocks = "0.0.0.0/0"
//	  }]
//
//	  defaultSecurityGroupIngress = [{
//	    description = "Allow all internal TCP and UDP"
//	    self        = true
//	  }]
//	}
//
//	resource "MwsNetworks" "this" {
//	  provider           = databricks.mws
//	  accountId         = var.databricks_account_id
//	  networkName       = "${local.prefix}-network"
//	  securityGroupIds = [module.vpc.default_security_group_id]
//	  subnetIds         = module.vpc.private_subnets
//	  vpcId             = module.vpc.vpc_id
//	}
//
// ### Creating a Databricks on GCP workspace
//
// In order to create a VPC [that leverages GCP Private Service Connect](https://docs.gcp.databricks.com/administration-guide/cloud-configurations/gcp/private-service-connect.html) you would need to add the `vpcEndpointId` Attributes from mwsVpcEndpoint resources into the MwsNetworks resource. For example:
//
// ## Modifying networks on running workspaces (AWS only)
//
// Due to specifics of platform APIs, changing any attribute of network configuration would cause `MwsNetworks` to be re-created - deleted & added again with special case for running workspaces. Once network configuration is attached to a running databricks_mws_workspaces, you cannot delete it and `pulumi up` would result in `INVALID_STATE: Unable to delete, Network is being used by active workspace X` error. In order to modify any attributes of a network, you have to perform three different `pulumi up` steps:
//
// 1. Create a new `MwsNetworks` resource.
// 2. Update the `MwsWorkspaces` to point to the new `networkId`.
// 3. Delete the old `MwsNetworks` resource.
//
// ## Related Resources
//
// The following resources are used in the same context:
//
// * Provisioning Databricks on AWS guide.
// * Provisioning Databricks on AWS with PrivateLink guide.
// * Provisioning AWS Databricks E2 with a Hub & Spoke firewall for data exfiltration protection guide.
// * Provisioning Databricks on GCP guide.
// * Provisioning Databricks workspaces on GCP with Private Service Connect guide.
// * MwsVpcEndpoint resources with Databricks such that they can be used as part of a MwsNetworks configuration.
// * MwsPrivateAccessSettings to create a Private Access Setting that can be used as part of a MwsWorkspaces resource to create a [Databricks Workspace that leverages AWS PrivateLink](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html) or [GCP Private Service Connect](https://docs.gcp.databricks.com/administration-guide/cloud-configurations/gcp/private-service-connect.html).
// * MwsWorkspaces to set up [workspaces in E2 architecture on AWS](https://docs.databricks.com/getting-started/overview.html#e2-architecture-1).
//
// ## Import
//
// -> **Note** Importing this resource is not currently supported.
type MwsNetworks struct {
	pulumi.CustomResourceState

	// Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/)
	AccountId     pulumi.StringOutput                `pulumi:"accountId"`
	CreationTime  pulumi.IntOutput                   `pulumi:"creationTime"`
	ErrorMessages MwsNetworksErrorMessageArrayOutput `pulumi:"errorMessages"`
	// a block consists of Google Cloud specific information for this network, for example the VPC ID, subnet ID, and secondary IP ranges. It has the following fields:
	GcpNetworkInfo MwsNetworksGcpNetworkInfoPtrOutput `pulumi:"gcpNetworkInfo"`
	// (String) id of network to be used for MwsWorkspaces resource.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// name under which this network is registered
	NetworkName pulumi.StringOutput `pulumi:"networkName"`
	// ids of aws_security_group
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// ids of aws_subnet
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// mapping of MwsVpcEndpoint for PrivateLink or Private Service Connect connections
	VpcEndpoints MwsNetworksVpcEndpointsOutput `pulumi:"vpcEndpoints"`
	// aws_vpc id
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
	// (String) VPC attachment status
	VpcStatus pulumi.StringOutput `pulumi:"vpcStatus"`
	// (Integer) id of associated workspace
	WorkspaceId pulumi.IntOutput `pulumi:"workspaceId"`
}

// NewMwsNetworks registers a new resource with the given unique name, arguments, and options.
func NewMwsNetworks(ctx *pulumi.Context,
	name string, args *MwsNetworksArgs, opts ...pulumi.ResourceOption) (*MwsNetworks, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.NetworkName == nil {
		return nil, errors.New("invalid value for required argument 'NetworkName'")
	}
	if args.AccountId != nil {
		args.AccountId = pulumi.ToSecret(args.AccountId).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accountId",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MwsNetworks
	err := ctx.RegisterResource("databricks:index/mwsNetworks:MwsNetworks", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMwsNetworks gets an existing MwsNetworks resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMwsNetworks(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MwsNetworksState, opts ...pulumi.ResourceOption) (*MwsNetworks, error) {
	var resource MwsNetworks
	err := ctx.ReadResource("databricks:index/mwsNetworks:MwsNetworks", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MwsNetworks resources.
type mwsNetworksState struct {
	// Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/)
	AccountId     *string                   `pulumi:"accountId"`
	CreationTime  *int                      `pulumi:"creationTime"`
	ErrorMessages []MwsNetworksErrorMessage `pulumi:"errorMessages"`
	// a block consists of Google Cloud specific information for this network, for example the VPC ID, subnet ID, and secondary IP ranges. It has the following fields:
	GcpNetworkInfo *MwsNetworksGcpNetworkInfo `pulumi:"gcpNetworkInfo"`
	// (String) id of network to be used for MwsWorkspaces resource.
	NetworkId *string `pulumi:"networkId"`
	// name under which this network is registered
	NetworkName *string `pulumi:"networkName"`
	// ids of aws_security_group
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// ids of aws_subnet
	SubnetIds []string `pulumi:"subnetIds"`
	// mapping of MwsVpcEndpoint for PrivateLink or Private Service Connect connections
	VpcEndpoints *MwsNetworksVpcEndpoints `pulumi:"vpcEndpoints"`
	// aws_vpc id
	VpcId *string `pulumi:"vpcId"`
	// (String) VPC attachment status
	VpcStatus *string `pulumi:"vpcStatus"`
	// (Integer) id of associated workspace
	WorkspaceId *int `pulumi:"workspaceId"`
}

type MwsNetworksState struct {
	// Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/)
	AccountId     pulumi.StringPtrInput
	CreationTime  pulumi.IntPtrInput
	ErrorMessages MwsNetworksErrorMessageArrayInput
	// a block consists of Google Cloud specific information for this network, for example the VPC ID, subnet ID, and secondary IP ranges. It has the following fields:
	GcpNetworkInfo MwsNetworksGcpNetworkInfoPtrInput
	// (String) id of network to be used for MwsWorkspaces resource.
	NetworkId pulumi.StringPtrInput
	// name under which this network is registered
	NetworkName pulumi.StringPtrInput
	// ids of aws_security_group
	SecurityGroupIds pulumi.StringArrayInput
	// ids of aws_subnet
	SubnetIds pulumi.StringArrayInput
	// mapping of MwsVpcEndpoint for PrivateLink or Private Service Connect connections
	VpcEndpoints MwsNetworksVpcEndpointsPtrInput
	// aws_vpc id
	VpcId pulumi.StringPtrInput
	// (String) VPC attachment status
	VpcStatus pulumi.StringPtrInput
	// (Integer) id of associated workspace
	WorkspaceId pulumi.IntPtrInput
}

func (MwsNetworksState) ElementType() reflect.Type {
	return reflect.TypeOf((*mwsNetworksState)(nil)).Elem()
}

type mwsNetworksArgs struct {
	// Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/)
	AccountId     string                    `pulumi:"accountId"`
	CreationTime  *int                      `pulumi:"creationTime"`
	ErrorMessages []MwsNetworksErrorMessage `pulumi:"errorMessages"`
	// a block consists of Google Cloud specific information for this network, for example the VPC ID, subnet ID, and secondary IP ranges. It has the following fields:
	GcpNetworkInfo *MwsNetworksGcpNetworkInfo `pulumi:"gcpNetworkInfo"`
	// (String) id of network to be used for MwsWorkspaces resource.
	NetworkId *string `pulumi:"networkId"`
	// name under which this network is registered
	NetworkName string `pulumi:"networkName"`
	// ids of aws_security_group
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// ids of aws_subnet
	SubnetIds []string `pulumi:"subnetIds"`
	// mapping of MwsVpcEndpoint for PrivateLink or Private Service Connect connections
	VpcEndpoints *MwsNetworksVpcEndpoints `pulumi:"vpcEndpoints"`
	// aws_vpc id
	VpcId *string `pulumi:"vpcId"`
	// (String) VPC attachment status
	VpcStatus *string `pulumi:"vpcStatus"`
	// (Integer) id of associated workspace
	WorkspaceId *int `pulumi:"workspaceId"`
}

// The set of arguments for constructing a MwsNetworks resource.
type MwsNetworksArgs struct {
	// Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/)
	AccountId     pulumi.StringInput
	CreationTime  pulumi.IntPtrInput
	ErrorMessages MwsNetworksErrorMessageArrayInput
	// a block consists of Google Cloud specific information for this network, for example the VPC ID, subnet ID, and secondary IP ranges. It has the following fields:
	GcpNetworkInfo MwsNetworksGcpNetworkInfoPtrInput
	// (String) id of network to be used for MwsWorkspaces resource.
	NetworkId pulumi.StringPtrInput
	// name under which this network is registered
	NetworkName pulumi.StringInput
	// ids of aws_security_group
	SecurityGroupIds pulumi.StringArrayInput
	// ids of aws_subnet
	SubnetIds pulumi.StringArrayInput
	// mapping of MwsVpcEndpoint for PrivateLink or Private Service Connect connections
	VpcEndpoints MwsNetworksVpcEndpointsPtrInput
	// aws_vpc id
	VpcId pulumi.StringPtrInput
	// (String) VPC attachment status
	VpcStatus pulumi.StringPtrInput
	// (Integer) id of associated workspace
	WorkspaceId pulumi.IntPtrInput
}

func (MwsNetworksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mwsNetworksArgs)(nil)).Elem()
}

type MwsNetworksInput interface {
	pulumi.Input

	ToMwsNetworksOutput() MwsNetworksOutput
	ToMwsNetworksOutputWithContext(ctx context.Context) MwsNetworksOutput
}

func (*MwsNetworks) ElementType() reflect.Type {
	return reflect.TypeOf((**MwsNetworks)(nil)).Elem()
}

func (i *MwsNetworks) ToMwsNetworksOutput() MwsNetworksOutput {
	return i.ToMwsNetworksOutputWithContext(context.Background())
}

func (i *MwsNetworks) ToMwsNetworksOutputWithContext(ctx context.Context) MwsNetworksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MwsNetworksOutput)
}

// MwsNetworksArrayInput is an input type that accepts MwsNetworksArray and MwsNetworksArrayOutput values.
// You can construct a concrete instance of `MwsNetworksArrayInput` via:
//
//	MwsNetworksArray{ MwsNetworksArgs{...} }
type MwsNetworksArrayInput interface {
	pulumi.Input

	ToMwsNetworksArrayOutput() MwsNetworksArrayOutput
	ToMwsNetworksArrayOutputWithContext(context.Context) MwsNetworksArrayOutput
}

type MwsNetworksArray []MwsNetworksInput

func (MwsNetworksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MwsNetworks)(nil)).Elem()
}

func (i MwsNetworksArray) ToMwsNetworksArrayOutput() MwsNetworksArrayOutput {
	return i.ToMwsNetworksArrayOutputWithContext(context.Background())
}

func (i MwsNetworksArray) ToMwsNetworksArrayOutputWithContext(ctx context.Context) MwsNetworksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MwsNetworksArrayOutput)
}

// MwsNetworksMapInput is an input type that accepts MwsNetworksMap and MwsNetworksMapOutput values.
// You can construct a concrete instance of `MwsNetworksMapInput` via:
//
//	MwsNetworksMap{ "key": MwsNetworksArgs{...} }
type MwsNetworksMapInput interface {
	pulumi.Input

	ToMwsNetworksMapOutput() MwsNetworksMapOutput
	ToMwsNetworksMapOutputWithContext(context.Context) MwsNetworksMapOutput
}

type MwsNetworksMap map[string]MwsNetworksInput

func (MwsNetworksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MwsNetworks)(nil)).Elem()
}

func (i MwsNetworksMap) ToMwsNetworksMapOutput() MwsNetworksMapOutput {
	return i.ToMwsNetworksMapOutputWithContext(context.Background())
}

func (i MwsNetworksMap) ToMwsNetworksMapOutputWithContext(ctx context.Context) MwsNetworksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MwsNetworksMapOutput)
}

type MwsNetworksOutput struct{ *pulumi.OutputState }

func (MwsNetworksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MwsNetworks)(nil)).Elem()
}

func (o MwsNetworksOutput) ToMwsNetworksOutput() MwsNetworksOutput {
	return o
}

func (o MwsNetworksOutput) ToMwsNetworksOutputWithContext(ctx context.Context) MwsNetworksOutput {
	return o
}

// Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/)
func (o MwsNetworksOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *MwsNetworks) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o MwsNetworksOutput) CreationTime() pulumi.IntOutput {
	return o.ApplyT(func(v *MwsNetworks) pulumi.IntOutput { return v.CreationTime }).(pulumi.IntOutput)
}

func (o MwsNetworksOutput) ErrorMessages() MwsNetworksErrorMessageArrayOutput {
	return o.ApplyT(func(v *MwsNetworks) MwsNetworksErrorMessageArrayOutput { return v.ErrorMessages }).(MwsNetworksErrorMessageArrayOutput)
}

// a block consists of Google Cloud specific information for this network, for example the VPC ID, subnet ID, and secondary IP ranges. It has the following fields:
func (o MwsNetworksOutput) GcpNetworkInfo() MwsNetworksGcpNetworkInfoPtrOutput {
	return o.ApplyT(func(v *MwsNetworks) MwsNetworksGcpNetworkInfoPtrOutput { return v.GcpNetworkInfo }).(MwsNetworksGcpNetworkInfoPtrOutput)
}

// (String) id of network to be used for MwsWorkspaces resource.
func (o MwsNetworksOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *MwsNetworks) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// name under which this network is registered
func (o MwsNetworksOutput) NetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v *MwsNetworks) pulumi.StringOutput { return v.NetworkName }).(pulumi.StringOutput)
}

// ids of aws_security_group
func (o MwsNetworksOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MwsNetworks) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// ids of aws_subnet
func (o MwsNetworksOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MwsNetworks) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// mapping of MwsVpcEndpoint for PrivateLink or Private Service Connect connections
func (o MwsNetworksOutput) VpcEndpoints() MwsNetworksVpcEndpointsOutput {
	return o.ApplyT(func(v *MwsNetworks) MwsNetworksVpcEndpointsOutput { return v.VpcEndpoints }).(MwsNetworksVpcEndpointsOutput)
}

// aws_vpc id
func (o MwsNetworksOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MwsNetworks) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

// (String) VPC attachment status
func (o MwsNetworksOutput) VpcStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *MwsNetworks) pulumi.StringOutput { return v.VpcStatus }).(pulumi.StringOutput)
}

// (Integer) id of associated workspace
func (o MwsNetworksOutput) WorkspaceId() pulumi.IntOutput {
	return o.ApplyT(func(v *MwsNetworks) pulumi.IntOutput { return v.WorkspaceId }).(pulumi.IntOutput)
}

type MwsNetworksArrayOutput struct{ *pulumi.OutputState }

func (MwsNetworksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MwsNetworks)(nil)).Elem()
}

func (o MwsNetworksArrayOutput) ToMwsNetworksArrayOutput() MwsNetworksArrayOutput {
	return o
}

func (o MwsNetworksArrayOutput) ToMwsNetworksArrayOutputWithContext(ctx context.Context) MwsNetworksArrayOutput {
	return o
}

func (o MwsNetworksArrayOutput) Index(i pulumi.IntInput) MwsNetworksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MwsNetworks {
		return vs[0].([]*MwsNetworks)[vs[1].(int)]
	}).(MwsNetworksOutput)
}

type MwsNetworksMapOutput struct{ *pulumi.OutputState }

func (MwsNetworksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MwsNetworks)(nil)).Elem()
}

func (o MwsNetworksMapOutput) ToMwsNetworksMapOutput() MwsNetworksMapOutput {
	return o
}

func (o MwsNetworksMapOutput) ToMwsNetworksMapOutputWithContext(ctx context.Context) MwsNetworksMapOutput {
	return o
}

func (o MwsNetworksMapOutput) MapIndex(k pulumi.StringInput) MwsNetworksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MwsNetworks {
		return vs[0].(map[string]*MwsNetworks)[vs[1].(string)]
	}).(MwsNetworksOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MwsNetworksInput)(nil)).Elem(), &MwsNetworks{})
	pulumi.RegisterInputType(reflect.TypeOf((*MwsNetworksArrayInput)(nil)).Elem(), MwsNetworksArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MwsNetworksMapInput)(nil)).Elem(), MwsNetworksMap{})
	pulumi.RegisterOutputType(MwsNetworksOutput{})
	pulumi.RegisterOutputType(MwsNetworksArrayOutput{})
	pulumi.RegisterOutputType(MwsNetworksMapOutput{})
}
