// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Clean room assets are data and code objects -- tables, volumes, and notebooks that are shared with the clean room.
//
// ## Example Usage
//
// # Example: Clean Room Asset Resource
//
// ### Example for sharing a table
// This is an example for sharing an asset (table) in a clean room:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewCleanRoomsAsset(ctx, "this", &databricks.CleanRoomsAssetArgs{
//				CleanRoomName: "existing_clean_room",
//				Name:          "creator.default.myasset",
//				AssetType:     "TABLE",
//				TableLocalDetails: map[string]interface{}{
//					"localName": "some_creator.default.myasset",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// As of Pulumi v1.5, resources can be imported through configuration.
//
// hcl
//
// import {
//
//	id = "clean_room_name,name,asset_type"
//
//	to = databricks_clean_room_asset.this
//
// }
//
// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
//
// ```sh
// $ pulumi import databricks:index/cleanRoomAsset:CleanRoomAsset databricks_clean_room_asset "clean_room_name,name,asset_type"
// ```
type CleanRoomAsset struct {
	pulumi.CustomResourceState

	// (integer) - When the asset is added to the clean room, in epoch milliseconds
	AddedAt pulumi.IntOutput `pulumi:"addedAt"`
	// The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
	AssetType pulumi.StringOutput `pulumi:"assetType"`
	// The name of the clean room this asset belongs to.
	// This field is required for create operations and populated by the server for responses
	CleanRoomName pulumi.StringPtrOutput `pulumi:"cleanRoomName"`
	// Foreign table details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **FOREIGN_TABLE**
	ForeignTable CleanRoomAssetForeignTablePtrOutput `pulumi:"foreignTable"`
	// Local details for a foreign that are only available to its owner.
	// Present if and only if **asset_type** is **FOREIGN_TABLE**
	ForeignTableLocalDetails CleanRoomAssetForeignTableLocalDetailsPtrOutput `pulumi:"foreignTableLocalDetails"`
	// A fully qualified name that uniquely identifies the asset within the clean room.
	// This is also the name displayed in the clean room UI.
	//
	// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
	//
	// For notebooks, the name is the notebook file name.
	// For jar analyses, the name is the jar analysis name
	Name pulumi.StringOutput `pulumi:"name"`
	// Notebook details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **NOTEBOOK_FILE**
	Notebook CleanRoomAssetNotebookPtrOutput `pulumi:"notebook"`
	// (string) - The alias of the collaborator who owns this asset
	OwnerCollaboratorAlias pulumi.StringOutput `pulumi:"ownerCollaboratorAlias"`
	// (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
	Status pulumi.StringOutput `pulumi:"status"`
	// Table details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **TABLE**
	Table CleanRoomAssetTablePtrOutput `pulumi:"table"`
	// Local details for a table that are only available to its owner.
	// Present if and only if **asset_type** is **TABLE**
	TableLocalDetails CleanRoomAssetTableLocalDetailsPtrOutput `pulumi:"tableLocalDetails"`
	// View details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **VIEW**
	View CleanRoomAssetViewPtrOutput `pulumi:"view"`
	// Local details for a view that are only available to its owner.
	// Present if and only if **asset_type** is **VIEW**
	ViewLocalDetails CleanRoomAssetViewLocalDetailsPtrOutput `pulumi:"viewLocalDetails"`
	// Local details for a volume that are only available to its owner.
	// Present if and only if **asset_type** is **VOLUME**
	VolumeLocalDetails CleanRoomAssetVolumeLocalDetailsPtrOutput `pulumi:"volumeLocalDetails"`
	// Workspace ID of the resource
	WorkspaceId pulumi.StringPtrOutput `pulumi:"workspaceId"`
}

// NewCleanRoomAsset registers a new resource with the given unique name, arguments, and options.
func NewCleanRoomAsset(ctx *pulumi.Context,
	name string, args *CleanRoomAssetArgs, opts ...pulumi.ResourceOption) (*CleanRoomAsset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssetType == nil {
		return nil, errors.New("invalid value for required argument 'AssetType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CleanRoomAsset
	err := ctx.RegisterResource("databricks:index/cleanRoomAsset:CleanRoomAsset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCleanRoomAsset gets an existing CleanRoomAsset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCleanRoomAsset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CleanRoomAssetState, opts ...pulumi.ResourceOption) (*CleanRoomAsset, error) {
	var resource CleanRoomAsset
	err := ctx.ReadResource("databricks:index/cleanRoomAsset:CleanRoomAsset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CleanRoomAsset resources.
type cleanRoomAssetState struct {
	// (integer) - When the asset is added to the clean room, in epoch milliseconds
	AddedAt *int `pulumi:"addedAt"`
	// The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
	AssetType *string `pulumi:"assetType"`
	// The name of the clean room this asset belongs to.
	// This field is required for create operations and populated by the server for responses
	CleanRoomName *string `pulumi:"cleanRoomName"`
	// Foreign table details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **FOREIGN_TABLE**
	ForeignTable *CleanRoomAssetForeignTable `pulumi:"foreignTable"`
	// Local details for a foreign that are only available to its owner.
	// Present if and only if **asset_type** is **FOREIGN_TABLE**
	ForeignTableLocalDetails *CleanRoomAssetForeignTableLocalDetails `pulumi:"foreignTableLocalDetails"`
	// A fully qualified name that uniquely identifies the asset within the clean room.
	// This is also the name displayed in the clean room UI.
	//
	// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
	//
	// For notebooks, the name is the notebook file name.
	// For jar analyses, the name is the jar analysis name
	Name *string `pulumi:"name"`
	// Notebook details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **NOTEBOOK_FILE**
	Notebook *CleanRoomAssetNotebook `pulumi:"notebook"`
	// (string) - The alias of the collaborator who owns this asset
	OwnerCollaboratorAlias *string `pulumi:"ownerCollaboratorAlias"`
	// (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
	Status *string `pulumi:"status"`
	// Table details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **TABLE**
	Table *CleanRoomAssetTable `pulumi:"table"`
	// Local details for a table that are only available to its owner.
	// Present if and only if **asset_type** is **TABLE**
	TableLocalDetails *CleanRoomAssetTableLocalDetails `pulumi:"tableLocalDetails"`
	// View details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **VIEW**
	View *CleanRoomAssetView `pulumi:"view"`
	// Local details for a view that are only available to its owner.
	// Present if and only if **asset_type** is **VIEW**
	ViewLocalDetails *CleanRoomAssetViewLocalDetails `pulumi:"viewLocalDetails"`
	// Local details for a volume that are only available to its owner.
	// Present if and only if **asset_type** is **VOLUME**
	VolumeLocalDetails *CleanRoomAssetVolumeLocalDetails `pulumi:"volumeLocalDetails"`
	// Workspace ID of the resource
	WorkspaceId *string `pulumi:"workspaceId"`
}

type CleanRoomAssetState struct {
	// (integer) - When the asset is added to the clean room, in epoch milliseconds
	AddedAt pulumi.IntPtrInput
	// The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
	AssetType pulumi.StringPtrInput
	// The name of the clean room this asset belongs to.
	// This field is required for create operations and populated by the server for responses
	CleanRoomName pulumi.StringPtrInput
	// Foreign table details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **FOREIGN_TABLE**
	ForeignTable CleanRoomAssetForeignTablePtrInput
	// Local details for a foreign that are only available to its owner.
	// Present if and only if **asset_type** is **FOREIGN_TABLE**
	ForeignTableLocalDetails CleanRoomAssetForeignTableLocalDetailsPtrInput
	// A fully qualified name that uniquely identifies the asset within the clean room.
	// This is also the name displayed in the clean room UI.
	//
	// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
	//
	// For notebooks, the name is the notebook file name.
	// For jar analyses, the name is the jar analysis name
	Name pulumi.StringPtrInput
	// Notebook details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **NOTEBOOK_FILE**
	Notebook CleanRoomAssetNotebookPtrInput
	// (string) - The alias of the collaborator who owns this asset
	OwnerCollaboratorAlias pulumi.StringPtrInput
	// (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
	Status pulumi.StringPtrInput
	// Table details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **TABLE**
	Table CleanRoomAssetTablePtrInput
	// Local details for a table that are only available to its owner.
	// Present if and only if **asset_type** is **TABLE**
	TableLocalDetails CleanRoomAssetTableLocalDetailsPtrInput
	// View details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **VIEW**
	View CleanRoomAssetViewPtrInput
	// Local details for a view that are only available to its owner.
	// Present if and only if **asset_type** is **VIEW**
	ViewLocalDetails CleanRoomAssetViewLocalDetailsPtrInput
	// Local details for a volume that are only available to its owner.
	// Present if and only if **asset_type** is **VOLUME**
	VolumeLocalDetails CleanRoomAssetVolumeLocalDetailsPtrInput
	// Workspace ID of the resource
	WorkspaceId pulumi.StringPtrInput
}

func (CleanRoomAssetState) ElementType() reflect.Type {
	return reflect.TypeOf((*cleanRoomAssetState)(nil)).Elem()
}

type cleanRoomAssetArgs struct {
	// The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
	AssetType string `pulumi:"assetType"`
	// The name of the clean room this asset belongs to.
	// This field is required for create operations and populated by the server for responses
	CleanRoomName *string `pulumi:"cleanRoomName"`
	// Foreign table details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **FOREIGN_TABLE**
	ForeignTable *CleanRoomAssetForeignTable `pulumi:"foreignTable"`
	// Local details for a foreign that are only available to its owner.
	// Present if and only if **asset_type** is **FOREIGN_TABLE**
	ForeignTableLocalDetails *CleanRoomAssetForeignTableLocalDetails `pulumi:"foreignTableLocalDetails"`
	// A fully qualified name that uniquely identifies the asset within the clean room.
	// This is also the name displayed in the clean room UI.
	//
	// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
	//
	// For notebooks, the name is the notebook file name.
	// For jar analyses, the name is the jar analysis name
	Name *string `pulumi:"name"`
	// Notebook details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **NOTEBOOK_FILE**
	Notebook *CleanRoomAssetNotebook `pulumi:"notebook"`
	// Table details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **TABLE**
	Table *CleanRoomAssetTable `pulumi:"table"`
	// Local details for a table that are only available to its owner.
	// Present if and only if **asset_type** is **TABLE**
	TableLocalDetails *CleanRoomAssetTableLocalDetails `pulumi:"tableLocalDetails"`
	// View details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **VIEW**
	View *CleanRoomAssetView `pulumi:"view"`
	// Local details for a view that are only available to its owner.
	// Present if and only if **asset_type** is **VIEW**
	ViewLocalDetails *CleanRoomAssetViewLocalDetails `pulumi:"viewLocalDetails"`
	// Local details for a volume that are only available to its owner.
	// Present if and only if **asset_type** is **VOLUME**
	VolumeLocalDetails *CleanRoomAssetVolumeLocalDetails `pulumi:"volumeLocalDetails"`
	// Workspace ID of the resource
	WorkspaceId *string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a CleanRoomAsset resource.
type CleanRoomAssetArgs struct {
	// The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
	AssetType pulumi.StringInput
	// The name of the clean room this asset belongs to.
	// This field is required for create operations and populated by the server for responses
	CleanRoomName pulumi.StringPtrInput
	// Foreign table details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **FOREIGN_TABLE**
	ForeignTable CleanRoomAssetForeignTablePtrInput
	// Local details for a foreign that are only available to its owner.
	// Present if and only if **asset_type** is **FOREIGN_TABLE**
	ForeignTableLocalDetails CleanRoomAssetForeignTableLocalDetailsPtrInput
	// A fully qualified name that uniquely identifies the asset within the clean room.
	// This is also the name displayed in the clean room UI.
	//
	// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
	//
	// For notebooks, the name is the notebook file name.
	// For jar analyses, the name is the jar analysis name
	Name pulumi.StringPtrInput
	// Notebook details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **NOTEBOOK_FILE**
	Notebook CleanRoomAssetNotebookPtrInput
	// Table details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **TABLE**
	Table CleanRoomAssetTablePtrInput
	// Local details for a table that are only available to its owner.
	// Present if and only if **asset_type** is **TABLE**
	TableLocalDetails CleanRoomAssetTableLocalDetailsPtrInput
	// View details available to all collaborators of the clean room.
	// Present if and only if **asset_type** is **VIEW**
	View CleanRoomAssetViewPtrInput
	// Local details for a view that are only available to its owner.
	// Present if and only if **asset_type** is **VIEW**
	ViewLocalDetails CleanRoomAssetViewLocalDetailsPtrInput
	// Local details for a volume that are only available to its owner.
	// Present if and only if **asset_type** is **VOLUME**
	VolumeLocalDetails CleanRoomAssetVolumeLocalDetailsPtrInput
	// Workspace ID of the resource
	WorkspaceId pulumi.StringPtrInput
}

func (CleanRoomAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cleanRoomAssetArgs)(nil)).Elem()
}

type CleanRoomAssetInput interface {
	pulumi.Input

	ToCleanRoomAssetOutput() CleanRoomAssetOutput
	ToCleanRoomAssetOutputWithContext(ctx context.Context) CleanRoomAssetOutput
}

func (*CleanRoomAsset) ElementType() reflect.Type {
	return reflect.TypeOf((**CleanRoomAsset)(nil)).Elem()
}

func (i *CleanRoomAsset) ToCleanRoomAssetOutput() CleanRoomAssetOutput {
	return i.ToCleanRoomAssetOutputWithContext(context.Background())
}

func (i *CleanRoomAsset) ToCleanRoomAssetOutputWithContext(ctx context.Context) CleanRoomAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CleanRoomAssetOutput)
}

// CleanRoomAssetArrayInput is an input type that accepts CleanRoomAssetArray and CleanRoomAssetArrayOutput values.
// You can construct a concrete instance of `CleanRoomAssetArrayInput` via:
//
//	CleanRoomAssetArray{ CleanRoomAssetArgs{...} }
type CleanRoomAssetArrayInput interface {
	pulumi.Input

	ToCleanRoomAssetArrayOutput() CleanRoomAssetArrayOutput
	ToCleanRoomAssetArrayOutputWithContext(context.Context) CleanRoomAssetArrayOutput
}

type CleanRoomAssetArray []CleanRoomAssetInput

func (CleanRoomAssetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CleanRoomAsset)(nil)).Elem()
}

func (i CleanRoomAssetArray) ToCleanRoomAssetArrayOutput() CleanRoomAssetArrayOutput {
	return i.ToCleanRoomAssetArrayOutputWithContext(context.Background())
}

func (i CleanRoomAssetArray) ToCleanRoomAssetArrayOutputWithContext(ctx context.Context) CleanRoomAssetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CleanRoomAssetArrayOutput)
}

// CleanRoomAssetMapInput is an input type that accepts CleanRoomAssetMap and CleanRoomAssetMapOutput values.
// You can construct a concrete instance of `CleanRoomAssetMapInput` via:
//
//	CleanRoomAssetMap{ "key": CleanRoomAssetArgs{...} }
type CleanRoomAssetMapInput interface {
	pulumi.Input

	ToCleanRoomAssetMapOutput() CleanRoomAssetMapOutput
	ToCleanRoomAssetMapOutputWithContext(context.Context) CleanRoomAssetMapOutput
}

type CleanRoomAssetMap map[string]CleanRoomAssetInput

func (CleanRoomAssetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CleanRoomAsset)(nil)).Elem()
}

func (i CleanRoomAssetMap) ToCleanRoomAssetMapOutput() CleanRoomAssetMapOutput {
	return i.ToCleanRoomAssetMapOutputWithContext(context.Background())
}

func (i CleanRoomAssetMap) ToCleanRoomAssetMapOutputWithContext(ctx context.Context) CleanRoomAssetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CleanRoomAssetMapOutput)
}

type CleanRoomAssetOutput struct{ *pulumi.OutputState }

func (CleanRoomAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CleanRoomAsset)(nil)).Elem()
}

func (o CleanRoomAssetOutput) ToCleanRoomAssetOutput() CleanRoomAssetOutput {
	return o
}

func (o CleanRoomAssetOutput) ToCleanRoomAssetOutputWithContext(ctx context.Context) CleanRoomAssetOutput {
	return o
}

// (integer) - When the asset is added to the clean room, in epoch milliseconds
func (o CleanRoomAssetOutput) AddedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *CleanRoomAsset) pulumi.IntOutput { return v.AddedAt }).(pulumi.IntOutput)
}

// The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
func (o CleanRoomAssetOutput) AssetType() pulumi.StringOutput {
	return o.ApplyT(func(v *CleanRoomAsset) pulumi.StringOutput { return v.AssetType }).(pulumi.StringOutput)
}

// The name of the clean room this asset belongs to.
// This field is required for create operations and populated by the server for responses
func (o CleanRoomAssetOutput) CleanRoomName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CleanRoomAsset) pulumi.StringPtrOutput { return v.CleanRoomName }).(pulumi.StringPtrOutput)
}

// Foreign table details available to all collaborators of the clean room.
// Present if and only if **asset_type** is **FOREIGN_TABLE**
func (o CleanRoomAssetOutput) ForeignTable() CleanRoomAssetForeignTablePtrOutput {
	return o.ApplyT(func(v *CleanRoomAsset) CleanRoomAssetForeignTablePtrOutput { return v.ForeignTable }).(CleanRoomAssetForeignTablePtrOutput)
}

// Local details for a foreign that are only available to its owner.
// Present if and only if **asset_type** is **FOREIGN_TABLE**
func (o CleanRoomAssetOutput) ForeignTableLocalDetails() CleanRoomAssetForeignTableLocalDetailsPtrOutput {
	return o.ApplyT(func(v *CleanRoomAsset) CleanRoomAssetForeignTableLocalDetailsPtrOutput {
		return v.ForeignTableLocalDetails
	}).(CleanRoomAssetForeignTableLocalDetailsPtrOutput)
}

// A fully qualified name that uniquely identifies the asset within the clean room.
// This is also the name displayed in the clean room UI.
//
// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
//
// For notebooks, the name is the notebook file name.
// For jar analyses, the name is the jar analysis name
func (o CleanRoomAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CleanRoomAsset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Notebook details available to all collaborators of the clean room.
// Present if and only if **asset_type** is **NOTEBOOK_FILE**
func (o CleanRoomAssetOutput) Notebook() CleanRoomAssetNotebookPtrOutput {
	return o.ApplyT(func(v *CleanRoomAsset) CleanRoomAssetNotebookPtrOutput { return v.Notebook }).(CleanRoomAssetNotebookPtrOutput)
}

// (string) - The alias of the collaborator who owns this asset
func (o CleanRoomAssetOutput) OwnerCollaboratorAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *CleanRoomAsset) pulumi.StringOutput { return v.OwnerCollaboratorAlias }).(pulumi.StringOutput)
}

// (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
func (o CleanRoomAssetOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CleanRoomAsset) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Table details available to all collaborators of the clean room.
// Present if and only if **asset_type** is **TABLE**
func (o CleanRoomAssetOutput) Table() CleanRoomAssetTablePtrOutput {
	return o.ApplyT(func(v *CleanRoomAsset) CleanRoomAssetTablePtrOutput { return v.Table }).(CleanRoomAssetTablePtrOutput)
}

// Local details for a table that are only available to its owner.
// Present if and only if **asset_type** is **TABLE**
func (o CleanRoomAssetOutput) TableLocalDetails() CleanRoomAssetTableLocalDetailsPtrOutput {
	return o.ApplyT(func(v *CleanRoomAsset) CleanRoomAssetTableLocalDetailsPtrOutput { return v.TableLocalDetails }).(CleanRoomAssetTableLocalDetailsPtrOutput)
}

// View details available to all collaborators of the clean room.
// Present if and only if **asset_type** is **VIEW**
func (o CleanRoomAssetOutput) View() CleanRoomAssetViewPtrOutput {
	return o.ApplyT(func(v *CleanRoomAsset) CleanRoomAssetViewPtrOutput { return v.View }).(CleanRoomAssetViewPtrOutput)
}

// Local details for a view that are only available to its owner.
// Present if and only if **asset_type** is **VIEW**
func (o CleanRoomAssetOutput) ViewLocalDetails() CleanRoomAssetViewLocalDetailsPtrOutput {
	return o.ApplyT(func(v *CleanRoomAsset) CleanRoomAssetViewLocalDetailsPtrOutput { return v.ViewLocalDetails }).(CleanRoomAssetViewLocalDetailsPtrOutput)
}

// Local details for a volume that are only available to its owner.
// Present if and only if **asset_type** is **VOLUME**
func (o CleanRoomAssetOutput) VolumeLocalDetails() CleanRoomAssetVolumeLocalDetailsPtrOutput {
	return o.ApplyT(func(v *CleanRoomAsset) CleanRoomAssetVolumeLocalDetailsPtrOutput { return v.VolumeLocalDetails }).(CleanRoomAssetVolumeLocalDetailsPtrOutput)
}

// Workspace ID of the resource
func (o CleanRoomAssetOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CleanRoomAsset) pulumi.StringPtrOutput { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

type CleanRoomAssetArrayOutput struct{ *pulumi.OutputState }

func (CleanRoomAssetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CleanRoomAsset)(nil)).Elem()
}

func (o CleanRoomAssetArrayOutput) ToCleanRoomAssetArrayOutput() CleanRoomAssetArrayOutput {
	return o
}

func (o CleanRoomAssetArrayOutput) ToCleanRoomAssetArrayOutputWithContext(ctx context.Context) CleanRoomAssetArrayOutput {
	return o
}

func (o CleanRoomAssetArrayOutput) Index(i pulumi.IntInput) CleanRoomAssetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CleanRoomAsset {
		return vs[0].([]*CleanRoomAsset)[vs[1].(int)]
	}).(CleanRoomAssetOutput)
}

type CleanRoomAssetMapOutput struct{ *pulumi.OutputState }

func (CleanRoomAssetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CleanRoomAsset)(nil)).Elem()
}

func (o CleanRoomAssetMapOutput) ToCleanRoomAssetMapOutput() CleanRoomAssetMapOutput {
	return o
}

func (o CleanRoomAssetMapOutput) ToCleanRoomAssetMapOutputWithContext(ctx context.Context) CleanRoomAssetMapOutput {
	return o
}

func (o CleanRoomAssetMapOutput) MapIndex(k pulumi.StringInput) CleanRoomAssetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CleanRoomAsset {
		return vs[0].(map[string]*CleanRoomAsset)[vs[1].(string)]
	}).(CleanRoomAssetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CleanRoomAssetInput)(nil)).Elem(), &CleanRoomAsset{})
	pulumi.RegisterInputType(reflect.TypeOf((*CleanRoomAssetArrayInput)(nil)).Elem(), CleanRoomAssetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CleanRoomAssetMapInput)(nil)).Elem(), CleanRoomAssetMap{})
	pulumi.RegisterOutputType(CleanRoomAssetOutput{})
	pulumi.RegisterOutputType(CleanRoomAssetArrayOutput{})
	pulumi.RegisterOutputType(CleanRoomAssetMapOutput{})
}
