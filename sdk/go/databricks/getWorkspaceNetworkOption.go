// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can be used to get a single workspace network option.
//
// > **Note** This data source can only be used with an account-level provider!
//
// ## Example Usage
//
// Referring to a network policy by id:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.LookupWorkspaceNetworkOption(ctx, &databricks.LookupWorkspaceNetworkOptionArgs{
//				WorkspaceId: pulumi.StringRef("9999999999999999"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupWorkspaceNetworkOption(ctx *pulumi.Context, args *LookupWorkspaceNetworkOptionArgs, opts ...pulumi.InvokeOption) (*LookupWorkspaceNetworkOptionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkspaceNetworkOptionResult
	err := ctx.Invoke("databricks:index/getWorkspaceNetworkOption:getWorkspaceNetworkOption", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkspaceNetworkOption.
type LookupWorkspaceNetworkOptionArgs struct {
	// (string) - The network policy ID to apply to the workspace. This controls the network access rules
	// for all serverless compute resources in the workspace. Each workspace can only be
	// linked to one policy at a time. If no policy is explicitly assigned,
	// the workspace will use 'default-policy'
	NetworkPolicyId *string `pulumi:"networkPolicyId"`
	// The workspace ID
	WorkspaceId *string `pulumi:"workspaceId"`
}

// A collection of values returned by getWorkspaceNetworkOption.
type LookupWorkspaceNetworkOptionResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (string) - The network policy ID to apply to the workspace. This controls the network access rules
	// for all serverless compute resources in the workspace. Each workspace can only be
	// linked to one policy at a time. If no policy is explicitly assigned,
	// the workspace will use 'default-policy'
	NetworkPolicyId *string `pulumi:"networkPolicyId"`
	// (integer) - The workspace ID
	WorkspaceId *string `pulumi:"workspaceId"`
}

func LookupWorkspaceNetworkOptionOutput(ctx *pulumi.Context, args LookupWorkspaceNetworkOptionOutputArgs, opts ...pulumi.InvokeOption) LookupWorkspaceNetworkOptionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupWorkspaceNetworkOptionResultOutput, error) {
			args := v.(LookupWorkspaceNetworkOptionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("databricks:index/getWorkspaceNetworkOption:getWorkspaceNetworkOption", args, LookupWorkspaceNetworkOptionResultOutput{}, options).(LookupWorkspaceNetworkOptionResultOutput), nil
		}).(LookupWorkspaceNetworkOptionResultOutput)
}

// A collection of arguments for invoking getWorkspaceNetworkOption.
type LookupWorkspaceNetworkOptionOutputArgs struct {
	// (string) - The network policy ID to apply to the workspace. This controls the network access rules
	// for all serverless compute resources in the workspace. Each workspace can only be
	// linked to one policy at a time. If no policy is explicitly assigned,
	// the workspace will use 'default-policy'
	NetworkPolicyId pulumi.StringPtrInput `pulumi:"networkPolicyId"`
	// The workspace ID
	WorkspaceId pulumi.StringPtrInput `pulumi:"workspaceId"`
}

func (LookupWorkspaceNetworkOptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkspaceNetworkOptionArgs)(nil)).Elem()
}

// A collection of values returned by getWorkspaceNetworkOption.
type LookupWorkspaceNetworkOptionResultOutput struct{ *pulumi.OutputState }

func (LookupWorkspaceNetworkOptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkspaceNetworkOptionResult)(nil)).Elem()
}

func (o LookupWorkspaceNetworkOptionResultOutput) ToLookupWorkspaceNetworkOptionResultOutput() LookupWorkspaceNetworkOptionResultOutput {
	return o
}

func (o LookupWorkspaceNetworkOptionResultOutput) ToLookupWorkspaceNetworkOptionResultOutputWithContext(ctx context.Context) LookupWorkspaceNetworkOptionResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupWorkspaceNetworkOptionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceNetworkOptionResult) string { return v.Id }).(pulumi.StringOutput)
}

// (string) - The network policy ID to apply to the workspace. This controls the network access rules
// for all serverless compute resources in the workspace. Each workspace can only be
// linked to one policy at a time. If no policy is explicitly assigned,
// the workspace will use 'default-policy'
func (o LookupWorkspaceNetworkOptionResultOutput) NetworkPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceNetworkOptionResult) *string { return v.NetworkPolicyId }).(pulumi.StringPtrOutput)
}

// (integer) - The workspace ID
func (o LookupWorkspaceNetworkOptionResultOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceNetworkOptionResult) *string { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkspaceNetworkOptionResultOutput{})
}
