// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// > **Deprecated** Please migrate to databricks_group_role.
//
// This resource allows you to attach InstanceProfile (AWS) to databricks_group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			instanceProfile, err := databricks.NewInstanceProfile(ctx, "instanceProfile", &databricks.InstanceProfileArgs{
//				InstanceProfileArn: pulumi.String("my_instance_profile_arn"),
//			})
//			if err != nil {
//				return err
//			}
//			myGroup, err := databricks.NewGroup(ctx, "myGroup", nil)
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewGroupInstanceProfile(ctx, "myGroupInstanceProfile", &databricks.GroupInstanceProfileArgs{
//				GroupId:           myGroup.ID(),
//				InstanceProfileId: instanceProfile.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Related Resources
//
// The following resources are often used in the same context:
//
// * End to end workspace management guide.
// * getAwsBucketPolicy data to configure a simple access policy for AWS S3 buckets, so that Databricks can access data in it.
// * ClusterPolicy to create a Cluster policy, which limits the ability to create clusters based on a set of rules.
// * Group to manage [groups in Databricks Workspace](https://docs.databricks.com/administration-guide/users-groups/groups.html) or [Account Console](https://accounts.cloud.databricks.com/) (for AWS deployments).
// * Group data to retrieve information about Group members, entitlements and instance profiles.
// * GroupMember to attach users and groups as group members.
// * InstancePool to manage [instance pools](https://docs.databricks.com/clusters/instance-pools/index.html) to reduce cluster start and auto-scaling times by maintaining a set of idle, ready-to-use instances.
// * InstanceProfile to manage AWS EC2 instance profiles that users can launch Cluster and access data, like databricks_mount.
// * UserInstanceProfile to attach InstanceProfile (AWS) to databricks_user.
//
// ## Import
//
// -> **Note** Importing this resource is not currently supported.
type GroupInstanceProfile struct {
	pulumi.CustomResourceState

	// This is the id of the group resource.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// This is the id of the instance profile resource.
	InstanceProfileId pulumi.StringOutput `pulumi:"instanceProfileId"`
}

// NewGroupInstanceProfile registers a new resource with the given unique name, arguments, and options.
func NewGroupInstanceProfile(ctx *pulumi.Context,
	name string, args *GroupInstanceProfileArgs, opts ...pulumi.ResourceOption) (*GroupInstanceProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.InstanceProfileId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupInstanceProfile
	err := ctx.RegisterResource("databricks:index/groupInstanceProfile:GroupInstanceProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupInstanceProfile gets an existing GroupInstanceProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupInstanceProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupInstanceProfileState, opts ...pulumi.ResourceOption) (*GroupInstanceProfile, error) {
	var resource GroupInstanceProfile
	err := ctx.ReadResource("databricks:index/groupInstanceProfile:GroupInstanceProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupInstanceProfile resources.
type groupInstanceProfileState struct {
	// This is the id of the group resource.
	GroupId *string `pulumi:"groupId"`
	// This is the id of the instance profile resource.
	InstanceProfileId *string `pulumi:"instanceProfileId"`
}

type GroupInstanceProfileState struct {
	// This is the id of the group resource.
	GroupId pulumi.StringPtrInput
	// This is the id of the instance profile resource.
	InstanceProfileId pulumi.StringPtrInput
}

func (GroupInstanceProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupInstanceProfileState)(nil)).Elem()
}

type groupInstanceProfileArgs struct {
	// This is the id of the group resource.
	GroupId string `pulumi:"groupId"`
	// This is the id of the instance profile resource.
	InstanceProfileId string `pulumi:"instanceProfileId"`
}

// The set of arguments for constructing a GroupInstanceProfile resource.
type GroupInstanceProfileArgs struct {
	// This is the id of the group resource.
	GroupId pulumi.StringInput
	// This is the id of the instance profile resource.
	InstanceProfileId pulumi.StringInput
}

func (GroupInstanceProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupInstanceProfileArgs)(nil)).Elem()
}

type GroupInstanceProfileInput interface {
	pulumi.Input

	ToGroupInstanceProfileOutput() GroupInstanceProfileOutput
	ToGroupInstanceProfileOutputWithContext(ctx context.Context) GroupInstanceProfileOutput
}

func (*GroupInstanceProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupInstanceProfile)(nil)).Elem()
}

func (i *GroupInstanceProfile) ToGroupInstanceProfileOutput() GroupInstanceProfileOutput {
	return i.ToGroupInstanceProfileOutputWithContext(context.Background())
}

func (i *GroupInstanceProfile) ToGroupInstanceProfileOutputWithContext(ctx context.Context) GroupInstanceProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupInstanceProfileOutput)
}

func (i *GroupInstanceProfile) ToOutput(ctx context.Context) pulumix.Output[*GroupInstanceProfile] {
	return pulumix.Output[*GroupInstanceProfile]{
		OutputState: i.ToGroupInstanceProfileOutputWithContext(ctx).OutputState,
	}
}

// GroupInstanceProfileArrayInput is an input type that accepts GroupInstanceProfileArray and GroupInstanceProfileArrayOutput values.
// You can construct a concrete instance of `GroupInstanceProfileArrayInput` via:
//
//	GroupInstanceProfileArray{ GroupInstanceProfileArgs{...} }
type GroupInstanceProfileArrayInput interface {
	pulumi.Input

	ToGroupInstanceProfileArrayOutput() GroupInstanceProfileArrayOutput
	ToGroupInstanceProfileArrayOutputWithContext(context.Context) GroupInstanceProfileArrayOutput
}

type GroupInstanceProfileArray []GroupInstanceProfileInput

func (GroupInstanceProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupInstanceProfile)(nil)).Elem()
}

func (i GroupInstanceProfileArray) ToGroupInstanceProfileArrayOutput() GroupInstanceProfileArrayOutput {
	return i.ToGroupInstanceProfileArrayOutputWithContext(context.Background())
}

func (i GroupInstanceProfileArray) ToGroupInstanceProfileArrayOutputWithContext(ctx context.Context) GroupInstanceProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupInstanceProfileArrayOutput)
}

func (i GroupInstanceProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]*GroupInstanceProfile] {
	return pulumix.Output[[]*GroupInstanceProfile]{
		OutputState: i.ToGroupInstanceProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// GroupInstanceProfileMapInput is an input type that accepts GroupInstanceProfileMap and GroupInstanceProfileMapOutput values.
// You can construct a concrete instance of `GroupInstanceProfileMapInput` via:
//
//	GroupInstanceProfileMap{ "key": GroupInstanceProfileArgs{...} }
type GroupInstanceProfileMapInput interface {
	pulumi.Input

	ToGroupInstanceProfileMapOutput() GroupInstanceProfileMapOutput
	ToGroupInstanceProfileMapOutputWithContext(context.Context) GroupInstanceProfileMapOutput
}

type GroupInstanceProfileMap map[string]GroupInstanceProfileInput

func (GroupInstanceProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupInstanceProfile)(nil)).Elem()
}

func (i GroupInstanceProfileMap) ToGroupInstanceProfileMapOutput() GroupInstanceProfileMapOutput {
	return i.ToGroupInstanceProfileMapOutputWithContext(context.Background())
}

func (i GroupInstanceProfileMap) ToGroupInstanceProfileMapOutputWithContext(ctx context.Context) GroupInstanceProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupInstanceProfileMapOutput)
}

func (i GroupInstanceProfileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*GroupInstanceProfile] {
	return pulumix.Output[map[string]*GroupInstanceProfile]{
		OutputState: i.ToGroupInstanceProfileMapOutputWithContext(ctx).OutputState,
	}
}

type GroupInstanceProfileOutput struct{ *pulumi.OutputState }

func (GroupInstanceProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupInstanceProfile)(nil)).Elem()
}

func (o GroupInstanceProfileOutput) ToGroupInstanceProfileOutput() GroupInstanceProfileOutput {
	return o
}

func (o GroupInstanceProfileOutput) ToGroupInstanceProfileOutputWithContext(ctx context.Context) GroupInstanceProfileOutput {
	return o
}

func (o GroupInstanceProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*GroupInstanceProfile] {
	return pulumix.Output[*GroupInstanceProfile]{
		OutputState: o.OutputState,
	}
}

// This is the id of the group resource.
func (o GroupInstanceProfileOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupInstanceProfile) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// This is the id of the instance profile resource.
func (o GroupInstanceProfileOutput) InstanceProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupInstanceProfile) pulumi.StringOutput { return v.InstanceProfileId }).(pulumi.StringOutput)
}

type GroupInstanceProfileArrayOutput struct{ *pulumi.OutputState }

func (GroupInstanceProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupInstanceProfile)(nil)).Elem()
}

func (o GroupInstanceProfileArrayOutput) ToGroupInstanceProfileArrayOutput() GroupInstanceProfileArrayOutput {
	return o
}

func (o GroupInstanceProfileArrayOutput) ToGroupInstanceProfileArrayOutputWithContext(ctx context.Context) GroupInstanceProfileArrayOutput {
	return o
}

func (o GroupInstanceProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*GroupInstanceProfile] {
	return pulumix.Output[[]*GroupInstanceProfile]{
		OutputState: o.OutputState,
	}
}

func (o GroupInstanceProfileArrayOutput) Index(i pulumi.IntInput) GroupInstanceProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupInstanceProfile {
		return vs[0].([]*GroupInstanceProfile)[vs[1].(int)]
	}).(GroupInstanceProfileOutput)
}

type GroupInstanceProfileMapOutput struct{ *pulumi.OutputState }

func (GroupInstanceProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupInstanceProfile)(nil)).Elem()
}

func (o GroupInstanceProfileMapOutput) ToGroupInstanceProfileMapOutput() GroupInstanceProfileMapOutput {
	return o
}

func (o GroupInstanceProfileMapOutput) ToGroupInstanceProfileMapOutputWithContext(ctx context.Context) GroupInstanceProfileMapOutput {
	return o
}

func (o GroupInstanceProfileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*GroupInstanceProfile] {
	return pulumix.Output[map[string]*GroupInstanceProfile]{
		OutputState: o.OutputState,
	}
}

func (o GroupInstanceProfileMapOutput) MapIndex(k pulumi.StringInput) GroupInstanceProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupInstanceProfile {
		return vs[0].(map[string]*GroupInstanceProfile)[vs[1].(string)]
	}).(GroupInstanceProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInstanceProfileInput)(nil)).Elem(), &GroupInstanceProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInstanceProfileArrayInput)(nil)).Elem(), GroupInstanceProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInstanceProfileMapInput)(nil)).Elem(), GroupInstanceProfileMap{})
	pulumi.RegisterOutputType(GroupInstanceProfileOutput{})
	pulumi.RegisterOutputType(GroupInstanceProfileArrayOutput{})
	pulumi.RegisterOutputType(GroupInstanceProfileMapOutput{})
}
