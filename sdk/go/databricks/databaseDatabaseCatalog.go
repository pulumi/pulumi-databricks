// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-databricks/sdk/go/databricks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Database Catalogs are databases inside a Lakebase Database Instance which are synced into a Postgres Catalog inside Unity Catalog.
//
// ## Example Usage
//
// ### Example
//
// This example creates a Database Catalog based on an existing database in the Database Instance
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewDatabaseDatabaseCatalog(ctx, "this", &databricks.DatabaseDatabaseCatalogArgs{
//				Name:                 pulumi.String("my_registered_catalog"),
//				DatabaseInstanceName: pulumi.String("my-database-instance"),
//				DatabaseName:         pulumi.String("databricks_postgres"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// This example creates a Database Catalog along with a new database inside an existing Database Instance
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databricks.NewDatabaseDatabaseCatalog(ctx, "this", &databricks.DatabaseDatabaseCatalogArgs{
//				Name:                      pulumi.String("my_registered_catalog"),
//				DatabaseInstanceName:      pulumi.String("my-database-instance"),
//				DatabaseName:              pulumi.String("new_registered_catalog_database"),
//				CreateDatabaseIfNotExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// This example creates a DatabaseInstance and then a Database Catalog inside it
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-databricks/sdk/go/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			instance, err := databricks.NewDatabaseInstance(ctx, "instance", &databricks.DatabaseInstanceArgs{
//				Name:     pulumi.String("my-database-instance"),
//				Capacity: pulumi.String("CU_1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewDatabaseDatabaseCatalog(ctx, "catalog", &databricks.DatabaseDatabaseCatalogArgs{
//				Name:                      pulumi.String("my_registered_catalog"),
//				DatabaseInstanceName:      instance.Name,
//				DatabaseName:              pulumi.String("new_registered_catalog_database"),
//				CreateDatabaseIfNotExists: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// As of Pulumi v1.5, resources can be imported through configuration.
//
// hcl
//
// import {
//
//	id = "name"
//
//	to = databricks_database_database_catalog.this
//
// }
//
// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
//
// ```sh
// $ pulumi import databricks:index/databaseDatabaseCatalog:DatabaseDatabaseCatalog databricks_database_database_catalog "name"
// ```
type DatabaseDatabaseCatalog struct {
	pulumi.CustomResourceState

	CreateDatabaseIfNotExists pulumi.BoolOutput `pulumi:"createDatabaseIfNotExists"`
	// The name of the DatabaseInstance housing the database
	DatabaseInstanceName pulumi.StringOutput `pulumi:"databaseInstanceName"`
	// The name of the database (in a instance) associated with the catalog
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// The name of the catalog in UC
	Name pulumi.StringOutput `pulumi:"name"`
	// (string)
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Workspace ID of the resource
	WorkspaceId pulumi.StringPtrOutput `pulumi:"workspaceId"`
}

// NewDatabaseDatabaseCatalog registers a new resource with the given unique name, arguments, and options.
func NewDatabaseDatabaseCatalog(ctx *pulumi.Context,
	name string, args *DatabaseDatabaseCatalogArgs, opts ...pulumi.ResourceOption) (*DatabaseDatabaseCatalog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseInstanceName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseInstanceName'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseDatabaseCatalog
	err := ctx.RegisterResource("databricks:index/databaseDatabaseCatalog:DatabaseDatabaseCatalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseDatabaseCatalog gets an existing DatabaseDatabaseCatalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseDatabaseCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseDatabaseCatalogState, opts ...pulumi.ResourceOption) (*DatabaseDatabaseCatalog, error) {
	var resource DatabaseDatabaseCatalog
	err := ctx.ReadResource("databricks:index/databaseDatabaseCatalog:DatabaseDatabaseCatalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseDatabaseCatalog resources.
type databaseDatabaseCatalogState struct {
	CreateDatabaseIfNotExists *bool `pulumi:"createDatabaseIfNotExists"`
	// The name of the DatabaseInstance housing the database
	DatabaseInstanceName *string `pulumi:"databaseInstanceName"`
	// The name of the database (in a instance) associated with the catalog
	DatabaseName *string `pulumi:"databaseName"`
	// The name of the catalog in UC
	Name *string `pulumi:"name"`
	// (string)
	Uid *string `pulumi:"uid"`
	// Workspace ID of the resource
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DatabaseDatabaseCatalogState struct {
	CreateDatabaseIfNotExists pulumi.BoolPtrInput
	// The name of the DatabaseInstance housing the database
	DatabaseInstanceName pulumi.StringPtrInput
	// The name of the database (in a instance) associated with the catalog
	DatabaseName pulumi.StringPtrInput
	// The name of the catalog in UC
	Name pulumi.StringPtrInput
	// (string)
	Uid pulumi.StringPtrInput
	// Workspace ID of the resource
	WorkspaceId pulumi.StringPtrInput
}

func (DatabaseDatabaseCatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseDatabaseCatalogState)(nil)).Elem()
}

type databaseDatabaseCatalogArgs struct {
	CreateDatabaseIfNotExists *bool `pulumi:"createDatabaseIfNotExists"`
	// The name of the DatabaseInstance housing the database
	DatabaseInstanceName string `pulumi:"databaseInstanceName"`
	// The name of the database (in a instance) associated with the catalog
	DatabaseName string `pulumi:"databaseName"`
	// The name of the catalog in UC
	Name *string `pulumi:"name"`
	// Workspace ID of the resource
	WorkspaceId *string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DatabaseDatabaseCatalog resource.
type DatabaseDatabaseCatalogArgs struct {
	CreateDatabaseIfNotExists pulumi.BoolPtrInput
	// The name of the DatabaseInstance housing the database
	DatabaseInstanceName pulumi.StringInput
	// The name of the database (in a instance) associated with the catalog
	DatabaseName pulumi.StringInput
	// The name of the catalog in UC
	Name pulumi.StringPtrInput
	// Workspace ID of the resource
	WorkspaceId pulumi.StringPtrInput
}

func (DatabaseDatabaseCatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseDatabaseCatalogArgs)(nil)).Elem()
}

type DatabaseDatabaseCatalogInput interface {
	pulumi.Input

	ToDatabaseDatabaseCatalogOutput() DatabaseDatabaseCatalogOutput
	ToDatabaseDatabaseCatalogOutputWithContext(ctx context.Context) DatabaseDatabaseCatalogOutput
}

func (*DatabaseDatabaseCatalog) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDatabaseCatalog)(nil)).Elem()
}

func (i *DatabaseDatabaseCatalog) ToDatabaseDatabaseCatalogOutput() DatabaseDatabaseCatalogOutput {
	return i.ToDatabaseDatabaseCatalogOutputWithContext(context.Background())
}

func (i *DatabaseDatabaseCatalog) ToDatabaseDatabaseCatalogOutputWithContext(ctx context.Context) DatabaseDatabaseCatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDatabaseCatalogOutput)
}

// DatabaseDatabaseCatalogArrayInput is an input type that accepts DatabaseDatabaseCatalogArray and DatabaseDatabaseCatalogArrayOutput values.
// You can construct a concrete instance of `DatabaseDatabaseCatalogArrayInput` via:
//
//	DatabaseDatabaseCatalogArray{ DatabaseDatabaseCatalogArgs{...} }
type DatabaseDatabaseCatalogArrayInput interface {
	pulumi.Input

	ToDatabaseDatabaseCatalogArrayOutput() DatabaseDatabaseCatalogArrayOutput
	ToDatabaseDatabaseCatalogArrayOutputWithContext(context.Context) DatabaseDatabaseCatalogArrayOutput
}

type DatabaseDatabaseCatalogArray []DatabaseDatabaseCatalogInput

func (DatabaseDatabaseCatalogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseDatabaseCatalog)(nil)).Elem()
}

func (i DatabaseDatabaseCatalogArray) ToDatabaseDatabaseCatalogArrayOutput() DatabaseDatabaseCatalogArrayOutput {
	return i.ToDatabaseDatabaseCatalogArrayOutputWithContext(context.Background())
}

func (i DatabaseDatabaseCatalogArray) ToDatabaseDatabaseCatalogArrayOutputWithContext(ctx context.Context) DatabaseDatabaseCatalogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDatabaseCatalogArrayOutput)
}

// DatabaseDatabaseCatalogMapInput is an input type that accepts DatabaseDatabaseCatalogMap and DatabaseDatabaseCatalogMapOutput values.
// You can construct a concrete instance of `DatabaseDatabaseCatalogMapInput` via:
//
//	DatabaseDatabaseCatalogMap{ "key": DatabaseDatabaseCatalogArgs{...} }
type DatabaseDatabaseCatalogMapInput interface {
	pulumi.Input

	ToDatabaseDatabaseCatalogMapOutput() DatabaseDatabaseCatalogMapOutput
	ToDatabaseDatabaseCatalogMapOutputWithContext(context.Context) DatabaseDatabaseCatalogMapOutput
}

type DatabaseDatabaseCatalogMap map[string]DatabaseDatabaseCatalogInput

func (DatabaseDatabaseCatalogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseDatabaseCatalog)(nil)).Elem()
}

func (i DatabaseDatabaseCatalogMap) ToDatabaseDatabaseCatalogMapOutput() DatabaseDatabaseCatalogMapOutput {
	return i.ToDatabaseDatabaseCatalogMapOutputWithContext(context.Background())
}

func (i DatabaseDatabaseCatalogMap) ToDatabaseDatabaseCatalogMapOutputWithContext(ctx context.Context) DatabaseDatabaseCatalogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDatabaseCatalogMapOutput)
}

type DatabaseDatabaseCatalogOutput struct{ *pulumi.OutputState }

func (DatabaseDatabaseCatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDatabaseCatalog)(nil)).Elem()
}

func (o DatabaseDatabaseCatalogOutput) ToDatabaseDatabaseCatalogOutput() DatabaseDatabaseCatalogOutput {
	return o
}

func (o DatabaseDatabaseCatalogOutput) ToDatabaseDatabaseCatalogOutputWithContext(ctx context.Context) DatabaseDatabaseCatalogOutput {
	return o
}

func (o DatabaseDatabaseCatalogOutput) CreateDatabaseIfNotExists() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabaseDatabaseCatalog) pulumi.BoolOutput { return v.CreateDatabaseIfNotExists }).(pulumi.BoolOutput)
}

// The name of the DatabaseInstance housing the database
func (o DatabaseDatabaseCatalogOutput) DatabaseInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseDatabaseCatalog) pulumi.StringOutput { return v.DatabaseInstanceName }).(pulumi.StringOutput)
}

// The name of the database (in a instance) associated with the catalog
func (o DatabaseDatabaseCatalogOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseDatabaseCatalog) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// The name of the catalog in UC
func (o DatabaseDatabaseCatalogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseDatabaseCatalog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (string)
func (o DatabaseDatabaseCatalogOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseDatabaseCatalog) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Workspace ID of the resource
func (o DatabaseDatabaseCatalogOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDatabaseCatalog) pulumi.StringPtrOutput { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

type DatabaseDatabaseCatalogArrayOutput struct{ *pulumi.OutputState }

func (DatabaseDatabaseCatalogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseDatabaseCatalog)(nil)).Elem()
}

func (o DatabaseDatabaseCatalogArrayOutput) ToDatabaseDatabaseCatalogArrayOutput() DatabaseDatabaseCatalogArrayOutput {
	return o
}

func (o DatabaseDatabaseCatalogArrayOutput) ToDatabaseDatabaseCatalogArrayOutputWithContext(ctx context.Context) DatabaseDatabaseCatalogArrayOutput {
	return o
}

func (o DatabaseDatabaseCatalogArrayOutput) Index(i pulumi.IntInput) DatabaseDatabaseCatalogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseDatabaseCatalog {
		return vs[0].([]*DatabaseDatabaseCatalog)[vs[1].(int)]
	}).(DatabaseDatabaseCatalogOutput)
}

type DatabaseDatabaseCatalogMapOutput struct{ *pulumi.OutputState }

func (DatabaseDatabaseCatalogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseDatabaseCatalog)(nil)).Elem()
}

func (o DatabaseDatabaseCatalogMapOutput) ToDatabaseDatabaseCatalogMapOutput() DatabaseDatabaseCatalogMapOutput {
	return o
}

func (o DatabaseDatabaseCatalogMapOutput) ToDatabaseDatabaseCatalogMapOutputWithContext(ctx context.Context) DatabaseDatabaseCatalogMapOutput {
	return o
}

func (o DatabaseDatabaseCatalogMapOutput) MapIndex(k pulumi.StringInput) DatabaseDatabaseCatalogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseDatabaseCatalog {
		return vs[0].(map[string]*DatabaseDatabaseCatalog)[vs[1].(string)]
	}).(DatabaseDatabaseCatalogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDatabaseCatalogInput)(nil)).Elem(), &DatabaseDatabaseCatalog{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDatabaseCatalogArrayInput)(nil)).Elem(), DatabaseDatabaseCatalogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDatabaseCatalogMapInput)(nil)).Elem(), DatabaseDatabaseCatalogMap{})
	pulumi.RegisterOutputType(DatabaseDatabaseCatalogOutput{})
	pulumi.RegisterOutputType(DatabaseDatabaseCatalogArrayOutput{})
	pulumi.RegisterOutputType(DatabaseDatabaseCatalogMapOutput{})
}
