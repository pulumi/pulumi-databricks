// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// In Delta Sharing, a share is a read-only collection of tables and table partitions that a provider wants to share with one or more recipients. If your recipient uses a Unity Catalog-enabled Databricks workspace, you can also include notebook files, views (including dynamic views that restrict access at the row and column level), Unity Catalog volumes, and Unity Catalog models in a share.
    /// 
    /// &gt; This resource can only be used with a workspace-level provider!
    /// 
    /// In a Unity Catalog-enabled Databricks workspace, a share is a securable object registered in Unity Catalog. A `databricks.Share` is contained within a databricks_metastore. If you remove a share from your Unity Catalog metastore, all recipients of that share lose the ability to access it.
    /// 
    /// ## Example Usage
    /// 
    /// &gt; In Pulumi configuration, it is recommended to define objects in alphabetical order of their `name` arguments, so that you get consistent and readable diff. Whenever objects are added or removed, or `name` is renamed, you'll observe a change in the majority of tasks. It's related to the fact that the current version of the provider treats `object` blocks as an ordered list. Alternatively, `object` block could have been an unordered set, though end-users would see the entire block replaced upon a change in single property of the task.
    /// 
    /// Creating a Delta Sharing share and add some existing tables to it
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var things = Databricks.GetTables.Invoke(new()
    ///     {
    ///         CatalogName = "sandbox",
    ///         SchemaName = "things",
    ///     });
    /// 
    ///     var some = new Databricks.Share("some", new()
    ///     {
    ///         Objects = ,
    ///         Name = "my_share",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Creating a Delta Sharing share and add a schema to it(including all current and future tables).
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var schemaShare = new Databricks.Share("schema_share", new()
    ///     {
    ///         Name = "schema_share",
    ///         Objects = new[]
    ///         {
    ///             new Databricks.Inputs.ShareObjectArgs
    ///             {
    ///                 Name = "catalog_name.schema_name",
    ///                 DataObjectType = "SCHEMA",
    ///                 HistoryDataSharingStatus = "ENABLED",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Creating a Delta Sharing share and share a table with partitions spec and history
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var some = new Databricks.Share("some", new()
    ///     {
    ///         Name = "my_share",
    ///         Objects = new[]
    ///         {
    ///             new Databricks.Inputs.ShareObjectArgs
    ///             {
    ///                 Name = "my_catalog.my_schema.my_table",
    ///                 DataObjectType = "TABLE",
    ///                 HistoryDataSharingStatus = "ENABLED",
    ///                 Partitions = new[]
    ///                 {
    ///                     new Databricks.Inputs.ShareObjectPartitionArgs
    ///                     {
    ///                         Values = new[]
    ///                         {
    ///                             new Databricks.Inputs.ShareObjectPartitionValueArgs
    ///                             {
    ///                                 Name = "year",
    ///                                 Op = "EQUAL",
    ///                                 Value = "2009",
    ///                             },
    ///                             new Databricks.Inputs.ShareObjectPartitionValueArgs
    ///                             {
    ///                                 Name = "month",
    ///                                 Op = "EQUAL",
    ///                                 Value = "12",
    ///                             },
    ///                         },
    ///                     },
    ///                     new Databricks.Inputs.ShareObjectPartitionArgs
    ///                     {
    ///                         Values = new[]
    ///                         {
    ///                             new Databricks.Inputs.ShareObjectPartitionValueArgs
    ///                             {
    ///                                 Name = "year",
    ///                                 Op = "EQUAL",
    ///                                 Value = "2010",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Related Resources
    /// 
    /// The following resources are often used in the same context:
    /// 
    /// * databricks.Recipient to create Delta Sharing recipients.
    /// * databricks.Grants to manage Delta Sharing permissions.
    /// * databricks.getShares to read existing Delta Sharing shares.
    /// 
    /// ## Import
    /// 
    /// The share resource can be imported using the name of the share.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/share:Share this &lt;share_name&gt;
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/share:Share")]
    public partial class Share : global::Pulumi.CustomResource
    {
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Time when the share was created.
        /// </summary>
        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The principal that created the share.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Name of share. Change forces creation of a new resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("objects")]
        public Output<ImmutableArray<Outputs.ShareObject>> Objects { get; private set; } = null!;

        /// <summary>
        /// User name/group name/sp application_id of the share owner.
        /// </summary>
        [Output("owner")]
        public Output<string?> Owner { get; private set; } = null!;

        [Output("storageLocation")]
        public Output<string?> StorageLocation { get; private set; } = null!;

        [Output("storageRoot")]
        public Output<string?> StorageRoot { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<int> UpdatedAt { get; private set; } = null!;

        [Output("updatedBy")]
        public Output<string> UpdatedBy { get; private set; } = null!;


        /// <summary>
        /// Create a Share resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Share(string name, ShareArgs? args = null, CustomResourceOptions? options = null)
            : base("databricks:index/share:Share", name, args ?? new ShareArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Share(string name, Input<string> id, ShareState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/share:Share", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Share resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Share Get(string name, Input<string> id, ShareState? state = null, CustomResourceOptions? options = null)
        {
            return new Share(name, id, state, options);
        }
    }

    public sealed class ShareArgs : global::Pulumi.ResourceArgs
    {
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Time when the share was created.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        /// <summary>
        /// The principal that created the share.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Name of share. Change forces creation of a new resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("objects")]
        private InputList<Inputs.ShareObjectArgs>? _objects;
        public InputList<Inputs.ShareObjectArgs> Objects
        {
            get => _objects ?? (_objects = new InputList<Inputs.ShareObjectArgs>());
            set => _objects = value;
        }

        /// <summary>
        /// User name/group name/sp application_id of the share owner.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("storageLocation")]
        public Input<string>? StorageLocation { get; set; }

        [Input("storageRoot")]
        public Input<string>? StorageRoot { get; set; }

        [Input("updatedAt")]
        public Input<int>? UpdatedAt { get; set; }

        [Input("updatedBy")]
        public Input<string>? UpdatedBy { get; set; }

        public ShareArgs()
        {
        }
        public static new ShareArgs Empty => new ShareArgs();
    }

    public sealed class ShareState : global::Pulumi.ResourceArgs
    {
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Time when the share was created.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        /// <summary>
        /// The principal that created the share.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Name of share. Change forces creation of a new resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("objects")]
        private InputList<Inputs.ShareObjectGetArgs>? _objects;
        public InputList<Inputs.ShareObjectGetArgs> Objects
        {
            get => _objects ?? (_objects = new InputList<Inputs.ShareObjectGetArgs>());
            set => _objects = value;
        }

        /// <summary>
        /// User name/group name/sp application_id of the share owner.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("storageLocation")]
        public Input<string>? StorageLocation { get; set; }

        [Input("storageRoot")]
        public Input<string>? StorageRoot { get; set; }

        [Input("updatedAt")]
        public Input<int>? UpdatedAt { get; set; }

        [Input("updatedBy")]
        public Input<string>? UpdatedBy { get; set; }

        public ShareState()
        {
        }
        public static new ShareState Empty => new ShareState();
    }
}
