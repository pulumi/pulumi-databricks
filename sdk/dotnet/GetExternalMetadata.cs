// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetExternalMetadata
    {
        /// <summary>
        /// This data source can be used to get a single external metadata object.
        /// 
        /// &gt; **Note** This resource can only be used with an workspace-level provider!
        /// 
        /// ## Example Usage
        /// 
        /// Referring to an external metadata object by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetExternalMetadata.Invoke(new()
        ///     {
        ///         Name = "security_events_stream",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetExternalMetadataResult> InvokeAsync(GetExternalMetadataArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetExternalMetadataResult>("databricks:index/getExternalMetadata:getExternalMetadata", args ?? new GetExternalMetadataArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to get a single external metadata object.
        /// 
        /// &gt; **Note** This resource can only be used with an workspace-level provider!
        /// 
        /// ## Example Usage
        /// 
        /// Referring to an external metadata object by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetExternalMetadata.Invoke(new()
        ///     {
        ///         Name = "security_events_stream",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetExternalMetadataResult> Invoke(GetExternalMetadataInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetExternalMetadataResult>("databricks:index/getExternalMetadata:getExternalMetadata", args ?? new GetExternalMetadataInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to get a single external metadata object.
        /// 
        /// &gt; **Note** This resource can only be used with an workspace-level provider!
        /// 
        /// ## Example Usage
        /// 
        /// Referring to an external metadata object by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetExternalMetadata.Invoke(new()
        ///     {
        ///         Name = "security_events_stream",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetExternalMetadataResult> Invoke(GetExternalMetadataInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetExternalMetadataResult>("databricks:index/getExternalMetadata:getExternalMetadata", args ?? new GetExternalMetadataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExternalMetadataArgs : global::Pulumi.InvokeArgs
    {
        [Input("columns")]
        private List<string>? _columns;

        /// <summary>
        /// (list of string) - List of columns associated with the external metadata object
        /// </summary>
        public List<string> Columns
        {
            get => _columns ?? (_columns = new List<string>());
            set => _columns = value;
        }

        /// <summary>
        /// (string) - User-provided free-form text description
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// (string) - Type of entity within the external system
        /// </summary>
        [Input("entityType", required: true)]
        public string EntityType { get; set; } = null!;

        /// <summary>
        /// Name of the external metadata object
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// (string) - Owner of the external metadata object
        /// </summary>
        [Input("owner")]
        public string? Owner { get; set; }

        [Input("properties")]
        private Dictionary<string, string>? _properties;

        /// <summary>
        /// (object) - A map of key-value properties attached to the external metadata object
        /// </summary>
        public Dictionary<string, string> Properties
        {
            get => _properties ?? (_properties = new Dictionary<string, string>());
            set => _properties = value;
        }

        /// <summary>
        /// (string) - Type of external system. Possible values are: `AMAZON_REDSHIFT`, `AZURE_SYNAPSE`, `CONFLUENT`, `DATABRICKS`, `GOOGLE_BIGQUERY`, `KAFKA`, `LOOKER`, `MICROSOFT_FABRIC`, `MICROSOFT_SQL_SERVER`, `MONGODB`, `MYSQL`, `ORACLE`, `OTHER`, `POSTGRESQL`, `POWER_BI`, `SALESFORCE`, `SAP`, `SERVICENOW`, `SNOWFLAKE`, `TABLEAU`, `TERADATA`, `WORKDAY`
        /// </summary>
        [Input("systemType", required: true)]
        public string SystemType { get; set; } = null!;

        /// <summary>
        /// (string) - URL associated with the external metadata object
        /// </summary>
        [Input("url")]
        public string? Url { get; set; }

        public GetExternalMetadataArgs()
        {
        }
        public static new GetExternalMetadataArgs Empty => new GetExternalMetadataArgs();
    }

    public sealed class GetExternalMetadataInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("columns")]
        private InputList<string>? _columns;

        /// <summary>
        /// (list of string) - List of columns associated with the external metadata object
        /// </summary>
        public InputList<string> Columns
        {
            get => _columns ?? (_columns = new InputList<string>());
            set => _columns = value;
        }

        /// <summary>
        /// (string) - User-provided free-form text description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (string) - Type of entity within the external system
        /// </summary>
        [Input("entityType", required: true)]
        public Input<string> EntityType { get; set; } = null!;

        /// <summary>
        /// Name of the external metadata object
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// (string) - Owner of the external metadata object
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("properties")]
        private InputMap<string>? _properties;

        /// <summary>
        /// (object) - A map of key-value properties attached to the external metadata object
        /// </summary>
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        /// <summary>
        /// (string) - Type of external system. Possible values are: `AMAZON_REDSHIFT`, `AZURE_SYNAPSE`, `CONFLUENT`, `DATABRICKS`, `GOOGLE_BIGQUERY`, `KAFKA`, `LOOKER`, `MICROSOFT_FABRIC`, `MICROSOFT_SQL_SERVER`, `MONGODB`, `MYSQL`, `ORACLE`, `OTHER`, `POSTGRESQL`, `POWER_BI`, `SALESFORCE`, `SAP`, `SERVICENOW`, `SNOWFLAKE`, `TABLEAU`, `TERADATA`, `WORKDAY`
        /// </summary>
        [Input("systemType", required: true)]
        public Input<string> SystemType { get; set; } = null!;

        /// <summary>
        /// (string) - URL associated with the external metadata object
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public GetExternalMetadataInvokeArgs()
        {
        }
        public static new GetExternalMetadataInvokeArgs Empty => new GetExternalMetadataInvokeArgs();
    }


    [OutputType]
    public sealed class GetExternalMetadataResult
    {
        /// <summary>
        /// (list of string) - List of columns associated with the external metadata object
        /// </summary>
        public readonly ImmutableArray<string> Columns;
        /// <summary>
        /// (string) - Time at which this external metadata object was created
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// (string) - Username of external metadata object creator
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// (string) - User-provided free-form text description
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// (string) - Type of entity within the external system
        /// </summary>
        public readonly string EntityType;
        /// <summary>
        /// (string) - Unique identifier of the external metadata object
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (string) - Unique identifier of parent metastore
        /// </summary>
        public readonly string MetastoreId;
        /// <summary>
        /// (string) - Name of the external metadata object
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (string) - Owner of the external metadata object
        /// </summary>
        public readonly string? Owner;
        /// <summary>
        /// (object) - A map of key-value properties attached to the external metadata object
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Properties;
        /// <summary>
        /// (string) - Type of external system. Possible values are: `AMAZON_REDSHIFT`, `AZURE_SYNAPSE`, `CONFLUENT`, `DATABRICKS`, `GOOGLE_BIGQUERY`, `KAFKA`, `LOOKER`, `MICROSOFT_FABRIC`, `MICROSOFT_SQL_SERVER`, `MONGODB`, `MYSQL`, `ORACLE`, `OTHER`, `POSTGRESQL`, `POWER_BI`, `SALESFORCE`, `SAP`, `SERVICENOW`, `SNOWFLAKE`, `TABLEAU`, `TERADATA`, `WORKDAY`
        /// </summary>
        public readonly string SystemType;
        /// <summary>
        /// (string) - Time at which this external metadata object was last modified
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// (string) - Username of user who last modified external metadata object
        /// </summary>
        public readonly string UpdatedBy;
        /// <summary>
        /// (string) - URL associated with the external metadata object
        /// </summary>
        public readonly string? Url;

        [OutputConstructor]
        private GetExternalMetadataResult(
            ImmutableArray<string> columns,

            string createTime,

            string createdBy,

            string? description,

            string entityType,

            string id,

            string metastoreId,

            string name,

            string? owner,

            ImmutableDictionary<string, string>? properties,

            string systemType,

            string updateTime,

            string updatedBy,

            string? url)
        {
            Columns = columns;
            CreateTime = createTime;
            CreatedBy = createdBy;
            Description = description;
            EntityType = entityType;
            Id = id;
            MetastoreId = metastoreId;
            Name = name;
            Owner = owner;
            Properties = properties;
            SystemType = systemType;
            UpdateTime = updateTime;
            UpdatedBy = updatedBy;
            Url = url;
        }
    }
}
