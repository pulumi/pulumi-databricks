// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Outputs
{

    [OutputType]
    public sealed class GetPolicyInfosPolicyResult
    {
        /// <summary>
        /// (ColumnMaskOptions) - Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
        /// Required on create and optional on update. When specified on update,
        /// the new options will replace the existing options as a whole
        /// </summary>
        public readonly Outputs.GetPolicyInfosPolicyColumnMaskResult? ColumnMask;
        /// <summary>
        /// (string) - Optional description of the policy
        /// </summary>
        public readonly string? Comment;
        /// <summary>
        /// (integer) - Time at which the policy was created, in epoch milliseconds. Output only
        /// </summary>
        public readonly int CreatedAt;
        /// <summary>
        /// (string) - Username of the user who created the policy. Output only
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// (list of string) - Optional list of user or group names that should be excluded from the policy
        /// </summary>
        public readonly ImmutableArray<string> ExceptPrincipals;
        /// <summary>
        /// (string) - Type of securables that the policy should take effect on.
        /// Only `TABLE` is supported at this moment.
        /// Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
        /// </summary>
        public readonly string ForSecurableType;
        /// <summary>
        /// (string) - Unique identifier of the policy. This field is output only and is generated by the system
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (list of MatchColumn) - Optional list of condition expressions used to match table columns.
        /// Only valid when `for_securable_type` is `TABLE`.
        /// When specified, the policy only applies to tables whose columns satisfy all match conditions
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyInfosPolicyMatchColumnResult> MatchColumns;
        /// <summary>
        /// (string) - Name of the policy. Required on create and optional on update.
        /// To rename the policy, set `name` to a different value on update
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Required. The fully qualified name of securable to list policies for
        /// </summary>
        public readonly string? OnSecurableFullname;
        /// <summary>
        /// Required. The type of the securable to list policies for
        /// </summary>
        public readonly string? OnSecurableType;
        /// <summary>
        /// (string) - Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
        /// </summary>
        public readonly string PolicyType;
        /// <summary>
        /// (RowFilterOptions) - Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
        /// Required on create and optional on update. When specified on update,
        /// the new options will replace the existing options as a whole
        /// </summary>
        public readonly Outputs.GetPolicyInfosPolicyRowFilterResult? RowFilter;
        /// <summary>
        /// (list of string) - List of user or group names that the policy applies to.
        /// Required on create and optional on update
        /// </summary>
        public readonly ImmutableArray<string> ToPrincipals;
        /// <summary>
        /// (integer) - Time at which the policy was last modified, in epoch milliseconds. Output only
        /// </summary>
        public readonly int UpdatedAt;
        /// <summary>
        /// (string) - Username of the user who last modified the policy. Output only
        /// </summary>
        public readonly string UpdatedBy;
        /// <summary>
        /// (string) - Optional condition when the policy should take effect
        /// </summary>
        public readonly string? WhenCondition;

        [OutputConstructor]
        private GetPolicyInfosPolicyResult(
            Outputs.GetPolicyInfosPolicyColumnMaskResult? columnMask,

            string? comment,

            int createdAt,

            string createdBy,

            ImmutableArray<string> exceptPrincipals,

            string forSecurableType,

            string id,

            ImmutableArray<Outputs.GetPolicyInfosPolicyMatchColumnResult> matchColumns,

            string? name,

            string? onSecurableFullname,

            string? onSecurableType,

            string policyType,

            Outputs.GetPolicyInfosPolicyRowFilterResult? rowFilter,

            ImmutableArray<string> toPrincipals,

            int updatedAt,

            string updatedBy,

            string? whenCondition)
        {
            ColumnMask = columnMask;
            Comment = comment;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            ExceptPrincipals = exceptPrincipals;
            ForSecurableType = forSecurableType;
            Id = id;
            MatchColumns = matchColumns;
            Name = name;
            OnSecurableFullname = onSecurableFullname;
            OnSecurableType = onSecurableType;
            PolicyType = policyType;
            RowFilter = rowFilter;
            ToPrincipals = toPrincipals;
            UpdatedAt = updatedAt;
            UpdatedBy = updatedBy;
            WhenCondition = whenCondition;
        }
    }
}
