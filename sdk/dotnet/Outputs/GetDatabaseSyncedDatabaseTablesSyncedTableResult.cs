// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Outputs
{

    [OutputType]
    public sealed class GetDatabaseSyncedDatabaseTablesSyncedTableResult
    {
        /// <summary>
        /// (SyncedTableStatus) - Synced Table data synchronization status
        /// </summary>
        public readonly Outputs.GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusResult DataSynchronizationStatus;
        /// <summary>
        /// (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
        /// This is optional when creating synced database tables in registered catalogs. If this field is specified
        /// when creating synced database tables in registered catalogs, the database instance name MUST
        /// match that of the registered catalog (or the request will be rejected)
        /// </summary>
        public readonly string DatabaseInstanceName;
        /// <summary>
        /// (string) - The name of the database instance that this table is registered to. This field is always returned, and for
        /// tables inside database catalogs is inferred database instance associated with the catalog
        /// </summary>
        public readonly string EffectiveDatabaseInstanceName;
        /// <summary>
        /// (string) - The name of the logical database that this table is registered to
        /// </summary>
        public readonly string EffectiveLogicalDatabaseName;
        /// <summary>
        /// (string) - Target Postgres database object (logical database) name for this table.
        /// </summary>
        public readonly string LogicalDatabaseName;
        /// <summary>
        /// (string) - Full three-part (catalog, schema, table) name of the table
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (SyncedTableSpec)
        /// </summary>
        public readonly Outputs.GetDatabaseSyncedDatabaseTablesSyncedTableSpecResult? Spec;
        /// <summary>
        /// (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
        /// state of the data synchronization pipeline (i.e. the table may be in "ACTIVE" but the pipeline
        /// may be in "PROVISIONING" as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
        /// </summary>
        public readonly string UnityCatalogProvisioningState;

        [OutputConstructor]
        private GetDatabaseSyncedDatabaseTablesSyncedTableResult(
            Outputs.GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusResult dataSynchronizationStatus,

            string databaseInstanceName,

            string effectiveDatabaseInstanceName,

            string effectiveLogicalDatabaseName,

            string logicalDatabaseName,

            string name,

            Outputs.GetDatabaseSyncedDatabaseTablesSyncedTableSpecResult? spec,

            string unityCatalogProvisioningState)
        {
            DataSynchronizationStatus = dataSynchronizationStatus;
            DatabaseInstanceName = databaseInstanceName;
            EffectiveDatabaseInstanceName = effectiveDatabaseInstanceName;
            EffectiveLogicalDatabaseName = effectiveLogicalDatabaseName;
            LogicalDatabaseName = logicalDatabaseName;
            Name = name;
            Spec = spec;
            UnityCatalogProvisioningState = unityCatalogProvisioningState;
        }
    }
}
