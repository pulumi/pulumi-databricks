// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Outputs
{

    [OutputType]
    public sealed class GetTableTableInfoResult
    {
        public readonly string? AccessPoint;
        public readonly bool? BrowseOnly;
        /// <summary>
        /// Name of parent catalog.
        /// </summary>
        public readonly string? CatalogName;
        /// <summary>
        /// Array of ColumnInfo objects of the table's columns
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableTableInfoColumnResult> Columns;
        /// <summary>
        /// Free-form text description
        /// </summary>
        public readonly string? Comment;
        public readonly int? CreatedAt;
        public readonly string? CreatedBy;
        public readonly string? DataAccessConfigurationId;
        /// <summary>
        /// Table format, e.g. DELTA, CSV, JSON
        /// </summary>
        public readonly string? DataSourceFormat;
        public readonly int? DeletedAt;
        public readonly Outputs.GetTableTableInfoDeltaRuntimePropertiesKvpairsResult? DeltaRuntimePropertiesKvpairs;
        public readonly Outputs.GetTableTableInfoEffectivePredictiveOptimizationFlagResult? EffectivePredictiveOptimizationFlag;
        public readonly string? EnablePredictiveOptimization;
        public readonly Outputs.GetTableTableInfoEncryptionDetailsResult? EncryptionDetails;
        public readonly string? FullName;
        public readonly string? MetastoreId;
        /// <summary>
        /// Full name of the databricks_table: _`catalog`.`schema`.`table`_
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Current owner of the table
        /// </summary>
        public readonly string? Owner;
        public readonly string? PipelineId;
        public readonly ImmutableDictionary<string, string>? Properties;
        public readonly Outputs.GetTableTableInfoRowFilterResult? RowFilter;
        /// <summary>
        /// Name of parent schema relative to its parent catalog.
        /// </summary>
        public readonly string? SchemaName;
        public readonly string? SqlPath;
        public readonly string? StorageCredentialName;
        public readonly string? StorageLocation;
        public readonly ImmutableArray<Outputs.GetTableTableInfoTableConstraintResult> TableConstraints;
        public readonly string? TableId;
        /// <summary>
        /// Table type, e.g. MANAGED, EXTERNAL, VIEW
        /// </summary>
        public readonly string? TableType;
        public readonly int? UpdatedAt;
        public readonly string? UpdatedBy;
        /// <summary>
        /// View definition SQL (when `table_type` is VIEW, MATERIALIZED_VIEW, or STREAMING_TABLE)
        /// </summary>
        public readonly string? ViewDefinition;
        /// <summary>
        /// View dependencies (when `table_type` is VIEW or MATERIALIZED_VIEW, STREAMING_TABLE)
        /// </summary>
        public readonly Outputs.GetTableTableInfoViewDependenciesResult? ViewDependencies;

        [OutputConstructor]
        private GetTableTableInfoResult(
            string? accessPoint,

            bool? browseOnly,

            string? catalogName,

            ImmutableArray<Outputs.GetTableTableInfoColumnResult> columns,

            string? comment,

            int? createdAt,

            string? createdBy,

            string? dataAccessConfigurationId,

            string? dataSourceFormat,

            int? deletedAt,

            Outputs.GetTableTableInfoDeltaRuntimePropertiesKvpairsResult? deltaRuntimePropertiesKvpairs,

            Outputs.GetTableTableInfoEffectivePredictiveOptimizationFlagResult? effectivePredictiveOptimizationFlag,

            string? enablePredictiveOptimization,

            Outputs.GetTableTableInfoEncryptionDetailsResult? encryptionDetails,

            string? fullName,

            string? metastoreId,

            string? name,

            string? owner,

            string? pipelineId,

            ImmutableDictionary<string, string>? properties,

            Outputs.GetTableTableInfoRowFilterResult? rowFilter,

            string? schemaName,

            string? sqlPath,

            string? storageCredentialName,

            string? storageLocation,

            ImmutableArray<Outputs.GetTableTableInfoTableConstraintResult> tableConstraints,

            string? tableId,

            string? tableType,

            int? updatedAt,

            string? updatedBy,

            string? viewDefinition,

            Outputs.GetTableTableInfoViewDependenciesResult? viewDependencies)
        {
            AccessPoint = accessPoint;
            BrowseOnly = browseOnly;
            CatalogName = catalogName;
            Columns = columns;
            Comment = comment;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            DataAccessConfigurationId = dataAccessConfigurationId;
            DataSourceFormat = dataSourceFormat;
            DeletedAt = deletedAt;
            DeltaRuntimePropertiesKvpairs = deltaRuntimePropertiesKvpairs;
            EffectivePredictiveOptimizationFlag = effectivePredictiveOptimizationFlag;
            EnablePredictiveOptimization = enablePredictiveOptimization;
            EncryptionDetails = encryptionDetails;
            FullName = fullName;
            MetastoreId = metastoreId;
            Name = name;
            Owner = owner;
            PipelineId = pipelineId;
            Properties = properties;
            RowFilter = rowFilter;
            SchemaName = schemaName;
            SqlPath = sqlPath;
            StorageCredentialName = storageCredentialName;
            StorageLocation = storageLocation;
            TableConstraints = tableConstraints;
            TableId = tableId;
            TableType = tableType;
            UpdatedAt = updatedAt;
            UpdatedBy = updatedBy;
            ViewDefinition = viewDefinition;
            ViewDependencies = viewDependencies;
        }
    }
}
