// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Outputs
{

    [OutputType]
    public sealed class GetDatabaseInstancesDatabaseInstanceResult
    {
        /// <summary>
        /// (string) - The sku of the instance. Valid values are "CU_1", "CU_2", "CU_4", "CU_8"
        /// </summary>
        public readonly string? Capacity;
        /// <summary>
        /// (list of DatabaseInstanceRef) - The refs of the child instances. This is only available if the instance is
        /// parent instance
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabaseInstancesDatabaseInstanceChildInstanceRefResult> ChildInstanceRefs;
        /// <summary>
        /// (string) - The timestamp when the instance was created
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// (string) - The email of the creator of the instance
        /// </summary>
        public readonly string Creator;
        /// <summary>
        /// (boolean) - xref AIP-129. `enable_pg_native_login` is owned by the client, while `effective_enable_pg_native_login` is owned by the server.
        /// `enable_pg_native_login` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `effective_enable_pg_native_login` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        public readonly bool EffectiveEnablePgNativeLogin;
        /// <summary>
        /// (boolean) - xref AIP-129. `enable_readable_secondaries` is owned by the client, while `effective_enable_readable_secondaries` is owned by the server.
        /// `enable_readable_secondaries` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `effective_enable_readable_secondaries` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        public readonly bool EffectiveEnableReadableSecondaries;
        /// <summary>
        /// (integer) - xref AIP-129. `node_count` is owned by the client, while `effective_node_count` is owned by the server.
        /// `node_count` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `effective_node_count` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        public readonly int EffectiveNodeCount;
        /// <summary>
        /// (integer) - xref AIP-129. `retention_window_in_days` is owned by the client, while `effective_retention_window_in_days` is owned by the server.
        /// `retention_window_in_days` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `effective_retention_window_in_days` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        public readonly int EffectiveRetentionWindowInDays;
        /// <summary>
        /// (boolean) - xref AIP-129. `stopped` is owned by the client, while `effective_stopped` is owned by the server.
        /// `stopped` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `effective_stopped` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        public readonly bool EffectiveStopped;
        /// <summary>
        /// (boolean) - Whether the instance has PG native password login enabled. Defaults to true
        /// </summary>
        public readonly bool EnablePgNativeLogin;
        /// <summary>
        /// (boolean) - Whether to enable secondaries to serve read-only traffic. Defaults to false
        /// </summary>
        public readonly bool? EnableReadableSecondaries;
        /// <summary>
        /// (string) - Name of the ref database instance
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (integer) - The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
        /// 1 primary and 0 secondaries
        /// </summary>
        public readonly int? NodeCount;
        /// <summary>
        /// (DatabaseInstanceRef) - The ref of the parent instance. This is only available if the instance is
        /// child instance.
        /// Input: For specifying the parent instance to create a child instance. Optional.
        /// Output: Only populated if provided as input to create a child instance
        /// </summary>
        public readonly Outputs.GetDatabaseInstancesDatabaseInstanceParentInstanceRefResult? ParentInstanceRef;
        /// <summary>
        /// (string) - The version of Postgres running on the instance
        /// </summary>
        public readonly string PgVersion;
        /// <summary>
        /// (string) - The DNS endpoint to connect to the instance for read only access. This is only available if
        /// enable_readable_secondaries is true
        /// </summary>
        public readonly string ReadOnlyDns;
        /// <summary>
        /// (string) - The DNS endpoint to connect to the instance for read+write access
        /// </summary>
        public readonly string ReadWriteDns;
        /// <summary>
        /// (integer) - The retention window for the instance. This is the time window in days
        /// for which the historical data is retained. The default value is 7 days.
        /// Valid values are 2 to 35 days
        /// </summary>
        public readonly int? RetentionWindowInDays;
        /// <summary>
        /// (string) - The current state of the instance. Possible values are: `AVAILABLE`, `DELETING`, `FAILING_OVER`, `STARTING`, `STOPPED`, `UPDATING`
        /// </summary>
        public readonly string State;
        /// <summary>
        /// (boolean) - Whether the instance is stopped
        /// </summary>
        public readonly bool? Stopped;
        /// <summary>
        /// (string) - Id of the ref database instance
        /// </summary>
        public readonly string Uid;

        [OutputConstructor]
        private GetDatabaseInstancesDatabaseInstanceResult(
            string? capacity,

            ImmutableArray<Outputs.GetDatabaseInstancesDatabaseInstanceChildInstanceRefResult> childInstanceRefs,

            string creationTime,

            string creator,

            bool effectiveEnablePgNativeLogin,

            bool effectiveEnableReadableSecondaries,

            int effectiveNodeCount,

            int effectiveRetentionWindowInDays,

            bool effectiveStopped,

            bool enablePgNativeLogin,

            bool? enableReadableSecondaries,

            string name,

            int? nodeCount,

            Outputs.GetDatabaseInstancesDatabaseInstanceParentInstanceRefResult? parentInstanceRef,

            string pgVersion,

            string readOnlyDns,

            string readWriteDns,

            int? retentionWindowInDays,

            string state,

            bool? stopped,

            string uid)
        {
            Capacity = capacity;
            ChildInstanceRefs = childInstanceRefs;
            CreationTime = creationTime;
            Creator = creator;
            EffectiveEnablePgNativeLogin = effectiveEnablePgNativeLogin;
            EffectiveEnableReadableSecondaries = effectiveEnableReadableSecondaries;
            EffectiveNodeCount = effectiveNodeCount;
            EffectiveRetentionWindowInDays = effectiveRetentionWindowInDays;
            EffectiveStopped = effectiveStopped;
            EnablePgNativeLogin = enablePgNativeLogin;
            EnableReadableSecondaries = enableReadableSecondaries;
            Name = name;
            NodeCount = nodeCount;
            ParentInstanceRef = parentInstanceRef;
            PgVersion = pgVersion;
            ReadOnlyDns = readOnlyDns;
            ReadWriteDns = readWriteDns;
            RetentionWindowInDays = retentionWindowInDays;
            State = state;
            Stopped = stopped;
            Uid = uid;
        }
    }
}
