// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Outputs
{

    [OutputType]
    public sealed class GetAlertsV2ResultResult
    {
        /// <summary>
        /// (string) - The timestamp indicating when the alert was created
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// (string) - Custom description for the alert. support mustache template
        /// </summary>
        public readonly string? CustomDescription;
        /// <summary>
        /// (string) - Custom summary for the alert. support mustache template
        /// </summary>
        public readonly string? CustomSummary;
        /// <summary>
        /// (string) - The display name of the alert
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// (AlertV2RunAs) - The actual identity that will be used to execute the alert.
        /// This is an output-only field that shows the resolved run-as identity after applying
        /// permissions and defaults
        /// </summary>
        public readonly Outputs.GetAlertsV2ResultEffectiveRunAsResult EffectiveRunAs;
        /// <summary>
        /// (AlertV2Evaluation)
        /// </summary>
        public readonly Outputs.GetAlertsV2ResultEvaluationResult? Evaluation;
        /// <summary>
        /// (string) - UUID identifying the alert
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (string) - Indicates whether the query is trashed. Possible values are: `ACTIVE`, `TRASHED`
        /// </summary>
        public readonly string LifecycleState;
        /// <summary>
        /// (string) - The owner's username. This field is set to "Unavailable" if the user has been deleted
        /// </summary>
        public readonly string OwnerUserName;
        /// <summary>
        /// (string) - The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
        /// </summary>
        public readonly string? ParentPath;
        /// <summary>
        /// (string) - Text of the query to be run
        /// </summary>
        public readonly string? QueryText;
        /// <summary>
        /// (AlertV2RunAs) - Specifies the identity that will be used to run the alert.
        /// This field allows you to configure alerts to run as a specific user or service principal.
        /// - For user identity: Set `UserName` to the email of an active workspace user. Users can only set this to their own email.
        /// - For service principal: Set `ServicePrincipalName` to the application ID. Requires the `servicePrincipal/user` role.
        /// If not specified, the alert will run as the request user
        /// </summary>
        public readonly Outputs.GetAlertsV2ResultRunAsResult? RunAs;
        /// <summary>
        /// (string, deprecated) - The run as username or application ID of service principal.
        /// On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role.
        /// Deprecated: Use `RunAs` field instead. This field will be removed in a future release
        /// </summary>
        public readonly string? RunAsUserName;
        /// <summary>
        /// (CronSchedule)
        /// </summary>
        public readonly Outputs.GetAlertsV2ResultScheduleResult? Schedule;
        /// <summary>
        /// (string) - The timestamp indicating when the alert was updated
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// (string) - ID of the SQL warehouse attached to the alert
        /// </summary>
        public readonly string? WarehouseId;

        [OutputConstructor]
        private GetAlertsV2ResultResult(
            string createTime,

            string? customDescription,

            string? customSummary,

            string? displayName,

            Outputs.GetAlertsV2ResultEffectiveRunAsResult effectiveRunAs,

            Outputs.GetAlertsV2ResultEvaluationResult? evaluation,

            string id,

            string lifecycleState,

            string ownerUserName,

            string? parentPath,

            string? queryText,

            Outputs.GetAlertsV2ResultRunAsResult? runAs,

            string? runAsUserName,

            Outputs.GetAlertsV2ResultScheduleResult? schedule,

            string updateTime,

            string? warehouseId)
        {
            CreateTime = createTime;
            CustomDescription = customDescription;
            CustomSummary = customSummary;
            DisplayName = displayName;
            EffectiveRunAs = effectiveRunAs;
            Evaluation = evaluation;
            Id = id;
            LifecycleState = lifecycleState;
            OwnerUserName = ownerUserName;
            ParentPath = parentPath;
            QueryText = queryText;
            RunAs = runAs;
            RunAsUserName = runAsUserName;
            Schedule = schedule;
            UpdateTime = updateTime;
            WarehouseId = warehouseId;
        }
    }
}
