// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Outputs
{

    [OutputType]
    public sealed class GetFunctionsFunctionResult
    {
        public readonly bool? BrowseOnly;
        public readonly string? CatalogName;
        public readonly string? Comment;
        public readonly int? CreatedAt;
        public readonly string? CreatedBy;
        public readonly string? DataType;
        public readonly string? ExternalLanguage;
        public readonly string? ExternalName;
        public readonly string? FullDataType;
        public readonly string? FullName;
        public readonly string? FunctionId;
        public readonly ImmutableArray<Outputs.GetFunctionsFunctionInputParamResult> InputParams;
        public readonly bool? IsDeterministic;
        public readonly bool? IsNullCall;
        public readonly string? MetastoreId;
        public readonly string? Name;
        public readonly string? Owner;
        public readonly string? ParameterStyle;
        public readonly string? Properties;
        public readonly ImmutableArray<Outputs.GetFunctionsFunctionReturnParamResult> ReturnParams;
        public readonly string? RoutineBody;
        public readonly string? RoutineDefinition;
        public readonly ImmutableArray<Outputs.GetFunctionsFunctionRoutineDependencyResult> RoutineDependencies;
        public readonly string? SchemaName;
        public readonly string? SecurityType;
        public readonly string? SpecificName;
        public readonly string? SqlDataAccess;
        public readonly string? SqlPath;
        public readonly int? UpdatedAt;
        public readonly string? UpdatedBy;

        [OutputConstructor]
        private GetFunctionsFunctionResult(
            bool? browseOnly,

            string? catalogName,

            string? comment,

            int? createdAt,

            string? createdBy,

            string? dataType,

            string? externalLanguage,

            string? externalName,

            string? fullDataType,

            string? fullName,

            string? functionId,

            ImmutableArray<Outputs.GetFunctionsFunctionInputParamResult> inputParams,

            bool? isDeterministic,

            bool? isNullCall,

            string? metastoreId,

            string? name,

            string? owner,

            string? parameterStyle,

            string? properties,

            ImmutableArray<Outputs.GetFunctionsFunctionReturnParamResult> returnParams,

            string? routineBody,

            string? routineDefinition,

            ImmutableArray<Outputs.GetFunctionsFunctionRoutineDependencyResult> routineDependencies,

            string? schemaName,

            string? securityType,

            string? specificName,

            string? sqlDataAccess,

            string? sqlPath,

            int? updatedAt,

            string? updatedBy)
        {
            BrowseOnly = browseOnly;
            CatalogName = catalogName;
            Comment = comment;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            DataType = dataType;
            ExternalLanguage = externalLanguage;
            ExternalName = externalName;
            FullDataType = fullDataType;
            FullName = fullName;
            FunctionId = functionId;
            InputParams = inputParams;
            IsDeterministic = isDeterministic;
            IsNullCall = isNullCall;
            MetastoreId = metastoreId;
            Name = name;
            Owner = owner;
            ParameterStyle = parameterStyle;
            Properties = properties;
            ReturnParams = returnParams;
            RoutineBody = routineBody;
            RoutineDefinition = routineDefinition;
            RoutineDependencies = routineDependencies;
            SchemaName = schemaName;
            SecurityType = securityType;
            SpecificName = specificName;
            SqlDataAccess = sqlDataAccess;
            SqlPath = sqlPath;
            UpdatedAt = updatedAt;
            UpdatedBy = updatedBy;
        }
    }
}
