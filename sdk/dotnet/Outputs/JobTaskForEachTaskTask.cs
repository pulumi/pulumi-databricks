// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Outputs
{

    [OutputType]
    public sealed class JobTaskForEachTaskTask
    {
        public readonly Outputs.JobTaskForEachTaskTaskCleanRoomsNotebookTask? CleanRoomsNotebookTask;
        public readonly Outputs.JobTaskForEachTaskTaskConditionTask? ConditionTask;
        public readonly Outputs.JobTaskForEachTaskTaskDbtTask? DbtTask;
        public readonly ImmutableArray<Outputs.JobTaskForEachTaskTaskDependsOn> DependsOns;
        public readonly string? Description;
        public readonly bool? DisableAutoOptimization;
        public readonly Outputs.JobTaskForEachTaskTaskEmailNotifications? EmailNotifications;
        public readonly string? EnvironmentKey;
        public readonly string? ExistingClusterId;
        public readonly Outputs.JobTaskForEachTaskTaskHealth? Health;
        public readonly string? JobClusterKey;
        public readonly ImmutableArray<Outputs.JobTaskForEachTaskTaskLibrary> Libraries;
        public readonly int? MaxRetries;
        public readonly int? MinRetryIntervalMillis;
        public readonly Outputs.JobTaskForEachTaskTaskNewCluster? NewCluster;
        public readonly Outputs.JobTaskForEachTaskTaskNotebookTask? NotebookTask;
        public readonly Outputs.JobTaskForEachTaskTaskNotificationSettings? NotificationSettings;
        public readonly Outputs.JobTaskForEachTaskTaskPipelineTask? PipelineTask;
        public readonly Outputs.JobTaskForEachTaskTaskPythonWheelTask? PythonWheelTask;
        public readonly bool? RetryOnTimeout;
        public readonly string? RunIf;
        public readonly Outputs.JobTaskForEachTaskTaskRunJobTask? RunJobTask;
        public readonly Outputs.JobTaskForEachTaskTaskSparkJarTask? SparkJarTask;
        public readonly Outputs.JobTaskForEachTaskTaskSparkPythonTask? SparkPythonTask;
        public readonly Outputs.JobTaskForEachTaskTaskSparkSubmitTask? SparkSubmitTask;
        public readonly Outputs.JobTaskForEachTaskTaskSqlTask? SqlTask;
        public readonly string TaskKey;
        public readonly int? TimeoutSeconds;
        public readonly Outputs.JobTaskForEachTaskTaskWebhookNotifications? WebhookNotifications;

        [OutputConstructor]
        private JobTaskForEachTaskTask(
            Outputs.JobTaskForEachTaskTaskCleanRoomsNotebookTask? cleanRoomsNotebookTask,

            Outputs.JobTaskForEachTaskTaskConditionTask? conditionTask,

            Outputs.JobTaskForEachTaskTaskDbtTask? dbtTask,

            ImmutableArray<Outputs.JobTaskForEachTaskTaskDependsOn> dependsOns,

            string? description,

            bool? disableAutoOptimization,

            Outputs.JobTaskForEachTaskTaskEmailNotifications? emailNotifications,

            string? environmentKey,

            string? existingClusterId,

            Outputs.JobTaskForEachTaskTaskHealth? health,

            string? jobClusterKey,

            ImmutableArray<Outputs.JobTaskForEachTaskTaskLibrary> libraries,

            int? maxRetries,

            int? minRetryIntervalMillis,

            Outputs.JobTaskForEachTaskTaskNewCluster? newCluster,

            Outputs.JobTaskForEachTaskTaskNotebookTask? notebookTask,

            Outputs.JobTaskForEachTaskTaskNotificationSettings? notificationSettings,

            Outputs.JobTaskForEachTaskTaskPipelineTask? pipelineTask,

            Outputs.JobTaskForEachTaskTaskPythonWheelTask? pythonWheelTask,

            bool? retryOnTimeout,

            string? runIf,

            Outputs.JobTaskForEachTaskTaskRunJobTask? runJobTask,

            Outputs.JobTaskForEachTaskTaskSparkJarTask? sparkJarTask,

            Outputs.JobTaskForEachTaskTaskSparkPythonTask? sparkPythonTask,

            Outputs.JobTaskForEachTaskTaskSparkSubmitTask? sparkSubmitTask,

            Outputs.JobTaskForEachTaskTaskSqlTask? sqlTask,

            string taskKey,

            int? timeoutSeconds,

            Outputs.JobTaskForEachTaskTaskWebhookNotifications? webhookNotifications)
        {
            CleanRoomsNotebookTask = cleanRoomsNotebookTask;
            ConditionTask = conditionTask;
            DbtTask = dbtTask;
            DependsOns = dependsOns;
            Description = description;
            DisableAutoOptimization = disableAutoOptimization;
            EmailNotifications = emailNotifications;
            EnvironmentKey = environmentKey;
            ExistingClusterId = existingClusterId;
            Health = health;
            JobClusterKey = jobClusterKey;
            Libraries = libraries;
            MaxRetries = maxRetries;
            MinRetryIntervalMillis = minRetryIntervalMillis;
            NewCluster = newCluster;
            NotebookTask = notebookTask;
            NotificationSettings = notificationSettings;
            PipelineTask = pipelineTask;
            PythonWheelTask = pythonWheelTask;
            RetryOnTimeout = retryOnTimeout;
            RunIf = runIf;
            RunJobTask = runJobTask;
            SparkJarTask = sparkJarTask;
            SparkPythonTask = sparkPythonTask;
            SparkSubmitTask = sparkSubmitTask;
            SqlTask = sqlTask;
            TaskKey = taskKey;
            TimeoutSeconds = timeoutSeconds;
            WebhookNotifications = webhookNotifications;
        }
    }
}
