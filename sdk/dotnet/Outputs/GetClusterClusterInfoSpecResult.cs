// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Outputs
{

    [OutputType]
    public sealed class GetClusterClusterInfoSpecResult
    {
        public readonly bool? ApplyPolicyDefaultValues;
        public readonly Outputs.GetClusterClusterInfoSpecAutoscaleResult? Autoscale;
        public readonly Outputs.GetClusterClusterInfoSpecAwsAttributesResult? AwsAttributes;
        public readonly Outputs.GetClusterClusterInfoSpecAzureAttributesResult? AzureAttributes;
        /// <summary>
        /// The id of the cluster.
        /// </summary>
        public readonly string ClusterId;
        public readonly Outputs.GetClusterClusterInfoSpecClusterLogConfResult? ClusterLogConf;
        public readonly ImmutableArray<Outputs.GetClusterClusterInfoSpecClusterMountInfoResult> ClusterMountInfos;
        /// <summary>
        /// The exact name of the cluster to search. Can only be specified if there is exactly one cluster with the provided name.
        /// </summary>
        public readonly string? ClusterName;
        /// <summary>
        /// Additional tags for cluster resources.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? CustomTags;
        /// <summary>
        /// Security features of the cluster. Unity Catalog requires `SINGLE_USER` or `USER_ISOLATION` mode. `LEGACY_PASSTHROUGH` for passthrough cluster and `LEGACY_TABLE_ACL` for Table ACL cluster. Default to `NONE`, i.e. no security feature enabled.
        /// </summary>
        public readonly string? DataSecurityMode;
        public readonly Outputs.GetClusterClusterInfoSpecDockerImageResult? DockerImage;
        /// <summary>
        /// similar to `instance_pool_id`, but for driver node.
        /// </summary>
        public readonly string DriverInstancePoolId;
        /// <summary>
        /// The node type of the Spark driver.
        /// </summary>
        public readonly string DriverNodeTypeId;
        /// <summary>
        /// Use autoscaling local storage.
        /// </summary>
        public readonly bool EnableElasticDisk;
        /// <summary>
        /// Enable local disk encryption.
        /// </summary>
        public readonly bool EnableLocalDiskEncryption;
        public readonly Outputs.GetClusterClusterInfoSpecGcpAttributesResult? GcpAttributes;
        /// <summary>
        /// An optional token to guarantee the idempotency of cluster creation requests.
        /// </summary>
        public readonly string? IdempotencyToken;
        public readonly ImmutableArray<Outputs.GetClusterClusterInfoSpecInitScriptResult> InitScripts;
        /// <summary>
        /// The pool of idle instances the cluster is attached to.
        /// </summary>
        public readonly string? InstancePoolId;
        public readonly bool? IsSingleNode;
        public readonly string? Kind;
        public readonly ImmutableArray<Outputs.GetClusterClusterInfoSpecLibraryResult> Libraries;
        /// <summary>
        /// Any supported databricks.getNodeType id.
        /// </summary>
        public readonly string NodeTypeId;
        public readonly int? NumWorkers;
        /// <summary>
        /// Identifier of Cluster Policy to validate cluster and preset certain defaults.
        /// </summary>
        public readonly string? PolicyId;
        /// <summary>
        /// The type of runtime of the cluster
        /// </summary>
        public readonly string? RuntimeEngine;
        /// <summary>
        /// The optional user name of the user to assign to an interactive cluster. This field is required when using standard AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
        /// </summary>
        public readonly string? SingleUserName;
        /// <summary>
        /// Map with key-value pairs to fine-tune Spark clusters.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? SparkConf;
        /// <summary>
        /// Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? SparkEnvVars;
        /// <summary>
        /// [Runtime version](https://docs.databricks.com/runtime/index.html) of the cluster.
        /// </summary>
        public readonly string SparkVersion;
        /// <summary>
        /// SSH public key contents that will be added to each Spark node in this cluster.
        /// </summary>
        public readonly ImmutableArray<string> SshPublicKeys;
        public readonly bool? UseMlRuntime;
        public readonly Outputs.GetClusterClusterInfoSpecWorkloadTypeResult? WorkloadType;

        [OutputConstructor]
        private GetClusterClusterInfoSpecResult(
            bool? applyPolicyDefaultValues,

            Outputs.GetClusterClusterInfoSpecAutoscaleResult? autoscale,

            Outputs.GetClusterClusterInfoSpecAwsAttributesResult? awsAttributes,

            Outputs.GetClusterClusterInfoSpecAzureAttributesResult? azureAttributes,

            string clusterId,

            Outputs.GetClusterClusterInfoSpecClusterLogConfResult? clusterLogConf,

            ImmutableArray<Outputs.GetClusterClusterInfoSpecClusterMountInfoResult> clusterMountInfos,

            string? clusterName,

            ImmutableDictionary<string, string>? customTags,

            string? dataSecurityMode,

            Outputs.GetClusterClusterInfoSpecDockerImageResult? dockerImage,

            string driverInstancePoolId,

            string driverNodeTypeId,

            bool enableElasticDisk,

            bool enableLocalDiskEncryption,

            Outputs.GetClusterClusterInfoSpecGcpAttributesResult? gcpAttributes,

            string? idempotencyToken,

            ImmutableArray<Outputs.GetClusterClusterInfoSpecInitScriptResult> initScripts,

            string? instancePoolId,

            bool? isSingleNode,

            string? kind,

            ImmutableArray<Outputs.GetClusterClusterInfoSpecLibraryResult> libraries,

            string nodeTypeId,

            int? numWorkers,

            string? policyId,

            string? runtimeEngine,

            string? singleUserName,

            ImmutableDictionary<string, string>? sparkConf,

            ImmutableDictionary<string, string>? sparkEnvVars,

            string sparkVersion,

            ImmutableArray<string> sshPublicKeys,

            bool? useMlRuntime,

            Outputs.GetClusterClusterInfoSpecWorkloadTypeResult? workloadType)
        {
            ApplyPolicyDefaultValues = applyPolicyDefaultValues;
            Autoscale = autoscale;
            AwsAttributes = awsAttributes;
            AzureAttributes = azureAttributes;
            ClusterId = clusterId;
            ClusterLogConf = clusterLogConf;
            ClusterMountInfos = clusterMountInfos;
            ClusterName = clusterName;
            CustomTags = customTags;
            DataSecurityMode = dataSecurityMode;
            DockerImage = dockerImage;
            DriverInstancePoolId = driverInstancePoolId;
            DriverNodeTypeId = driverNodeTypeId;
            EnableElasticDisk = enableElasticDisk;
            EnableLocalDiskEncryption = enableLocalDiskEncryption;
            GcpAttributes = gcpAttributes;
            IdempotencyToken = idempotencyToken;
            InitScripts = initScripts;
            InstancePoolId = instancePoolId;
            IsSingleNode = isSingleNode;
            Kind = kind;
            Libraries = libraries;
            NodeTypeId = nodeTypeId;
            NumWorkers = numWorkers;
            PolicyId = policyId;
            RuntimeEngine = runtimeEngine;
            SingleUserName = singleUserName;
            SparkConf = sparkConf;
            SparkEnvVars = sparkEnvVars;
            SparkVersion = sparkVersion;
            SshPublicKeys = sshPublicKeys;
            UseMlRuntime = useMlRuntime;
            WorkloadType = workloadType;
        }
    }
}
