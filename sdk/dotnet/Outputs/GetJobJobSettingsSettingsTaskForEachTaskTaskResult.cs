// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Outputs
{

    [OutputType]
    public sealed class GetJobJobSettingsSettingsTaskForEachTaskTaskResult
    {
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTaskResult? ConditionTask;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTaskResult? DbtTask;
        public readonly ImmutableArray<Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOnResult> DependsOns;
        public readonly string? Description;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotificationsResult? EmailNotifications;
        public readonly string? EnvironmentKey;
        public readonly string? ExistingClusterId;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskHealthResult? Health;
        public readonly string? JobClusterKey;
        public readonly ImmutableArray<Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryResult> Libraries;
        public readonly int? MaxRetries;
        public readonly int? MinRetryIntervalMillis;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterResult? NewCluster;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTaskResult? NotebookTask;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettingsResult? NotificationSettings;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTaskResult? PipelineTask;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTaskResult? PythonWheelTask;
        public readonly bool RetryOnTimeout;
        public readonly string? RunIf;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTaskResult? RunJobTask;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTaskResult? SparkJarTask;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTaskResult? SparkPythonTask;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTaskResult? SparkSubmitTask;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskResult? SqlTask;
        public readonly string? TaskKey;
        public readonly int? TimeoutSeconds;
        public readonly Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsResult? WebhookNotifications;

        [OutputConstructor]
        private GetJobJobSettingsSettingsTaskForEachTaskTaskResult(
            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTaskResult? conditionTask,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTaskResult? dbtTask,

            ImmutableArray<Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOnResult> dependsOns,

            string? description,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotificationsResult? emailNotifications,

            string? environmentKey,

            string? existingClusterId,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskHealthResult? health,

            string? jobClusterKey,

            ImmutableArray<Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryResult> libraries,

            int? maxRetries,

            int? minRetryIntervalMillis,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterResult? newCluster,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTaskResult? notebookTask,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettingsResult? notificationSettings,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTaskResult? pipelineTask,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTaskResult? pythonWheelTask,

            bool retryOnTimeout,

            string? runIf,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTaskResult? runJobTask,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTaskResult? sparkJarTask,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTaskResult? sparkPythonTask,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTaskResult? sparkSubmitTask,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskResult? sqlTask,

            string? taskKey,

            int? timeoutSeconds,

            Outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsResult? webhookNotifications)
        {
            ConditionTask = conditionTask;
            DbtTask = dbtTask;
            DependsOns = dependsOns;
            Description = description;
            EmailNotifications = emailNotifications;
            EnvironmentKey = environmentKey;
            ExistingClusterId = existingClusterId;
            Health = health;
            JobClusterKey = jobClusterKey;
            Libraries = libraries;
            MaxRetries = maxRetries;
            MinRetryIntervalMillis = minRetryIntervalMillis;
            NewCluster = newCluster;
            NotebookTask = notebookTask;
            NotificationSettings = notificationSettings;
            PipelineTask = pipelineTask;
            PythonWheelTask = pythonWheelTask;
            RetryOnTimeout = retryOnTimeout;
            RunIf = runIf;
            RunJobTask = runJobTask;
            SparkJarTask = sparkJarTask;
            SparkPythonTask = sparkPythonTask;
            SparkSubmitTask = sparkSubmitTask;
            SqlTask = sqlTask;
            TaskKey = taskKey;
            TimeoutSeconds = timeoutSeconds;
            WebhookNotifications = webhookNotifications;
        }
    }
}
