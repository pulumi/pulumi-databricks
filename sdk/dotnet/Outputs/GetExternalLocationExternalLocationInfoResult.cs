// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Outputs
{

    [OutputType]
    public sealed class GetExternalLocationExternalLocationInfoResult
    {
        /// <summary>
        /// The ARN of the s3 access point to use with the external location (AWS).
        /// </summary>
        public readonly string? AccessPoint;
        public readonly bool? BrowseOnly;
        /// <summary>
        /// User-supplied comment.
        /// </summary>
        public readonly string? Comment;
        /// <summary>
        /// Time at which this catalog was created, in epoch milliseconds.
        /// </summary>
        public readonly int? CreatedAt;
        /// <summary>
        /// Username of catalog creator.
        /// </summary>
        public readonly string? CreatedBy;
        /// <summary>
        /// Unique ID of storage credential.
        /// </summary>
        public readonly string? CredentialId;
        /// <summary>
        /// Name of the databricks.StorageCredential to use with this external location.
        /// </summary>
        public readonly string? CredentialName;
        /// <summary>
        /// The options for Server-Side Encryption to be used by each Databricks s3 client when connecting to S3 cloud storage (AWS).
        /// </summary>
        public readonly Outputs.GetExternalLocationExternalLocationInfoEncryptionDetailsResult? EncryptionDetails;
        /// <summary>
        /// Unique identifier of the parent Metastore.
        /// </summary>
        public readonly string? MetastoreId;
        /// <summary>
        /// The name of the external location
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Username/groupname/sp application_id of the external location owner.
        /// </summary>
        public readonly string? Owner;
        /// <summary>
        /// Indicates whether the external location is read-only.
        /// </summary>
        public readonly bool? ReadOnly;
        /// <summary>
        /// Time at which this catalog was last modified, in epoch milliseconds.
        /// </summary>
        public readonly int? UpdatedAt;
        /// <summary>
        /// Username of user who last modified catalog.
        /// </summary>
        public readonly string? UpdatedBy;
        /// <summary>
        /// Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
        /// </summary>
        public readonly string? Url;

        [OutputConstructor]
        private GetExternalLocationExternalLocationInfoResult(
            string? accessPoint,

            bool? browseOnly,

            string? comment,

            int? createdAt,

            string? createdBy,

            string? credentialId,

            string? credentialName,

            Outputs.GetExternalLocationExternalLocationInfoEncryptionDetailsResult? encryptionDetails,

            string? metastoreId,

            string? name,

            string? owner,

            bool? readOnly,

            int? updatedAt,

            string? updatedBy,

            string? url)
        {
            AccessPoint = accessPoint;
            BrowseOnly = browseOnly;
            Comment = comment;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            CredentialId = credentialId;
            CredentialName = credentialName;
            EncryptionDetails = encryptionDetails;
            MetastoreId = metastoreId;
            Name = name;
            Owner = owner;
            ReadOnly = readOnly;
            UpdatedAt = updatedAt;
            UpdatedBy = updatedBy;
            Url = url;
        }
    }
}
