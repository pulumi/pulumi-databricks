// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// Users with MANAGE Schema can use quality monitor v2 to set up data quality monitoring checks for UC objects, currently support schema.
    /// 
    /// &gt; **Note** This resource can only be used with an workspace-level provider!
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Databricks.Schema("this", new()
    ///     {
    ///         CatalogName = "my_catalog",
    ///         Name = "my_schema",
    ///     });
    /// 
    ///     var thisQualityMonitorV2 = new Databricks.QualityMonitorV2("this", new()
    ///     {
    ///         ObjectType = "schema",
    ///         ObjectId = @this.SchemaId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// As of Pulumi v1.5, resources can be imported through configuration.
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   id = "object_type,object_id"
    /// 
    ///   to = databricks_quality_monitor_v2.this
    /// 
    /// }
    /// 
    /// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/qualityMonitorV2:QualityMonitorV2 databricks_quality_monitor_v2 "object_type,object_id"
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/qualityMonitorV2:QualityMonitorV2")]
    public partial class QualityMonitorV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (AnomalyDetectionConfig)
        /// </summary>
        [Output("anomalyDetectionConfig")]
        public Output<Outputs.QualityMonitorV2AnomalyDetectionConfig> AnomalyDetectionConfig { get; private set; } = null!;

        /// <summary>
        /// The uuid of the request object. For example, schema id
        /// </summary>
        [Output("objectId")]
        public Output<string> ObjectId { get; private set; } = null!;

        /// <summary>
        /// The type of the monitored object. Can be one of the following: schema
        /// </summary>
        [Output("objectType")]
        public Output<string> ObjectType { get; private set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Output("workspaceId")]
        public Output<string?> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a QualityMonitorV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public QualityMonitorV2(string name, QualityMonitorV2Args args, CustomResourceOptions? options = null)
            : base("databricks:index/qualityMonitorV2:QualityMonitorV2", name, args ?? new QualityMonitorV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private QualityMonitorV2(string name, Input<string> id, QualityMonitorV2State? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/qualityMonitorV2:QualityMonitorV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing QualityMonitorV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static QualityMonitorV2 Get(string name, Input<string> id, QualityMonitorV2State? state = null, CustomResourceOptions? options = null)
        {
            return new QualityMonitorV2(name, id, state, options);
        }
    }

    public sealed class QualityMonitorV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The uuid of the request object. For example, schema id
        /// </summary>
        [Input("objectId", required: true)]
        public Input<string> ObjectId { get; set; } = null!;

        /// <summary>
        /// The type of the monitored object. Can be one of the following: schema
        /// </summary>
        [Input("objectType", required: true)]
        public Input<string> ObjectType { get; set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public QualityMonitorV2Args()
        {
        }
        public static new QualityMonitorV2Args Empty => new QualityMonitorV2Args();
    }

    public sealed class QualityMonitorV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (AnomalyDetectionConfig)
        /// </summary>
        [Input("anomalyDetectionConfig")]
        public Input<Inputs.QualityMonitorV2AnomalyDetectionConfigGetArgs>? AnomalyDetectionConfig { get; set; }

        /// <summary>
        /// The uuid of the request object. For example, schema id
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        /// <summary>
        /// The type of the monitored object. Can be one of the following: schema
        /// </summary>
        [Input("objectType")]
        public Input<string>? ObjectType { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public QualityMonitorV2State()
        {
        }
        public static new QualityMonitorV2State Empty => new QualityMonitorV2State();
    }
}
