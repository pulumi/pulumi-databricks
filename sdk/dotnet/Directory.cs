// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// This resource allows you to manage directories in [Databricks Workpace](https://docs.databricks.com/workspace/workspace-objects.html).
    /// 
    /// &gt; This resource can only be used with a workspace-level provider!
    /// 
    /// ## Example Usage
    /// 
    /// You can declare a Pulumi-managed directory by specifying the `path` attribute of the corresponding directory.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myCustomDirectory = new Databricks.Directory("my_custom_directory", new()
    ///     {
    ///         Path = "/my_custom_directory",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Access Control
    /// 
    /// - databricks.Permissions can control which groups or individual users can access folders.
    /// 
    /// ## Related Resources
    /// 
    /// The following resources are often used in the same context:
    /// 
    /// - End to end workspace management guide.
    /// - databricks.Notebook to manage [Databricks Notebooks](https://docs.databricks.com/notebooks/index.html).
    /// - databricks.Notebook data to export a notebook from Databricks Workspace.
    /// - databricks.getNotebookPaths data to list notebooks in Databricks Workspace.
    /// - databricks.Repo to manage [Databricks Repos](https://docs.databricks.com/repos.html).
    /// - databricks.getSparkVersion data to get [Databricks Runtime (DBR)](https://docs.databricks.com/runtime/dbr.html) version that could be used for `spark_version` parameter in databricks.Cluster and other resources.
    /// - databricks.WorkspaceConf to manage workspace configuration for expert usage.
    /// 
    /// ## Import
    /// 
    /// The resource directory can be imported using directory path:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/directory:Directory this /path/to/directory
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/directory:Directory")]
    public partial class Directory : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether or not to trigger a recursive delete of this directory and its resources when deleting this on Pulumi. Defaults to `false`
        /// </summary>
        [Output("deleteRecursive")]
        public Output<bool?> DeleteRecursive { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for a DIRECTORY
        /// </summary>
        [Output("objectId")]
        public Output<int> ObjectId { get; private set; } = null!;

        /// <summary>
        /// The absolute path of the directory, beginning with "/", e.g. "/Demo".
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// path on Workspace File System (WSFS) in form of `/Workspace` + `path`
        /// </summary>
        [Output("workspacePath")]
        public Output<string> WorkspacePath { get; private set; } = null!;


        /// <summary>
        /// Create a Directory resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Directory(string name, DirectoryArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/directory:Directory", name, args ?? new DirectoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Directory(string name, Input<string> id, DirectoryState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/directory:Directory", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Directory resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Directory Get(string name, Input<string> id, DirectoryState? state = null, CustomResourceOptions? options = null)
        {
            return new Directory(name, id, state, options);
        }
    }

    public sealed class DirectoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not to trigger a recursive delete of this directory and its resources when deleting this on Pulumi. Defaults to `false`
        /// </summary>
        [Input("deleteRecursive")]
        public Input<bool>? DeleteRecursive { get; set; }

        /// <summary>
        /// Unique identifier for a DIRECTORY
        /// </summary>
        [Input("objectId")]
        public Input<int>? ObjectId { get; set; }

        /// <summary>
        /// The absolute path of the directory, beginning with "/", e.g. "/Demo".
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        public DirectoryArgs()
        {
        }
        public static new DirectoryArgs Empty => new DirectoryArgs();
    }

    public sealed class DirectoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not to trigger a recursive delete of this directory and its resources when deleting this on Pulumi. Defaults to `false`
        /// </summary>
        [Input("deleteRecursive")]
        public Input<bool>? DeleteRecursive { get; set; }

        /// <summary>
        /// Unique identifier for a DIRECTORY
        /// </summary>
        [Input("objectId")]
        public Input<int>? ObjectId { get; set; }

        /// <summary>
        /// The absolute path of the directory, beginning with "/", e.g. "/Demo".
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// path on Workspace File System (WSFS) in form of `/Workspace` + `path`
        /// </summary>
        [Input("workspacePath")]
        public Input<string>? WorkspacePath { get; set; }

        public DirectoryState()
        {
        }
        public static new DirectoryState Empty => new DirectoryState();
    }
}
