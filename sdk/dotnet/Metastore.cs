// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    [DatabricksResourceType("databricks:index/metastore:Metastore")]
    public partial class Metastore : global::Pulumi.CustomResource
    {
        [Output("cloud")]
        public Output<string> Cloud { get; private set; } = null!;

        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        [Output("defaultDataAccessConfigId")]
        public Output<string?> DefaultDataAccessConfigId { get; private set; } = null!;

        [Output("deltaSharingOrganizationName")]
        public Output<string?> DeltaSharingOrganizationName { get; private set; } = null!;

        [Output("deltaSharingRecipientTokenLifetimeInSeconds")]
        public Output<int?> DeltaSharingRecipientTokenLifetimeInSeconds { get; private set; } = null!;

        [Output("deltaSharingScope")]
        public Output<string?> DeltaSharingScope { get; private set; } = null!;

        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        [Output("globalMetastoreId")]
        public Output<string> GlobalMetastoreId { get; private set; } = null!;

        [Output("metastoreId")]
        public Output<string> MetastoreId { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("storageRoot")]
        public Output<string?> StorageRoot { get; private set; } = null!;

        [Output("storageRootCredentialId")]
        public Output<string?> StorageRootCredentialId { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<int> UpdatedAt { get; private set; } = null!;

        [Output("updatedBy")]
        public Output<string> UpdatedBy { get; private set; } = null!;


        /// <summary>
        /// Create a Metastore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Metastore(string name, MetastoreArgs? args = null, CustomResourceOptions? options = null)
            : base("databricks:index/metastore:Metastore", name, args ?? new MetastoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Metastore(string name, Input<string> id, MetastoreState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/metastore:Metastore", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Metastore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Metastore Get(string name, Input<string> id, MetastoreState? state = null, CustomResourceOptions? options = null)
        {
            return new Metastore(name, id, state, options);
        }
    }

    public sealed class MetastoreArgs : global::Pulumi.ResourceArgs
    {
        [Input("cloud")]
        public Input<string>? Cloud { get; set; }

        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        [Input("defaultDataAccessConfigId")]
        public Input<string>? DefaultDataAccessConfigId { get; set; }

        [Input("deltaSharingOrganizationName")]
        public Input<string>? DeltaSharingOrganizationName { get; set; }

        [Input("deltaSharingRecipientTokenLifetimeInSeconds")]
        public Input<int>? DeltaSharingRecipientTokenLifetimeInSeconds { get; set; }

        [Input("deltaSharingScope")]
        public Input<string>? DeltaSharingScope { get; set; }

        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("globalMetastoreId")]
        public Input<string>? GlobalMetastoreId { get; set; }

        [Input("metastoreId")]
        public Input<string>? MetastoreId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("storageRoot")]
        public Input<string>? StorageRoot { get; set; }

        [Input("storageRootCredentialId")]
        public Input<string>? StorageRootCredentialId { get; set; }

        [Input("updatedAt")]
        public Input<int>? UpdatedAt { get; set; }

        [Input("updatedBy")]
        public Input<string>? UpdatedBy { get; set; }

        public MetastoreArgs()
        {
        }
        public static new MetastoreArgs Empty => new MetastoreArgs();
    }

    public sealed class MetastoreState : global::Pulumi.ResourceArgs
    {
        [Input("cloud")]
        public Input<string>? Cloud { get; set; }

        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        [Input("defaultDataAccessConfigId")]
        public Input<string>? DefaultDataAccessConfigId { get; set; }

        [Input("deltaSharingOrganizationName")]
        public Input<string>? DeltaSharingOrganizationName { get; set; }

        [Input("deltaSharingRecipientTokenLifetimeInSeconds")]
        public Input<int>? DeltaSharingRecipientTokenLifetimeInSeconds { get; set; }

        [Input("deltaSharingScope")]
        public Input<string>? DeltaSharingScope { get; set; }

        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("globalMetastoreId")]
        public Input<string>? GlobalMetastoreId { get; set; }

        [Input("metastoreId")]
        public Input<string>? MetastoreId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("storageRoot")]
        public Input<string>? StorageRoot { get; set; }

        [Input("storageRootCredentialId")]
        public Input<string>? StorageRootCredentialId { get; set; }

        [Input("updatedAt")]
        public Input<int>? UpdatedAt { get; set; }

        [Input("updatedBy")]
        public Input<string>? UpdatedBy { get; set; }

        public MetastoreState()
        {
        }
        public static new MetastoreState Empty => new MetastoreState();
    }
}
