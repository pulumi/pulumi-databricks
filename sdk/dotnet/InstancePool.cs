// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    [DatabricksResourceType("databricks:index/instancePool:InstancePool")]
    public partial class InstancePool : global::Pulumi.CustomResource
    {
        [Output("awsAttributes")]
        public Output<Outputs.InstancePoolAwsAttributes?> AwsAttributes { get; private set; } = null!;

        [Output("azureAttributes")]
        public Output<Outputs.InstancePoolAzureAttributes?> AzureAttributes { get; private set; } = null!;

        [Output("customTags")]
        public Output<ImmutableDictionary<string, string>?> CustomTags { get; private set; } = null!;

        [Output("diskSpec")]
        public Output<Outputs.InstancePoolDiskSpec?> DiskSpec { get; private set; } = null!;

        [Output("enableElasticDisk")]
        public Output<bool?> EnableElasticDisk { get; private set; } = null!;

        [Output("gcpAttributes")]
        public Output<Outputs.InstancePoolGcpAttributes?> GcpAttributes { get; private set; } = null!;

        [Output("idleInstanceAutoterminationMinutes")]
        public Output<int> IdleInstanceAutoterminationMinutes { get; private set; } = null!;

        [Output("instancePoolFleetAttributes")]
        public Output<Outputs.InstancePoolInstancePoolFleetAttributes?> InstancePoolFleetAttributes { get; private set; } = null!;

        [Output("instancePoolId")]
        public Output<string> InstancePoolId { get; private set; } = null!;

        [Output("instancePoolName")]
        public Output<string> InstancePoolName { get; private set; } = null!;

        [Output("maxCapacity")]
        public Output<int?> MaxCapacity { get; private set; } = null!;

        [Output("minIdleInstances")]
        public Output<int?> MinIdleInstances { get; private set; } = null!;

        [Output("nodeTypeId")]
        public Output<string?> NodeTypeId { get; private set; } = null!;

        [Output("preloadedDockerImages")]
        public Output<ImmutableArray<Outputs.InstancePoolPreloadedDockerImage>> PreloadedDockerImages { get; private set; } = null!;

        [Output("preloadedSparkVersions")]
        public Output<ImmutableArray<string>> PreloadedSparkVersions { get; private set; } = null!;


        /// <summary>
        /// Create a InstancePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstancePool(string name, InstancePoolArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/instancePool:InstancePool", name, args ?? new InstancePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstancePool(string name, Input<string> id, InstancePoolState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/instancePool:InstancePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstancePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstancePool Get(string name, Input<string> id, InstancePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new InstancePool(name, id, state, options);
        }
    }

    public sealed class InstancePoolArgs : global::Pulumi.ResourceArgs
    {
        [Input("awsAttributes")]
        public Input<Inputs.InstancePoolAwsAttributesArgs>? AwsAttributes { get; set; }

        [Input("azureAttributes")]
        public Input<Inputs.InstancePoolAzureAttributesArgs>? AzureAttributes { get; set; }

        [Input("customTags")]
        private InputMap<string>? _customTags;
        public InputMap<string> CustomTags
        {
            get => _customTags ?? (_customTags = new InputMap<string>());
            set => _customTags = value;
        }

        [Input("diskSpec")]
        public Input<Inputs.InstancePoolDiskSpecArgs>? DiskSpec { get; set; }

        [Input("enableElasticDisk")]
        public Input<bool>? EnableElasticDisk { get; set; }

        [Input("gcpAttributes")]
        public Input<Inputs.InstancePoolGcpAttributesArgs>? GcpAttributes { get; set; }

        [Input("idleInstanceAutoterminationMinutes", required: true)]
        public Input<int> IdleInstanceAutoterminationMinutes { get; set; } = null!;

        [Input("instancePoolFleetAttributes")]
        public Input<Inputs.InstancePoolInstancePoolFleetAttributesArgs>? InstancePoolFleetAttributes { get; set; }

        [Input("instancePoolId")]
        public Input<string>? InstancePoolId { get; set; }

        [Input("instancePoolName", required: true)]
        public Input<string> InstancePoolName { get; set; } = null!;

        [Input("maxCapacity")]
        public Input<int>? MaxCapacity { get; set; }

        [Input("minIdleInstances")]
        public Input<int>? MinIdleInstances { get; set; }

        [Input("nodeTypeId")]
        public Input<string>? NodeTypeId { get; set; }

        [Input("preloadedDockerImages")]
        private InputList<Inputs.InstancePoolPreloadedDockerImageArgs>? _preloadedDockerImages;
        public InputList<Inputs.InstancePoolPreloadedDockerImageArgs> PreloadedDockerImages
        {
            get => _preloadedDockerImages ?? (_preloadedDockerImages = new InputList<Inputs.InstancePoolPreloadedDockerImageArgs>());
            set => _preloadedDockerImages = value;
        }

        [Input("preloadedSparkVersions")]
        private InputList<string>? _preloadedSparkVersions;
        public InputList<string> PreloadedSparkVersions
        {
            get => _preloadedSparkVersions ?? (_preloadedSparkVersions = new InputList<string>());
            set => _preloadedSparkVersions = value;
        }

        public InstancePoolArgs()
        {
        }
        public static new InstancePoolArgs Empty => new InstancePoolArgs();
    }

    public sealed class InstancePoolState : global::Pulumi.ResourceArgs
    {
        [Input("awsAttributes")]
        public Input<Inputs.InstancePoolAwsAttributesGetArgs>? AwsAttributes { get; set; }

        [Input("azureAttributes")]
        public Input<Inputs.InstancePoolAzureAttributesGetArgs>? AzureAttributes { get; set; }

        [Input("customTags")]
        private InputMap<string>? _customTags;
        public InputMap<string> CustomTags
        {
            get => _customTags ?? (_customTags = new InputMap<string>());
            set => _customTags = value;
        }

        [Input("diskSpec")]
        public Input<Inputs.InstancePoolDiskSpecGetArgs>? DiskSpec { get; set; }

        [Input("enableElasticDisk")]
        public Input<bool>? EnableElasticDisk { get; set; }

        [Input("gcpAttributes")]
        public Input<Inputs.InstancePoolGcpAttributesGetArgs>? GcpAttributes { get; set; }

        [Input("idleInstanceAutoterminationMinutes")]
        public Input<int>? IdleInstanceAutoterminationMinutes { get; set; }

        [Input("instancePoolFleetAttributes")]
        public Input<Inputs.InstancePoolInstancePoolFleetAttributesGetArgs>? InstancePoolFleetAttributes { get; set; }

        [Input("instancePoolId")]
        public Input<string>? InstancePoolId { get; set; }

        [Input("instancePoolName")]
        public Input<string>? InstancePoolName { get; set; }

        [Input("maxCapacity")]
        public Input<int>? MaxCapacity { get; set; }

        [Input("minIdleInstances")]
        public Input<int>? MinIdleInstances { get; set; }

        [Input("nodeTypeId")]
        public Input<string>? NodeTypeId { get; set; }

        [Input("preloadedDockerImages")]
        private InputList<Inputs.InstancePoolPreloadedDockerImageGetArgs>? _preloadedDockerImages;
        public InputList<Inputs.InstancePoolPreloadedDockerImageGetArgs> PreloadedDockerImages
        {
            get => _preloadedDockerImages ?? (_preloadedDockerImages = new InputList<Inputs.InstancePoolPreloadedDockerImageGetArgs>());
            set => _preloadedDockerImages = value;
        }

        [Input("preloadedSparkVersions")]
        private InputList<string>? _preloadedSparkVersions;
        public InputList<string> PreloadedSparkVersions
        {
            get => _preloadedSparkVersions ?? (_preloadedSparkVersions = new InputList<string>());
            set => _preloadedSparkVersions = value;
        }

        public InstancePoolState()
        {
        }
        public static new InstancePoolState Empty => new InstancePoolState();
    }
}
