// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetAlertV2
    {
        /// <summary>
        /// The SQL Alert v2 data source allows you to retrieve detailed information about a specific alert in Databricks SQL. This data source provides access to all alert properties, including its configuration, evaluation criteria, notification settings, and schedule.
        /// 
        /// You can use this data source to:
        /// - Retrieve alert details for reference in other resources
        /// - Check the current state and configuration of an alert
        /// - Verify notification settings and subscribers
        /// - Examine the schedule configuration
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetAlertV2Result> InvokeAsync(GetAlertV2Args? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAlertV2Result>("databricks:index/getAlertV2:getAlertV2", args ?? new GetAlertV2Args(), options.WithDefaults());

        /// <summary>
        /// The SQL Alert v2 data source allows you to retrieve detailed information about a specific alert in Databricks SQL. This data source provides access to all alert properties, including its configuration, evaluation criteria, notification settings, and schedule.
        /// 
        /// You can use this data source to:
        /// - Retrieve alert details for reference in other resources
        /// - Check the current state and configuration of an alert
        /// - Verify notification settings and subscribers
        /// - Examine the schedule configuration
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetAlertV2Result> Invoke(GetAlertV2InvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlertV2Result>("databricks:index/getAlertV2:getAlertV2", args ?? new GetAlertV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The SQL Alert v2 data source allows you to retrieve detailed information about a specific alert in Databricks SQL. This data source provides access to all alert properties, including its configuration, evaluation criteria, notification settings, and schedule.
        /// 
        /// You can use this data source to:
        /// - Retrieve alert details for reference in other resources
        /// - Check the current state and configuration of an alert
        /// - Verify notification settings and subscribers
        /// - Examine the schedule configuration
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetAlertV2Result> Invoke(GetAlertV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlertV2Result>("databricks:index/getAlertV2:getAlertV2", args ?? new GetAlertV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlertV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (string) - Custom description for the alert. support mustache template
        /// </summary>
        [Input("customDescription")]
        public string? CustomDescription { get; set; }

        /// <summary>
        /// (string) - Custom summary for the alert. support mustache template
        /// </summary>
        [Input("customSummary")]
        public string? CustomSummary { get; set; }

        /// <summary>
        /// (string) - The display name of the alert
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// (AlertV2Evaluation)
        /// </summary>
        [Input("evaluation")]
        public Inputs.GetAlertV2EvaluationArgs? Evaluation { get; set; }

        /// <summary>
        /// (string) - The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
        /// </summary>
        [Input("parentPath")]
        public string? ParentPath { get; set; }

        /// <summary>
        /// (string) - Text of the query to be run
        /// </summary>
        [Input("queryText")]
        public string? QueryText { get; set; }

        /// <summary>
        /// (AlertV2RunAs) - Specifies the identity that will be used to run the alert.
        /// This field allows you to configure alerts to run as a specific user or service principal.
        /// - For user identity: Set `user_name` to the email of an active workspace user. Users can only set this to their own email.
        /// - For service principal: Set `service_principal_name` to the application ID. Requires the `servicePrincipal/user` role.
        /// If not specified, the alert will run as the request user
        /// </summary>
        [Input("runAs")]
        public Inputs.GetAlertV2RunAsArgs? RunAs { get; set; }

        /// <summary>
        /// (string, deprecated) - The run as username or application ID of service principal.
        /// On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role.
        /// Deprecated: Use `run_as` field instead. This field will be removed in a future release
        /// </summary>
        [Input("runAsUserName")]
        public string? RunAsUserName { get; set; }

        /// <summary>
        /// (CronSchedule)
        /// </summary>
        [Input("schedule")]
        public Inputs.GetAlertV2ScheduleArgs? Schedule { get; set; }

        /// <summary>
        /// (string) - ID of the SQL warehouse attached to the alert
        /// </summary>
        [Input("warehouseId")]
        public string? WarehouseId { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public string? WorkspaceId { get; set; }

        public GetAlertV2Args()
        {
        }
        public static new GetAlertV2Args Empty => new GetAlertV2Args();
    }

    public sealed class GetAlertV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (string) - Custom description for the alert. support mustache template
        /// </summary>
        [Input("customDescription")]
        public Input<string>? CustomDescription { get; set; }

        /// <summary>
        /// (string) - Custom summary for the alert. support mustache template
        /// </summary>
        [Input("customSummary")]
        public Input<string>? CustomSummary { get; set; }

        /// <summary>
        /// (string) - The display name of the alert
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// (AlertV2Evaluation)
        /// </summary>
        [Input("evaluation")]
        public Input<Inputs.GetAlertV2EvaluationInputArgs>? Evaluation { get; set; }

        /// <summary>
        /// (string) - The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
        /// </summary>
        [Input("parentPath")]
        public Input<string>? ParentPath { get; set; }

        /// <summary>
        /// (string) - Text of the query to be run
        /// </summary>
        [Input("queryText")]
        public Input<string>? QueryText { get; set; }

        /// <summary>
        /// (AlertV2RunAs) - Specifies the identity that will be used to run the alert.
        /// This field allows you to configure alerts to run as a specific user or service principal.
        /// - For user identity: Set `user_name` to the email of an active workspace user. Users can only set this to their own email.
        /// - For service principal: Set `service_principal_name` to the application ID. Requires the `servicePrincipal/user` role.
        /// If not specified, the alert will run as the request user
        /// </summary>
        [Input("runAs")]
        public Input<Inputs.GetAlertV2RunAsInputArgs>? RunAs { get; set; }

        /// <summary>
        /// (string, deprecated) - The run as username or application ID of service principal.
        /// On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role.
        /// Deprecated: Use `run_as` field instead. This field will be removed in a future release
        /// </summary>
        [Input("runAsUserName")]
        public Input<string>? RunAsUserName { get; set; }

        /// <summary>
        /// (CronSchedule)
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.GetAlertV2ScheduleInputArgs>? Schedule { get; set; }

        /// <summary>
        /// (string) - ID of the SQL warehouse attached to the alert
        /// </summary>
        [Input("warehouseId")]
        public Input<string>? WarehouseId { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public GetAlertV2InvokeArgs()
        {
        }
        public static new GetAlertV2InvokeArgs Empty => new GetAlertV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetAlertV2Result
    {
        /// <summary>
        /// (string) - The timestamp indicating when the alert was created
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// (string) - Custom description for the alert. support mustache template
        /// </summary>
        public readonly string? CustomDescription;
        /// <summary>
        /// (string) - Custom summary for the alert. support mustache template
        /// </summary>
        public readonly string? CustomSummary;
        /// <summary>
        /// (string) - The display name of the alert
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// (AlertV2RunAs) - The actual identity that will be used to execute the alert.
        /// This is an output-only field that shows the resolved run-as identity after applying
        /// permissions and defaults
        /// </summary>
        public readonly Outputs.GetAlertV2EffectiveRunAsResult EffectiveRunAs;
        /// <summary>
        /// (AlertV2Evaluation)
        /// </summary>
        public readonly Outputs.GetAlertV2EvaluationResult? Evaluation;
        /// <summary>
        /// (string) - UUID identifying the alert
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (string) - Indicates whether the query is trashed. Possible values are: `ACTIVE`, `TRASHED`
        /// </summary>
        public readonly string LifecycleState;
        /// <summary>
        /// (string) - The owner's username. This field is set to "Unavailable" if the user has been deleted
        /// </summary>
        public readonly string OwnerUserName;
        /// <summary>
        /// (string) - The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
        /// </summary>
        public readonly string? ParentPath;
        /// <summary>
        /// (string) - Text of the query to be run
        /// </summary>
        public readonly string? QueryText;
        /// <summary>
        /// (AlertV2RunAs) - Specifies the identity that will be used to run the alert.
        /// This field allows you to configure alerts to run as a specific user or service principal.
        /// - For user identity: Set `user_name` to the email of an active workspace user. Users can only set this to their own email.
        /// - For service principal: Set `service_principal_name` to the application ID. Requires the `servicePrincipal/user` role.
        /// If not specified, the alert will run as the request user
        /// </summary>
        public readonly Outputs.GetAlertV2RunAsResult? RunAs;
        /// <summary>
        /// (string, deprecated) - The run as username or application ID of service principal.
        /// On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role.
        /// Deprecated: Use `run_as` field instead. This field will be removed in a future release
        /// </summary>
        public readonly string? RunAsUserName;
        /// <summary>
        /// (CronSchedule)
        /// </summary>
        public readonly Outputs.GetAlertV2ScheduleResult? Schedule;
        /// <summary>
        /// (string) - The timestamp indicating when the alert was updated
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// (string) - ID of the SQL warehouse attached to the alert
        /// </summary>
        public readonly string? WarehouseId;
        public readonly string? WorkspaceId;

        [OutputConstructor]
        private GetAlertV2Result(
            string createTime,

            string? customDescription,

            string? customSummary,

            string? displayName,

            Outputs.GetAlertV2EffectiveRunAsResult effectiveRunAs,

            Outputs.GetAlertV2EvaluationResult? evaluation,

            string id,

            string lifecycleState,

            string ownerUserName,

            string? parentPath,

            string? queryText,

            Outputs.GetAlertV2RunAsResult? runAs,

            string? runAsUserName,

            Outputs.GetAlertV2ScheduleResult? schedule,

            string updateTime,

            string? warehouseId,

            string? workspaceId)
        {
            CreateTime = createTime;
            CustomDescription = customDescription;
            CustomSummary = customSummary;
            DisplayName = displayName;
            EffectiveRunAs = effectiveRunAs;
            Evaluation = evaluation;
            Id = id;
            LifecycleState = lifecycleState;
            OwnerUserName = ownerUserName;
            ParentPath = parentPath;
            QueryText = queryText;
            RunAs = runAs;
            RunAsUserName = runAsUserName;
            Schedule = schedule;
            UpdateTime = updateTime;
            WarehouseId = warehouseId;
            WorkspaceId = workspaceId;
        }
    }
}
