// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetJobs
    {
        /// <summary>
        /// Retrieves a list of databricks.Job ids, that were created by Pulumi or manually, so that special handling could be applied.
        /// 
        /// &gt; This data source can only be used with a workspace-level provider!
        /// 
        /// &gt; By default, this data resource will error in case of jobs with duplicate names. To support duplicate names, set `key = "id"` to map jobs by ID.
        /// 
        /// ## Example Usage
        /// 
        /// Granting view databricks.Permissions to all databricks.Job within the workspace:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(async() =&gt; 
        /// {
        ///     var @this = await Databricks.GetJobs.InvokeAsync();
        /// 
        ///     var everyoneCanViewAllJobs = new List&lt;Databricks.Permissions&gt;();
        ///     foreach (var range in )
        ///     {
        ///         everyoneCanViewAllJobs.Add(new Databricks.Permissions($"everyone_can_view_all_jobs-{range.Key}", new()
        ///         {
        ///             JobId = range.Value,
        ///             AccessControls = new[]
        ///             {
        ///                 new Databricks.Inputs.PermissionsAccessControlArgs
        ///                 {
        ///                     GroupName = "users",
        ///                     PermissionLevel = "CAN_VIEW",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// });
        /// ```
        /// 
        /// Getting ID of specific databricks.Job by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetJobs.Invoke(new()
        ///     {
        ///         JobNameContains = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["x"] = @this.Apply(@this =&gt; $"ID of `x` job is {@this.Apply(getJobsResult =&gt; getJobsResult.Ids?.X)}"),
        ///     };
        /// });
        /// ```
        /// 
        /// Getting IDs of databricks.Job mapped by ID, allowing duplicate job names:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(async() =&gt; 
        /// {
        ///     var @this = await Databricks.GetJobs.InvokeAsync(new()
        ///     {
        ///         Key = "id",
        ///     });
        /// 
        ///     var everyoneCanViewAllJobs = new List&lt;Databricks.Permissions&gt;();
        ///     foreach (var range in )
        ///     {
        ///         everyoneCanViewAllJobs.Add(new Databricks.Permissions($"everyone_can_view_all_jobs-{range.Key}", new()
        ///         {
        ///             JobId = range.Value,
        ///             AccessControls = new[]
        ///             {
        ///                 new Databricks.Inputs.PermissionsAccessControlArgs
        ///                 {
        ///                     GroupName = "users",
        ///                     PermissionLevel = "CAN_VIEW",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// });
        /// ```
        /// 
        /// ## Related Resources
        /// 
        /// The following resources are used in the same context:
        /// 
        /// * databricks.Job to manage [Databricks Jobs](https://docs.databricks.com/jobs.html) to run non-interactive code in a databricks_cluster.
        /// </summary>
        public static Task<GetJobsResult> InvokeAsync(GetJobsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetJobsResult>("databricks:index/getJobs:getJobs", args ?? new GetJobsArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a list of databricks.Job ids, that were created by Pulumi or manually, so that special handling could be applied.
        /// 
        /// &gt; This data source can only be used with a workspace-level provider!
        /// 
        /// &gt; By default, this data resource will error in case of jobs with duplicate names. To support duplicate names, set `key = "id"` to map jobs by ID.
        /// 
        /// ## Example Usage
        /// 
        /// Granting view databricks.Permissions to all databricks.Job within the workspace:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(async() =&gt; 
        /// {
        ///     var @this = await Databricks.GetJobs.InvokeAsync();
        /// 
        ///     var everyoneCanViewAllJobs = new List&lt;Databricks.Permissions&gt;();
        ///     foreach (var range in )
        ///     {
        ///         everyoneCanViewAllJobs.Add(new Databricks.Permissions($"everyone_can_view_all_jobs-{range.Key}", new()
        ///         {
        ///             JobId = range.Value,
        ///             AccessControls = new[]
        ///             {
        ///                 new Databricks.Inputs.PermissionsAccessControlArgs
        ///                 {
        ///                     GroupName = "users",
        ///                     PermissionLevel = "CAN_VIEW",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// });
        /// ```
        /// 
        /// Getting ID of specific databricks.Job by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetJobs.Invoke(new()
        ///     {
        ///         JobNameContains = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["x"] = @this.Apply(@this =&gt; $"ID of `x` job is {@this.Apply(getJobsResult =&gt; getJobsResult.Ids?.X)}"),
        ///     };
        /// });
        /// ```
        /// 
        /// Getting IDs of databricks.Job mapped by ID, allowing duplicate job names:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(async() =&gt; 
        /// {
        ///     var @this = await Databricks.GetJobs.InvokeAsync(new()
        ///     {
        ///         Key = "id",
        ///     });
        /// 
        ///     var everyoneCanViewAllJobs = new List&lt;Databricks.Permissions&gt;();
        ///     foreach (var range in )
        ///     {
        ///         everyoneCanViewAllJobs.Add(new Databricks.Permissions($"everyone_can_view_all_jobs-{range.Key}", new()
        ///         {
        ///             JobId = range.Value,
        ///             AccessControls = new[]
        ///             {
        ///                 new Databricks.Inputs.PermissionsAccessControlArgs
        ///                 {
        ///                     GroupName = "users",
        ///                     PermissionLevel = "CAN_VIEW",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// });
        /// ```
        /// 
        /// ## Related Resources
        /// 
        /// The following resources are used in the same context:
        /// 
        /// * databricks.Job to manage [Databricks Jobs](https://docs.databricks.com/jobs.html) to run non-interactive code in a databricks_cluster.
        /// </summary>
        public static Output<GetJobsResult> Invoke(GetJobsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetJobsResult>("databricks:index/getJobs:getJobs", args ?? new GetJobsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a list of databricks.Job ids, that were created by Pulumi or manually, so that special handling could be applied.
        /// 
        /// &gt; This data source can only be used with a workspace-level provider!
        /// 
        /// &gt; By default, this data resource will error in case of jobs with duplicate names. To support duplicate names, set `key = "id"` to map jobs by ID.
        /// 
        /// ## Example Usage
        /// 
        /// Granting view databricks.Permissions to all databricks.Job within the workspace:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(async() =&gt; 
        /// {
        ///     var @this = await Databricks.GetJobs.InvokeAsync();
        /// 
        ///     var everyoneCanViewAllJobs = new List&lt;Databricks.Permissions&gt;();
        ///     foreach (var range in )
        ///     {
        ///         everyoneCanViewAllJobs.Add(new Databricks.Permissions($"everyone_can_view_all_jobs-{range.Key}", new()
        ///         {
        ///             JobId = range.Value,
        ///             AccessControls = new[]
        ///             {
        ///                 new Databricks.Inputs.PermissionsAccessControlArgs
        ///                 {
        ///                     GroupName = "users",
        ///                     PermissionLevel = "CAN_VIEW",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// });
        /// ```
        /// 
        /// Getting ID of specific databricks.Job by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetJobs.Invoke(new()
        ///     {
        ///         JobNameContains = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["x"] = @this.Apply(@this =&gt; $"ID of `x` job is {@this.Apply(getJobsResult =&gt; getJobsResult.Ids?.X)}"),
        ///     };
        /// });
        /// ```
        /// 
        /// Getting IDs of databricks.Job mapped by ID, allowing duplicate job names:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(async() =&gt; 
        /// {
        ///     var @this = await Databricks.GetJobs.InvokeAsync(new()
        ///     {
        ///         Key = "id",
        ///     });
        /// 
        ///     var everyoneCanViewAllJobs = new List&lt;Databricks.Permissions&gt;();
        ///     foreach (var range in )
        ///     {
        ///         everyoneCanViewAllJobs.Add(new Databricks.Permissions($"everyone_can_view_all_jobs-{range.Key}", new()
        ///         {
        ///             JobId = range.Value,
        ///             AccessControls = new[]
        ///             {
        ///                 new Databricks.Inputs.PermissionsAccessControlArgs
        ///                 {
        ///                     GroupName = "users",
        ///                     PermissionLevel = "CAN_VIEW",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// });
        /// ```
        /// 
        /// ## Related Resources
        /// 
        /// The following resources are used in the same context:
        /// 
        /// * databricks.Job to manage [Databricks Jobs](https://docs.databricks.com/jobs.html) to run non-interactive code in a databricks_cluster.
        /// </summary>
        public static Output<GetJobsResult> Invoke(GetJobsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetJobsResult>("databricks:index/getJobs:getJobs", args ?? new GetJobsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetJobsArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private Dictionary<string, string>? _ids;

        /// <summary>
        /// map of databricks.Job names to ids
        /// </summary>
        public Dictionary<string, string> Ids
        {
            get => _ids ?? (_ids = new Dictionary<string, string>());
            set => _ids = value;
        }

        /// <summary>
        /// Only return databricks.Job ids that match the given name string (case-insensitive).
        /// </summary>
        [Input("jobNameContains")]
        public string? JobNameContains { get; set; }

        /// <summary>
        /// Attribute to use for keys in the returned map of databricks.Job ids by. Possible values are `name` (default) or `id`. Setting to `id` uses the job ID as the map key, allowing duplicate job names.
        /// </summary>
        [Input("key")]
        public string? Key { get; set; }

        public GetJobsArgs()
        {
        }
        public static new GetJobsArgs Empty => new GetJobsArgs();
    }

    public sealed class GetJobsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputMap<string>? _ids;

        /// <summary>
        /// map of databricks.Job names to ids
        /// </summary>
        public InputMap<string> Ids
        {
            get => _ids ?? (_ids = new InputMap<string>());
            set => _ids = value;
        }

        /// <summary>
        /// Only return databricks.Job ids that match the given name string (case-insensitive).
        /// </summary>
        [Input("jobNameContains")]
        public Input<string>? JobNameContains { get; set; }

        /// <summary>
        /// Attribute to use for keys in the returned map of databricks.Job ids by. Possible values are `name` (default) or `id`. Setting to `id` uses the job ID as the map key, allowing duplicate job names.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        public GetJobsInvokeArgs()
        {
        }
        public static new GetJobsInvokeArgs Empty => new GetJobsInvokeArgs();
    }


    [OutputType]
    public sealed class GetJobsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// map of databricks.Job names to ids
        /// </summary>
        public readonly ImmutableDictionary<string, string> Ids;
        public readonly string? JobNameContains;
        public readonly string? Key;

        [OutputConstructor]
        private GetJobsResult(
            string id,

            ImmutableDictionary<string, string> ids,

            string? jobNameContains,

            string? key)
        {
            Id = id;
            Ids = ids;
            JobNameContains = jobNameContains;
            Key = key;
        }
    }
}
