// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetMetastore
    {
        public static Task<GetMetastoreResult> InvokeAsync(GetMetastoreArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetastoreResult>("databricks:index/getMetastore:getMetastore", args ?? new GetMetastoreArgs(), options.WithDefaults());

        public static Output<GetMetastoreResult> Invoke(GetMetastoreInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetastoreResult>("databricks:index/getMetastore:getMetastore", args ?? new GetMetastoreInvokeArgs(), options.WithDefaults());

        public static Output<GetMetastoreResult> Invoke(GetMetastoreInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetastoreResult>("databricks:index/getMetastore:getMetastore", args ?? new GetMetastoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetastoreArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("metastoreId")]
        public string? MetastoreId { get; set; }

        [Input("metastoreInfo")]
        public Inputs.GetMetastoreMetastoreInfoArgs? MetastoreInfo { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        public GetMetastoreArgs()
        {
        }
        public static new GetMetastoreArgs Empty => new GetMetastoreArgs();
    }

    public sealed class GetMetastoreInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("metastoreId")]
        public Input<string>? MetastoreId { get; set; }

        [Input("metastoreInfo")]
        public Input<Inputs.GetMetastoreMetastoreInfoInputArgs>? MetastoreInfo { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetMetastoreInvokeArgs()
        {
        }
        public static new GetMetastoreInvokeArgs Empty => new GetMetastoreInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetastoreResult
    {
        public readonly string Id;
        public readonly string MetastoreId;
        public readonly Outputs.GetMetastoreMetastoreInfoResult MetastoreInfo;
        public readonly string Name;
        public readonly string Region;

        [OutputConstructor]
        private GetMetastoreResult(
            string id,

            string metastoreId,

            Outputs.GetMetastoreMetastoreInfoResult metastoreInfo,

            string name,

            string region)
        {
            Id = id;
            MetastoreId = metastoreId;
            MetastoreInfo = metastoreInfo;
            Name = name;
            Region = region;
        }
    }
}
