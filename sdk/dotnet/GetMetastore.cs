// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetMetastore
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// MetastoreInfo response for a given metastore id
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var thisMetastore = new Databricks.Metastore("this", new()
        ///     {
        ///         Name = "primary",
        ///         StorageRoot = $"s3://{metastore.Id}/metastore",
        ///         Owner = unityAdminGroup,
        ///         ForceDestroy = true,
        ///     });
        /// 
        ///     var @this = Databricks.GetMetastore.Invoke(new()
        ///     {
        ///         MetastoreId = thisMetastore.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["someMetastore"] = @this.Apply(@this =&gt; @this.Apply(getMetastoreResult =&gt; getMetastoreResult.MetastoreInfo)),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ## Related Resources
        /// 
        /// The following resources are used in the same context:
        /// 
        /// * databricks.getMetastores to get mapping of name to id of all metastores.
        /// * databricks.Metastore to manage Metastores within Unity Catalog.
        /// * databricks.Catalog to manage catalogs within Unity Catalog.
        /// </summary>
        public static Task<GetMetastoreResult> InvokeAsync(GetMetastoreArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetastoreResult>("databricks:index/getMetastore:getMetastore", args ?? new GetMetastoreArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// MetastoreInfo response for a given metastore id
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var thisMetastore = new Databricks.Metastore("this", new()
        ///     {
        ///         Name = "primary",
        ///         StorageRoot = $"s3://{metastore.Id}/metastore",
        ///         Owner = unityAdminGroup,
        ///         ForceDestroy = true,
        ///     });
        /// 
        ///     var @this = Databricks.GetMetastore.Invoke(new()
        ///     {
        ///         MetastoreId = thisMetastore.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["someMetastore"] = @this.Apply(@this =&gt; @this.Apply(getMetastoreResult =&gt; getMetastoreResult.MetastoreInfo)),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ## Related Resources
        /// 
        /// The following resources are used in the same context:
        /// 
        /// * databricks.getMetastores to get mapping of name to id of all metastores.
        /// * databricks.Metastore to manage Metastores within Unity Catalog.
        /// * databricks.Catalog to manage catalogs within Unity Catalog.
        /// </summary>
        public static Output<GetMetastoreResult> Invoke(GetMetastoreInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetastoreResult>("databricks:index/getMetastore:getMetastore", args ?? new GetMetastoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetastoreArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Id of the metastore
        /// </summary>
        [Input("metastoreId")]
        public string? MetastoreId { get; set; }

        /// <summary>
        /// MetastoreInfo object for a databricks_metastore. This contains the following attributes:
        /// </summary>
        [Input("metastoreInfo")]
        public Inputs.GetMetastoreMetastoreInfoArgs? MetastoreInfo { get; set; }

        /// <summary>
        /// Name of the metastore
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Region of the metastore
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetMetastoreArgs()
        {
        }
        public static new GetMetastoreArgs Empty => new GetMetastoreArgs();
    }

    public sealed class GetMetastoreInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Id of the metastore
        /// </summary>
        [Input("metastoreId")]
        public Input<string>? MetastoreId { get; set; }

        /// <summary>
        /// MetastoreInfo object for a databricks_metastore. This contains the following attributes:
        /// </summary>
        [Input("metastoreInfo")]
        public Input<Inputs.GetMetastoreMetastoreInfoInputArgs>? MetastoreInfo { get; set; }

        /// <summary>
        /// Name of the metastore
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Region of the metastore
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetMetastoreInvokeArgs()
        {
        }
        public static new GetMetastoreInvokeArgs Empty => new GetMetastoreInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetastoreResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string MetastoreId;
        /// <summary>
        /// MetastoreInfo object for a databricks_metastore. This contains the following attributes:
        /// </summary>
        public readonly Outputs.GetMetastoreMetastoreInfoResult MetastoreInfo;
        /// <summary>
        /// Name of metastore.
        /// </summary>
        public readonly string Name;
        public readonly string Region;

        [OutputConstructor]
        private GetMetastoreResult(
            string id,

            string metastoreId,

            Outputs.GetMetastoreMetastoreInfoResult metastoreInfo,

            string name,

            string region)
        {
            Id = id;
            MetastoreId = metastoreId;
            MetastoreInfo = metastoreInfo;
            Name = name;
            Region = region;
        }
    }
}
