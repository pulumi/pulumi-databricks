// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetEntityTagAssignments
    {
        public static Task<GetEntityTagAssignmentsResult> InvokeAsync(GetEntityTagAssignmentsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEntityTagAssignmentsResult>("databricks:index/getEntityTagAssignments:getEntityTagAssignments", args ?? new GetEntityTagAssignmentsArgs(), options.WithDefaults());

        public static Output<GetEntityTagAssignmentsResult> Invoke(GetEntityTagAssignmentsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEntityTagAssignmentsResult>("databricks:index/getEntityTagAssignments:getEntityTagAssignments", args ?? new GetEntityTagAssignmentsInvokeArgs(), options.WithDefaults());

        public static Output<GetEntityTagAssignmentsResult> Invoke(GetEntityTagAssignmentsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEntityTagAssignmentsResult>("databricks:index/getEntityTagAssignments:getEntityTagAssignments", args ?? new GetEntityTagAssignmentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEntityTagAssignmentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The fully qualified name of the entity to which the tag is assigned
        /// </summary>
        [Input("entityName", required: true)]
        public string EntityName { get; set; } = null!;

        /// <summary>
        /// The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
        /// </summary>
        [Input("entityType", required: true)]
        public string EntityType { get; set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public string? WorkspaceId { get; set; }

        public GetEntityTagAssignmentsArgs()
        {
        }
        public static new GetEntityTagAssignmentsArgs Empty => new GetEntityTagAssignmentsArgs();
    }

    public sealed class GetEntityTagAssignmentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The fully qualified name of the entity to which the tag is assigned
        /// </summary>
        [Input("entityName", required: true)]
        public Input<string> EntityName { get; set; } = null!;

        /// <summary>
        /// The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
        /// </summary>
        [Input("entityType", required: true)]
        public Input<string> EntityType { get; set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public GetEntityTagAssignmentsInvokeArgs()
        {
        }
        public static new GetEntityTagAssignmentsInvokeArgs Empty => new GetEntityTagAssignmentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetEntityTagAssignmentsResult
    {
        /// <summary>
        /// (string) - The fully qualified name of the entity to which the tag is assigned
        /// </summary>
        public readonly string EntityName;
        /// <summary>
        /// (string) - The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
        /// </summary>
        public readonly string EntityType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetEntityTagAssignmentsTagAssignmentResult> TagAssignments;
        public readonly string? WorkspaceId;

        [OutputConstructor]
        private GetEntityTagAssignmentsResult(
            string entityName,

            string entityType,

            string id,

            ImmutableArray<Outputs.GetEntityTagAssignmentsTagAssignmentResult> tagAssignments,

            string? workspaceId)
        {
            EntityName = entityName;
            EntityType = entityType;
            Id = id;
            TagAssignments = tagAssignments;
            WorkspaceId = workspaceId;
        }
    }
}
