// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// This resource allows uploading and downloading files in databricks_volume.
    /// 
    /// &gt; This resource can only be used with a workspace-level provider!
    /// 
    /// &gt; Currently the limit is 5GiB in octet-stream.
    /// 
    /// &gt; Currently, only UC volumes are supported. The list of destinations may change.
    /// 
    /// ## Example Usage
    /// 
    /// In order to manage a file on Unity Catalog Volumes with Pulumi, you must specify the `Source` attribute containing the full path to the file on the local filesystem.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sandbox = new Databricks.Catalog("sandbox", new()
    ///     {
    ///         MetastoreId = thisDatabricksMetastore.Id,
    ///         Name = "sandbox",
    ///         Comment = "this catalog is managed by terraform",
    ///         Properties = 
    ///         {
    ///             { "purpose", "testing" },
    ///         },
    ///     });
    /// 
    ///     var things = new Databricks.Schema("things", new()
    ///     {
    ///         CatalogName = sandbox.Name,
    ///         Name = "things",
    ///         Comment = "this schema is managed by terraform",
    ///         Properties = 
    ///         {
    ///             { "kind", "various" },
    ///         },
    ///     });
    /// 
    ///     var @this = new Databricks.Volume("this", new()
    ///     {
    ///         Name = "quickstart_volume",
    ///         CatalogName = sandbox.Name,
    ///         SchemaName = things.Name,
    ///         VolumeType = "MANAGED",
    ///         Comment = "this volume is managed by terraform",
    ///     });
    /// 
    ///     var thisFile = new Databricks.File("this", new()
    ///     {
    ///         Source = "/full/path/on/local/system",
    ///         Path = @this.VolumePath.Apply(volumePath =&gt; $"{volumePath}/fileName"),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// You can also inline sources through `ContentBase64`  attribute.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var initScript = new Databricks.File("init_script", new()
    ///     {
    ///         ContentBase64 = Std.Base64encode.Invoke(new()
    ///         {
    ///             Input = @"#!/bin/bash
    /// echo ""Hello World""
    /// ",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         Path = $"{@this.VolumePath}/fileName",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Related Resources
    /// 
    /// The following resources are often used in the same context:
    /// 
    /// * databricks.WorkspaceFile
    /// * End to end workspace management guide.
    /// * databricks.Volume to manage [volumes within Unity Catalog](https://docs.databricks.com/en/connect/unity-catalog/volumes.html).
    /// 
    /// ## Import
    /// 
    /// The resource `databricks_file` can be imported using the path of the file:
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   to = databricks_file.this
    /// 
    ///   id = "&lt;path&gt;"
    /// 
    /// }
    /// 
    /// Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/file:File this &lt;path&gt;
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/file:File")]
    public partial class File : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Contents in base 64 format. Conflicts with `Source`.
        /// </summary>
        [Output("contentBase64")]
        public Output<string?> ContentBase64 { get; private set; } = null!;

        /// <summary>
        /// The file size of the file that is being tracked by this resource in bytes.
        /// </summary>
        [Output("fileSize")]
        public Output<int> FileSize { get; private set; } = null!;

        [Output("md5")]
        public Output<string?> Md5 { get; private set; } = null!;

        /// <summary>
        /// The last time stamp when the file was modified
        /// </summary>
        [Output("modificationTime")]
        public Output<string> ModificationTime { get; private set; } = null!;

        /// <summary>
        /// The path of the file in which you wish to save. For example, `/Volumes/main/default/volume1/file.txt`.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        [Output("remoteFileModified")]
        public Output<bool?> RemoteFileModified { get; private set; } = null!;

        /// <summary>
        /// The full absolute path to the file. Conflicts with `ContentBase64`.
        /// </summary>
        [Output("source")]
        public Output<string?> Source { get; private set; } = null!;


        /// <summary>
        /// Create a File resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public File(string name, FileArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/file:File", name, args ?? new FileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private File(string name, Input<string> id, FileState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/file:File", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing File resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static File Get(string name, Input<string> id, FileState? state = null, CustomResourceOptions? options = null)
        {
            return new File(name, id, state, options);
        }
    }

    public sealed class FileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Contents in base 64 format. Conflicts with `Source`.
        /// </summary>
        [Input("contentBase64")]
        public Input<string>? ContentBase64 { get; set; }

        [Input("md5")]
        public Input<string>? Md5 { get; set; }

        /// <summary>
        /// The path of the file in which you wish to save. For example, `/Volumes/main/default/volume1/file.txt`.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        [Input("remoteFileModified")]
        public Input<bool>? RemoteFileModified { get; set; }

        /// <summary>
        /// The full absolute path to the file. Conflicts with `ContentBase64`.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        public FileArgs()
        {
        }
        public static new FileArgs Empty => new FileArgs();
    }

    public sealed class FileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Contents in base 64 format. Conflicts with `Source`.
        /// </summary>
        [Input("contentBase64")]
        public Input<string>? ContentBase64 { get; set; }

        /// <summary>
        /// The file size of the file that is being tracked by this resource in bytes.
        /// </summary>
        [Input("fileSize")]
        public Input<int>? FileSize { get; set; }

        [Input("md5")]
        public Input<string>? Md5 { get; set; }

        /// <summary>
        /// The last time stamp when the file was modified
        /// </summary>
        [Input("modificationTime")]
        public Input<string>? ModificationTime { get; set; }

        /// <summary>
        /// The path of the file in which you wish to save. For example, `/Volumes/main/default/volume1/file.txt`.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("remoteFileModified")]
        public Input<bool>? RemoteFileModified { get; set; }

        /// <summary>
        /// The full absolute path to the file. Conflicts with `ContentBase64`.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        public FileState()
        {
        }
        public static new FileState Empty => new FileState();
    }
}
