// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetCleanRoomAsset
    {
        /// <summary>
        /// This data source can be used to get a single clean room asset.
        /// 
        /// ## Example Usage
        /// 
        /// # Example: Clean Room Asset Datasource
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = new Databricks.Index.CleanRoomsAsset("this", new()
        ///     {
        ///         Name = "example-cleanroom-asset",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCleanRoomAssetResult> InvokeAsync(GetCleanRoomAssetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCleanRoomAssetResult>("databricks:index/getCleanRoomAsset:getCleanRoomAsset", args ?? new GetCleanRoomAssetArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to get a single clean room asset.
        /// 
        /// ## Example Usage
        /// 
        /// # Example: Clean Room Asset Datasource
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = new Databricks.Index.CleanRoomsAsset("this", new()
        ///     {
        ///         Name = "example-cleanroom-asset",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCleanRoomAssetResult> Invoke(GetCleanRoomAssetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCleanRoomAssetResult>("databricks:index/getCleanRoomAsset:getCleanRoomAsset", args ?? new GetCleanRoomAssetInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to get a single clean room asset.
        /// 
        /// ## Example Usage
        /// 
        /// # Example: Clean Room Asset Datasource
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = new Databricks.Index.CleanRoomsAsset("this", new()
        ///     {
        ///         Name = "example-cleanroom-asset",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCleanRoomAssetResult> Invoke(GetCleanRoomAssetInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCleanRoomAssetResult>("databricks:index/getCleanRoomAsset:getCleanRoomAsset", args ?? new GetCleanRoomAssetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCleanRoomAssetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
        /// </summary>
        [Input("assetType", required: true)]
        public string AssetType { get; set; } = null!;

        /// <summary>
        /// The name of the clean room this asset belongs to.
        /// This field is required for create operations and populated by the server for responses
        /// </summary>
        [Input("cleanRoomName")]
        public string? CleanRoomName { get; set; }

        /// <summary>
        /// (CleanRoomAssetForeignTable) - Foreign table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Input("foreignTable")]
        public Inputs.GetCleanRoomAssetForeignTableArgs? ForeignTable { get; set; }

        /// <summary>
        /// (CleanRoomAssetForeignTableLocalDetails) - Local details for a foreign that are only available to its owner.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Input("foreignTableLocalDetails")]
        public Inputs.GetCleanRoomAssetForeignTableLocalDetailsArgs? ForeignTableLocalDetails { get; set; }

        /// <summary>
        /// A fully qualified name that uniquely identifies the asset within the clean room.
        /// This is also the name displayed in the clean room UI.
        /// 
        /// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
        /// 
        /// For notebooks, the name is the notebook file name.
        /// For jar analyses, the name is the jar analysis name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// (CleanRoomAssetNotebook) - Notebook details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **NOTEBOOK_FILE**
        /// </summary>
        [Input("notebook")]
        public Inputs.GetCleanRoomAssetNotebookArgs? Notebook { get; set; }

        /// <summary>
        /// (CleanRoomAssetTable) - Table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Input("table")]
        public Inputs.GetCleanRoomAssetTableArgs? Table { get; set; }

        /// <summary>
        /// (CleanRoomAssetTableLocalDetails) - Local details for a table that are only available to its owner.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Input("tableLocalDetails")]
        public Inputs.GetCleanRoomAssetTableLocalDetailsArgs? TableLocalDetails { get; set; }

        /// <summary>
        /// (CleanRoomAssetView) - View details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Input("view")]
        public Inputs.GetCleanRoomAssetViewArgs? View { get; set; }

        /// <summary>
        /// (CleanRoomAssetViewLocalDetails) - Local details for a view that are only available to its owner.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Input("viewLocalDetails")]
        public Inputs.GetCleanRoomAssetViewLocalDetailsArgs? ViewLocalDetails { get; set; }

        /// <summary>
        /// (CleanRoomAssetVolumeLocalDetails) - Local details for a volume that are only available to its owner.
        /// Present if and only if **asset_type** is **VOLUME**
        /// </summary>
        [Input("volumeLocalDetails")]
        public Inputs.GetCleanRoomAssetVolumeLocalDetailsArgs? VolumeLocalDetails { get; set; }

        public GetCleanRoomAssetArgs()
        {
        }
        public static new GetCleanRoomAssetArgs Empty => new GetCleanRoomAssetArgs();
    }

    public sealed class GetCleanRoomAssetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
        /// </summary>
        [Input("assetType", required: true)]
        public Input<string> AssetType { get; set; } = null!;

        /// <summary>
        /// The name of the clean room this asset belongs to.
        /// This field is required for create operations and populated by the server for responses
        /// </summary>
        [Input("cleanRoomName")]
        public Input<string>? CleanRoomName { get; set; }

        /// <summary>
        /// (CleanRoomAssetForeignTable) - Foreign table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Input("foreignTable")]
        public Input<Inputs.GetCleanRoomAssetForeignTableInputArgs>? ForeignTable { get; set; }

        /// <summary>
        /// (CleanRoomAssetForeignTableLocalDetails) - Local details for a foreign that are only available to its owner.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Input("foreignTableLocalDetails")]
        public Input<Inputs.GetCleanRoomAssetForeignTableLocalDetailsInputArgs>? ForeignTableLocalDetails { get; set; }

        /// <summary>
        /// A fully qualified name that uniquely identifies the asset within the clean room.
        /// This is also the name displayed in the clean room UI.
        /// 
        /// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
        /// 
        /// For notebooks, the name is the notebook file name.
        /// For jar analyses, the name is the jar analysis name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// (CleanRoomAssetNotebook) - Notebook details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **NOTEBOOK_FILE**
        /// </summary>
        [Input("notebook")]
        public Input<Inputs.GetCleanRoomAssetNotebookInputArgs>? Notebook { get; set; }

        /// <summary>
        /// (CleanRoomAssetTable) - Table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Input("table")]
        public Input<Inputs.GetCleanRoomAssetTableInputArgs>? Table { get; set; }

        /// <summary>
        /// (CleanRoomAssetTableLocalDetails) - Local details for a table that are only available to its owner.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Input("tableLocalDetails")]
        public Input<Inputs.GetCleanRoomAssetTableLocalDetailsInputArgs>? TableLocalDetails { get; set; }

        /// <summary>
        /// (CleanRoomAssetView) - View details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Input("view")]
        public Input<Inputs.GetCleanRoomAssetViewInputArgs>? View { get; set; }

        /// <summary>
        /// (CleanRoomAssetViewLocalDetails) - Local details for a view that are only available to its owner.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Input("viewLocalDetails")]
        public Input<Inputs.GetCleanRoomAssetViewLocalDetailsInputArgs>? ViewLocalDetails { get; set; }

        /// <summary>
        /// (CleanRoomAssetVolumeLocalDetails) - Local details for a volume that are only available to its owner.
        /// Present if and only if **asset_type** is **VOLUME**
        /// </summary>
        [Input("volumeLocalDetails")]
        public Input<Inputs.GetCleanRoomAssetVolumeLocalDetailsInputArgs>? VolumeLocalDetails { get; set; }

        public GetCleanRoomAssetInvokeArgs()
        {
        }
        public static new GetCleanRoomAssetInvokeArgs Empty => new GetCleanRoomAssetInvokeArgs();
    }


    [OutputType]
    public sealed class GetCleanRoomAssetResult
    {
        /// <summary>
        /// (integer) - When the asset is added to the clean room, in epoch milliseconds
        /// </summary>
        public readonly int AddedAt;
        /// <summary>
        /// (string) - The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
        /// </summary>
        public readonly string AssetType;
        /// <summary>
        /// (string) - The name of the clean room this asset belongs to.
        /// This field is required for create operations and populated by the server for responses
        /// </summary>
        public readonly string? CleanRoomName;
        /// <summary>
        /// (CleanRoomAssetForeignTable) - Foreign table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetForeignTableResult? ForeignTable;
        /// <summary>
        /// (CleanRoomAssetForeignTableLocalDetails) - Local details for a foreign that are only available to its owner.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetForeignTableLocalDetailsResult? ForeignTableLocalDetails;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (string) - The name of the partition column
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (CleanRoomAssetNotebook) - Notebook details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **NOTEBOOK_FILE**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetNotebookResult? Notebook;
        /// <summary>
        /// (string) - The alias of the collaborator who owns this asset
        /// </summary>
        public readonly string OwnerCollaboratorAlias;
        /// <summary>
        /// (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// (CleanRoomAssetTable) - Table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetTableResult? Table;
        /// <summary>
        /// (CleanRoomAssetTableLocalDetails) - Local details for a table that are only available to its owner.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetTableLocalDetailsResult? TableLocalDetails;
        /// <summary>
        /// (CleanRoomAssetView) - View details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetViewResult? View;
        /// <summary>
        /// (CleanRoomAssetViewLocalDetails) - Local details for a view that are only available to its owner.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetViewLocalDetailsResult? ViewLocalDetails;
        /// <summary>
        /// (CleanRoomAssetVolumeLocalDetails) - Local details for a volume that are only available to its owner.
        /// Present if and only if **asset_type** is **VOLUME**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetVolumeLocalDetailsResult? VolumeLocalDetails;

        [OutputConstructor]
        private GetCleanRoomAssetResult(
            int addedAt,

            string assetType,

            string? cleanRoomName,

            Outputs.GetCleanRoomAssetForeignTableResult? foreignTable,

            Outputs.GetCleanRoomAssetForeignTableLocalDetailsResult? foreignTableLocalDetails,

            string id,

            string name,

            Outputs.GetCleanRoomAssetNotebookResult? notebook,

            string ownerCollaboratorAlias,

            string status,

            Outputs.GetCleanRoomAssetTableResult? table,

            Outputs.GetCleanRoomAssetTableLocalDetailsResult? tableLocalDetails,

            Outputs.GetCleanRoomAssetViewResult? view,

            Outputs.GetCleanRoomAssetViewLocalDetailsResult? viewLocalDetails,

            Outputs.GetCleanRoomAssetVolumeLocalDetailsResult? volumeLocalDetails)
        {
            AddedAt = addedAt;
            AssetType = assetType;
            CleanRoomName = cleanRoomName;
            ForeignTable = foreignTable;
            ForeignTableLocalDetails = foreignTableLocalDetails;
            Id = id;
            Name = name;
            Notebook = notebook;
            OwnerCollaboratorAlias = ownerCollaboratorAlias;
            Status = status;
            Table = table;
            TableLocalDetails = tableLocalDetails;
            View = view;
            ViewLocalDetails = viewLocalDetails;
            VolumeLocalDetails = volumeLocalDetails;
        }
    }
}
