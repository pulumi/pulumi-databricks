// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// ## Import
    /// 
    /// As of Pulumi v1.5, resources can be imported through configuration.
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   id = "name"
    /// 
    ///   to = databricks_recipient_federation_policy.this
    /// 
    /// }
    /// 
    /// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/recipientFederationPolicy:RecipientFederationPolicy databricks_recipient_federation_policy "name"
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/recipientFederationPolicy:RecipientFederationPolicy")]
    public partial class RecipientFederationPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the policy. This is a user-provided description
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// (string) - System-generated timestamp indicating when the policy was created
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Name of the federation policy. A recipient can have multiple policies with different names.
        /// The name must contain only lowercase alphanumeric characters, numbers, and hyphens
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the policy to use for validating OIDC claims in the federated tokens
        /// </summary>
        [Output("oidcPolicy")]
        public Output<Outputs.RecipientFederationPolicyOidcPolicy?> OidcPolicy { get; private set; } = null!;

        /// <summary>
        /// (string) - System-generated timestamp indicating when the policy was last updated
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Output("workspaceId")]
        public Output<string?> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a RecipientFederationPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RecipientFederationPolicy(string name, RecipientFederationPolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("databricks:index/recipientFederationPolicy:RecipientFederationPolicy", name, args ?? new RecipientFederationPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RecipientFederationPolicy(string name, Input<string> id, RecipientFederationPolicyState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/recipientFederationPolicy:RecipientFederationPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RecipientFederationPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RecipientFederationPolicy Get(string name, Input<string> id, RecipientFederationPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new RecipientFederationPolicy(name, id, state, options);
        }
    }

    public sealed class RecipientFederationPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the policy. This is a user-provided description
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Name of the federation policy. A recipient can have multiple policies with different names.
        /// The name must contain only lowercase alphanumeric characters, numbers, and hyphens
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the policy to use for validating OIDC claims in the federated tokens
        /// </summary>
        [Input("oidcPolicy")]
        public Input<Inputs.RecipientFederationPolicyOidcPolicyArgs>? OidcPolicy { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public RecipientFederationPolicyArgs()
        {
        }
        public static new RecipientFederationPolicyArgs Empty => new RecipientFederationPolicyArgs();
    }

    public sealed class RecipientFederationPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the policy. This is a user-provided description
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// (string) - System-generated timestamp indicating when the policy was created
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Name of the federation policy. A recipient can have multiple policies with different names.
        /// The name must contain only lowercase alphanumeric characters, numbers, and hyphens
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the policy to use for validating OIDC claims in the federated tokens
        /// </summary>
        [Input("oidcPolicy")]
        public Input<Inputs.RecipientFederationPolicyOidcPolicyGetArgs>? OidcPolicy { get; set; }

        /// <summary>
        /// (string) - System-generated timestamp indicating when the policy was last updated
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public RecipientFederationPolicyState()
        {
        }
        public static new RecipientFederationPolicyState Empty => new RecipientFederationPolicyState();
    }
}
