// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// ## Import
    /// 
    /// As of Pulumi v1.5, resources can be imported through configuration.
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   id = "on_securable_type,on_securable_fullname,name"
    /// 
    ///   to = databricks_policy_info.this
    /// 
    /// }
    /// 
    /// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/policyInfo:PolicyInfo databricks_policy_info "on_securable_type,on_securable_fullname,name"
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/policyInfo:PolicyInfo")]
    public partial class PolicyInfo : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Options for column mask policies. Valid only if `PolicyType` is `POLICY_TYPE_COLUMN_MASK`.
        /// Required on create and optional on update. When specified on update,
        /// the new options will replace the existing options as a whole
        /// </summary>
        [Output("columnMask")]
        public Output<Outputs.PolicyInfoColumnMask?> ColumnMask { get; private set; } = null!;

        /// <summary>
        /// Optional description of the policy
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// (integer) - Time at which the policy was created, in epoch milliseconds. Output only
        /// </summary>
        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// (string) - Username of the user who created the policy. Output only
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Optional list of user or group names that should be excluded from the policy
        /// </summary>
        [Output("exceptPrincipals")]
        public Output<ImmutableArray<string>> ExceptPrincipals { get; private set; } = null!;

        /// <summary>
        /// Type of securables that the policy should take effect on.
        /// Only `TABLE` is supported at this moment.
        /// Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
        /// </summary>
        [Output("forSecurableType")]
        public Output<string> ForSecurableType { get; private set; } = null!;

        /// <summary>
        /// Optional list of condition expressions used to match table columns.
        /// Only valid when `ForSecurableType` is `TABLE`.
        /// When specified, the policy only applies to tables whose columns satisfy all match conditions
        /// </summary>
        [Output("matchColumns")]
        public Output<ImmutableArray<Outputs.PolicyInfoMatchColumn>> MatchColumns { get; private set; } = null!;

        /// <summary>
        /// Name of the policy. Required on create and optional on update.
        /// To rename the policy, set `Name` to a different value on update
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Full name of the securable on which the policy is defined.
        /// Required on create and ignored on update
        /// </summary>
        [Output("onSecurableFullname")]
        public Output<string?> OnSecurableFullname { get; private set; } = null!;

        /// <summary>
        /// Type of the securable on which the policy is defined.
        /// Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
        /// Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
        /// </summary>
        [Output("onSecurableType")]
        public Output<string?> OnSecurableType { get; private set; } = null!;

        /// <summary>
        /// Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
        /// </summary>
        [Output("policyType")]
        public Output<string> PolicyType { get; private set; } = null!;

        /// <summary>
        /// Options for row filter policies. Valid only if `PolicyType` is `POLICY_TYPE_ROW_FILTER`.
        /// Required on create and optional on update. When specified on update,
        /// the new options will replace the existing options as a whole
        /// </summary>
        [Output("rowFilter")]
        public Output<Outputs.PolicyInfoRowFilter?> RowFilter { get; private set; } = null!;

        /// <summary>
        /// List of user or group names that the policy applies to.
        /// Required on create and optional on update
        /// </summary>
        [Output("toPrincipals")]
        public Output<ImmutableArray<string>> ToPrincipals { get; private set; } = null!;

        /// <summary>
        /// (integer) - Time at which the policy was last modified, in epoch milliseconds. Output only
        /// </summary>
        [Output("updatedAt")]
        public Output<int> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// (string) - Username of the user who last modified the policy. Output only
        /// </summary>
        [Output("updatedBy")]
        public Output<string> UpdatedBy { get; private set; } = null!;

        /// <summary>
        /// Optional condition when the policy should take effect
        /// </summary>
        [Output("whenCondition")]
        public Output<string?> WhenCondition { get; private set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Output("workspaceId")]
        public Output<string?> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyInfo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyInfo(string name, PolicyInfoArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/policyInfo:PolicyInfo", name, args ?? new PolicyInfoArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyInfo(string name, Input<string> id, PolicyInfoState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/policyInfo:PolicyInfo", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyInfo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyInfo Get(string name, Input<string> id, PolicyInfoState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyInfo(name, id, state, options);
        }
    }

    public sealed class PolicyInfoArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Options for column mask policies. Valid only if `PolicyType` is `POLICY_TYPE_COLUMN_MASK`.
        /// Required on create and optional on update. When specified on update,
        /// the new options will replace the existing options as a whole
        /// </summary>
        [Input("columnMask")]
        public Input<Inputs.PolicyInfoColumnMaskArgs>? ColumnMask { get; set; }

        /// <summary>
        /// Optional description of the policy
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("exceptPrincipals")]
        private InputList<string>? _exceptPrincipals;

        /// <summary>
        /// Optional list of user or group names that should be excluded from the policy
        /// </summary>
        public InputList<string> ExceptPrincipals
        {
            get => _exceptPrincipals ?? (_exceptPrincipals = new InputList<string>());
            set => _exceptPrincipals = value;
        }

        /// <summary>
        /// Type of securables that the policy should take effect on.
        /// Only `TABLE` is supported at this moment.
        /// Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
        /// </summary>
        [Input("forSecurableType", required: true)]
        public Input<string> ForSecurableType { get; set; } = null!;

        [Input("matchColumns")]
        private InputList<Inputs.PolicyInfoMatchColumnArgs>? _matchColumns;

        /// <summary>
        /// Optional list of condition expressions used to match table columns.
        /// Only valid when `ForSecurableType` is `TABLE`.
        /// When specified, the policy only applies to tables whose columns satisfy all match conditions
        /// </summary>
        public InputList<Inputs.PolicyInfoMatchColumnArgs> MatchColumns
        {
            get => _matchColumns ?? (_matchColumns = new InputList<Inputs.PolicyInfoMatchColumnArgs>());
            set => _matchColumns = value;
        }

        /// <summary>
        /// Name of the policy. Required on create and optional on update.
        /// To rename the policy, set `Name` to a different value on update
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Full name of the securable on which the policy is defined.
        /// Required on create and ignored on update
        /// </summary>
        [Input("onSecurableFullname")]
        public Input<string>? OnSecurableFullname { get; set; }

        /// <summary>
        /// Type of the securable on which the policy is defined.
        /// Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
        /// Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
        /// </summary>
        [Input("onSecurableType")]
        public Input<string>? OnSecurableType { get; set; }

        /// <summary>
        /// Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
        /// </summary>
        [Input("policyType", required: true)]
        public Input<string> PolicyType { get; set; } = null!;

        /// <summary>
        /// Options for row filter policies. Valid only if `PolicyType` is `POLICY_TYPE_ROW_FILTER`.
        /// Required on create and optional on update. When specified on update,
        /// the new options will replace the existing options as a whole
        /// </summary>
        [Input("rowFilter")]
        public Input<Inputs.PolicyInfoRowFilterArgs>? RowFilter { get; set; }

        [Input("toPrincipals", required: true)]
        private InputList<string>? _toPrincipals;

        /// <summary>
        /// List of user or group names that the policy applies to.
        /// Required on create and optional on update
        /// </summary>
        public InputList<string> ToPrincipals
        {
            get => _toPrincipals ?? (_toPrincipals = new InputList<string>());
            set => _toPrincipals = value;
        }

        /// <summary>
        /// Optional condition when the policy should take effect
        /// </summary>
        [Input("whenCondition")]
        public Input<string>? WhenCondition { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public PolicyInfoArgs()
        {
        }
        public static new PolicyInfoArgs Empty => new PolicyInfoArgs();
    }

    public sealed class PolicyInfoState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Options for column mask policies. Valid only if `PolicyType` is `POLICY_TYPE_COLUMN_MASK`.
        /// Required on create and optional on update. When specified on update,
        /// the new options will replace the existing options as a whole
        /// </summary>
        [Input("columnMask")]
        public Input<Inputs.PolicyInfoColumnMaskGetArgs>? ColumnMask { get; set; }

        /// <summary>
        /// Optional description of the policy
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// (integer) - Time at which the policy was created, in epoch milliseconds. Output only
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        /// <summary>
        /// (string) - Username of the user who created the policy. Output only
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        [Input("exceptPrincipals")]
        private InputList<string>? _exceptPrincipals;

        /// <summary>
        /// Optional list of user or group names that should be excluded from the policy
        /// </summary>
        public InputList<string> ExceptPrincipals
        {
            get => _exceptPrincipals ?? (_exceptPrincipals = new InputList<string>());
            set => _exceptPrincipals = value;
        }

        /// <summary>
        /// Type of securables that the policy should take effect on.
        /// Only `TABLE` is supported at this moment.
        /// Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
        /// </summary>
        [Input("forSecurableType")]
        public Input<string>? ForSecurableType { get; set; }

        [Input("matchColumns")]
        private InputList<Inputs.PolicyInfoMatchColumnGetArgs>? _matchColumns;

        /// <summary>
        /// Optional list of condition expressions used to match table columns.
        /// Only valid when `ForSecurableType` is `TABLE`.
        /// When specified, the policy only applies to tables whose columns satisfy all match conditions
        /// </summary>
        public InputList<Inputs.PolicyInfoMatchColumnGetArgs> MatchColumns
        {
            get => _matchColumns ?? (_matchColumns = new InputList<Inputs.PolicyInfoMatchColumnGetArgs>());
            set => _matchColumns = value;
        }

        /// <summary>
        /// Name of the policy. Required on create and optional on update.
        /// To rename the policy, set `Name` to a different value on update
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Full name of the securable on which the policy is defined.
        /// Required on create and ignored on update
        /// </summary>
        [Input("onSecurableFullname")]
        public Input<string>? OnSecurableFullname { get; set; }

        /// <summary>
        /// Type of the securable on which the policy is defined.
        /// Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
        /// Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
        /// </summary>
        [Input("onSecurableType")]
        public Input<string>? OnSecurableType { get; set; }

        /// <summary>
        /// Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
        /// </summary>
        [Input("policyType")]
        public Input<string>? PolicyType { get; set; }

        /// <summary>
        /// Options for row filter policies. Valid only if `PolicyType` is `POLICY_TYPE_ROW_FILTER`.
        /// Required on create and optional on update. When specified on update,
        /// the new options will replace the existing options as a whole
        /// </summary>
        [Input("rowFilter")]
        public Input<Inputs.PolicyInfoRowFilterGetArgs>? RowFilter { get; set; }

        [Input("toPrincipals")]
        private InputList<string>? _toPrincipals;

        /// <summary>
        /// List of user or group names that the policy applies to.
        /// Required on create and optional on update
        /// </summary>
        public InputList<string> ToPrincipals
        {
            get => _toPrincipals ?? (_toPrincipals = new InputList<string>());
            set => _toPrincipals = value;
        }

        /// <summary>
        /// (integer) - Time at which the policy was last modified, in epoch milliseconds. Output only
        /// </summary>
        [Input("updatedAt")]
        public Input<int>? UpdatedAt { get; set; }

        /// <summary>
        /// (string) - Username of the user who last modified the policy. Output only
        /// </summary>
        [Input("updatedBy")]
        public Input<string>? UpdatedBy { get; set; }

        /// <summary>
        /// Optional condition when the policy should take effect
        /// </summary>
        [Input("whenCondition")]
        public Input<string>? WhenCondition { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public PolicyInfoState()
        {
        }
        public static new PolicyInfoState Empty => new PolicyInfoState();
    }
}
