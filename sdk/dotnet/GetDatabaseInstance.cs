// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetDatabaseInstance
    {
        /// <summary>
        /// This data source can be used to get a single Database Instance.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Referring to a Database Instance by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetDatabaseInstance.Invoke(new()
        ///     {
        ///         Name = "my-database-instance",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDatabaseInstanceResult> InvokeAsync(GetDatabaseInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseInstanceResult>("databricks:index/getDatabaseInstance:getDatabaseInstance", args ?? new GetDatabaseInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to get a single Database Instance.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Referring to a Database Instance by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetDatabaseInstance.Invoke(new()
        ///     {
        ///         Name = "my-database-instance",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseInstanceResult> Invoke(GetDatabaseInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseInstanceResult>("databricks:index/getDatabaseInstance:getDatabaseInstance", args ?? new GetDatabaseInstanceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to get a single Database Instance.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Referring to a Database Instance by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetDatabaseInstance.Invoke(new()
        ///     {
        ///         Name = "my-database-instance",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseInstanceResult> Invoke(GetDatabaseInstanceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseInstanceResult>("databricks:index/getDatabaseInstance:getDatabaseInstance", args ?? new GetDatabaseInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (string) - The sku of the instance. Valid values are "CU_1", "CU_2", "CU_4", "CU_8"
        /// </summary>
        [Input("capacity")]
        public string? Capacity { get; set; }

        /// <summary>
        /// (boolean) - Whether the instance has PG native password login enabled. Defaults to true
        /// </summary>
        [Input("enablePgNativeLogin")]
        public bool? EnablePgNativeLogin { get; set; }

        /// <summary>
        /// (boolean) - Whether to enable secondaries to serve read-only traffic. Defaults to false
        /// </summary>
        [Input("enableReadableSecondaries")]
        public bool? EnableReadableSecondaries { get; set; }

        /// <summary>
        /// The name of the instance. This is the unique identifier for the instance
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// (integer) - The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
        /// 1 primary and 0 secondaries
        /// </summary>
        [Input("nodeCount")]
        public int? NodeCount { get; set; }

        /// <summary>
        /// (DatabaseInstanceRef) - The ref of the parent instance. This is only available if the instance is
        /// child instance.
        /// Input: For specifying the parent instance to create a child instance. Optional.
        /// Output: Only populated if provided as input to create a child instance
        /// </summary>
        [Input("parentInstanceRef")]
        public Inputs.GetDatabaseInstanceParentInstanceRefArgs? ParentInstanceRef { get; set; }

        /// <summary>
        /// (integer) - The retention window for the instance. This is the time window in days
        /// for which the historical data is retained. The default value is 7 days.
        /// Valid values are 2 to 35 days
        /// </summary>
        [Input("retentionWindowInDays")]
        public int? RetentionWindowInDays { get; set; }

        /// <summary>
        /// (boolean) - Whether the instance is stopped
        /// </summary>
        [Input("stopped")]
        public bool? Stopped { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public string? WorkspaceId { get; set; }

        public GetDatabaseInstanceArgs()
        {
        }
        public static new GetDatabaseInstanceArgs Empty => new GetDatabaseInstanceArgs();
    }

    public sealed class GetDatabaseInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (string) - The sku of the instance. Valid values are "CU_1", "CU_2", "CU_4", "CU_8"
        /// </summary>
        [Input("capacity")]
        public Input<string>? Capacity { get; set; }

        /// <summary>
        /// (boolean) - Whether the instance has PG native password login enabled. Defaults to true
        /// </summary>
        [Input("enablePgNativeLogin")]
        public Input<bool>? EnablePgNativeLogin { get; set; }

        /// <summary>
        /// (boolean) - Whether to enable secondaries to serve read-only traffic. Defaults to false
        /// </summary>
        [Input("enableReadableSecondaries")]
        public Input<bool>? EnableReadableSecondaries { get; set; }

        /// <summary>
        /// The name of the instance. This is the unique identifier for the instance
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// (integer) - The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
        /// 1 primary and 0 secondaries
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// (DatabaseInstanceRef) - The ref of the parent instance. This is only available if the instance is
        /// child instance.
        /// Input: For specifying the parent instance to create a child instance. Optional.
        /// Output: Only populated if provided as input to create a child instance
        /// </summary>
        [Input("parentInstanceRef")]
        public Input<Inputs.GetDatabaseInstanceParentInstanceRefInputArgs>? ParentInstanceRef { get; set; }

        /// <summary>
        /// (integer) - The retention window for the instance. This is the time window in days
        /// for which the historical data is retained. The default value is 7 days.
        /// Valid values are 2 to 35 days
        /// </summary>
        [Input("retentionWindowInDays")]
        public Input<int>? RetentionWindowInDays { get; set; }

        /// <summary>
        /// (boolean) - Whether the instance is stopped
        /// </summary>
        [Input("stopped")]
        public Input<bool>? Stopped { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public GetDatabaseInstanceInvokeArgs()
        {
        }
        public static new GetDatabaseInstanceInvokeArgs Empty => new GetDatabaseInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseInstanceResult
    {
        /// <summary>
        /// (string) - The sku of the instance. Valid values are "CU_1", "CU_2", "CU_4", "CU_8"
        /// </summary>
        public readonly string? Capacity;
        /// <summary>
        /// (list of DatabaseInstanceRef) - The refs of the child instances. This is only available if the instance is
        /// parent instance
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabaseInstanceChildInstanceRefResult> ChildInstanceRefs;
        /// <summary>
        /// (string) - The timestamp when the instance was created
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// (string) - The email of the creator of the instance
        /// </summary>
        public readonly string Creator;
        /// <summary>
        /// (boolean) - xref AIP-129. `EnablePgNativeLogin` is owned by the client, while `EffectiveEnablePgNativeLogin` is owned by the server.
        /// `EnablePgNativeLogin` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveEnablePgNativeLogin` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        public readonly bool EffectiveEnablePgNativeLogin;
        /// <summary>
        /// (boolean) - xref AIP-129. `EnableReadableSecondaries` is owned by the client, while `EffectiveEnableReadableSecondaries` is owned by the server.
        /// `EnableReadableSecondaries` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveEnableReadableSecondaries` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        public readonly bool EffectiveEnableReadableSecondaries;
        /// <summary>
        /// (integer) - xref AIP-129. `NodeCount` is owned by the client, while `EffectiveNodeCount` is owned by the server.
        /// `NodeCount` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveNodeCount` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        public readonly int EffectiveNodeCount;
        /// <summary>
        /// (integer) - xref AIP-129. `RetentionWindowInDays` is owned by the client, while `EffectiveRetentionWindowInDays` is owned by the server.
        /// `RetentionWindowInDays` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveRetentionWindowInDays` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        public readonly int EffectiveRetentionWindowInDays;
        /// <summary>
        /// (boolean) - xref AIP-129. `Stopped` is owned by the client, while `EffectiveStopped` is owned by the server.
        /// `Stopped` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveStopped` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        public readonly bool EffectiveStopped;
        /// <summary>
        /// (boolean) - Whether the instance has PG native password login enabled. Defaults to true
        /// </summary>
        public readonly bool EnablePgNativeLogin;
        /// <summary>
        /// (boolean) - Whether to enable secondaries to serve read-only traffic. Defaults to false
        /// </summary>
        public readonly bool? EnableReadableSecondaries;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (string) - Name of the ref database instance
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (integer) - The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
        /// 1 primary and 0 secondaries
        /// </summary>
        public readonly int? NodeCount;
        /// <summary>
        /// (DatabaseInstanceRef) - The ref of the parent instance. This is only available if the instance is
        /// child instance.
        /// Input: For specifying the parent instance to create a child instance. Optional.
        /// Output: Only populated if provided as input to create a child instance
        /// </summary>
        public readonly Outputs.GetDatabaseInstanceParentInstanceRefResult? ParentInstanceRef;
        /// <summary>
        /// (string) - The version of Postgres running on the instance
        /// </summary>
        public readonly string PgVersion;
        /// <summary>
        /// (string) - The DNS endpoint to connect to the instance for read only access. This is only available if
        /// EnableReadableSecondaries is true
        /// </summary>
        public readonly string ReadOnlyDns;
        /// <summary>
        /// (string) - The DNS endpoint to connect to the instance for read+write access
        /// </summary>
        public readonly string ReadWriteDns;
        /// <summary>
        /// (integer) - The retention window for the instance. This is the time window in days
        /// for which the historical data is retained. The default value is 7 days.
        /// Valid values are 2 to 35 days
        /// </summary>
        public readonly int? RetentionWindowInDays;
        /// <summary>
        /// (string) - The current state of the instance. Possible values are: `AVAILABLE`, `DELETING`, `FAILING_OVER`, `STARTING`, `STOPPED`, `UPDATING`
        /// </summary>
        public readonly string State;
        /// <summary>
        /// (boolean) - Whether the instance is stopped
        /// </summary>
        public readonly bool? Stopped;
        /// <summary>
        /// (string) - Id of the ref database instance
        /// </summary>
        public readonly string Uid;
        public readonly string? WorkspaceId;

        [OutputConstructor]
        private GetDatabaseInstanceResult(
            string? capacity,

            ImmutableArray<Outputs.GetDatabaseInstanceChildInstanceRefResult> childInstanceRefs,

            string creationTime,

            string creator,

            bool effectiveEnablePgNativeLogin,

            bool effectiveEnableReadableSecondaries,

            int effectiveNodeCount,

            int effectiveRetentionWindowInDays,

            bool effectiveStopped,

            bool enablePgNativeLogin,

            bool? enableReadableSecondaries,

            string id,

            string name,

            int? nodeCount,

            Outputs.GetDatabaseInstanceParentInstanceRefResult? parentInstanceRef,

            string pgVersion,

            string readOnlyDns,

            string readWriteDns,

            int? retentionWindowInDays,

            string state,

            bool? stopped,

            string uid,

            string? workspaceId)
        {
            Capacity = capacity;
            ChildInstanceRefs = childInstanceRefs;
            CreationTime = creationTime;
            Creator = creator;
            EffectiveEnablePgNativeLogin = effectiveEnablePgNativeLogin;
            EffectiveEnableReadableSecondaries = effectiveEnableReadableSecondaries;
            EffectiveNodeCount = effectiveNodeCount;
            EffectiveRetentionWindowInDays = effectiveRetentionWindowInDays;
            EffectiveStopped = effectiveStopped;
            EnablePgNativeLogin = enablePgNativeLogin;
            EnableReadableSecondaries = enableReadableSecondaries;
            Id = id;
            Name = name;
            NodeCount = nodeCount;
            ParentInstanceRef = parentInstanceRef;
            PgVersion = pgVersion;
            ReadOnlyDns = readOnlyDns;
            ReadWriteDns = readWriteDns;
            RetentionWindowInDays = retentionWindowInDays;
            State = state;
            Stopped = stopped;
            Uid = uid;
            WorkspaceId = workspaceId;
        }
    }
}
