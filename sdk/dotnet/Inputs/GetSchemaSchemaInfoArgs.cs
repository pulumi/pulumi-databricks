// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Inputs
{

    public sealed class GetSchemaSchemaInfoInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// indicates whether the principal is limited to retrieving metadata for the schema through the BROWSE privilege.
        /// </summary>
        [Input("browseOnly")]
        public Input<bool>? BrowseOnly { get; set; }

        /// <summary>
        /// the name of the catalog where the schema is.
        /// </summary>
        [Input("catalogName")]
        public Input<string>? CatalogName { get; set; }

        /// <summary>
        /// the type of the parent catalog.
        /// </summary>
        [Input("catalogType")]
        public Input<string>? CatalogType { get; set; }

        /// <summary>
        /// the comment attached to the volume
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// time at which this schema was created, in epoch milliseconds.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        /// <summary>
        /// username of schema creator.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// information about actual state of predictive optimization.
        /// </summary>
        [Input("effectivePredictiveOptimizationFlag")]
        public Input<Inputs.GetSchemaSchemaInfoEffectivePredictiveOptimizationFlagInputArgs>? EffectivePredictiveOptimizationFlag { get; set; }

        /// <summary>
        /// whether predictive optimization should be enabled for this object and objects under it.
        /// </summary>
        [Input("enablePredictiveOptimization")]
        public Input<string>? EnablePredictiveOptimization { get; set; }

        /// <summary>
        /// the two-level (fully qualified) name of the schema
        /// </summary>
        [Input("fullName")]
        public Input<string>? FullName { get; set; }

        /// <summary>
        /// the unique identifier of the metastore
        /// </summary>
        [Input("metastoreId")]
        public Input<string>? MetastoreId { get; set; }

        /// <summary>
        /// a fully qualified name of databricks_schema: *`Catalog`.`Schema`*
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// the identifier of the user who owns the schema
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("properties")]
        private InputMap<string>? _properties;

        /// <summary>
        /// map of properties set on the schema
        /// </summary>
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        /// <summary>
        /// the unique identifier of the schema
        /// </summary>
        [Input("schemaId")]
        public Input<string>? SchemaId { get; set; }

        /// <summary>
        /// the storage location on the cloud.
        /// </summary>
        [Input("storageLocation")]
        public Input<string>? StorageLocation { get; set; }

        /// <summary>
        /// storage root URL for managed tables within schema.
        /// </summary>
        [Input("storageRoot")]
        public Input<string>? StorageRoot { get; set; }

        /// <summary>
        /// the timestamp of the last time changes were made to the schema
        /// </summary>
        [Input("updatedAt")]
        public Input<int>? UpdatedAt { get; set; }

        /// <summary>
        /// the identifier of the user who updated the schema last time
        /// </summary>
        [Input("updatedBy")]
        public Input<string>? UpdatedBy { get; set; }

        public GetSchemaSchemaInfoInputArgs()
        {
        }
        public static new GetSchemaSchemaInfoInputArgs Empty => new GetSchemaSchemaInfoInputArgs();
    }
}
