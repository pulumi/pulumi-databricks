// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Inputs
{

    public sealed class GetFunctionsFunctionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Indicates whether the principal is limited to retrieving metadata for the associated object through the `BROWSE` privilege when `include_browse` is enabled in the request.
        /// </summary>
        [Input("browseOnly")]
        public bool? BrowseOnly { get; set; }

        /// <summary>
        /// Name of databricks_catalog.
        /// </summary>
        [Input("catalogName")]
        public string? CatalogName { get; set; }

        /// <summary>
        /// User-provided free-form text description.
        /// </summary>
        [Input("comment")]
        public string? Comment { get; set; }

        /// <summary>
        /// Time at which this function was created, in epoch milliseconds.
        /// </summary>
        [Input("createdAt")]
        public int? CreatedAt { get; set; }

        /// <summary>
        /// Username of function creator.
        /// </summary>
        [Input("createdBy")]
        public string? CreatedBy { get; set; }

        /// <summary>
        /// Scalar function return data type.
        /// </summary>
        [Input("dataType")]
        public string? DataType { get; set; }

        /// <summary>
        /// External function language.
        /// </summary>
        [Input("externalLanguage")]
        public string? ExternalLanguage { get; set; }

        /// <summary>
        /// External function name.
        /// </summary>
        [Input("externalName")]
        public string? ExternalName { get; set; }

        /// <summary>
        /// Pretty printed function data type.
        /// </summary>
        [Input("fullDataType")]
        public string? FullDataType { get; set; }

        /// <summary>
        /// Full name of function, in form of catalog_name.schema_name.function__name
        /// </summary>
        [Input("fullName")]
        public string? FullName { get; set; }

        /// <summary>
        /// Id of Function, relative to parent schema.
        /// </summary>
        [Input("functionId")]
        public string? FunctionId { get; set; }

        /// <summary>
        /// object describing input parameters. Consists of the single attribute:
        /// </summary>
        [Input("inputParams")]
        public Inputs.GetFunctionsFunctionInputParamsArgs? InputParams { get; set; }

        /// <summary>
        /// Boolean flag specifying whether the function is deterministic.
        /// </summary>
        [Input("isDeterministic")]
        public bool? IsDeterministic { get; set; }

        /// <summary>
        /// Boolean flag whether function null call.
        /// </summary>
        [Input("isNullCall")]
        public bool? IsNullCall { get; set; }

        /// <summary>
        /// Unique identifier of parent metastore.
        /// </summary>
        [Input("metastoreId")]
        public string? MetastoreId { get; set; }

        /// <summary>
        /// Name of parameter.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Username of current owner of function.
        /// </summary>
        [Input("owner")]
        public string? Owner { get; set; }

        /// <summary>
        /// Function parameter style. `S` is the value for SQL.
        /// </summary>
        [Input("parameterStyle")]
        public string? ParameterStyle { get; set; }

        /// <summary>
        /// JSON-serialized key-value pair map, encoded (escaped) as a string.
        /// </summary>
        [Input("properties")]
        public string? Properties { get; set; }

        /// <summary>
        /// Table function return parameters.  See `input_params` for description.
        /// </summary>
        [Input("returnParams")]
        public Inputs.GetFunctionsFunctionReturnParamsArgs? ReturnParams { get; set; }

        /// <summary>
        /// Function language (`SQL` or `EXTERNAL`). When `EXTERNAL` is used, the language of the routine function should be specified in the `external_language` field, and the `return_params` of the function cannot be used (as `TABLE` return type is not supported), and the `sql_data_access` field must be `NO_SQL`.
        /// </summary>
        [Input("routineBody")]
        public string? RoutineBody { get; set; }

        /// <summary>
        /// Function body.
        /// </summary>
        [Input("routineDefinition")]
        public string? RoutineDefinition { get; set; }

        /// <summary>
        /// Function dependencies.
        /// </summary>
        [Input("routineDependencies")]
        public Inputs.GetFunctionsFunctionRoutineDependenciesArgs? RoutineDependencies { get; set; }

        /// <summary>
        /// Name of databricks_schema.
        /// </summary>
        [Input("schemaName")]
        public string? SchemaName { get; set; }

        /// <summary>
        /// Function security type. (Enum: `DEFINER`).
        /// </summary>
        [Input("securityType")]
        public string? SecurityType { get; set; }

        /// <summary>
        /// Specific name of the function; Reserved for future use.
        /// </summary>
        [Input("specificName")]
        public string? SpecificName { get; set; }

        /// <summary>
        /// Function SQL data access (`CONTAINS_SQL`, `READS_SQL_DATA`, `NO_SQL`).
        /// </summary>
        [Input("sqlDataAccess")]
        public string? SqlDataAccess { get; set; }

        /// <summary>
        /// List of schemes whose objects can be referenced without qualification.
        /// </summary>
        [Input("sqlPath")]
        public string? SqlPath { get; set; }

        /// <summary>
        /// Time at which this function was created, in epoch milliseconds.
        /// </summary>
        [Input("updatedAt")]
        public int? UpdatedAt { get; set; }

        /// <summary>
        /// Username of user who last modified function.
        /// </summary>
        [Input("updatedBy")]
        public string? UpdatedBy { get; set; }

        public GetFunctionsFunctionArgs()
        {
        }
        public static new GetFunctionsFunctionArgs Empty => new GetFunctionsFunctionArgs();
    }
}
