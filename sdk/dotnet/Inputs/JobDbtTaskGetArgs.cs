// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Inputs
{

    public sealed class JobDbtTaskGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the catalog to use inside Unity Catalog.
        /// </summary>
        [Input("catalog")]
        public Input<string>? Catalog { get; set; }

        [Input("commands", required: true)]
        private InputList<string>? _commands;

        /// <summary>
        /// (Array) Series of dbt commands to execute in sequence. Every command must start with "dbt".
        /// </summary>
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        /// <summary>
        /// The relative path to the directory in the repository specified by `git_source` where dbt should look in for the `profiles.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--profile-dir` to a dbt command.
        /// </summary>
        [Input("profilesDirectory")]
        public Input<string>? ProfilesDirectory { get; set; }

        /// <summary>
        /// The relative path to the directory in the repository specified in `git_source` where dbt should look in for the `dbt_project.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--project-dir` to a dbt command.
        /// </summary>
        [Input("projectDirectory")]
        public Input<string>? ProjectDirectory { get; set; }

        /// <summary>
        /// The name of the schema dbt should run in. Defaults to `default`.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// The ID of the SQL warehouse that dbt should execute against.
        /// 
        /// You also need to include a `git_source` block to configure the repository that contains the dbt project.
        /// </summary>
        [Input("warehouseId")]
        public Input<string>? WarehouseId { get; set; }

        public JobDbtTaskGetArgs()
        {
        }
        public static new JobDbtTaskGetArgs Empty => new JobDbtTaskGetArgs();
    }
}
