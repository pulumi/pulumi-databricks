// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Inputs
{

    public sealed class GetDatabaseSyncedDatabaseTableSpecArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (boolean) - If true, the synced table's logical database and schema resources in PG
        /// will be created if they do not already exist
        /// </summary>
        [Input("createDatabaseObjectsIfMissing", required: true)]
        public bool CreateDatabaseObjectsIfMissing { get; set; }

        /// <summary>
        /// (string) - At most one of existing_pipeline_id and new_pipeline_spec should be defined.
        /// </summary>
        [Input("existingPipelineId", required: true)]
        public string ExistingPipelineId { get; set; } = null!;

        /// <summary>
        /// (NewPipelineSpec) - At most one of existing_pipeline_id and new_pipeline_spec should be defined.
        /// </summary>
        [Input("newPipelineSpec", required: true)]
        public Inputs.GetDatabaseSyncedDatabaseTableSpecNewPipelineSpecArgs NewPipelineSpec { get; set; } = null!;

        [Input("primaryKeyColumns")]
        private List<string>? _primaryKeyColumns;

        /// <summary>
        /// (list of string) - Primary Key columns to be used for data insert/update in the destination
        /// </summary>
        public List<string> PrimaryKeyColumns
        {
            get => _primaryKeyColumns ?? (_primaryKeyColumns = new List<string>());
            set => _primaryKeyColumns = value;
        }

        /// <summary>
        /// (string) - Scheduling policy of the underlying pipeline. Possible values are: `CONTINUOUS`, `SNAPSHOT`, `TRIGGERED`
        /// </summary>
        [Input("schedulingPolicy")]
        public string? SchedulingPolicy { get; set; }

        /// <summary>
        /// (string) - Three-part (catalog, schema, table) name of the source Delta table
        /// </summary>
        [Input("sourceTableFullName")]
        public string? SourceTableFullName { get; set; }

        /// <summary>
        /// (string) - Time series key to deduplicate (tie-break) rows with the same primary key
        /// </summary>
        [Input("timeseriesKey")]
        public string? TimeseriesKey { get; set; }

        public GetDatabaseSyncedDatabaseTableSpecArgs()
        {
        }
        public static new GetDatabaseSyncedDatabaseTableSpecArgs Empty => new GetDatabaseSyncedDatabaseTableSpecArgs();
    }
}
