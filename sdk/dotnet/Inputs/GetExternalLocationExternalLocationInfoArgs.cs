// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Inputs
{

    public sealed class GetExternalLocationExternalLocationInfoInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the s3 access point to use with the external location (AWS).
        /// </summary>
        [Input("accessPoint")]
        public Input<string>? AccessPoint { get; set; }

        [Input("browseOnly")]
        public Input<bool>? BrowseOnly { get; set; }

        /// <summary>
        /// User-supplied comment.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Time at which this catalog was created, in epoch milliseconds.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        /// <summary>
        /// Username of catalog creator.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Unique ID of storage credential.
        /// </summary>
        [Input("credentialId")]
        public Input<string>? CredentialId { get; set; }

        /// <summary>
        /// Name of the databricks.StorageCredential to use with this external location.
        /// </summary>
        [Input("credentialName")]
        public Input<string>? CredentialName { get; set; }

        /// <summary>
        /// The options for Server-Side Encryption to be used by each Databricks s3 client when connecting to S3 cloud storage (AWS).
        /// </summary>
        [Input("encryptionDetails")]
        public Input<Inputs.GetExternalLocationExternalLocationInfoEncryptionDetailsInputArgs>? EncryptionDetails { get; set; }

        /// <summary>
        /// Unique identifier of the parent Metastore.
        /// </summary>
        [Input("metastoreId")]
        public Input<string>? MetastoreId { get; set; }

        /// <summary>
        /// The name of the external location
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Username/groupname/sp application_id of the external location owner.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Indicates whether the external location is read-only.
        /// </summary>
        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        /// <summary>
        /// Time at which this catalog was last modified, in epoch milliseconds.
        /// </summary>
        [Input("updatedAt")]
        public Input<int>? UpdatedAt { get; set; }

        /// <summary>
        /// Username of user who last modified catalog.
        /// </summary>
        [Input("updatedBy")]
        public Input<string>? UpdatedBy { get; set; }

        /// <summary>
        /// Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public GetExternalLocationExternalLocationInfoInputArgs()
        {
        }
        public static new GetExternalLocationExternalLocationInfoInputArgs Empty => new GetExternalLocationExternalLocationInfoInputArgs();
    }
}
