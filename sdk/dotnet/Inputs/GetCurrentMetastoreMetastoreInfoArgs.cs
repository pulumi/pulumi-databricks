// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Inputs
{

    public sealed class GetCurrentMetastoreMetastoreInfoInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("cloud")]
        public Input<string>? Cloud { get; set; }

        /// <summary>
        /// Timestamp (in milliseconds) when the current metastore was created.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        /// <summary>
        /// the ID of the identity that created the current metastore.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// the ID of the default data access configuration.
        /// </summary>
        [Input("defaultDataAccessConfigId")]
        public Input<string>? DefaultDataAccessConfigId { get; set; }

        /// <summary>
        /// The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing.
        /// </summary>
        [Input("deltaSharingOrganizationName")]
        public Input<string>? DeltaSharingOrganizationName { get; set; }

        /// <summary>
        /// the expiration duration in seconds on recipient data access tokens.
        /// </summary>
        [Input("deltaSharingRecipientTokenLifetimeInSeconds")]
        public Input<int>? DeltaSharingRecipientTokenLifetimeInSeconds { get; set; }

        /// <summary>
        /// Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL. INTERNAL only allows sharing within the same account, and INTERNAL_AND_EXTERNAL allows cross account sharing and token based sharing.
        /// </summary>
        [Input("deltaSharingScope")]
        public Input<string>? DeltaSharingScope { get; set; }

        /// <summary>
        /// Identifier in form of `&lt;cloud&gt;:&lt;region&gt;:&lt;metastore_id&gt;` for use in Databricks to Databricks Delta Sharing.
        /// </summary>
        [Input("globalMetastoreId")]
        public Input<string>? GlobalMetastoreId { get; set; }

        /// <summary>
        /// Metastore ID.
        /// </summary>
        [Input("metastoreId")]
        public Input<string>? MetastoreId { get; set; }

        /// <summary>
        /// Name of metastore.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Username/group name/sp application_id of the metastore owner.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// the version of the privilege model used by the metastore.
        /// </summary>
        [Input("privilegeModelVersion")]
        public Input<string>? PrivilegeModelVersion { get; set; }

        /// <summary>
        /// (Mandatory for account-level) The region of the metastore.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Path on cloud storage account, where managed `databricks.Table` are stored.
        /// </summary>
        [Input("storageRoot")]
        public Input<string>? StorageRoot { get; set; }

        /// <summary>
        /// ID of a storage credential used for the `storage_root`.
        /// </summary>
        [Input("storageRootCredentialId")]
        public Input<string>? StorageRootCredentialId { get; set; }

        /// <summary>
        /// Name of a storage credential used for the `storage_root`.
        /// </summary>
        [Input("storageRootCredentialName")]
        public Input<string>? StorageRootCredentialName { get; set; }

        /// <summary>
        /// Timestamp (in milliseconds) when the current metastore was updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<int>? UpdatedAt { get; set; }

        /// <summary>
        /// the ID of the identity that updated the current metastore.
        /// </summary>
        [Input("updatedBy")]
        public Input<string>? UpdatedBy { get; set; }

        public GetCurrentMetastoreMetastoreInfoInputArgs()
        {
        }
        public static new GetCurrentMetastoreMetastoreInfoInputArgs Empty => new GetCurrentMetastoreMetastoreInfoInputArgs();
    }
}
