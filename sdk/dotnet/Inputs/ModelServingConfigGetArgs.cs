// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Inputs
{

    public sealed class ModelServingConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for Inference Tables which automatically logs requests and responses to Unity Catalog.
        /// </summary>
        [Input("autoCaptureConfig")]
        public Input<Inputs.ModelServingConfigAutoCaptureConfigGetArgs>? AutoCaptureConfig { get; set; }

        [Input("servedEntities")]
        private InputList<Inputs.ModelServingConfigServedEntityGetArgs>? _servedEntities;

        /// <summary>
        /// A list of served entities for the endpoint to serve. A serving endpoint can have up to 10 served entities.
        /// </summary>
        public InputList<Inputs.ModelServingConfigServedEntityGetArgs> ServedEntities
        {
            get => _servedEntities ?? (_servedEntities = new InputList<Inputs.ModelServingConfigServedEntityGetArgs>());
            set => _servedEntities = value;
        }

        [Input("servedModels")]
        private InputList<Inputs.ModelServingConfigServedModelGetArgs>? _servedModels;

        /// <summary>
        /// Each block represents a served model for the endpoint to serve. A model serving endpoint can have up to 10 served models.
        /// </summary>
        [Obsolete(@"Please use 'config.served_entities' instead of 'config.served_models'.")]
        public InputList<Inputs.ModelServingConfigServedModelGetArgs> ServedModels
        {
            get => _servedModels ?? (_servedModels = new InputList<Inputs.ModelServingConfigServedModelGetArgs>());
            set => _servedModels = value;
        }

        /// <summary>
        /// A single block represents the traffic split configuration amongst the served models.
        /// </summary>
        [Input("trafficConfig")]
        public Input<Inputs.ModelServingConfigTrafficConfigGetArgs>? TrafficConfig { get; set; }

        public ModelServingConfigGetArgs()
        {
        }
        public static new ModelServingConfigGetArgs Empty => new ModelServingConfigGetArgs();
    }
}
