// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Inputs
{

    public sealed class JobTaskForEachTaskTaskArgs : global::Pulumi.ResourceArgs
    {
        [Input("cleanRoomsNotebookTask")]
        public Input<Inputs.JobTaskForEachTaskTaskCleanRoomsNotebookTaskArgs>? CleanRoomsNotebookTask { get; set; }

        [Input("conditionTask")]
        public Input<Inputs.JobTaskForEachTaskTaskConditionTaskArgs>? ConditionTask { get; set; }

        [Input("dbtTask")]
        public Input<Inputs.JobTaskForEachTaskTaskDbtTaskArgs>? DbtTask { get; set; }

        [Input("dependsOns")]
        private InputList<Inputs.JobTaskForEachTaskTaskDependsOnArgs>? _dependsOns;
        public InputList<Inputs.JobTaskForEachTaskTaskDependsOnArgs> DependsOns
        {
            get => _dependsOns ?? (_dependsOns = new InputList<Inputs.JobTaskForEachTaskTaskDependsOnArgs>());
            set => _dependsOns = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("disableAutoOptimization")]
        public Input<bool>? DisableAutoOptimization { get; set; }

        [Input("emailNotifications")]
        public Input<Inputs.JobTaskForEachTaskTaskEmailNotificationsArgs>? EmailNotifications { get; set; }

        [Input("environmentKey")]
        public Input<string>? EnvironmentKey { get; set; }

        [Input("existingClusterId")]
        public Input<string>? ExistingClusterId { get; set; }

        [Input("health")]
        public Input<Inputs.JobTaskForEachTaskTaskHealthArgs>? Health { get; set; }

        [Input("jobClusterKey")]
        public Input<string>? JobClusterKey { get; set; }

        [Input("libraries")]
        private InputList<Inputs.JobTaskForEachTaskTaskLibraryArgs>? _libraries;
        public InputList<Inputs.JobTaskForEachTaskTaskLibraryArgs> Libraries
        {
            get => _libraries ?? (_libraries = new InputList<Inputs.JobTaskForEachTaskTaskLibraryArgs>());
            set => _libraries = value;
        }

        [Input("maxRetries")]
        public Input<int>? MaxRetries { get; set; }

        [Input("minRetryIntervalMillis")]
        public Input<int>? MinRetryIntervalMillis { get; set; }

        [Input("newCluster")]
        public Input<Inputs.JobTaskForEachTaskTaskNewClusterArgs>? NewCluster { get; set; }

        [Input("notebookTask")]
        public Input<Inputs.JobTaskForEachTaskTaskNotebookTaskArgs>? NotebookTask { get; set; }

        [Input("notificationSettings")]
        public Input<Inputs.JobTaskForEachTaskTaskNotificationSettingsArgs>? NotificationSettings { get; set; }

        [Input("pipelineTask")]
        public Input<Inputs.JobTaskForEachTaskTaskPipelineTaskArgs>? PipelineTask { get; set; }

        [Input("pythonWheelTask")]
        public Input<Inputs.JobTaskForEachTaskTaskPythonWheelTaskArgs>? PythonWheelTask { get; set; }

        [Input("retryOnTimeout")]
        public Input<bool>? RetryOnTimeout { get; set; }

        [Input("runIf")]
        public Input<string>? RunIf { get; set; }

        [Input("runJobTask")]
        public Input<Inputs.JobTaskForEachTaskTaskRunJobTaskArgs>? RunJobTask { get; set; }

        [Input("sparkJarTask")]
        public Input<Inputs.JobTaskForEachTaskTaskSparkJarTaskArgs>? SparkJarTask { get; set; }

        [Input("sparkPythonTask")]
        public Input<Inputs.JobTaskForEachTaskTaskSparkPythonTaskArgs>? SparkPythonTask { get; set; }

        [Input("sparkSubmitTask")]
        public Input<Inputs.JobTaskForEachTaskTaskSparkSubmitTaskArgs>? SparkSubmitTask { get; set; }

        [Input("sqlTask")]
        public Input<Inputs.JobTaskForEachTaskTaskSqlTaskArgs>? SqlTask { get; set; }

        [Input("taskKey", required: true)]
        public Input<string> TaskKey { get; set; } = null!;

        [Input("timeoutSeconds")]
        public Input<int>? TimeoutSeconds { get; set; }

        [Input("webhookNotifications")]
        public Input<Inputs.JobTaskForEachTaskTaskWebhookNotificationsArgs>? WebhookNotifications { get; set; }

        public JobTaskForEachTaskTaskArgs()
        {
        }
        public static new JobTaskForEachTaskTaskArgs Empty => new JobTaskForEachTaskTaskArgs();
    }
}
