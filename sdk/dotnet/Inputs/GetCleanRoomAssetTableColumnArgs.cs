// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks.Inputs
{

    public sealed class GetCleanRoomAssetTableColumnInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string) - User-provided free-form text description
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// (ColumnMask)
        /// </summary>
        [Input("mask")]
        public Input<Inputs.GetCleanRoomAssetTableColumnMaskInputArgs>? Mask { get; set; }

        /// <summary>
        /// A fully qualified name that uniquely identifies the asset within the clean room.
        /// This is also the name displayed in the clean room UI.
        /// 
        /// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
        /// 
        /// For notebooks, the name is the notebook file name.
        /// For jar analyses, the name is the jar analysis name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (boolean) - Whether field may be Null (default: true)
        /// </summary>
        [Input("nullable")]
        public Input<bool>? Nullable { get; set; }

        /// <summary>
        /// (integer) - Partition index for column
        /// </summary>
        [Input("partitionIndex")]
        public Input<int>? PartitionIndex { get; set; }

        /// <summary>
        /// (integer) - Ordinal position of column (starting at position 0)
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        /// <summary>
        /// (string) - Format of IntervalType
        /// </summary>
        [Input("typeIntervalType")]
        public Input<string>? TypeIntervalType { get; set; }

        /// <summary>
        /// (string) - Full data type specification, JSON-serialized
        /// </summary>
        [Input("typeJson")]
        public Input<string>? TypeJson { get; set; }

        /// <summary>
        /// (string) - . Possible values are: `ARRAY`, `BINARY`, `BOOLEAN`, `BYTE`, `CHAR`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `GEOGRAPHY`, `GEOMETRY`, `INT`, `INTERVAL`, `LONG`, `MAP`, `NULL`, `SHORT`, `STRING`, `STRUCT`, `TABLE_TYPE`, `TIMESTAMP`, `TIMESTAMP_NTZ`, `USER_DEFINED_TYPE`, `VARIANT`
        /// </summary>
        [Input("typeName")]
        public Input<string>? TypeName { get; set; }

        /// <summary>
        /// (integer) - Digits of precision; required for DecimalTypes
        /// </summary>
        [Input("typePrecision")]
        public Input<int>? TypePrecision { get; set; }

        /// <summary>
        /// (integer) - Digits to right of decimal; Required for DecimalTypes
        /// </summary>
        [Input("typeScale")]
        public Input<int>? TypeScale { get; set; }

        /// <summary>
        /// (string) - Full data type specification as SQL/catalogString text
        /// </summary>
        [Input("typeText")]
        public Input<string>? TypeText { get; set; }

        public GetCleanRoomAssetTableColumnInputArgs()
        {
        }
        public static new GetCleanRoomAssetTableColumnInputArgs Empty => new GetCleanRoomAssetTableColumnInputArgs();
    }
}
