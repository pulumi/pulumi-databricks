// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// This resource allows you to manage [Foundation Model provisioned throughput](https://docs.databricks.com/aws/en/machine-learning/foundation-model-apis/deploy-prov-throughput-foundation-model-apis) endpoints in Databricks.
    /// 
    /// &gt; This resource is currently in private preview, and only available for enrolled customers.
    /// 
    /// &gt; This resource can only be used with a workspace-level provider!
    /// 
    /// ## Example Usage
    /// 
    /// Creating a Foundation Model provisioned throughput endpoint
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var llama = new Databricks.ModelServingProvisionedThroughput("llama", new()
    ///     {
    ///         AiGateway = new Databricks.Inputs.ModelServingProvisionedThroughputAiGatewayArgs
    ///         {
    ///             UsageTrackingConfig = new Databricks.Inputs.ModelServingProvisionedThroughputAiGatewayUsageTrackingConfigArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         },
    ///         Config = new Databricks.Inputs.ModelServingProvisionedThroughputConfigArgs
    ///         {
    ///             ServedEntities = new[]
    ///             {
    ///                 new Databricks.Inputs.ModelServingProvisionedThroughputConfigServedEntityArgs
    ///                 {
    ///                     EntityName = "system.ai.llama-4-maverick",
    ///                     EntityVersion = "1",
    ///                     ProvisionedModelUnits = 100,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Access Control
    /// 
    /// * databricks.Permissions can control which groups or individual users can *Manage*, *Query* or *View* individual serving endpoints.
    /// 
    /// ## Related Resources
    /// 
    /// The following resources are often used in the same context:
    /// 
    /// * databricks.ModelServing to create custom and external serving endpoints in Databricks.
    /// * databricks.RegisteredModel to create [Models in Unity Catalog](https://docs.databricks.com/en/mlflow/models-in-uc.html) in Databricks.
    /// * End to end workspace management guide.
    /// * databricks.Directory to manage directories in [Databricks Workspace](https://docs.databricks.com/workspace/workspace-objects.html).
    /// * databricks.MlflowModel to create models in the [workspace model registry](https://docs.databricks.com/en/mlflow/model-registry.html) in Databricks.
    /// * databricks.Notebook to manage [Databricks Notebooks](https://docs.databricks.com/notebooks/index.html).
    /// * databricks.Notebook data to export a notebook from Databricks Workspace.
    /// * databricks.Repo to manage [Databricks Repos](https://docs.databricks.com/repos.html).
    /// 
    /// ## Import
    /// 
    /// The model serving provisioned throughput resource can be imported using the name of the endpoint:
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   to = databricks_model_serving_provisioned_throughput.this
    /// 
    ///   id = "&lt;model-serving-endpoint-name&gt;"
    /// 
    /// }
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/modelServingProvisionedThroughput:ModelServingProvisionedThroughput Alternatively, when using Pulumi version 1.4 or earlier, import using the command:
    /// ```
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/modelServingProvisionedThroughput:ModelServingProvisionedThroughput this &lt;model-serving-endpoint-name&gt;
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/modelServingProvisionedThroughput:ModelServingProvisionedThroughput")]
    public partial class ModelServingProvisionedThroughput : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A block with AI Gateway configuration for the serving endpoint. *Note: only external model endpoints are supported as of now.*
        /// </summary>
        [Output("aiGateway")]
        public Output<Outputs.ModelServingProvisionedThroughputAiGateway?> AiGateway { get; private set; } = null!;

        /// <summary>
        /// The Budget Policy ID set for this serving endpoint.
        /// </summary>
        [Output("budgetPolicyId")]
        public Output<string?> BudgetPolicyId { get; private set; } = null!;

        /// <summary>
        /// The model serving endpoint configuration.
        /// </summary>
        [Output("config")]
        public Output<Outputs.ModelServingProvisionedThroughputConfig> Config { get; private set; } = null!;

        /// <summary>
        /// The name of the model serving endpoint. This field is required and must be unique across a workspace. An endpoint name can consist of alphanumeric characters, dashes, and underscores. NOTE: Changing this name will delete the existing endpoint and create a new endpoint with the updated name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the serving endpoint primarily used to set permissions and refer to this instance for other operations.
        /// </summary>
        [Output("servingEndpointId")]
        public Output<string> ServingEndpointId { get; private set; } = null!;

        /// <summary>
        /// Tags to be attached to the serving endpoint and automatically propagated to billing logs.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.ModelServingProvisionedThroughputTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ModelServingProvisionedThroughput resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ModelServingProvisionedThroughput(string name, ModelServingProvisionedThroughputArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/modelServingProvisionedThroughput:ModelServingProvisionedThroughput", name, args ?? new ModelServingProvisionedThroughputArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ModelServingProvisionedThroughput(string name, Input<string> id, ModelServingProvisionedThroughputState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/modelServingProvisionedThroughput:ModelServingProvisionedThroughput", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ModelServingProvisionedThroughput resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ModelServingProvisionedThroughput Get(string name, Input<string> id, ModelServingProvisionedThroughputState? state = null, CustomResourceOptions? options = null)
        {
            return new ModelServingProvisionedThroughput(name, id, state, options);
        }
    }

    public sealed class ModelServingProvisionedThroughputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A block with AI Gateway configuration for the serving endpoint. *Note: only external model endpoints are supported as of now.*
        /// </summary>
        [Input("aiGateway")]
        public Input<Inputs.ModelServingProvisionedThroughputAiGatewayArgs>? AiGateway { get; set; }

        /// <summary>
        /// The Budget Policy ID set for this serving endpoint.
        /// </summary>
        [Input("budgetPolicyId")]
        public Input<string>? BudgetPolicyId { get; set; }

        /// <summary>
        /// The model serving endpoint configuration.
        /// </summary>
        [Input("config", required: true)]
        public Input<Inputs.ModelServingProvisionedThroughputConfigArgs> Config { get; set; } = null!;

        /// <summary>
        /// The name of the model serving endpoint. This field is required and must be unique across a workspace. An endpoint name can consist of alphanumeric characters, dashes, and underscores. NOTE: Changing this name will delete the existing endpoint and create a new endpoint with the updated name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputList<Inputs.ModelServingProvisionedThroughputTagArgs>? _tags;

        /// <summary>
        /// Tags to be attached to the serving endpoint and automatically propagated to billing logs.
        /// </summary>
        public InputList<Inputs.ModelServingProvisionedThroughputTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ModelServingProvisionedThroughputTagArgs>());
            set => _tags = value;
        }

        public ModelServingProvisionedThroughputArgs()
        {
        }
        public static new ModelServingProvisionedThroughputArgs Empty => new ModelServingProvisionedThroughputArgs();
    }

    public sealed class ModelServingProvisionedThroughputState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A block with AI Gateway configuration for the serving endpoint. *Note: only external model endpoints are supported as of now.*
        /// </summary>
        [Input("aiGateway")]
        public Input<Inputs.ModelServingProvisionedThroughputAiGatewayGetArgs>? AiGateway { get; set; }

        /// <summary>
        /// The Budget Policy ID set for this serving endpoint.
        /// </summary>
        [Input("budgetPolicyId")]
        public Input<string>? BudgetPolicyId { get; set; }

        /// <summary>
        /// The model serving endpoint configuration.
        /// </summary>
        [Input("config")]
        public Input<Inputs.ModelServingProvisionedThroughputConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// The name of the model serving endpoint. This field is required and must be unique across a workspace. An endpoint name can consist of alphanumeric characters, dashes, and underscores. NOTE: Changing this name will delete the existing endpoint and create a new endpoint with the updated name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the serving endpoint primarily used to set permissions and refer to this instance for other operations.
        /// </summary>
        [Input("servingEndpointId")]
        public Input<string>? ServingEndpointId { get; set; }

        [Input("tags")]
        private InputList<Inputs.ModelServingProvisionedThroughputTagGetArgs>? _tags;

        /// <summary>
        /// Tags to be attached to the serving endpoint and automatically propagated to billing logs.
        /// </summary>
        public InputList<Inputs.ModelServingProvisionedThroughputTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ModelServingProvisionedThroughputTagGetArgs>());
            set => _tags = value;
        }

        public ModelServingProvisionedThroughputState()
        {
        }
        public static new ModelServingProvisionedThroughputState Empty => new ModelServingProvisionedThroughputState();
    }
}
