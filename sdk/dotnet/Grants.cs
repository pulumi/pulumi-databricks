// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// &gt; **Note**
    /// This article refers to the privileges and inheritance model in Privilege Model version 1.0. If you created your metastore during the public preview (before August 25, 2022), you can upgrade to Privilege Model version 1.0 following [Upgrade to privilege inheritance](https://docs.databricks.com/data-governance/unity-catalog/hive-metastore.html)
    /// 
    /// &gt; **Note**
    /// Unity Catalog APIs are accessible via **workspace-level APIs**. This design may change in the future. Account-level principal grants can be assigned with any valid workspace as the Unity Catalog is decoupled from specific workspaces. More information in [the official documentation](https://docs.databricks.com/data-governance/unity-catalog/index.html).
    /// 
    /// Two different resources help you manage your Unity Catalog grants for a securable. Each of these resources serves a different use case:
    /// 
    /// - databricks_grants: Authoritative. Sets the grants of a securable and replaces any existing grants defined inside or outside of Pulumi.
    /// - databricks_grant: Authoritative for a given principal. Updates the grants of a securable to a single principal. Other principals within the grants for the securables are preserved.
    /// 
    /// In Unity Catalog all users initially have no access to data. Only Metastore Admins can create objects and can grant/revoke access on individual objects to users and groups. Every securable object in Unity Catalog has an owner. The owner can be any account-level user or group, called principals in general. The principal that creates an object becomes its owner. Owners receive `ALL_PRIVILEGES` on the securable object (e.g., `SELECT` and `MODIFY` on a table), as well as the permission to grant privileges to other principals.
    /// 
    /// Securable objects are hierarchical and privileges are inherited downward. The highest level object that privileges are inherited from is the catalog. This means that granting a privilege on a catalog or schema automatically grants the privilege to all current and future objects within the catalog or schema. Privileges that are granted on a metastore are not inherited.
    /// 
    /// Every `databricks.Grants` resource must have exactly one securable identifier and one or more `grant` blocks with the following arguments:
    /// 
    /// - `principal` - User name, group name or service principal application ID.
    /// - `privileges` - One or more privileges that are specific to a securable type.
    /// 
    /// For the latest list of privilege types that apply to each securable object in Unity Catalog, please refer to the [official documentation](https://docs.databricks.com/en/data-governance/unity-catalog/manage-privileges/privileges.html#privilege-types-by-securable-object-in-unity-catalog)
    /// 
    /// Pulumi will handle any configuration drift on every `pulumi up` run, even when grants are changed outside of Pulumi state.
    /// 
    /// Unlike the [SQL specification](https://docs.databricks.com/sql/language-manual/sql-ref-privileges.html#privilege-types), all privileges to be written with underscore instead of space, e.g. `CREATE_TABLE` and not `CREATE TABLE`. Below summarizes which privilege types apply to each securable object in the catalog:
    /// 
    /// ## Metastore grants
    /// 
    /// You can grant `CREATE_CATALOG`, `CREATE_CONNECTION`, `CREATE_EXTERNAL_LOCATION`, `CREATE_PROVIDER`, `CREATE_RECIPIENT`, `CREATE_SHARE`, `CREATE_STORAGE_CREDENTIAL`, `MANAGE_ALLOWLIST`, `SET_SHARE_PERMISSION`, `USE_MARKETPLACE_ASSETS`, `USE_CONNECTION`, `USE_PROVIDER`, `USE_RECIPIENT` and `USE_SHARE` privileges to databricks.Metastore assigned to the workspace.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sandbox = new Databricks.Grants("sandbox", new()
    ///     {
    ///         Metastore = "metastore_id",
    ///         GrantDetails = new[]
    ///         {
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Engineers",
    ///                 Privileges = new[]
    ///                 {
    ///                     "CREATE_CATALOG",
    ///                     "CREATE_EXTERNAL_LOCATION",
    ///                 },
    ///             },
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Sharer",
    ///                 Privileges = new[]
    ///                 {
    ///                     "CREATE_RECIPIENT",
    ///                     "CREATE_SHARE",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Catalog grants
    /// 
    /// You can grant `ALL_PRIVILEGES`, `APPLY_TAG`, `CREATE_CONNECTION`, `CREATE_SCHEMA`, `USE_CATALOG` privileges to databricks.Catalog specified in the `catalog` attribute. You can also grant `CREATE_FUNCTION`, `CREATE_TABLE`, `CREATE_VOLUME`, `EXECUTE`, `MODIFY`, `REFRESH`, `SELECT`, `READ_VOLUME`, `WRITE_VOLUME` and `USE_SCHEMA` at the catalog level to apply them to the pertinent current and future securable objects within the catalog:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sandbox = new Databricks.Catalog("sandbox", new()
    ///     {
    ///         Name = "sandbox",
    ///         Comment = "this catalog is managed by terraform",
    ///         Properties = 
    ///         {
    ///             { "purpose", "testing" },
    ///         },
    ///     });
    /// 
    ///     var sandboxGrants = new Databricks.Grants("sandbox", new()
    ///     {
    ///         Catalog = sandbox.Name,
    ///         GrantDetails = new[]
    ///         {
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Scientists",
    ///                 Privileges = new[]
    ///                 {
    ///                     "USE_CATALOG",
    ///                     "USE_SCHEMA",
    ///                     "CREATE_TABLE",
    ///                     "SELECT",
    ///                 },
    ///             },
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Engineers",
    ///                 Privileges = new[]
    ///                 {
    ///                     "USE_CATALOG",
    ///                     "USE_SCHEMA",
    ///                     "CREATE_SCHEMA",
    ///                     "CREATE_TABLE",
    ///                     "MODIFY",
    ///                 },
    ///             },
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Analyst",
    ///                 Privileges = new[]
    ///                 {
    ///                     "USE_CATALOG",
    ///                     "USE_SCHEMA",
    ///                     "SELECT",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Schema grants
    /// 
    /// You can grant `ALL_PRIVILEGES`, `APPLY_TAG`, `CREATE_FUNCTION`, `CREATE_TABLE`, `CREATE_VOLUME` and `USE_SCHEMA` privileges to *`catalog.schema`* specified in the `schema` attribute. You can also grant `EXECUTE`, `MODIFY`, `REFRESH`, `SELECT`, `READ_VOLUME`, `WRITE_VOLUME` at the schema level to apply them to the pertinent current and future securable objects within the schema:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var things = new Databricks.Schema("things", new()
    ///     {
    ///         CatalogName = sandbox.Id,
    ///         Name = "things",
    ///         Comment = "this schema is managed by terraform",
    ///         Properties = 
    ///         {
    ///             { "kind", "various" },
    ///         },
    ///     });
    /// 
    ///     var thingsGrants = new Databricks.Grants("things", new()
    ///     {
    ///         Schema = things.Id,
    ///         GrantDetails = new[]
    ///         {
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Engineers",
    ///                 Privileges = new[]
    ///                 {
    ///                     "USE_SCHEMA",
    ///                     "MODIFY",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Table grants
    /// 
    /// You can grant `ALL_PRIVILEGES`, `APPLY_TAG`, `SELECT` and `MODIFY` privileges to *`catalog.schema.table`* specified in the `table` attribute.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var customers = new Databricks.Grants("customers", new()
    ///     {
    ///         Table = "main.reporting.customers",
    ///         GrantDetails = new[]
    ///         {
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Engineers",
    ///                 Privileges = new[]
    ///                 {
    ///                     "MODIFY",
    ///                     "SELECT",
    ///                 },
    ///             },
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Analysts",
    ///                 Privileges = new[]
    ///                 {
    ///                     "SELECT",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// You can also apply grants dynamically with databricks.getTables data resource:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(async() =&gt; 
    /// {
    ///     var things = await Databricks.GetTables.InvokeAsync(new()
    ///     {
    ///         CatalogName = "sandbox",
    ///         SchemaName = "things",
    ///     });
    /// 
    ///     var thingsGrants = new List&lt;Databricks.Grants&gt;();
    ///     foreach (var range in )
    ///     {
    ///         thingsGrants.Add(new Databricks.Grants($"things-{range.Key}", new()
    ///         {
    ///             Table = range.Value,
    ///             GrantDetails = new[]
    ///             {
    ///                 new Databricks.Inputs.GrantsGrantArgs
    ///                 {
    ///                     Principal = "sensitive",
    ///                     Privileges = new[]
    ///                     {
    ///                         "SELECT",
    ///                         "MODIFY",
    ///                     },
    ///                 },
    ///             },
    ///         }));
    ///     }
    /// });
    /// ```
    /// 
    /// ## View grants
    /// 
    /// You can grant `ALL_PRIVILEGES`, `APPLY_TAG` and `SELECT` privileges to *`catalog.schema.view`* specified in `table` attribute.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var customer360 = new Databricks.Grants("customer360", new()
    ///     {
    ///         Table = "main.reporting.customer360",
    ///         GrantDetails = new[]
    ///         {
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Analysts",
    ///                 Privileges = new[]
    ///                 {
    ///                     "SELECT",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// You can also apply grants dynamically with databricks.getViews data resource:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(async() =&gt; 
    /// {
    ///     var customers = await Databricks.GetViews.InvokeAsync(new()
    ///     {
    ///         CatalogName = "main",
    ///         SchemaName = "customers",
    ///     });
    /// 
    ///     var customersGrants = new List&lt;Databricks.Grants&gt;();
    ///     foreach (var range in )
    ///     {
    ///         customersGrants.Add(new Databricks.Grants($"customers-{range.Key}", new()
    ///         {
    ///             Table = range.Value,
    ///             GrantDetails = new[]
    ///             {
    ///                 new Databricks.Inputs.GrantsGrantArgs
    ///                 {
    ///                     Principal = "sensitive",
    ///                     Privileges = new[]
    ///                     {
    ///                         "SELECT",
    ///                         "MODIFY",
    ///                     },
    ///                 },
    ///             },
    ///         }));
    ///     }
    /// });
    /// ```
    /// 
    /// ## Volume grants
    /// 
    /// You can grant `ALL_PRIVILEGES`, `READ_VOLUME` and `WRITE_VOLUME` privileges to *`catalog.schema.volume`* specified in the `volume` attribute.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Databricks.Volume("this", new()
    ///     {
    ///         Name = "quickstart_volume",
    ///         CatalogName = sandbox.Name,
    ///         SchemaName = things.Name,
    ///         VolumeType = "EXTERNAL",
    ///         StorageLocation = some.Url,
    ///         Comment = "this volume is managed by terraform",
    ///     });
    /// 
    ///     var volume = new Databricks.Grants("volume", new()
    ///     {
    ///         Volume = @this.Id,
    ///         GrantDetails = new[]
    ///         {
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Engineers",
    ///                 Privileges = new[]
    ///                 {
    ///                     "WRITE_VOLUME",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Registered model grants
    /// 
    /// You can grant `ALL_PRIVILEGES`, `APPLY_TAG`, and `EXECUTE` privileges to *`catalog.schema.model`* specified in the `model` attribute.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var customers = new Databricks.Grants("customers", new()
    ///     {
    ///         Model = "main.reporting.customer_model",
    ///         GrantDetails = new[]
    ///         {
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Engineers",
    ///                 Privileges = new[]
    ///                 {
    ///                     "APPLY_TAG",
    ///                     "EXECUTE",
    ///                 },
    ///             },
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Analysts",
    ///                 Privileges = new[]
    ///                 {
    ///                     "EXECUTE",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Function grants
    /// 
    /// You can grant `ALL_PRIVILEGES` and `EXECUTE` privileges to *`catalog.schema.function`* specified in the `function` attribute.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var udf = new Databricks.Grants("udf", new()
    ///     {
    ///         Function = "main.reporting.udf",
    ///         GrantDetails = new[]
    ///         {
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Engineers",
    ///                 Privileges = new[]
    ///                 {
    ///                     "EXECUTE",
    ///                 },
    ///             },
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Analysts",
    ///                 Privileges = new[]
    ///                 {
    ///                     "EXECUTE",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Storage credential grants
    /// 
    /// You can grant `ALL_PRIVILEGES`, `CREATE_EXTERNAL_LOCATION`, `CREATE_EXTERNAL_TABLE`, `READ_FILES` and `WRITE_FILES` privileges to databricks.StorageCredential id specified in `storage_credential` attribute:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var external = new Databricks.StorageCredential("external", new()
    ///     {
    ///         Name = externalDataAccess.Name,
    ///         AwsIamRole = new Databricks.Inputs.StorageCredentialAwsIamRoleArgs
    ///         {
    ///             RoleArn = externalDataAccess.Arn,
    ///         },
    ///         Comment = "Managed by TF",
    ///     });
    /// 
    ///     var externalCreds = new Databricks.Grants("external_creds", new()
    ///     {
    ///         StorageCredential = external.Id,
    ///         GrantDetails = new[]
    ///         {
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Engineers",
    ///                 Privileges = new[]
    ///                 {
    ///                     "CREATE_EXTERNAL_TABLE",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## External location grants
    /// 
    /// You can grant `ALL_PRIVILEGES`, `CREATE_EXTERNAL_TABLE`, `CREATE_MANAGED_STORAGE`, `CREATE EXTERNAL VOLUME`, `READ_FILES` and `WRITE_FILES` privileges to databricks.ExternalLocation id specified in `external_location` attribute:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var some = new Databricks.ExternalLocation("some", new()
    ///     {
    ///         Name = "external",
    ///         Url = $"s3://{externalAwsS3Bucket.Id}/some",
    ///         CredentialName = external.Id,
    ///         Comment = "Managed by TF",
    ///     });
    /// 
    ///     var someGrants = new Databricks.Grants("some", new()
    ///     {
    ///         ExternalLocation = some.Id,
    ///         GrantDetails = new[]
    ///         {
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Engineers",
    ///                 Privileges = new[]
    ///                 {
    ///                     "CREATE_EXTERNAL_TABLE",
    ///                     "READ_FILES",
    ///                 },
    ///             },
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = mySp.ApplicationId,
    ///                 Privileges = new[]
    ///                 {
    ///                     "CREATE_EXTERNAL_TABLE",
    ///                     "READ_FILES",
    ///                 },
    ///             },
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = myGroup.DisplayName,
    ///                 Privileges = new[]
    ///                 {
    ///                     "CREATE_EXTERNAL_TABLE",
    ///                     "READ_FILES",
    ///                 },
    ///             },
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = myUser.UserName,
    ///                 Privileges = new[]
    ///                 {
    ///                     "CREATE_EXTERNAL_TABLE",
    ///                     "READ_FILES",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Connection grants
    /// 
    /// You can grant `ALL_PRIVILEGES`, `USE_CONNECTION` and `CREATE_FOREIGN_CATALOG` to databricks.Connection specified in `foreign_connection` attribute:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mysql = new Databricks.Connection("mysql", new()
    ///     {
    ///         Name = "mysql_connection",
    ///         ConnectionType = "MYSQL",
    ///         Comment = "this is a connection to mysql db",
    ///         Options = 
    ///         {
    ///             { "host", "test.mysql.database.azure.com" },
    ///             { "port", "3306" },
    ///             { "user", "user" },
    ///             { "password", "password" },
    ///         },
    ///         Properties = 
    ///         {
    ///             { "purpose", "testing" },
    ///         },
    ///     });
    /// 
    ///     var some = new Databricks.Grants("some", new()
    ///     {
    ///         ForeignConnection = mysql.Name,
    ///         GrantDetails = new[]
    ///         {
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = "Data Engineers",
    ///                 Privileges = new[]
    ///                 {
    ///                     "CREATE_FOREIGN_CATALOG",
    ///                     "USE_CONNECTION",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Delta Sharing share grants
    /// 
    /// You can grant `SELECT` to databricks.Recipient on databricks.Share name specified in `share` attribute:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var some = new Databricks.Share("some", new()
    ///     {
    ///         Name = "my_share",
    ///     });
    /// 
    ///     var someRecipient = new Databricks.Recipient("some", new()
    ///     {
    ///         Name = "my_recipient",
    ///     });
    /// 
    ///     var someGrants = new Databricks.Grants("some", new()
    ///     {
    ///         Share = some.Name,
    ///         GrantDetails = new[]
    ///         {
    ///             new Databricks.Inputs.GrantsGrantArgs
    ///             {
    ///                 Principal = someRecipient.Name,
    ///                 Privileges = new[]
    ///                 {
    ///                     "SELECT",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Other access control
    /// 
    /// You can control Databricks General Permissions through databricks.Permissions resource.
    /// 
    /// ## Import
    /// 
    /// The resource can be imported using combination of securable type (`table`, `catalog`, `foreign_connection`, ...) and it's name:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/grants:Grants this catalog/abc
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/grants:Grants")]
    public partial class Grants : global::Pulumi.CustomResource
    {
        [Output("catalog")]
        public Output<string?> Catalog { get; private set; } = null!;

        [Output("externalLocation")]
        public Output<string?> ExternalLocation { get; private set; } = null!;

        [Output("foreignConnection")]
        public Output<string?> ForeignConnection { get; private set; } = null!;

        [Output("function")]
        public Output<string?> Function { get; private set; } = null!;

        [Output("grants")]
        public Output<ImmutableArray<Outputs.GrantsGrant>> GrantDetails { get; private set; } = null!;

        [Output("metastore")]
        public Output<string?> Metastore { get; private set; } = null!;

        [Output("model")]
        public Output<string?> Model { get; private set; } = null!;

        [Output("pipeline")]
        public Output<string?> Pipeline { get; private set; } = null!;

        [Output("recipient")]
        public Output<string?> Recipient { get; private set; } = null!;

        [Output("schema")]
        public Output<string?> Schema { get; private set; } = null!;

        [Output("share")]
        public Output<string?> Share { get; private set; } = null!;

        [Output("storageCredential")]
        public Output<string?> StorageCredential { get; private set; } = null!;

        [Output("table")]
        public Output<string?> Table { get; private set; } = null!;

        [Output("volume")]
        public Output<string?> Volume { get; private set; } = null!;


        /// <summary>
        /// Create a Grants resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Grants(string name, GrantsArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/grants:Grants", name, args ?? new GrantsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Grants(string name, Input<string> id, GrantsState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/grants:Grants", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Grants resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Grants Get(string name, Input<string> id, GrantsState? state = null, CustomResourceOptions? options = null)
        {
            return new Grants(name, id, state, options);
        }
    }

    public sealed class GrantsArgs : global::Pulumi.ResourceArgs
    {
        [Input("catalog")]
        public Input<string>? Catalog { get; set; }

        [Input("externalLocation")]
        public Input<string>? ExternalLocation { get; set; }

        [Input("foreignConnection")]
        public Input<string>? ForeignConnection { get; set; }

        [Input("function")]
        public Input<string>? Function { get; set; }

        [Input("grants", required: true)]
        private InputList<Inputs.GrantsGrantArgs>? _grants;
        public InputList<Inputs.GrantsGrantArgs> GrantDetails
        {
            get => _grants ?? (_grants = new InputList<Inputs.GrantsGrantArgs>());
            set => _grants = value;
        }

        [Input("metastore")]
        public Input<string>? Metastore { get; set; }

        [Input("model")]
        public Input<string>? Model { get; set; }

        [Input("pipeline")]
        public Input<string>? Pipeline { get; set; }

        [Input("recipient")]
        public Input<string>? Recipient { get; set; }

        [Input("schema")]
        public Input<string>? Schema { get; set; }

        [Input("share")]
        public Input<string>? Share { get; set; }

        [Input("storageCredential")]
        public Input<string>? StorageCredential { get; set; }

        [Input("table")]
        public Input<string>? Table { get; set; }

        [Input("volume")]
        public Input<string>? Volume { get; set; }

        public GrantsArgs()
        {
        }
        public static new GrantsArgs Empty => new GrantsArgs();
    }

    public sealed class GrantsState : global::Pulumi.ResourceArgs
    {
        [Input("catalog")]
        public Input<string>? Catalog { get; set; }

        [Input("externalLocation")]
        public Input<string>? ExternalLocation { get; set; }

        [Input("foreignConnection")]
        public Input<string>? ForeignConnection { get; set; }

        [Input("function")]
        public Input<string>? Function { get; set; }

        [Input("grants")]
        private InputList<Inputs.GrantsGrantGetArgs>? _grants;
        public InputList<Inputs.GrantsGrantGetArgs> GrantDetails
        {
            get => _grants ?? (_grants = new InputList<Inputs.GrantsGrantGetArgs>());
            set => _grants = value;
        }

        [Input("metastore")]
        public Input<string>? Metastore { get; set; }

        [Input("model")]
        public Input<string>? Model { get; set; }

        [Input("pipeline")]
        public Input<string>? Pipeline { get; set; }

        [Input("recipient")]
        public Input<string>? Recipient { get; set; }

        [Input("schema")]
        public Input<string>? Schema { get; set; }

        [Input("share")]
        public Input<string>? Share { get; set; }

        [Input("storageCredential")]
        public Input<string>? StorageCredential { get; set; }

        [Input("table")]
        public Input<string>? Table { get; set; }

        [Input("volume")]
        public Input<string>? Volume { get; set; }

        public GrantsState()
        {
        }
        public static new GrantsState Empty => new GrantsState();
    }
}
