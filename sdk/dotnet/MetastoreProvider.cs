// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// &gt; **Note** This resource could be only used with workspace-level provider!
    /// 
    /// In Delta Sharing, a provider is an entity that shares data with a recipient. Within a metastore, Unity Catalog provides the ability to create a provider which contains a list of shares that have been shared with you.
    /// 
    /// A `databricks.MetastoreProvider` is contained within databricks.Metastore and can contain a list of shares that have been shared with you.
    /// 
    /// Note that Databricks to Databricks sharing automatically creates the provider.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dbprovider = new Databricks.MetastoreProvider("dbprovider", new()
    ///     {
    ///         Name = "terraform-test-provider",
    ///         Comment = "made by terraform 2",
    ///         AuthenticationType = "TOKEN",
    ///         RecipientProfileStr = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["shareCredentialsVersion"] = 1,
    ///             ["bearerToken"] = "token",
    ///             ["endpoint"] = "endpoint",
    ///             ["expirationTime"] = "expiration-time",
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Related Resources
    /// 
    /// The following resources are used in the same context:
    /// 
    /// * databricks.getTables data to list tables within Unity Catalog.
    /// * databricks.getSchemas data to list schemas within Unity Catalog.
    /// * databricks.getCatalogs data to list catalogs within Unity Catalog.
    /// </summary>
    [DatabricksResourceType("databricks:index/metastoreProvider:MetastoreProvider")]
    public partial class MetastoreProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The delta sharing authentication type. Valid values are `TOKEN`.
        /// </summary>
        [Output("authenticationType")]
        public Output<string> AuthenticationType { get; private set; } = null!;

        /// <summary>
        /// Description about the provider.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Name of provider. Change forces creation of a new resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// This is the json file that is created from a recipient url.
        /// </summary>
        [Output("recipientProfileStr")]
        public Output<string> RecipientProfileStr { get; private set; } = null!;


        /// <summary>
        /// Create a MetastoreProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetastoreProvider(string name, MetastoreProviderArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/metastoreProvider:MetastoreProvider", name, args ?? new MetastoreProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MetastoreProvider(string name, Input<string> id, MetastoreProviderState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/metastoreProvider:MetastoreProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "recipientProfileStr",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetastoreProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetastoreProvider Get(string name, Input<string> id, MetastoreProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new MetastoreProvider(name, id, state, options);
        }
    }

    public sealed class MetastoreProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The delta sharing authentication type. Valid values are `TOKEN`.
        /// </summary>
        [Input("authenticationType", required: true)]
        public Input<string> AuthenticationType { get; set; } = null!;

        /// <summary>
        /// Description about the provider.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Name of provider. Change forces creation of a new resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("recipientProfileStr", required: true)]
        private Input<string>? _recipientProfileStr;

        /// <summary>
        /// This is the json file that is created from a recipient url.
        /// </summary>
        public Input<string>? RecipientProfileStr
        {
            get => _recipientProfileStr;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _recipientProfileStr = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public MetastoreProviderArgs()
        {
        }
        public static new MetastoreProviderArgs Empty => new MetastoreProviderArgs();
    }

    public sealed class MetastoreProviderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The delta sharing authentication type. Valid values are `TOKEN`.
        /// </summary>
        [Input("authenticationType")]
        public Input<string>? AuthenticationType { get; set; }

        /// <summary>
        /// Description about the provider.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Name of provider. Change forces creation of a new resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("recipientProfileStr")]
        private Input<string>? _recipientProfileStr;

        /// <summary>
        /// This is the json file that is created from a recipient url.
        /// </summary>
        public Input<string>? RecipientProfileStr
        {
            get => _recipientProfileStr;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _recipientProfileStr = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public MetastoreProviderState()
        {
        }
        public static new MetastoreProviderState Empty => new MetastoreProviderState();
    }
}
