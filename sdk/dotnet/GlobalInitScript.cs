// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// This resource allows you to manage [global init scripts](https://docs.databricks.com/clusters/init-scripts.html#global-init-scripts), which are run on all databricks.Cluster and databricks_job.
    /// 
    /// &gt; This resource can only be used with a workspace-level provider!
    /// 
    /// ## Import
    /// 
    /// The resource global init script can be imported using script ID:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/globalInitScript:GlobalInitScript this script_id
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/globalInitScript:GlobalInitScript")]
    public partial class GlobalInitScript : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The base64-encoded source code global init script. Conflicts with `source`. Use of `content_base64` is discouraged, as it's increasing memory footprint of Pulumi state and should only be used in exceptional circumstances
        /// </summary>
        [Output("contentBase64")]
        public Output<string?> ContentBase64 { get; private set; } = null!;

        /// <summary>
        /// specifies if the script is enabled for execution, or not
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("md5")]
        public Output<string?> Md5 { get; private set; } = null!;

        /// <summary>
        /// the name of the script.  It should be unique
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// the position of a global init script, where `0` represents the first global init script to run, `1` is the second global init script to run, and so on. When omitted, the script gets the last position.
        /// </summary>
        [Output("position")]
        public Output<int> Position { get; private set; } = null!;

        /// <summary>
        /// Path to script's source code on local filesystem. Conflicts with `content_base64`
        /// </summary>
        [Output("source")]
        public Output<string?> Source { get; private set; } = null!;


        /// <summary>
        /// Create a GlobalInitScript resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GlobalInitScript(string name, GlobalInitScriptArgs? args = null, CustomResourceOptions? options = null)
            : base("databricks:index/globalInitScript:GlobalInitScript", name, args ?? new GlobalInitScriptArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GlobalInitScript(string name, Input<string> id, GlobalInitScriptState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/globalInitScript:GlobalInitScript", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GlobalInitScript resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GlobalInitScript Get(string name, Input<string> id, GlobalInitScriptState? state = null, CustomResourceOptions? options = null)
        {
            return new GlobalInitScript(name, id, state, options);
        }
    }

    public sealed class GlobalInitScriptArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The base64-encoded source code global init script. Conflicts with `source`. Use of `content_base64` is discouraged, as it's increasing memory footprint of Pulumi state and should only be used in exceptional circumstances
        /// </summary>
        [Input("contentBase64")]
        public Input<string>? ContentBase64 { get; set; }

        /// <summary>
        /// specifies if the script is enabled for execution, or not
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("md5")]
        public Input<string>? Md5 { get; set; }

        /// <summary>
        /// the name of the script.  It should be unique
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// the position of a global init script, where `0` represents the first global init script to run, `1` is the second global init script to run, and so on. When omitted, the script gets the last position.
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        /// <summary>
        /// Path to script's source code on local filesystem. Conflicts with `content_base64`
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        public GlobalInitScriptArgs()
        {
        }
        public static new GlobalInitScriptArgs Empty => new GlobalInitScriptArgs();
    }

    public sealed class GlobalInitScriptState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The base64-encoded source code global init script. Conflicts with `source`. Use of `content_base64` is discouraged, as it's increasing memory footprint of Pulumi state and should only be used in exceptional circumstances
        /// </summary>
        [Input("contentBase64")]
        public Input<string>? ContentBase64 { get; set; }

        /// <summary>
        /// specifies if the script is enabled for execution, or not
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("md5")]
        public Input<string>? Md5 { get; set; }

        /// <summary>
        /// the name of the script.  It should be unique
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// the position of a global init script, where `0` represents the first global init script to run, `1` is the second global init script to run, and so on. When omitted, the script gets the last position.
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        /// <summary>
        /// Path to script's source code on local filesystem. Conflicts with `content_base64`
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        public GlobalInitScriptState()
        {
        }
        public static new GlobalInitScriptState Empty => new GlobalInitScriptState();
    }
}
