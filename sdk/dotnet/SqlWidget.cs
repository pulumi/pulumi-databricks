// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// To manage [SQLA resources](https://docs.databricks.com/sql/get-started/concepts.html) you must have `databricks_sql_access` on your databricks.Group or databricks_user.
    /// 
    /// **Note:** documentation for this resource is a work in progress.
    /// 
    /// A widget is always tied to a dashboard. Every dashboard may have one or more widgets.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var d1w1 = new Databricks.SqlWidget("d1w1", new()
    ///     {
    ///         DashboardId = databricks_sql_dashboard.D1.Id,
    ///         Text = "Hello! I'm a **text widget**!",
    ///         Position = new Databricks.Inputs.SqlWidgetPositionArgs
    ///         {
    ///             SizeX = 3,
    ///             SizeY = 4,
    ///             PosX = 0,
    ///             PosY = 0,
    ///         },
    ///     });
    /// 
    ///     var d1w2 = new Databricks.SqlWidget("d1w2", new()
    ///     {
    ///         DashboardId = databricks_sql_dashboard.D1.Id,
    ///         VisualizationId = databricks_sql_visualization.Q1v1.Id,
    ///         Position = new Databricks.Inputs.SqlWidgetPositionArgs
    ///         {
    ///             SizeX = 3,
    ///             SizeY = 4,
    ///             PosX = 3,
    ///             PosY = 0,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Related Resources
    /// 
    /// The following resources are often used in the same context:
    /// 
    /// * End to end workspace management guide.
    /// * databricks.SqlDashboard to manage Databricks SQL [Dashboards](https://docs.databricks.com/sql/user/dashboards/index.html).
    /// * databricks.SqlEndpoint to manage Databricks SQL [Endpoints](https://docs.databricks.com/sql/admin/sql-endpoints.html).
    /// * databricks.SqlGlobalConfig to configure the security policy, databricks_instance_profile, and [data access properties](https://docs.databricks.com/sql/admin/data-access-configuration.html) for all databricks.SqlEndpoint of workspace.
    /// * databricks.SqlPermissions to manage data object access control lists in Databricks workspaces for things like tables, views, databases, and [more](https://docs.databricks.com/security/access-control/table-acls/object-privileges.html).
    /// 
    /// ## Import
    /// 
    /// You can import a `databricks_sql_widget` resource with ID like the following:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/sqlWidget:SqlWidget this &lt;dashboard-id&gt;/&lt;widget-id&gt;
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/sqlWidget:SqlWidget")]
    public partial class SqlWidget : global::Pulumi.CustomResource
    {
        [Output("dashboardId")]
        public Output<string> DashboardId { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("parameters")]
        public Output<ImmutableArray<Outputs.SqlWidgetParameter>> Parameters { get; private set; } = null!;

        [Output("position")]
        public Output<Outputs.SqlWidgetPosition?> Position { get; private set; } = null!;

        [Output("text")]
        public Output<string?> Text { get; private set; } = null!;

        [Output("title")]
        public Output<string?> Title { get; private set; } = null!;

        [Output("visualizationId")]
        public Output<string?> VisualizationId { get; private set; } = null!;

        [Output("widgetId")]
        public Output<string> WidgetId { get; private set; } = null!;


        /// <summary>
        /// Create a SqlWidget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlWidget(string name, SqlWidgetArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/sqlWidget:SqlWidget", name, args ?? new SqlWidgetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SqlWidget(string name, Input<string> id, SqlWidgetState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/sqlWidget:SqlWidget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlWidget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlWidget Get(string name, Input<string> id, SqlWidgetState? state = null, CustomResourceOptions? options = null)
        {
            return new SqlWidget(name, id, state, options);
        }
    }

    public sealed class SqlWidgetArgs : global::Pulumi.ResourceArgs
    {
        [Input("dashboardId", required: true)]
        public Input<string> DashboardId { get; set; } = null!;

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("parameters")]
        private InputList<Inputs.SqlWidgetParameterArgs>? _parameters;
        public InputList<Inputs.SqlWidgetParameterArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.SqlWidgetParameterArgs>());
            set => _parameters = value;
        }

        [Input("position")]
        public Input<Inputs.SqlWidgetPositionArgs>? Position { get; set; }

        [Input("text")]
        public Input<string>? Text { get; set; }

        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("visualizationId")]
        public Input<string>? VisualizationId { get; set; }

        [Input("widgetId")]
        public Input<string>? WidgetId { get; set; }

        public SqlWidgetArgs()
        {
        }
        public static new SqlWidgetArgs Empty => new SqlWidgetArgs();
    }

    public sealed class SqlWidgetState : global::Pulumi.ResourceArgs
    {
        [Input("dashboardId")]
        public Input<string>? DashboardId { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("parameters")]
        private InputList<Inputs.SqlWidgetParameterGetArgs>? _parameters;
        public InputList<Inputs.SqlWidgetParameterGetArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.SqlWidgetParameterGetArgs>());
            set => _parameters = value;
        }

        [Input("position")]
        public Input<Inputs.SqlWidgetPositionGetArgs>? Position { get; set; }

        [Input("text")]
        public Input<string>? Text { get; set; }

        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("visualizationId")]
        public Input<string>? VisualizationId { get; set; }

        [Input("widgetId")]
        public Input<string>? WidgetId { get; set; }

        public SqlWidgetState()
        {
        }
        public static new SqlWidgetState Empty => new SqlWidgetState();
    }
}
