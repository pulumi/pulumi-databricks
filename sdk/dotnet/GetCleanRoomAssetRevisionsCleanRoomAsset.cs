// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetCleanRoomAssetRevisionsCleanRoomAsset
    {
        public static Task<GetCleanRoomAssetRevisionsCleanRoomAssetResult> InvokeAsync(GetCleanRoomAssetRevisionsCleanRoomAssetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCleanRoomAssetRevisionsCleanRoomAssetResult>("databricks:index/getCleanRoomAssetRevisionsCleanRoomAsset:getCleanRoomAssetRevisionsCleanRoomAsset", args ?? new GetCleanRoomAssetRevisionsCleanRoomAssetArgs(), options.WithDefaults());

        public static Output<GetCleanRoomAssetRevisionsCleanRoomAssetResult> Invoke(GetCleanRoomAssetRevisionsCleanRoomAssetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCleanRoomAssetRevisionsCleanRoomAssetResult>("databricks:index/getCleanRoomAssetRevisionsCleanRoomAsset:getCleanRoomAssetRevisionsCleanRoomAsset", args ?? new GetCleanRoomAssetRevisionsCleanRoomAssetInvokeArgs(), options.WithDefaults());

        public static Output<GetCleanRoomAssetRevisionsCleanRoomAssetResult> Invoke(GetCleanRoomAssetRevisionsCleanRoomAssetInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCleanRoomAssetRevisionsCleanRoomAssetResult>("databricks:index/getCleanRoomAssetRevisionsCleanRoomAsset:getCleanRoomAssetRevisionsCleanRoomAsset", args ?? new GetCleanRoomAssetRevisionsCleanRoomAssetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCleanRoomAssetRevisionsCleanRoomAssetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (string) - The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
        /// </summary>
        [Input("assetType", required: true)]
        public string AssetType { get; set; } = null!;

        /// <summary>
        /// (string) - The name of the clean room this asset belongs to.
        /// This field is required for create operations and populated by the server for responses
        /// </summary>
        [Input("cleanRoomName")]
        public string? CleanRoomName { get; set; }

        /// <summary>
        /// (CleanRoomAssetForeignTable) - Foreign table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Input("foreignTable")]
        public Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetForeignTableArgs? ForeignTable { get; set; }

        /// <summary>
        /// (CleanRoomAssetForeignTableLocalDetails) - Local details for a foreign that are only available to its owner.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Input("foreignTableLocalDetails")]
        public Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetForeignTableLocalDetailsArgs? ForeignTableLocalDetails { get; set; }

        /// <summary>
        /// A fully qualified name that uniquely identifies the asset within the clean room.
        /// This is also the name displayed in the clean room UI.
        /// 
        /// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
        /// 
        /// For notebooks, the name is the notebook file name.
        /// For jar analyses, the name is the jar analysis name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// (CleanRoomAssetNotebook) - Notebook details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **NOTEBOOK_FILE**
        /// </summary>
        [Input("notebook")]
        public Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetNotebookArgs? Notebook { get; set; }

        /// <summary>
        /// (CleanRoomAssetTable) - Table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Input("table")]
        public Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetTableArgs? Table { get; set; }

        /// <summary>
        /// (CleanRoomAssetTableLocalDetails) - Local details for a table that are only available to its owner.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Input("tableLocalDetails")]
        public Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetTableLocalDetailsArgs? TableLocalDetails { get; set; }

        /// <summary>
        /// (CleanRoomAssetView) - View details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Input("view")]
        public Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetViewArgs? View { get; set; }

        /// <summary>
        /// (CleanRoomAssetViewLocalDetails) - Local details for a view that are only available to its owner.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Input("viewLocalDetails")]
        public Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetViewLocalDetailsArgs? ViewLocalDetails { get; set; }

        /// <summary>
        /// (CleanRoomAssetVolumeLocalDetails) - Local details for a volume that are only available to its owner.
        /// Present if and only if **asset_type** is **VOLUME**
        /// </summary>
        [Input("volumeLocalDetails")]
        public Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetVolumeLocalDetailsArgs? VolumeLocalDetails { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public string? WorkspaceId { get; set; }

        public GetCleanRoomAssetRevisionsCleanRoomAssetArgs()
        {
        }
        public static new GetCleanRoomAssetRevisionsCleanRoomAssetArgs Empty => new GetCleanRoomAssetRevisionsCleanRoomAssetArgs();
    }

    public sealed class GetCleanRoomAssetRevisionsCleanRoomAssetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (string) - The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
        /// </summary>
        [Input("assetType", required: true)]
        public Input<string> AssetType { get; set; } = null!;

        /// <summary>
        /// (string) - The name of the clean room this asset belongs to.
        /// This field is required for create operations and populated by the server for responses
        /// </summary>
        [Input("cleanRoomName")]
        public Input<string>? CleanRoomName { get; set; }

        /// <summary>
        /// (CleanRoomAssetForeignTable) - Foreign table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Input("foreignTable")]
        public Input<Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetForeignTableInputArgs>? ForeignTable { get; set; }

        /// <summary>
        /// (CleanRoomAssetForeignTableLocalDetails) - Local details for a foreign that are only available to its owner.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Input("foreignTableLocalDetails")]
        public Input<Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetForeignTableLocalDetailsInputArgs>? ForeignTableLocalDetails { get; set; }

        /// <summary>
        /// A fully qualified name that uniquely identifies the asset within the clean room.
        /// This is also the name displayed in the clean room UI.
        /// 
        /// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
        /// 
        /// For notebooks, the name is the notebook file name.
        /// For jar analyses, the name is the jar analysis name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// (CleanRoomAssetNotebook) - Notebook details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **NOTEBOOK_FILE**
        /// </summary>
        [Input("notebook")]
        public Input<Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetNotebookInputArgs>? Notebook { get; set; }

        /// <summary>
        /// (CleanRoomAssetTable) - Table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Input("table")]
        public Input<Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetTableInputArgs>? Table { get; set; }

        /// <summary>
        /// (CleanRoomAssetTableLocalDetails) - Local details for a table that are only available to its owner.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Input("tableLocalDetails")]
        public Input<Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetTableLocalDetailsInputArgs>? TableLocalDetails { get; set; }

        /// <summary>
        /// (CleanRoomAssetView) - View details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Input("view")]
        public Input<Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetViewInputArgs>? View { get; set; }

        /// <summary>
        /// (CleanRoomAssetViewLocalDetails) - Local details for a view that are only available to its owner.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Input("viewLocalDetails")]
        public Input<Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetViewLocalDetailsInputArgs>? ViewLocalDetails { get; set; }

        /// <summary>
        /// (CleanRoomAssetVolumeLocalDetails) - Local details for a volume that are only available to its owner.
        /// Present if and only if **asset_type** is **VOLUME**
        /// </summary>
        [Input("volumeLocalDetails")]
        public Input<Inputs.GetCleanRoomAssetRevisionsCleanRoomAssetVolumeLocalDetailsInputArgs>? VolumeLocalDetails { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public GetCleanRoomAssetRevisionsCleanRoomAssetInvokeArgs()
        {
        }
        public static new GetCleanRoomAssetRevisionsCleanRoomAssetInvokeArgs Empty => new GetCleanRoomAssetRevisionsCleanRoomAssetInvokeArgs();
    }


    [OutputType]
    public sealed class GetCleanRoomAssetRevisionsCleanRoomAssetResult
    {
        /// <summary>
        /// (integer) - When the asset is added to the clean room, in epoch milliseconds
        /// </summary>
        public readonly int AddedAt;
        /// <summary>
        /// (string) - The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
        /// </summary>
        public readonly string AssetType;
        /// <summary>
        /// (string) - The name of the clean room this asset belongs to.
        /// This field is required for create operations and populated by the server for responses
        /// </summary>
        public readonly string? CleanRoomName;
        /// <summary>
        /// (CleanRoomAssetForeignTable) - Foreign table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetForeignTableResult? ForeignTable;
        /// <summary>
        /// (CleanRoomAssetForeignTableLocalDetails) - Local details for a foreign that are only available to its owner.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetForeignTableLocalDetailsResult? ForeignTableLocalDetails;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (string) - The name of the partition column
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (CleanRoomAssetNotebook) - Notebook details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **NOTEBOOK_FILE**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetNotebookResult? Notebook;
        /// <summary>
        /// (string) - The alias of the collaborator who owns this asset
        /// </summary>
        public readonly string OwnerCollaboratorAlias;
        /// <summary>
        /// (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// (CleanRoomAssetTable) - Table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetTableResult? Table;
        /// <summary>
        /// (CleanRoomAssetTableLocalDetails) - Local details for a table that are only available to its owner.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetTableLocalDetailsResult? TableLocalDetails;
        /// <summary>
        /// (CleanRoomAssetView) - View details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetViewResult? View;
        /// <summary>
        /// (CleanRoomAssetViewLocalDetails) - Local details for a view that are only available to its owner.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetViewLocalDetailsResult? ViewLocalDetails;
        /// <summary>
        /// (CleanRoomAssetVolumeLocalDetails) - Local details for a volume that are only available to its owner.
        /// Present if and only if **asset_type** is **VOLUME**
        /// </summary>
        public readonly Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetVolumeLocalDetailsResult? VolumeLocalDetails;
        public readonly string? WorkspaceId;

        [OutputConstructor]
        private GetCleanRoomAssetRevisionsCleanRoomAssetResult(
            int addedAt,

            string assetType,

            string? cleanRoomName,

            Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetForeignTableResult? foreignTable,

            Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetForeignTableLocalDetailsResult? foreignTableLocalDetails,

            string id,

            string name,

            Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetNotebookResult? notebook,

            string ownerCollaboratorAlias,

            string status,

            Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetTableResult? table,

            Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetTableLocalDetailsResult? tableLocalDetails,

            Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetViewResult? view,

            Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetViewLocalDetailsResult? viewLocalDetails,

            Outputs.GetCleanRoomAssetRevisionsCleanRoomAssetVolumeLocalDetailsResult? volumeLocalDetails,

            string? workspaceId)
        {
            AddedAt = addedAt;
            AssetType = assetType;
            CleanRoomName = cleanRoomName;
            ForeignTable = foreignTable;
            ForeignTableLocalDetails = foreignTableLocalDetails;
            Id = id;
            Name = name;
            Notebook = notebook;
            OwnerCollaboratorAlias = ownerCollaboratorAlias;
            Status = status;
            Table = table;
            TableLocalDetails = tableLocalDetails;
            View = view;
            ViewLocalDetails = viewLocalDetails;
            VolumeLocalDetails = volumeLocalDetails;
            WorkspaceId = workspaceId;
        }
    }
}
