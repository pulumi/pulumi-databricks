// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetDatabaseDatabaseCatalog
    {
        /// <summary>
        /// This data source can be used to get a single Database Catalog.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Referring to a Database Catalog by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetDatabaseDatabaseCatalog.Invoke(new()
        ///     {
        ///         Name = "my-database-catalog",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDatabaseDatabaseCatalogResult> InvokeAsync(GetDatabaseDatabaseCatalogArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseDatabaseCatalogResult>("databricks:index/getDatabaseDatabaseCatalog:getDatabaseDatabaseCatalog", args ?? new GetDatabaseDatabaseCatalogArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to get a single Database Catalog.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Referring to a Database Catalog by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetDatabaseDatabaseCatalog.Invoke(new()
        ///     {
        ///         Name = "my-database-catalog",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseDatabaseCatalogResult> Invoke(GetDatabaseDatabaseCatalogInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseDatabaseCatalogResult>("databricks:index/getDatabaseDatabaseCatalog:getDatabaseDatabaseCatalog", args ?? new GetDatabaseDatabaseCatalogInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to get a single Database Catalog.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Referring to a Database Catalog by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetDatabaseDatabaseCatalog.Invoke(new()
        ///     {
        ///         Name = "my-database-catalog",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseDatabaseCatalogResult> Invoke(GetDatabaseDatabaseCatalogInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseDatabaseCatalogResult>("databricks:index/getDatabaseDatabaseCatalog:getDatabaseDatabaseCatalog", args ?? new GetDatabaseDatabaseCatalogInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseDatabaseCatalogArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (boolean)
        /// </summary>
        [Input("createDatabaseIfNotExists")]
        public bool? CreateDatabaseIfNotExists { get; set; }

        /// <summary>
        /// (string) - The name of the DatabaseInstance housing the database
        /// </summary>
        [Input("databaseInstanceName", required: true)]
        public string DatabaseInstanceName { get; set; } = null!;

        /// <summary>
        /// (string) - The name of the database (in a instance) associated with the catalog
        /// </summary>
        [Input("databaseName", required: true)]
        public string DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the catalog in UC
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetDatabaseDatabaseCatalogArgs()
        {
        }
        public static new GetDatabaseDatabaseCatalogArgs Empty => new GetDatabaseDatabaseCatalogArgs();
    }

    public sealed class GetDatabaseDatabaseCatalogInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (boolean)
        /// </summary>
        [Input("createDatabaseIfNotExists")]
        public Input<bool>? CreateDatabaseIfNotExists { get; set; }

        /// <summary>
        /// (string) - The name of the DatabaseInstance housing the database
        /// </summary>
        [Input("databaseInstanceName", required: true)]
        public Input<string> DatabaseInstanceName { get; set; } = null!;

        /// <summary>
        /// (string) - The name of the database (in a instance) associated with the catalog
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the catalog in UC
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetDatabaseDatabaseCatalogInvokeArgs()
        {
        }
        public static new GetDatabaseDatabaseCatalogInvokeArgs Empty => new GetDatabaseDatabaseCatalogInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseDatabaseCatalogResult
    {
        /// <summary>
        /// (boolean)
        /// </summary>
        public readonly bool CreateDatabaseIfNotExists;
        /// <summary>
        /// (string) - The name of the DatabaseInstance housing the database
        /// </summary>
        public readonly string DatabaseInstanceName;
        /// <summary>
        /// (string) - The name of the database (in a instance) associated with the catalog
        /// </summary>
        public readonly string DatabaseName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (string) - The name of the catalog in UC
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string Uid;

        [OutputConstructor]
        private GetDatabaseDatabaseCatalogResult(
            bool createDatabaseIfNotExists,

            string databaseInstanceName,

            string databaseName,

            string id,

            string name,

            string uid)
        {
            CreateDatabaseIfNotExists = createDatabaseIfNotExists;
            DatabaseInstanceName = databaseInstanceName;
            DatabaseName = databaseName;
            Id = id;
            Name = name;
            Uid = uid;
        }
    }
}
