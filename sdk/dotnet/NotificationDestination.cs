// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// This resource allows you to manage [Notification Destinations](https://docs.databricks.com/api/workspace/notificationdestinations). Notification destinations are used to send notifications for query alerts and jobs to destinations outside of Databricks. Only workspace admins can create, update, and delete notification destinations.
    /// 
    /// ## Example Usage
    /// 
    /// `Email` notification destination:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ndresource = new Databricks.NotificationDestination("ndresource", new()
    ///     {
    ///         DisplayName = "Notification Destination",
    ///         Config = new Databricks.Inputs.NotificationDestinationConfigArgs
    ///         {
    ///             Email = new Databricks.Inputs.NotificationDestinationConfigEmailArgs
    ///             {
    ///                 Addresses = new[]
    ///                 {
    ///                     "abc@gmail.com",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// `Slack` notification destination:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ndresource = new Databricks.NotificationDestination("ndresource", new()
    ///     {
    ///         DisplayName = "Notification Destination",
    ///         Config = new Databricks.Inputs.NotificationDestinationConfigArgs
    ///         {
    ///             Slack = new Databricks.Inputs.NotificationDestinationConfigSlackArgs
    ///             {
    ///                 Url = "https://hooks.slack.com/services/...",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// `PagerDuty` notification destination:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ndresource = new Databricks.NotificationDestination("ndresource", new()
    ///     {
    ///         DisplayName = "Notification Destination",
    ///         Config = new Databricks.Inputs.NotificationDestinationConfigArgs
    ///         {
    ///             Pagerduty = new Databricks.Inputs.NotificationDestinationConfigPagerdutyArgs
    ///             {
    ///                 IntegrationKey = "xxxxxx",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// `Microsoft Teams` notification destination:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ndresource = new Databricks.NotificationDestination("ndresource", new()
    ///     {
    ///         DisplayName = "Notification Destination",
    ///         Config = new Databricks.Inputs.NotificationDestinationConfigArgs
    ///         {
    ///             MicrosoftTeams = new Databricks.Inputs.NotificationDestinationConfigMicrosoftTeamsArgs
    ///             {
    ///                 Url = "https://outlook.office.com/webhook/...",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// `Generic Webhook` notification destination:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ndresource = new Databricks.NotificationDestination("ndresource", new()
    ///     {
    ///         DisplayName = "Notification Destination",
    ///         Config = new Databricks.Inputs.NotificationDestinationConfigArgs
    ///         {
    ///             GenericWebhook = new Databricks.Inputs.NotificationDestinationConfigGenericWebhookArgs
    ///             {
    ///                 Url = "https://example.com/webhook",
    ///                 Username = "username",
    ///                 Password = "password",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/notificationDestination:NotificationDestination")]
    public partial class NotificationDestination : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration of the Notification Destination. It must contain exactly one of the following blocks:
        /// </summary>
        [Output("config")]
        public Output<Outputs.NotificationDestinationConfig?> Config { get; private set; } = null!;

        /// <summary>
        /// the type of Notification Destination.
        /// </summary>
        [Output("destinationType")]
        public Output<string> DestinationType { get; private set; } = null!;

        /// <summary>
        /// The display name of the Notification Destination.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationDestination resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationDestination(string name, NotificationDestinationArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/notificationDestination:NotificationDestination", name, args ?? new NotificationDestinationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationDestination(string name, Input<string> id, NotificationDestinationState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/notificationDestination:NotificationDestination", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationDestination resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationDestination Get(string name, Input<string> id, NotificationDestinationState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationDestination(name, id, state, options);
        }
    }

    public sealed class NotificationDestinationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration of the Notification Destination. It must contain exactly one of the following blocks:
        /// </summary>
        [Input("config")]
        public Input<Inputs.NotificationDestinationConfigArgs>? Config { get; set; }

        /// <summary>
        /// the type of Notification Destination.
        /// </summary>
        [Input("destinationType")]
        public Input<string>? DestinationType { get; set; }

        /// <summary>
        /// The display name of the Notification Destination.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        public NotificationDestinationArgs()
        {
        }
        public static new NotificationDestinationArgs Empty => new NotificationDestinationArgs();
    }

    public sealed class NotificationDestinationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration of the Notification Destination. It must contain exactly one of the following blocks:
        /// </summary>
        [Input("config")]
        public Input<Inputs.NotificationDestinationConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// the type of Notification Destination.
        /// </summary>
        [Input("destinationType")]
        public Input<string>? DestinationType { get; set; }

        /// <summary>
        /// The display name of the Notification Destination.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        public NotificationDestinationState()
        {
        }
        public static new NotificationDestinationState Empty => new NotificationDestinationState();
    }
}
