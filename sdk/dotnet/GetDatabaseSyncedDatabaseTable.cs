// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetDatabaseSyncedDatabaseTable
    {
        /// <summary>
        /// This data source can be used to get a single Synced Database Table.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Referring to a Database Instance by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetDatabaseSyncedDatabaseTable.Invoke(new()
        ///     {
        ///         Name = "my_database_catalog.public.synced_table",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDatabaseSyncedDatabaseTableResult> InvokeAsync(GetDatabaseSyncedDatabaseTableArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseSyncedDatabaseTableResult>("databricks:index/getDatabaseSyncedDatabaseTable:getDatabaseSyncedDatabaseTable", args ?? new GetDatabaseSyncedDatabaseTableArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to get a single Synced Database Table.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Referring to a Database Instance by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetDatabaseSyncedDatabaseTable.Invoke(new()
        ///     {
        ///         Name = "my_database_catalog.public.synced_table",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseSyncedDatabaseTableResult> Invoke(GetDatabaseSyncedDatabaseTableInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseSyncedDatabaseTableResult>("databricks:index/getDatabaseSyncedDatabaseTable:getDatabaseSyncedDatabaseTable", args ?? new GetDatabaseSyncedDatabaseTableInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to get a single Synced Database Table.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Referring to a Database Instance by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Databricks.GetDatabaseSyncedDatabaseTable.Invoke(new()
        ///     {
        ///         Name = "my_database_catalog.public.synced_table",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseSyncedDatabaseTableResult> Invoke(GetDatabaseSyncedDatabaseTableInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseSyncedDatabaseTableResult>("databricks:index/getDatabaseSyncedDatabaseTable:getDatabaseSyncedDatabaseTable", args ?? new GetDatabaseSyncedDatabaseTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseSyncedDatabaseTableArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
        /// This is optional when creating synced database tables in registered catalogs. If this field is specified
        /// when creating synced database tables in registered catalogs, the database instance name MUST
        /// match that of the registered catalog (or the request will be rejected)
        /// </summary>
        [Input("databaseInstanceName")]
        public string? DatabaseInstanceName { get; set; }

        /// <summary>
        /// (string) - Target Postgres database object (logical database) name for this table.
        /// </summary>
        [Input("logicalDatabaseName")]
        public string? LogicalDatabaseName { get; set; }

        /// <summary>
        /// Full three-part (catalog, schema, table) name of the table
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// (SyncedTableSpec)
        /// </summary>
        [Input("spec")]
        public Inputs.GetDatabaseSyncedDatabaseTableSpecArgs? Spec { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public string? WorkspaceId { get; set; }

        public GetDatabaseSyncedDatabaseTableArgs()
        {
        }
        public static new GetDatabaseSyncedDatabaseTableArgs Empty => new GetDatabaseSyncedDatabaseTableArgs();
    }

    public sealed class GetDatabaseSyncedDatabaseTableInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
        /// This is optional when creating synced database tables in registered catalogs. If this field is specified
        /// when creating synced database tables in registered catalogs, the database instance name MUST
        /// match that of the registered catalog (or the request will be rejected)
        /// </summary>
        [Input("databaseInstanceName")]
        public Input<string>? DatabaseInstanceName { get; set; }

        /// <summary>
        /// (string) - Target Postgres database object (logical database) name for this table.
        /// </summary>
        [Input("logicalDatabaseName")]
        public Input<string>? LogicalDatabaseName { get; set; }

        /// <summary>
        /// Full three-part (catalog, schema, table) name of the table
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// (SyncedTableSpec)
        /// </summary>
        [Input("spec")]
        public Input<Inputs.GetDatabaseSyncedDatabaseTableSpecInputArgs>? Spec { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public GetDatabaseSyncedDatabaseTableInvokeArgs()
        {
        }
        public static new GetDatabaseSyncedDatabaseTableInvokeArgs Empty => new GetDatabaseSyncedDatabaseTableInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseSyncedDatabaseTableResult
    {
        /// <summary>
        /// (SyncedTableStatus) - Synced Table data synchronization status
        /// </summary>
        public readonly Outputs.GetDatabaseSyncedDatabaseTableDataSynchronizationStatusResult DataSynchronizationStatus;
        /// <summary>
        /// (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
        /// This is optional when creating synced database tables in registered catalogs. If this field is specified
        /// when creating synced database tables in registered catalogs, the database instance name MUST
        /// match that of the registered catalog (or the request will be rejected)
        /// </summary>
        public readonly string DatabaseInstanceName;
        /// <summary>
        /// (string) - The name of the database instance that this table is registered to. This field is always returned, and for
        /// tables inside database catalogs is inferred database instance associated with the catalog
        /// </summary>
        public readonly string EffectiveDatabaseInstanceName;
        /// <summary>
        /// (string) - The name of the logical database that this table is registered to
        /// </summary>
        public readonly string EffectiveLogicalDatabaseName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (string) - Target Postgres database object (logical database) name for this table.
        /// </summary>
        public readonly string LogicalDatabaseName;
        /// <summary>
        /// (string) - Full three-part (catalog, schema, table) name of the table
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (SyncedTableSpec)
        /// </summary>
        public readonly Outputs.GetDatabaseSyncedDatabaseTableSpecResult? Spec;
        /// <summary>
        /// (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
        /// state of the data synchronization pipeline (i.e. the table may be in "ACTIVE" but the pipeline
        /// may be in "PROVISIONING" as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
        /// </summary>
        public readonly string UnityCatalogProvisioningState;
        public readonly string? WorkspaceId;

        [OutputConstructor]
        private GetDatabaseSyncedDatabaseTableResult(
            Outputs.GetDatabaseSyncedDatabaseTableDataSynchronizationStatusResult dataSynchronizationStatus,

            string databaseInstanceName,

            string effectiveDatabaseInstanceName,

            string effectiveLogicalDatabaseName,

            string id,

            string logicalDatabaseName,

            string name,

            Outputs.GetDatabaseSyncedDatabaseTableSpecResult? spec,

            string unityCatalogProvisioningState,

            string? workspaceId)
        {
            DataSynchronizationStatus = dataSynchronizationStatus;
            DatabaseInstanceName = databaseInstanceName;
            EffectiveDatabaseInstanceName = effectiveDatabaseInstanceName;
            EffectiveLogicalDatabaseName = effectiveLogicalDatabaseName;
            Id = id;
            LogicalDatabaseName = logicalDatabaseName;
            Name = name;
            Spec = spec;
            UnityCatalogProvisioningState = unityCatalogProvisioningState;
            WorkspaceId = workspaceId;
        }
    }
}
