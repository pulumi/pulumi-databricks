// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// &gt; **Public Preview** This feature is in [Public Preview](https://docs.databricks.com/release-notes/release-types.html).
    /// 
    /// &gt; **Note** This resource could be only used with workspace-level provider!
    /// 
    /// Manages system tables enablement. System tables are a Databricks-hosted analytical store of your accountâ€™s operational data. System tables can be used for historical observability across your account. System tables must be enabled by an account admin.
    /// 
    /// ## Example Usage
    /// 
    /// Enable the system schema `access`
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Databricks.SystemSchema("this", new()
    ///     {
    ///         Schema = "access",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported by the metastore id and schema name bash
    /// 
    /// ```sh
    ///  $ pulumi import databricks:index/systemSchema:SystemSchema this &lt;metastore_id&gt;|&lt;schema_name&gt;
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/systemSchema:SystemSchema")]
    public partial class SystemSchema : global::Pulumi.CustomResource
    {
        [Output("metastoreId")]
        public Output<string> MetastoreId { get; private set; } = null!;

        /// <summary>
        /// Full name of the system schema.
        /// </summary>
        [Output("schema")]
        public Output<string?> Schema { get; private set; } = null!;

        /// <summary>
        /// The current state of enablement for the system schema.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a SystemSchema resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SystemSchema(string name, SystemSchemaArgs? args = null, CustomResourceOptions? options = null)
            : base("databricks:index/systemSchema:SystemSchema", name, args ?? new SystemSchemaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SystemSchema(string name, Input<string> id, SystemSchemaState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/systemSchema:SystemSchema", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SystemSchema resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SystemSchema Get(string name, Input<string> id, SystemSchemaState? state = null, CustomResourceOptions? options = null)
        {
            return new SystemSchema(name, id, state, options);
        }
    }

    public sealed class SystemSchemaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Full name of the system schema.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// The current state of enablement for the system schema.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public SystemSchemaArgs()
        {
        }
        public static new SystemSchemaArgs Empty => new SystemSchemaArgs();
    }

    public sealed class SystemSchemaState : global::Pulumi.ResourceArgs
    {
        [Input("metastoreId")]
        public Input<string>? MetastoreId { get; set; }

        /// <summary>
        /// Full name of the system schema.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// The current state of enablement for the system schema.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public SystemSchemaState()
        {
        }
        public static new SystemSchemaState Empty => new SystemSchemaState();
    }
}
