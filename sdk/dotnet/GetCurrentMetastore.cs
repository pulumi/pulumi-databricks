// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetCurrentMetastore
    {
        public static Task<GetCurrentMetastoreResult> InvokeAsync(GetCurrentMetastoreArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCurrentMetastoreResult>("databricks:index/getCurrentMetastore:getCurrentMetastore", args ?? new GetCurrentMetastoreArgs(), options.WithDefaults());

        public static Output<GetCurrentMetastoreResult> Invoke(GetCurrentMetastoreInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCurrentMetastoreResult>("databricks:index/getCurrentMetastore:getCurrentMetastore", args ?? new GetCurrentMetastoreInvokeArgs(), options.WithDefaults());

        public static Output<GetCurrentMetastoreResult> Invoke(GetCurrentMetastoreInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCurrentMetastoreResult>("databricks:index/getCurrentMetastore:getCurrentMetastore", args ?? new GetCurrentMetastoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCurrentMetastoreArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("metastoreInfo")]
        public Inputs.GetCurrentMetastoreMetastoreInfoArgs? MetastoreInfo { get; set; }

        public GetCurrentMetastoreArgs()
        {
        }
        public static new GetCurrentMetastoreArgs Empty => new GetCurrentMetastoreArgs();
    }

    public sealed class GetCurrentMetastoreInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("metastoreInfo")]
        public Input<Inputs.GetCurrentMetastoreMetastoreInfoInputArgs>? MetastoreInfo { get; set; }

        public GetCurrentMetastoreInvokeArgs()
        {
        }
        public static new GetCurrentMetastoreInvokeArgs Empty => new GetCurrentMetastoreInvokeArgs();
    }


    [OutputType]
    public sealed class GetCurrentMetastoreResult
    {
        public readonly string Id;
        public readonly Outputs.GetCurrentMetastoreMetastoreInfoResult MetastoreInfo;

        [OutputConstructor]
        private GetCurrentMetastoreResult(
            string id,

            Outputs.GetCurrentMetastoreMetastoreInfoResult metastoreInfo)
        {
            Id = id;
            MetastoreInfo = metastoreInfo;
        }
    }
}
