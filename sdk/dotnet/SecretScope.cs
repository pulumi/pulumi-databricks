// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// Sometimes accessing data requires that you authenticate to external data sources through JDBC. Instead of directly entering your credentials into a notebook, use Databricks secrets to store your credentials and reference them in notebooks and jobs. Please consult [Secrets User Guide](https://docs.databricks.com/security/secrets/index.html#secrets-user-guide) for more details.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Databricks.SecretScope("this", new()
    ///     {
    ///         Name = "terraform-demo-scope",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Related Resources
    /// 
    /// The following resources are often used in the same context:
    /// 
    /// * End to end workspace management guide.
    /// * databricks.Notebook to manage [Databricks Notebooks](https://docs.databricks.com/notebooks/index.html).
    /// * databricks.Repo to manage [Databricks Repos](https://docs.databricks.com/repos.html).
    /// * databricks.Secret to manage [secrets](https://docs.databricks.com/security/secrets/index.html#secrets-user-guide) in Databricks workspace.
    /// * databricks.SecretAcl to manage access to [secrets](https://docs.databricks.com/security/secrets/index.html#secrets-user-guide) in Databricks workspace.
    /// 
    /// ## Import
    /// 
    /// The secret resource scope can be imported using the scope name. `initial_manage_principal` state won't be imported, because the underlying API doesn't include it in the response.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/secretScope:SecretScope object &lt;scopeName&gt;
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/secretScope:SecretScope")]
    public partial class SecretScope : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Either `DATABRICKS` or `AZURE_KEYVAULT`
        /// </summary>
        [Output("backendType")]
        public Output<string> BackendType { get; private set; } = null!;

        /// <summary>
        /// The principal with the only possible value `users` that is initially granted `MANAGE` permission to the created scope.  If it's omitted, then the databricks.SecretAcl with `MANAGE` permission applied to the scope is assigned to the API request issuer's user identity (see [documentation](https://docs.databricks.com/dev-tools/api/latest/secrets.html#create-secret-scope)). This part of the state cannot be imported.
        /// </summary>
        [Output("initialManagePrincipal")]
        public Output<string?> InitialManagePrincipal { get; private set; } = null!;

        [Output("keyvaultMetadata")]
        public Output<Outputs.SecretScopeKeyvaultMetadata?> KeyvaultMetadata { get; private set; } = null!;

        /// <summary>
        /// Scope name requested by the user. Must be unique within a workspace. Must consist of alphanumeric characters, dashes, underscores, and periods, and may not exceed 128 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a SecretScope resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretScope(string name, SecretScopeArgs? args = null, CustomResourceOptions? options = null)
            : base("databricks:index/secretScope:SecretScope", name, args ?? new SecretScopeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecretScope(string name, Input<string> id, SecretScopeState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/secretScope:SecretScope", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretScope resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretScope Get(string name, Input<string> id, SecretScopeState? state = null, CustomResourceOptions? options = null)
        {
            return new SecretScope(name, id, state, options);
        }
    }

    public sealed class SecretScopeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Either `DATABRICKS` or `AZURE_KEYVAULT`
        /// </summary>
        [Input("backendType")]
        public Input<string>? BackendType { get; set; }

        /// <summary>
        /// The principal with the only possible value `users` that is initially granted `MANAGE` permission to the created scope.  If it's omitted, then the databricks.SecretAcl with `MANAGE` permission applied to the scope is assigned to the API request issuer's user identity (see [documentation](https://docs.databricks.com/dev-tools/api/latest/secrets.html#create-secret-scope)). This part of the state cannot be imported.
        /// </summary>
        [Input("initialManagePrincipal")]
        public Input<string>? InitialManagePrincipal { get; set; }

        [Input("keyvaultMetadata")]
        public Input<Inputs.SecretScopeKeyvaultMetadataArgs>? KeyvaultMetadata { get; set; }

        /// <summary>
        /// Scope name requested by the user. Must be unique within a workspace. Must consist of alphanumeric characters, dashes, underscores, and periods, and may not exceed 128 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public SecretScopeArgs()
        {
        }
        public static new SecretScopeArgs Empty => new SecretScopeArgs();
    }

    public sealed class SecretScopeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Either `DATABRICKS` or `AZURE_KEYVAULT`
        /// </summary>
        [Input("backendType")]
        public Input<string>? BackendType { get; set; }

        /// <summary>
        /// The principal with the only possible value `users` that is initially granted `MANAGE` permission to the created scope.  If it's omitted, then the databricks.SecretAcl with `MANAGE` permission applied to the scope is assigned to the API request issuer's user identity (see [documentation](https://docs.databricks.com/dev-tools/api/latest/secrets.html#create-secret-scope)). This part of the state cannot be imported.
        /// </summary>
        [Input("initialManagePrincipal")]
        public Input<string>? InitialManagePrincipal { get; set; }

        [Input("keyvaultMetadata")]
        public Input<Inputs.SecretScopeKeyvaultMetadataGetArgs>? KeyvaultMetadata { get; set; }

        /// <summary>
        /// Scope name requested by the user. Must be unique within a workspace. Must consist of alphanumeric characters, dashes, underscores, and periods, and may not exceed 128 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public SecretScopeState()
        {
        }
        public static new SecretScopeState Empty => new SecretScopeState();
    }
}
