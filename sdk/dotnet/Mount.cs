// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    [DatabricksResourceType("databricks:index/mount:Mount")]
    public partial class Mount : global::Pulumi.CustomResource
    {
        [Output("abfs")]
        public Output<Outputs.MountAbfs?> Abfs { get; private set; } = null!;

        [Output("adl")]
        public Output<Outputs.MountAdl?> Adl { get; private set; } = null!;

        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        [Output("encryptionType")]
        public Output<string?> EncryptionType { get; private set; } = null!;

        [Output("extraConfigs")]
        public Output<ImmutableDictionary<string, string>?> ExtraConfigs { get; private set; } = null!;

        [Output("gs")]
        public Output<Outputs.MountGs?> Gs { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("resourceId")]
        public Output<string?> ResourceId { get; private set; } = null!;

        [Output("s3")]
        public Output<Outputs.MountS3?> S3 { get; private set; } = null!;

        [Output("source")]
        public Output<string> Source { get; private set; } = null!;

        [Output("uri")]
        public Output<string?> Uri { get; private set; } = null!;

        [Output("wasb")]
        public Output<Outputs.MountWasb?> Wasb { get; private set; } = null!;


        /// <summary>
        /// Create a Mount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Mount(string name, MountArgs? args = null, CustomResourceOptions? options = null)
            : base("databricks:index/mount:Mount", name, args ?? new MountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Mount(string name, Input<string> id, MountState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/mount:Mount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Mount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Mount Get(string name, Input<string> id, MountState? state = null, CustomResourceOptions? options = null)
        {
            return new Mount(name, id, state, options);
        }
    }

    public sealed class MountArgs : global::Pulumi.ResourceArgs
    {
        [Input("abfs")]
        public Input<Inputs.MountAbfsArgs>? Abfs { get; set; }

        [Input("adl")]
        public Input<Inputs.MountAdlArgs>? Adl { get; set; }

        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("encryptionType")]
        public Input<string>? EncryptionType { get; set; }

        [Input("extraConfigs")]
        private InputMap<string>? _extraConfigs;
        public InputMap<string> ExtraConfigs
        {
            get => _extraConfigs ?? (_extraConfigs = new InputMap<string>());
            set => _extraConfigs = value;
        }

        [Input("gs")]
        public Input<Inputs.MountGsArgs>? Gs { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        [Input("s3")]
        public Input<Inputs.MountS3Args>? S3 { get; set; }

        [Input("uri")]
        public Input<string>? Uri { get; set; }

        [Input("wasb")]
        public Input<Inputs.MountWasbArgs>? Wasb { get; set; }

        public MountArgs()
        {
        }
        public static new MountArgs Empty => new MountArgs();
    }

    public sealed class MountState : global::Pulumi.ResourceArgs
    {
        [Input("abfs")]
        public Input<Inputs.MountAbfsGetArgs>? Abfs { get; set; }

        [Input("adl")]
        public Input<Inputs.MountAdlGetArgs>? Adl { get; set; }

        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("encryptionType")]
        public Input<string>? EncryptionType { get; set; }

        [Input("extraConfigs")]
        private InputMap<string>? _extraConfigs;
        public InputMap<string> ExtraConfigs
        {
            get => _extraConfigs ?? (_extraConfigs = new InputMap<string>());
            set => _extraConfigs = value;
        }

        [Input("gs")]
        public Input<Inputs.MountGsGetArgs>? Gs { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        [Input("s3")]
        public Input<Inputs.MountS3GetArgs>? S3 { get; set; }

        [Input("source")]
        public Input<string>? Source { get; set; }

        [Input("uri")]
        public Input<string>? Uri { get; set; }

        [Input("wasb")]
        public Input<Inputs.MountWasbGetArgs>? Wasb { get; set; }

        public MountState()
        {
        }
        public static new MountState Empty => new MountState();
    }
}
