// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetUser
    {
        /// <summary>
        /// &gt; **Note** If you have a fully automated setup with workspaces created by databricks_mws_workspaces, please make sure to add depends_on attribute in order to prevent _default auth: cannot configure default credentials_ errors.
        /// 
        /// Retrieves information about databricks_user.
        /// 
        /// ## Example Usage
        /// 
        /// Adding user to administrative group
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var admins = Databricks.GetGroup.Invoke(new()
        ///     {
        ///         DisplayName = "admins",
        ///     });
        /// 
        ///     var me = Databricks.GetUser.Invoke(new()
        ///     {
        ///         UserName = "me@example.com",
        ///     });
        /// 
        ///     var myMemberA = new Databricks.GroupMember("my_member_a", new()
        ///     {
        ///         GroupId = admins.Apply(getGroupResult =&gt; getGroupResult.Id),
        ///         MemberId = me.Apply(getUserResult =&gt; getUserResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ## Related Resources
        /// 
        /// The following resources are used in the same context:
        /// 
        /// - End to end workspace management guide.
        /// - databricks.getCurrentUser data to retrieve information about databricks.User or databricks_service_principal, that is calling Databricks REST API.
        /// - databricks.Group to manage [groups in Databricks Workspace](https://docs.databricks.com/administration-guide/users-groups/groups.html) or [Account Console](https://accounts.cloud.databricks.com/) (for AWS deployments).
        /// - databricks.Group data to retrieve information about databricks.Group members, entitlements and instance profiles.
        /// - databricks.GroupInstanceProfile to attach databricks.InstanceProfile (AWS) to databricks_group.
        /// - databricks.GroupMember to attach users and groups as group members.
        /// - databricks.Permissions to manage [access control](https://docs.databricks.com/security/access-control/index.html) in Databricks workspace.
        /// - databricks.User to [manage users](https://docs.databricks.com/administration-guide/users-groups/users.html), that could be added to databricks.Group within the workspace.
        /// - databricks.UserInstanceProfile to attach databricks.InstanceProfile (AWS) to databricks_user.
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("databricks:index/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **Note** If you have a fully automated setup with workspaces created by databricks_mws_workspaces, please make sure to add depends_on attribute in order to prevent _default auth: cannot configure default credentials_ errors.
        /// 
        /// Retrieves information about databricks_user.
        /// 
        /// ## Example Usage
        /// 
        /// Adding user to administrative group
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var admins = Databricks.GetGroup.Invoke(new()
        ///     {
        ///         DisplayName = "admins",
        ///     });
        /// 
        ///     var me = Databricks.GetUser.Invoke(new()
        ///     {
        ///         UserName = "me@example.com",
        ///     });
        /// 
        ///     var myMemberA = new Databricks.GroupMember("my_member_a", new()
        ///     {
        ///         GroupId = admins.Apply(getGroupResult =&gt; getGroupResult.Id),
        ///         MemberId = me.Apply(getUserResult =&gt; getUserResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ## Related Resources
        /// 
        /// The following resources are used in the same context:
        /// 
        /// - End to end workspace management guide.
        /// - databricks.getCurrentUser data to retrieve information about databricks.User or databricks_service_principal, that is calling Databricks REST API.
        /// - databricks.Group to manage [groups in Databricks Workspace](https://docs.databricks.com/administration-guide/users-groups/groups.html) or [Account Console](https://accounts.cloud.databricks.com/) (for AWS deployments).
        /// - databricks.Group data to retrieve information about databricks.Group members, entitlements and instance profiles.
        /// - databricks.GroupInstanceProfile to attach databricks.InstanceProfile (AWS) to databricks_group.
        /// - databricks.GroupMember to attach users and groups as group members.
        /// - databricks.Permissions to manage [access control](https://docs.databricks.com/security/access-control/index.html) in Databricks workspace.
        /// - databricks.User to [manage users](https://docs.databricks.com/administration-guide/users-groups/users.html), that could be added to databricks.Group within the workspace.
        /// - databricks.UserInstanceProfile to attach databricks.InstanceProfile (AWS) to databricks_user.
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("databricks:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the user.
        /// </summary>
        [Input("userId")]
        public string? UserId { get; set; }

        /// <summary>
        /// User name of the user. The user must exist before this resource can be planned.
        /// </summary>
        [Input("userName")]
        public string? UserName { get; set; }

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the user.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        /// <summary>
        /// User name of the user. The user must exist before this resource can be planned.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// identifier for use in databricks_access_control_rule_set, e.g. `users/mr.foo@example.com`.
        /// </summary>
        public readonly string AclPrincipalId;
        /// <summary>
        /// Alphanumeric representation of user local name. e.g. `mr_foo`.
        /// </summary>
        public readonly string Alphanumeric;
        public readonly string ApplicationId;
        /// <summary>
        /// Display name of the user, e.g. `Mr Foo`.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// ID of the user in an external identity provider.
        /// </summary>
        public readonly string ExternalId;
        /// <summary>
        /// Home folder of the user, e.g. `/Users/mr.foo@example.com`.
        /// </summary>
        public readonly string Home;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Personal Repos location of the user, e.g. `/Repos/mr.foo@example.com`.
        /// </summary>
        public readonly string Repos;
        public readonly string? UserId;
        /// <summary>
        /// Name of the user, e.g. `mr.foo@example.com`.
        /// </summary>
        public readonly string? UserName;

        [OutputConstructor]
        private GetUserResult(
            string aclPrincipalId,

            string alphanumeric,

            string applicationId,

            string displayName,

            string externalId,

            string home,

            string id,

            string repos,

            string? userId,

            string? userName)
        {
            AclPrincipalId = aclPrincipalId;
            Alphanumeric = alphanumeric;
            ApplicationId = applicationId;
            DisplayName = displayName;
            ExternalId = externalId;
            Home = home;
            Id = id;
            Repos = repos;
            UserId = userId;
            UserName = userName;
        }
    }
}
