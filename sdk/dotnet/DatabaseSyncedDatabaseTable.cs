// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// Lakebase Synced Database Tables are Postgres tables automatically synced from a source table inside Unity Catalog.
    /// They can be used to serve realtime queries without the operational overhead of managing ETL pipelines.
    /// 
    /// Synced Database Tables can be configured inside either Database Catalogs or Standard Catalogs. Multiple
    /// Synced Database Tables can be bin packed inside a single pipeline to optimize costs.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// As of Pulumi v1.5, resources can be imported through configuration.
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   id = name
    /// 
    ///   to = databricks_database_synced_database_table.this
    /// 
    /// }
    /// 
    /// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/databaseSyncedDatabaseTable:DatabaseSyncedDatabaseTable databricks_database_synced_database_table name
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/databaseSyncedDatabaseTable:DatabaseSyncedDatabaseTable")]
    public partial class DatabaseSyncedDatabaseTable : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (SyncedTableStatus) - Synced Table data synchronization status
        /// </summary>
        [Output("dataSynchronizationStatus")]
        public Output<Outputs.DatabaseSyncedDatabaseTableDataSynchronizationStatus> DataSynchronizationStatus { get; private set; } = null!;

        /// <summary>
        /// Name of the target database instance. This is required when creating synced database tables in standard catalogs.
        /// This is optional when creating synced database tables in registered catalogs. If this field is specified
        /// when creating synced database tables in registered catalogs, the database instance name MUST
        /// match that of the registered catalog (or the request will be rejected)
        /// </summary>
        [Output("databaseInstanceName")]
        public Output<string> DatabaseInstanceName { get; private set; } = null!;

        /// <summary>
        /// (string) - The name of the database instance that this table is registered to. This field is always returned, and for
        /// tables inside database catalogs is inferred database instance associated with the catalog
        /// </summary>
        [Output("effectiveDatabaseInstanceName")]
        public Output<string> EffectiveDatabaseInstanceName { get; private set; } = null!;

        /// <summary>
        /// (string) - The name of the logical database that this table is registered to
        /// </summary>
        [Output("effectiveLogicalDatabaseName")]
        public Output<string> EffectiveLogicalDatabaseName { get; private set; } = null!;

        /// <summary>
        /// Target Postgres database object (logical database) name for this table.
        /// 
        /// When creating a synced table in a registered Postgres catalog, the
        /// target Postgres database name is inferred to be that of the registered catalog.
        /// If this field is specified in this scenario, the Postgres database name MUST
        /// match that of the registered catalog (or the request will be rejected).
        /// 
        /// When creating a synced table in a standard catalog, this field is required.
        /// In this scenario, specifying this field will allow targeting an arbitrary postgres database.
        /// Note that this has implications for the `create_database_objects_is_missing` field in `spec`
        /// </summary>
        [Output("logicalDatabaseName")]
        public Output<string> LogicalDatabaseName { get; private set; } = null!;

        /// <summary>
        /// Full three-part (catalog, schema, table) name of the table
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("spec")]
        public Output<Outputs.DatabaseSyncedDatabaseTableSpec?> Spec { get; private set; } = null!;

        /// <summary>
        /// (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
        /// state of the data synchronization pipeline (i.e. the table may be in "ACTIVE" but the pipeline
        /// may be in "PROVISIONING" as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
        /// </summary>
        [Output("unityCatalogProvisioningState")]
        public Output<string> UnityCatalogProvisioningState { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseSyncedDatabaseTable resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseSyncedDatabaseTable(string name, DatabaseSyncedDatabaseTableArgs? args = null, CustomResourceOptions? options = null)
            : base("databricks:index/databaseSyncedDatabaseTable:DatabaseSyncedDatabaseTable", name, args ?? new DatabaseSyncedDatabaseTableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseSyncedDatabaseTable(string name, Input<string> id, DatabaseSyncedDatabaseTableState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/databaseSyncedDatabaseTable:DatabaseSyncedDatabaseTable", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseSyncedDatabaseTable resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseSyncedDatabaseTable Get(string name, Input<string> id, DatabaseSyncedDatabaseTableState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseSyncedDatabaseTable(name, id, state, options);
        }
    }

    public sealed class DatabaseSyncedDatabaseTableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the target database instance. This is required when creating synced database tables in standard catalogs.
        /// This is optional when creating synced database tables in registered catalogs. If this field is specified
        /// when creating synced database tables in registered catalogs, the database instance name MUST
        /// match that of the registered catalog (or the request will be rejected)
        /// </summary>
        [Input("databaseInstanceName")]
        public Input<string>? DatabaseInstanceName { get; set; }

        /// <summary>
        /// Target Postgres database object (logical database) name for this table.
        /// 
        /// When creating a synced table in a registered Postgres catalog, the
        /// target Postgres database name is inferred to be that of the registered catalog.
        /// If this field is specified in this scenario, the Postgres database name MUST
        /// match that of the registered catalog (or the request will be rejected).
        /// 
        /// When creating a synced table in a standard catalog, this field is required.
        /// In this scenario, specifying this field will allow targeting an arbitrary postgres database.
        /// Note that this has implications for the `create_database_objects_is_missing` field in `spec`
        /// </summary>
        [Input("logicalDatabaseName")]
        public Input<string>? LogicalDatabaseName { get; set; }

        /// <summary>
        /// Full three-part (catalog, schema, table) name of the table
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("spec")]
        public Input<Inputs.DatabaseSyncedDatabaseTableSpecArgs>? Spec { get; set; }

        public DatabaseSyncedDatabaseTableArgs()
        {
        }
        public static new DatabaseSyncedDatabaseTableArgs Empty => new DatabaseSyncedDatabaseTableArgs();
    }

    public sealed class DatabaseSyncedDatabaseTableState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (SyncedTableStatus) - Synced Table data synchronization status
        /// </summary>
        [Input("dataSynchronizationStatus")]
        public Input<Inputs.DatabaseSyncedDatabaseTableDataSynchronizationStatusGetArgs>? DataSynchronizationStatus { get; set; }

        /// <summary>
        /// Name of the target database instance. This is required when creating synced database tables in standard catalogs.
        /// This is optional when creating synced database tables in registered catalogs. If this field is specified
        /// when creating synced database tables in registered catalogs, the database instance name MUST
        /// match that of the registered catalog (or the request will be rejected)
        /// </summary>
        [Input("databaseInstanceName")]
        public Input<string>? DatabaseInstanceName { get; set; }

        /// <summary>
        /// (string) - The name of the database instance that this table is registered to. This field is always returned, and for
        /// tables inside database catalogs is inferred database instance associated with the catalog
        /// </summary>
        [Input("effectiveDatabaseInstanceName")]
        public Input<string>? EffectiveDatabaseInstanceName { get; set; }

        /// <summary>
        /// (string) - The name of the logical database that this table is registered to
        /// </summary>
        [Input("effectiveLogicalDatabaseName")]
        public Input<string>? EffectiveLogicalDatabaseName { get; set; }

        /// <summary>
        /// Target Postgres database object (logical database) name for this table.
        /// 
        /// When creating a synced table in a registered Postgres catalog, the
        /// target Postgres database name is inferred to be that of the registered catalog.
        /// If this field is specified in this scenario, the Postgres database name MUST
        /// match that of the registered catalog (or the request will be rejected).
        /// 
        /// When creating a synced table in a standard catalog, this field is required.
        /// In this scenario, specifying this field will allow targeting an arbitrary postgres database.
        /// Note that this has implications for the `create_database_objects_is_missing` field in `spec`
        /// </summary>
        [Input("logicalDatabaseName")]
        public Input<string>? LogicalDatabaseName { get; set; }

        /// <summary>
        /// Full three-part (catalog, schema, table) name of the table
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("spec")]
        public Input<Inputs.DatabaseSyncedDatabaseTableSpecGetArgs>? Spec { get; set; }

        /// <summary>
        /// (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
        /// state of the data synchronization pipeline (i.e. the table may be in "ACTIVE" but the pipeline
        /// may be in "PROVISIONING" as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
        /// </summary>
        [Input("unityCatalogProvisioningState")]
        public Input<string>? UnityCatalogProvisioningState { get; set; }

        public DatabaseSyncedDatabaseTableState()
        {
        }
        public static new DatabaseSyncedDatabaseTableState Empty => new DatabaseSyncedDatabaseTableState();
    }
}
