// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetGroup
    {
        public static Task<GetGroupResult> InvokeAsync(GetGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupResult>("databricks:index/getGroup:getGroup", args ?? new GetGroupArgs(), options.WithDefaults());

        public static Output<GetGroupResult> Invoke(GetGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupResult>("databricks:index/getGroup:getGroup", args ?? new GetGroupInvokeArgs(), options.WithDefaults());

        public static Output<GetGroupResult> Invoke(GetGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupResult>("databricks:index/getGroup:getGroup", args ?? new GetGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupArgs : global::Pulumi.InvokeArgs
    {
        [Input("aclPrincipalId")]
        public string? AclPrincipalId { get; set; }

        [Input("allowClusterCreate")]
        public bool? AllowClusterCreate { get; set; }

        [Input("allowInstancePoolCreate")]
        public bool? AllowInstancePoolCreate { get; set; }

        [Input("childGroups")]
        private List<string>? _childGroups;
        public List<string> ChildGroups
        {
            get => _childGroups ?? (_childGroups = new List<string>());
            set => _childGroups = value;
        }

        [Input("databricksSqlAccess")]
        public bool? DatabricksSqlAccess { get; set; }

        [Input("displayName", required: true)]
        public string DisplayName { get; set; } = null!;

        [Input("externalId")]
        public string? ExternalId { get; set; }

        [Input("groups")]
        private List<string>? _groups;
        public List<string> Groups
        {
            get => _groups ?? (_groups = new List<string>());
            set => _groups = value;
        }

        [Input("instanceProfiles")]
        private List<string>? _instanceProfiles;
        public List<string> InstanceProfiles
        {
            get => _instanceProfiles ?? (_instanceProfiles = new List<string>());
            set => _instanceProfiles = value;
        }

        [Input("members")]
        private List<string>? _members;
        [Obsolete(@"Please use `users`, `service_principals`, and `child_groups` instead")]
        public List<string> Members
        {
            get => _members ?? (_members = new List<string>());
            set => _members = value;
        }

        [Input("recursive")]
        public bool? Recursive { get; set; }

        [Input("servicePrincipals")]
        private List<string>? _servicePrincipals;
        public List<string> ServicePrincipals
        {
            get => _servicePrincipals ?? (_servicePrincipals = new List<string>());
            set => _servicePrincipals = value;
        }

        [Input("users")]
        private List<string>? _users;
        public List<string> Users
        {
            get => _users ?? (_users = new List<string>());
            set => _users = value;
        }

        [Input("workspaceAccess")]
        public bool? WorkspaceAccess { get; set; }

        public GetGroupArgs()
        {
        }
        public static new GetGroupArgs Empty => new GetGroupArgs();
    }

    public sealed class GetGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("aclPrincipalId")]
        public Input<string>? AclPrincipalId { get; set; }

        [Input("allowClusterCreate")]
        public Input<bool>? AllowClusterCreate { get; set; }

        [Input("allowInstancePoolCreate")]
        public Input<bool>? AllowInstancePoolCreate { get; set; }

        [Input("childGroups")]
        private InputList<string>? _childGroups;
        public InputList<string> ChildGroups
        {
            get => _childGroups ?? (_childGroups = new InputList<string>());
            set => _childGroups = value;
        }

        [Input("databricksSqlAccess")]
        public Input<bool>? DatabricksSqlAccess { get; set; }

        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        [Input("groups")]
        private InputList<string>? _groups;
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        [Input("instanceProfiles")]
        private InputList<string>? _instanceProfiles;
        public InputList<string> InstanceProfiles
        {
            get => _instanceProfiles ?? (_instanceProfiles = new InputList<string>());
            set => _instanceProfiles = value;
        }

        [Input("members")]
        private InputList<string>? _members;
        [Obsolete(@"Please use `users`, `service_principals`, and `child_groups` instead")]
        public InputList<string> Members
        {
            get => _members ?? (_members = new InputList<string>());
            set => _members = value;
        }

        [Input("recursive")]
        public Input<bool>? Recursive { get; set; }

        [Input("servicePrincipals")]
        private InputList<string>? _servicePrincipals;
        public InputList<string> ServicePrincipals
        {
            get => _servicePrincipals ?? (_servicePrincipals = new InputList<string>());
            set => _servicePrincipals = value;
        }

        [Input("users")]
        private InputList<string>? _users;
        public InputList<string> Users
        {
            get => _users ?? (_users = new InputList<string>());
            set => _users = value;
        }

        [Input("workspaceAccess")]
        public Input<bool>? WorkspaceAccess { get; set; }

        public GetGroupInvokeArgs()
        {
        }
        public static new GetGroupInvokeArgs Empty => new GetGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupResult
    {
        public readonly string AclPrincipalId;
        public readonly bool? AllowClusterCreate;
        public readonly bool? AllowInstancePoolCreate;
        public readonly ImmutableArray<string> ChildGroups;
        public readonly bool? DatabricksSqlAccess;
        public readonly string DisplayName;
        public readonly string ExternalId;
        public readonly ImmutableArray<string> Groups;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> InstanceProfiles;
        public readonly ImmutableArray<string> Members;
        public readonly bool? Recursive;
        public readonly ImmutableArray<string> ServicePrincipals;
        public readonly ImmutableArray<string> Users;
        public readonly bool? WorkspaceAccess;

        [OutputConstructor]
        private GetGroupResult(
            string aclPrincipalId,

            bool? allowClusterCreate,

            bool? allowInstancePoolCreate,

            ImmutableArray<string> childGroups,

            bool? databricksSqlAccess,

            string displayName,

            string externalId,

            ImmutableArray<string> groups,

            string id,

            ImmutableArray<string> instanceProfiles,

            ImmutableArray<string> members,

            bool? recursive,

            ImmutableArray<string> servicePrincipals,

            ImmutableArray<string> users,

            bool? workspaceAccess)
        {
            AclPrincipalId = aclPrincipalId;
            AllowClusterCreate = allowClusterCreate;
            AllowInstancePoolCreate = allowInstancePoolCreate;
            ChildGroups = childGroups;
            DatabricksSqlAccess = databricksSqlAccess;
            DisplayName = displayName;
            ExternalId = externalId;
            Groups = groups;
            Id = id;
            InstanceProfiles = instanceProfiles;
            Members = members;
            Recursive = recursive;
            ServicePrincipals = servicePrincipals;
            Users = users;
            WorkspaceAccess = workspaceAccess;
        }
    }
}
