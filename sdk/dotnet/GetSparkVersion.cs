// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetSparkVersion
    {
        public static Task<GetSparkVersionResult> InvokeAsync(GetSparkVersionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSparkVersionResult>("databricks:index/getSparkVersion:getSparkVersion", args ?? new GetSparkVersionArgs(), options.WithDefaults());

        public static Output<GetSparkVersionResult> Invoke(GetSparkVersionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSparkVersionResult>("databricks:index/getSparkVersion:getSparkVersion", args ?? new GetSparkVersionInvokeArgs(), options.WithDefaults());

        public static Output<GetSparkVersionResult> Invoke(GetSparkVersionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSparkVersionResult>("databricks:index/getSparkVersion:getSparkVersion", args ?? new GetSparkVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSparkVersionArgs : global::Pulumi.InvokeArgs
    {
        [Input("beta")]
        public bool? Beta { get; set; }

        [Input("genomics")]
        public bool? Genomics { get; set; }

        [Input("gpu")]
        public bool? Gpu { get; set; }

        [Input("graviton")]
        public bool? Graviton { get; set; }

        [Input("id")]
        public string? Id { get; set; }

        [Input("latest")]
        public bool? Latest { get; set; }

        [Input("longTermSupport")]
        public bool? LongTermSupport { get; set; }

        [Input("ml")]
        public bool? Ml { get; set; }

        [Input("photon")]
        public bool? Photon { get; set; }

        [Input("scala")]
        public string? Scala { get; set; }

        [Input("sparkVersion")]
        public string? SparkVersion { get; set; }

        public GetSparkVersionArgs()
        {
        }
        public static new GetSparkVersionArgs Empty => new GetSparkVersionArgs();
    }

    public sealed class GetSparkVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("beta")]
        public Input<bool>? Beta { get; set; }

        [Input("genomics")]
        public Input<bool>? Genomics { get; set; }

        [Input("gpu")]
        public Input<bool>? Gpu { get; set; }

        [Input("graviton")]
        public Input<bool>? Graviton { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("latest")]
        public Input<bool>? Latest { get; set; }

        [Input("longTermSupport")]
        public Input<bool>? LongTermSupport { get; set; }

        [Input("ml")]
        public Input<bool>? Ml { get; set; }

        [Input("photon")]
        public Input<bool>? Photon { get; set; }

        [Input("scala")]
        public Input<string>? Scala { get; set; }

        [Input("sparkVersion")]
        public Input<string>? SparkVersion { get; set; }

        public GetSparkVersionInvokeArgs()
        {
        }
        public static new GetSparkVersionInvokeArgs Empty => new GetSparkVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetSparkVersionResult
    {
        public readonly bool? Beta;
        public readonly bool? Genomics;
        public readonly bool? Gpu;
        public readonly bool? Graviton;
        public readonly string Id;
        public readonly bool? Latest;
        public readonly bool? LongTermSupport;
        public readonly bool? Ml;
        public readonly bool? Photon;
        public readonly string? Scala;
        public readonly string? SparkVersion;

        [OutputConstructor]
        private GetSparkVersionResult(
            bool? beta,

            bool? genomics,

            bool? gpu,

            bool? graviton,

            string id,

            bool? latest,

            bool? longTermSupport,

            bool? ml,

            bool? photon,

            string? scala,

            string? sparkVersion)
        {
            Beta = beta;
            Genomics = genomics;
            Gpu = gpu;
            Graviton = graviton;
            Id = id;
            Latest = latest;
            LongTermSupport = longTermSupport;
            Ml = ml;
            Photon = photon;
            Scala = scala;
            SparkVersion = sparkVersion;
        }
    }
}
