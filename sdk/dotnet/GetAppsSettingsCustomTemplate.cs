// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetAppsSettingsCustomTemplate
    {
        /// <summary>
        /// This data source can be used to get a single Custom Template.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Referring to a Custom Template by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myTemplate = Databricks.GetAppsSettingsCustomTemplate.Invoke(new()
        ///     {
        ///         Name = "my-custom-template",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAppsSettingsCustomTemplateResult> InvokeAsync(GetAppsSettingsCustomTemplateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAppsSettingsCustomTemplateResult>("databricks:index/getAppsSettingsCustomTemplate:getAppsSettingsCustomTemplate", args ?? new GetAppsSettingsCustomTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to get a single Custom Template.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Referring to a Custom Template by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myTemplate = Databricks.GetAppsSettingsCustomTemplate.Invoke(new()
        ///     {
        ///         Name = "my-custom-template",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAppsSettingsCustomTemplateResult> Invoke(GetAppsSettingsCustomTemplateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAppsSettingsCustomTemplateResult>("databricks:index/getAppsSettingsCustomTemplate:getAppsSettingsCustomTemplate", args ?? new GetAppsSettingsCustomTemplateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to get a single Custom Template.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Referring to a Custom Template by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myTemplate = Databricks.GetAppsSettingsCustomTemplate.Invoke(new()
        ///     {
        ///         Name = "my-custom-template",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAppsSettingsCustomTemplateResult> Invoke(GetAppsSettingsCustomTemplateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAppsSettingsCustomTemplateResult>("databricks:index/getAppsSettingsCustomTemplate:getAppsSettingsCustomTemplate", args ?? new GetAppsSettingsCustomTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAppsSettingsCustomTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (string) - Description of the App Resource
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// (string) - The Git provider of the template
        /// </summary>
        [Input("gitProvider", required: true)]
        public string GitProvider { get; set; } = null!;

        /// <summary>
        /// (string) - The Git repository URL that the template resides in
        /// </summary>
        [Input("gitRepo", required: true)]
        public string GitRepo { get; set; } = null!;

        /// <summary>
        /// (AppManifest) - The manifest of the template. It defines fields and default values when installing the template
        /// </summary>
        [Input("manifest", required: true)]
        public Inputs.GetAppsSettingsCustomTemplateManifestArgs Manifest { get; set; } = null!;

        /// <summary>
        /// The name of the template. It must contain only alphanumeric characters, hyphens, underscores, and whitespaces.
        /// It must be unique within the workspace
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// (string) - The path to the template within the Git repository
        /// </summary>
        [Input("path", required: true)]
        public string Path { get; set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public string? WorkspaceId { get; set; }

        public GetAppsSettingsCustomTemplateArgs()
        {
        }
        public static new GetAppsSettingsCustomTemplateArgs Empty => new GetAppsSettingsCustomTemplateArgs();
    }

    public sealed class GetAppsSettingsCustomTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (string) - Description of the App Resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (string) - The Git provider of the template
        /// </summary>
        [Input("gitProvider", required: true)]
        public Input<string> GitProvider { get; set; } = null!;

        /// <summary>
        /// (string) - The Git repository URL that the template resides in
        /// </summary>
        [Input("gitRepo", required: true)]
        public Input<string> GitRepo { get; set; } = null!;

        /// <summary>
        /// (AppManifest) - The manifest of the template. It defines fields and default values when installing the template
        /// </summary>
        [Input("manifest", required: true)]
        public Input<Inputs.GetAppsSettingsCustomTemplateManifestInputArgs> Manifest { get; set; } = null!;

        /// <summary>
        /// The name of the template. It must contain only alphanumeric characters, hyphens, underscores, and whitespaces.
        /// It must be unique within the workspace
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// (string) - The path to the template within the Git repository
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public GetAppsSettingsCustomTemplateInvokeArgs()
        {
        }
        public static new GetAppsSettingsCustomTemplateInvokeArgs Empty => new GetAppsSettingsCustomTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetAppsSettingsCustomTemplateResult
    {
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string Creator;
        /// <summary>
        /// (string) - Description of the App Resource
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// (string) - The Git provider of the template
        /// </summary>
        public readonly string GitProvider;
        /// <summary>
        /// (string) - The Git repository URL that the template resides in
        /// </summary>
        public readonly string GitRepo;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (AppManifest) - The manifest of the template. It defines fields and default values when installing the template
        /// </summary>
        public readonly Outputs.GetAppsSettingsCustomTemplateManifestResult Manifest;
        /// <summary>
        /// (string) - Name of the App Resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (string) - The path to the template within the Git repository
        /// </summary>
        public readonly string Path;
        public readonly string? WorkspaceId;

        [OutputConstructor]
        private GetAppsSettingsCustomTemplateResult(
            string creator,

            string? description,

            string gitProvider,

            string gitRepo,

            string id,

            Outputs.GetAppsSettingsCustomTemplateManifestResult manifest,

            string name,

            string path,

            string? workspaceId)
        {
            Creator = creator;
            Description = description;
            GitProvider = gitProvider;
            GitRepo = gitRepo;
            Id = id;
            Manifest = manifest;
            Name = name;
            Path = path;
            WorkspaceId = workspaceId;
        }
    }
}
