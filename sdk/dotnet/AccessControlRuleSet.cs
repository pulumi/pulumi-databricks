// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// &gt; **Note** This resource could be used with account or workspace-level provider.
    /// 
    /// This resource allows you to manage access rules on Databricks account level resources. For convenience we allow accessing this resource through the Databricks account and workspace.
    /// 
    /// &gt; **Note** Currently, we only support managing access rules on service principal, group and account resources through `databricks.AccessControlRuleSet`.
    /// 
    /// &gt; **Warning** `databricks.AccessControlRuleSet` cannot be used to manage access rules for resources supported by databricks_permissions. Refer to its documentation for more information.
    /// 
    /// ## Service principal rule set usage
    /// 
    /// Through a Databricks workspace:
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var accountId = "00000000-0000-0000-0000-000000000000";
    /// 
    ///     var ds = Databricks.GetGroup.Invoke(new()
    ///     {
    ///         DisplayName = "Data Science",
    ///     });
    /// 
    ///     var automationSp = new Databricks.ServicePrincipal("automationSp", new()
    ///     {
    ///         DisplayName = "SP_FOR_AUTOMATION",
    ///     });
    /// 
    ///     var automationSpRuleSet = new Databricks.AccessControlRuleSet("automationSpRuleSet", new()
    ///     {
    ///         GrantRules = new[]
    ///         {
    ///             new Databricks.Inputs.AccessControlRuleSetGrantRuleArgs
    ///             {
    ///                 Principals = new[]
    ///                 {
    ///                     ds.Apply(getGroupResult =&gt; getGroupResult.AclPrincipalId),
    ///                 },
    ///                 Role = "roles/servicePrincipal.user",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// Through AWS Databricks account:
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var accountId = "00000000-0000-0000-0000-000000000000";
    /// 
    ///     // account level group creation
    ///     var ds = new Databricks.Group("ds");
    /// 
    ///     var automationSp = new Databricks.ServicePrincipal("automationSp", new()
    ///     {
    ///         DisplayName = "SP_FOR_AUTOMATION",
    ///     });
    /// 
    ///     var automationSpRuleSet = new Databricks.AccessControlRuleSet("automationSpRuleSet", new()
    ///     {
    ///         GrantRules = new[]
    ///         {
    ///             new Databricks.Inputs.AccessControlRuleSetGrantRuleArgs
    ///             {
    ///                 Principals = new[]
    ///                 {
    ///                     ds.AclPrincipalId,
    ///                 },
    ///                 Role = "roles/servicePrincipal.user",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// Through Azure Databricks account:
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var accountId = "00000000-0000-0000-0000-000000000000";
    /// 
    ///     // account level group creation
    ///     var ds = new Databricks.Group("ds");
    /// 
    ///     var automationSp = new Databricks.ServicePrincipal("automationSp", new()
    ///     {
    ///         ApplicationId = "00000000-0000-0000-0000-000000000000",
    ///         DisplayName = "SP_FOR_AUTOMATION",
    ///     });
    /// 
    ///     var automationSpRuleSet = new Databricks.AccessControlRuleSet("automationSpRuleSet", new()
    ///     {
    ///         GrantRules = new[]
    ///         {
    ///             new Databricks.Inputs.AccessControlRuleSetGrantRuleArgs
    ///             {
    ///                 Principals = new[]
    ///                 {
    ///                     ds.AclPrincipalId,
    ///                 },
    ///                 Role = "roles/servicePrincipal.user",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// Through GCP Databricks account:
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var accountId = "00000000-0000-0000-0000-000000000000";
    /// 
    ///     // account level group creation
    ///     var ds = new Databricks.Group("ds");
    /// 
    ///     var automationSp = new Databricks.ServicePrincipal("automationSp", new()
    ///     {
    ///         DisplayName = "SP_FOR_AUTOMATION",
    ///     });
    /// 
    ///     var automationSpRuleSet = new Databricks.AccessControlRuleSet("automationSpRuleSet", new()
    ///     {
    ///         GrantRules = new[]
    ///         {
    ///             new Databricks.Inputs.AccessControlRuleSetGrantRuleArgs
    ///             {
    ///                 Principals = new[]
    ///                 {
    ///                     ds.AclPrincipalId,
    ///                 },
    ///                 Role = "roles/servicePrincipal.user",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Group rule set usage
    /// 
    /// Refer to the appropriate provider configuration as shown in the examples for service principal rule set.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var accountId = "00000000-0000-0000-0000-000000000000";
    /// 
    ///     var ds = Databricks.GetGroup.Invoke(new()
    ///     {
    ///         DisplayName = "Data Science",
    ///     });
    /// 
    ///     var john = Databricks.GetUser.Invoke(new()
    ///     {
    ///         UserName = "john.doe@example.com",
    ///     });
    /// 
    ///     var dsGroupRuleSet = new Databricks.AccessControlRuleSet("dsGroupRuleSet", new()
    ///     {
    ///         GrantRules = new[]
    ///         {
    ///             new Databricks.Inputs.AccessControlRuleSetGrantRuleArgs
    ///             {
    ///                 Principals = new[]
    ///                 {
    ///                     john.Apply(getUserResult =&gt; getUserResult.AclPrincipalId),
    ///                 },
    ///                 Role = "roles/group.manager",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Account rule set usage
    /// 
    /// Refer to the appropriate provider configuration as shown in the examples for service principal rule set.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var accountId = "00000000-0000-0000-0000-000000000000";
    /// 
    ///     var ds = Databricks.GetGroup.Invoke(new()
    ///     {
    ///         DisplayName = "Data Science",
    ///     });
    /// 
    ///     var marketplaceAdmins = Databricks.GetGroup.Invoke(new()
    ///     {
    ///         DisplayName = "Marketplace Admins",
    ///     });
    /// 
    ///     var john = Databricks.GetUser.Invoke(new()
    ///     {
    ///         UserName = "john.doe@example.com",
    ///     });
    /// 
    ///     var accountRuleSet = new Databricks.AccessControlRuleSet("accountRuleSet", new()
    ///     {
    ///         GrantRules = new[]
    ///         {
    ///             new Databricks.Inputs.AccessControlRuleSetGrantRuleArgs
    ///             {
    ///                 Principals = new[]
    ///                 {
    ///                     john.Apply(getUserResult =&gt; getUserResult.AclPrincipalId),
    ///                 },
    ///                 Role = "roles/group.manager",
    ///             },
    ///             new Databricks.Inputs.AccessControlRuleSetGrantRuleArgs
    ///             {
    ///                 Principals = new[]
    ///                 {
    ///                     ds.Apply(getGroupResult =&gt; getGroupResult.AclPrincipalId),
    ///                 },
    ///                 Role = "roles/servicePrincipal.manager",
    ///             },
    ///             new Databricks.Inputs.AccessControlRuleSetGrantRuleArgs
    ///             {
    ///                 Principals = new[]
    ///                 {
    ///                     marketplaceAdmins.Apply(getGroupResult =&gt; getGroupResult.AclPrincipalId),
    ///                 },
    ///                 Role = "roles/marketplace.admin",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Related Resources
    /// 
    /// The following resources are often used in the same context:
    /// 
    /// * databricks.Group
    /// * databricks.User
    /// * databricks.ServicePrincipal
    /// </summary>
    [DatabricksResourceType("databricks:index/accessControlRuleSet:AccessControlRuleSet")]
    public partial class AccessControlRuleSet : global::Pulumi.CustomResource
    {
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The access control rules to be granted by this rule set, consisting of a set of principals and roles to be granted to them.
        /// 
        /// !&gt; **Warning** Name uniquely identifies a rule set resource. Ensure all the grant_rules blocks for a rule set name are present in one `databricks.AccessControlRuleSet` resource block. Otherwise, after applying changes, users might lose their role assignment even if that was not intended.
        /// </summary>
        [Output("grantRules")]
        public Output<ImmutableArray<Outputs.AccessControlRuleSetGrantRule>> GrantRules { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of a rule set. The name determines the resource to which the rule set applies. Currently, only default rule sets are supported. The following rule set formats are supported:
        /// * `accounts/{account_id}/servicePrincipals/{service_principal_application_id}/ruleSets/default`
        /// * `accounts/{account_id}/groups/{group_id}/ruleSets/default`
        /// * `accounts/{account_id}/ruleSets/default`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a AccessControlRuleSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessControlRuleSet(string name, AccessControlRuleSetArgs? args = null, CustomResourceOptions? options = null)
            : base("databricks:index/accessControlRuleSet:AccessControlRuleSet", name, args ?? new AccessControlRuleSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessControlRuleSet(string name, Input<string> id, AccessControlRuleSetState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/accessControlRuleSet:AccessControlRuleSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessControlRuleSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessControlRuleSet Get(string name, Input<string> id, AccessControlRuleSetState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessControlRuleSet(name, id, state, options);
        }
    }

    public sealed class AccessControlRuleSetArgs : global::Pulumi.ResourceArgs
    {
        [Input("grantRules")]
        private InputList<Inputs.AccessControlRuleSetGrantRuleArgs>? _grantRules;

        /// <summary>
        /// The access control rules to be granted by this rule set, consisting of a set of principals and roles to be granted to them.
        /// 
        /// !&gt; **Warning** Name uniquely identifies a rule set resource. Ensure all the grant_rules blocks for a rule set name are present in one `databricks.AccessControlRuleSet` resource block. Otherwise, after applying changes, users might lose their role assignment even if that was not intended.
        /// </summary>
        public InputList<Inputs.AccessControlRuleSetGrantRuleArgs> GrantRules
        {
            get => _grantRules ?? (_grantRules = new InputList<Inputs.AccessControlRuleSetGrantRuleArgs>());
            set => _grantRules = value;
        }

        /// <summary>
        /// Unique identifier of a rule set. The name determines the resource to which the rule set applies. Currently, only default rule sets are supported. The following rule set formats are supported:
        /// * `accounts/{account_id}/servicePrincipals/{service_principal_application_id}/ruleSets/default`
        /// * `accounts/{account_id}/groups/{group_id}/ruleSets/default`
        /// * `accounts/{account_id}/ruleSets/default`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public AccessControlRuleSetArgs()
        {
        }
        public static new AccessControlRuleSetArgs Empty => new AccessControlRuleSetArgs();
    }

    public sealed class AccessControlRuleSetState : global::Pulumi.ResourceArgs
    {
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("grantRules")]
        private InputList<Inputs.AccessControlRuleSetGrantRuleGetArgs>? _grantRules;

        /// <summary>
        /// The access control rules to be granted by this rule set, consisting of a set of principals and roles to be granted to them.
        /// 
        /// !&gt; **Warning** Name uniquely identifies a rule set resource. Ensure all the grant_rules blocks for a rule set name are present in one `databricks.AccessControlRuleSet` resource block. Otherwise, after applying changes, users might lose their role assignment even if that was not intended.
        /// </summary>
        public InputList<Inputs.AccessControlRuleSetGrantRuleGetArgs> GrantRules
        {
            get => _grantRules ?? (_grantRules = new InputList<Inputs.AccessControlRuleSetGrantRuleGetArgs>());
            set => _grantRules = value;
        }

        /// <summary>
        /// Unique identifier of a rule set. The name determines the resource to which the rule set applies. Currently, only default rule sets are supported. The following rule set formats are supported:
        /// * `accounts/{account_id}/servicePrincipals/{service_principal_application_id}/ruleSets/default`
        /// * `accounts/{account_id}/groups/{group_id}/ruleSets/default`
        /// * `accounts/{account_id}/ruleSets/default`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public AccessControlRuleSetState()
        {
        }
        public static new AccessControlRuleSetState Empty => new AccessControlRuleSetState();
    }
}
