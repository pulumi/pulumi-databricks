// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// &gt; **Note** This resource could be only used with workspace-level provider!
    /// 
    /// This resource allows you to create [Models in Unity Catalog](https://docs.databricks.com/en/mlflow/models-in-uc.html) in Databricks.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Databricks.RegisteredModel("this", new()
    ///     {
    ///         CatalogName = "main",
    ///         SchemaName = "default",
    ///     });
    /// 
    /// });
    /// ```
    /// ## Access Control
    /// 
    /// * databricks.Grants can be used to grant principals `ALL_PRIVILEGES`, `APPLY_TAG`, and `EXECUTE` privileges.
    /// 
    /// ## Related Resources
    /// 
    /// The following resources are often used in the same context:
    /// 
    /// * databricks.ModelServing to serve this model on a Databricks serving endpoint.
    /// * databricks.MlflowExperiment to manage [MLflow experiments](https://docs.databricks.com/data/data-sources/mlflow-experiment.html) in Databricks.
    /// * databricks.Table data to manage tables within Unity Catalog.
    /// * databricks.Schema data to manage schemas within Unity Catalog.
    /// * databricks.Catalog data to manage catalogs within Unity Catalog.
    /// 
    /// ## Import
    /// 
    /// The registered model resource can be imported using the full (3-level) name of the model.
    /// 
    ///  bash
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/registeredModel:RegisteredModel this &lt;catalog_name.schema_name.model_name&gt;
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/registeredModel:RegisteredModel")]
    public partial class RegisteredModel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the catalog where the schema and the registered model reside.
        /// </summary>
        [Output("catalogName")]
        public Output<string> CatalogName { get; private set; } = null!;

        /// <summary>
        /// The comment attached to the registered model.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// The name of the registered model.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the schema where the registered model resides.
        /// </summary>
        [Output("schemaName")]
        public Output<string> SchemaName { get; private set; } = null!;

        [Output("storageLocation")]
        public Output<string> StorageLocation { get; private set; } = null!;


        /// <summary>
        /// Create a RegisteredModel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegisteredModel(string name, RegisteredModelArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/registeredModel:RegisteredModel", name, args ?? new RegisteredModelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegisteredModel(string name, Input<string> id, RegisteredModelState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/registeredModel:RegisteredModel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegisteredModel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegisteredModel Get(string name, Input<string> id, RegisteredModelState? state = null, CustomResourceOptions? options = null)
        {
            return new RegisteredModel(name, id, state, options);
        }
    }

    public sealed class RegisteredModelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the catalog where the schema and the registered model reside.
        /// </summary>
        [Input("catalogName", required: true)]
        public Input<string> CatalogName { get; set; } = null!;

        /// <summary>
        /// The comment attached to the registered model.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The name of the registered model.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the schema where the registered model resides.
        /// </summary>
        [Input("schemaName", required: true)]
        public Input<string> SchemaName { get; set; } = null!;

        [Input("storageLocation")]
        public Input<string>? StorageLocation { get; set; }

        public RegisteredModelArgs()
        {
        }
        public static new RegisteredModelArgs Empty => new RegisteredModelArgs();
    }

    public sealed class RegisteredModelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the catalog where the schema and the registered model reside.
        /// </summary>
        [Input("catalogName")]
        public Input<string>? CatalogName { get; set; }

        /// <summary>
        /// The comment attached to the registered model.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The name of the registered model.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the schema where the registered model resides.
        /// </summary>
        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        [Input("storageLocation")]
        public Input<string>? StorageLocation { get; set; }

        public RegisteredModelState()
        {
        }
        public static new RegisteredModelState Empty => new RegisteredModelState();
    }
}
