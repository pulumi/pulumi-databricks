// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// Custom App Templates store the metadata of custom app code hosted in an external Git repository, enabling users to reuse boilerplate code when creating apps.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Example
    /// 
    /// This example creates a Custom Template in the workspace with the specified name.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Databricks.AppsSettingsCustomTemplate("this", new()
    ///     {
    ///         Name = "my-custom-template",
    ///         Description = "A sample custom app template",
    ///         GitRepo = "https://github.com/example/repo.git",
    ///         Path = "path-to-template",
    ///         GitProvider = "github",
    ///         Manifest = new Databricks.Inputs.AppsSettingsCustomTemplateManifestArgs
    ///         {
    ///             Version = 1,
    ///             Name = "my-custom-app",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example with API Scopes
    /// 
    /// This example creates a custom template that declares required user API scopes.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var apiScopesExample = new Databricks.AppsSettingsCustomTemplate("api_scopes_example", new()
    ///     {
    ///         Name = "my-api-template",
    ///         Description = "A template that requests user API scopes",
    ///         GitRepo = "https://github.com/example/my-app.git",
    ///         Path = "templates/app",
    ///         GitProvider = "github",
    ///         Manifest = new Databricks.Inputs.AppsSettingsCustomTemplateManifestArgs
    ///         {
    ///             Version = 1,
    ///             Name = "my-databricks-app",
    ///             Description = "This app requires the SQL API scope.",
    ///             User_api_scopes = new[]
    ///             {
    ///                 "sql",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example with Resource Requirements
    /// 
    /// This example defines a template that requests specific workspace resources with permissions granted.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var resourcesExample = new Databricks.AppsSettingsCustomTemplate("resources_example", new()
    ///     {
    ///         Name = "my-resource-template",
    ///         Description = "Template that requires secret and SQL warehouse access",
    ///         GitRepo = "https://github.com/example/resource-app.git",
    ///         Path = "resource-template",
    ///         GitProvider = "github",
    ///         Manifest = new Databricks.Inputs.AppsSettingsCustomTemplateManifestArgs
    ///         {
    ///             Version = 1,
    ///             Name = "resource-consuming-app",
    ///             Description = "This app requires access to a secret and SQL warehouse.",
    ///             Resource_specs = new[]
    ///             {
    ///                 
    ///                 {
    ///                     { "name", "my-secret" },
    ///                     { "description", "A secret needed by the app" },
    ///                     { "secretSpec", 
    ///                     {
    ///                         { "permission", "READ" },
    ///                     } },
    ///                 },
    ///                 
    ///                 {
    ///                     { "name", "warehouse" },
    ///                     { "description", "Warehouse access" },
    ///                     { "sqlWarehouseSpec", 
    ///                     {
    ///                         { "permission", "CAN_USE" },
    ///                     } },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// As of Pulumi v1.5, resources can be imported through configuration.
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   id = "name"
    /// 
    ///   to = databricks_apps_settings_custom_template.this
    /// 
    /// }
    /// 
    /// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/appsSettingsCustomTemplate:AppsSettingsCustomTemplate databricks_apps_settings_custom_template "name"
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/appsSettingsCustomTemplate:AppsSettingsCustomTemplate")]
    public partial class AppsSettingsCustomTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Output("creator")]
        public Output<string> Creator { get; private set; } = null!;

        /// <summary>
        /// The description of the template
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Git provider of the template
        /// </summary>
        [Output("gitProvider")]
        public Output<string> GitProvider { get; private set; } = null!;

        /// <summary>
        /// The Git repository URL that the template resides in
        /// </summary>
        [Output("gitRepo")]
        public Output<string> GitRepo { get; private set; } = null!;

        /// <summary>
        /// The manifest of the template. It defines fields and default values when installing the template
        /// </summary>
        [Output("manifest")]
        public Output<Outputs.AppsSettingsCustomTemplateManifest> Manifest { get; private set; } = null!;

        /// <summary>
        /// The name of the template. It must contain only alphanumeric characters, hyphens, underscores, and whitespaces.
        /// It must be unique within the workspace
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The path to the template within the Git repository
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Output("workspaceId")]
        public Output<string?> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a AppsSettingsCustomTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppsSettingsCustomTemplate(string name, AppsSettingsCustomTemplateArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/appsSettingsCustomTemplate:AppsSettingsCustomTemplate", name, args ?? new AppsSettingsCustomTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppsSettingsCustomTemplate(string name, Input<string> id, AppsSettingsCustomTemplateState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/appsSettingsCustomTemplate:AppsSettingsCustomTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppsSettingsCustomTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppsSettingsCustomTemplate Get(string name, Input<string> id, AppsSettingsCustomTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new AppsSettingsCustomTemplate(name, id, state, options);
        }
    }

    public sealed class AppsSettingsCustomTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Git provider of the template
        /// </summary>
        [Input("gitProvider", required: true)]
        public Input<string> GitProvider { get; set; } = null!;

        /// <summary>
        /// The Git repository URL that the template resides in
        /// </summary>
        [Input("gitRepo", required: true)]
        public Input<string> GitRepo { get; set; } = null!;

        /// <summary>
        /// The manifest of the template. It defines fields and default values when installing the template
        /// </summary>
        [Input("manifest", required: true)]
        public Input<Inputs.AppsSettingsCustomTemplateManifestArgs> Manifest { get; set; } = null!;

        /// <summary>
        /// The name of the template. It must contain only alphanumeric characters, hyphens, underscores, and whitespaces.
        /// It must be unique within the workspace
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The path to the template within the Git repository
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public AppsSettingsCustomTemplateArgs()
        {
        }
        public static new AppsSettingsCustomTemplateArgs Empty => new AppsSettingsCustomTemplateArgs();
    }

    public sealed class AppsSettingsCustomTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("creator")]
        public Input<string>? Creator { get; set; }

        /// <summary>
        /// The description of the template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Git provider of the template
        /// </summary>
        [Input("gitProvider")]
        public Input<string>? GitProvider { get; set; }

        /// <summary>
        /// The Git repository URL that the template resides in
        /// </summary>
        [Input("gitRepo")]
        public Input<string>? GitRepo { get; set; }

        /// <summary>
        /// The manifest of the template. It defines fields and default values when installing the template
        /// </summary>
        [Input("manifest")]
        public Input<Inputs.AppsSettingsCustomTemplateManifestGetArgs>? Manifest { get; set; }

        /// <summary>
        /// The name of the template. It must contain only alphanumeric characters, hyphens, underscores, and whitespaces.
        /// It must be unique within the workspace
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The path to the template within the Git repository
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public AppsSettingsCustomTemplateState()
        {
        }
        public static new AppsSettingsCustomTemplateState Empty => new AppsSettingsCustomTemplateState();
    }
}
