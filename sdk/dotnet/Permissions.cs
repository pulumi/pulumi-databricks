// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// This resource allows you to generically manage [access control](https://docs.databricks.com/security/access-control/index.html) in Databricks workspace. It would guarantee that only *admins*, *authenticated principal* and those declared within `access_control` blocks would have specified access. It is not possible to remove management rights from *admins* group.
    /// 
    /// &gt; **Note** Configuring this resource for an object will **OVERWRITE** any existing permissions of the same type unless imported, and changes made outside of Pulumi will be reset unless the changes are also reflected in the configuration.
    /// 
    /// &gt; **Note** It is not possible to lower permissions for `admins` or your own user anywhere from `CAN_MANAGE` level, so Databricks Pulumi Provider removes those `access_control` blocks automatically.
    /// 
    /// &gt; **Note** If multiple permission levels are specified for an identity (e.g. `CAN_RESTART` and `CAN_MANAGE` for a cluster), only the highest level permission is returned and will cause permanent drift.
    /// 
    /// &gt; **Warning** To manage access control on service principals, use databricks_access_control_rule_set.
    /// 
    /// ## Cluster usage
    /// 
    /// It's possible to separate [cluster access control](https://docs.databricks.com/security/access-control/cluster-acl.html) to three different permission levels: `CAN_ATTACH_TO`, `CAN_RESTART` and `CAN_MANAGE`:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var ds = new Databricks.Group("ds", new()
    ///     {
    ///         DisplayName = "Data Science",
    ///     });
    /// 
    ///     var latest = Databricks.GetSparkVersion.Invoke();
    /// 
    ///     var smallest = Databricks.GetNodeType.Invoke(new()
    ///     {
    ///         LocalDisk = true,
    ///     });
    /// 
    ///     var sharedAutoscaling = new Databricks.Cluster("shared_autoscaling", new()
    ///     {
    ///         ClusterName = "Shared Autoscaling",
    ///         SparkVersion = latest.Apply(getSparkVersionResult =&gt; getSparkVersionResult.Id),
    ///         NodeTypeId = smallest.Apply(getNodeTypeResult =&gt; getNodeTypeResult.Id),
    ///         AutoterminationMinutes = 60,
    ///         Autoscale = new Databricks.Inputs.ClusterAutoscaleArgs
    ///         {
    ///             MinWorkers = 1,
    ///             MaxWorkers = 10,
    ///         },
    ///     });
    /// 
    ///     var clusterUsage = new Databricks.Permissions("cluster_usage", new()
    ///     {
    ///         ClusterId = sharedAutoscaling.Id,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_ATTACH_TO",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_RESTART",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = ds.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Cluster Policy usage
    /// 
    /// Cluster policies allow creation of clusters, that match [given policy](https://docs.databricks.com/administration-guide/clusters/policies.html). It's possible to assign `CAN_USE` permission to users and groups:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ds = new Databricks.Group("ds", new()
    ///     {
    ///         DisplayName = "Data Science",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var somethingSimple = new Databricks.ClusterPolicy("something_simple", new()
    ///     {
    ///         Name = "Some simple policy",
    ///         Definition = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["spark_conf.spark.hadoop.javax.jdo.option.ConnectionURL"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["type"] = "forbidden",
    ///             },
    ///             ["spark_conf.spark.secondkey"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["type"] = "forbidden",
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var policyUsage = new Databricks.Permissions("policy_usage", new()
    ///     {
    ///         ClusterPolicyId = somethingSimple.Id,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = ds.DisplayName,
    ///                 PermissionLevel = "CAN_USE",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_USE",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Instance Pool usage
    /// 
    /// Instance Pools access control [allows to](https://docs.databricks.com/security/access-control/pool-acl.html) assign `CAN_ATTACH_TO` and `CAN_MANAGE` permissions to users, service principals, and groups. It's also possible to grant creation of Instance Pools to individual groups and users, service principals.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var smallest = Databricks.GetNodeType.Invoke(new()
    ///     {
    ///         LocalDisk = true,
    ///     });
    /// 
    ///     var @this = new Databricks.InstancePool("this", new()
    ///     {
    ///         InstancePoolName = "Reserved Instances",
    ///         IdleInstanceAutoterminationMinutes = 60,
    ///         NodeTypeId = smallest.Apply(getNodeTypeResult =&gt; getNodeTypeResult.Id),
    ///         MinIdleInstances = 0,
    ///         MaxCapacity = 10,
    ///     });
    /// 
    ///     var poolUsage = new Databricks.Permissions("pool_usage", new()
    ///     {
    ///         InstancePoolId = @this.Id,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_ATTACH_TO",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Job usage
    /// 
    /// There are four assignable [permission levels](https://docs.databricks.com/security/access-control/jobs-acl.html#job-permissions) for databricks_job: `CAN_VIEW`, `CAN_MANAGE_RUN`, `IS_OWNER`, and `CAN_MANAGE`. Admins are granted the `CAN_MANAGE` permission by default, and they can assign that permission to non-admin users, and service principals.
    /// 
    /// - The creator of a job has `IS_OWNER` permission. Destroying `databricks.Permissions` resource for a job would revert ownership to the creator.
    /// - A job must have exactly one owner. If a resource is changed and no owner is specified, the currently authenticated principal would become the new owner of the job. Nothing would change, per se, if the job was created through Pulumi.
    /// - A job cannot have a group as an owner.
    /// - Jobs triggered through *Run Now* assume the permissions of the job owner and not the user, and service principal who issued Run Now.
    /// - Read [main documentation](https://docs.databricks.com/security/access-control/jobs-acl.html) for additional detail.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var awsPrincipal = new Databricks.ServicePrincipal("aws_principal", new()
    ///     {
    ///         DisplayName = "main",
    ///     });
    /// 
    ///     var latest = Databricks.GetSparkVersion.Invoke();
    /// 
    ///     var smallest = Databricks.GetNodeType.Invoke(new()
    ///     {
    ///         LocalDisk = true,
    ///     });
    /// 
    ///     var @this = new Databricks.Job("this", new()
    ///     {
    ///         Name = "Featurization",
    ///         MaxConcurrentRuns = 1,
    ///         Tasks = new[]
    ///         {
    ///             new Databricks.Inputs.JobTaskArgs
    ///             {
    ///                 TaskKey = "task1",
    ///                 NewCluster = new Databricks.Inputs.JobTaskNewClusterArgs
    ///                 {
    ///                     NumWorkers = 300,
    ///                     SparkVersion = latest.Apply(getSparkVersionResult =&gt; getSparkVersionResult.Id),
    ///                     NodeTypeId = smallest.Apply(getNodeTypeResult =&gt; getNodeTypeResult.Id),
    ///                 },
    ///                 NotebookTask = new Databricks.Inputs.JobTaskNotebookTaskArgs
    ///                 {
    ///                     NotebookPath = "/Production/MakeFeatures",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var jobUsage = new Databricks.Permissions("job_usage", new()
    ///     {
    ///         JobId = @this.Id,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = "users",
    ///                 PermissionLevel = "CAN_VIEW",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE_RUN",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 ServicePrincipalName = awsPrincipal.ApplicationId,
    ///                 PermissionLevel = "IS_OWNER",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Delta Live Tables usage
    /// 
    /// There are four assignable [permission levels](https://docs.databricks.com/security/access-control/dlt-acl.html#delta-live-tables-permissions) for databricks_pipeline: `CAN_VIEW`, `CAN_RUN`, `CAN_MANAGE`, and `IS_OWNER`. Admins are granted the `CAN_MANAGE` permission by default, and they can assign that permission to non-admin users, and service principals.
    /// 
    /// - The creator of a DLT Pipeline has `IS_OWNER` permission. Destroying `databricks.Permissions` resource for a pipeline would revert ownership to the creator.
    /// - A DLT pipeline must have exactly one owner. If a resource is changed and no owner is specified, the currently authenticated principal would become the new owner of the pipeline. Nothing would change, per se, if the pipeline was created through Pulumi.
    /// - A DLT pipeline cannot have a group as an owner.
    /// - DLT Pipelines triggered through *Start* assume the permissions of the pipeline owner and not the user, and service principal who issued Run Now.
    /// - Read [main documentation](https://docs.databricks.com/security/access-control/dlt-acl.html) for additional detail.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var dltDemo = new Databricks.Notebook("dlt_demo", new()
    ///     {
    ///         ContentBase64 = Std.Base64encode.Invoke(new()
    ///         {
    ///             Input = @"import dlt
    /// json_path = ""/databricks-datasets/wikipedia-datasets/data-001/clickstream/raw-uncompressed-json/2015_2_clickstream.json""
    /// @dlt.table(
    ///    comment=""The raw wikipedia clickstream dataset, ingested from /databricks-datasets.""
    /// )
    /// def clickstream_raw():
    ///     return (spark.read.format(""json"").load(json_path))
    /// ",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         Language = "PYTHON",
    ///         Path = $"{me.Home}/DLT_Demo",
    ///     });
    /// 
    ///     var @this = new Databricks.Pipeline("this", new()
    ///     {
    ///         Name = $"DLT Demo Pipeline ({me.Alphanumeric})",
    ///         Storage = "/test/tf-pipeline",
    ///         Configuration = 
    ///         {
    ///             { "key1", "value1" },
    ///             { "key2", "value2" },
    ///         },
    ///         Libraries = new[]
    ///         {
    ///             new Databricks.Inputs.PipelineLibraryArgs
    ///             {
    ///                 Notebook = new Databricks.Inputs.PipelineLibraryNotebookArgs
    ///                 {
    ///                     Path = dltDemo.Id,
    ///                 },
    ///             },
    ///         },
    ///         Continuous = false,
    ///         Filters = new Databricks.Inputs.PipelineFiltersArgs
    ///         {
    ///             Includes = new[]
    ///             {
    ///                 "com.databricks.include",
    ///             },
    ///             Excludes = new[]
    ///             {
    ///                 "com.databricks.exclude",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var dltUsage = new Databricks.Permissions("dlt_usage", new()
    ///     {
    ///         PipelineId = @this.Id,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = "users",
    ///                 PermissionLevel = "CAN_VIEW",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Notebook usage
    /// 
    /// Valid [permission levels](https://docs.databricks.com/security/access-control/workspace-acl.html#notebook-permissions) for databricks.Notebook are: `CAN_READ`, `CAN_RUN`, `CAN_EDIT`, and `CAN_MANAGE`.
    /// 
    /// A notebook could be specified by using either `notebook_path` or `notebook_id` attribute.  The value for the `notebook_id` is the object ID of the resource in the Databricks Workspace that is exposed as `object_id` attribute of the `databricks.Notebook` resource as shown below.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var @this = new Databricks.Notebook("this", new()
    ///     {
    ///         ContentBase64 = Std.Base64encode.Invoke(new()
    ///         {
    ///             Input = "# Welcome to your Python notebook",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         Path = "/Production/ETL/Features",
    ///         Language = "PYTHON",
    ///     });
    /// 
    ///     var notebookUsageByPath = new Databricks.Permissions("notebook_usage_by_path", new()
    ///     {
    ///         NotebookPath = @this.Path,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = "users",
    ///                 PermissionLevel = "CAN_READ",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_RUN",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_EDIT",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var notebookUsageById = new Databricks.Permissions("notebook_usage_by_id", new()
    ///     {
    ///         NotebookId = @this.ObjectId,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = "users",
    ///                 PermissionLevel = "CAN_READ",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_RUN",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_EDIT",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &gt; **Note**: when importing a permissions resource, only the `notebook_id` is filled!
    /// 
    /// ## Workspace file usage
    /// 
    /// Valid permission levels for databricks.WorkspaceFile are: `CAN_READ`, `CAN_RUN`, `CAN_EDIT`, and `CAN_MANAGE`.
    /// 
    /// A workspace file could be specified by using either `workspace_file_path` or `workspace_file_id` attribute.  The value for the `workspace_file_id` is the object ID of the resource in the Databricks Workspace that is exposed as `object_id` attribute of the `databricks.WorkspaceFile` resource as shown below.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var @this = new Databricks.WorkspaceFile("this", new()
    ///     {
    ///         ContentBase64 = Std.Base64encode.Invoke(new()
    ///         {
    ///             Input = "print('Hello World')",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         Path = "/Production/ETL/Features.py",
    ///     });
    /// 
    ///     var workspaceFileUsageByPath = new Databricks.Permissions("workspace_file_usage_by_path", new()
    ///     {
    ///         WorkspaceFilePath = @this.Path,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = "users",
    ///                 PermissionLevel = "CAN_READ",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_RUN",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_EDIT",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var workspaceFileUsageById = new Databricks.Permissions("workspace_file_usage_by_id", new()
    ///     {
    ///         WorkspaceFileId = @this.ObjectId,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = "users",
    ///                 PermissionLevel = "CAN_READ",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_RUN",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_EDIT",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &gt; **Note**: when importing a permissions resource, only the `workspace_file_id` is filled!
    /// 
    /// ## Folder usage
    /// 
    /// Valid [permission levels](https://docs.databricks.com/security/access-control/workspace-acl.html#folder-permissions) for folders of databricks.Directory are: `CAN_READ`, `CAN_RUN`, `CAN_EDIT`, and `CAN_MANAGE`. Notebooks and experiments in a folder inherit all permissions settings of that folder. For example, a user (or service principal) that has `CAN_RUN` permission on a folder has `CAN_RUN` permission on the notebooks in that folder.
    /// 
    /// - All users can list items in the folder without any permissions.
    /// - All users (or service principals) have `CAN_MANAGE` permission for items in the Workspace &gt; Shared Icon Shared folder. You can grant `CAN_MANAGE` permission to notebooks and folders by moving them to the Shared Icon Shared folder.
    /// - All users (or service principals) have `CAN_MANAGE` permission for objects the user creates.
    /// - User home directory - The user (or service principal) has `CAN_MANAGE` permission. All other users (or service principals) can list their directories.
    /// 
    /// A folder could be specified by using either `directory_path` or `directory_id` attribute.  The value for the `directory_id` is the object ID of the resource in the Databricks Workspace that is exposed as `object_id` attribute of the `databricks.Directory` resource as shown below.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var @this = new Databricks.Directory("this", new()
    ///     {
    ///         Path = "/Production/ETL",
    ///     });
    /// 
    ///     var folderUsageByPath = new Databricks.Permissions("folder_usage_by_path", new()
    ///     {
    ///         DirectoryPath = @this.Path,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = "users",
    ///                 PermissionLevel = "CAN_READ",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_RUN",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_EDIT",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var folderUsageById = new Databricks.Permissions("folder_usage_by_id", new()
    ///     {
    ///         DirectoryId = @this.ObjectId,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = "users",
    ///                 PermissionLevel = "CAN_READ",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_RUN",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_EDIT",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &gt; **Note**: when importing a permissions resource, only the `directory_id` is filled!
    /// 
    /// ## Repos usage
    /// 
    /// Valid [permission levels](https://docs.databricks.com/security/access-control/workspace-acl.html) for databricks.Repo are: `CAN_READ`, `CAN_RUN`, `CAN_EDIT`, and `CAN_MANAGE`.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var @this = new Databricks.Repo("this", new()
    ///     {
    ///         Url = "https://github.com/user/demo.git",
    ///     });
    /// 
    ///     var repoUsage = new Databricks.Permissions("repo_usage", new()
    ///     {
    ///         RepoId = @this.Id,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = "users",
    ///                 PermissionLevel = "CAN_READ",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_RUN",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_EDIT",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## MLflow Experiment usage
    /// 
    /// Valid [permission levels](https://docs.databricks.com/security/access-control/workspace-acl.html#mlflow-experiment-permissions-1) for databricks.MlflowExperiment are: `CAN_READ`, `CAN_EDIT`, and `CAN_MANAGE`.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var me = Databricks.GetCurrentUser.Invoke();
    /// 
    ///     var @this = new Databricks.MlflowExperiment("this", new()
    ///     {
    ///         Name = $"{me.Apply(getCurrentUserResult =&gt; getCurrentUserResult.Home)}/Sample",
    ///         ArtifactLocation = "dbfs:/tmp/my-experiment",
    ///         Description = "My MLflow experiment description",
    ///     });
    /// 
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var experimentUsage = new Databricks.Permissions("experiment_usage", new()
    ///     {
    ///         ExperimentId = @this.Id,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = "users",
    ///                 PermissionLevel = "CAN_READ",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_EDIT",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## MLflow Model usage
    /// 
    /// Valid [permission levels](https://docs.databricks.com/security/access-control/workspace-acl.html#mlflow-model-permissions-1) for databricks.MlflowModel are: `CAN_READ`, `CAN_EDIT`, `CAN_MANAGE_STAGING_VERSIONS`, `CAN_MANAGE_PRODUCTION_VERSIONS`, and `CAN_MANAGE`. You can also manage permissions for all MLflow models by `registered_model_id = "root"`.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Databricks.MlflowModel("this", new()
    ///     {
    ///         Name = "SomePredictions",
    ///     });
    /// 
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var modelUsage = new Databricks.Permissions("model_usage", new()
    ///     {
    ///         RegisteredModelId = @this.RegisteredModelId,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = "users",
    ///                 PermissionLevel = "CAN_READ",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE_PRODUCTION_VERSIONS",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE_STAGING_VERSIONS",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Model serving usage
    /// 
    /// Valid permission levels for databricks.ModelServing are: `CAN_VIEW`, `CAN_QUERY`, and `CAN_MANAGE`.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Databricks.ModelServing("this", new()
    ///     {
    ///         Name = "tf-test",
    ///         Config = new Databricks.Inputs.ModelServingConfigArgs
    ///         {
    ///             ServedModels = new[]
    ///             {
    ///                 new Databricks.Inputs.ModelServingConfigServedModelArgs
    ///                 {
    ///                     Name = "prod_model",
    ///                     ModelName = "test",
    ///                     ModelVersion = "1",
    ///                     WorkloadSize = "Small",
    ///                     ScaleToZeroEnabled = true,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var mlServingUsage = new Databricks.Permissions("ml_serving_usage", new()
    ///     {
    ///         ServingEndpointId = @this.ServingEndpointId,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = "users",
    ///                 PermissionLevel = "CAN_VIEW",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_QUERY",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Passwords usage
    /// 
    /// By default on AWS deployments, all admin users can sign in to Databricks using either SSO or their username and password, and all API users can authenticate to the Databricks REST APIs using their username and password. As an admin, you [can limit](https://docs.databricks.com/administration-guide/users-groups/single-sign-on/index.html#optional-configure-password-access-control) admin users’ and API users’ ability to authenticate with their username and password by configuring `CAN_USE` permissions using password access control.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var guests = new Databricks.Group("guests", new()
    ///     {
    ///         DisplayName = "Guest Users",
    ///     });
    /// 
    ///     var passwordUsage = new Databricks.Permissions("password_usage", new()
    ///     {
    ///         Authorization = "passwords",
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = guests.DisplayName,
    ///                 PermissionLevel = "CAN_USE",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Token usage
    /// 
    /// It is required to have at least 1 personal access token in the workspace before you can manage tokens permissions.
    /// 
    /// !&gt; **Warning** There can be only one `authorization = "tokens"` permissions resource per workspace, otherwise there'll be a permanent configuration drift. After applying changes, users who previously had either `CAN_USE` or `CAN_MANAGE` permission but no longer have either permission have their access to token-based authentication revoked. Their active tokens are immediately deleted (revoked).
    /// 
    /// Only [possible permission](https://docs.databricks.com/administration-guide/access-control/tokens.html) to assign to non-admin group is `CAN_USE`, where *admins* `CAN_MANAGE` all tokens:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var tokenUsage = new Databricks.Permissions("token_usage", new()
    ///     {
    ///         Authorization = "tokens",
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_USE",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_USE",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## SQL warehouse usage
    /// 
    /// [SQL warehouses](https://docs.databricks.com/sql/user/security/access-control/sql-endpoint-acl.html) have four possible permissions: `CAN_USE`, `CAN_MONITOR`, `CAN_MANAGE` and `IS_OWNER`:
    /// 
    /// - The creator of a warehouse has `IS_OWNER` permission. Destroying `databricks.Permissions` resource for a warehouse would revert ownership to the creator.
    /// - A warehouse must have exactly one owner. If a resource is changed and no owner is specified, the currently authenticated principal would become the new owner of the warehouse. Nothing would change, per se, if the warehouse was created through Pulumi.
    /// - A warehouse cannot have a group as an owner.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var me = Databricks.GetCurrentUser.Invoke();
    /// 
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var @this = new Databricks.SqlEndpoint("this", new()
    ///     {
    ///         Name = $"Endpoint of {me.Apply(getCurrentUserResult =&gt; getCurrentUserResult.Alphanumeric)}",
    ///         ClusterSize = "Small",
    ///         MaxNumClusters = 1,
    ///         Tags = new Databricks.Inputs.SqlEndpointTagsArgs
    ///         {
    ///             CustomTags = new[]
    ///             {
    ///                 new Databricks.Inputs.SqlEndpointTagsCustomTagArgs
    ///                 {
    ///                     Key = "City",
    ///                     Value = "Amsterdam",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var endpointUsage = new Databricks.Permissions("endpoint_usage", new()
    ///     {
    ///         SqlEndpointId = @this.Id,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_USE",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Dashboard usage
    /// 
    /// [Dashboards](https://docs.databricks.com/en/dashboards/tutorials/manage-permissions.html) have four possible permissions: `CAN_READ`, `CAN_RUN`, `CAN_EDIT` and `CAN_MANAGE`:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var dashboard = new Databricks.Dashboard("dashboard", new()
    ///     {
    ///         DisplayName = "TF New Dashboard",
    ///     });
    /// 
    ///     var dashboardUsage = new Databricks.Permissions("dashboard_usage", new()
    ///     {
    ///         DashboardId = dashboard.Id,
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_RUN",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Legacy SQL Dashboard usage
    /// 
    /// [Legacy SQL dashboards](https://docs.databricks.com/sql/user/security/access-control/dashboard-acl.html) have three possible permissions: `CAN_VIEW`, `CAN_RUN` and `CAN_MANAGE`:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var sqlDashboardUsage = new Databricks.Permissions("sql_dashboard_usage", new()
    ///     {
    ///         SqlDashboardId = "3244325",
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_RUN",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## SQL Query usage
    /// 
    /// [SQL queries](https://docs.databricks.com/sql/user/security/access-control/query-acl.html) have three possible permissions: `CAN_VIEW`, `CAN_RUN` and `CAN_MANAGE`:
    /// 
    /// &gt; **Note** If you do not define an `access_control` block granting `CAN_MANAGE` explictly for the user calling this provider, Databricks Pulumi Provider will add `CAN_MANAGE` permission for the caller. This is a failsafe to prevent situations where the caller is locked out from making changes to the targeted `databricks.SqlQuery` resource when backend API do not apply permission inheritance correctly.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var queryUsage = new Databricks.Permissions("query_usage", new()
    ///     {
    ///         SqlQueryId = "3244325",
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_RUN",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## SQL Alert usage
    /// 
    /// [SQL alerts](https://docs.databricks.com/sql/user/security/access-control/alert-acl.html) have three possible permissions: `CAN_VIEW`, `CAN_RUN` and `CAN_MANAGE`:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var auto = new Databricks.Group("auto", new()
    ///     {
    ///         DisplayName = "Automation",
    ///     });
    /// 
    ///     var eng = new Databricks.Group("eng", new()
    ///     {
    ///         DisplayName = "Engineering",
    ///     });
    /// 
    ///     var alertUsage = new Databricks.Permissions("alert_usage", new()
    ///     {
    ///         SqlAlertId = "3244325",
    ///         AccessControls = new[]
    ///         {
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = auto.DisplayName,
    ///                 PermissionLevel = "CAN_RUN",
    ///             },
    ///             new Databricks.Inputs.PermissionsAccessControlArgs
    ///             {
    ///                 GroupName = eng.DisplayName,
    ///                 PermissionLevel = "CAN_MANAGE",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Instance Profiles
    /// 
    /// Instance Profiles are not managed by General Permissions API and therefore databricks.GroupInstanceProfile and databricks.UserInstanceProfile should be used to allow usage of specific AWS EC2 IAM roles to users or groups.
    /// 
    /// ## Secrets
    /// 
    /// One can control access to databricks.Secret through `initial_manage_principal` argument on databricks.SecretScope or databricks_secret_acl, so that users (or service principals) can `READ`, `WRITE` or `MANAGE` entries within secret scope.
    /// 
    /// ## Tables, Views and Databases
    /// 
    /// General Permissions API does not apply to access control for tables and they have to be managed separately using the databricks.SqlPermissions resource, though you're encouraged to use Unity Catalog or migrate to it.
    /// 
    /// ## Data Access with Unity Catalog
    /// 
    /// Initially in Unity Catalog all users have no access to data, which has to be later assigned through databricks.Grants resource.
    /// 
    /// ## Import
    /// 
    /// The resource permissions can be imported using the object id
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/permissions:Permissions databricks_permissions &lt;object type&gt;/&lt;object id&gt;
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/permissions:Permissions")]
    public partial class Permissions : global::Pulumi.CustomResource
    {
        [Output("accessControls")]
        public Output<ImmutableArray<Outputs.PermissionsAccessControl>> AccessControls { get; private set; } = null!;

        [Output("authorization")]
        public Output<string?> Authorization { get; private set; } = null!;

        [Output("clusterId")]
        public Output<string?> ClusterId { get; private set; } = null!;

        [Output("clusterPolicyId")]
        public Output<string?> ClusterPolicyId { get; private set; } = null!;

        [Output("dashboardId")]
        public Output<string?> DashboardId { get; private set; } = null!;

        [Output("directoryId")]
        public Output<string?> DirectoryId { get; private set; } = null!;

        [Output("directoryPath")]
        public Output<string?> DirectoryPath { get; private set; } = null!;

        [Output("experimentId")]
        public Output<string?> ExperimentId { get; private set; } = null!;

        [Output("instancePoolId")]
        public Output<string?> InstancePoolId { get; private set; } = null!;

        [Output("jobId")]
        public Output<string?> JobId { get; private set; } = null!;

        [Output("notebookId")]
        public Output<string?> NotebookId { get; private set; } = null!;

        [Output("notebookPath")]
        public Output<string?> NotebookPath { get; private set; } = null!;

        /// <summary>
        /// type of permissions.
        /// </summary>
        [Output("objectType")]
        public Output<string> ObjectType { get; private set; } = null!;

        [Output("pipelineId")]
        public Output<string?> PipelineId { get; private set; } = null!;

        [Output("registeredModelId")]
        public Output<string?> RegisteredModelId { get; private set; } = null!;

        [Output("repoId")]
        public Output<string?> RepoId { get; private set; } = null!;

        [Output("repoPath")]
        public Output<string?> RepoPath { get; private set; } = null!;

        [Output("servingEndpointId")]
        public Output<string?> ServingEndpointId { get; private set; } = null!;

        [Output("sqlAlertId")]
        public Output<string?> SqlAlertId { get; private set; } = null!;

        [Output("sqlDashboardId")]
        public Output<string?> SqlDashboardId { get; private set; } = null!;

        [Output("sqlEndpointId")]
        public Output<string?> SqlEndpointId { get; private set; } = null!;

        [Output("sqlQueryId")]
        public Output<string?> SqlQueryId { get; private set; } = null!;

        [Output("workspaceFileId")]
        public Output<string?> WorkspaceFileId { get; private set; } = null!;

        [Output("workspaceFilePath")]
        public Output<string?> WorkspaceFilePath { get; private set; } = null!;


        /// <summary>
        /// Create a Permissions resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Permissions(string name, PermissionsArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/permissions:Permissions", name, args ?? new PermissionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Permissions(string name, Input<string> id, PermissionsState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/permissions:Permissions", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Permissions resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Permissions Get(string name, Input<string> id, PermissionsState? state = null, CustomResourceOptions? options = null)
        {
            return new Permissions(name, id, state, options);
        }
    }

    public sealed class PermissionsArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessControls", required: true)]
        private InputList<Inputs.PermissionsAccessControlArgs>? _accessControls;
        public InputList<Inputs.PermissionsAccessControlArgs> AccessControls
        {
            get => _accessControls ?? (_accessControls = new InputList<Inputs.PermissionsAccessControlArgs>());
            set => _accessControls = value;
        }

        [Input("authorization")]
        public Input<string>? Authorization { get; set; }

        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("clusterPolicyId")]
        public Input<string>? ClusterPolicyId { get; set; }

        [Input("dashboardId")]
        public Input<string>? DashboardId { get; set; }

        [Input("directoryId")]
        public Input<string>? DirectoryId { get; set; }

        [Input("directoryPath")]
        public Input<string>? DirectoryPath { get; set; }

        [Input("experimentId")]
        public Input<string>? ExperimentId { get; set; }

        [Input("instancePoolId")]
        public Input<string>? InstancePoolId { get; set; }

        [Input("jobId")]
        public Input<string>? JobId { get; set; }

        [Input("notebookId")]
        public Input<string>? NotebookId { get; set; }

        [Input("notebookPath")]
        public Input<string>? NotebookPath { get; set; }

        /// <summary>
        /// type of permissions.
        /// </summary>
        [Input("objectType")]
        public Input<string>? ObjectType { get; set; }

        [Input("pipelineId")]
        public Input<string>? PipelineId { get; set; }

        [Input("registeredModelId")]
        public Input<string>? RegisteredModelId { get; set; }

        [Input("repoId")]
        public Input<string>? RepoId { get; set; }

        [Input("repoPath")]
        public Input<string>? RepoPath { get; set; }

        [Input("servingEndpointId")]
        public Input<string>? ServingEndpointId { get; set; }

        [Input("sqlAlertId")]
        public Input<string>? SqlAlertId { get; set; }

        [Input("sqlDashboardId")]
        public Input<string>? SqlDashboardId { get; set; }

        [Input("sqlEndpointId")]
        public Input<string>? SqlEndpointId { get; set; }

        [Input("sqlQueryId")]
        public Input<string>? SqlQueryId { get; set; }

        [Input("workspaceFileId")]
        public Input<string>? WorkspaceFileId { get; set; }

        [Input("workspaceFilePath")]
        public Input<string>? WorkspaceFilePath { get; set; }

        public PermissionsArgs()
        {
        }
        public static new PermissionsArgs Empty => new PermissionsArgs();
    }

    public sealed class PermissionsState : global::Pulumi.ResourceArgs
    {
        [Input("accessControls")]
        private InputList<Inputs.PermissionsAccessControlGetArgs>? _accessControls;
        public InputList<Inputs.PermissionsAccessControlGetArgs> AccessControls
        {
            get => _accessControls ?? (_accessControls = new InputList<Inputs.PermissionsAccessControlGetArgs>());
            set => _accessControls = value;
        }

        [Input("authorization")]
        public Input<string>? Authorization { get; set; }

        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("clusterPolicyId")]
        public Input<string>? ClusterPolicyId { get; set; }

        [Input("dashboardId")]
        public Input<string>? DashboardId { get; set; }

        [Input("directoryId")]
        public Input<string>? DirectoryId { get; set; }

        [Input("directoryPath")]
        public Input<string>? DirectoryPath { get; set; }

        [Input("experimentId")]
        public Input<string>? ExperimentId { get; set; }

        [Input("instancePoolId")]
        public Input<string>? InstancePoolId { get; set; }

        [Input("jobId")]
        public Input<string>? JobId { get; set; }

        [Input("notebookId")]
        public Input<string>? NotebookId { get; set; }

        [Input("notebookPath")]
        public Input<string>? NotebookPath { get; set; }

        /// <summary>
        /// type of permissions.
        /// </summary>
        [Input("objectType")]
        public Input<string>? ObjectType { get; set; }

        [Input("pipelineId")]
        public Input<string>? PipelineId { get; set; }

        [Input("registeredModelId")]
        public Input<string>? RegisteredModelId { get; set; }

        [Input("repoId")]
        public Input<string>? RepoId { get; set; }

        [Input("repoPath")]
        public Input<string>? RepoPath { get; set; }

        [Input("servingEndpointId")]
        public Input<string>? ServingEndpointId { get; set; }

        [Input("sqlAlertId")]
        public Input<string>? SqlAlertId { get; set; }

        [Input("sqlDashboardId")]
        public Input<string>? SqlDashboardId { get; set; }

        [Input("sqlEndpointId")]
        public Input<string>? SqlEndpointId { get; set; }

        [Input("sqlQueryId")]
        public Input<string>? SqlQueryId { get; set; }

        [Input("workspaceFileId")]
        public Input<string>? WorkspaceFileId { get; set; }

        [Input("workspaceFilePath")]
        public Input<string>? WorkspaceFilePath { get; set; }

        public PermissionsState()
        {
        }
        public static new PermissionsState Empty => new PermissionsState();
    }
}
