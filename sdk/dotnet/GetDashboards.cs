// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetDashboards
    {
        /// <summary>
        /// This data source allows you to retrieve information about Databricks [Dashboards](https://docs.databricks.com/en/dashboards/index.html).
        /// 
        /// &gt; This data source can only be used with a workspace-level provider!
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(async() =&gt; 
        /// {
        ///     var all = await Databricks.GetDashboards.InvokeAsync();
        /// 
        ///     var dashboardsPermissions = new List&lt;Databricks.Permissions&gt;();
        ///     foreach (var range in all.Dashboards.Select(__item =&gt; __item.DashboardId).ToList().Select((v, k) =&gt; new { Key = k, Value = v }))
        ///     {
        ///         dashboardsPermissions.Add(new Databricks.Permissions($"dashboards_permissions-{range.Key}", new()
        ///         {
        ///             Depends = new[]
        ///             {
        ///                 all,
        ///             },
        ///             DashboardId = range.Value,
        ///             AccessControls = new[]
        ///             {
        ///                 new Databricks.Inputs.PermissionsAccessControlArgs
        ///                 {
        ///                     GroupName = "Example Group",
        ///                     PermissionLevel = "CAN_MANAGE",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// });
        /// ```
        /// </summary>
        public static Task<GetDashboardsResult> InvokeAsync(GetDashboardsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDashboardsResult>("databricks:index/getDashboards:getDashboards", args ?? new GetDashboardsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source allows you to retrieve information about Databricks [Dashboards](https://docs.databricks.com/en/dashboards/index.html).
        /// 
        /// &gt; This data source can only be used with a workspace-level provider!
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(async() =&gt; 
        /// {
        ///     var all = await Databricks.GetDashboards.InvokeAsync();
        /// 
        ///     var dashboardsPermissions = new List&lt;Databricks.Permissions&gt;();
        ///     foreach (var range in all.Dashboards.Select(__item =&gt; __item.DashboardId).ToList().Select((v, k) =&gt; new { Key = k, Value = v }))
        ///     {
        ///         dashboardsPermissions.Add(new Databricks.Permissions($"dashboards_permissions-{range.Key}", new()
        ///         {
        ///             Depends = new[]
        ///             {
        ///                 all,
        ///             },
        ///             DashboardId = range.Value,
        ///             AccessControls = new[]
        ///             {
        ///                 new Databricks.Inputs.PermissionsAccessControlArgs
        ///                 {
        ///                     GroupName = "Example Group",
        ///                     PermissionLevel = "CAN_MANAGE",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// });
        /// ```
        /// </summary>
        public static Output<GetDashboardsResult> Invoke(GetDashboardsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDashboardsResult>("databricks:index/getDashboards:getDashboards", args ?? new GetDashboardsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source allows you to retrieve information about Databricks [Dashboards](https://docs.databricks.com/en/dashboards/index.html).
        /// 
        /// &gt; This data source can only be used with a workspace-level provider!
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(async() =&gt; 
        /// {
        ///     var all = await Databricks.GetDashboards.InvokeAsync();
        /// 
        ///     var dashboardsPermissions = new List&lt;Databricks.Permissions&gt;();
        ///     foreach (var range in all.Dashboards.Select(__item =&gt; __item.DashboardId).ToList().Select((v, k) =&gt; new { Key = k, Value = v }))
        ///     {
        ///         dashboardsPermissions.Add(new Databricks.Permissions($"dashboards_permissions-{range.Key}", new()
        ///         {
        ///             Depends = new[]
        ///             {
        ///                 all,
        ///             },
        ///             DashboardId = range.Value,
        ///             AccessControls = new[]
        ///             {
        ///                 new Databricks.Inputs.PermissionsAccessControlArgs
        ///                 {
        ///                     GroupName = "Example Group",
        ///                     PermissionLevel = "CAN_MANAGE",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// });
        /// ```
        /// </summary>
        public static Output<GetDashboardsResult> Invoke(GetDashboardsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDashboardsResult>("databricks:index/getDashboards:getDashboards", args ?? new GetDashboardsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDashboardsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A **case-insensitive** substring to filter Dashboards by their name.
        /// </summary>
        [Input("dashboardNameContains")]
        public string? DashboardNameContains { get; set; }

        public GetDashboardsArgs()
        {
        }
        public static new GetDashboardsArgs Empty => new GetDashboardsArgs();
    }

    public sealed class GetDashboardsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A **case-insensitive** substring to filter Dashboards by their name.
        /// </summary>
        [Input("dashboardNameContains")]
        public Input<string>? DashboardNameContains { get; set; }

        public GetDashboardsInvokeArgs()
        {
        }
        public static new GetDashboardsInvokeArgs Empty => new GetDashboardsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDashboardsResult
    {
        public readonly string? DashboardNameContains;
        /// <summary>
        /// A list of dashboards matching the specified criteria. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDashboardsDashboardResult> Dashboards;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetDashboardsResult(
            string? dashboardNameContains,

            ImmutableArray<Outputs.GetDashboardsDashboardResult> dashboards,

            string id)
        {
            DashboardNameContains = dashboardNameContains;
            Dashboards = dashboards;
            Id = id;
        }
    }
}
