// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// The Alert v2 resource allows you to manage SQL alerts in Databricks SQL. Alerts monitor query results and notify you when specific conditions are met.
    /// 
    /// Alerts run on a schedule and evaluate query results against defined thresholds. When an alert is triggered, notifications can be sent to specified users or destinations.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Alert Example
    /// This example creates a basic alert that monitors a query and sends notifications to a user when the value exceeds a threshold:
    /// 
    /// ## Import
    /// 
    /// As of Pulumi v1.5, resources can be imported through configuration.
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   id = "id"
    /// 
    ///   to = databricks_alert_v2.this
    /// 
    /// }
    /// 
    /// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/alertV2:AlertV2 databricks_alert_v2 "id"
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/alertV2:AlertV2")]
    public partial class AlertV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (string) - The timestamp indicating when the alert was created
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Custom description for the alert. support mustache template
        /// </summary>
        [Output("customDescription")]
        public Output<string?> CustomDescription { get; private set; } = null!;

        /// <summary>
        /// Custom summary for the alert. support mustache template
        /// </summary>
        [Output("customSummary")]
        public Output<string?> CustomSummary { get; private set; } = null!;

        /// <summary>
        /// The display name of the alert
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (AlertV2RunAs) - The actual identity that will be used to execute the alert.
        /// This is an output-only field that shows the resolved run-as identity after applying
        /// permissions and defaults
        /// </summary>
        [Output("effectiveRunAs")]
        public Output<Outputs.AlertV2EffectiveRunAs> EffectiveRunAs { get; private set; } = null!;

        [Output("evaluation")]
        public Output<Outputs.AlertV2Evaluation?> Evaluation { get; private set; } = null!;

        /// <summary>
        /// (string) - Indicates whether the query is trashed. Possible values are: `ACTIVE`, `TRASHED`
        /// </summary>
        [Output("lifecycleState")]
        public Output<string> LifecycleState { get; private set; } = null!;

        /// <summary>
        /// (string) - The owner's username. This field is set to "Unavailable" if the user has been deleted
        /// </summary>
        [Output("ownerUserName")]
        public Output<string> OwnerUserName { get; private set; } = null!;

        /// <summary>
        /// The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
        /// </summary>
        [Output("parentPath")]
        public Output<string?> ParentPath { get; private set; } = null!;

        /// <summary>
        /// Text of the query to be run
        /// </summary>
        [Output("queryText")]
        public Output<string?> QueryText { get; private set; } = null!;

        /// <summary>
        /// Specifies the identity that will be used to run the alert.
        /// This field allows you to configure alerts to run as a specific user or service principal.
        /// - For user identity: Set `UserName` to the email of an active workspace user. Users can only set this to their own email.
        /// - For service principal: Set `ServicePrincipalName` to the application ID. Requires the `servicePrincipal/user` role.
        /// If not specified, the alert will run as the request user
        /// </summary>
        [Output("runAs")]
        public Output<Outputs.AlertV2RunAs?> RunAs { get; private set; } = null!;

        /// <summary>
        /// The run as username or application ID of service principal.
        /// On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role.
        /// Deprecated: Use `RunAs` field instead. This field will be removed in a future release
        /// </summary>
        [Output("runAsUserName")]
        public Output<string?> RunAsUserName { get; private set; } = null!;

        [Output("schedule")]
        public Output<Outputs.AlertV2Schedule?> Schedule { get; private set; } = null!;

        /// <summary>
        /// (string) - The timestamp indicating when the alert was updated
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// ID of the SQL warehouse attached to the alert
        /// </summary>
        [Output("warehouseId")]
        public Output<string?> WarehouseId { get; private set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Output("workspaceId")]
        public Output<string?> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a AlertV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AlertV2(string name, AlertV2Args? args = null, CustomResourceOptions? options = null)
            : base("databricks:index/alertV2:AlertV2", name, args ?? new AlertV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private AlertV2(string name, Input<string> id, AlertV2State? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/alertV2:AlertV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AlertV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AlertV2 Get(string name, Input<string> id, AlertV2State? state = null, CustomResourceOptions? options = null)
        {
            return new AlertV2(name, id, state, options);
        }
    }

    public sealed class AlertV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom description for the alert. support mustache template
        /// </summary>
        [Input("customDescription")]
        public Input<string>? CustomDescription { get; set; }

        /// <summary>
        /// Custom summary for the alert. support mustache template
        /// </summary>
        [Input("customSummary")]
        public Input<string>? CustomSummary { get; set; }

        /// <summary>
        /// The display name of the alert
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("evaluation")]
        public Input<Inputs.AlertV2EvaluationArgs>? Evaluation { get; set; }

        /// <summary>
        /// The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
        /// </summary>
        [Input("parentPath")]
        public Input<string>? ParentPath { get; set; }

        /// <summary>
        /// Text of the query to be run
        /// </summary>
        [Input("queryText")]
        public Input<string>? QueryText { get; set; }

        /// <summary>
        /// Specifies the identity that will be used to run the alert.
        /// This field allows you to configure alerts to run as a specific user or service principal.
        /// - For user identity: Set `UserName` to the email of an active workspace user. Users can only set this to their own email.
        /// - For service principal: Set `ServicePrincipalName` to the application ID. Requires the `servicePrincipal/user` role.
        /// If not specified, the alert will run as the request user
        /// </summary>
        [Input("runAs")]
        public Input<Inputs.AlertV2RunAsArgs>? RunAs { get; set; }

        /// <summary>
        /// The run as username or application ID of service principal.
        /// On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role.
        /// Deprecated: Use `RunAs` field instead. This field will be removed in a future release
        /// </summary>
        [Input("runAsUserName")]
        public Input<string>? RunAsUserName { get; set; }

        [Input("schedule")]
        public Input<Inputs.AlertV2ScheduleArgs>? Schedule { get; set; }

        /// <summary>
        /// ID of the SQL warehouse attached to the alert
        /// </summary>
        [Input("warehouseId")]
        public Input<string>? WarehouseId { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public AlertV2Args()
        {
        }
        public static new AlertV2Args Empty => new AlertV2Args();
    }

    public sealed class AlertV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string) - The timestamp indicating when the alert was created
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Custom description for the alert. support mustache template
        /// </summary>
        [Input("customDescription")]
        public Input<string>? CustomDescription { get; set; }

        /// <summary>
        /// Custom summary for the alert. support mustache template
        /// </summary>
        [Input("customSummary")]
        public Input<string>? CustomSummary { get; set; }

        /// <summary>
        /// The display name of the alert
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// (AlertV2RunAs) - The actual identity that will be used to execute the alert.
        /// This is an output-only field that shows the resolved run-as identity after applying
        /// permissions and defaults
        /// </summary>
        [Input("effectiveRunAs")]
        public Input<Inputs.AlertV2EffectiveRunAsGetArgs>? EffectiveRunAs { get; set; }

        [Input("evaluation")]
        public Input<Inputs.AlertV2EvaluationGetArgs>? Evaluation { get; set; }

        /// <summary>
        /// (string) - Indicates whether the query is trashed. Possible values are: `ACTIVE`, `TRASHED`
        /// </summary>
        [Input("lifecycleState")]
        public Input<string>? LifecycleState { get; set; }

        /// <summary>
        /// (string) - The owner's username. This field is set to "Unavailable" if the user has been deleted
        /// </summary>
        [Input("ownerUserName")]
        public Input<string>? OwnerUserName { get; set; }

        /// <summary>
        /// The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
        /// </summary>
        [Input("parentPath")]
        public Input<string>? ParentPath { get; set; }

        /// <summary>
        /// Text of the query to be run
        /// </summary>
        [Input("queryText")]
        public Input<string>? QueryText { get; set; }

        /// <summary>
        /// Specifies the identity that will be used to run the alert.
        /// This field allows you to configure alerts to run as a specific user or service principal.
        /// - For user identity: Set `UserName` to the email of an active workspace user. Users can only set this to their own email.
        /// - For service principal: Set `ServicePrincipalName` to the application ID. Requires the `servicePrincipal/user` role.
        /// If not specified, the alert will run as the request user
        /// </summary>
        [Input("runAs")]
        public Input<Inputs.AlertV2RunAsGetArgs>? RunAs { get; set; }

        /// <summary>
        /// The run as username or application ID of service principal.
        /// On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role.
        /// Deprecated: Use `RunAs` field instead. This field will be removed in a future release
        /// </summary>
        [Input("runAsUserName")]
        public Input<string>? RunAsUserName { get; set; }

        [Input("schedule")]
        public Input<Inputs.AlertV2ScheduleGetArgs>? Schedule { get; set; }

        /// <summary>
        /// (string) - The timestamp indicating when the alert was updated
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// ID of the SQL warehouse attached to the alert
        /// </summary>
        [Input("warehouseId")]
        public Input<string>? WarehouseId { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public AlertV2State()
        {
        }
        public static new AlertV2State Empty => new AlertV2State();
    }
}
