// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// Lakebase Database Instances are managed Postgres instances, composed of a primary Postgres compute instance and 0 or more read replica instances.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Example
    /// 
    /// This example creates a simple Database Instance with the specified name and capacity.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Databricks.DatabaseInstance("this", new()
    ///     {
    ///         Name = "my-database-instance",
    ///         Capacity = "CU_2",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example with Readable Secondaries
    /// 
    /// This example creates a Database Instance with readable secondaries (and HA) enabled.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Databricks.DatabaseInstance("this", new()
    ///     {
    ///         Name = "my-database-instance",
    ///         Capacity = "CU_2",
    ///         NodeCount = 2,
    ///         EnableReadableSecondaries = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example Child Instance Created From Parent
    /// 
    /// This example creates a child Database Instance from a specified parent Database Instance at the current point in time.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var child = new Databricks.DatabaseInstance("child", new()
    ///     {
    ///         Name = "my-database-instance",
    ///         Capacity = "CU_2",
    ///         ParentInstanceRef = new Databricks.Inputs.DatabaseInstanceParentInstanceRefArgs
    ///         {
    ///             Name = "my-parent-instance",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// As of Pulumi v1.5, resources can be imported through configuration.
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   id = "name"
    /// 
    ///   to = databricks_database_instance.this
    /// 
    /// }
    /// 
    /// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/databaseInstance:DatabaseInstance databricks_database_instance "name"
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/databaseInstance:DatabaseInstance")]
    public partial class DatabaseInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The sku of the instance. Valid values are "CU_1", "CU_2", "CU_4", "CU_8"
        /// </summary>
        [Output("capacity")]
        public Output<string?> Capacity { get; private set; } = null!;

        /// <summary>
        /// (list of DatabaseInstanceRef) - The refs of the child instances. This is only available if the instance is
        /// parent instance
        /// </summary>
        [Output("childInstanceRefs")]
        public Output<ImmutableArray<Outputs.DatabaseInstanceChildInstanceRef>> ChildInstanceRefs { get; private set; } = null!;

        /// <summary>
        /// (string) - The timestamp when the instance was created
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// (string) - The email of the creator of the instance
        /// </summary>
        [Output("creator")]
        public Output<string> Creator { get; private set; } = null!;

        /// <summary>
        /// (boolean) - xref AIP-129. `EnablePgNativeLogin` is owned by the client, while `EffectiveEnablePgNativeLogin` is owned by the server.
        /// `EnablePgNativeLogin` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveEnablePgNativeLogin` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        [Output("effectiveEnablePgNativeLogin")]
        public Output<bool> EffectiveEnablePgNativeLogin { get; private set; } = null!;

        /// <summary>
        /// (boolean) - xref AIP-129. `EnableReadableSecondaries` is owned by the client, while `EffectiveEnableReadableSecondaries` is owned by the server.
        /// `EnableReadableSecondaries` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveEnableReadableSecondaries` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        [Output("effectiveEnableReadableSecondaries")]
        public Output<bool> EffectiveEnableReadableSecondaries { get; private set; } = null!;

        /// <summary>
        /// (integer) - xref AIP-129. `NodeCount` is owned by the client, while `EffectiveNodeCount` is owned by the server.
        /// `NodeCount` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveNodeCount` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        [Output("effectiveNodeCount")]
        public Output<int> EffectiveNodeCount { get; private set; } = null!;

        /// <summary>
        /// (integer) - xref AIP-129. `RetentionWindowInDays` is owned by the client, while `EffectiveRetentionWindowInDays` is owned by the server.
        /// `RetentionWindowInDays` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveRetentionWindowInDays` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        [Output("effectiveRetentionWindowInDays")]
        public Output<int> EffectiveRetentionWindowInDays { get; private set; } = null!;

        /// <summary>
        /// (boolean) - xref AIP-129. `Stopped` is owned by the client, while `EffectiveStopped` is owned by the server.
        /// `Stopped` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveStopped` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        [Output("effectiveStopped")]
        public Output<bool> EffectiveStopped { get; private set; } = null!;

        /// <summary>
        /// Whether the instance has PG native password login enabled. Defaults to true
        /// </summary>
        [Output("enablePgNativeLogin")]
        public Output<bool> EnablePgNativeLogin { get; private set; } = null!;

        /// <summary>
        /// Whether to enable secondaries to serve read-only traffic. Defaults to false
        /// </summary>
        [Output("enableReadableSecondaries")]
        public Output<bool?> EnableReadableSecondaries { get; private set; } = null!;

        /// <summary>
        /// The name of the instance. This is the unique identifier for the instance
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
        /// 1 primary and 0 secondaries
        /// </summary>
        [Output("nodeCount")]
        public Output<int?> NodeCount { get; private set; } = null!;

        /// <summary>
        /// The ref of the parent instance. This is only available if the instance is
        /// child instance.
        /// Input: For specifying the parent instance to create a child instance. Optional.
        /// Output: Only populated if provided as input to create a child instance
        /// </summary>
        [Output("parentInstanceRef")]
        public Output<Outputs.DatabaseInstanceParentInstanceRef?> ParentInstanceRef { get; private set; } = null!;

        /// <summary>
        /// (string) - The version of Postgres running on the instance
        /// </summary>
        [Output("pgVersion")]
        public Output<string> PgVersion { get; private set; } = null!;

        /// <summary>
        /// Purge the resource on delete
        /// </summary>
        [Output("purgeOnDelete")]
        public Output<bool?> PurgeOnDelete { get; private set; } = null!;

        /// <summary>
        /// (string) - The DNS endpoint to connect to the instance for read only access. This is only available if
        /// EnableReadableSecondaries is true
        /// </summary>
        [Output("readOnlyDns")]
        public Output<string> ReadOnlyDns { get; private set; } = null!;

        /// <summary>
        /// (string) - The DNS endpoint to connect to the instance for read+write access
        /// </summary>
        [Output("readWriteDns")]
        public Output<string> ReadWriteDns { get; private set; } = null!;

        /// <summary>
        /// The retention window for the instance. This is the time window in days
        /// for which the historical data is retained. The default value is 7 days.
        /// Valid values are 2 to 35 days
        /// </summary>
        [Output("retentionWindowInDays")]
        public Output<int?> RetentionWindowInDays { get; private set; } = null!;

        /// <summary>
        /// (string) - The current state of the instance. Possible values are: `AVAILABLE`, `DELETING`, `FAILING_OVER`, `STARTING`, `STOPPED`, `UPDATING`
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Whether the instance is stopped
        /// </summary>
        [Output("stopped")]
        public Output<bool?> Stopped { get; private set; } = null!;

        /// <summary>
        /// (string) - Id of the ref database instance
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Output("workspaceId")]
        public Output<string?> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseInstance(string name, DatabaseInstanceArgs? args = null, CustomResourceOptions? options = null)
            : base("databricks:index/databaseInstance:DatabaseInstance", name, args ?? new DatabaseInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseInstance(string name, Input<string> id, DatabaseInstanceState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/databaseInstance:DatabaseInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseInstance Get(string name, Input<string> id, DatabaseInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseInstance(name, id, state, options);
        }
    }

    public sealed class DatabaseInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The sku of the instance. Valid values are "CU_1", "CU_2", "CU_4", "CU_8"
        /// </summary>
        [Input("capacity")]
        public Input<string>? Capacity { get; set; }

        /// <summary>
        /// Whether the instance has PG native password login enabled. Defaults to true
        /// </summary>
        [Input("enablePgNativeLogin")]
        public Input<bool>? EnablePgNativeLogin { get; set; }

        /// <summary>
        /// Whether to enable secondaries to serve read-only traffic. Defaults to false
        /// </summary>
        [Input("enableReadableSecondaries")]
        public Input<bool>? EnableReadableSecondaries { get; set; }

        /// <summary>
        /// The name of the instance. This is the unique identifier for the instance
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
        /// 1 primary and 0 secondaries
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// The ref of the parent instance. This is only available if the instance is
        /// child instance.
        /// Input: For specifying the parent instance to create a child instance. Optional.
        /// Output: Only populated if provided as input to create a child instance
        /// </summary>
        [Input("parentInstanceRef")]
        public Input<Inputs.DatabaseInstanceParentInstanceRefArgs>? ParentInstanceRef { get; set; }

        /// <summary>
        /// Purge the resource on delete
        /// </summary>
        [Input("purgeOnDelete")]
        public Input<bool>? PurgeOnDelete { get; set; }

        /// <summary>
        /// The retention window for the instance. This is the time window in days
        /// for which the historical data is retained. The default value is 7 days.
        /// Valid values are 2 to 35 days
        /// </summary>
        [Input("retentionWindowInDays")]
        public Input<int>? RetentionWindowInDays { get; set; }

        /// <summary>
        /// Whether the instance is stopped
        /// </summary>
        [Input("stopped")]
        public Input<bool>? Stopped { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public DatabaseInstanceArgs()
        {
        }
        public static new DatabaseInstanceArgs Empty => new DatabaseInstanceArgs();
    }

    public sealed class DatabaseInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The sku of the instance. Valid values are "CU_1", "CU_2", "CU_4", "CU_8"
        /// </summary>
        [Input("capacity")]
        public Input<string>? Capacity { get; set; }

        [Input("childInstanceRefs")]
        private InputList<Inputs.DatabaseInstanceChildInstanceRefGetArgs>? _childInstanceRefs;

        /// <summary>
        /// (list of DatabaseInstanceRef) - The refs of the child instances. This is only available if the instance is
        /// parent instance
        /// </summary>
        public InputList<Inputs.DatabaseInstanceChildInstanceRefGetArgs> ChildInstanceRefs
        {
            get => _childInstanceRefs ?? (_childInstanceRefs = new InputList<Inputs.DatabaseInstanceChildInstanceRefGetArgs>());
            set => _childInstanceRefs = value;
        }

        /// <summary>
        /// (string) - The timestamp when the instance was created
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        /// <summary>
        /// (string) - The email of the creator of the instance
        /// </summary>
        [Input("creator")]
        public Input<string>? Creator { get; set; }

        /// <summary>
        /// (boolean) - xref AIP-129. `EnablePgNativeLogin` is owned by the client, while `EffectiveEnablePgNativeLogin` is owned by the server.
        /// `EnablePgNativeLogin` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveEnablePgNativeLogin` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        [Input("effectiveEnablePgNativeLogin")]
        public Input<bool>? EffectiveEnablePgNativeLogin { get; set; }

        /// <summary>
        /// (boolean) - xref AIP-129. `EnableReadableSecondaries` is owned by the client, while `EffectiveEnableReadableSecondaries` is owned by the server.
        /// `EnableReadableSecondaries` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveEnableReadableSecondaries` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        [Input("effectiveEnableReadableSecondaries")]
        public Input<bool>? EffectiveEnableReadableSecondaries { get; set; }

        /// <summary>
        /// (integer) - xref AIP-129. `NodeCount` is owned by the client, while `EffectiveNodeCount` is owned by the server.
        /// `NodeCount` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveNodeCount` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        [Input("effectiveNodeCount")]
        public Input<int>? EffectiveNodeCount { get; set; }

        /// <summary>
        /// (integer) - xref AIP-129. `RetentionWindowInDays` is owned by the client, while `EffectiveRetentionWindowInDays` is owned by the server.
        /// `RetentionWindowInDays` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveRetentionWindowInDays` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        [Input("effectiveRetentionWindowInDays")]
        public Input<int>? EffectiveRetentionWindowInDays { get; set; }

        /// <summary>
        /// (boolean) - xref AIP-129. `Stopped` is owned by the client, while `EffectiveStopped` is owned by the server.
        /// `Stopped` will only be set in Create/Update response messages if and only if the user provides the field via the request.
        /// `EffectiveStopped` on the other hand will always bet set in all response messages (Create/Update/Get/List)
        /// </summary>
        [Input("effectiveStopped")]
        public Input<bool>? EffectiveStopped { get; set; }

        /// <summary>
        /// Whether the instance has PG native password login enabled. Defaults to true
        /// </summary>
        [Input("enablePgNativeLogin")]
        public Input<bool>? EnablePgNativeLogin { get; set; }

        /// <summary>
        /// Whether to enable secondaries to serve read-only traffic. Defaults to false
        /// </summary>
        [Input("enableReadableSecondaries")]
        public Input<bool>? EnableReadableSecondaries { get; set; }

        /// <summary>
        /// The name of the instance. This is the unique identifier for the instance
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
        /// 1 primary and 0 secondaries
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// The ref of the parent instance. This is only available if the instance is
        /// child instance.
        /// Input: For specifying the parent instance to create a child instance. Optional.
        /// Output: Only populated if provided as input to create a child instance
        /// </summary>
        [Input("parentInstanceRef")]
        public Input<Inputs.DatabaseInstanceParentInstanceRefGetArgs>? ParentInstanceRef { get; set; }

        /// <summary>
        /// (string) - The version of Postgres running on the instance
        /// </summary>
        [Input("pgVersion")]
        public Input<string>? PgVersion { get; set; }

        /// <summary>
        /// Purge the resource on delete
        /// </summary>
        [Input("purgeOnDelete")]
        public Input<bool>? PurgeOnDelete { get; set; }

        /// <summary>
        /// (string) - The DNS endpoint to connect to the instance for read only access. This is only available if
        /// EnableReadableSecondaries is true
        /// </summary>
        [Input("readOnlyDns")]
        public Input<string>? ReadOnlyDns { get; set; }

        /// <summary>
        /// (string) - The DNS endpoint to connect to the instance for read+write access
        /// </summary>
        [Input("readWriteDns")]
        public Input<string>? ReadWriteDns { get; set; }

        /// <summary>
        /// The retention window for the instance. This is the time window in days
        /// for which the historical data is retained. The default value is 7 days.
        /// Valid values are 2 to 35 days
        /// </summary>
        [Input("retentionWindowInDays")]
        public Input<int>? RetentionWindowInDays { get; set; }

        /// <summary>
        /// (string) - The current state of the instance. Possible values are: `AVAILABLE`, `DELETING`, `FAILING_OVER`, `STARTING`, `STOPPED`, `UPDATING`
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Whether the instance is stopped
        /// </summary>
        [Input("stopped")]
        public Input<bool>? Stopped { get; set; }

        /// <summary>
        /// (string) - Id of the ref database instance
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public DatabaseInstanceState()
        {
        }
        public static new DatabaseInstanceState Empty => new DatabaseInstanceState();
    }
}
