// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// &gt; Please switch to databricks.File or databricks.WorkspaceFile to manage files. Databricks recommends against storing any production data or sensitive information in the DBFS root.
    /// 
    /// This is a resource that lets you manage relatively small files on [Databricks File System (DBFS)](https://docs.databricks.com/data/databricks-file-system.html). The best use cases are libraries for databricks.Cluster or databricks_job. You can also use databricks.DbfsFile and databricks.getDbfsFilePaths data sources.
    /// 
    /// &gt; This resource can only be used with a workspace-level provider!
    /// 
    /// ## Import
    /// 
    /// The resource dbfs file can be imported using the path of the file:
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   to = databricks_dbfs_file.this
    /// 
    ///   id = "&lt;path&gt;"
    /// 
    /// }
    /// 
    /// Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/dbfsFile:DbfsFile this &lt;path&gt;
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/dbfsFile:DbfsFile")]
    public partial class DbfsFile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Encoded file contents. Conflicts with `Source`. Use of `ContentBase64` is discouraged, as it's increasing memory footprint of Pulumi state and should only be used in exceptional circumstances, like creating a data pipeline configuration file.
        /// </summary>
        [Output("contentBase64")]
        public Output<string?> ContentBase64 { get; private set; } = null!;

        /// <summary>
        /// Path, but with `dbfs:` prefix.
        /// </summary>
        [Output("dbfsPath")]
        public Output<string> DbfsPath { get; private set; } = null!;

        /// <summary>
        /// The file size of the file that is being tracked by this resource in bytes.
        /// </summary>
        [Output("fileSize")]
        public Output<int> FileSize { get; private set; } = null!;

        [Output("md5")]
        public Output<string?> Md5 { get; private set; } = null!;

        /// <summary>
        /// The path of the file in which you wish to save.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The full absolute path to the file. Conflicts with `ContentBase64`.
        /// </summary>
        [Output("source")]
        public Output<string?> Source { get; private set; } = null!;


        /// <summary>
        /// Create a DbfsFile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DbfsFile(string name, DbfsFileArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/dbfsFile:DbfsFile", name, args ?? new DbfsFileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DbfsFile(string name, Input<string> id, DbfsFileState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/dbfsFile:DbfsFile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DbfsFile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DbfsFile Get(string name, Input<string> id, DbfsFileState? state = null, CustomResourceOptions? options = null)
        {
            return new DbfsFile(name, id, state, options);
        }
    }

    public sealed class DbfsFileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Encoded file contents. Conflicts with `Source`. Use of `ContentBase64` is discouraged, as it's increasing memory footprint of Pulumi state and should only be used in exceptional circumstances, like creating a data pipeline configuration file.
        /// </summary>
        [Input("contentBase64")]
        public Input<string>? ContentBase64 { get; set; }

        [Input("md5")]
        public Input<string>? Md5 { get; set; }

        /// <summary>
        /// The path of the file in which you wish to save.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// The full absolute path to the file. Conflicts with `ContentBase64`.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        public DbfsFileArgs()
        {
        }
        public static new DbfsFileArgs Empty => new DbfsFileArgs();
    }

    public sealed class DbfsFileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Encoded file contents. Conflicts with `Source`. Use of `ContentBase64` is discouraged, as it's increasing memory footprint of Pulumi state and should only be used in exceptional circumstances, like creating a data pipeline configuration file.
        /// </summary>
        [Input("contentBase64")]
        public Input<string>? ContentBase64 { get; set; }

        /// <summary>
        /// Path, but with `dbfs:` prefix.
        /// </summary>
        [Input("dbfsPath")]
        public Input<string>? DbfsPath { get; set; }

        /// <summary>
        /// The file size of the file that is being tracked by this resource in bytes.
        /// </summary>
        [Input("fileSize")]
        public Input<int>? FileSize { get; set; }

        [Input("md5")]
        public Input<string>? Md5 { get; set; }

        /// <summary>
        /// The path of the file in which you wish to save.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The full absolute path to the file. Conflicts with `ContentBase64`.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        public DbfsFileState()
        {
        }
        public static new DbfsFileState Empty => new DbfsFileState();
    }
}
