// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetAwsAssumeRolePolicy
    {
        /// <summary>
        /// This data source constructs necessary AWS STS assume role policy for you.
        /// 
        /// ## Example Usage
        /// 
        /// End-to-end example of provisioning Cross-account IAM role with databricks_mws_credentials:
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var databricksAccountId = config.RequireObject&lt;dynamic&gt;("databricksAccountId");
        ///     var thisAwsCrossAccountPolicy = Databricks.GetAwsCrossAccountPolicy.Invoke();
        /// 
        ///     var crossAccountPolicy = new Aws.Iam.Policy("crossAccountPolicy", new()
        ///     {
        ///         PolicyDocument = thisAwsCrossAccountPolicy.Apply(getAwsCrossAccountPolicyResult =&gt; getAwsCrossAccountPolicyResult.Json),
        ///     });
        /// 
        ///     var thisAwsAssumeRolePolicy = Databricks.GetAwsAssumeRolePolicy.Invoke(new()
        ///     {
        ///         ExternalId = databricksAccountId,
        ///     });
        /// 
        ///     var crossAccountRole = new Aws.Iam.Role("crossAccountRole", new()
        ///     {
        ///         AssumeRolePolicy = thisAwsAssumeRolePolicy.Apply(getAwsAssumeRolePolicyResult =&gt; getAwsAssumeRolePolicyResult.Json),
        ///         Description = "Grants Databricks full access to VPC resources",
        ///     });
        /// 
        ///     var crossAccountRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("crossAccountRolePolicyAttachment", new()
        ///     {
        ///         PolicyArn = crossAccountPolicy.Arn,
        ///         Role = crossAccountRole.Name,
        ///     });
        /// 
        ///     // required only in case of multi-workspace setup
        ///     var thisMwsCredentials = new Databricks.MwsCredentials("thisMwsCredentials", new()
        ///     {
        ///         AccountId = databricksAccountId,
        ///         CredentialsName = $"{@var.Prefix}-creds",
        ///         RoleArn = crossAccountRole.Arn,
        ///     }, new CustomResourceOptions
        ///     {
        ///         Provider = databricks.Mws,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ## Related Resources
        /// 
        /// The following resources are used in the same context:
        /// 
        /// * Provisioning AWS Databricks E2 with a Hub &amp; Spoke firewall for data exfiltration protection guide
        /// * databricks.getAwsBucketPolicy data to configure a simple access policy for AWS S3 buckets, so that Databricks can access data in it.
        /// * databricks.getAwsCrossAccountPolicy data to construct the necessary AWS cross-account policy for you, which is based on [official documentation](https://docs.databricks.com/administration-guide/account-api/iam-role.html#language-Your%!C(MISSING)2%!A(MISSING)0VPC,%!C(MISSING)2%!A(MISSING)0default).
        /// </summary>
        public static Task<GetAwsAssumeRolePolicyResult> InvokeAsync(GetAwsAssumeRolePolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAwsAssumeRolePolicyResult>("databricks:index/getAwsAssumeRolePolicy:getAwsAssumeRolePolicy", args ?? new GetAwsAssumeRolePolicyArgs(), options.WithDefaults());

        /// <summary>
        /// This data source constructs necessary AWS STS assume role policy for you.
        /// 
        /// ## Example Usage
        /// 
        /// End-to-end example of provisioning Cross-account IAM role with databricks_mws_credentials:
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var databricksAccountId = config.RequireObject&lt;dynamic&gt;("databricksAccountId");
        ///     var thisAwsCrossAccountPolicy = Databricks.GetAwsCrossAccountPolicy.Invoke();
        /// 
        ///     var crossAccountPolicy = new Aws.Iam.Policy("crossAccountPolicy", new()
        ///     {
        ///         PolicyDocument = thisAwsCrossAccountPolicy.Apply(getAwsCrossAccountPolicyResult =&gt; getAwsCrossAccountPolicyResult.Json),
        ///     });
        /// 
        ///     var thisAwsAssumeRolePolicy = Databricks.GetAwsAssumeRolePolicy.Invoke(new()
        ///     {
        ///         ExternalId = databricksAccountId,
        ///     });
        /// 
        ///     var crossAccountRole = new Aws.Iam.Role("crossAccountRole", new()
        ///     {
        ///         AssumeRolePolicy = thisAwsAssumeRolePolicy.Apply(getAwsAssumeRolePolicyResult =&gt; getAwsAssumeRolePolicyResult.Json),
        ///         Description = "Grants Databricks full access to VPC resources",
        ///     });
        /// 
        ///     var crossAccountRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("crossAccountRolePolicyAttachment", new()
        ///     {
        ///         PolicyArn = crossAccountPolicy.Arn,
        ///         Role = crossAccountRole.Name,
        ///     });
        /// 
        ///     // required only in case of multi-workspace setup
        ///     var thisMwsCredentials = new Databricks.MwsCredentials("thisMwsCredentials", new()
        ///     {
        ///         AccountId = databricksAccountId,
        ///         CredentialsName = $"{@var.Prefix}-creds",
        ///         RoleArn = crossAccountRole.Arn,
        ///     }, new CustomResourceOptions
        ///     {
        ///         Provider = databricks.Mws,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ## Related Resources
        /// 
        /// The following resources are used in the same context:
        /// 
        /// * Provisioning AWS Databricks E2 with a Hub &amp; Spoke firewall for data exfiltration protection guide
        /// * databricks.getAwsBucketPolicy data to configure a simple access policy for AWS S3 buckets, so that Databricks can access data in it.
        /// * databricks.getAwsCrossAccountPolicy data to construct the necessary AWS cross-account policy for you, which is based on [official documentation](https://docs.databricks.com/administration-guide/account-api/iam-role.html#language-Your%!C(MISSING)2%!A(MISSING)0VPC,%!C(MISSING)2%!A(MISSING)0default).
        /// </summary>
        public static Output<GetAwsAssumeRolePolicyResult> Invoke(GetAwsAssumeRolePolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAwsAssumeRolePolicyResult>("databricks:index/getAwsAssumeRolePolicy:getAwsAssumeRolePolicy", args ?? new GetAwsAssumeRolePolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAwsAssumeRolePolicyArgs : global::Pulumi.InvokeArgs
    {
        [Input("databricksAccountId")]
        public string? DatabricksAccountId { get; set; }

        /// <summary>
        /// Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/).
        /// </summary>
        [Input("externalId", required: true)]
        public string ExternalId { get; set; } = null!;

        /// <summary>
        /// Either or not this assume role policy should be created for usage log delivery. Defaults to false.
        /// </summary>
        [Input("forLogDelivery")]
        public bool? ForLogDelivery { get; set; }

        public GetAwsAssumeRolePolicyArgs()
        {
        }
        public static new GetAwsAssumeRolePolicyArgs Empty => new GetAwsAssumeRolePolicyArgs();
    }

    public sealed class GetAwsAssumeRolePolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("databricksAccountId")]
        public Input<string>? DatabricksAccountId { get; set; }

        /// <summary>
        /// Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/).
        /// </summary>
        [Input("externalId", required: true)]
        public Input<string> ExternalId { get; set; } = null!;

        /// <summary>
        /// Either or not this assume role policy should be created for usage log delivery. Defaults to false.
        /// </summary>
        [Input("forLogDelivery")]
        public Input<bool>? ForLogDelivery { get; set; }

        public GetAwsAssumeRolePolicyInvokeArgs()
        {
        }
        public static new GetAwsAssumeRolePolicyInvokeArgs Empty => new GetAwsAssumeRolePolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetAwsAssumeRolePolicyResult
    {
        public readonly string? DatabricksAccountId;
        public readonly string ExternalId;
        public readonly bool? ForLogDelivery;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// AWS IAM Policy JSON document
        /// </summary>
        public readonly string Json;

        [OutputConstructor]
        private GetAwsAssumeRolePolicyResult(
            string? databricksAccountId,

            string externalId,

            bool? forLogDelivery,

            string id,

            string json)
        {
            DatabricksAccountId = databricksAccountId;
            ExternalId = externalId;
            ForLogDelivery = forLogDelivery;
            Id = id;
            Json = json;
        }
    }
}
