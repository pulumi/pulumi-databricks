// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    [DatabricksResourceType("databricks:index/sqlTable:SqlTable")]
    public partial class SqlTable : global::Pulumi.CustomResource
    {
        [Output("catalogName")]
        public Output<string> CatalogName { get; private set; } = null!;

        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        [Output("clusterKeys")]
        public Output<ImmutableArray<string>> ClusterKeys { get; private set; } = null!;

        [Output("columns")]
        public Output<ImmutableArray<Outputs.SqlTableColumn>> Columns { get; private set; } = null!;

        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        [Output("dataSourceFormat")]
        public Output<string?> DataSourceFormat { get; private set; } = null!;

        [Output("effectiveProperties")]
        public Output<ImmutableDictionary<string, string>> EffectiveProperties { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("options")]
        public Output<ImmutableDictionary<string, string>?> Options { get; private set; } = null!;

        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        [Output("partitions")]
        public Output<ImmutableArray<string>> Partitions { get; private set; } = null!;

        [Output("properties")]
        public Output<ImmutableDictionary<string, string>?> Properties { get; private set; } = null!;

        [Output("schemaName")]
        public Output<string> SchemaName { get; private set; } = null!;

        [Output("storageCredentialName")]
        public Output<string?> StorageCredentialName { get; private set; } = null!;

        [Output("storageLocation")]
        public Output<string?> StorageLocation { get; private set; } = null!;

        [Output("tableType")]
        public Output<string> TableType { get; private set; } = null!;

        [Output("viewDefinition")]
        public Output<string?> ViewDefinition { get; private set; } = null!;

        [Output("warehouseId")]
        public Output<string?> WarehouseId { get; private set; } = null!;


        /// <summary>
        /// Create a SqlTable resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlTable(string name, SqlTableArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/sqlTable:SqlTable", name, args ?? new SqlTableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SqlTable(string name, Input<string> id, SqlTableState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/sqlTable:SqlTable", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlTable resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlTable Get(string name, Input<string> id, SqlTableState? state = null, CustomResourceOptions? options = null)
        {
            return new SqlTable(name, id, state, options);
        }
    }

    public sealed class SqlTableArgs : global::Pulumi.ResourceArgs
    {
        [Input("catalogName", required: true)]
        public Input<string> CatalogName { get; set; } = null!;

        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("clusterKeys")]
        private InputList<string>? _clusterKeys;
        public InputList<string> ClusterKeys
        {
            get => _clusterKeys ?? (_clusterKeys = new InputList<string>());
            set => _clusterKeys = value;
        }

        [Input("columns")]
        private InputList<Inputs.SqlTableColumnArgs>? _columns;
        public InputList<Inputs.SqlTableColumnArgs> Columns
        {
            get => _columns ?? (_columns = new InputList<Inputs.SqlTableColumnArgs>());
            set => _columns = value;
        }

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("dataSourceFormat")]
        public Input<string>? DataSourceFormat { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("options")]
        private InputMap<string>? _options;
        public InputMap<string> Options
        {
            get => _options ?? (_options = new InputMap<string>());
            set => _options = value;
        }

        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("partitions")]
        private InputList<string>? _partitions;
        public InputList<string> Partitions
        {
            get => _partitions ?? (_partitions = new InputList<string>());
            set => _partitions = value;
        }

        [Input("properties")]
        private InputMap<string>? _properties;
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        [Input("schemaName", required: true)]
        public Input<string> SchemaName { get; set; } = null!;

        [Input("storageCredentialName")]
        public Input<string>? StorageCredentialName { get; set; }

        [Input("storageLocation")]
        public Input<string>? StorageLocation { get; set; }

        [Input("tableType", required: true)]
        public Input<string> TableType { get; set; } = null!;

        [Input("viewDefinition")]
        public Input<string>? ViewDefinition { get; set; }

        [Input("warehouseId")]
        public Input<string>? WarehouseId { get; set; }

        public SqlTableArgs()
        {
        }
        public static new SqlTableArgs Empty => new SqlTableArgs();
    }

    public sealed class SqlTableState : global::Pulumi.ResourceArgs
    {
        [Input("catalogName")]
        public Input<string>? CatalogName { get; set; }

        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("clusterKeys")]
        private InputList<string>? _clusterKeys;
        public InputList<string> ClusterKeys
        {
            get => _clusterKeys ?? (_clusterKeys = new InputList<string>());
            set => _clusterKeys = value;
        }

        [Input("columns")]
        private InputList<Inputs.SqlTableColumnGetArgs>? _columns;
        public InputList<Inputs.SqlTableColumnGetArgs> Columns
        {
            get => _columns ?? (_columns = new InputList<Inputs.SqlTableColumnGetArgs>());
            set => _columns = value;
        }

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("dataSourceFormat")]
        public Input<string>? DataSourceFormat { get; set; }

        [Input("effectiveProperties")]
        private InputMap<string>? _effectiveProperties;
        public InputMap<string> EffectiveProperties
        {
            get => _effectiveProperties ?? (_effectiveProperties = new InputMap<string>());
            set => _effectiveProperties = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("options")]
        private InputMap<string>? _options;
        public InputMap<string> Options
        {
            get => _options ?? (_options = new InputMap<string>());
            set => _options = value;
        }

        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("partitions")]
        private InputList<string>? _partitions;
        public InputList<string> Partitions
        {
            get => _partitions ?? (_partitions = new InputList<string>());
            set => _partitions = value;
        }

        [Input("properties")]
        private InputMap<string>? _properties;
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        [Input("storageCredentialName")]
        public Input<string>? StorageCredentialName { get; set; }

        [Input("storageLocation")]
        public Input<string>? StorageLocation { get; set; }

        [Input("tableType")]
        public Input<string>? TableType { get; set; }

        [Input("viewDefinition")]
        public Input<string>? ViewDefinition { get; set; }

        [Input("warehouseId")]
        public Input<string>? WarehouseId { get; set; }

        public SqlTableState()
        {
        }
        public static new SqlTableState Empty => new SqlTableState();
    }
}
