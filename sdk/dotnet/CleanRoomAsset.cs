// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// Clean room assets are data and code objects -- tables, volumes, and notebooks that are shared with the clean room.
    /// 
    /// ## Example Usage
    /// 
    /// # Example: Clean Room Asset Resource
    /// 
    /// ### Example for sharing a table
    /// This is an example for sharing an asset (table) in a clean room:
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Databricks.Index.CleanRoomsAsset("this", new()
    ///     {
    ///         CleanRoomName = "existing_clean_room",
    ///         Name = "creator.default.myasset",
    ///         AssetType = "TABLE",
    ///         TableLocalDetails = 
    ///         {
    ///             { "localName", "some_creator.default.myasset" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// As of Pulumi v1.5, resources can be imported through configuration.
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   id = "clean_room_name,name,asset_type"
    /// 
    ///   to = databricks_clean_room_asset.this
    /// 
    /// }
    /// 
    /// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/cleanRoomAsset:CleanRoomAsset databricks_clean_room_asset "clean_room_name,name,asset_type"
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/cleanRoomAsset:CleanRoomAsset")]
    public partial class CleanRoomAsset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (integer) - When the asset is added to the clean room, in epoch milliseconds
        /// </summary>
        [Output("addedAt")]
        public Output<int> AddedAt { get; private set; } = null!;

        /// <summary>
        /// The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
        /// </summary>
        [Output("assetType")]
        public Output<string> AssetType { get; private set; } = null!;

        /// <summary>
        /// The name of the clean room this asset belongs to.
        /// This field is required for create operations and populated by the server for responses
        /// </summary>
        [Output("cleanRoomName")]
        public Output<string?> CleanRoomName { get; private set; } = null!;

        /// <summary>
        /// Foreign table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Output("foreignTable")]
        public Output<Outputs.CleanRoomAssetForeignTable?> ForeignTable { get; private set; } = null!;

        /// <summary>
        /// Local details for a foreign that are only available to its owner.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Output("foreignTableLocalDetails")]
        public Output<Outputs.CleanRoomAssetForeignTableLocalDetails?> ForeignTableLocalDetails { get; private set; } = null!;

        /// <summary>
        /// A fully qualified name that uniquely identifies the asset within the clean room.
        /// This is also the name displayed in the clean room UI.
        /// 
        /// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
        /// 
        /// For notebooks, the name is the notebook file name.
        /// For jar analyses, the name is the jar analysis name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Notebook details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **NOTEBOOK_FILE**
        /// </summary>
        [Output("notebook")]
        public Output<Outputs.CleanRoomAssetNotebook?> Notebook { get; private set; } = null!;

        /// <summary>
        /// (string) - The alias of the collaborator who owns this asset
        /// </summary>
        [Output("ownerCollaboratorAlias")]
        public Output<string> OwnerCollaboratorAlias { get; private set; } = null!;

        /// <summary>
        /// (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Output("table")]
        public Output<Outputs.CleanRoomAssetTable?> Table { get; private set; } = null!;

        /// <summary>
        /// Local details for a table that are only available to its owner.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Output("tableLocalDetails")]
        public Output<Outputs.CleanRoomAssetTableLocalDetails?> TableLocalDetails { get; private set; } = null!;

        /// <summary>
        /// View details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Output("view")]
        public Output<Outputs.CleanRoomAssetView?> View { get; private set; } = null!;

        /// <summary>
        /// Local details for a view that are only available to its owner.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Output("viewLocalDetails")]
        public Output<Outputs.CleanRoomAssetViewLocalDetails?> ViewLocalDetails { get; private set; } = null!;

        /// <summary>
        /// Local details for a volume that are only available to its owner.
        /// Present if and only if **asset_type** is **VOLUME**
        /// </summary>
        [Output("volumeLocalDetails")]
        public Output<Outputs.CleanRoomAssetVolumeLocalDetails?> VolumeLocalDetails { get; private set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Output("workspaceId")]
        public Output<string?> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a CleanRoomAsset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CleanRoomAsset(string name, CleanRoomAssetArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/cleanRoomAsset:CleanRoomAsset", name, args ?? new CleanRoomAssetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CleanRoomAsset(string name, Input<string> id, CleanRoomAssetState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/cleanRoomAsset:CleanRoomAsset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CleanRoomAsset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CleanRoomAsset Get(string name, Input<string> id, CleanRoomAssetState? state = null, CustomResourceOptions? options = null)
        {
            return new CleanRoomAsset(name, id, state, options);
        }
    }

    public sealed class CleanRoomAssetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
        /// </summary>
        [Input("assetType", required: true)]
        public Input<string> AssetType { get; set; } = null!;

        /// <summary>
        /// The name of the clean room this asset belongs to.
        /// This field is required for create operations and populated by the server for responses
        /// </summary>
        [Input("cleanRoomName")]
        public Input<string>? CleanRoomName { get; set; }

        /// <summary>
        /// Foreign table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Input("foreignTable")]
        public Input<Inputs.CleanRoomAssetForeignTableArgs>? ForeignTable { get; set; }

        /// <summary>
        /// Local details for a foreign that are only available to its owner.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Input("foreignTableLocalDetails")]
        public Input<Inputs.CleanRoomAssetForeignTableLocalDetailsArgs>? ForeignTableLocalDetails { get; set; }

        /// <summary>
        /// A fully qualified name that uniquely identifies the asset within the clean room.
        /// This is also the name displayed in the clean room UI.
        /// 
        /// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
        /// 
        /// For notebooks, the name is the notebook file name.
        /// For jar analyses, the name is the jar analysis name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Notebook details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **NOTEBOOK_FILE**
        /// </summary>
        [Input("notebook")]
        public Input<Inputs.CleanRoomAssetNotebookArgs>? Notebook { get; set; }

        /// <summary>
        /// Table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Input("table")]
        public Input<Inputs.CleanRoomAssetTableArgs>? Table { get; set; }

        /// <summary>
        /// Local details for a table that are only available to its owner.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Input("tableLocalDetails")]
        public Input<Inputs.CleanRoomAssetTableLocalDetailsArgs>? TableLocalDetails { get; set; }

        /// <summary>
        /// View details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Input("view")]
        public Input<Inputs.CleanRoomAssetViewArgs>? View { get; set; }

        /// <summary>
        /// Local details for a view that are only available to its owner.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Input("viewLocalDetails")]
        public Input<Inputs.CleanRoomAssetViewLocalDetailsArgs>? ViewLocalDetails { get; set; }

        /// <summary>
        /// Local details for a volume that are only available to its owner.
        /// Present if and only if **asset_type** is **VOLUME**
        /// </summary>
        [Input("volumeLocalDetails")]
        public Input<Inputs.CleanRoomAssetVolumeLocalDetailsArgs>? VolumeLocalDetails { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public CleanRoomAssetArgs()
        {
        }
        public static new CleanRoomAssetArgs Empty => new CleanRoomAssetArgs();
    }

    public sealed class CleanRoomAssetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (integer) - When the asset is added to the clean room, in epoch milliseconds
        /// </summary>
        [Input("addedAt")]
        public Input<int>? AddedAt { get; set; }

        /// <summary>
        /// The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
        /// </summary>
        [Input("assetType")]
        public Input<string>? AssetType { get; set; }

        /// <summary>
        /// The name of the clean room this asset belongs to.
        /// This field is required for create operations and populated by the server for responses
        /// </summary>
        [Input("cleanRoomName")]
        public Input<string>? CleanRoomName { get; set; }

        /// <summary>
        /// Foreign table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Input("foreignTable")]
        public Input<Inputs.CleanRoomAssetForeignTableGetArgs>? ForeignTable { get; set; }

        /// <summary>
        /// Local details for a foreign that are only available to its owner.
        /// Present if and only if **asset_type** is **FOREIGN_TABLE**
        /// </summary>
        [Input("foreignTableLocalDetails")]
        public Input<Inputs.CleanRoomAssetForeignTableLocalDetailsGetArgs>? ForeignTableLocalDetails { get; set; }

        /// <summary>
        /// A fully qualified name that uniquely identifies the asset within the clean room.
        /// This is also the name displayed in the clean room UI.
        /// 
        /// For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
        /// 
        /// For notebooks, the name is the notebook file name.
        /// For jar analyses, the name is the jar analysis name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Notebook details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **NOTEBOOK_FILE**
        /// </summary>
        [Input("notebook")]
        public Input<Inputs.CleanRoomAssetNotebookGetArgs>? Notebook { get; set; }

        /// <summary>
        /// (string) - The alias of the collaborator who owns this asset
        /// </summary>
        [Input("ownerCollaboratorAlias")]
        public Input<string>? OwnerCollaboratorAlias { get; set; }

        /// <summary>
        /// (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Table details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Input("table")]
        public Input<Inputs.CleanRoomAssetTableGetArgs>? Table { get; set; }

        /// <summary>
        /// Local details for a table that are only available to its owner.
        /// Present if and only if **asset_type** is **TABLE**
        /// </summary>
        [Input("tableLocalDetails")]
        public Input<Inputs.CleanRoomAssetTableLocalDetailsGetArgs>? TableLocalDetails { get; set; }

        /// <summary>
        /// View details available to all collaborators of the clean room.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Input("view")]
        public Input<Inputs.CleanRoomAssetViewGetArgs>? View { get; set; }

        /// <summary>
        /// Local details for a view that are only available to its owner.
        /// Present if and only if **asset_type** is **VIEW**
        /// </summary>
        [Input("viewLocalDetails")]
        public Input<Inputs.CleanRoomAssetViewLocalDetailsGetArgs>? ViewLocalDetails { get; set; }

        /// <summary>
        /// Local details for a volume that are only available to its owner.
        /// Present if and only if **asset_type** is **VOLUME**
        /// </summary>
        [Input("volumeLocalDetails")]
        public Input<Inputs.CleanRoomAssetVolumeLocalDetailsGetArgs>? VolumeLocalDetails { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public CleanRoomAssetState()
        {
        }
        public static new CleanRoomAssetState Empty => new CleanRoomAssetState();
    }
}
