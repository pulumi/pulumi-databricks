// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public static class GetDatabaseInstances
    {
        /// <summary>
        /// This data source can be used to fetch the list of Database Instances within the workspace.
        /// The list can then be accessed via the data object's `DatabaseInstances` field.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Getting a list of all Database Instances:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Databricks.GetDatabaseInstances.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["allDatabaseInstances"] = all.Apply(getDatabaseInstancesResult =&gt; getDatabaseInstancesResult.DatabaseInstances),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetDatabaseInstancesResult> InvokeAsync(GetDatabaseInstancesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseInstancesResult>("databricks:index/getDatabaseInstances:getDatabaseInstances", args ?? new GetDatabaseInstancesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to fetch the list of Database Instances within the workspace.
        /// The list can then be accessed via the data object's `DatabaseInstances` field.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Getting a list of all Database Instances:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Databricks.GetDatabaseInstances.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["allDatabaseInstances"] = all.Apply(getDatabaseInstancesResult =&gt; getDatabaseInstancesResult.DatabaseInstances),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseInstancesResult> Invoke(GetDatabaseInstancesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseInstancesResult>("databricks:index/getDatabaseInstances:getDatabaseInstances", args ?? new GetDatabaseInstancesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to fetch the list of Database Instances within the workspace.
        /// The list can then be accessed via the data object's `DatabaseInstances` field.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// Getting a list of all Database Instances:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Databricks = Pulumi.Databricks;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Databricks.GetDatabaseInstances.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["allDatabaseInstances"] = all.Apply(getDatabaseInstancesResult =&gt; getDatabaseInstancesResult.DatabaseInstances),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseInstancesResult> Invoke(GetDatabaseInstancesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseInstancesResult>("databricks:index/getDatabaseInstances:getDatabaseInstances", args ?? new GetDatabaseInstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseInstancesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public string? WorkspaceId { get; set; }

        public GetDatabaseInstancesArgs()
        {
        }
        public static new GetDatabaseInstancesArgs Empty => new GetDatabaseInstancesArgs();
    }

    public sealed class GetDatabaseInstancesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public GetDatabaseInstancesInvokeArgs()
        {
        }
        public static new GetDatabaseInstancesInvokeArgs Empty => new GetDatabaseInstancesInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseInstancesResult
    {
        public readonly ImmutableArray<Outputs.GetDatabaseInstancesDatabaseInstanceResult> DatabaseInstances;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? WorkspaceId;

        [OutputConstructor]
        private GetDatabaseInstancesResult(
            ImmutableArray<Outputs.GetDatabaseInstancesDatabaseInstanceResult> databaseInstances,

            string id,

            string? workspaceId)
        {
            DatabaseInstances = databaseInstances;
            Id = id;
            WorkspaceId = workspaceId;
        }
    }
}
