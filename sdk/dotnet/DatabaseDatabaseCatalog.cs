// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    /// <summary>
    /// Database Catalogs are databases inside a Lakebase Database Instance which are synced into a Postgres Catalog inside Unity Catalog.
    /// 
    /// ## Example Usage
    /// 
    /// ### Example
    /// 
    /// This example creates a Database Catalog based on an existing database in the Database Instance
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Databricks.DatabaseDatabaseCatalog("this", new()
    ///     {
    ///         Name = "my_registered_catalog",
    ///         DatabaseInstanceName = "my-database-instance",
    ///         DatabaseName = "databricks_postgres",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// This example creates a Database Catalog along with a new database inside an existing Database Instance
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Databricks.DatabaseDatabaseCatalog("this", new()
    ///     {
    ///         Name = "my_registered_catalog",
    ///         DatabaseInstanceName = "my-database-instance",
    ///         DatabaseName = "new_registered_catalog_database",
    ///         CreateDatabaseIfNotExists = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// This example creates a DatabaseInstance and then a Database Catalog inside it
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Databricks = Pulumi.Databricks;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Databricks.DatabaseInstance("instance", new()
    ///     {
    ///         Name = "my-database-instance",
    ///         Capacity = "CU_1",
    ///     });
    /// 
    ///     var catalog = new Databricks.DatabaseDatabaseCatalog("catalog", new()
    ///     {
    ///         Name = "my_registered_catalog",
    ///         DatabaseInstanceName = instance.Name,
    ///         DatabaseName = "new_registered_catalog_database",
    ///         CreateDatabaseIfNotExists = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// As of Pulumi v1.5, resources can be imported through configuration.
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   id = "name"
    /// 
    ///   to = databricks_database_database_catalog.this
    /// 
    /// }
    /// 
    /// If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
    /// 
    /// ```sh
    /// $ pulumi import databricks:index/databaseDatabaseCatalog:DatabaseDatabaseCatalog databricks_database_database_catalog "name"
    /// ```
    /// </summary>
    [DatabricksResourceType("databricks:index/databaseDatabaseCatalog:DatabaseDatabaseCatalog")]
    public partial class DatabaseDatabaseCatalog : global::Pulumi.CustomResource
    {
        [Output("createDatabaseIfNotExists")]
        public Output<bool> CreateDatabaseIfNotExists { get; private set; } = null!;

        /// <summary>
        /// The name of the DatabaseInstance housing the database
        /// </summary>
        [Output("databaseInstanceName")]
        public Output<string> DatabaseInstanceName { get; private set; } = null!;

        /// <summary>
        /// The name of the database (in a instance) associated with the catalog
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The name of the catalog in UC
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (string)
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Output("workspaceId")]
        public Output<string?> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseDatabaseCatalog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseDatabaseCatalog(string name, DatabaseDatabaseCatalogArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/databaseDatabaseCatalog:DatabaseDatabaseCatalog", name, args ?? new DatabaseDatabaseCatalogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseDatabaseCatalog(string name, Input<string> id, DatabaseDatabaseCatalogState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/databaseDatabaseCatalog:DatabaseDatabaseCatalog", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseDatabaseCatalog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseDatabaseCatalog Get(string name, Input<string> id, DatabaseDatabaseCatalogState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseDatabaseCatalog(name, id, state, options);
        }
    }

    public sealed class DatabaseDatabaseCatalogArgs : global::Pulumi.ResourceArgs
    {
        [Input("createDatabaseIfNotExists")]
        public Input<bool>? CreateDatabaseIfNotExists { get; set; }

        /// <summary>
        /// The name of the DatabaseInstance housing the database
        /// </summary>
        [Input("databaseInstanceName", required: true)]
        public Input<string> DatabaseInstanceName { get; set; } = null!;

        /// <summary>
        /// The name of the database (in a instance) associated with the catalog
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the catalog in UC
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public DatabaseDatabaseCatalogArgs()
        {
        }
        public static new DatabaseDatabaseCatalogArgs Empty => new DatabaseDatabaseCatalogArgs();
    }

    public sealed class DatabaseDatabaseCatalogState : global::Pulumi.ResourceArgs
    {
        [Input("createDatabaseIfNotExists")]
        public Input<bool>? CreateDatabaseIfNotExists { get; set; }

        /// <summary>
        /// The name of the DatabaseInstance housing the database
        /// </summary>
        [Input("databaseInstanceName")]
        public Input<string>? DatabaseInstanceName { get; set; }

        /// <summary>
        /// The name of the database (in a instance) associated with the catalog
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// The name of the catalog in UC
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Workspace ID of the resource
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public DatabaseDatabaseCatalogState()
        {
        }
        public static new DatabaseDatabaseCatalogState Empty => new DatabaseDatabaseCatalogState();
    }
}
