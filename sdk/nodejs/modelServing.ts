// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ModelServing extends pulumi.CustomResource {
    /**
     * Get an existing ModelServing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ModelServingState, opts?: pulumi.CustomResourceOptions): ModelServing {
        return new ModelServing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/modelServing:ModelServing';

    /**
     * Returns true if the given object is an instance of ModelServing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ModelServing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ModelServing.__pulumiType;
    }

    public readonly aiGateway!: pulumi.Output<outputs.ModelServingAiGateway | undefined>;
    public readonly config!: pulumi.Output<outputs.ModelServingConfig>;
    public readonly name!: pulumi.Output<string>;
    public readonly rateLimits!: pulumi.Output<outputs.ModelServingRateLimit[] | undefined>;
    public readonly routeOptimized!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly servingEndpointId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.ModelServingTag[] | undefined>;

    /**
     * Create a ModelServing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ModelServingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ModelServingArgs | ModelServingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ModelServingState | undefined;
            resourceInputs["aiGateway"] = state ? state.aiGateway : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rateLimits"] = state ? state.rateLimits : undefined;
            resourceInputs["routeOptimized"] = state ? state.routeOptimized : undefined;
            resourceInputs["servingEndpointId"] = state ? state.servingEndpointId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ModelServingArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            resourceInputs["aiGateway"] = args ? args.aiGateway : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rateLimits"] = args ? args.rateLimits : undefined;
            resourceInputs["routeOptimized"] = args ? args.routeOptimized : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["servingEndpointId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ModelServing.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ModelServing resources.
 */
export interface ModelServingState {
    aiGateway?: pulumi.Input<inputs.ModelServingAiGateway>;
    config?: pulumi.Input<inputs.ModelServingConfig>;
    name?: pulumi.Input<string>;
    rateLimits?: pulumi.Input<pulumi.Input<inputs.ModelServingRateLimit>[]>;
    routeOptimized?: pulumi.Input<boolean>;
    servingEndpointId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ModelServingTag>[]>;
}

/**
 * The set of arguments for constructing a ModelServing resource.
 */
export interface ModelServingArgs {
    aiGateway?: pulumi.Input<inputs.ModelServingAiGateway>;
    config: pulumi.Input<inputs.ModelServingConfig>;
    name?: pulumi.Input<string>;
    rateLimits?: pulumi.Input<pulumi.Input<inputs.ModelServingRateLimit>[]>;
    routeOptimized?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.ModelServingTag>[]>;
}
