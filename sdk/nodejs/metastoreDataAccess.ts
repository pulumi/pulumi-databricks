// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > **Note** This resource could be used with account or workspace-level provider.
 *
 * Optionally, each databricks.Metastore can have a default databricks.StorageCredential defined as `databricks.MetastoreDataAccess`. This will be used by Unity Catalog to access data in the root storage location if defined.
 *
 * ## Example Usage
 *
 * For AWS
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const thisMetastore = new databricks.Metastore("thisMetastore", {
 *     storageRoot: `s3://${aws_s3_bucket.metastore.id}/metastore`,
 *     owner: "uc admins",
 *     region: "us-east-1",
 *     forceDestroy: true,
 * });
 * const thisMetastoreDataAccess = new databricks.MetastoreDataAccess("thisMetastoreDataAccess", {
 *     metastoreId: thisMetastore.id,
 *     awsIamRole: {
 *         roleArn: aws_iam_role.metastore_data_access.arn,
 *     },
 *     isDefault: true,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * For Azure using managed identity as credential (recommended)
 *
 * ## Import
 *
 * This resource can be imported by combination of metastore id and the data access name.
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/metastoreDataAccess:MetastoreDataAccess this '<metastore_id>|<name>'
 * ```
 */
export class MetastoreDataAccess extends pulumi.CustomResource {
    /**
     * Get an existing MetastoreDataAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetastoreDataAccessState, opts?: pulumi.CustomResourceOptions): MetastoreDataAccess {
        return new MetastoreDataAccess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/metastoreDataAccess:MetastoreDataAccess';

    /**
     * Returns true if the given object is an instance of MetastoreDataAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetastoreDataAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetastoreDataAccess.__pulumiType;
    }

    public readonly awsIamRole!: pulumi.Output<outputs.MetastoreDataAccessAwsIamRole | undefined>;
    public readonly azureManagedIdentity!: pulumi.Output<outputs.MetastoreDataAccessAzureManagedIdentity | undefined>;
    public readonly azureServicePrincipal!: pulumi.Output<outputs.MetastoreDataAccessAzureServicePrincipal | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly databricksGcpServiceAccount!: pulumi.Output<outputs.MetastoreDataAccessDatabricksGcpServiceAccount>;
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    public readonly forceUpdate!: pulumi.Output<boolean | undefined>;
    public readonly gcpServiceAccountKey!: pulumi.Output<outputs.MetastoreDataAccessGcpServiceAccountKey | undefined>;
    /**
     * whether to set this credential as the default for the metastore. In practice, this should always be true.
     */
    public readonly isDefault!: pulumi.Output<boolean | undefined>;
    public readonly metastoreId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly owner!: pulumi.Output<string>;
    public readonly readOnly!: pulumi.Output<boolean | undefined>;
    public readonly skipValidation!: pulumi.Output<boolean | undefined>;

    /**
     * Create a MetastoreDataAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MetastoreDataAccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetastoreDataAccessArgs | MetastoreDataAccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetastoreDataAccessState | undefined;
            resourceInputs["awsIamRole"] = state ? state.awsIamRole : undefined;
            resourceInputs["azureManagedIdentity"] = state ? state.azureManagedIdentity : undefined;
            resourceInputs["azureServicePrincipal"] = state ? state.azureServicePrincipal : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["databricksGcpServiceAccount"] = state ? state.databricksGcpServiceAccount : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["forceUpdate"] = state ? state.forceUpdate : undefined;
            resourceInputs["gcpServiceAccountKey"] = state ? state.gcpServiceAccountKey : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["metastoreId"] = state ? state.metastoreId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["skipValidation"] = state ? state.skipValidation : undefined;
        } else {
            const args = argsOrState as MetastoreDataAccessArgs | undefined;
            resourceInputs["awsIamRole"] = args ? args.awsIamRole : undefined;
            resourceInputs["azureManagedIdentity"] = args ? args.azureManagedIdentity : undefined;
            resourceInputs["azureServicePrincipal"] = args ? args.azureServicePrincipal : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["databricksGcpServiceAccount"] = args ? args.databricksGcpServiceAccount : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["forceUpdate"] = args ? args.forceUpdate : undefined;
            resourceInputs["gcpServiceAccountKey"] = args ? args.gcpServiceAccountKey : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["metastoreId"] = args ? args.metastoreId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["skipValidation"] = args ? args.skipValidation : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetastoreDataAccess.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetastoreDataAccess resources.
 */
export interface MetastoreDataAccessState {
    awsIamRole?: pulumi.Input<inputs.MetastoreDataAccessAwsIamRole>;
    azureManagedIdentity?: pulumi.Input<inputs.MetastoreDataAccessAzureManagedIdentity>;
    azureServicePrincipal?: pulumi.Input<inputs.MetastoreDataAccessAzureServicePrincipal>;
    comment?: pulumi.Input<string>;
    databricksGcpServiceAccount?: pulumi.Input<inputs.MetastoreDataAccessDatabricksGcpServiceAccount>;
    forceDestroy?: pulumi.Input<boolean>;
    forceUpdate?: pulumi.Input<boolean>;
    gcpServiceAccountKey?: pulumi.Input<inputs.MetastoreDataAccessGcpServiceAccountKey>;
    /**
     * whether to set this credential as the default for the metastore. In practice, this should always be true.
     */
    isDefault?: pulumi.Input<boolean>;
    metastoreId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    skipValidation?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MetastoreDataAccess resource.
 */
export interface MetastoreDataAccessArgs {
    awsIamRole?: pulumi.Input<inputs.MetastoreDataAccessAwsIamRole>;
    azureManagedIdentity?: pulumi.Input<inputs.MetastoreDataAccessAzureManagedIdentity>;
    azureServicePrincipal?: pulumi.Input<inputs.MetastoreDataAccessAzureServicePrincipal>;
    comment?: pulumi.Input<string>;
    databricksGcpServiceAccount?: pulumi.Input<inputs.MetastoreDataAccessDatabricksGcpServiceAccount>;
    forceDestroy?: pulumi.Input<boolean>;
    forceUpdate?: pulumi.Input<boolean>;
    gcpServiceAccountKey?: pulumi.Input<inputs.MetastoreDataAccessGcpServiceAccountKey>;
    /**
     * whether to set this credential as the default for the metastore. In practice, this should always be true.
     */
    isDefault?: pulumi.Input<boolean>;
    metastoreId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    skipValidation?: pulumi.Input<boolean>;
}
