// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NotificationDestination extends pulumi.CustomResource {
    /**
     * Get an existing NotificationDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationDestinationState, opts?: pulumi.CustomResourceOptions): NotificationDestination {
        return new NotificationDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/notificationDestination:NotificationDestination';

    /**
     * Returns true if the given object is an instance of NotificationDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationDestination.__pulumiType;
    }

    public readonly config!: pulumi.Output<outputs.NotificationDestinationConfig | undefined>;
    public readonly destinationType!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;

    /**
     * Create a NotificationDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationDestinationArgs | NotificationDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationDestinationState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["destinationType"] = state ? state.destinationType : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
        } else {
            const args = argsOrState as NotificationDestinationArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["destinationType"] = args ? args.destinationType : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationDestination.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotificationDestination resources.
 */
export interface NotificationDestinationState {
    config?: pulumi.Input<inputs.NotificationDestinationConfig>;
    destinationType?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NotificationDestination resource.
 */
export interface NotificationDestinationArgs {
    config?: pulumi.Input<inputs.NotificationDestinationConfig>;
    destinationType?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
}
