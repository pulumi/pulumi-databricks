// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * The resource can be imported using combination of securable type (`table`, `catalog`, `foreign_connection`, ...), it's name and `principal`:
 *
 *  bash
 *
 * ```sh
 * $ pulumi import databricks:index/grant:Grant this catalog/abc/user_name
 * ```
 */
export class Grant extends pulumi.CustomResource {
    /**
     * Get an existing Grant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GrantState, opts?: pulumi.CustomResourceOptions): Grant {
        return new Grant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/grant:Grant';

    /**
     * Returns true if the given object is an instance of Grant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Grant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Grant.__pulumiType;
    }

    public readonly catalog!: pulumi.Output<string | undefined>;
    public readonly externalLocation!: pulumi.Output<string | undefined>;
    public readonly foreignConnection!: pulumi.Output<string | undefined>;
    public readonly function!: pulumi.Output<string | undefined>;
    public readonly metastore!: pulumi.Output<string | undefined>;
    public readonly model!: pulumi.Output<string | undefined>;
    public readonly pipeline!: pulumi.Output<string | undefined>;
    public readonly principal!: pulumi.Output<string>;
    public readonly privileges!: pulumi.Output<string[]>;
    public readonly recipient!: pulumi.Output<string | undefined>;
    public readonly schema!: pulumi.Output<string | undefined>;
    public readonly share!: pulumi.Output<string | undefined>;
    public readonly storageCredential!: pulumi.Output<string | undefined>;
    public readonly table!: pulumi.Output<string | undefined>;
    public readonly volume!: pulumi.Output<string | undefined>;

    /**
     * Create a Grant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GrantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GrantArgs | GrantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GrantState | undefined;
            resourceInputs["catalog"] = state ? state.catalog : undefined;
            resourceInputs["externalLocation"] = state ? state.externalLocation : undefined;
            resourceInputs["foreignConnection"] = state ? state.foreignConnection : undefined;
            resourceInputs["function"] = state ? state.function : undefined;
            resourceInputs["metastore"] = state ? state.metastore : undefined;
            resourceInputs["model"] = state ? state.model : undefined;
            resourceInputs["pipeline"] = state ? state.pipeline : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["privileges"] = state ? state.privileges : undefined;
            resourceInputs["recipient"] = state ? state.recipient : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["share"] = state ? state.share : undefined;
            resourceInputs["storageCredential"] = state ? state.storageCredential : undefined;
            resourceInputs["table"] = state ? state.table : undefined;
            resourceInputs["volume"] = state ? state.volume : undefined;
        } else {
            const args = argsOrState as GrantArgs | undefined;
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            if ((!args || args.privileges === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privileges'");
            }
            resourceInputs["catalog"] = args ? args.catalog : undefined;
            resourceInputs["externalLocation"] = args ? args.externalLocation : undefined;
            resourceInputs["foreignConnection"] = args ? args.foreignConnection : undefined;
            resourceInputs["function"] = args ? args.function : undefined;
            resourceInputs["metastore"] = args ? args.metastore : undefined;
            resourceInputs["model"] = args ? args.model : undefined;
            resourceInputs["pipeline"] = args ? args.pipeline : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["privileges"] = args ? args.privileges : undefined;
            resourceInputs["recipient"] = args ? args.recipient : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["share"] = args ? args.share : undefined;
            resourceInputs["storageCredential"] = args ? args.storageCredential : undefined;
            resourceInputs["table"] = args ? args.table : undefined;
            resourceInputs["volume"] = args ? args.volume : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Grant.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Grant resources.
 */
export interface GrantState {
    catalog?: pulumi.Input<string>;
    externalLocation?: pulumi.Input<string>;
    foreignConnection?: pulumi.Input<string>;
    function?: pulumi.Input<string>;
    metastore?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    pipeline?: pulumi.Input<string>;
    principal?: pulumi.Input<string>;
    privileges?: pulumi.Input<pulumi.Input<string>[]>;
    recipient?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    share?: pulumi.Input<string>;
    storageCredential?: pulumi.Input<string>;
    table?: pulumi.Input<string>;
    volume?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Grant resource.
 */
export interface GrantArgs {
    catalog?: pulumi.Input<string>;
    externalLocation?: pulumi.Input<string>;
    foreignConnection?: pulumi.Input<string>;
    function?: pulumi.Input<string>;
    metastore?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    pipeline?: pulumi.Input<string>;
    principal: pulumi.Input<string>;
    privileges: pulumi.Input<pulumi.Input<string>[]>;
    recipient?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    share?: pulumi.Input<string>;
    storageCredential?: pulumi.Input<string>;
    table?: pulumi.Input<string>;
    volume?: pulumi.Input<string>;
}
