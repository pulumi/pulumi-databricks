// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * These resources are invoked in the workspace context.
 *
 * ## Example Usage
 *
 * In workspace context, adding account-level user to a workspace:
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * // Use the account provider
 * const me = databricks.getUser({
 *     userName: "me@example.com",
 * });
 * const addUser = new databricks.PermissionAssignment("add_user", {
 *     principalId: me.then(me => me.id),
 *     permissions: ["USER"],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * In workspace context, adding account-level service principal to a workspace:
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * // Use the account provider
 * const sp = databricks.getServicePrincipal({
 *     displayName: "Automation-only SP",
 * });
 * const addAdminSpn = new databricks.PermissionAssignment("add_admin_spn", {
 *     principalId: sp.then(sp => sp.id),
 *     permissions: ["ADMIN"],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * In workspace context, adding account-level group to a workspace:
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * // Use the account provider
 * const accountLevel = databricks.getGroup({
 *     displayName: "example-group",
 * });
 * // Use the workspace provider
 * const _this = new databricks.PermissionAssignment("this", {
 *     principalId: accountLevel.then(accountLevel => accountLevel.id),
 *     permissions: ["USER"],
 * });
 * const workspaceLevel = databricks.getGroup({
 *     displayName: "example-group",
 * });
 * export const databricksGroupId = workspaceLevel.then(workspaceLevel => workspaceLevel.id);
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Related Resources
 *
 * The following resources are used in the same context:
 *
 * * databricks.Group to manage [groups in Databricks Workspace](https://docs.databricks.com/administration-guide/users-groups/groups.html) or [Account Console](https://accounts.cloud.databricks.com/) (for AWS deployments).
 * * databricks.Group data to retrieve information about databricks.Group members, entitlements and instance profiles.
 * * databricks.GroupMember to attach users and groups as group members.
 * * databricks.MwsPermissionAssignment to manage permission assignment from an account context
 *
 * ## Import
 *
 * The resource `databricks_permission_assignment` can be imported using the principal id
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/permissionAssignment:PermissionAssignment this principal_id
 * ```
 */
export class PermissionAssignment extends pulumi.CustomResource {
    /**
     * Get an existing PermissionAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionAssignmentState, opts?: pulumi.CustomResourceOptions): PermissionAssignment {
        return new PermissionAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/permissionAssignment:PermissionAssignment';

    /**
     * Returns true if the given object is an instance of PermissionAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PermissionAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PermissionAssignment.__pulumiType;
    }

    /**
     * The list of workspace permissions to assign to the principal:
     * * `"USER"` - Can access the workspace with basic privileges.
     * * `"ADMIN"` - Can access the workspace and has workspace admin privileges to manage users and groups, workspace configurations, and more.
     */
    public readonly permissions!: pulumi.Output<string[]>;
    public readonly principalId!: pulumi.Output<number>;

    /**
     * Create a PermissionAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PermissionAssignmentArgs | PermissionAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PermissionAssignmentState | undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
        } else {
            const args = argsOrState as PermissionAssignmentArgs | undefined;
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.principalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PermissionAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PermissionAssignment resources.
 */
export interface PermissionAssignmentState {
    /**
     * The list of workspace permissions to assign to the principal:
     * * `"USER"` - Can access the workspace with basic privileges.
     * * `"ADMIN"` - Can access the workspace and has workspace admin privileges to manage users and groups, workspace configurations, and more.
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    principalId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PermissionAssignment resource.
 */
export interface PermissionAssignmentArgs {
    /**
     * The list of workspace permissions to assign to the principal:
     * * `"USER"` - Can access the workspace with basic privileges.
     * * `"ADMIN"` - Can access the workspace and has workspace admin privileges to manage users and groups, workspace configurations, and more.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
    principalId: pulumi.Input<number>;
}
