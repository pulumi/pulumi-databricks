// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ClusterPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ClusterPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterPolicyState, opts?: pulumi.CustomResourceOptions): ClusterPolicy {
        return new ClusterPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/clusterPolicy:ClusterPolicy';

    /**
     * Returns true if the given object is an instance of ClusterPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterPolicy.__pulumiType;
    }

    public readonly definition!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly libraries!: pulumi.Output<outputs.ClusterPolicyLibrary[] | undefined>;
    public readonly maxClustersPerUser!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly policyFamilyDefinitionOverrides!: pulumi.Output<string | undefined>;
    public readonly policyFamilyId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly policyId!: pulumi.Output<string>;

    /**
     * Create a ClusterPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterPolicyArgs | ClusterPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterPolicyState | undefined;
            resourceInputs["definition"] = state ? state.definition : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["libraries"] = state ? state.libraries : undefined;
            resourceInputs["maxClustersPerUser"] = state ? state.maxClustersPerUser : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyFamilyDefinitionOverrides"] = state ? state.policyFamilyDefinitionOverrides : undefined;
            resourceInputs["policyFamilyId"] = state ? state.policyFamilyId : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
        } else {
            const args = argsOrState as ClusterPolicyArgs | undefined;
            resourceInputs["definition"] = args ? args.definition : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["libraries"] = args ? args.libraries : undefined;
            resourceInputs["maxClustersPerUser"] = args ? args.maxClustersPerUser : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyFamilyDefinitionOverrides"] = args ? args.policyFamilyDefinitionOverrides : undefined;
            resourceInputs["policyFamilyId"] = args ? args.policyFamilyId : undefined;
            resourceInputs["policyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterPolicy resources.
 */
export interface ClusterPolicyState {
    definition?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.ClusterPolicyLibrary>[]>;
    maxClustersPerUser?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    policyFamilyDefinitionOverrides?: pulumi.Input<string>;
    policyFamilyId?: pulumi.Input<string>;
    policyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterPolicy resource.
 */
export interface ClusterPolicyArgs {
    definition?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.ClusterPolicyLibrary>[]>;
    maxClustersPerUser?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    policyFamilyDefinitionOverrides?: pulumi.Input<string>;
    policyFamilyId?: pulumi.Input<string>;
}
