// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource is used to manage [Databricks SQL warehouses](https://docs.databricks.com/sql/admin/sql-endpoints.html). To create [SQL warehouses](https://docs.databricks.com/sql/get-started/concepts.html) you must have `databricksSqlAccess` on your databricks.Group or databricks_user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const me = databricks.getCurrentUser({});
 * const _this = new databricks.SqlEndpoint("this", {
 *     clusterSize: "Small",
 *     maxNumClusters: 1,
 *     tags: {
 *         customTags: [{
 *             key: "City",
 *             value: "Amsterdam",
 *         }],
 *     },
 * });
 * ```
 * ## Access control
 *
 * * databricks.Permissions can control which groups or individual users can *Can Use* or *Can Manage* SQL warehouses.
 * * `databricksSqlAccess` on databricks.Group or databricks_user.
 *
 * ## Related resources
 *
 * The following resources are often used in the same context:
 *
 * * End to end workspace management guide.
 * * databricks.InstanceProfile to manage AWS EC2 instance profiles that users can launch databricks.Cluster and access data, like databricks_mount.
 * * databricks.SqlDashboard to manage Databricks SQL [Dashboards](https://docs.databricks.com/sql/user/dashboards/index.html).
 * * databricks.SqlGlobalConfig to configure the security policy, databricks_instance_profile, and [data access properties](https://docs.databricks.com/sql/admin/data-access-configuration.html) for all databricks.SqlEndpoint of workspace.
 * * databricks.SqlPermissions to manage data object access control lists in Databricks workspaces for things like tables, views, databases, and [more](https://docs.databricks.com/security/access-control/table-acls/object-privileges.html).
 *
 * ## Import
 *
 * You can import a `databricks_sql_endpoint` resource with ID like the followingbash
 *
 * ```sh
 *  $ pulumi import databricks:index/sqlEndpoint:SqlEndpoint this <endpoint-id>
 * ```
 */
export class SqlEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing SqlEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlEndpointState, opts?: pulumi.CustomResourceOptions): SqlEndpoint {
        return new SqlEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/sqlEndpoint:SqlEndpoint';

    /**
     * Returns true if the given object is an instance of SqlEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlEndpoint.__pulumiType;
    }

    /**
     * Time in minutes until an idle SQL warehouse terminates all clusters and stops. This field is optional. The default is 120, set to 0 to disable the auto stop.
     */
    public readonly autoStopMins!: pulumi.Output<number | undefined>;
    /**
     * block, consisting of following fields:
     */
    public readonly channel!: pulumi.Output<outputs.SqlEndpointChannel | undefined>;
    /**
     * The size of the clusters allocated to the endpoint: "2X-Small", "X-Small", "Small", "Medium", "Large", "X-Large", "2X-Large", "3X-Large", "4X-Large".
     */
    public readonly clusterSize!: pulumi.Output<string>;
    /**
     * ID of the data source for this endpoint. This is used to bind an Databricks SQL query to an endpoint.
     */
    public readonly dataSourceId!: pulumi.Output<string>;
    /**
     * Whether to enable [Photon](https://databricks.com/product/delta-engine). This field is optional and is enabled by default.
     */
    public readonly enablePhoton!: pulumi.Output<boolean | undefined>;
    /**
     * Whether this SQL warehouse is a serverless endpoint. If this value is true explicitly or through the default, you **must** also set `warehouseType` field to `pro`.
     */
    public readonly enableServerlessCompute!: pulumi.Output<boolean | undefined>;
    public readonly instanceProfileArn!: pulumi.Output<string | undefined>;
    /**
     * JDBC connection string.
     */
    public readonly jdbcUrl!: pulumi.Output<string>;
    /**
     * Maximum number of clusters available when a SQL warehouse is running. This field is required. If multi-cluster load balancing is not enabled, this is default to `1`.
     */
    public readonly maxNumClusters!: pulumi.Output<number | undefined>;
    /**
     * Minimum number of clusters available when a SQL warehouse is running. The default is `1`.
     */
    public readonly minNumClusters!: pulumi.Output<number | undefined>;
    /**
     * Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly numClusters!: pulumi.Output<number | undefined>;
    /**
     * ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
     */
    public readonly odbcParams!: pulumi.Output<outputs.SqlEndpointOdbcParams>;
    /**
     * The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`. This field is optional. Default is `COST_OPTIMIZED`.
     */
    public readonly spotInstancePolicy!: pulumi.Output<string | undefined>;
    public readonly state!: pulumi.Output<string>;
    /**
     * Databricks tags all endpoint resources with these tags.
     */
    public readonly tags!: pulumi.Output<outputs.SqlEndpointTags | undefined>;
    /**
     * SQL warehouse type. See for [AWS](https://docs.databricks.com/sql/admin/sql-endpoints.html#switch-the-sql-warehouse-type-pro-classic-or-serverless) or [Azure](https://docs.databricks.com/sql/admin/sql-endpoints.html#switch-the-sql-warehouse-type-pro-classic-or-serverless). Set to `PRO` or `CLASSIC` (default).  If you want to use serverless compute, you must set to `PRO` and **also** set the field `enableServerlessCompute` to `true`.
     */
    public readonly warehouseType!: pulumi.Output<string | undefined>;

    /**
     * Create a SqlEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlEndpointArgs | SqlEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlEndpointState | undefined;
            resourceInputs["autoStopMins"] = state ? state.autoStopMins : undefined;
            resourceInputs["channel"] = state ? state.channel : undefined;
            resourceInputs["clusterSize"] = state ? state.clusterSize : undefined;
            resourceInputs["dataSourceId"] = state ? state.dataSourceId : undefined;
            resourceInputs["enablePhoton"] = state ? state.enablePhoton : undefined;
            resourceInputs["enableServerlessCompute"] = state ? state.enableServerlessCompute : undefined;
            resourceInputs["instanceProfileArn"] = state ? state.instanceProfileArn : undefined;
            resourceInputs["jdbcUrl"] = state ? state.jdbcUrl : undefined;
            resourceInputs["maxNumClusters"] = state ? state.maxNumClusters : undefined;
            resourceInputs["minNumClusters"] = state ? state.minNumClusters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numClusters"] = state ? state.numClusters : undefined;
            resourceInputs["odbcParams"] = state ? state.odbcParams : undefined;
            resourceInputs["spotInstancePolicy"] = state ? state.spotInstancePolicy : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["warehouseType"] = state ? state.warehouseType : undefined;
        } else {
            const args = argsOrState as SqlEndpointArgs | undefined;
            if ((!args || args.clusterSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterSize'");
            }
            resourceInputs["autoStopMins"] = args ? args.autoStopMins : undefined;
            resourceInputs["channel"] = args ? args.channel : undefined;
            resourceInputs["clusterSize"] = args ? args.clusterSize : undefined;
            resourceInputs["dataSourceId"] = args ? args.dataSourceId : undefined;
            resourceInputs["enablePhoton"] = args ? args.enablePhoton : undefined;
            resourceInputs["enableServerlessCompute"] = args ? args.enableServerlessCompute : undefined;
            resourceInputs["instanceProfileArn"] = args ? args.instanceProfileArn : undefined;
            resourceInputs["jdbcUrl"] = args ? args.jdbcUrl : undefined;
            resourceInputs["maxNumClusters"] = args ? args.maxNumClusters : undefined;
            resourceInputs["minNumClusters"] = args ? args.minNumClusters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numClusters"] = args ? args.numClusters : undefined;
            resourceInputs["odbcParams"] = args ? args.odbcParams : undefined;
            resourceInputs["spotInstancePolicy"] = args ? args.spotInstancePolicy : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["warehouseType"] = args ? args.warehouseType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SqlEndpoint resources.
 */
export interface SqlEndpointState {
    /**
     * Time in minutes until an idle SQL warehouse terminates all clusters and stops. This field is optional. The default is 120, set to 0 to disable the auto stop.
     */
    autoStopMins?: pulumi.Input<number>;
    /**
     * block, consisting of following fields:
     */
    channel?: pulumi.Input<inputs.SqlEndpointChannel>;
    /**
     * The size of the clusters allocated to the endpoint: "2X-Small", "X-Small", "Small", "Medium", "Large", "X-Large", "2X-Large", "3X-Large", "4X-Large".
     */
    clusterSize?: pulumi.Input<string>;
    /**
     * ID of the data source for this endpoint. This is used to bind an Databricks SQL query to an endpoint.
     */
    dataSourceId?: pulumi.Input<string>;
    /**
     * Whether to enable [Photon](https://databricks.com/product/delta-engine). This field is optional and is enabled by default.
     */
    enablePhoton?: pulumi.Input<boolean>;
    /**
     * Whether this SQL warehouse is a serverless endpoint. If this value is true explicitly or through the default, you **must** also set `warehouseType` field to `pro`.
     */
    enableServerlessCompute?: pulumi.Input<boolean>;
    instanceProfileArn?: pulumi.Input<string>;
    /**
     * JDBC connection string.
     */
    jdbcUrl?: pulumi.Input<string>;
    /**
     * Maximum number of clusters available when a SQL warehouse is running. This field is required. If multi-cluster load balancing is not enabled, this is default to `1`.
     */
    maxNumClusters?: pulumi.Input<number>;
    /**
     * Minimum number of clusters available when a SQL warehouse is running. The default is `1`.
     */
    minNumClusters?: pulumi.Input<number>;
    /**
     * Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
     */
    name?: pulumi.Input<string>;
    numClusters?: pulumi.Input<number>;
    /**
     * ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
     */
    odbcParams?: pulumi.Input<inputs.SqlEndpointOdbcParams>;
    /**
     * The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`. This field is optional. Default is `COST_OPTIMIZED`.
     */
    spotInstancePolicy?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    /**
     * Databricks tags all endpoint resources with these tags.
     */
    tags?: pulumi.Input<inputs.SqlEndpointTags>;
    /**
     * SQL warehouse type. See for [AWS](https://docs.databricks.com/sql/admin/sql-endpoints.html#switch-the-sql-warehouse-type-pro-classic-or-serverless) or [Azure](https://docs.databricks.com/sql/admin/sql-endpoints.html#switch-the-sql-warehouse-type-pro-classic-or-serverless). Set to `PRO` or `CLASSIC` (default).  If you want to use serverless compute, you must set to `PRO` and **also** set the field `enableServerlessCompute` to `true`.
     */
    warehouseType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlEndpoint resource.
 */
export interface SqlEndpointArgs {
    /**
     * Time in minutes until an idle SQL warehouse terminates all clusters and stops. This field is optional. The default is 120, set to 0 to disable the auto stop.
     */
    autoStopMins?: pulumi.Input<number>;
    /**
     * block, consisting of following fields:
     */
    channel?: pulumi.Input<inputs.SqlEndpointChannel>;
    /**
     * The size of the clusters allocated to the endpoint: "2X-Small", "X-Small", "Small", "Medium", "Large", "X-Large", "2X-Large", "3X-Large", "4X-Large".
     */
    clusterSize: pulumi.Input<string>;
    /**
     * ID of the data source for this endpoint. This is used to bind an Databricks SQL query to an endpoint.
     */
    dataSourceId?: pulumi.Input<string>;
    /**
     * Whether to enable [Photon](https://databricks.com/product/delta-engine). This field is optional and is enabled by default.
     */
    enablePhoton?: pulumi.Input<boolean>;
    /**
     * Whether this SQL warehouse is a serverless endpoint. If this value is true explicitly or through the default, you **must** also set `warehouseType` field to `pro`.
     */
    enableServerlessCompute?: pulumi.Input<boolean>;
    instanceProfileArn?: pulumi.Input<string>;
    /**
     * JDBC connection string.
     */
    jdbcUrl?: pulumi.Input<string>;
    /**
     * Maximum number of clusters available when a SQL warehouse is running. This field is required. If multi-cluster load balancing is not enabled, this is default to `1`.
     */
    maxNumClusters?: pulumi.Input<number>;
    /**
     * Minimum number of clusters available when a SQL warehouse is running. The default is `1`.
     */
    minNumClusters?: pulumi.Input<number>;
    /**
     * Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
     */
    name?: pulumi.Input<string>;
    numClusters?: pulumi.Input<number>;
    /**
     * ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
     */
    odbcParams?: pulumi.Input<inputs.SqlEndpointOdbcParams>;
    /**
     * The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`. This field is optional. Default is `COST_OPTIMIZED`.
     */
    spotInstancePolicy?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    /**
     * Databricks tags all endpoint resources with these tags.
     */
    tags?: pulumi.Input<inputs.SqlEndpointTags>;
    /**
     * SQL warehouse type. See for [AWS](https://docs.databricks.com/sql/admin/sql-endpoints.html#switch-the-sql-warehouse-type-pro-classic-or-serverless) or [Azure](https://docs.databricks.com/sql/admin/sql-endpoints.html#switch-the-sql-warehouse-type-pro-classic-or-serverless). Set to `PRO` or `CLASSIC` (default).  If you want to use serverless compute, you must set to `PRO` and **also** set the field `enableServerlessCompute` to `true`.
     */
    warehouseType?: pulumi.Input<string>;
}
