// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SqlEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing SqlEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlEndpointState, opts?: pulumi.CustomResourceOptions): SqlEndpoint {
        return new SqlEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/sqlEndpoint:SqlEndpoint';

    /**
     * Returns true if the given object is an instance of SqlEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlEndpoint.__pulumiType;
    }

    public readonly autoStopMins!: pulumi.Output<number | undefined>;
    public readonly channel!: pulumi.Output<outputs.SqlEndpointChannel | undefined>;
    public readonly clusterSize!: pulumi.Output<string>;
    public /*out*/ readonly creatorName!: pulumi.Output<string>;
    public readonly dataSourceId!: pulumi.Output<string>;
    public readonly enablePhoton!: pulumi.Output<boolean | undefined>;
    public readonly enableServerlessCompute!: pulumi.Output<boolean>;
    public /*out*/ readonly healths!: pulumi.Output<outputs.SqlEndpointHealth[]>;
    public readonly instanceProfileArn!: pulumi.Output<string | undefined>;
    public /*out*/ readonly jdbcUrl!: pulumi.Output<string>;
    public readonly maxNumClusters!: pulumi.Output<number | undefined>;
    public readonly minNumClusters!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly numActiveSessions!: pulumi.Output<number>;
    public /*out*/ readonly numClusters!: pulumi.Output<number>;
    public /*out*/ readonly odbcParams!: pulumi.Output<outputs.SqlEndpointOdbcParams>;
    public readonly spotInstancePolicy!: pulumi.Output<string | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.SqlEndpointTags | undefined>;
    public readonly warehouseType!: pulumi.Output<string | undefined>;

    /**
     * Create a SqlEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlEndpointArgs | SqlEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlEndpointState | undefined;
            resourceInputs["autoStopMins"] = state ? state.autoStopMins : undefined;
            resourceInputs["channel"] = state ? state.channel : undefined;
            resourceInputs["clusterSize"] = state ? state.clusterSize : undefined;
            resourceInputs["creatorName"] = state ? state.creatorName : undefined;
            resourceInputs["dataSourceId"] = state ? state.dataSourceId : undefined;
            resourceInputs["enablePhoton"] = state ? state.enablePhoton : undefined;
            resourceInputs["enableServerlessCompute"] = state ? state.enableServerlessCompute : undefined;
            resourceInputs["healths"] = state ? state.healths : undefined;
            resourceInputs["instanceProfileArn"] = state ? state.instanceProfileArn : undefined;
            resourceInputs["jdbcUrl"] = state ? state.jdbcUrl : undefined;
            resourceInputs["maxNumClusters"] = state ? state.maxNumClusters : undefined;
            resourceInputs["minNumClusters"] = state ? state.minNumClusters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numActiveSessions"] = state ? state.numActiveSessions : undefined;
            resourceInputs["numClusters"] = state ? state.numClusters : undefined;
            resourceInputs["odbcParams"] = state ? state.odbcParams : undefined;
            resourceInputs["spotInstancePolicy"] = state ? state.spotInstancePolicy : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["warehouseType"] = state ? state.warehouseType : undefined;
        } else {
            const args = argsOrState as SqlEndpointArgs | undefined;
            if ((!args || args.clusterSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterSize'");
            }
            resourceInputs["autoStopMins"] = args ? args.autoStopMins : undefined;
            resourceInputs["channel"] = args ? args.channel : undefined;
            resourceInputs["clusterSize"] = args ? args.clusterSize : undefined;
            resourceInputs["dataSourceId"] = args ? args.dataSourceId : undefined;
            resourceInputs["enablePhoton"] = args ? args.enablePhoton : undefined;
            resourceInputs["enableServerlessCompute"] = args ? args.enableServerlessCompute : undefined;
            resourceInputs["instanceProfileArn"] = args ? args.instanceProfileArn : undefined;
            resourceInputs["maxNumClusters"] = args ? args.maxNumClusters : undefined;
            resourceInputs["minNumClusters"] = args ? args.minNumClusters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["spotInstancePolicy"] = args ? args.spotInstancePolicy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["warehouseType"] = args ? args.warehouseType : undefined;
            resourceInputs["creatorName"] = undefined /*out*/;
            resourceInputs["healths"] = undefined /*out*/;
            resourceInputs["jdbcUrl"] = undefined /*out*/;
            resourceInputs["numActiveSessions"] = undefined /*out*/;
            resourceInputs["numClusters"] = undefined /*out*/;
            resourceInputs["odbcParams"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SqlEndpoint resources.
 */
export interface SqlEndpointState {
    autoStopMins?: pulumi.Input<number>;
    channel?: pulumi.Input<inputs.SqlEndpointChannel>;
    clusterSize?: pulumi.Input<string>;
    creatorName?: pulumi.Input<string>;
    dataSourceId?: pulumi.Input<string>;
    enablePhoton?: pulumi.Input<boolean>;
    enableServerlessCompute?: pulumi.Input<boolean>;
    healths?: pulumi.Input<pulumi.Input<inputs.SqlEndpointHealth>[]>;
    instanceProfileArn?: pulumi.Input<string>;
    jdbcUrl?: pulumi.Input<string>;
    maxNumClusters?: pulumi.Input<number>;
    minNumClusters?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    numActiveSessions?: pulumi.Input<number>;
    numClusters?: pulumi.Input<number>;
    odbcParams?: pulumi.Input<inputs.SqlEndpointOdbcParams>;
    spotInstancePolicy?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<inputs.SqlEndpointTags>;
    warehouseType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlEndpoint resource.
 */
export interface SqlEndpointArgs {
    autoStopMins?: pulumi.Input<number>;
    channel?: pulumi.Input<inputs.SqlEndpointChannel>;
    clusterSize: pulumi.Input<string>;
    dataSourceId?: pulumi.Input<string>;
    enablePhoton?: pulumi.Input<boolean>;
    enableServerlessCompute?: pulumi.Input<boolean>;
    instanceProfileArn?: pulumi.Input<string>;
    maxNumClusters?: pulumi.Input<number>;
    minNumClusters?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    spotInstancePolicy?: pulumi.Input<string>;
    tags?: pulumi.Input<inputs.SqlEndpointTags>;
    warehouseType?: pulumi.Input<string>;
}
