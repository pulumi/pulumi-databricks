// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Sometimes accessing data requires that you authenticate to external data sources through JDBC. Instead of directly entering your credentials into a notebook, use Databricks secrets to store your credentials and reference them in notebooks and jobs. Please consult [Secrets User Guide](https://docs.databricks.com/security/secrets/index.html#secrets-user-guide) for more details.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const _this = new databricks.SecretScope("this", {});
 * ```
 * ## Related Resources
 *
 * The following resources are often used in the same context:
 *
 * * End to end workspace management guide.
 * * databricks.Notebook to manage [Databricks Notebooks](https://docs.databricks.com/notebooks/index.html).
 * * databricks.Repo to manage [Databricks Repos](https://docs.databricks.com/repos.html).
 * * databricks.Secret to manage [secrets](https://docs.databricks.com/security/secrets/index.html#secrets-user-guide) in Databricks workspace.
 * * databricks.SecretAcl to manage access to [secrets](https://docs.databricks.com/security/secrets/index.html#secrets-user-guide) in Databricks workspace.
 *
 * ## Import
 *
 * The secret resource scope can be imported using the scope name. `initial_manage_principal` state won't be imported, because the underlying API doesn't include it in the response. bash
 *
 * ```sh
 *  $ pulumi import databricks:index/secretScope:SecretScope object <scopeName>
 * ```
 */
export class SecretScope extends pulumi.CustomResource {
    /**
     * Get an existing SecretScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretScopeState, opts?: pulumi.CustomResourceOptions): SecretScope {
        return new SecretScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/secretScope:SecretScope';

    /**
     * Returns true if the given object is an instance of SecretScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretScope.__pulumiType;
    }

    /**
     * Either `DATABRICKS` or `AZURE_KEYVAULT`
     */
    public readonly backendType!: pulumi.Output<string>;
    /**
     * The principal with the only possible value `users` that is initially granted `MANAGE` permission to the created scope.  If it's omitted, then the databricks.SecretAcl with `MANAGE` permission applied to the scope is assigned to the API request issuer's user identity (see [documentation](https://docs.databricks.com/dev-tools/api/latest/secrets.html#create-secret-scope)). This part of the state cannot be imported.
     */
    public readonly initialManagePrincipal!: pulumi.Output<string | undefined>;
    public readonly keyvaultMetadata!: pulumi.Output<outputs.SecretScopeKeyvaultMetadata | undefined>;
    /**
     * Scope name requested by the user. Must be unique within a workspace. Must consist of alphanumeric characters, dashes, underscores, and periods, and may not exceed 128 characters.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a SecretScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecretScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretScopeArgs | SecretScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretScopeState | undefined;
            resourceInputs["backendType"] = state ? state.backendType : undefined;
            resourceInputs["initialManagePrincipal"] = state ? state.initialManagePrincipal : undefined;
            resourceInputs["keyvaultMetadata"] = state ? state.keyvaultMetadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as SecretScopeArgs | undefined;
            resourceInputs["backendType"] = args ? args.backendType : undefined;
            resourceInputs["initialManagePrincipal"] = args ? args.initialManagePrincipal : undefined;
            resourceInputs["keyvaultMetadata"] = args ? args.keyvaultMetadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretScope.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretScope resources.
 */
export interface SecretScopeState {
    /**
     * Either `DATABRICKS` or `AZURE_KEYVAULT`
     */
    backendType?: pulumi.Input<string>;
    /**
     * The principal with the only possible value `users` that is initially granted `MANAGE` permission to the created scope.  If it's omitted, then the databricks.SecretAcl with `MANAGE` permission applied to the scope is assigned to the API request issuer's user identity (see [documentation](https://docs.databricks.com/dev-tools/api/latest/secrets.html#create-secret-scope)). This part of the state cannot be imported.
     */
    initialManagePrincipal?: pulumi.Input<string>;
    keyvaultMetadata?: pulumi.Input<inputs.SecretScopeKeyvaultMetadata>;
    /**
     * Scope name requested by the user. Must be unique within a workspace. Must consist of alphanumeric characters, dashes, underscores, and periods, and may not exceed 128 characters.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretScope resource.
 */
export interface SecretScopeArgs {
    /**
     * Either `DATABRICKS` or `AZURE_KEYVAULT`
     */
    backendType?: pulumi.Input<string>;
    /**
     * The principal with the only possible value `users` that is initially granted `MANAGE` permission to the created scope.  If it's omitted, then the databricks.SecretAcl with `MANAGE` permission applied to the scope is assigned to the API request issuer's user identity (see [documentation](https://docs.databricks.com/dev-tools/api/latest/secrets.html#create-secret-scope)). This part of the state cannot be imported.
     */
    initialManagePrincipal?: pulumi.Input<string>;
    keyvaultMetadata?: pulumi.Input<inputs.SecretScopeKeyvaultMetadata>;
    /**
     * Scope name requested by the user. Must be unique within a workspace. Must consist of alphanumeric characters, dashes, underscores, and periods, and may not exceed 128 characters.
     */
    name?: pulumi.Input<string>;
}
