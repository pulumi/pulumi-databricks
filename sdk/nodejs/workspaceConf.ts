// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * Allows specification of custom configuration properties for expert usage:
 *
 *  * `enableIpAccessLists` - enables the use of databricks.IpAccessList resources
 *  * `maxTokenLifetimeDays` - (string) Maximum token lifetime of new tokens in days, as an integer. If zero, new tokens are permitted to have no lifetime limit. Negative numbers are unsupported. **WARNING:** This limit only applies to new tokens, so there may be tokens with lifetimes longer than this value, including unlimited lifetime. Such tokens may have been created before the current maximum token lifetime was set.
 *  * `enableTokensConfig` - (boolean) Enable or disable personal access tokens for this workspace.
 *  * `enableDeprecatedClusterNamedInitScripts` - (boolean) Enable or disable [legacy cluster-named init scripts](https://docs.databricks.com/clusters/init-scripts.html#disable-legacy-cluster-named-init-scripts-for-a-workspace) for this workspace.
 *  * `enableDeprecatedGlobalInitScripts` - (boolean) Enable or disable [legacy global init scripts](https://docs.databricks.com/clusters/init-scripts.html#migrate-legacy-scripts) for this workspace.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const _this = new databricks.WorkspaceConf("this", {customConfig: {
 *     enableIpAccessLists: true,
 * }});
 * ```
 *
 * ## Import
 *
 * -> **Note** Importing this resource is not currently supported.
 */
export class WorkspaceConf extends pulumi.CustomResource {
    /**
     * Get an existing WorkspaceConf resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceConfState, opts?: pulumi.CustomResourceOptions): WorkspaceConf {
        return new WorkspaceConf(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/workspaceConf:WorkspaceConf';

    /**
     * Returns true if the given object is an instance of WorkspaceConf.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkspaceConf {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceConf.__pulumiType;
    }

    /**
     * Key-value map of strings that represent workspace configuration. Upon resource deletion, properties that start with `enable` or `enforce` will be reset to `false` value, regardless of initial default one.
     */
    public readonly customConfig!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a WorkspaceConf resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkspaceConfArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceConfArgs | WorkspaceConfState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkspaceConfState | undefined;
            resourceInputs["customConfig"] = state ? state.customConfig : undefined;
        } else {
            const args = argsOrState as WorkspaceConfArgs | undefined;
            resourceInputs["customConfig"] = args ? args.customConfig : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkspaceConf.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkspaceConf resources.
 */
export interface WorkspaceConfState {
    /**
     * Key-value map of strings that represent workspace configuration. Upon resource deletion, properties that start with `enable` or `enforce` will be reset to `false` value, regardless of initial default one.
     */
    customConfig?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a WorkspaceConf resource.
 */
export interface WorkspaceConfArgs {
    /**
     * Key-value map of strings that represent workspace configuration. Upon resource deletion, properties that start with `enable` or `enforce` will be reset to `false` value, regardless of initial default one.
     */
    customConfig?: pulumi.Input<{[key: string]: any}>;
}
