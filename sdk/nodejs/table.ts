// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * > **Public Preview** This feature is in [Public Preview](https://docs.databricks.com/release-notes/release-types.html). Contact your Databricks representative to request access.
 *
 * Within a metastore, Unity Catalog provides a 3-level namespace for organizing data: Catalogs, databases (also called schemas), and tables / views.
 *
 * > **Note** This resource has an evolving API, which will change in the upcoming versions of the provider in order to simplify user experience.
 *
 * A `databricks.Table` is contained within databricks_schema.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const sandbox = new databricks.Catalog("sandbox", {
 *     metastoreId: databricks_metastore["this"].id,
 *     comment: "this catalog is managed by terraform",
 *     properties: {
 *         purpose: "testing",
 *     },
 * });
 * const things = new databricks.Schema("things", {
 *     catalogName: sandbox.id,
 *     comment: "this database is managed by terraform",
 *     properties: {
 *         kind: "various",
 *     },
 * });
 * const thing = new databricks.Table("thing", {
 *     catalogName: sandbox.id,
 *     schemaName: things.name,
 *     tableType: "MANAGED",
 *     dataSourceFormat: "DELTA",
 *     columns: [
 *         {
 *             name: "id",
 *             position: 0,
 *             typeName: "INT",
 *             typeText: "int",
 *             typeJson: "{\"name\":\"id\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}}",
 *         },
 *         {
 *             name: "name",
 *             position: 1,
 *             typeName: "STRING",
 *             typeText: "varchar(64)",
 *             typeJson: "{\"name\":\"name\",\"type\":\"varchar(64)\",\"nullable\":true,\"metadata\":{}}",
 *         },
 *     ],
 *     comment: "this table is managed by terraform",
 * }, {
 *     provider: databricks.workspace,
 * });
 * ```
 * ## Related Resources
 *
 * The following resources are used in the same context:
 *
 * * databricks.Table data to list tables within Unity Catalog.
 * * databricks.Schema data to list schemas within Unity Catalog.
 * * databricks.Catalog data to list catalogs within Unity Catalog.
 *
 * ## Import
 *
 * This resource can be imported by full name*`catalog`.`schema`.`table`*bash
 *
 * ```sh
 *  $ pulumi import databricks:index/table:Table this <full-name>
 * ```
 */
export class Table extends pulumi.CustomResource {
    /**
     * Get an existing Table resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TableState, opts?: pulumi.CustomResourceOptions): Table {
        return new Table(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/table:Table';

    /**
     * Returns true if the given object is an instance of Table.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Table {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Table.__pulumiType;
    }

    /**
     * Name of parent catalog
     */
    public readonly catalogName!: pulumi.Output<string>;
    public readonly columns!: pulumi.Output<outputs.TableColumn[]>;
    /**
     * User-supplied free-form text.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * External tables are supported in multiple data source formats. The string constants identifying these formats are `DELTA`, `CSV`, `JSON`, `AVRO`, `PARQUET`, `ORC`, `TEXT`
     */
    public readonly dataSourceFormat!: pulumi.Output<string>;
    /**
     * User-visible name of column
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Username/groupname/sp applicationId of the table owner.
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * Extensible Table properties.
     */
    public readonly properties!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Name of parent Schema relative to parent Catalog
     */
    public readonly schemaName!: pulumi.Output<string>;
    /**
     * For EXTERNAL Tables only: the name of storage credential to use. This cannot be updated
     */
    public readonly storageCredentialName!: pulumi.Output<string | undefined>;
    /**
     * URL of storage location for Table data (required for EXTERNAL Tables. For Managed Tables, if the path is provided it needs to be a Staging Table path that has been generated through the Staging Table API, otherwise should be empty)
     */
    public readonly storageLocation!: pulumi.Output<string | undefined>;
    /**
     * Distinguishes a view vs. managed/external Table. `MANAGED`, `EXTERNAL` or `VIEW`
     */
    public readonly tableType!: pulumi.Output<string>;
    /**
     * SQL text defining the view (for `tableType == "VIEW"`)
     */
    public readonly viewDefinition!: pulumi.Output<string | undefined>;

    /**
     * Create a Table resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TableArgs | TableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TableState | undefined;
            resourceInputs["catalogName"] = state ? state.catalogName : undefined;
            resourceInputs["columns"] = state ? state.columns : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["dataSourceFormat"] = state ? state.dataSourceFormat : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
            resourceInputs["storageCredentialName"] = state ? state.storageCredentialName : undefined;
            resourceInputs["storageLocation"] = state ? state.storageLocation : undefined;
            resourceInputs["tableType"] = state ? state.tableType : undefined;
            resourceInputs["viewDefinition"] = state ? state.viewDefinition : undefined;
        } else {
            const args = argsOrState as TableArgs | undefined;
            if ((!args || args.catalogName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'catalogName'");
            }
            if ((!args || args.columns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'columns'");
            }
            if ((!args || args.dataSourceFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceFormat'");
            }
            if ((!args || args.schemaName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaName'");
            }
            if ((!args || args.tableType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableType'");
            }
            resourceInputs["catalogName"] = args ? args.catalogName : undefined;
            resourceInputs["columns"] = args ? args.columns : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["dataSourceFormat"] = args ? args.dataSourceFormat : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["schemaName"] = args ? args.schemaName : undefined;
            resourceInputs["storageCredentialName"] = args ? args.storageCredentialName : undefined;
            resourceInputs["storageLocation"] = args ? args.storageLocation : undefined;
            resourceInputs["tableType"] = args ? args.tableType : undefined;
            resourceInputs["viewDefinition"] = args ? args.viewDefinition : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Table.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Table resources.
 */
export interface TableState {
    /**
     * Name of parent catalog
     */
    catalogName?: pulumi.Input<string>;
    columns?: pulumi.Input<pulumi.Input<inputs.TableColumn>[]>;
    /**
     * User-supplied free-form text.
     */
    comment?: pulumi.Input<string>;
    /**
     * External tables are supported in multiple data source formats. The string constants identifying these formats are `DELTA`, `CSV`, `JSON`, `AVRO`, `PARQUET`, `ORC`, `TEXT`
     */
    dataSourceFormat?: pulumi.Input<string>;
    /**
     * User-visible name of column
     */
    name?: pulumi.Input<string>;
    /**
     * Username/groupname/sp applicationId of the table owner.
     */
    owner?: pulumi.Input<string>;
    /**
     * Extensible Table properties.
     */
    properties?: pulumi.Input<{[key: string]: any}>;
    /**
     * Name of parent Schema relative to parent Catalog
     */
    schemaName?: pulumi.Input<string>;
    /**
     * For EXTERNAL Tables only: the name of storage credential to use. This cannot be updated
     */
    storageCredentialName?: pulumi.Input<string>;
    /**
     * URL of storage location for Table data (required for EXTERNAL Tables. For Managed Tables, if the path is provided it needs to be a Staging Table path that has been generated through the Staging Table API, otherwise should be empty)
     */
    storageLocation?: pulumi.Input<string>;
    /**
     * Distinguishes a view vs. managed/external Table. `MANAGED`, `EXTERNAL` or `VIEW`
     */
    tableType?: pulumi.Input<string>;
    /**
     * SQL text defining the view (for `tableType == "VIEW"`)
     */
    viewDefinition?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Table resource.
 */
export interface TableArgs {
    /**
     * Name of parent catalog
     */
    catalogName: pulumi.Input<string>;
    columns: pulumi.Input<pulumi.Input<inputs.TableColumn>[]>;
    /**
     * User-supplied free-form text.
     */
    comment?: pulumi.Input<string>;
    /**
     * External tables are supported in multiple data source formats. The string constants identifying these formats are `DELTA`, `CSV`, `JSON`, `AVRO`, `PARQUET`, `ORC`, `TEXT`
     */
    dataSourceFormat: pulumi.Input<string>;
    /**
     * User-visible name of column
     */
    name?: pulumi.Input<string>;
    /**
     * Username/groupname/sp applicationId of the table owner.
     */
    owner?: pulumi.Input<string>;
    /**
     * Extensible Table properties.
     */
    properties?: pulumi.Input<{[key: string]: any}>;
    /**
     * Name of parent Schema relative to parent Catalog
     */
    schemaName: pulumi.Input<string>;
    /**
     * For EXTERNAL Tables only: the name of storage credential to use. This cannot be updated
     */
    storageCredentialName?: pulumi.Input<string>;
    /**
     * URL of storage location for Table data (required for EXTERNAL Tables. For Managed Tables, if the path is provided it needs to be a Staging Table path that has been generated through the Staging Table API, otherwise should be empty)
     */
    storageLocation?: pulumi.Input<string>;
    /**
     * Distinguishes a view vs. managed/external Table. `MANAGED`, `EXTERNAL` or `VIEW`
     */
    tableType: pulumi.Input<string>;
    /**
     * SQL text defining the view (for `tableType == "VIEW"`)
     */
    viewDefinition?: pulumi.Input<string>;
}
