// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * As of terraform v1.5, resources can be imported through configuration.
 *
 * hcl
 *
 * import {
 *
 *   id = workspace_id
 *
 *   to = databricks_workspace_network_option.this
 *
 * }
 *
 * If you are using an older version of terraform, you can import the resource using cli as follows:
 *
 * ```sh
 * $ pulumi import databricks:index/workspaceNetworkOption:WorkspaceNetworkOption databricks_workspace_network_option workspace_id
 * ```
 */
export class WorkspaceNetworkOption extends pulumi.CustomResource {
    /**
     * Get an existing WorkspaceNetworkOption resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceNetworkOptionState, opts?: pulumi.CustomResourceOptions): WorkspaceNetworkOption {
        return new WorkspaceNetworkOption(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/workspaceNetworkOption:WorkspaceNetworkOption';

    /**
     * Returns true if the given object is an instance of WorkspaceNetworkOption.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkspaceNetworkOption {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceNetworkOption.__pulumiType;
    }

    /**
     * The network policy ID to apply to the workspace. This controls the network access rules
     * for all serverless compute resources in the workspace. Each workspace can only be
     * linked to one policy at a time. If no policy is explicitly assigned,
     * the workspace will use 'default-policy'
     */
    public readonly networkPolicyId!: pulumi.Output<string | undefined>;
    /**
     * The workspace ID
     */
    public readonly workspaceId!: pulumi.Output<string | undefined>;

    /**
     * Create a WorkspaceNetworkOption resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkspaceNetworkOptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceNetworkOptionArgs | WorkspaceNetworkOptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkspaceNetworkOptionState | undefined;
            resourceInputs["networkPolicyId"] = state ? state.networkPolicyId : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as WorkspaceNetworkOptionArgs | undefined;
            resourceInputs["networkPolicyId"] = args ? args.networkPolicyId : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkspaceNetworkOption.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkspaceNetworkOption resources.
 */
export interface WorkspaceNetworkOptionState {
    /**
     * The network policy ID to apply to the workspace. This controls the network access rules
     * for all serverless compute resources in the workspace. Each workspace can only be
     * linked to one policy at a time. If no policy is explicitly assigned,
     * the workspace will use 'default-policy'
     */
    networkPolicyId?: pulumi.Input<string>;
    /**
     * The workspace ID
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkspaceNetworkOption resource.
 */
export interface WorkspaceNetworkOptionArgs {
    /**
     * The network policy ID to apply to the workspace. This controls the network access rules
     * for all serverless compute resources in the workspace. Each workspace can only be
     * linked to one policy at a time. If no policy is explicitly assigned,
     * the workspace will use 'default-policy'
     */
    networkPolicyId?: pulumi.Input<string>;
    /**
     * The workspace ID
     */
    workspaceId?: pulumi.Input<string>;
}
