// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > This resource can only be used with an account-level provider!
 *
 * > This setting is currently in private preview, and only available for enrolled customers.
 *
 * The `databricks.DisableLegacyFeaturesSetting` resource allows you to disable legacy features on newly created workspaces.
 *
 * When this setting is on, the following applies to new workspaces:
 * - Disables the use of DBFS root and mounts.
 * - Hive Metastore will not be provisioned.
 * - Disables the use of ‘No-isolation clusters’.
 * - Disables Databricks Runtime versions prior to 13.3LTS
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const _this = new databricks.DisableLegacyFeaturesSetting("this", {disableLegacyFeatures: {
 *     value: true,
 * }});
 * ```
 *
 * ## Import
 *
 * This resource can be imported by predefined name `global`:
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/disableLegacyFeaturesSetting:DisableLegacyFeaturesSetting this global
 * ```
 */
export class DisableLegacyFeaturesSetting extends pulumi.CustomResource {
    /**
     * Get an existing DisableLegacyFeaturesSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DisableLegacyFeaturesSettingState, opts?: pulumi.CustomResourceOptions): DisableLegacyFeaturesSetting {
        return new DisableLegacyFeaturesSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/disableLegacyFeaturesSetting:DisableLegacyFeaturesSetting';

    /**
     * Returns true if the given object is an instance of DisableLegacyFeaturesSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DisableLegacyFeaturesSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DisableLegacyFeaturesSetting.__pulumiType;
    }

    /**
     * block with following attributes:
     */
    public readonly disableLegacyFeatures!: pulumi.Output<outputs.DisableLegacyFeaturesSettingDisableLegacyFeatures>;
    public readonly etag!: pulumi.Output<string>;
    public readonly settingName!: pulumi.Output<string>;

    /**
     * Create a DisableLegacyFeaturesSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DisableLegacyFeaturesSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DisableLegacyFeaturesSettingArgs | DisableLegacyFeaturesSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DisableLegacyFeaturesSettingState | undefined;
            resourceInputs["disableLegacyFeatures"] = state ? state.disableLegacyFeatures : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["settingName"] = state ? state.settingName : undefined;
        } else {
            const args = argsOrState as DisableLegacyFeaturesSettingArgs | undefined;
            if ((!args || args.disableLegacyFeatures === undefined) && !opts.urn) {
                throw new Error("Missing required property 'disableLegacyFeatures'");
            }
            resourceInputs["disableLegacyFeatures"] = args ? args.disableLegacyFeatures : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["settingName"] = args ? args.settingName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DisableLegacyFeaturesSetting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DisableLegacyFeaturesSetting resources.
 */
export interface DisableLegacyFeaturesSettingState {
    /**
     * block with following attributes:
     */
    disableLegacyFeatures?: pulumi.Input<inputs.DisableLegacyFeaturesSettingDisableLegacyFeatures>;
    etag?: pulumi.Input<string>;
    settingName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DisableLegacyFeaturesSetting resource.
 */
export interface DisableLegacyFeaturesSettingArgs {
    /**
     * block with following attributes:
     */
    disableLegacyFeatures: pulumi.Input<inputs.DisableLegacyFeaturesSettingDisableLegacyFeatures>;
    etag?: pulumi.Input<string>;
    settingName?: pulumi.Input<string>;
}
