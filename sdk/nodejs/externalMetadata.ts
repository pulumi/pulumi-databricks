// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * To enrich lineage with workloads that are run outside of Databricks (for example, first mile ETL or last mile BI),
 * Unity Catalog is introducing the external metadata object. UC lets you add external metadata objects to augment the data lineage it captures automatically, giving you an end-to-end lineage view in UC.
 * This is useful when you want to capture where data came from (for example, Salesforce or MySQL) before it was ingested into UC or where data is being consumed outside UC (for example, Tableau or PowerBI).
 *
 * > **Note** This resource can only be used with an workspace-level provider!
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const _this = new databricks.ExternalMetadata("this", {
 *     name: "security_events_stream",
 *     systemType: "KAFKA",
 *     entityType: "Topic",
 *     url: "https://kafka.com/12345",
 *     description: "A stream of security related events in the critical services.",
 *     columns: [
 *         "type",
 *         "message",
 *         "details",
 *         "date",
 *         "time",
 *     ],
 *     properties: {
 *         topic: "prod.security.events.raw",
 *         enabled: "true",
 *         format: "zstd",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * As of Pulumi v1.5, resources can be imported through configuration.
 *
 * hcl
 *
 * import {
 *
 *   id = name
 *
 *   to = databricks_external_metadata.this
 *
 * }
 *
 * If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
 *
 * ```sh
 * $ pulumi import databricks:index/externalMetadata:ExternalMetadata databricks_external_metadata name
 * ```
 */
export class ExternalMetadata extends pulumi.CustomResource {
    /**
     * Get an existing ExternalMetadata resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalMetadataState, opts?: pulumi.CustomResourceOptions): ExternalMetadata {
        return new ExternalMetadata(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/externalMetadata:ExternalMetadata';

    /**
     * Returns true if the given object is an instance of ExternalMetadata.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalMetadata {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalMetadata.__pulumiType;
    }

    /**
     * List of columns associated with the external metadata object
     */
    declare public readonly columns: pulumi.Output<string[] | undefined>;
    /**
     * (string) - Time at which this external metadata object was created
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * (string) - Username of external metadata object creator
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * User-provided free-form text description
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Type of entity within the external system
     */
    declare public readonly entityType: pulumi.Output<string>;
    /**
     * (string) - Unique identifier of parent metastore
     */
    declare public /*out*/ readonly metastoreId: pulumi.Output<string>;
    /**
     * Name of the external metadata object
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Owner of the external metadata object
     */
    declare public readonly owner: pulumi.Output<string | undefined>;
    /**
     * A map of key-value properties attached to the external metadata object
     */
    declare public readonly properties: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Type of external system. Possible values are: `AMAZON_REDSHIFT`, `AZURE_SYNAPSE`, `CONFLUENT`, `DATABRICKS`, `GOOGLE_BIGQUERY`, `KAFKA`, `LOOKER`, `MICROSOFT_FABRIC`, `MICROSOFT_SQL_SERVER`, `MONGODB`, `MYSQL`, `ORACLE`, `OTHER`, `POSTGRESQL`, `POWER_BI`, `SALESFORCE`, `SAP`, `SERVICENOW`, `SNOWFLAKE`, `TABLEAU`, `TERADATA`, `WORKDAY`
     */
    declare public readonly systemType: pulumi.Output<string>;
    /**
     * (string) - Time at which this external metadata object was last modified
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;
    /**
     * (string) - Username of user who last modified external metadata object
     */
    declare public /*out*/ readonly updatedBy: pulumi.Output<string>;
    /**
     * URL associated with the external metadata object
     */
    declare public readonly url: pulumi.Output<string | undefined>;

    /**
     * Create a ExternalMetadata resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalMetadataArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalMetadataArgs | ExternalMetadataState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalMetadataState | undefined;
            resourceInputs["columns"] = state?.columns;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["description"] = state?.description;
            resourceInputs["entityType"] = state?.entityType;
            resourceInputs["metastoreId"] = state?.metastoreId;
            resourceInputs["name"] = state?.name;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["systemType"] = state?.systemType;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["updatedBy"] = state?.updatedBy;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as ExternalMetadataArgs | undefined;
            if (args?.entityType === undefined && !opts.urn) {
                throw new Error("Missing required property 'entityType'");
            }
            if (args?.systemType === undefined && !opts.urn) {
                throw new Error("Missing required property 'systemType'");
            }
            resourceInputs["columns"] = args?.columns;
            resourceInputs["description"] = args?.description;
            resourceInputs["entityType"] = args?.entityType;
            resourceInputs["name"] = args?.name;
            resourceInputs["owner"] = args?.owner;
            resourceInputs["properties"] = args?.properties;
            resourceInputs["systemType"] = args?.systemType;
            resourceInputs["url"] = args?.url;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["metastoreId"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalMetadata.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalMetadata resources.
 */
export interface ExternalMetadataState {
    /**
     * List of columns associated with the external metadata object
     */
    columns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (string) - Time at which this external metadata object was created
     */
    createTime?: pulumi.Input<string>;
    /**
     * (string) - Username of external metadata object creator
     */
    createdBy?: pulumi.Input<string>;
    /**
     * User-provided free-form text description
     */
    description?: pulumi.Input<string>;
    /**
     * Type of entity within the external system
     */
    entityType?: pulumi.Input<string>;
    /**
     * (string) - Unique identifier of parent metastore
     */
    metastoreId?: pulumi.Input<string>;
    /**
     * Name of the external metadata object
     */
    name?: pulumi.Input<string>;
    /**
     * Owner of the external metadata object
     */
    owner?: pulumi.Input<string>;
    /**
     * A map of key-value properties attached to the external metadata object
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Type of external system. Possible values are: `AMAZON_REDSHIFT`, `AZURE_SYNAPSE`, `CONFLUENT`, `DATABRICKS`, `GOOGLE_BIGQUERY`, `KAFKA`, `LOOKER`, `MICROSOFT_FABRIC`, `MICROSOFT_SQL_SERVER`, `MONGODB`, `MYSQL`, `ORACLE`, `OTHER`, `POSTGRESQL`, `POWER_BI`, `SALESFORCE`, `SAP`, `SERVICENOW`, `SNOWFLAKE`, `TABLEAU`, `TERADATA`, `WORKDAY`
     */
    systemType?: pulumi.Input<string>;
    /**
     * (string) - Time at which this external metadata object was last modified
     */
    updateTime?: pulumi.Input<string>;
    /**
     * (string) - Username of user who last modified external metadata object
     */
    updatedBy?: pulumi.Input<string>;
    /**
     * URL associated with the external metadata object
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExternalMetadata resource.
 */
export interface ExternalMetadataArgs {
    /**
     * List of columns associated with the external metadata object
     */
    columns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User-provided free-form text description
     */
    description?: pulumi.Input<string>;
    /**
     * Type of entity within the external system
     */
    entityType: pulumi.Input<string>;
    /**
     * Name of the external metadata object
     */
    name?: pulumi.Input<string>;
    /**
     * Owner of the external metadata object
     */
    owner?: pulumi.Input<string>;
    /**
     * A map of key-value properties attached to the external metadata object
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Type of external system. Possible values are: `AMAZON_REDSHIFT`, `AZURE_SYNAPSE`, `CONFLUENT`, `DATABRICKS`, `GOOGLE_BIGQUERY`, `KAFKA`, `LOOKER`, `MICROSOFT_FABRIC`, `MICROSOFT_SQL_SERVER`, `MONGODB`, `MYSQL`, `ORACLE`, `OTHER`, `POSTGRESQL`, `POWER_BI`, `SALESFORCE`, `SAP`, `SERVICENOW`, `SNOWFLAKE`, `TABLEAU`, `TERADATA`, `WORKDAY`
     */
    systemType: pulumi.Input<string>;
    /**
     * URL associated with the external metadata object
     */
    url?: pulumi.Input<string>;
}
