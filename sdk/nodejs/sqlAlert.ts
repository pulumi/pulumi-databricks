// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource allows you to manage [Databricks SQL Alerts](https://docs.databricks.com/sql/user/queries/index.html).
 *
 * **Note:** To manage [SQLA resources](https://docs.databricks.com/sql/get-started/concepts.html) you must have `databricksSqlAccess` on your databricks.Group or databricks_user.
 *
 * ## Related Resources
 *
 * The following resources are often used in the same context:
 *
 * * End to end workspace management guide.
 * * databricks.SqlQuery to manage Databricks SQL [Queries](https://docs.databricks.com/sql/user/queries/index.html).
 * * databricks.SqlEndpoint to manage Databricks SQL [Endpoints](https://docs.databricks.com/sql/admin/sql-endpoints.html).
 * * databricks.Directory to manage directories in [Databricks Workpace](https://docs.databricks.com/workspace/workspace-objects.html).
 */
export class SqlAlert extends pulumi.CustomResource {
    /**
     * Get an existing SqlAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlAlertState, opts?: pulumi.CustomResourceOptions): SqlAlert {
        return new SqlAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/sqlAlert:SqlAlert';

    /**
     * Returns true if the given object is an instance of SqlAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlAlert.__pulumiType;
    }

    public readonly createdAt!: pulumi.Output<string>;
    /**
     * Name of the alert.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Alert configuration options.
     */
    public readonly options!: pulumi.Output<outputs.SqlAlertOptions>;
    /**
     * The identifier of the workspace folder containing the alert. The default is ther user's home folder. The folder identifier is formatted as `folder/<folder_id>`.
     */
    public readonly parent!: pulumi.Output<string | undefined>;
    /**
     * ID of the query evaluated by the alert.
     */
    public readonly queryId!: pulumi.Output<string>;
    /**
     * Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
     */
    public readonly rearm!: pulumi.Output<number | undefined>;
    public readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a SqlAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlAlertArgs | SqlAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlAlertState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["queryId"] = state ? state.queryId : undefined;
            resourceInputs["rearm"] = state ? state.rearm : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as SqlAlertArgs | undefined;
            if ((!args || args.options === undefined) && !opts.urn) {
                throw new Error("Missing required property 'options'");
            }
            if ((!args || args.queryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queryId'");
            }
            resourceInputs["createdAt"] = args ? args.createdAt : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["queryId"] = args ? args.queryId : undefined;
            resourceInputs["rearm"] = args ? args.rearm : undefined;
            resourceInputs["updatedAt"] = args ? args.updatedAt : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlAlert.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SqlAlert resources.
 */
export interface SqlAlertState {
    createdAt?: pulumi.Input<string>;
    /**
     * Name of the alert.
     */
    name?: pulumi.Input<string>;
    /**
     * Alert configuration options.
     */
    options?: pulumi.Input<inputs.SqlAlertOptions>;
    /**
     * The identifier of the workspace folder containing the alert. The default is ther user's home folder. The folder identifier is formatted as `folder/<folder_id>`.
     */
    parent?: pulumi.Input<string>;
    /**
     * ID of the query evaluated by the alert.
     */
    queryId?: pulumi.Input<string>;
    /**
     * Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
     */
    rearm?: pulumi.Input<number>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlAlert resource.
 */
export interface SqlAlertArgs {
    createdAt?: pulumi.Input<string>;
    /**
     * Name of the alert.
     */
    name?: pulumi.Input<string>;
    /**
     * Alert configuration options.
     */
    options: pulumi.Input<inputs.SqlAlertOptions>;
    /**
     * The identifier of the workspace folder containing the alert. The default is ther user's home folder. The folder identifier is formatted as `folder/<folder_id>`.
     */
    parent?: pulumi.Input<string>;
    /**
     * ID of the query evaluated by the alert.
     */
    queryId: pulumi.Input<string>;
    /**
     * Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
     */
    rearm?: pulumi.Input<number>;
    updatedAt?: pulumi.Input<string>;
}
