// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A credential represents an authentication and authorization mechanism for accessing services on your cloud tenant. Each credential is subject to Unity Catalog access-control policies that control which users and groups can access the credential.
 *
 * > This resource can only be used with a workspace-level provider!
 *
 * The type of credential to be created is determined by the `purpose` field, which should be either `SERVICE` or `STORAGE`.
 * The caller must be a metastore admin or have the metastore privilege `CREATE_STORAGE_CREDENTIAL` for storage credentials, or `CREATE_SERVICE_CREDENTIAL` for service credentials. The user who creates the credential can delegate ownership to another user or group to manage permissions on it
 *
 * On AWS, the IAM role for a credential requires a trust policy. See [documentation](https://docs.databricks.com/en/connect/unity-catalog/cloud-services/service-credentials.html#step-1-create-an-iam-role) for more details. The data source databricks.getAwsUnityCatalogAssumeRolePolicy can be used to create the necessary AWS Unity Catalog assume role policy.
 *
 * ## Example Usage
 *
 * For AWS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const external = new databricks.Credential("external", {
 *     name: externalDataAccess.name,
 *     awsIamRole: {
 *         roleArn: externalDataAccess.arn,
 *     },
 *     purpose: "SERVICE",
 *     comment: "Managed by TF",
 * });
 * const externalCreds = new databricks.Grants("external_creds", {
 *     credential: external.id,
 *     grants: [{
 *         principal: "Data Engineers",
 *         privileges: ["ACCESS"],
 *     }],
 * });
 * ```
 *
 * For Azure
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const externalMi = new databricks.Credential("external_mi", {
 *     name: "mi_credential",
 *     azureManagedIdentity: {
 *         accessConnectorId: example.id,
 *     },
 *     purpose: "SERVICE",
 *     comment: "Managed identity credential managed by TF",
 * });
 * const externalCreds = new databricks.Grants("external_creds", {
 *     credential: externalMi.id,
 *     grants: [{
 *         principal: "Data Engineers",
 *         privileges: ["ACCESS"],
 *     }],
 * });
 * ```
 *
 * For GCP
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const externalGcpSa = new databricks.Credential("external_gcp_sa", {
 *     name: "gcp_sa_credential",
 *     databricksGcpServiceAccount: {},
 *     purpose: "SERVICE",
 *     comment: "GCP SA credential managed by TF",
 * });
 * const externalCreds = new databricks.Grants("external_creds", {
 *     credential: externalGcpSa.id,
 *     grants: [{
 *         principal: "Data Engineers",
 *         privileges: ["ACCESS"],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported by name:
 *
 * hcl
 *
 * import {
 *
 *   to = databricks_credential.this
 *
 *   id = "<name>"
 *
 * }
 *
 * Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/credential:Credential this <name>
 * ```
 */
export class Credential extends pulumi.CustomResource {
    /**
     * Get an existing Credential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialState, opts?: pulumi.CustomResourceOptions): Credential {
        return new Credential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/credential:Credential';

    /**
     * Returns true if the given object is an instance of Credential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Credential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Credential.__pulumiType;
    }

    declare public readonly awsIamRole: pulumi.Output<outputs.CredentialAwsIamRole | undefined>;
    declare public readonly azureManagedIdentity: pulumi.Output<outputs.CredentialAzureManagedIdentity | undefined>;
    declare public readonly azureServicePrincipal: pulumi.Output<outputs.CredentialAzureServicePrincipal | undefined>;
    declare public readonly comment: pulumi.Output<string | undefined>;
    declare public readonly createdAt: pulumi.Output<number>;
    declare public readonly createdBy: pulumi.Output<string>;
    /**
     * Unique ID of the credential.
     */
    declare public /*out*/ readonly credentialId: pulumi.Output<string>;
    declare public readonly databricksGcpServiceAccount: pulumi.Output<outputs.CredentialDatabricksGcpServiceAccount>;
    /**
     * Delete credential regardless of its dependencies.
     */
    declare public readonly forceDestroy: pulumi.Output<boolean | undefined>;
    /**
     * Update credential regardless of its dependents.
     */
    declare public readonly forceUpdate: pulumi.Output<boolean | undefined>;
    declare public readonly fullName: pulumi.Output<string>;
    /**
     * Whether the credential is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the credential to `ISOLATION_MODE_ISOLATED` will automatically restrict access to only from the current workspace.
     *
     * `awsIamRole` optional configuration block for credential details for AWS:
     */
    declare public readonly isolationMode: pulumi.Output<string>;
    declare public readonly metastoreId: pulumi.Output<string>;
    /**
     * Name of Credentials, which must be unique within the databricks_metastore. Change forces creation of a new resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Username/groupname/sp applicationId of the credential owner.
     */
    declare public readonly owner: pulumi.Output<string>;
    /**
     * Indicates the purpose of the credential. Can be `SERVICE` or `STORAGE`.
     */
    declare public readonly purpose: pulumi.Output<string>;
    /**
     * Indicates whether the credential is only usable for read operations. Only applicable when purpose is `STORAGE`.
     */
    declare public readonly readOnly: pulumi.Output<boolean | undefined>;
    /**
     * Suppress validation errors if any & force save the credential.
     */
    declare public readonly skipValidation: pulumi.Output<boolean | undefined>;
    declare public readonly updatedAt: pulumi.Output<number>;
    declare public readonly updatedBy: pulumi.Output<string>;
    declare public readonly usedForManagedStorage: pulumi.Output<boolean>;

    /**
     * Create a Credential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialArgs | CredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialState | undefined;
            resourceInputs["awsIamRole"] = state?.awsIamRole;
            resourceInputs["azureManagedIdentity"] = state?.azureManagedIdentity;
            resourceInputs["azureServicePrincipal"] = state?.azureServicePrincipal;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["credentialId"] = state?.credentialId;
            resourceInputs["databricksGcpServiceAccount"] = state?.databricksGcpServiceAccount;
            resourceInputs["forceDestroy"] = state?.forceDestroy;
            resourceInputs["forceUpdate"] = state?.forceUpdate;
            resourceInputs["fullName"] = state?.fullName;
            resourceInputs["isolationMode"] = state?.isolationMode;
            resourceInputs["metastoreId"] = state?.metastoreId;
            resourceInputs["name"] = state?.name;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["purpose"] = state?.purpose;
            resourceInputs["readOnly"] = state?.readOnly;
            resourceInputs["skipValidation"] = state?.skipValidation;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["updatedBy"] = state?.updatedBy;
            resourceInputs["usedForManagedStorage"] = state?.usedForManagedStorage;
        } else {
            const args = argsOrState as CredentialArgs | undefined;
            if (args?.purpose === undefined && !opts.urn) {
                throw new Error("Missing required property 'purpose'");
            }
            resourceInputs["awsIamRole"] = args?.awsIamRole;
            resourceInputs["azureManagedIdentity"] = args?.azureManagedIdentity;
            resourceInputs["azureServicePrincipal"] = args?.azureServicePrincipal;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["createdAt"] = args?.createdAt;
            resourceInputs["createdBy"] = args?.createdBy;
            resourceInputs["databricksGcpServiceAccount"] = args?.databricksGcpServiceAccount;
            resourceInputs["forceDestroy"] = args?.forceDestroy;
            resourceInputs["forceUpdate"] = args?.forceUpdate;
            resourceInputs["fullName"] = args?.fullName;
            resourceInputs["isolationMode"] = args?.isolationMode;
            resourceInputs["metastoreId"] = args?.metastoreId;
            resourceInputs["name"] = args?.name;
            resourceInputs["owner"] = args?.owner;
            resourceInputs["purpose"] = args?.purpose;
            resourceInputs["readOnly"] = args?.readOnly;
            resourceInputs["skipValidation"] = args?.skipValidation;
            resourceInputs["updatedAt"] = args?.updatedAt;
            resourceInputs["updatedBy"] = args?.updatedBy;
            resourceInputs["usedForManagedStorage"] = args?.usedForManagedStorage;
            resourceInputs["credentialId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Credential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Credential resources.
 */
export interface CredentialState {
    awsIamRole?: pulumi.Input<inputs.CredentialAwsIamRole>;
    azureManagedIdentity?: pulumi.Input<inputs.CredentialAzureManagedIdentity>;
    azureServicePrincipal?: pulumi.Input<inputs.CredentialAzureServicePrincipal>;
    comment?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    /**
     * Unique ID of the credential.
     */
    credentialId?: pulumi.Input<string>;
    databricksGcpServiceAccount?: pulumi.Input<inputs.CredentialDatabricksGcpServiceAccount>;
    /**
     * Delete credential regardless of its dependencies.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * Update credential regardless of its dependents.
     */
    forceUpdate?: pulumi.Input<boolean>;
    fullName?: pulumi.Input<string>;
    /**
     * Whether the credential is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the credential to `ISOLATION_MODE_ISOLATED` will automatically restrict access to only from the current workspace.
     *
     * `awsIamRole` optional configuration block for credential details for AWS:
     */
    isolationMode?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    /**
     * Name of Credentials, which must be unique within the databricks_metastore. Change forces creation of a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Username/groupname/sp applicationId of the credential owner.
     */
    owner?: pulumi.Input<string>;
    /**
     * Indicates the purpose of the credential. Can be `SERVICE` or `STORAGE`.
     */
    purpose?: pulumi.Input<string>;
    /**
     * Indicates whether the credential is only usable for read operations. Only applicable when purpose is `STORAGE`.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Suppress validation errors if any & force save the credential.
     */
    skipValidation?: pulumi.Input<boolean>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
    usedForManagedStorage?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Credential resource.
 */
export interface CredentialArgs {
    awsIamRole?: pulumi.Input<inputs.CredentialAwsIamRole>;
    azureManagedIdentity?: pulumi.Input<inputs.CredentialAzureManagedIdentity>;
    azureServicePrincipal?: pulumi.Input<inputs.CredentialAzureServicePrincipal>;
    comment?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    databricksGcpServiceAccount?: pulumi.Input<inputs.CredentialDatabricksGcpServiceAccount>;
    /**
     * Delete credential regardless of its dependencies.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * Update credential regardless of its dependents.
     */
    forceUpdate?: pulumi.Input<boolean>;
    fullName?: pulumi.Input<string>;
    /**
     * Whether the credential is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the credential to `ISOLATION_MODE_ISOLATED` will automatically restrict access to only from the current workspace.
     *
     * `awsIamRole` optional configuration block for credential details for AWS:
     */
    isolationMode?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    /**
     * Name of Credentials, which must be unique within the databricks_metastore. Change forces creation of a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Username/groupname/sp applicationId of the credential owner.
     */
    owner?: pulumi.Input<string>;
    /**
     * Indicates the purpose of the credential. Can be `SERVICE` or `STORAGE`.
     */
    purpose: pulumi.Input<string>;
    /**
     * Indicates whether the credential is only usable for read operations. Only applicable when purpose is `STORAGE`.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Suppress validation errors if any & force save the credential.
     */
    skipValidation?: pulumi.Input<boolean>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
    usedForManagedStorage?: pulumi.Input<boolean>;
}
