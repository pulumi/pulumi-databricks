// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Users with MANAGE Schema can use quality monitor v2 to set up data quality monitoring checks for UC objects, currently support schema.
 *
 * > **Note** This resource can only be used with an workspace-level provider!
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const _this = new databricks.Schema("this", {
 *     catalogName: "my_catalog",
 *     name: "my_schema",
 * });
 * const thisQualityMonitorV2 = new databricks.QualityMonitorV2("this", {
 *     objectType: "schema",
 *     objectId: _this.schemaId,
 * });
 * ```
 *
 * ## Import
 *
 * As of Pulumi v1.5, resources can be imported through configuration.
 *
 * hcl
 *
 * import {
 *
 *   id = "object_type,object_id"
 *
 *   to = databricks_quality_monitor_v2.this
 *
 * }
 *
 * If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
 *
 * ```sh
 * $ pulumi import databricks:index/qualityMonitorV2:QualityMonitorV2 databricks_quality_monitor_v2 "object_type,object_id"
 * ```
 */
export class QualityMonitorV2 extends pulumi.CustomResource {
    /**
     * Get an existing QualityMonitorV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QualityMonitorV2State, opts?: pulumi.CustomResourceOptions): QualityMonitorV2 {
        return new QualityMonitorV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/qualityMonitorV2:QualityMonitorV2';

    /**
     * Returns true if the given object is an instance of QualityMonitorV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QualityMonitorV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QualityMonitorV2.__pulumiType;
    }

    /**
     * (AnomalyDetectionConfig)
     */
    declare public /*out*/ readonly anomalyDetectionConfig: pulumi.Output<outputs.QualityMonitorV2AnomalyDetectionConfig>;
    /**
     * The uuid of the request object. For example, schema id
     */
    declare public readonly objectId: pulumi.Output<string>;
    /**
     * The type of the monitored object. Can be one of the following: schema
     */
    declare public readonly objectType: pulumi.Output<string>;
    /**
     * Workspace ID of the resource
     */
    declare public readonly workspaceId: pulumi.Output<string | undefined>;

    /**
     * Create a QualityMonitorV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QualityMonitorV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QualityMonitorV2Args | QualityMonitorV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QualityMonitorV2State | undefined;
            resourceInputs["anomalyDetectionConfig"] = state?.anomalyDetectionConfig;
            resourceInputs["objectId"] = state?.objectId;
            resourceInputs["objectType"] = state?.objectType;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as QualityMonitorV2Args | undefined;
            if (args?.objectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'objectId'");
            }
            if (args?.objectType === undefined && !opts.urn) {
                throw new Error("Missing required property 'objectType'");
            }
            resourceInputs["objectId"] = args?.objectId;
            resourceInputs["objectType"] = args?.objectType;
            resourceInputs["workspaceId"] = args?.workspaceId;
            resourceInputs["anomalyDetectionConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QualityMonitorV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering QualityMonitorV2 resources.
 */
export interface QualityMonitorV2State {
    /**
     * (AnomalyDetectionConfig)
     */
    anomalyDetectionConfig?: pulumi.Input<inputs.QualityMonitorV2AnomalyDetectionConfig>;
    /**
     * The uuid of the request object. For example, schema id
     */
    objectId?: pulumi.Input<string>;
    /**
     * The type of the monitored object. Can be one of the following: schema
     */
    objectType?: pulumi.Input<string>;
    /**
     * Workspace ID of the resource
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a QualityMonitorV2 resource.
 */
export interface QualityMonitorV2Args {
    /**
     * The uuid of the request object. For example, schema id
     */
    objectId: pulumi.Input<string>;
    /**
     * The type of the monitored object. Can be one of the following: schema
     */
    objectType: pulumi.Input<string>;
    /**
     * Workspace ID of the resource
     */
    workspaceId?: pulumi.Input<string>;
}
