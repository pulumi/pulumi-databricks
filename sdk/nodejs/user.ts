// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to manage [users in Databricks Workspace](https://docs.databricks.com/administration-guide/users-groups/users.html), [Databricks Account Console](https://accounts.cloud.databricks.com/) or [Azure Databricks Account Console](https://accounts.azuredatabricks.net). You can also associate Databricks users to databricks_group. Upon user creation the user will receive a welcome email. You can also get information about caller identity using databricks.getCurrentUser data source.
 *
 * > This resource can be used with an account or workspace-level provider.
 *
 * > To assign account level users to workspace use databricks_mws_permission_assignment.
 *
 * > Entitlements, like, `allowClusterCreate`, `allowInstancePoolCreate`, `databricksSqlAccess`, `workspaceAccess`, `workspaceConsume` applicable only for workspace-level users.  Use databricks.Entitlements resource to assign entitlements inside a workspace to account-level users.
 *
 * To create users in the Databricks account, the provider must be configured with `host = "https://accounts.cloud.databricks.com"` on AWS deployments or `host = "https://accounts.azuredatabricks.net"` and authenticate using AAD tokens on Azure deployments.
 *
 * The default behavior when deleting a `databricks.User` resource depends on whether the provider is configured at the workspace-level or account-level. When the provider is configured at the workspace-level, the user will be deleted from the workspace. When the provider is configured at the account-level, the user will be deactivated but not deleted. When the provider is configured at the account level, to delete the user from the account when the resource is deleted, set `disableAsUserDeletion = false`. Conversely, when the provider is configured at the account-level, to deactivate the user when the resource is deleted, set `disableAsUserDeletion = true`.
 *
 * ## Example Usage
 *
 * Creating regular user:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const me = new databricks.User("me", {userName: "me@example.com"});
 * ```
 *
 * Creating user with administrative permissions - referencing special `admins` databricks.Group in databricks.GroupMember resource:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const admins = databricks.getGroup({
 *     displayName: "admins",
 * });
 * const me = new databricks.User("me", {userName: "me@example.com"});
 * const i_am_admin = new databricks.GroupMember("i-am-admin", {
 *     groupId: admins.then(admins => admins.id),
 *     memberId: me.id,
 * });
 * ```
 *
 * Creating user with cluster create permissions:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const me = new databricks.User("me", {
 *     userName: "me@example.com",
 *     displayName: "Example user",
 *     allowClusterCreate: true,
 * });
 * ```
 *
 * Creating user in AWS Databricks account:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const accountUser = new databricks.User("account_user", {
 *     userName: "me@example.com",
 *     displayName: "Example user",
 * });
 * ```
 *
 * Creating user in Azure Databricks account:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const accountUser = new databricks.User("account_user", {
 *     userName: "me@example.com",
 *     displayName: "Example user",
 * });
 * ```
 *
 * ## Related Resources
 *
 * The following resources are often used in the same context:
 *
 * * End to end workspace management guide.
 * * databricks.Group to manage [Account-level](https://docs.databricks.com/aws/en/admin/users-groups/groups) or [Workspace-level](https://docs.databricks.com/aws/en/admin/users-groups/workspace-local-groups) groups.
 * * databricks.Group data to retrieve information about databricks.Group members, entitlements and instance profiles.
 * * databricks.GroupInstanceProfile to attach databricks.InstanceProfile (AWS) to databricks_group.
 * * databricks.GroupMember to attach users and groups as group members.
 * * databricks.InstanceProfile to manage AWS EC2 instance profiles that users can launch databricks.Cluster and access data, like databricks_mount.
 * * databricks.User data to retrieve information about databricks_user.
 *
 * ## Import
 *
 * The resource scim user can be imported using its SCIM id:
 *
 * hcl
 *
 * import {
 *
 *   to = databricks_user.this
 *
 *   id = "<user-id>"
 *
 * }
 *
 * Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/user:User this "<user-id>"
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * identifier for use in databricks_access_control_rule_set, e.g. `users/mr.foo@example.com`.
     */
    declare public readonly aclPrincipalId: pulumi.Output<string>;
    /**
     * Either user is active or not. True by default, but can be set to false in case of user deactivation with preserving user assets.
     */
    declare public readonly active: pulumi.Output<boolean | undefined>;
    /**
     * Allow the user to have cluster create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and `clusterId` argument. Everyone without `allowClusterCreate` argument set, but with permission to use Cluster Policy would be able to create clusters, but within boundaries of that specific policy.
     */
    declare public readonly allowClusterCreate: pulumi.Output<boolean | undefined>;
    /**
     * Allow the user to have instance pool create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and instancePoolId argument.
     */
    declare public readonly allowInstancePoolCreate: pulumi.Output<boolean | undefined>;
    /**
     * This is a field to allow the user to have access to [Databricks SQL](https://databricks.com/product/databricks-sql) feature in User Interface and through databricks_sql_endpoint.
     */
    declare public readonly databricksSqlAccess: pulumi.Output<boolean | undefined>;
    /**
     * Deactivate the user when deleting the resource, rather than deleting the user entirely. Defaults to `true` when the provider is configured at the account-level and `false` when configured at the workspace-level. This flag is exclusive to forceDeleteRepos and forceDeleteHomeDir flags.
     */
    declare public readonly disableAsUserDeletion: pulumi.Output<boolean>;
    /**
     * This is an alias for the username that can be the full name of the user.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * ID of the user in an external identity provider.
     */
    declare public readonly externalId: pulumi.Output<string | undefined>;
    /**
     * Ignore `cannot create user: User with username X already exists` errors and implicitly import the specific user into Pulumi state, enforcing entitlements defined in the instance of resource. _This functionality is experimental_ and is designed to simplify corner cases, like Azure Active Directory synchronisation.
     */
    declare public readonly force: pulumi.Output<boolean | undefined>;
    /**
     * This flag determines whether the user's home directory is deleted when the user is deleted. It will have not impact when in the accounts SCIM API. False by default.
     */
    declare public readonly forceDeleteHomeDir: pulumi.Output<boolean | undefined>;
    /**
     * This flag determines whether the user's repo directory is deleted when the user is deleted. It will have no impact when in the accounts SCIM API. False by default.
     */
    declare public readonly forceDeleteRepos: pulumi.Output<boolean | undefined>;
    /**
     * Home folder of the user, e.g. `/Users/mr.foo@example.com`.
     */
    declare public readonly home: pulumi.Output<string>;
    /**
     * Personal Repos location of the user, e.g. `/Repos/mr.foo@example.com`.
     */
    declare public readonly repos: pulumi.Output<string>;
    /**
     * This is the username of the given user and will be their form of access and identity.  Provided username will be converted to lower case if it contains upper case characters.
     */
    declare public readonly userName: pulumi.Output<string>;
    /**
     * This is a field to allow the user to have access to a Databricks Workspace.
     */
    declare public readonly workspaceAccess: pulumi.Output<boolean | undefined>;
    /**
     * This is a field to allow the user to have access to a Databricks Workspace as consumer, with limited access to workspace UI.  Couldn't be used with `workspaceAccess` or `databricksSqlAccess`.
     */
    declare public readonly workspaceConsume: pulumi.Output<boolean | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["aclPrincipalId"] = state?.aclPrincipalId;
            resourceInputs["active"] = state?.active;
            resourceInputs["allowClusterCreate"] = state?.allowClusterCreate;
            resourceInputs["allowInstancePoolCreate"] = state?.allowInstancePoolCreate;
            resourceInputs["databricksSqlAccess"] = state?.databricksSqlAccess;
            resourceInputs["disableAsUserDeletion"] = state?.disableAsUserDeletion;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["externalId"] = state?.externalId;
            resourceInputs["force"] = state?.force;
            resourceInputs["forceDeleteHomeDir"] = state?.forceDeleteHomeDir;
            resourceInputs["forceDeleteRepos"] = state?.forceDeleteRepos;
            resourceInputs["home"] = state?.home;
            resourceInputs["repos"] = state?.repos;
            resourceInputs["userName"] = state?.userName;
            resourceInputs["workspaceAccess"] = state?.workspaceAccess;
            resourceInputs["workspaceConsume"] = state?.workspaceConsume;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if (args?.userName === undefined && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["aclPrincipalId"] = args?.aclPrincipalId;
            resourceInputs["active"] = args?.active;
            resourceInputs["allowClusterCreate"] = args?.allowClusterCreate;
            resourceInputs["allowInstancePoolCreate"] = args?.allowInstancePoolCreate;
            resourceInputs["databricksSqlAccess"] = args?.databricksSqlAccess;
            resourceInputs["disableAsUserDeletion"] = args?.disableAsUserDeletion;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["externalId"] = args?.externalId;
            resourceInputs["force"] = args?.force;
            resourceInputs["forceDeleteHomeDir"] = args?.forceDeleteHomeDir;
            resourceInputs["forceDeleteRepos"] = args?.forceDeleteRepos;
            resourceInputs["home"] = args?.home;
            resourceInputs["repos"] = args?.repos;
            resourceInputs["userName"] = args?.userName;
            resourceInputs["workspaceAccess"] = args?.workspaceAccess;
            resourceInputs["workspaceConsume"] = args?.workspaceConsume;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * identifier for use in databricks_access_control_rule_set, e.g. `users/mr.foo@example.com`.
     */
    aclPrincipalId?: pulumi.Input<string>;
    /**
     * Either user is active or not. True by default, but can be set to false in case of user deactivation with preserving user assets.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Allow the user to have cluster create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and `clusterId` argument. Everyone without `allowClusterCreate` argument set, but with permission to use Cluster Policy would be able to create clusters, but within boundaries of that specific policy.
     */
    allowClusterCreate?: pulumi.Input<boolean>;
    /**
     * Allow the user to have instance pool create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and instancePoolId argument.
     */
    allowInstancePoolCreate?: pulumi.Input<boolean>;
    /**
     * This is a field to allow the user to have access to [Databricks SQL](https://databricks.com/product/databricks-sql) feature in User Interface and through databricks_sql_endpoint.
     */
    databricksSqlAccess?: pulumi.Input<boolean>;
    /**
     * Deactivate the user when deleting the resource, rather than deleting the user entirely. Defaults to `true` when the provider is configured at the account-level and `false` when configured at the workspace-level. This flag is exclusive to forceDeleteRepos and forceDeleteHomeDir flags.
     */
    disableAsUserDeletion?: pulumi.Input<boolean>;
    /**
     * This is an alias for the username that can be the full name of the user.
     */
    displayName?: pulumi.Input<string>;
    /**
     * ID of the user in an external identity provider.
     */
    externalId?: pulumi.Input<string>;
    /**
     * Ignore `cannot create user: User with username X already exists` errors and implicitly import the specific user into Pulumi state, enforcing entitlements defined in the instance of resource. _This functionality is experimental_ and is designed to simplify corner cases, like Azure Active Directory synchronisation.
     */
    force?: pulumi.Input<boolean>;
    /**
     * This flag determines whether the user's home directory is deleted when the user is deleted. It will have not impact when in the accounts SCIM API. False by default.
     */
    forceDeleteHomeDir?: pulumi.Input<boolean>;
    /**
     * This flag determines whether the user's repo directory is deleted when the user is deleted. It will have no impact when in the accounts SCIM API. False by default.
     */
    forceDeleteRepos?: pulumi.Input<boolean>;
    /**
     * Home folder of the user, e.g. `/Users/mr.foo@example.com`.
     */
    home?: pulumi.Input<string>;
    /**
     * Personal Repos location of the user, e.g. `/Repos/mr.foo@example.com`.
     */
    repos?: pulumi.Input<string>;
    /**
     * This is the username of the given user and will be their form of access and identity.  Provided username will be converted to lower case if it contains upper case characters.
     */
    userName?: pulumi.Input<string>;
    /**
     * This is a field to allow the user to have access to a Databricks Workspace.
     */
    workspaceAccess?: pulumi.Input<boolean>;
    /**
     * This is a field to allow the user to have access to a Databricks Workspace as consumer, with limited access to workspace UI.  Couldn't be used with `workspaceAccess` or `databricksSqlAccess`.
     */
    workspaceConsume?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * identifier for use in databricks_access_control_rule_set, e.g. `users/mr.foo@example.com`.
     */
    aclPrincipalId?: pulumi.Input<string>;
    /**
     * Either user is active or not. True by default, but can be set to false in case of user deactivation with preserving user assets.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Allow the user to have cluster create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and `clusterId` argument. Everyone without `allowClusterCreate` argument set, but with permission to use Cluster Policy would be able to create clusters, but within boundaries of that specific policy.
     */
    allowClusterCreate?: pulumi.Input<boolean>;
    /**
     * Allow the user to have instance pool create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and instancePoolId argument.
     */
    allowInstancePoolCreate?: pulumi.Input<boolean>;
    /**
     * This is a field to allow the user to have access to [Databricks SQL](https://databricks.com/product/databricks-sql) feature in User Interface and through databricks_sql_endpoint.
     */
    databricksSqlAccess?: pulumi.Input<boolean>;
    /**
     * Deactivate the user when deleting the resource, rather than deleting the user entirely. Defaults to `true` when the provider is configured at the account-level and `false` when configured at the workspace-level. This flag is exclusive to forceDeleteRepos and forceDeleteHomeDir flags.
     */
    disableAsUserDeletion?: pulumi.Input<boolean>;
    /**
     * This is an alias for the username that can be the full name of the user.
     */
    displayName?: pulumi.Input<string>;
    /**
     * ID of the user in an external identity provider.
     */
    externalId?: pulumi.Input<string>;
    /**
     * Ignore `cannot create user: User with username X already exists` errors and implicitly import the specific user into Pulumi state, enforcing entitlements defined in the instance of resource. _This functionality is experimental_ and is designed to simplify corner cases, like Azure Active Directory synchronisation.
     */
    force?: pulumi.Input<boolean>;
    /**
     * This flag determines whether the user's home directory is deleted when the user is deleted. It will have not impact when in the accounts SCIM API. False by default.
     */
    forceDeleteHomeDir?: pulumi.Input<boolean>;
    /**
     * This flag determines whether the user's repo directory is deleted when the user is deleted. It will have no impact when in the accounts SCIM API. False by default.
     */
    forceDeleteRepos?: pulumi.Input<boolean>;
    /**
     * Home folder of the user, e.g. `/Users/mr.foo@example.com`.
     */
    home?: pulumi.Input<string>;
    /**
     * Personal Repos location of the user, e.g. `/Repos/mr.foo@example.com`.
     */
    repos?: pulumi.Input<string>;
    /**
     * This is the username of the given user and will be their form of access and identity.  Provided username will be converted to lower case if it contains upper case characters.
     */
    userName: pulumi.Input<string>;
    /**
     * This is a field to allow the user to have access to a Databricks Workspace.
     */
    workspaceAccess?: pulumi.Input<boolean>;
    /**
     * This is a field to allow the user to have access to a Databricks Workspace as consumer, with limited access to workspace UI.  Couldn't be used with `workspaceAccess` or `databricksSqlAccess`.
     */
    workspaceConsume?: pulumi.Input<boolean>;
}
