// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Clean room assets are data and code objects -- tables, volumes, and notebooks that are shared with the clean room.
 *
 * ## Example Usage
 *
 * # Example: Clean Room Asset Resource
 *
 * ### Example for sharing a table
 * This is an example for sharing an asset (table) in a clean room:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const _this = new databricks.index.CleanRoomsAsset("this", {
 *     cleanRoomName: "existing_clean_room",
 *     name: "creator.default.myasset",
 *     assetType: "TABLE",
 *     tableLocalDetails: {
 *         localName: "some_creator.default.myasset",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * As of Pulumi v1.5, resources can be imported through configuration.
 *
 * hcl
 *
 * import {
 *
 *   id = clean_room_name,name,asset_type
 *
 *   to = databricks_clean_room_asset.this
 *
 * }
 *
 * If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
 *
 * ```sh
 * $ pulumi import databricks:index/cleanRoomAsset:CleanRoomAsset databricks_clean_room_asset clean_room_name,name,asset_type
 * ```
 */
export class CleanRoomAsset extends pulumi.CustomResource {
    /**
     * Get an existing CleanRoomAsset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CleanRoomAssetState, opts?: pulumi.CustomResourceOptions): CleanRoomAsset {
        return new CleanRoomAsset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/cleanRoomAsset:CleanRoomAsset';

    /**
     * Returns true if the given object is an instance of CleanRoomAsset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CleanRoomAsset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CleanRoomAsset.__pulumiType;
    }

    /**
     * (integer) - When the asset is added to the clean room, in epoch milliseconds
     */
    declare public /*out*/ readonly addedAt: pulumi.Output<number>;
    /**
     * The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
     */
    declare public readonly assetType: pulumi.Output<string>;
    /**
     * The name of the clean room this asset belongs to.
     * This field is required for create operations and populated by the server for responses
     */
    declare public readonly cleanRoomName: pulumi.Output<string | undefined>;
    /**
     * Foreign table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     */
    declare public readonly foreignTable: pulumi.Output<outputs.CleanRoomAssetForeignTable | undefined>;
    /**
     * Local details for a foreign that are only available to its owner.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     */
    declare public readonly foreignTableLocalDetails: pulumi.Output<outputs.CleanRoomAssetForeignTableLocalDetails | undefined>;
    /**
     * A fully qualified name that uniquely identifies the asset within the clean room.
     * This is also the name displayed in the clean room UI.
     *
     * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
     *
     * For notebooks, the name is the notebook file name.
     * For jar analyses, the name is the jar analysis name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Notebook details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **NOTEBOOK_FILE**
     */
    declare public readonly notebook: pulumi.Output<outputs.CleanRoomAssetNotebook | undefined>;
    /**
     * (string) - The alias of the collaborator who owns this asset
     */
    declare public /*out*/ readonly ownerCollaboratorAlias: pulumi.Output<string>;
    /**
     * (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **TABLE**
     */
    declare public readonly table: pulumi.Output<outputs.CleanRoomAssetTable | undefined>;
    /**
     * Local details for a table that are only available to its owner.
     * Present if and only if **asset_type** is **TABLE**
     */
    declare public readonly tableLocalDetails: pulumi.Output<outputs.CleanRoomAssetTableLocalDetails | undefined>;
    /**
     * View details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **VIEW**
     */
    declare public readonly view: pulumi.Output<outputs.CleanRoomAssetView | undefined>;
    /**
     * Local details for a view that are only available to its owner.
     * Present if and only if **asset_type** is **VIEW**
     */
    declare public readonly viewLocalDetails: pulumi.Output<outputs.CleanRoomAssetViewLocalDetails | undefined>;
    /**
     * Local details for a volume that are only available to its owner.
     * Present if and only if **asset_type** is **VOLUME**
     */
    declare public readonly volumeLocalDetails: pulumi.Output<outputs.CleanRoomAssetVolumeLocalDetails | undefined>;

    /**
     * Create a CleanRoomAsset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CleanRoomAssetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CleanRoomAssetArgs | CleanRoomAssetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CleanRoomAssetState | undefined;
            resourceInputs["addedAt"] = state?.addedAt;
            resourceInputs["assetType"] = state?.assetType;
            resourceInputs["cleanRoomName"] = state?.cleanRoomName;
            resourceInputs["foreignTable"] = state?.foreignTable;
            resourceInputs["foreignTableLocalDetails"] = state?.foreignTableLocalDetails;
            resourceInputs["name"] = state?.name;
            resourceInputs["notebook"] = state?.notebook;
            resourceInputs["ownerCollaboratorAlias"] = state?.ownerCollaboratorAlias;
            resourceInputs["status"] = state?.status;
            resourceInputs["table"] = state?.table;
            resourceInputs["tableLocalDetails"] = state?.tableLocalDetails;
            resourceInputs["view"] = state?.view;
            resourceInputs["viewLocalDetails"] = state?.viewLocalDetails;
            resourceInputs["volumeLocalDetails"] = state?.volumeLocalDetails;
        } else {
            const args = argsOrState as CleanRoomAssetArgs | undefined;
            if (args?.assetType === undefined && !opts.urn) {
                throw new Error("Missing required property 'assetType'");
            }
            resourceInputs["assetType"] = args?.assetType;
            resourceInputs["cleanRoomName"] = args?.cleanRoomName;
            resourceInputs["foreignTable"] = args?.foreignTable;
            resourceInputs["foreignTableLocalDetails"] = args?.foreignTableLocalDetails;
            resourceInputs["name"] = args?.name;
            resourceInputs["notebook"] = args?.notebook;
            resourceInputs["table"] = args?.table;
            resourceInputs["tableLocalDetails"] = args?.tableLocalDetails;
            resourceInputs["view"] = args?.view;
            resourceInputs["viewLocalDetails"] = args?.viewLocalDetails;
            resourceInputs["volumeLocalDetails"] = args?.volumeLocalDetails;
            resourceInputs["addedAt"] = undefined /*out*/;
            resourceInputs["ownerCollaboratorAlias"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CleanRoomAsset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CleanRoomAsset resources.
 */
export interface CleanRoomAssetState {
    /**
     * (integer) - When the asset is added to the clean room, in epoch milliseconds
     */
    addedAt?: pulumi.Input<number>;
    /**
     * The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
     */
    assetType?: pulumi.Input<string>;
    /**
     * The name of the clean room this asset belongs to.
     * This field is required for create operations and populated by the server for responses
     */
    cleanRoomName?: pulumi.Input<string>;
    /**
     * Foreign table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     */
    foreignTable?: pulumi.Input<inputs.CleanRoomAssetForeignTable>;
    /**
     * Local details for a foreign that are only available to its owner.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     */
    foreignTableLocalDetails?: pulumi.Input<inputs.CleanRoomAssetForeignTableLocalDetails>;
    /**
     * A fully qualified name that uniquely identifies the asset within the clean room.
     * This is also the name displayed in the clean room UI.
     *
     * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
     *
     * For notebooks, the name is the notebook file name.
     * For jar analyses, the name is the jar analysis name
     */
    name?: pulumi.Input<string>;
    /**
     * Notebook details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **NOTEBOOK_FILE**
     */
    notebook?: pulumi.Input<inputs.CleanRoomAssetNotebook>;
    /**
     * (string) - The alias of the collaborator who owns this asset
     */
    ownerCollaboratorAlias?: pulumi.Input<string>;
    /**
     * (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
     */
    status?: pulumi.Input<string>;
    /**
     * Table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **TABLE**
     */
    table?: pulumi.Input<inputs.CleanRoomAssetTable>;
    /**
     * Local details for a table that are only available to its owner.
     * Present if and only if **asset_type** is **TABLE**
     */
    tableLocalDetails?: pulumi.Input<inputs.CleanRoomAssetTableLocalDetails>;
    /**
     * View details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **VIEW**
     */
    view?: pulumi.Input<inputs.CleanRoomAssetView>;
    /**
     * Local details for a view that are only available to its owner.
     * Present if and only if **asset_type** is **VIEW**
     */
    viewLocalDetails?: pulumi.Input<inputs.CleanRoomAssetViewLocalDetails>;
    /**
     * Local details for a volume that are only available to its owner.
     * Present if and only if **asset_type** is **VOLUME**
     */
    volumeLocalDetails?: pulumi.Input<inputs.CleanRoomAssetVolumeLocalDetails>;
}

/**
 * The set of arguments for constructing a CleanRoomAsset resource.
 */
export interface CleanRoomAssetArgs {
    /**
     * The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
     */
    assetType: pulumi.Input<string>;
    /**
     * The name of the clean room this asset belongs to.
     * This field is required for create operations and populated by the server for responses
     */
    cleanRoomName?: pulumi.Input<string>;
    /**
     * Foreign table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     */
    foreignTable?: pulumi.Input<inputs.CleanRoomAssetForeignTable>;
    /**
     * Local details for a foreign that are only available to its owner.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     */
    foreignTableLocalDetails?: pulumi.Input<inputs.CleanRoomAssetForeignTableLocalDetails>;
    /**
     * A fully qualified name that uniquely identifies the asset within the clean room.
     * This is also the name displayed in the clean room UI.
     *
     * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
     *
     * For notebooks, the name is the notebook file name.
     * For jar analyses, the name is the jar analysis name
     */
    name?: pulumi.Input<string>;
    /**
     * Notebook details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **NOTEBOOK_FILE**
     */
    notebook?: pulumi.Input<inputs.CleanRoomAssetNotebook>;
    /**
     * Table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **TABLE**
     */
    table?: pulumi.Input<inputs.CleanRoomAssetTable>;
    /**
     * Local details for a table that are only available to its owner.
     * Present if and only if **asset_type** is **TABLE**
     */
    tableLocalDetails?: pulumi.Input<inputs.CleanRoomAssetTableLocalDetails>;
    /**
     * View details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **VIEW**
     */
    view?: pulumi.Input<inputs.CleanRoomAssetView>;
    /**
     * Local details for a view that are only available to its owner.
     * Present if and only if **asset_type** is **VIEW**
     */
    viewLocalDetails?: pulumi.Input<inputs.CleanRoomAssetViewLocalDetails>;
    /**
     * Local details for a volume that are only available to its owner.
     * Present if and only if **asset_type** is **VOLUME**
     */
    volumeLocalDetails?: pulumi.Input<inputs.CleanRoomAssetVolumeLocalDetails>;
}
