// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource allows you to manage [Lakehouse Monitors](https://docs.databricks.com/en/lakehouse-monitoring/index.html) in Databricks.
 *
 * A `databricks.QualityMonitor` is attached to a databricks.SqlTable and can be of type timeseries, snapshot or inference.
 *
 * ### Inference Monitor
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const testMonitorInference = new databricks.QualityMonitor("testMonitorInference", {
 *     tableName: `${sandbox.name}.${things.name}.${myTestTable.name}`,
 *     assetsDir: `/Shared/provider-test/databricks_quality_monitoring/${myTestTable.name}`,
 *     outputSchemaName: `${sandbox.name}.${things.name}`,
 *     inferenceLog: {
 *         granularities: ["1 hour"],
 *         timestampCol: "timestamp",
 *         predictionCol: "prediction",
 *         modelIdCol: "model_id",
 *         problemType: "PROBLEM_TYPE_REGRESSION",
 *     },
 * });
 * ```
 * ### Snapshot Monitor
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const testMonitorInference = new databricks.QualityMonitor("testMonitorInference", {
 *     tableName: `${sandbox.name}.${things.name}.${myTestTable.name}`,
 *     assetsDir: `/Shared/provider-test/databricks_quality_monitoring/${myTestTable.name}`,
 *     outputSchemaName: `${sandbox.name}.${things.name}`,
 *     snapshot: {},
 * });
 * ```
 *
 * ## Related Resources
 *
 * The following resources are often used in the same context:
 *
 * * databricks.Catalog
 * * databricks.Schema
 * * databricks.SqlTable
 */
export class QualityMonitor extends pulumi.CustomResource {
    /**
     * Get an existing QualityMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QualityMonitorState, opts?: pulumi.CustomResourceOptions): QualityMonitor {
        return new QualityMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/qualityMonitor:QualityMonitor';

    /**
     * Returns true if the given object is an instance of QualityMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QualityMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QualityMonitor.__pulumiType;
    }

    /**
     * The directory to store the monitoring assets (Eg. Dashboard and Metric Tables)
     */
    public readonly assetsDir!: pulumi.Output<string>;
    /**
     * Name of the baseline table from which drift metrics are computed from.Columns in the monitored table should also be present in the baseline
     * table.
     */
    public readonly baselineTableName!: pulumi.Output<string | undefined>;
    /**
     * Custom metrics to compute on the monitored table. These can be aggregate metrics, derived metrics (from already computed aggregate metrics), or drift metrics (comparing metrics across time windows).
     */
    public readonly customMetrics!: pulumi.Output<outputs.QualityMonitorCustomMetric[] | undefined>;
    /**
     * The ID of the generated dashboard.
     */
    public /*out*/ readonly dashboardId!: pulumi.Output<string>;
    /**
     * The data classification config for the monitor
     */
    public readonly dataClassificationConfig!: pulumi.Output<outputs.QualityMonitorDataClassificationConfig | undefined>;
    /**
     * The full name of the drift metrics table. Format: __catalog_name__.__schema_name__.__table_name__.
     */
    public /*out*/ readonly driftMetricsTableName!: pulumi.Output<string>;
    /**
     * Configuration for the inference log monitor
     */
    public readonly inferenceLog!: pulumi.Output<outputs.QualityMonitorInferenceLog | undefined>;
    public readonly latestMonitorFailureMsg!: pulumi.Output<string | undefined>;
    /**
     * The version of the monitor config (e.g. 1,2,3). If negative, the monitor may be corrupted
     */
    public /*out*/ readonly monitorVersion!: pulumi.Output<string>;
    /**
     * The notification settings for the monitor.  The following optional blocks are supported, each consisting of the single string array field with name `emailAddresses` containing a list of emails to notify:
     */
    public readonly notifications!: pulumi.Output<outputs.QualityMonitorNotifications | undefined>;
    /**
     * Schema where output metric tables are created
     */
    public readonly outputSchemaName!: pulumi.Output<string>;
    /**
     * The full name of the profile metrics table. Format: __catalog_name__.__schema_name__.__table_name__.
     */
    public /*out*/ readonly profileMetricsTableName!: pulumi.Output<string>;
    /**
     * The schedule for automatically updating and refreshing metric tables.  This block consists of following fields:
     */
    public readonly schedule!: pulumi.Output<outputs.QualityMonitorSchedule | undefined>;
    /**
     * Whether to skip creating a default dashboard summarizing data quality metrics.
     */
    public readonly skipBuiltinDashboard!: pulumi.Output<boolean | undefined>;
    /**
     * List of column expressions to slice data with for targeted analysis. The data is grouped by each expression independently, resulting in a separate slice for each predicate and its complements. For high-cardinality columns, only the top 100 unique values by frequency will generate slices.
     */
    public readonly slicingExprs!: pulumi.Output<string[] | undefined>;
    /**
     * Configuration for monitoring snapshot tables.
     */
    public readonly snapshot!: pulumi.Output<outputs.QualityMonitorSnapshot | undefined>;
    /**
     * Status of the Monitor
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The full name of the table to attach the monitor too. Its of the format {catalog}.{schema}.{tableName}
     */
    public readonly tableName!: pulumi.Output<string>;
    /**
     * Configuration for monitoring timeseries tables.
     */
    public readonly timeSeries!: pulumi.Output<outputs.QualityMonitorTimeSeries | undefined>;
    /**
     * Optional argument to specify the warehouse for dashboard creation. If not specified, the first running warehouse will be used.
     */
    public readonly warehouseId!: pulumi.Output<string | undefined>;

    /**
     * Create a QualityMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QualityMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QualityMonitorArgs | QualityMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QualityMonitorState | undefined;
            resourceInputs["assetsDir"] = state ? state.assetsDir : undefined;
            resourceInputs["baselineTableName"] = state ? state.baselineTableName : undefined;
            resourceInputs["customMetrics"] = state ? state.customMetrics : undefined;
            resourceInputs["dashboardId"] = state ? state.dashboardId : undefined;
            resourceInputs["dataClassificationConfig"] = state ? state.dataClassificationConfig : undefined;
            resourceInputs["driftMetricsTableName"] = state ? state.driftMetricsTableName : undefined;
            resourceInputs["inferenceLog"] = state ? state.inferenceLog : undefined;
            resourceInputs["latestMonitorFailureMsg"] = state ? state.latestMonitorFailureMsg : undefined;
            resourceInputs["monitorVersion"] = state ? state.monitorVersion : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["outputSchemaName"] = state ? state.outputSchemaName : undefined;
            resourceInputs["profileMetricsTableName"] = state ? state.profileMetricsTableName : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["skipBuiltinDashboard"] = state ? state.skipBuiltinDashboard : undefined;
            resourceInputs["slicingExprs"] = state ? state.slicingExprs : undefined;
            resourceInputs["snapshot"] = state ? state.snapshot : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
            resourceInputs["timeSeries"] = state ? state.timeSeries : undefined;
            resourceInputs["warehouseId"] = state ? state.warehouseId : undefined;
        } else {
            const args = argsOrState as QualityMonitorArgs | undefined;
            if ((!args || args.assetsDir === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assetsDir'");
            }
            if ((!args || args.outputSchemaName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outputSchemaName'");
            }
            if ((!args || args.tableName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableName'");
            }
            resourceInputs["assetsDir"] = args ? args.assetsDir : undefined;
            resourceInputs["baselineTableName"] = args ? args.baselineTableName : undefined;
            resourceInputs["customMetrics"] = args ? args.customMetrics : undefined;
            resourceInputs["dataClassificationConfig"] = args ? args.dataClassificationConfig : undefined;
            resourceInputs["inferenceLog"] = args ? args.inferenceLog : undefined;
            resourceInputs["latestMonitorFailureMsg"] = args ? args.latestMonitorFailureMsg : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["outputSchemaName"] = args ? args.outputSchemaName : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["skipBuiltinDashboard"] = args ? args.skipBuiltinDashboard : undefined;
            resourceInputs["slicingExprs"] = args ? args.slicingExprs : undefined;
            resourceInputs["snapshot"] = args ? args.snapshot : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
            resourceInputs["timeSeries"] = args ? args.timeSeries : undefined;
            resourceInputs["warehouseId"] = args ? args.warehouseId : undefined;
            resourceInputs["dashboardId"] = undefined /*out*/;
            resourceInputs["driftMetricsTableName"] = undefined /*out*/;
            resourceInputs["monitorVersion"] = undefined /*out*/;
            resourceInputs["profileMetricsTableName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QualityMonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering QualityMonitor resources.
 */
export interface QualityMonitorState {
    /**
     * The directory to store the monitoring assets (Eg. Dashboard and Metric Tables)
     */
    assetsDir?: pulumi.Input<string>;
    /**
     * Name of the baseline table from which drift metrics are computed from.Columns in the monitored table should also be present in the baseline
     * table.
     */
    baselineTableName?: pulumi.Input<string>;
    /**
     * Custom metrics to compute on the monitored table. These can be aggregate metrics, derived metrics (from already computed aggregate metrics), or drift metrics (comparing metrics across time windows).
     */
    customMetrics?: pulumi.Input<pulumi.Input<inputs.QualityMonitorCustomMetric>[]>;
    /**
     * The ID of the generated dashboard.
     */
    dashboardId?: pulumi.Input<string>;
    /**
     * The data classification config for the monitor
     */
    dataClassificationConfig?: pulumi.Input<inputs.QualityMonitorDataClassificationConfig>;
    /**
     * The full name of the drift metrics table. Format: __catalog_name__.__schema_name__.__table_name__.
     */
    driftMetricsTableName?: pulumi.Input<string>;
    /**
     * Configuration for the inference log monitor
     */
    inferenceLog?: pulumi.Input<inputs.QualityMonitorInferenceLog>;
    latestMonitorFailureMsg?: pulumi.Input<string>;
    /**
     * The version of the monitor config (e.g. 1,2,3). If negative, the monitor may be corrupted
     */
    monitorVersion?: pulumi.Input<string>;
    /**
     * The notification settings for the monitor.  The following optional blocks are supported, each consisting of the single string array field with name `emailAddresses` containing a list of emails to notify:
     */
    notifications?: pulumi.Input<inputs.QualityMonitorNotifications>;
    /**
     * Schema where output metric tables are created
     */
    outputSchemaName?: pulumi.Input<string>;
    /**
     * The full name of the profile metrics table. Format: __catalog_name__.__schema_name__.__table_name__.
     */
    profileMetricsTableName?: pulumi.Input<string>;
    /**
     * The schedule for automatically updating and refreshing metric tables.  This block consists of following fields:
     */
    schedule?: pulumi.Input<inputs.QualityMonitorSchedule>;
    /**
     * Whether to skip creating a default dashboard summarizing data quality metrics.
     */
    skipBuiltinDashboard?: pulumi.Input<boolean>;
    /**
     * List of column expressions to slice data with for targeted analysis. The data is grouped by each expression independently, resulting in a separate slice for each predicate and its complements. For high-cardinality columns, only the top 100 unique values by frequency will generate slices.
     */
    slicingExprs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for monitoring snapshot tables.
     */
    snapshot?: pulumi.Input<inputs.QualityMonitorSnapshot>;
    /**
     * Status of the Monitor
     */
    status?: pulumi.Input<string>;
    /**
     * The full name of the table to attach the monitor too. Its of the format {catalog}.{schema}.{tableName}
     */
    tableName?: pulumi.Input<string>;
    /**
     * Configuration for monitoring timeseries tables.
     */
    timeSeries?: pulumi.Input<inputs.QualityMonitorTimeSeries>;
    /**
     * Optional argument to specify the warehouse for dashboard creation. If not specified, the first running warehouse will be used.
     */
    warehouseId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a QualityMonitor resource.
 */
export interface QualityMonitorArgs {
    /**
     * The directory to store the monitoring assets (Eg. Dashboard and Metric Tables)
     */
    assetsDir: pulumi.Input<string>;
    /**
     * Name of the baseline table from which drift metrics are computed from.Columns in the monitored table should also be present in the baseline
     * table.
     */
    baselineTableName?: pulumi.Input<string>;
    /**
     * Custom metrics to compute on the monitored table. These can be aggregate metrics, derived metrics (from already computed aggregate metrics), or drift metrics (comparing metrics across time windows).
     */
    customMetrics?: pulumi.Input<pulumi.Input<inputs.QualityMonitorCustomMetric>[]>;
    /**
     * The data classification config for the monitor
     */
    dataClassificationConfig?: pulumi.Input<inputs.QualityMonitorDataClassificationConfig>;
    /**
     * Configuration for the inference log monitor
     */
    inferenceLog?: pulumi.Input<inputs.QualityMonitorInferenceLog>;
    latestMonitorFailureMsg?: pulumi.Input<string>;
    /**
     * The notification settings for the monitor.  The following optional blocks are supported, each consisting of the single string array field with name `emailAddresses` containing a list of emails to notify:
     */
    notifications?: pulumi.Input<inputs.QualityMonitorNotifications>;
    /**
     * Schema where output metric tables are created
     */
    outputSchemaName: pulumi.Input<string>;
    /**
     * The schedule for automatically updating and refreshing metric tables.  This block consists of following fields:
     */
    schedule?: pulumi.Input<inputs.QualityMonitorSchedule>;
    /**
     * Whether to skip creating a default dashboard summarizing data quality metrics.
     */
    skipBuiltinDashboard?: pulumi.Input<boolean>;
    /**
     * List of column expressions to slice data with for targeted analysis. The data is grouped by each expression independently, resulting in a separate slice for each predicate and its complements. For high-cardinality columns, only the top 100 unique values by frequency will generate slices.
     */
    slicingExprs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for monitoring snapshot tables.
     */
    snapshot?: pulumi.Input<inputs.QualityMonitorSnapshot>;
    /**
     * The full name of the table to attach the monitor too. Its of the format {catalog}.{schema}.{tableName}
     */
    tableName: pulumi.Input<string>;
    /**
     * Configuration for monitoring timeseries tables.
     */
    timeSeries?: pulumi.Input<inputs.QualityMonitorTimeSeries>;
    /**
     * Optional argument to specify the warehouse for dashboard creation. If not specified, the first running warehouse will be used.
     */
    warehouseId?: pulumi.Input<string>;
}
