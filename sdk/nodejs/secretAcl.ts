// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Create or overwrite the ACL associated with the given principal (user or group) on the specified databricks_secret_scope. Please consult [Secrets User Guide](https://docs.databricks.com/security/secrets/index.html#secrets-user-guide) for more details.
 *
 * > This resource can only be used with a workspace-level provider!
 *
 * ## Example Usage
 *
 * This way, data scientists can read the Publishing API key that is synchronized from, for example, Azure Key Vault.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const ds = new databricks.Group("ds", {displayName: "data-scientists"});
 * const app = new databricks.SecretScope("app", {name: "app-secret-scope"});
 * const mySecretAcl = new databricks.SecretAcl("my_secret_acl", {
 *     principal: ds.displayName,
 *     permission: "READ",
 *     scope: app.name,
 * });
 * const publishingApi = new databricks.Secret("publishing_api", {
 *     key: "publishing_api",
 *     stringValue: example.value,
 *     scope: app.name,
 * });
 * ```
 *
 * ## Related Resources
 *
 * The following resources are often used in the same context:
 *
 * * End to end workspace management guide.
 * * databricks.Notebook to manage [Databricks Notebooks](https://docs.databricks.com/notebooks/index.html).
 * * databricks.Permissions to manage [access control](https://docs.databricks.com/security/access-control/index.html) in Databricks workspace.
 * * databricks.Repo to manage [Databricks Repos](https://docs.databricks.com/repos.html).
 * * databricks.Secret to manage [secrets](https://docs.databricks.com/security/secrets/index.html#secrets-user-guide) in Databricks workspace.
 * * databricks.SecretScope to create [secret scopes](https://docs.databricks.com/security/secrets/index.html#secrets-user-guide) in Databricks workspace.
 *
 * ## Import
 *
 * The resource secret acl can be imported using `scopeName|||principalName` combination.
 *
 * hcl
 *
 * import {
 *
 *   to = databricks_secret_acl.object
 *
 *   id = "scopeName|||principalName"
 *
 * }
 *
 * Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/secretAcl:SecretAcl object `scopeName|||principalName`
 * ```
 */
export class SecretAcl extends pulumi.CustomResource {
    /**
     * Get an existing SecretAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretAclState, opts?: pulumi.CustomResourceOptions): SecretAcl {
        return new SecretAcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/secretAcl:SecretAcl';

    /**
     * Returns true if the given object is an instance of SecretAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretAcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretAcl.__pulumiType;
    }

    /**
     * `READ`, `WRITE` or `MANAGE`.
     */
    declare public readonly permission: pulumi.Output<string>;
    /**
     * principal's identifier. It can be:
     */
    declare public readonly principal: pulumi.Output<string>;
    /**
     * name of the scope
     */
    declare public readonly scope: pulumi.Output<string>;

    /**
     * Create a SecretAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretAclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretAclArgs | SecretAclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretAclState | undefined;
            resourceInputs["permission"] = state?.permission;
            resourceInputs["principal"] = state?.principal;
            resourceInputs["scope"] = state?.scope;
        } else {
            const args = argsOrState as SecretAclArgs | undefined;
            if (args?.permission === undefined && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            if (args?.principal === undefined && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            if (args?.scope === undefined && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["permission"] = args?.permission;
            resourceInputs["principal"] = args?.principal;
            resourceInputs["scope"] = args?.scope;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretAcl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretAcl resources.
 */
export interface SecretAclState {
    /**
     * `READ`, `WRITE` or `MANAGE`.
     */
    permission?: pulumi.Input<string>;
    /**
     * principal's identifier. It can be:
     */
    principal?: pulumi.Input<string>;
    /**
     * name of the scope
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretAcl resource.
 */
export interface SecretAclArgs {
    /**
     * `READ`, `WRITE` or `MANAGE`.
     */
    permission: pulumi.Input<string>;
    /**
     * principal's identifier. It can be:
     */
    principal: pulumi.Input<string>;
    /**
     * name of the scope
     */
    scope: pulumi.Input<string>;
}
