// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * As of Pulumi v1.5, resources can be imported through configuration.
 *
 * hcl
 *
 * import {
 *
 *   id = "entity_type,entity_name,tag_key"
 *
 *   to = databricks_entity_tag_assignment.this
 *
 * }
 *
 * If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
 *
 * ```sh
 * $ pulumi import databricks:index/entityTagAssignment:EntityTagAssignment databricks_entity_tag_assignment "entity_type,entity_name,tag_key"
 * ```
 */
export class EntityTagAssignment extends pulumi.CustomResource {
    /**
     * Get an existing EntityTagAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntityTagAssignmentState, opts?: pulumi.CustomResourceOptions): EntityTagAssignment {
        return new EntityTagAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/entityTagAssignment:EntityTagAssignment';

    /**
     * Returns true if the given object is an instance of EntityTagAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EntityTagAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EntityTagAssignment.__pulumiType;
    }

    /**
     * The fully qualified name of the entity to which the tag is assigned
     */
    declare public readonly entityName: pulumi.Output<string>;
    /**
     * The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
     */
    declare public readonly entityType: pulumi.Output<string>;
    /**
     * The key of the tag
     */
    declare public readonly tagKey: pulumi.Output<string>;
    /**
     * The value of the tag
     */
    declare public readonly tagValue: pulumi.Output<string | undefined>;
    /**
     * Workspace ID of the resource
     */
    declare public readonly workspaceId: pulumi.Output<string | undefined>;

    /**
     * Create a EntityTagAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EntityTagAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntityTagAssignmentArgs | EntityTagAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EntityTagAssignmentState | undefined;
            resourceInputs["entityName"] = state?.entityName;
            resourceInputs["entityType"] = state?.entityType;
            resourceInputs["tagKey"] = state?.tagKey;
            resourceInputs["tagValue"] = state?.tagValue;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as EntityTagAssignmentArgs | undefined;
            if (args?.entityName === undefined && !opts.urn) {
                throw new Error("Missing required property 'entityName'");
            }
            if (args?.entityType === undefined && !opts.urn) {
                throw new Error("Missing required property 'entityType'");
            }
            if (args?.tagKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'tagKey'");
            }
            resourceInputs["entityName"] = args?.entityName;
            resourceInputs["entityType"] = args?.entityType;
            resourceInputs["tagKey"] = args?.tagKey;
            resourceInputs["tagValue"] = args?.tagValue;
            resourceInputs["workspaceId"] = args?.workspaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EntityTagAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EntityTagAssignment resources.
 */
export interface EntityTagAssignmentState {
    /**
     * The fully qualified name of the entity to which the tag is assigned
     */
    entityName?: pulumi.Input<string>;
    /**
     * The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
     */
    entityType?: pulumi.Input<string>;
    /**
     * The key of the tag
     */
    tagKey?: pulumi.Input<string>;
    /**
     * The value of the tag
     */
    tagValue?: pulumi.Input<string>;
    /**
     * Workspace ID of the resource
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EntityTagAssignment resource.
 */
export interface EntityTagAssignmentArgs {
    /**
     * The fully qualified name of the entity to which the tag is assigned
     */
    entityName: pulumi.Input<string>;
    /**
     * The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
     */
    entityType: pulumi.Input<string>;
    /**
     * The key of the tag
     */
    tagKey: pulumi.Input<string>;
    /**
     * The value of the tag
     */
    tagValue?: pulumi.Input<string>;
    /**
     * Workspace ID of the resource
     */
    workspaceId?: pulumi.Input<string>;
}
