// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * This resource can be imported using alert ID:
 *
 * hcl
 *
 * import {
 *
 *   to = databricks_alert.this
 *
 *   id = "<alert-id>"
 *
 * }
 *
 * Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/alert:Alert this <alert-id>
 * ```
 */
export class Alert extends pulumi.CustomResource {
    /**
     * Get an existing Alert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertState, opts?: pulumi.CustomResourceOptions): Alert {
        return new Alert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/alert:Alert';

    /**
     * Returns true if the given object is an instance of Alert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Alert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Alert.__pulumiType;
    }

    /**
     * Trigger conditions of the alert. Block consists of the following attributes:
     */
    declare public readonly condition: pulumi.Output<outputs.AlertCondition>;
    /**
     * The timestamp string indicating when the alert was created.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
     */
    declare public readonly customBody: pulumi.Output<string | undefined>;
    /**
     * Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
     */
    declare public readonly customSubject: pulumi.Output<string | undefined>;
    /**
     * Name of the alert.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * The workspace state of the alert. Used for tracking trashed status. (Possible values are `ACTIVE` or `TRASHED`).
     */
    declare public /*out*/ readonly lifecycleState: pulumi.Output<string>;
    /**
     * Whether to notify alert subscribers when alert returns back to normal.
     */
    declare public readonly notifyOnOk: pulumi.Output<boolean | undefined>;
    /**
     * Alert owner's username.
     */
    declare public readonly ownerUserName: pulumi.Output<string | undefined>;
    /**
     * The path to a workspace folder containing the alert. The default is the user's home folder.  If changed, the alert will be recreated.
     */
    declare public readonly parentPath: pulumi.Output<string | undefined>;
    /**
     * ID of the query evaluated by the alert.
     */
    declare public readonly queryId: pulumi.Output<string>;
    /**
     * Number of seconds an alert must wait after being triggered to rearm itself. After rearming, it can be triggered again. If 0 or not specified, the alert will not be triggered again.
     */
    declare public readonly secondsToRetrigger: pulumi.Output<number | undefined>;
    /**
     * Current state of the alert's trigger status (`UNKNOWN`, `OK`, `TRIGGERED`). This field is set to `UNKNOWN` if the alert has not yet been evaluated or ran into an error during the last evaluation.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The timestamp string when the alert was last triggered if the alert has been triggered before.
     */
    declare public /*out*/ readonly triggerTime: pulumi.Output<string>;
    /**
     * The timestamp string indicating when the alert was updated.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a Alert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertArgs | AlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertState | undefined;
            resourceInputs["condition"] = state?.condition;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["customBody"] = state?.customBody;
            resourceInputs["customSubject"] = state?.customSubject;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["lifecycleState"] = state?.lifecycleState;
            resourceInputs["notifyOnOk"] = state?.notifyOnOk;
            resourceInputs["ownerUserName"] = state?.ownerUserName;
            resourceInputs["parentPath"] = state?.parentPath;
            resourceInputs["queryId"] = state?.queryId;
            resourceInputs["secondsToRetrigger"] = state?.secondsToRetrigger;
            resourceInputs["state"] = state?.state;
            resourceInputs["triggerTime"] = state?.triggerTime;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as AlertArgs | undefined;
            if (args?.condition === undefined && !opts.urn) {
                throw new Error("Missing required property 'condition'");
            }
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.queryId === undefined && !opts.urn) {
                throw new Error("Missing required property 'queryId'");
            }
            resourceInputs["condition"] = args?.condition;
            resourceInputs["customBody"] = args?.customBody;
            resourceInputs["customSubject"] = args?.customSubject;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["notifyOnOk"] = args?.notifyOnOk;
            resourceInputs["ownerUserName"] = args?.ownerUserName;
            resourceInputs["parentPath"] = args?.parentPath;
            resourceInputs["queryId"] = args?.queryId;
            resourceInputs["secondsToRetrigger"] = args?.secondsToRetrigger;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["lifecycleState"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["triggerTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Alert.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Alert resources.
 */
export interface AlertState {
    /**
     * Trigger conditions of the alert. Block consists of the following attributes:
     */
    condition?: pulumi.Input<inputs.AlertCondition>;
    /**
     * The timestamp string indicating when the alert was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
     */
    customBody?: pulumi.Input<string>;
    /**
     * Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
     */
    customSubject?: pulumi.Input<string>;
    /**
     * Name of the alert.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The workspace state of the alert. Used for tracking trashed status. (Possible values are `ACTIVE` or `TRASHED`).
     */
    lifecycleState?: pulumi.Input<string>;
    /**
     * Whether to notify alert subscribers when alert returns back to normal.
     */
    notifyOnOk?: pulumi.Input<boolean>;
    /**
     * Alert owner's username.
     */
    ownerUserName?: pulumi.Input<string>;
    /**
     * The path to a workspace folder containing the alert. The default is the user's home folder.  If changed, the alert will be recreated.
     */
    parentPath?: pulumi.Input<string>;
    /**
     * ID of the query evaluated by the alert.
     */
    queryId?: pulumi.Input<string>;
    /**
     * Number of seconds an alert must wait after being triggered to rearm itself. After rearming, it can be triggered again. If 0 or not specified, the alert will not be triggered again.
     */
    secondsToRetrigger?: pulumi.Input<number>;
    /**
     * Current state of the alert's trigger status (`UNKNOWN`, `OK`, `TRIGGERED`). This field is set to `UNKNOWN` if the alert has not yet been evaluated or ran into an error during the last evaluation.
     */
    state?: pulumi.Input<string>;
    /**
     * The timestamp string when the alert was last triggered if the alert has been triggered before.
     */
    triggerTime?: pulumi.Input<string>;
    /**
     * The timestamp string indicating when the alert was updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Alert resource.
 */
export interface AlertArgs {
    /**
     * Trigger conditions of the alert. Block consists of the following attributes:
     */
    condition: pulumi.Input<inputs.AlertCondition>;
    /**
     * Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
     */
    customBody?: pulumi.Input<string>;
    /**
     * Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/en/sql/user/alerts/index.html) for custom templating instructions.
     */
    customSubject?: pulumi.Input<string>;
    /**
     * Name of the alert.
     */
    displayName: pulumi.Input<string>;
    /**
     * Whether to notify alert subscribers when alert returns back to normal.
     */
    notifyOnOk?: pulumi.Input<boolean>;
    /**
     * Alert owner's username.
     */
    ownerUserName?: pulumi.Input<string>;
    /**
     * The path to a workspace folder containing the alert. The default is the user's home folder.  If changed, the alert will be recreated.
     */
    parentPath?: pulumi.Input<string>;
    /**
     * ID of the query evaluated by the alert.
     */
    queryId: pulumi.Input<string>;
    /**
     * Number of seconds an alert must wait after being triggered to rearm itself. After rearming, it can be triggered again. If 0 or not specified, the alert will not be triggered again.
     */
    secondsToRetrigger?: pulumi.Input<number>;
}
