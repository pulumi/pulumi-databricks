// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * This resource can be imported by its full name:
 *
 * hcl
 *
 * import {
 *
 *   to = databricks_sql_table.this
 *
 *   id = "<catalog_name>.<schema_name>.<name>"
 *
 * }
 *
 * Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/sqlTable:SqlTable this "<catalog_name>.<schema_name>.<name>"
 * ```
 */
export class SqlTable extends pulumi.CustomResource {
    /**
     * Get an existing SqlTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlTableState, opts?: pulumi.CustomResourceOptions): SqlTable {
        return new SqlTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/sqlTable:SqlTable';

    /**
     * Returns true if the given object is an instance of SqlTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlTable.__pulumiType;
    }

    /**
     * Name of parent catalog. Change forces the creation of a new resource.
     */
    declare public readonly catalogName: pulumi.Output<string>;
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * a subset of columns to liquid cluster the table by. For automatic clustering, set `clusterKeys` to `["AUTO"]`. To turn off clustering, set it to `["NONE"]`. Conflicts with `partitions`.
     */
    declare public readonly clusterKeys: pulumi.Output<string[] | undefined>;
    declare public readonly columns: pulumi.Output<outputs.SqlTableColumn[]>;
    /**
     * User-supplied free-form text. Changing the comment is not currently supported on the `VIEW` table type.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * External tables are supported in multiple data source formats. The string constants identifying these formats are `DELTA`, `CSV`, `JSON`, `AVRO`, `PARQUET`, `ORC`, and `TEXT`. Change forces the creation of a new resource. Not supported for `MANAGED` tables or `VIEW`.
     */
    declare public readonly dataSourceFormat: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly effectiveProperties: pulumi.Output<{[key: string]: string}>;
    /**
     * Name of table relative to parent catalog and schema. Change forces the creation of a new resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Map of user defined table options. Change forces creation of a new resource.
     */
    declare public readonly options: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * User name/group name/sp applicationId of the table owner.
     */
    declare public readonly owner: pulumi.Output<string>;
    /**
     * a subset of columns to partition the table by. Change forces the creation of a new resource. Conflicts with `clusterKeys`.
     */
    declare public readonly partitions: pulumi.Output<string[]>;
    /**
     * A map of table properties.
     */
    declare public readonly properties: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of parent Schema relative to parent Catalog. Change forces the creation of a new resource.
     */
    declare public readonly schemaName: pulumi.Output<string>;
    /**
     * For EXTERNAL Tables only: the name of storage credential to use. Change forces the creation of a new resource.
     */
    declare public readonly storageCredentialName: pulumi.Output<string | undefined>;
    /**
     * URL of storage location for Table data (required for EXTERNAL Tables). Not supported for `VIEW` or `MANAGED` table_type.
     */
    declare public readonly storageLocation: pulumi.Output<string | undefined>;
    /**
     * Distinguishes a view vs. managed/external Table. `MANAGED`, `EXTERNAL`, `METRIC_VIEW` or `VIEW`. Change forces the creation of a new resource.
     */
    declare public readonly tableType: pulumi.Output<string>;
    /**
     * SQL text defining the view (for `tableType == "VIEW"`). Not supported for `MANAGED` or `EXTERNAL` table_type.
     */
    declare public readonly viewDefinition: pulumi.Output<string | undefined>;
    /**
     * All table CRUD operations must be executed on a running cluster or SQL warehouse. If a `warehouseId` is specified, that SQL warehouse will be used to execute SQL commands to manage this table. Conflicts with `clusterId`.
     */
    declare public readonly warehouseId: pulumi.Output<string | undefined>;

    /**
     * Create a SqlTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlTableArgs | SqlTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlTableState | undefined;
            resourceInputs["catalogName"] = state?.catalogName;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["clusterKeys"] = state?.clusterKeys;
            resourceInputs["columns"] = state?.columns;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["dataSourceFormat"] = state?.dataSourceFormat;
            resourceInputs["effectiveProperties"] = state?.effectiveProperties;
            resourceInputs["name"] = state?.name;
            resourceInputs["options"] = state?.options;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["partitions"] = state?.partitions;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["schemaName"] = state?.schemaName;
            resourceInputs["storageCredentialName"] = state?.storageCredentialName;
            resourceInputs["storageLocation"] = state?.storageLocation;
            resourceInputs["tableType"] = state?.tableType;
            resourceInputs["viewDefinition"] = state?.viewDefinition;
            resourceInputs["warehouseId"] = state?.warehouseId;
        } else {
            const args = argsOrState as SqlTableArgs | undefined;
            if (args?.catalogName === undefined && !opts.urn) {
                throw new Error("Missing required property 'catalogName'");
            }
            if (args?.schemaName === undefined && !opts.urn) {
                throw new Error("Missing required property 'schemaName'");
            }
            if (args?.tableType === undefined && !opts.urn) {
                throw new Error("Missing required property 'tableType'");
            }
            resourceInputs["catalogName"] = args?.catalogName;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["clusterKeys"] = args?.clusterKeys;
            resourceInputs["columns"] = args?.columns;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["dataSourceFormat"] = args?.dataSourceFormat;
            resourceInputs["name"] = args?.name;
            resourceInputs["options"] = args?.options;
            resourceInputs["owner"] = args?.owner;
            resourceInputs["partitions"] = args?.partitions;
            resourceInputs["properties"] = args?.properties;
            resourceInputs["schemaName"] = args?.schemaName;
            resourceInputs["storageCredentialName"] = args?.storageCredentialName;
            resourceInputs["storageLocation"] = args?.storageLocation;
            resourceInputs["tableType"] = args?.tableType;
            resourceInputs["viewDefinition"] = args?.viewDefinition;
            resourceInputs["warehouseId"] = args?.warehouseId;
            resourceInputs["effectiveProperties"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SqlTable resources.
 */
export interface SqlTableState {
    /**
     * Name of parent catalog. Change forces the creation of a new resource.
     */
    catalogName?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    /**
     * a subset of columns to liquid cluster the table by. For automatic clustering, set `clusterKeys` to `["AUTO"]`. To turn off clustering, set it to `["NONE"]`. Conflicts with `partitions`.
     */
    clusterKeys?: pulumi.Input<pulumi.Input<string>[]>;
    columns?: pulumi.Input<pulumi.Input<inputs.SqlTableColumn>[]>;
    /**
     * User-supplied free-form text. Changing the comment is not currently supported on the `VIEW` table type.
     */
    comment?: pulumi.Input<string>;
    /**
     * External tables are supported in multiple data source formats. The string constants identifying these formats are `DELTA`, `CSV`, `JSON`, `AVRO`, `PARQUET`, `ORC`, and `TEXT`. Change forces the creation of a new resource. Not supported for `MANAGED` tables or `VIEW`.
     */
    dataSourceFormat?: pulumi.Input<string>;
    effectiveProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of table relative to parent catalog and schema. Change forces the creation of a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Map of user defined table options. Change forces creation of a new resource.
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User name/group name/sp applicationId of the table owner.
     */
    owner?: pulumi.Input<string>;
    /**
     * a subset of columns to partition the table by. Change forces the creation of a new resource. Conflicts with `clusterKeys`.
     */
    partitions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of table properties.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of parent Schema relative to parent Catalog. Change forces the creation of a new resource.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * For EXTERNAL Tables only: the name of storage credential to use. Change forces the creation of a new resource.
     */
    storageCredentialName?: pulumi.Input<string>;
    /**
     * URL of storage location for Table data (required for EXTERNAL Tables). Not supported for `VIEW` or `MANAGED` table_type.
     */
    storageLocation?: pulumi.Input<string>;
    /**
     * Distinguishes a view vs. managed/external Table. `MANAGED`, `EXTERNAL`, `METRIC_VIEW` or `VIEW`. Change forces the creation of a new resource.
     */
    tableType?: pulumi.Input<string>;
    /**
     * SQL text defining the view (for `tableType == "VIEW"`). Not supported for `MANAGED` or `EXTERNAL` table_type.
     */
    viewDefinition?: pulumi.Input<string>;
    /**
     * All table CRUD operations must be executed on a running cluster or SQL warehouse. If a `warehouseId` is specified, that SQL warehouse will be used to execute SQL commands to manage this table. Conflicts with `clusterId`.
     */
    warehouseId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlTable resource.
 */
export interface SqlTableArgs {
    /**
     * Name of parent catalog. Change forces the creation of a new resource.
     */
    catalogName: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    /**
     * a subset of columns to liquid cluster the table by. For automatic clustering, set `clusterKeys` to `["AUTO"]`. To turn off clustering, set it to `["NONE"]`. Conflicts with `partitions`.
     */
    clusterKeys?: pulumi.Input<pulumi.Input<string>[]>;
    columns?: pulumi.Input<pulumi.Input<inputs.SqlTableColumn>[]>;
    /**
     * User-supplied free-form text. Changing the comment is not currently supported on the `VIEW` table type.
     */
    comment?: pulumi.Input<string>;
    /**
     * External tables are supported in multiple data source formats. The string constants identifying these formats are `DELTA`, `CSV`, `JSON`, `AVRO`, `PARQUET`, `ORC`, and `TEXT`. Change forces the creation of a new resource. Not supported for `MANAGED` tables or `VIEW`.
     */
    dataSourceFormat?: pulumi.Input<string>;
    /**
     * Name of table relative to parent catalog and schema. Change forces the creation of a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Map of user defined table options. Change forces creation of a new resource.
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User name/group name/sp applicationId of the table owner.
     */
    owner?: pulumi.Input<string>;
    /**
     * a subset of columns to partition the table by. Change forces the creation of a new resource. Conflicts with `clusterKeys`.
     */
    partitions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of table properties.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of parent Schema relative to parent Catalog. Change forces the creation of a new resource.
     */
    schemaName: pulumi.Input<string>;
    /**
     * For EXTERNAL Tables only: the name of storage credential to use. Change forces the creation of a new resource.
     */
    storageCredentialName?: pulumi.Input<string>;
    /**
     * URL of storage location for Table data (required for EXTERNAL Tables). Not supported for `VIEW` or `MANAGED` table_type.
     */
    storageLocation?: pulumi.Input<string>;
    /**
     * Distinguishes a view vs. managed/external Table. `MANAGED`, `EXTERNAL`, `METRIC_VIEW` or `VIEW`. Change forces the creation of a new resource.
     */
    tableType: pulumi.Input<string>;
    /**
     * SQL text defining the view (for `tableType == "VIEW"`). Not supported for `MANAGED` or `EXTERNAL` table_type.
     */
    viewDefinition?: pulumi.Input<string>;
    /**
     * All table CRUD operations must be executed on a running cluster or SQL warehouse. If a `warehouseId` is specified, that SQL warehouse will be used to execute SQL commands to manage this table. Conflicts with `clusterId`.
     */
    warehouseId?: pulumi.Input<string>;
}
