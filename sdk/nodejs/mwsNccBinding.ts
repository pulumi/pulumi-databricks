// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > **Note** Initialize provider with `alias = "account"`, `host = "https://accounts.azuredatabricks.net"` and use `provider = databricks.account` for all `databricks_mws_*` resources.
 *
 * > **Public Preview** This feature is available for AWS & Azure only, and is in [Public Preview](https://docs.databricks.com/release-notes/release-types.html) in AWS.
 *
 * Allows you to attach a Network Connectivity Config object to a databricks.MwsWorkspaces resource to create a [Databricks Workspace that leverages serverless network connectivity configs](https://learn.microsoft.com/en-us/azure/databricks/sql/admin/serverless-firewall).
 *
 * The NCC and workspace must be in the same region.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const config = new pulumi.Config();
 * const region = config.requireObject("region");
 * const prefix = config.requireObject("prefix");
 * const ncc = new databricks.MwsNetworkConnectivityConfig("ncc", {
 *     name: `Network Connectivity Config for ${prefix}`,
 *     region: region,
 * });
 * const nccBinding = new databricks.MwsNccBinding("ncc_binding", {
 *     networkConnectivityConfigId: ncc.networkConnectivityConfigId,
 *     workspaceId: databricksWorkspaceId,
 * });
 * ```
 *
 * ## Related Resources
 *
 * The following resources are used in the context:
 *
 * * databricks.MwsWorkspaces to set up Databricks workspaces.
 * * databricks.MwsNetworkConnectivityConfig to create Network Connectivity Config objects.
 */
export class MwsNccBinding extends pulumi.CustomResource {
    /**
     * Get an existing MwsNccBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MwsNccBindingState, opts?: pulumi.CustomResourceOptions): MwsNccBinding {
        return new MwsNccBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/mwsNccBinding:MwsNccBinding';

    /**
     * Returns true if the given object is an instance of MwsNccBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MwsNccBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MwsNccBinding.__pulumiType;
    }

    /**
     * Canonical unique identifier of Network Connectivity Config in Databricks Account.
     */
    public readonly networkConnectivityConfigId!: pulumi.Output<string>;
    /**
     * Identifier of the workspace to attach the NCC to. Change forces creation of a new resource.
     */
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a MwsNccBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MwsNccBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MwsNccBindingArgs | MwsNccBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MwsNccBindingState | undefined;
            resourceInputs["networkConnectivityConfigId"] = state ? state.networkConnectivityConfigId : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as MwsNccBindingArgs | undefined;
            if ((!args || args.networkConnectivityConfigId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkConnectivityConfigId'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["networkConnectivityConfigId"] = args ? args.networkConnectivityConfigId : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MwsNccBinding.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MwsNccBinding resources.
 */
export interface MwsNccBindingState {
    /**
     * Canonical unique identifier of Network Connectivity Config in Databricks Account.
     */
    networkConnectivityConfigId?: pulumi.Input<string>;
    /**
     * Identifier of the workspace to attach the NCC to. Change forces creation of a new resource.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MwsNccBinding resource.
 */
export interface MwsNccBindingArgs {
    /**
     * Canonical unique identifier of Network Connectivity Config in Databricks Account.
     */
    networkConnectivityConfigId: pulumi.Input<string>;
    /**
     * Identifier of the workspace to attach the NCC to. Change forces creation of a new resource.
     */
    workspaceId: pulumi.Input<string>;
}
