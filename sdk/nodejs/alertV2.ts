// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The Alert v2 resource allows you to manage SQL alerts in Databricks SQL. Alerts monitor query results and notify you when specific conditions are met.
 *
 * Alerts run on a schedule and evaluate query results against defined thresholds. When an alert is triggered, notifications can be sent to specified users or destinations.
 *
 * ## Example Usage
 *
 * ### Basic Alert Example
 * This example creates a basic alert that monitors a query and sends notifications to a user when the value exceeds a threshold:
 *
 * ## Import
 *
 * As of Pulumi v1.5, resources can be imported through configuration.
 *
 * hcl
 *
 * import {
 *
 *   id = "id"
 *
 *   to = databricks_alert_v2.this
 *
 * }
 *
 * If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
 *
 * ```sh
 * $ pulumi import databricks:index/alertV2:AlertV2 databricks_alert_v2 "id"
 * ```
 */
export class AlertV2 extends pulumi.CustomResource {
    /**
     * Get an existing AlertV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertV2State, opts?: pulumi.CustomResourceOptions): AlertV2 {
        return new AlertV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/alertV2:AlertV2';

    /**
     * Returns true if the given object is an instance of AlertV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertV2.__pulumiType;
    }

    /**
     * (string) - The timestamp indicating when the alert was created
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Custom description for the alert. support mustache template
     */
    declare public readonly customDescription: pulumi.Output<string | undefined>;
    /**
     * Custom summary for the alert. support mustache template
     */
    declare public readonly customSummary: pulumi.Output<string | undefined>;
    /**
     * The display name of the alert
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * (AlertV2RunAs) - The actual identity that will be used to execute the alert.
     * This is an output-only field that shows the resolved run-as identity after applying
     * permissions and defaults
     */
    declare public /*out*/ readonly effectiveRunAs: pulumi.Output<outputs.AlertV2EffectiveRunAs>;
    declare public readonly evaluation: pulumi.Output<outputs.AlertV2Evaluation | undefined>;
    /**
     * (string) - Indicates whether the query is trashed. Possible values are: `ACTIVE`, `TRASHED`
     */
    declare public /*out*/ readonly lifecycleState: pulumi.Output<string>;
    /**
     * (string) - The owner's username. This field is set to "Unavailable" if the user has been deleted
     */
    declare public /*out*/ readonly ownerUserName: pulumi.Output<string>;
    /**
     * The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
     */
    declare public readonly parentPath: pulumi.Output<string | undefined>;
    /**
     * Text of the query to be run
     */
    declare public readonly queryText: pulumi.Output<string | undefined>;
    /**
     * Specifies the identity that will be used to run the alert.
     * This field allows you to configure alerts to run as a specific user or service principal.
     * - For user identity: Set `userName` to the email of an active workspace user. Users can only set this to their own email.
     * - For service principal: Set `servicePrincipalName` to the application ID. Requires the `servicePrincipal/user` role.
     * If not specified, the alert will run as the request user
     */
    declare public readonly runAs: pulumi.Output<outputs.AlertV2RunAs | undefined>;
    /**
     * The run as username or application ID of service principal.
     * On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role.
     * Deprecated: Use `runAs` field instead. This field will be removed in a future release
     */
    declare public readonly runAsUserName: pulumi.Output<string | undefined>;
    declare public readonly schedule: pulumi.Output<outputs.AlertV2Schedule | undefined>;
    /**
     * (string) - The timestamp indicating when the alert was updated
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;
    /**
     * ID of the SQL warehouse attached to the alert
     */
    declare public readonly warehouseId: pulumi.Output<string | undefined>;
    /**
     * Workspace ID of the resource
     */
    declare public readonly workspaceId: pulumi.Output<string | undefined>;

    /**
     * Create a AlertV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AlertV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertV2Args | AlertV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertV2State | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["customDescription"] = state?.customDescription;
            resourceInputs["customSummary"] = state?.customSummary;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["effectiveRunAs"] = state?.effectiveRunAs;
            resourceInputs["evaluation"] = state?.evaluation;
            resourceInputs["lifecycleState"] = state?.lifecycleState;
            resourceInputs["ownerUserName"] = state?.ownerUserName;
            resourceInputs["parentPath"] = state?.parentPath;
            resourceInputs["queryText"] = state?.queryText;
            resourceInputs["runAs"] = state?.runAs;
            resourceInputs["runAsUserName"] = state?.runAsUserName;
            resourceInputs["schedule"] = state?.schedule;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["warehouseId"] = state?.warehouseId;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as AlertV2Args | undefined;
            resourceInputs["customDescription"] = args?.customDescription;
            resourceInputs["customSummary"] = args?.customSummary;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["evaluation"] = args?.evaluation;
            resourceInputs["parentPath"] = args?.parentPath;
            resourceInputs["queryText"] = args?.queryText;
            resourceInputs["runAs"] = args?.runAs;
            resourceInputs["runAsUserName"] = args?.runAsUserName;
            resourceInputs["schedule"] = args?.schedule;
            resourceInputs["warehouseId"] = args?.warehouseId;
            resourceInputs["workspaceId"] = args?.workspaceId;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveRunAs"] = undefined /*out*/;
            resourceInputs["lifecycleState"] = undefined /*out*/;
            resourceInputs["ownerUserName"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertV2 resources.
 */
export interface AlertV2State {
    /**
     * (string) - The timestamp indicating when the alert was created
     */
    createTime?: pulumi.Input<string>;
    /**
     * Custom description for the alert. support mustache template
     */
    customDescription?: pulumi.Input<string>;
    /**
     * Custom summary for the alert. support mustache template
     */
    customSummary?: pulumi.Input<string>;
    /**
     * The display name of the alert
     */
    displayName?: pulumi.Input<string>;
    /**
     * (AlertV2RunAs) - The actual identity that will be used to execute the alert.
     * This is an output-only field that shows the resolved run-as identity after applying
     * permissions and defaults
     */
    effectiveRunAs?: pulumi.Input<inputs.AlertV2EffectiveRunAs>;
    evaluation?: pulumi.Input<inputs.AlertV2Evaluation>;
    /**
     * (string) - Indicates whether the query is trashed. Possible values are: `ACTIVE`, `TRASHED`
     */
    lifecycleState?: pulumi.Input<string>;
    /**
     * (string) - The owner's username. This field is set to "Unavailable" if the user has been deleted
     */
    ownerUserName?: pulumi.Input<string>;
    /**
     * The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
     */
    parentPath?: pulumi.Input<string>;
    /**
     * Text of the query to be run
     */
    queryText?: pulumi.Input<string>;
    /**
     * Specifies the identity that will be used to run the alert.
     * This field allows you to configure alerts to run as a specific user or service principal.
     * - For user identity: Set `userName` to the email of an active workspace user. Users can only set this to their own email.
     * - For service principal: Set `servicePrincipalName` to the application ID. Requires the `servicePrincipal/user` role.
     * If not specified, the alert will run as the request user
     */
    runAs?: pulumi.Input<inputs.AlertV2RunAs>;
    /**
     * The run as username or application ID of service principal.
     * On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role.
     * Deprecated: Use `runAs` field instead. This field will be removed in a future release
     */
    runAsUserName?: pulumi.Input<string>;
    schedule?: pulumi.Input<inputs.AlertV2Schedule>;
    /**
     * (string) - The timestamp indicating when the alert was updated
     */
    updateTime?: pulumi.Input<string>;
    /**
     * ID of the SQL warehouse attached to the alert
     */
    warehouseId?: pulumi.Input<string>;
    /**
     * Workspace ID of the resource
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertV2 resource.
 */
export interface AlertV2Args {
    /**
     * Custom description for the alert. support mustache template
     */
    customDescription?: pulumi.Input<string>;
    /**
     * Custom summary for the alert. support mustache template
     */
    customSummary?: pulumi.Input<string>;
    /**
     * The display name of the alert
     */
    displayName?: pulumi.Input<string>;
    evaluation?: pulumi.Input<inputs.AlertV2Evaluation>;
    /**
     * The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
     */
    parentPath?: pulumi.Input<string>;
    /**
     * Text of the query to be run
     */
    queryText?: pulumi.Input<string>;
    /**
     * Specifies the identity that will be used to run the alert.
     * This field allows you to configure alerts to run as a specific user or service principal.
     * - For user identity: Set `userName` to the email of an active workspace user. Users can only set this to their own email.
     * - For service principal: Set `servicePrincipalName` to the application ID. Requires the `servicePrincipal/user` role.
     * If not specified, the alert will run as the request user
     */
    runAs?: pulumi.Input<inputs.AlertV2RunAs>;
    /**
     * The run as username or application ID of service principal.
     * On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role.
     * Deprecated: Use `runAs` field instead. This field will be removed in a future release
     */
    runAsUserName?: pulumi.Input<string>;
    schedule?: pulumi.Input<inputs.AlertV2Schedule>;
    /**
     * ID of the SQL warehouse attached to the alert
     */
    warehouseId?: pulumi.Input<string>;
    /**
     * Workspace ID of the resource
     */
    workspaceId?: pulumi.Input<string>;
}
