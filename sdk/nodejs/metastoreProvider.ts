// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > **Note** This resource could be only used with workspace-level provider!
 *
 * Within a metastore, Unity Catalog provides the ability to create a provider which contains a list of shares that have been shared with you.
 *
 * A `databricks.MetastoreProvider` is contained within databricks.Metastore and can contain a list of shares that have been shared with you.
 *
 * Note that Databricks to Databricks sharing automatically creates the provider.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const dbprovider = new databricks.MetastoreProvider("dbprovider", {
 *     name: "terraform-test-provider",
 *     comment: "made by terraform 2",
 *     authenticationType: "TOKEN",
 *     recipientProfileStr: JSON.stringify({
 *         shareCredentialsVersion: 1,
 *         bearerToken: "token",
 *         endpoint: "endpoint",
 *         expirationTime: "expiration-time",
 *     }),
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Related Resources
 *
 * The following resources are used in the same context:
 *
 * * databricks.getTables data to list tables within Unity Catalog.
 * * databricks.getSchemas data to list schemas within Unity Catalog.
 * * databricks.getCatalogs data to list catalogs within Unity Catalog.
 */
export class MetastoreProvider extends pulumi.CustomResource {
    /**
     * Get an existing MetastoreProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetastoreProviderState, opts?: pulumi.CustomResourceOptions): MetastoreProvider {
        return new MetastoreProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/metastoreProvider:MetastoreProvider';

    /**
     * Returns true if the given object is an instance of MetastoreProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetastoreProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetastoreProvider.__pulumiType;
    }

    /**
     * The delta sharing authentication type. Valid values are `TOKEN`.
     */
    public readonly authenticationType!: pulumi.Output<string>;
    /**
     * Description about the provider.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Name of provider. Change forces creation of a new resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * This is the json file that is created from a recipient url.
     */
    public readonly recipientProfileStr!: pulumi.Output<string>;

    /**
     * Create a MetastoreProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetastoreProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetastoreProviderArgs | MetastoreProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetastoreProviderState | undefined;
            resourceInputs["authenticationType"] = state ? state.authenticationType : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recipientProfileStr"] = state ? state.recipientProfileStr : undefined;
        } else {
            const args = argsOrState as MetastoreProviderArgs | undefined;
            if ((!args || args.authenticationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationType'");
            }
            if ((!args || args.recipientProfileStr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recipientProfileStr'");
            }
            resourceInputs["authenticationType"] = args ? args.authenticationType : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recipientProfileStr"] = args?.recipientProfileStr ? pulumi.secret(args.recipientProfileStr) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["recipientProfileStr"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MetastoreProvider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetastoreProvider resources.
 */
export interface MetastoreProviderState {
    /**
     * The delta sharing authentication type. Valid values are `TOKEN`.
     */
    authenticationType?: pulumi.Input<string>;
    /**
     * Description about the provider.
     */
    comment?: pulumi.Input<string>;
    /**
     * Name of provider. Change forces creation of a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * This is the json file that is created from a recipient url.
     */
    recipientProfileStr?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetastoreProvider resource.
 */
export interface MetastoreProviderArgs {
    /**
     * The delta sharing authentication type. Valid values are `TOKEN`.
     */
    authenticationType: pulumi.Input<string>;
    /**
     * Description about the provider.
     */
    comment?: pulumi.Input<string>;
    /**
     * Name of provider. Change forces creation of a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * This is the json file that is created from a recipient url.
     */
    recipientProfileStr: pulumi.Input<string>;
}
