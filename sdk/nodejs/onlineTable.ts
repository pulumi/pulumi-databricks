// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > **Note** This resource could be only used on Unity Catalog-enabled workspace!
 *
 * This resource allows you to create [Online Table](https://docs.databricks.com/en/machine-learning/feature-store/online-tables.html) in Databricks.  An online table is a read-only copy of a Delta Table that is stored in row-oriented format optimized for online access. Online tables are fully serverless tables that auto-scale throughput capacity with the request load and provide low latency and high throughput access to data of any scale. Online tables are designed to work with Databricks Model Serving, Feature Serving, and retrieval-augmented generation (RAG) applications where they are used for fast data lookups.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const _this = new databricks.OnlineTable("this", {
 *     name: "main.default.online_table",
 *     spec: {
 *         sourceTableFullName: "main.default.source_table",
 *         primaryKeyColumns: ["id"],
 *         runTriggered: {},
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * The resource can be imported using the name of the Online Table:
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/onlineTable:OnlineTable this <endpoint-name>
 * ```
 */
export class OnlineTable extends pulumi.CustomResource {
    /**
     * Get an existing OnlineTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OnlineTableState, opts?: pulumi.CustomResourceOptions): OnlineTable {
        return new OnlineTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/onlineTable:OnlineTable';

    /**
     * Returns true if the given object is an instance of OnlineTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OnlineTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OnlineTable.__pulumiType;
    }

    /**
     * 3-level name of the Online Table to create.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * object containing specification of the online table:
     */
    public readonly spec!: pulumi.Output<outputs.OnlineTableSpec | undefined>;
    /**
     * object describing status of the online table:
     */
    public /*out*/ readonly statuses!: pulumi.Output<outputs.OnlineTableStatus[]>;

    /**
     * Create a OnlineTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OnlineTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OnlineTableArgs | OnlineTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OnlineTableState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["statuses"] = state ? state.statuses : undefined;
        } else {
            const args = argsOrState as OnlineTableArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["statuses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OnlineTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OnlineTable resources.
 */
export interface OnlineTableState {
    /**
     * 3-level name of the Online Table to create.
     */
    name?: pulumi.Input<string>;
    /**
     * object containing specification of the online table:
     */
    spec?: pulumi.Input<inputs.OnlineTableSpec>;
    /**
     * object describing status of the online table:
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.OnlineTableStatus>[]>;
}

/**
 * The set of arguments for constructing a OnlineTable resource.
 */
export interface OnlineTableArgs {
    /**
     * 3-level name of the Online Table to create.
     */
    name?: pulumi.Input<string>;
    /**
     * object containing specification of the online table:
     */
    spec?: pulumi.Input<inputs.OnlineTableSpec>;
}
