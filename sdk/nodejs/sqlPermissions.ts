// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SqlPermissions extends pulumi.CustomResource {
    /**
     * Get an existing SqlPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlPermissionsState, opts?: pulumi.CustomResourceOptions): SqlPermissions {
        return new SqlPermissions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/sqlPermissions:SqlPermissions';

    /**
     * Returns true if the given object is an instance of SqlPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlPermissions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlPermissions.__pulumiType;
    }

    public readonly anonymousFunction!: pulumi.Output<boolean | undefined>;
    public readonly anyFile!: pulumi.Output<boolean | undefined>;
    public readonly catalog!: pulumi.Output<boolean | undefined>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly database!: pulumi.Output<string | undefined>;
    public readonly privilegeAssignments!: pulumi.Output<outputs.SqlPermissionsPrivilegeAssignment[] | undefined>;
    public readonly table!: pulumi.Output<string | undefined>;
    public readonly view!: pulumi.Output<string | undefined>;

    /**
     * Create a SqlPermissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SqlPermissionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlPermissionsArgs | SqlPermissionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlPermissionsState | undefined;
            resourceInputs["anonymousFunction"] = state ? state.anonymousFunction : undefined;
            resourceInputs["anyFile"] = state ? state.anyFile : undefined;
            resourceInputs["catalog"] = state ? state.catalog : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["privilegeAssignments"] = state ? state.privilegeAssignments : undefined;
            resourceInputs["table"] = state ? state.table : undefined;
            resourceInputs["view"] = state ? state.view : undefined;
        } else {
            const args = argsOrState as SqlPermissionsArgs | undefined;
            resourceInputs["anonymousFunction"] = args ? args.anonymousFunction : undefined;
            resourceInputs["anyFile"] = args ? args.anyFile : undefined;
            resourceInputs["catalog"] = args ? args.catalog : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["privilegeAssignments"] = args ? args.privilegeAssignments : undefined;
            resourceInputs["table"] = args ? args.table : undefined;
            resourceInputs["view"] = args ? args.view : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlPermissions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SqlPermissions resources.
 */
export interface SqlPermissionsState {
    anonymousFunction?: pulumi.Input<boolean>;
    anyFile?: pulumi.Input<boolean>;
    catalog?: pulumi.Input<boolean>;
    clusterId?: pulumi.Input<string>;
    database?: pulumi.Input<string>;
    privilegeAssignments?: pulumi.Input<pulumi.Input<inputs.SqlPermissionsPrivilegeAssignment>[]>;
    table?: pulumi.Input<string>;
    view?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlPermissions resource.
 */
export interface SqlPermissionsArgs {
    anonymousFunction?: pulumi.Input<boolean>;
    anyFile?: pulumi.Input<boolean>;
    catalog?: pulumi.Input<boolean>;
    clusterId?: pulumi.Input<string>;
    database?: pulumi.Input<string>;
    privilegeAssignments?: pulumi.Input<pulumi.Input<inputs.SqlPermissionsPrivilegeAssignment>[]>;
    table?: pulumi.Input<string>;
    view?: pulumi.Input<string>;
}
