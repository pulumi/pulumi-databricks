// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Within a metastore, Unity Catalog provides a 3-level namespace for organizing data: Catalogs, Databases (also called Schemas), and Tables / Views.
 *
 * A `databricks.Catalog` is contained within databricks.Metastore and can contain databricks_schema. By default, Databricks creates `default` schema for every new catalog, but Pulumi plugin is removing this auto-created schema, so that resource destruction could be done in a clean way.
 *
 * > This resource can only be used with a workspace-level provider!
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const sandbox = new databricks.Catalog("sandbox", {
 *     name: "sandbox",
 *     comment: "this catalog is managed by terraform",
 *     properties: {
 *         purpose: "testing",
 *     },
 * });
 * ```
 *
 * ## Related Resources
 *
 * The following resources are used in the same context:
 *
 * * databricks.getTables data to list tables within Unity Catalog.
 * * databricks.getSchemas data to list schemas within Unity Catalog.
 * * databricks.getCatalogs data to list catalogs within Unity Catalog.
 *
 * ## Import
 *
 * This resource can be imported by name:
 *
 * hcl
 *
 * import {
 *
 *   to = databricks_catalog.this
 *
 *   id = "<name>"
 *
 * }
 *
 * Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/catalog:Catalog this <name>
 * ```
 */
export class Catalog extends pulumi.CustomResource {
    /**
     * Get an existing Catalog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogState, opts?: pulumi.CustomResourceOptions): Catalog {
        return new Catalog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/catalog:Catalog';

    /**
     * Returns true if the given object is an instance of Catalog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Catalog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Catalog.__pulumiType;
    }

    /**
     * User-supplied free-form text.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * For Foreign Catalogs: the name of the connection to an external data source. Changes forces creation of a new resource.
     */
    declare public readonly connectionName: pulumi.Output<string | undefined>;
    /**
     * Whether predictive optimization should be enabled for this object and objects under it. Can be `ENABLE`, `DISABLE` or `INHERIT`
     */
    declare public readonly enablePredictiveOptimization: pulumi.Output<string>;
    /**
     * Delete catalog regardless of its contents.
     */
    declare public readonly forceDestroy: pulumi.Output<boolean | undefined>;
    /**
     * Whether the catalog is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATED` or `OPEN`. Setting the catalog to `ISOLATED` will automatically allow access from the current workspace.
     */
    declare public readonly isolationMode: pulumi.Output<string>;
    /**
     * ID of the parent metastore.
     */
    declare public readonly metastoreId: pulumi.Output<string>;
    /**
     * Name of Catalog relative to parent metastore.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * For Foreign Catalogs: the name of the entity from an external data source that maps to a catalog. For example, the database name in a PostgreSQL server.
     */
    declare public readonly options: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Username/groupname/sp applicationId of the catalog owner.
     */
    declare public readonly owner: pulumi.Output<string>;
    /**
     * Extensible Catalog properties.
     */
    declare public readonly properties: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * For Delta Sharing Catalogs: the name of the delta sharing provider. Change forces creation of a new resource.
     */
    declare public readonly providerName: pulumi.Output<string | undefined>;
    /**
     * For Delta Sharing Catalogs: the name of the share under the share provider. Change forces creation of a new resource.
     */
    declare public readonly shareName: pulumi.Output<string | undefined>;
    /**
     * Managed location of the catalog. Location in cloud storage where data for managed tables will be stored. If not specified, the location will default to the metastore root location. Change forces creation of a new resource.
     */
    declare public readonly storageRoot: pulumi.Output<string | undefined>;

    /**
     * Create a Catalog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CatalogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogArgs | CatalogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogState | undefined;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["connectionName"] = state?.connectionName;
            resourceInputs["enablePredictiveOptimization"] = state?.enablePredictiveOptimization;
            resourceInputs["forceDestroy"] = state?.forceDestroy;
            resourceInputs["isolationMode"] = state?.isolationMode;
            resourceInputs["metastoreId"] = state?.metastoreId;
            resourceInputs["name"] = state?.name;
            resourceInputs["options"] = state?.options;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["providerName"] = state?.providerName;
            resourceInputs["shareName"] = state?.shareName;
            resourceInputs["storageRoot"] = state?.storageRoot;
        } else {
            const args = argsOrState as CatalogArgs | undefined;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["connectionName"] = args?.connectionName;
            resourceInputs["enablePredictiveOptimization"] = args?.enablePredictiveOptimization;
            resourceInputs["forceDestroy"] = args?.forceDestroy;
            resourceInputs["isolationMode"] = args?.isolationMode;
            resourceInputs["metastoreId"] = args?.metastoreId;
            resourceInputs["name"] = args?.name;
            resourceInputs["options"] = args?.options;
            resourceInputs["owner"] = args?.owner;
            resourceInputs["properties"] = args?.properties;
            resourceInputs["providerName"] = args?.providerName;
            resourceInputs["shareName"] = args?.shareName;
            resourceInputs["storageRoot"] = args?.storageRoot;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Catalog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Catalog resources.
 */
export interface CatalogState {
    /**
     * User-supplied free-form text.
     */
    comment?: pulumi.Input<string>;
    /**
     * For Foreign Catalogs: the name of the connection to an external data source. Changes forces creation of a new resource.
     */
    connectionName?: pulumi.Input<string>;
    /**
     * Whether predictive optimization should be enabled for this object and objects under it. Can be `ENABLE`, `DISABLE` or `INHERIT`
     */
    enablePredictiveOptimization?: pulumi.Input<string>;
    /**
     * Delete catalog regardless of its contents.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * Whether the catalog is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATED` or `OPEN`. Setting the catalog to `ISOLATED` will automatically allow access from the current workspace.
     */
    isolationMode?: pulumi.Input<string>;
    /**
     * ID of the parent metastore.
     */
    metastoreId?: pulumi.Input<string>;
    /**
     * Name of Catalog relative to parent metastore.
     */
    name?: pulumi.Input<string>;
    /**
     * For Foreign Catalogs: the name of the entity from an external data source that maps to a catalog. For example, the database name in a PostgreSQL server.
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Username/groupname/sp applicationId of the catalog owner.
     */
    owner?: pulumi.Input<string>;
    /**
     * Extensible Catalog properties.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * For Delta Sharing Catalogs: the name of the delta sharing provider. Change forces creation of a new resource.
     */
    providerName?: pulumi.Input<string>;
    /**
     * For Delta Sharing Catalogs: the name of the share under the share provider. Change forces creation of a new resource.
     */
    shareName?: pulumi.Input<string>;
    /**
     * Managed location of the catalog. Location in cloud storage where data for managed tables will be stored. If not specified, the location will default to the metastore root location. Change forces creation of a new resource.
     */
    storageRoot?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Catalog resource.
 */
export interface CatalogArgs {
    /**
     * User-supplied free-form text.
     */
    comment?: pulumi.Input<string>;
    /**
     * For Foreign Catalogs: the name of the connection to an external data source. Changes forces creation of a new resource.
     */
    connectionName?: pulumi.Input<string>;
    /**
     * Whether predictive optimization should be enabled for this object and objects under it. Can be `ENABLE`, `DISABLE` or `INHERIT`
     */
    enablePredictiveOptimization?: pulumi.Input<string>;
    /**
     * Delete catalog regardless of its contents.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * Whether the catalog is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATED` or `OPEN`. Setting the catalog to `ISOLATED` will automatically allow access from the current workspace.
     */
    isolationMode?: pulumi.Input<string>;
    /**
     * ID of the parent metastore.
     */
    metastoreId?: pulumi.Input<string>;
    /**
     * Name of Catalog relative to parent metastore.
     */
    name?: pulumi.Input<string>;
    /**
     * For Foreign Catalogs: the name of the entity from an external data source that maps to a catalog. For example, the database name in a PostgreSQL server.
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Username/groupname/sp applicationId of the catalog owner.
     */
    owner?: pulumi.Input<string>;
    /**
     * Extensible Catalog properties.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * For Delta Sharing Catalogs: the name of the delta sharing provider. Change forces creation of a new resource.
     */
    providerName?: pulumi.Input<string>;
    /**
     * For Delta Sharing Catalogs: the name of the share under the share provider. Change forces creation of a new resource.
     */
    shareName?: pulumi.Input<string>;
    /**
     * Managed location of the catalog. Location in cloud storage where data for managed tables will be stored. If not specified, the location will default to the metastore root location. Change forces creation of a new resource.
     */
    storageRoot?: pulumi.Input<string>;
}
