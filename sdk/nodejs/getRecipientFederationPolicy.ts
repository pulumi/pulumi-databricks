// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRecipientFederationPolicy(args?: GetRecipientFederationPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetRecipientFederationPolicyResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("databricks:index/getRecipientFederationPolicy:getRecipientFederationPolicy", {
        "comment": args.comment,
        "name": args.name,
        "oidcPolicy": args.oidcPolicy,
        "workspaceId": args.workspaceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRecipientFederationPolicy.
 */
export interface GetRecipientFederationPolicyArgs {
    /**
     * (string) - Description of the policy. This is a user-provided description
     */
    comment?: string;
    /**
     * Name of the federation policy. A recipient can have multiple policies with different names.
     * The name must contain only lowercase alphanumeric characters, numbers, and hyphens
     */
    name?: string;
    /**
     * (OidcFederationPolicy) - Specifies the policy to use for validating OIDC claims in the federated tokens
     */
    oidcPolicy?: inputs.GetRecipientFederationPolicyOidcPolicy;
    /**
     * Workspace ID of the resource
     */
    workspaceId?: string;
}

/**
 * A collection of values returned by getRecipientFederationPolicy.
 */
export interface GetRecipientFederationPolicyResult {
    /**
     * (string) - Description of the policy. This is a user-provided description
     */
    readonly comment?: string;
    /**
     * (string) - System-generated timestamp indicating when the policy was created
     */
    readonly createTime: string;
    /**
     * (string) - Unique, immutable system-generated identifier for the federation policy
     */
    readonly id: string;
    /**
     * (string) - Name of the federation policy. A recipient can have multiple policies with different names.
     * The name must contain only lowercase alphanumeric characters, numbers, and hyphens
     */
    readonly name?: string;
    /**
     * (OidcFederationPolicy) - Specifies the policy to use for validating OIDC claims in the federated tokens
     */
    readonly oidcPolicy?: outputs.GetRecipientFederationPolicyOidcPolicy;
    /**
     * (string) - System-generated timestamp indicating when the policy was last updated
     */
    readonly updateTime: string;
    readonly workspaceId?: string;
}
export function getRecipientFederationPolicyOutput(args?: GetRecipientFederationPolicyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRecipientFederationPolicyResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("databricks:index/getRecipientFederationPolicy:getRecipientFederationPolicy", {
        "comment": args.comment,
        "name": args.name,
        "oidcPolicy": args.oidcPolicy,
        "workspaceId": args.workspaceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRecipientFederationPolicy.
 */
export interface GetRecipientFederationPolicyOutputArgs {
    /**
     * (string) - Description of the policy. This is a user-provided description
     */
    comment?: pulumi.Input<string>;
    /**
     * Name of the federation policy. A recipient can have multiple policies with different names.
     * The name must contain only lowercase alphanumeric characters, numbers, and hyphens
     */
    name?: pulumi.Input<string>;
    /**
     * (OidcFederationPolicy) - Specifies the policy to use for validating OIDC claims in the federated tokens
     */
    oidcPolicy?: pulumi.Input<inputs.GetRecipientFederationPolicyOidcPolicyArgs>;
    /**
     * Workspace ID of the resource
     */
    workspaceId?: pulumi.Input<string>;
}
