// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * As of Pulumi v1.5, resources can be imported through configuration.
 *
 * hcl
 *
 * import {
 *
 *   id = "name"
 *
 *   to = databricks_recipient_federation_policy.this
 *
 * }
 *
 * If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
 *
 * ```sh
 * $ pulumi import databricks:index/recipientFederationPolicy:RecipientFederationPolicy databricks_recipient_federation_policy "name"
 * ```
 */
export class RecipientFederationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing RecipientFederationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecipientFederationPolicyState, opts?: pulumi.CustomResourceOptions): RecipientFederationPolicy {
        return new RecipientFederationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/recipientFederationPolicy:RecipientFederationPolicy';

    /**
     * Returns true if the given object is an instance of RecipientFederationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecipientFederationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecipientFederationPolicy.__pulumiType;
    }

    /**
     * Description of the policy. This is a user-provided description
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * (string) - System-generated timestamp indicating when the policy was created
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Name of the federation policy. A recipient can have multiple policies with different names.
     * The name must contain only lowercase alphanumeric characters, numbers, and hyphens
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the policy to use for validating OIDC claims in the federated tokens
     */
    declare public readonly oidcPolicy: pulumi.Output<outputs.RecipientFederationPolicyOidcPolicy | undefined>;
    /**
     * (string) - System-generated timestamp indicating when the policy was last updated
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;
    /**
     * Workspace ID of the resource
     */
    declare public readonly workspaceId: pulumi.Output<string | undefined>;

    /**
     * Create a RecipientFederationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RecipientFederationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecipientFederationPolicyArgs | RecipientFederationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecipientFederationPolicyState | undefined;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["name"] = state?.name;
            resourceInputs["oidcPolicy"] = state?.oidcPolicy;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as RecipientFederationPolicyArgs | undefined;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["name"] = args?.name;
            resourceInputs["oidcPolicy"] = args?.oidcPolicy;
            resourceInputs["workspaceId"] = args?.workspaceId;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RecipientFederationPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RecipientFederationPolicy resources.
 */
export interface RecipientFederationPolicyState {
    /**
     * Description of the policy. This is a user-provided description
     */
    comment?: pulumi.Input<string>;
    /**
     * (string) - System-generated timestamp indicating when the policy was created
     */
    createTime?: pulumi.Input<string>;
    /**
     * Name of the federation policy. A recipient can have multiple policies with different names.
     * The name must contain only lowercase alphanumeric characters, numbers, and hyphens
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the policy to use for validating OIDC claims in the federated tokens
     */
    oidcPolicy?: pulumi.Input<inputs.RecipientFederationPolicyOidcPolicy>;
    /**
     * (string) - System-generated timestamp indicating when the policy was last updated
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Workspace ID of the resource
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RecipientFederationPolicy resource.
 */
export interface RecipientFederationPolicyArgs {
    /**
     * Description of the policy. This is a user-provided description
     */
    comment?: pulumi.Input<string>;
    /**
     * Name of the federation policy. A recipient can have multiple policies with different names.
     * The name must contain only lowercase alphanumeric characters, numbers, and hyphens
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the policy to use for validating OIDC claims in the federated tokens
     */
    oidcPolicy?: pulumi.Input<inputs.RecipientFederationPolicyOidcPolicy>;
    /**
     * Workspace ID of the resource
     */
    workspaceId?: pulumi.Input<string>;
}
