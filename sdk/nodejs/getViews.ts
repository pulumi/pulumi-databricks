// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * Granting `SELECT` and `MODIFY` to `sensitive` group on all views in a _things_ databricks.Schema from _sandbox_ databricks_catalog.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * export = async () => {
 *     const thingsViews = await databricks.getViews({
 *         catalogName: "sandbox",
 *         schemaName: "things",
 *     });
 *     const thingsGrants: databricks.Grants[] = [];
 *     for (const range of thingsViews.ids.map((v, k) => ({key: k, value: v}))) {
 *         thingsGrants.push(new databricks.Grants(`thingsGrants-${range.key}`, {
 *             view: range.value,
 *             grants: [{
 *                 principal: "sensitive",
 *                 privileges: [
 *                     "SELECT",
 *                     "MODIFY",
 *                 ],
 *             }],
 *         }));
 *     }
 * }
 * ```
 * ## Related Resources
 *
 * The following resources are used in the same context:
 *
 * * databricks.Schema to manage schemas within Unity Catalog.
 * * databricks.Catalog to manage catalogs within Unity Catalog.
 */
export function getViews(args: GetViewsArgs, opts?: pulumi.InvokeOptions): Promise<GetViewsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("databricks:index/getViews:getViews", {
        "catalogName": args.catalogName,
        "ids": args.ids,
        "schemaName": args.schemaName,
    }, opts);
}

/**
 * A collection of arguments for invoking getViews.
 */
export interface GetViewsArgs {
    /**
     * Name of databricks_catalog
     */
    catalogName: string;
    /**
     * set of databricksView full names: *`catalog`.`schema`.`view`*
     */
    ids?: string[];
    /**
     * Name of databricks_schema
     */
    schemaName: string;
}

/**
 * A collection of values returned by getViews.
 */
export interface GetViewsResult {
    readonly catalogName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * set of databricksView full names: *`catalog`.`schema`.`view`*
     */
    readonly ids: string[];
    readonly schemaName: string;
}
/**
 * ## Example Usage
 *
 * Granting `SELECT` and `MODIFY` to `sensitive` group on all views in a _things_ databricks.Schema from _sandbox_ databricks_catalog.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * export = async () => {
 *     const thingsViews = await databricks.getViews({
 *         catalogName: "sandbox",
 *         schemaName: "things",
 *     });
 *     const thingsGrants: databricks.Grants[] = [];
 *     for (const range of thingsViews.ids.map((v, k) => ({key: k, value: v}))) {
 *         thingsGrants.push(new databricks.Grants(`thingsGrants-${range.key}`, {
 *             view: range.value,
 *             grants: [{
 *                 principal: "sensitive",
 *                 privileges: [
 *                     "SELECT",
 *                     "MODIFY",
 *                 ],
 *             }],
 *         }));
 *     }
 * }
 * ```
 * ## Related Resources
 *
 * The following resources are used in the same context:
 *
 * * databricks.Schema to manage schemas within Unity Catalog.
 * * databricks.Catalog to manage catalogs within Unity Catalog.
 */
export function getViewsOutput(args: GetViewsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetViewsResult> {
    return pulumi.output(args).apply((a: any) => getViews(a, opts))
}

/**
 * A collection of arguments for invoking getViews.
 */
export interface GetViewsOutputArgs {
    /**
     * Name of databricks_catalog
     */
    catalogName: pulumi.Input<string>;
    /**
     * set of databricksView full names: *`catalog`.`schema`.`view`*
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of databricks_schema
     */
    schemaName: pulumi.Input<string>;
}
