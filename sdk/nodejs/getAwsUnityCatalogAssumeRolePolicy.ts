// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > **Note** This resource has an evolving API, which may change in future versions of the provider. Please always consult [latest documentation](https://docs.databricks.com/data-governance/unity-catalog/get-started.html#configure-a-storage-bucket-and-iam-role-in-aws) in case of any questions.
 *
 * This data source constructs necessary AWS Unity Catalog assume role policy for you.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as databricks from "@pulumi/databricks";
 *
 * const this = databricks.getAwsUnityCatalogPolicy({
 *     awsAccountId: awsAccountId,
 *     bucketName: "databricks-bucket",
 *     roleName: `${prefix}-uc-access`,
 *     kmsName: "databricks-kms",
 * });
 * const thisGetAwsUnityCatalogAssumeRolePolicy = databricks.getAwsUnityCatalogAssumeRolePolicy({
 *     awsAccountId: awsAccountId,
 *     roleName: `${prefix}-uc-access`,
 *     externalId: "12345",
 * });
 * const unityMetastore = new aws.iam.Policy("unity_metastore", {
 *     name: `${prefix}-unity-catalog-metastore-access-iam-policy`,
 *     policy: _this.then(_this => _this.json),
 * });
 * const metastoreDataAccess = new aws.iam.Role("metastore_data_access", {
 *     name: `${prefix}-uc-access`,
 *     assumeRolePolicy: passroleForUc.json,
 *     managedPolicyArns: [unityMetastore.arn],
 * });
 * ```
 */
export function getAwsUnityCatalogAssumeRolePolicy(args: GetAwsUnityCatalogAssumeRolePolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetAwsUnityCatalogAssumeRolePolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("databricks:index/getAwsUnityCatalogAssumeRolePolicy:getAwsUnityCatalogAssumeRolePolicy", {
        "awsAccountId": args.awsAccountId,
        "externalId": args.externalId,
        "roleName": args.roleName,
        "unityCatalogIamArn": args.unityCatalogIamArn,
    }, opts);
}

/**
 * A collection of arguments for invoking getAwsUnityCatalogAssumeRolePolicy.
 */
export interface GetAwsUnityCatalogAssumeRolePolicyArgs {
    /**
     * The Account ID of the current AWS account (not your Databricks account).
     */
    awsAccountId: string;
    /**
     * The storage credential external id.
     */
    externalId: string;
    /**
     * The name of the AWS IAM role that you created in the previous step in the [official documentation](https://docs.databricks.com/data-governance/unity-catalog/get-started.html#configure-a-storage-bucket-and-iam-role-in-aws).
     */
    roleName: string;
    /**
     * The Databricks Unity Catalog IAM Role ARN. Defaults to `arn:aws:iam::414351767826:role/unity-catalog-prod-UCMasterRole-14S5ZJVKOTYTL`
     */
    unityCatalogIamArn?: string;
}

/**
 * A collection of values returned by getAwsUnityCatalogAssumeRolePolicy.
 */
export interface GetAwsUnityCatalogAssumeRolePolicyResult {
    readonly awsAccountId: string;
    readonly externalId: string;
    readonly id: string;
    /**
     * AWS IAM Policy JSON document for assume role
     */
    readonly json: string;
    readonly roleName: string;
    readonly unityCatalogIamArn: string;
}
/**
 * > **Note** This resource has an evolving API, which may change in future versions of the provider. Please always consult [latest documentation](https://docs.databricks.com/data-governance/unity-catalog/get-started.html#configure-a-storage-bucket-and-iam-role-in-aws) in case of any questions.
 *
 * This data source constructs necessary AWS Unity Catalog assume role policy for you.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as databricks from "@pulumi/databricks";
 *
 * const this = databricks.getAwsUnityCatalogPolicy({
 *     awsAccountId: awsAccountId,
 *     bucketName: "databricks-bucket",
 *     roleName: `${prefix}-uc-access`,
 *     kmsName: "databricks-kms",
 * });
 * const thisGetAwsUnityCatalogAssumeRolePolicy = databricks.getAwsUnityCatalogAssumeRolePolicy({
 *     awsAccountId: awsAccountId,
 *     roleName: `${prefix}-uc-access`,
 *     externalId: "12345",
 * });
 * const unityMetastore = new aws.iam.Policy("unity_metastore", {
 *     name: `${prefix}-unity-catalog-metastore-access-iam-policy`,
 *     policy: _this.then(_this => _this.json),
 * });
 * const metastoreDataAccess = new aws.iam.Role("metastore_data_access", {
 *     name: `${prefix}-uc-access`,
 *     assumeRolePolicy: passroleForUc.json,
 *     managedPolicyArns: [unityMetastore.arn],
 * });
 * ```
 */
export function getAwsUnityCatalogAssumeRolePolicyOutput(args: GetAwsUnityCatalogAssumeRolePolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAwsUnityCatalogAssumeRolePolicyResult> {
    return pulumi.output(args).apply((a: any) => getAwsUnityCatalogAssumeRolePolicy(a, opts))
}

/**
 * A collection of arguments for invoking getAwsUnityCatalogAssumeRolePolicy.
 */
export interface GetAwsUnityCatalogAssumeRolePolicyOutputArgs {
    /**
     * The Account ID of the current AWS account (not your Databricks account).
     */
    awsAccountId: pulumi.Input<string>;
    /**
     * The storage credential external id.
     */
    externalId: pulumi.Input<string>;
    /**
     * The name of the AWS IAM role that you created in the previous step in the [official documentation](https://docs.databricks.com/data-governance/unity-catalog/get-started.html#configure-a-storage-bucket-and-iam-role-in-aws).
     */
    roleName: pulumi.Input<string>;
    /**
     * The Databricks Unity Catalog IAM Role ARN. Defaults to `arn:aws:iam::414351767826:role/unity-catalog-prod-UCMasterRole-14S5ZJVKOTYTL`
     */
    unityCatalogIamArn?: pulumi.Input<string>;
}
