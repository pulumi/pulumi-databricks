// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public readonly applyPolicyDefaultValues!: pulumi.Output<boolean | undefined>;
    public readonly autoscale!: pulumi.Output<outputs.ClusterAutoscale | undefined>;
    public readonly autoterminationMinutes!: pulumi.Output<number | undefined>;
    public readonly awsAttributes!: pulumi.Output<outputs.ClusterAwsAttributes | undefined>;
    public readonly azureAttributes!: pulumi.Output<outputs.ClusterAzureAttributes | undefined>;
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    public readonly clusterLogConf!: pulumi.Output<outputs.ClusterClusterLogConf | undefined>;
    public readonly clusterMountInfos!: pulumi.Output<outputs.ClusterClusterMountInfo[] | undefined>;
    public readonly clusterName!: pulumi.Output<string | undefined>;
    public readonly customTags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly dataSecurityMode!: pulumi.Output<string | undefined>;
    public /*out*/ readonly defaultTags!: pulumi.Output<{[key: string]: string}>;
    public readonly dockerImage!: pulumi.Output<outputs.ClusterDockerImage | undefined>;
    public readonly driverInstancePoolId!: pulumi.Output<string>;
    public readonly driverNodeTypeId!: pulumi.Output<string>;
    public readonly enableElasticDisk!: pulumi.Output<boolean>;
    public readonly enableLocalDiskEncryption!: pulumi.Output<boolean>;
    public readonly gcpAttributes!: pulumi.Output<outputs.ClusterGcpAttributes | undefined>;
    public readonly idempotencyToken!: pulumi.Output<string | undefined>;
    public readonly initScripts!: pulumi.Output<outputs.ClusterInitScript[] | undefined>;
    public readonly instancePoolId!: pulumi.Output<string | undefined>;
    public readonly isPinned!: pulumi.Output<boolean | undefined>;
    public readonly isSingleNode!: pulumi.Output<boolean | undefined>;
    public readonly kind!: pulumi.Output<string | undefined>;
    public readonly libraries!: pulumi.Output<outputs.ClusterLibrary[] | undefined>;
    public readonly noWait!: pulumi.Output<boolean | undefined>;
    public readonly nodeTypeId!: pulumi.Output<string>;
    public readonly numWorkers!: pulumi.Output<number | undefined>;
    public readonly policyId!: pulumi.Output<string | undefined>;
    public readonly runtimeEngine!: pulumi.Output<string | undefined>;
    public readonly singleUserName!: pulumi.Output<string | undefined>;
    public readonly sparkConf!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly sparkEnvVars!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly sparkVersion!: pulumi.Output<string>;
    public readonly sshPublicKeys!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly url!: pulumi.Output<string>;
    public readonly useMlRuntime!: pulumi.Output<boolean | undefined>;
    public readonly workloadType!: pulumi.Output<outputs.ClusterWorkloadType | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["applyPolicyDefaultValues"] = state ? state.applyPolicyDefaultValues : undefined;
            resourceInputs["autoscale"] = state ? state.autoscale : undefined;
            resourceInputs["autoterminationMinutes"] = state ? state.autoterminationMinutes : undefined;
            resourceInputs["awsAttributes"] = state ? state.awsAttributes : undefined;
            resourceInputs["azureAttributes"] = state ? state.azureAttributes : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterLogConf"] = state ? state.clusterLogConf : undefined;
            resourceInputs["clusterMountInfos"] = state ? state.clusterMountInfos : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["customTags"] = state ? state.customTags : undefined;
            resourceInputs["dataSecurityMode"] = state ? state.dataSecurityMode : undefined;
            resourceInputs["defaultTags"] = state ? state.defaultTags : undefined;
            resourceInputs["dockerImage"] = state ? state.dockerImage : undefined;
            resourceInputs["driverInstancePoolId"] = state ? state.driverInstancePoolId : undefined;
            resourceInputs["driverNodeTypeId"] = state ? state.driverNodeTypeId : undefined;
            resourceInputs["enableElasticDisk"] = state ? state.enableElasticDisk : undefined;
            resourceInputs["enableLocalDiskEncryption"] = state ? state.enableLocalDiskEncryption : undefined;
            resourceInputs["gcpAttributes"] = state ? state.gcpAttributes : undefined;
            resourceInputs["idempotencyToken"] = state ? state.idempotencyToken : undefined;
            resourceInputs["initScripts"] = state ? state.initScripts : undefined;
            resourceInputs["instancePoolId"] = state ? state.instancePoolId : undefined;
            resourceInputs["isPinned"] = state ? state.isPinned : undefined;
            resourceInputs["isSingleNode"] = state ? state.isSingleNode : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["libraries"] = state ? state.libraries : undefined;
            resourceInputs["noWait"] = state ? state.noWait : undefined;
            resourceInputs["nodeTypeId"] = state ? state.nodeTypeId : undefined;
            resourceInputs["numWorkers"] = state ? state.numWorkers : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["runtimeEngine"] = state ? state.runtimeEngine : undefined;
            resourceInputs["singleUserName"] = state ? state.singleUserName : undefined;
            resourceInputs["sparkConf"] = state ? state.sparkConf : undefined;
            resourceInputs["sparkEnvVars"] = state ? state.sparkEnvVars : undefined;
            resourceInputs["sparkVersion"] = state ? state.sparkVersion : undefined;
            resourceInputs["sshPublicKeys"] = state ? state.sshPublicKeys : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["useMlRuntime"] = state ? state.useMlRuntime : undefined;
            resourceInputs["workloadType"] = state ? state.workloadType : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.sparkVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sparkVersion'");
            }
            resourceInputs["applyPolicyDefaultValues"] = args ? args.applyPolicyDefaultValues : undefined;
            resourceInputs["autoscale"] = args ? args.autoscale : undefined;
            resourceInputs["autoterminationMinutes"] = args ? args.autoterminationMinutes : undefined;
            resourceInputs["awsAttributes"] = args ? args.awsAttributes : undefined;
            resourceInputs["azureAttributes"] = args ? args.azureAttributes : undefined;
            resourceInputs["clusterLogConf"] = args ? args.clusterLogConf : undefined;
            resourceInputs["clusterMountInfos"] = args ? args.clusterMountInfos : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["customTags"] = args ? args.customTags : undefined;
            resourceInputs["dataSecurityMode"] = args ? args.dataSecurityMode : undefined;
            resourceInputs["dockerImage"] = args ? args.dockerImage : undefined;
            resourceInputs["driverInstancePoolId"] = args ? args.driverInstancePoolId : undefined;
            resourceInputs["driverNodeTypeId"] = args ? args.driverNodeTypeId : undefined;
            resourceInputs["enableElasticDisk"] = args ? args.enableElasticDisk : undefined;
            resourceInputs["enableLocalDiskEncryption"] = args ? args.enableLocalDiskEncryption : undefined;
            resourceInputs["gcpAttributes"] = args ? args.gcpAttributes : undefined;
            resourceInputs["idempotencyToken"] = args ? args.idempotencyToken : undefined;
            resourceInputs["initScripts"] = args ? args.initScripts : undefined;
            resourceInputs["instancePoolId"] = args ? args.instancePoolId : undefined;
            resourceInputs["isPinned"] = args ? args.isPinned : undefined;
            resourceInputs["isSingleNode"] = args ? args.isSingleNode : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["libraries"] = args ? args.libraries : undefined;
            resourceInputs["noWait"] = args ? args.noWait : undefined;
            resourceInputs["nodeTypeId"] = args ? args.nodeTypeId : undefined;
            resourceInputs["numWorkers"] = args ? args.numWorkers : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["runtimeEngine"] = args ? args.runtimeEngine : undefined;
            resourceInputs["singleUserName"] = args ? args.singleUserName : undefined;
            resourceInputs["sparkConf"] = args ? args.sparkConf : undefined;
            resourceInputs["sparkEnvVars"] = args ? args.sparkEnvVars : undefined;
            resourceInputs["sparkVersion"] = args ? args.sparkVersion : undefined;
            resourceInputs["sshPublicKeys"] = args ? args.sshPublicKeys : undefined;
            resourceInputs["useMlRuntime"] = args ? args.useMlRuntime : undefined;
            resourceInputs["workloadType"] = args ? args.workloadType : undefined;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["defaultTags"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    applyPolicyDefaultValues?: pulumi.Input<boolean>;
    autoscale?: pulumi.Input<inputs.ClusterAutoscale>;
    autoterminationMinutes?: pulumi.Input<number>;
    awsAttributes?: pulumi.Input<inputs.ClusterAwsAttributes>;
    azureAttributes?: pulumi.Input<inputs.ClusterAzureAttributes>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.ClusterClusterLogConf>;
    clusterMountInfos?: pulumi.Input<pulumi.Input<inputs.ClusterClusterMountInfo>[]>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dataSecurityMode?: pulumi.Input<string>;
    defaultTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dockerImage?: pulumi.Input<inputs.ClusterDockerImage>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.ClusterGcpAttributes>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.ClusterInitScript>[]>;
    instancePoolId?: pulumi.Input<string>;
    isPinned?: pulumi.Input<boolean>;
    isSingleNode?: pulumi.Input<boolean>;
    kind?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.ClusterLibrary>[]>;
    noWait?: pulumi.Input<boolean>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    runtimeEngine?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkVersion?: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    useMlRuntime?: pulumi.Input<boolean>;
    workloadType?: pulumi.Input<inputs.ClusterWorkloadType>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    applyPolicyDefaultValues?: pulumi.Input<boolean>;
    autoscale?: pulumi.Input<inputs.ClusterAutoscale>;
    autoterminationMinutes?: pulumi.Input<number>;
    awsAttributes?: pulumi.Input<inputs.ClusterAwsAttributes>;
    azureAttributes?: pulumi.Input<inputs.ClusterAzureAttributes>;
    clusterLogConf?: pulumi.Input<inputs.ClusterClusterLogConf>;
    clusterMountInfos?: pulumi.Input<pulumi.Input<inputs.ClusterClusterMountInfo>[]>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dataSecurityMode?: pulumi.Input<string>;
    dockerImage?: pulumi.Input<inputs.ClusterDockerImage>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.ClusterGcpAttributes>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.ClusterInitScript>[]>;
    instancePoolId?: pulumi.Input<string>;
    isPinned?: pulumi.Input<boolean>;
    isSingleNode?: pulumi.Input<boolean>;
    kind?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.ClusterLibrary>[]>;
    noWait?: pulumi.Input<boolean>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    runtimeEngine?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    useMlRuntime?: pulumi.Input<boolean>;
    workloadType?: pulumi.Input<inputs.ClusterWorkloadType>;
}
