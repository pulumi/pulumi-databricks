// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `databricks.DisableLegacyAccessSetting` resource allows you to disable legacy access. It has the following impact:
 *
 * 1. Disables direct access to Hive Metastores from the workspace. However, you can still access a Hive Metastore through Hive Metastore federation.
 * 2. Disables Fallback Mode on any External Location access from the workspace.
 * 3. Disables Databricks Runtime versions prior to 13.3LTS.
 *
 * > This resource can only be used with a workspace-level provider!
 *
 * > It may take 5 minutes to take effect and requires a restart of clusters and SQL warehouses.
 *
 * > Please also set the default namespace using databricks.DefaultNamespaceSetting to any value other than `hiveMetastore` to avoid potential issues.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const _this = new databricks.DisableLegacyAccessSetting("this", {disableLegacyAccess: {
 *     value: true,
 * }});
 * ```
 *
 * ## Import
 *
 * This resource can be imported by predefined name `global`:
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/disableLegacyAccessSetting:DisableLegacyAccessSetting this global
 * ```
 */
export class DisableLegacyAccessSetting extends pulumi.CustomResource {
    /**
     * Get an existing DisableLegacyAccessSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DisableLegacyAccessSettingState, opts?: pulumi.CustomResourceOptions): DisableLegacyAccessSetting {
        return new DisableLegacyAccessSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/disableLegacyAccessSetting:DisableLegacyAccessSetting';

    /**
     * Returns true if the given object is an instance of DisableLegacyAccessSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DisableLegacyAccessSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DisableLegacyAccessSetting.__pulumiType;
    }

    /**
     * The configuration details.
     */
    declare public readonly disableLegacyAccess: pulumi.Output<outputs.DisableLegacyAccessSettingDisableLegacyAccess>;
    declare public readonly etag: pulumi.Output<string>;
    declare public readonly settingName: pulumi.Output<string>;

    /**
     * Create a DisableLegacyAccessSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DisableLegacyAccessSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DisableLegacyAccessSettingArgs | DisableLegacyAccessSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DisableLegacyAccessSettingState | undefined;
            resourceInputs["disableLegacyAccess"] = state?.disableLegacyAccess;
            resourceInputs["etag"] = state?.etag;
            resourceInputs["settingName"] = state?.settingName;
        } else {
            const args = argsOrState as DisableLegacyAccessSettingArgs | undefined;
            if (args?.disableLegacyAccess === undefined && !opts.urn) {
                throw new Error("Missing required property 'disableLegacyAccess'");
            }
            resourceInputs["disableLegacyAccess"] = args?.disableLegacyAccess;
            resourceInputs["etag"] = args?.etag;
            resourceInputs["settingName"] = args?.settingName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DisableLegacyAccessSetting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DisableLegacyAccessSetting resources.
 */
export interface DisableLegacyAccessSettingState {
    /**
     * The configuration details.
     */
    disableLegacyAccess?: pulumi.Input<inputs.DisableLegacyAccessSettingDisableLegacyAccess>;
    etag?: pulumi.Input<string>;
    settingName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DisableLegacyAccessSetting resource.
 */
export interface DisableLegacyAccessSettingArgs {
    /**
     * The configuration details.
     */
    disableLegacyAccess: pulumi.Input<inputs.DisableLegacyAccessSettingDisableLegacyAccess>;
    etag?: pulumi.Input<string>;
    settingName?: pulumi.Input<string>;
}
