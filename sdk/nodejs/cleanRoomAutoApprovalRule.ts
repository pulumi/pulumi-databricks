// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * As of Pulumi v1.5, resources can be imported through configuration.
 *
 * hcl
 *
 * import {
 *
 *   id = rule_id
 *
 *   to = databricks_clean_room_auto_approval_rule.this
 *
 * }
 *
 * If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
 *
 * ```sh
 * $ pulumi import databricks:index/cleanRoomAutoApprovalRule:CleanRoomAutoApprovalRule databricks_clean_room_auto_approval_rule rule_id
 * ```
 */
export class CleanRoomAutoApprovalRule extends pulumi.CustomResource {
    /**
     * Get an existing CleanRoomAutoApprovalRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CleanRoomAutoApprovalRuleState, opts?: pulumi.CustomResourceOptions): CleanRoomAutoApprovalRule {
        return new CleanRoomAutoApprovalRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/cleanRoomAutoApprovalRule:CleanRoomAutoApprovalRule';

    /**
     * Returns true if the given object is an instance of CleanRoomAutoApprovalRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CleanRoomAutoApprovalRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CleanRoomAutoApprovalRule.__pulumiType;
    }

    /**
     * Collaborator alias of the author covered by the rule.
     * Only one of `authorCollaboratorAlias` and `authorScope` can be set
     */
    declare public readonly authorCollaboratorAlias: pulumi.Output<string | undefined>;
    /**
     * Scope of authors covered by the rule.
     * Only one of `authorCollaboratorAlias` and `authorScope` can be set. Possible values are: `ANY_AUTHOR`
     */
    declare public readonly authorScope: pulumi.Output<string | undefined>;
    /**
     * The name of the clean room this auto-approval rule belongs to
     */
    declare public readonly cleanRoomName: pulumi.Output<string | undefined>;
    /**
     * (integer) - Timestamp of when the rule was created, in epoch milliseconds
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<number>;
    /**
     * (string) - A generated UUID identifying the rule
     */
    declare public /*out*/ readonly ruleId: pulumi.Output<string>;
    /**
     * (string) - The owner of the rule to whom the rule applies
     */
    declare public /*out*/ readonly ruleOwnerCollaboratorAlias: pulumi.Output<string>;
    /**
     * Collaborator alias of the runner covered by the rule
     */
    declare public readonly runnerCollaboratorAlias: pulumi.Output<string | undefined>;

    /**
     * Create a CleanRoomAutoApprovalRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CleanRoomAutoApprovalRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CleanRoomAutoApprovalRuleArgs | CleanRoomAutoApprovalRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CleanRoomAutoApprovalRuleState | undefined;
            resourceInputs["authorCollaboratorAlias"] = state?.authorCollaboratorAlias;
            resourceInputs["authorScope"] = state?.authorScope;
            resourceInputs["cleanRoomName"] = state?.cleanRoomName;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["ruleId"] = state?.ruleId;
            resourceInputs["ruleOwnerCollaboratorAlias"] = state?.ruleOwnerCollaboratorAlias;
            resourceInputs["runnerCollaboratorAlias"] = state?.runnerCollaboratorAlias;
        } else {
            const args = argsOrState as CleanRoomAutoApprovalRuleArgs | undefined;
            resourceInputs["authorCollaboratorAlias"] = args?.authorCollaboratorAlias;
            resourceInputs["authorScope"] = args?.authorScope;
            resourceInputs["cleanRoomName"] = args?.cleanRoomName;
            resourceInputs["runnerCollaboratorAlias"] = args?.runnerCollaboratorAlias;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["ruleId"] = undefined /*out*/;
            resourceInputs["ruleOwnerCollaboratorAlias"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CleanRoomAutoApprovalRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CleanRoomAutoApprovalRule resources.
 */
export interface CleanRoomAutoApprovalRuleState {
    /**
     * Collaborator alias of the author covered by the rule.
     * Only one of `authorCollaboratorAlias` and `authorScope` can be set
     */
    authorCollaboratorAlias?: pulumi.Input<string>;
    /**
     * Scope of authors covered by the rule.
     * Only one of `authorCollaboratorAlias` and `authorScope` can be set. Possible values are: `ANY_AUTHOR`
     */
    authorScope?: pulumi.Input<string>;
    /**
     * The name of the clean room this auto-approval rule belongs to
     */
    cleanRoomName?: pulumi.Input<string>;
    /**
     * (integer) - Timestamp of when the rule was created, in epoch milliseconds
     */
    createdAt?: pulumi.Input<number>;
    /**
     * (string) - A generated UUID identifying the rule
     */
    ruleId?: pulumi.Input<string>;
    /**
     * (string) - The owner of the rule to whom the rule applies
     */
    ruleOwnerCollaboratorAlias?: pulumi.Input<string>;
    /**
     * Collaborator alias of the runner covered by the rule
     */
    runnerCollaboratorAlias?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CleanRoomAutoApprovalRule resource.
 */
export interface CleanRoomAutoApprovalRuleArgs {
    /**
     * Collaborator alias of the author covered by the rule.
     * Only one of `authorCollaboratorAlias` and `authorScope` can be set
     */
    authorCollaboratorAlias?: pulumi.Input<string>;
    /**
     * Scope of authors covered by the rule.
     * Only one of `authorCollaboratorAlias` and `authorScope` can be set. Possible values are: `ANY_AUTHOR`
     */
    authorScope?: pulumi.Input<string>;
    /**
     * The name of the clean room this auto-approval rule belongs to
     */
    cleanRoomName?: pulumi.Input<string>;
    /**
     * Collaborator alias of the runner covered by the rule
     */
    runnerCollaboratorAlias?: pulumi.Input<string>;
}
