// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Pipeline extends pulumi.CustomResource {
    /**
     * Get an existing Pipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PipelineState, opts?: pulumi.CustomResourceOptions): Pipeline {
        return new Pipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/pipeline:Pipeline';

    /**
     * Returns true if the given object is an instance of Pipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipeline.__pulumiType;
    }

    public readonly allowDuplicateNames!: pulumi.Output<boolean | undefined>;
    public readonly budgetPolicyId!: pulumi.Output<string | undefined>;
    public readonly catalog!: pulumi.Output<string | undefined>;
    public readonly cause!: pulumi.Output<string>;
    public readonly channel!: pulumi.Output<string | undefined>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly clusters!: pulumi.Output<outputs.PipelineCluster[] | undefined>;
    public readonly configuration!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly continuous!: pulumi.Output<boolean | undefined>;
    public readonly creatorUserName!: pulumi.Output<string>;
    public readonly deployment!: pulumi.Output<outputs.PipelineDeployment | undefined>;
    public readonly development!: pulumi.Output<boolean | undefined>;
    public readonly edition!: pulumi.Output<string | undefined>;
    public readonly expectedLastModified!: pulumi.Output<number | undefined>;
    public readonly filters!: pulumi.Output<outputs.PipelineFilters | undefined>;
    public readonly gatewayDefinition!: pulumi.Output<outputs.PipelineGatewayDefinition | undefined>;
    public readonly health!: pulumi.Output<string>;
    public readonly ingestionDefinition!: pulumi.Output<outputs.PipelineIngestionDefinition | undefined>;
    public readonly lastModified!: pulumi.Output<number>;
    public readonly latestUpdates!: pulumi.Output<outputs.PipelineLatestUpdate[]>;
    public readonly libraries!: pulumi.Output<outputs.PipelineLibrary[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notifications!: pulumi.Output<outputs.PipelineNotification[] | undefined>;
    public readonly photon!: pulumi.Output<boolean | undefined>;
    public readonly restartWindow!: pulumi.Output<outputs.PipelineRestartWindow | undefined>;
    public readonly runAsUserName!: pulumi.Output<string>;
    public readonly schema!: pulumi.Output<string | undefined>;
    public readonly serverless!: pulumi.Output<boolean | undefined>;
    public readonly state!: pulumi.Output<string>;
    public readonly storage!: pulumi.Output<string | undefined>;
    public readonly target!: pulumi.Output<string | undefined>;
    public readonly trigger!: pulumi.Output<outputs.PipelineTrigger | undefined>;
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a Pipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PipelineArgs | PipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PipelineState | undefined;
            resourceInputs["allowDuplicateNames"] = state ? state.allowDuplicateNames : undefined;
            resourceInputs["budgetPolicyId"] = state ? state.budgetPolicyId : undefined;
            resourceInputs["catalog"] = state ? state.catalog : undefined;
            resourceInputs["cause"] = state ? state.cause : undefined;
            resourceInputs["channel"] = state ? state.channel : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusters"] = state ? state.clusters : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["continuous"] = state ? state.continuous : undefined;
            resourceInputs["creatorUserName"] = state ? state.creatorUserName : undefined;
            resourceInputs["deployment"] = state ? state.deployment : undefined;
            resourceInputs["development"] = state ? state.development : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["expectedLastModified"] = state ? state.expectedLastModified : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["gatewayDefinition"] = state ? state.gatewayDefinition : undefined;
            resourceInputs["health"] = state ? state.health : undefined;
            resourceInputs["ingestionDefinition"] = state ? state.ingestionDefinition : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["latestUpdates"] = state ? state.latestUpdates : undefined;
            resourceInputs["libraries"] = state ? state.libraries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["photon"] = state ? state.photon : undefined;
            resourceInputs["restartWindow"] = state ? state.restartWindow : undefined;
            resourceInputs["runAsUserName"] = state ? state.runAsUserName : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["serverless"] = state ? state.serverless : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["trigger"] = state ? state.trigger : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as PipelineArgs | undefined;
            resourceInputs["allowDuplicateNames"] = args ? args.allowDuplicateNames : undefined;
            resourceInputs["budgetPolicyId"] = args ? args.budgetPolicyId : undefined;
            resourceInputs["catalog"] = args ? args.catalog : undefined;
            resourceInputs["cause"] = args ? args.cause : undefined;
            resourceInputs["channel"] = args ? args.channel : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["clusters"] = args ? args.clusters : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["continuous"] = args ? args.continuous : undefined;
            resourceInputs["creatorUserName"] = args ? args.creatorUserName : undefined;
            resourceInputs["deployment"] = args ? args.deployment : undefined;
            resourceInputs["development"] = args ? args.development : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["expectedLastModified"] = args ? args.expectedLastModified : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["gatewayDefinition"] = args ? args.gatewayDefinition : undefined;
            resourceInputs["health"] = args ? args.health : undefined;
            resourceInputs["ingestionDefinition"] = args ? args.ingestionDefinition : undefined;
            resourceInputs["lastModified"] = args ? args.lastModified : undefined;
            resourceInputs["latestUpdates"] = args ? args.latestUpdates : undefined;
            resourceInputs["libraries"] = args ? args.libraries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["photon"] = args ? args.photon : undefined;
            resourceInputs["restartWindow"] = args ? args.restartWindow : undefined;
            resourceInputs["runAsUserName"] = args ? args.runAsUserName : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["serverless"] = args ? args.serverless : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["trigger"] = args ? args.trigger : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pipeline.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Pipeline resources.
 */
export interface PipelineState {
    allowDuplicateNames?: pulumi.Input<boolean>;
    budgetPolicyId?: pulumi.Input<string>;
    catalog?: pulumi.Input<string>;
    cause?: pulumi.Input<string>;
    channel?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    clusters?: pulumi.Input<pulumi.Input<inputs.PipelineCluster>[]>;
    configuration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    continuous?: pulumi.Input<boolean>;
    creatorUserName?: pulumi.Input<string>;
    deployment?: pulumi.Input<inputs.PipelineDeployment>;
    development?: pulumi.Input<boolean>;
    edition?: pulumi.Input<string>;
    expectedLastModified?: pulumi.Input<number>;
    filters?: pulumi.Input<inputs.PipelineFilters>;
    gatewayDefinition?: pulumi.Input<inputs.PipelineGatewayDefinition>;
    health?: pulumi.Input<string>;
    ingestionDefinition?: pulumi.Input<inputs.PipelineIngestionDefinition>;
    lastModified?: pulumi.Input<number>;
    latestUpdates?: pulumi.Input<pulumi.Input<inputs.PipelineLatestUpdate>[]>;
    libraries?: pulumi.Input<pulumi.Input<inputs.PipelineLibrary>[]>;
    name?: pulumi.Input<string>;
    notifications?: pulumi.Input<pulumi.Input<inputs.PipelineNotification>[]>;
    photon?: pulumi.Input<boolean>;
    restartWindow?: pulumi.Input<inputs.PipelineRestartWindow>;
    runAsUserName?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    serverless?: pulumi.Input<boolean>;
    state?: pulumi.Input<string>;
    storage?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    trigger?: pulumi.Input<inputs.PipelineTrigger>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Pipeline resource.
 */
export interface PipelineArgs {
    allowDuplicateNames?: pulumi.Input<boolean>;
    budgetPolicyId?: pulumi.Input<string>;
    catalog?: pulumi.Input<string>;
    cause?: pulumi.Input<string>;
    channel?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    clusters?: pulumi.Input<pulumi.Input<inputs.PipelineCluster>[]>;
    configuration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    continuous?: pulumi.Input<boolean>;
    creatorUserName?: pulumi.Input<string>;
    deployment?: pulumi.Input<inputs.PipelineDeployment>;
    development?: pulumi.Input<boolean>;
    edition?: pulumi.Input<string>;
    expectedLastModified?: pulumi.Input<number>;
    filters?: pulumi.Input<inputs.PipelineFilters>;
    gatewayDefinition?: pulumi.Input<inputs.PipelineGatewayDefinition>;
    health?: pulumi.Input<string>;
    ingestionDefinition?: pulumi.Input<inputs.PipelineIngestionDefinition>;
    lastModified?: pulumi.Input<number>;
    latestUpdates?: pulumi.Input<pulumi.Input<inputs.PipelineLatestUpdate>[]>;
    libraries?: pulumi.Input<pulumi.Input<inputs.PipelineLibrary>[]>;
    name?: pulumi.Input<string>;
    notifications?: pulumi.Input<pulumi.Input<inputs.PipelineNotification>[]>;
    photon?: pulumi.Input<boolean>;
    restartWindow?: pulumi.Input<inputs.PipelineRestartWindow>;
    runAsUserName?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    serverless?: pulumi.Input<boolean>;
    state?: pulumi.Input<string>;
    storage?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    trigger?: pulumi.Input<inputs.PipelineTrigger>;
    url?: pulumi.Input<string>;
}
