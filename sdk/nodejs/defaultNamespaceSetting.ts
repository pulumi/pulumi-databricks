// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > **Note** This resource could be only used with workspace-level provider!
 *
 * The `databricks.DefaultNamespaceSetting` resource allows you to operate the setting configuration for the default namespace in the Databricks workspace.
 * Setting the default catalog for the workspace determines the catalog that is used when queries do not reference
 * a fully qualified 3 level name. For example, if the default catalog is set to 'retail_prod' then a query
 * 'SELECT * FROM myTable' would reference the object 'retail_prod.default.myTable'
 * (the schema 'default' is always assumed).
 * This setting requires a restart of clusters and SQL warehouses to take effect. Additionally, the default namespace only applies when using Unity Catalog-enabled compute.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const _this = new databricks.DefaultNamespaceSetting("this", {namespace: {
 *     value: "namespace_value",
 * }});
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * This resource can be imported by predefined name `global`:
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/defaultNamespaceSetting:DefaultNamespaceSetting this global
 * ```
 */
export class DefaultNamespaceSetting extends pulumi.CustomResource {
    /**
     * Get an existing DefaultNamespaceSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultNamespaceSettingState, opts?: pulumi.CustomResourceOptions): DefaultNamespaceSetting {
        return new DefaultNamespaceSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/defaultNamespaceSetting:DefaultNamespaceSetting';

    /**
     * Returns true if the given object is an instance of DefaultNamespaceSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultNamespaceSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultNamespaceSetting.__pulumiType;
    }

    public readonly etag!: pulumi.Output<string>;
    /**
     * The configuration details.
     */
    public readonly namespace!: pulumi.Output<outputs.DefaultNamespaceSettingNamespace>;
    public readonly settingName!: pulumi.Output<string>;

    /**
     * Create a DefaultNamespaceSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultNamespaceSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultNamespaceSettingArgs | DefaultNamespaceSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultNamespaceSettingState | undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["settingName"] = state ? state.settingName : undefined;
        } else {
            const args = argsOrState as DefaultNamespaceSettingArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["settingName"] = args ? args.settingName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultNamespaceSetting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DefaultNamespaceSetting resources.
 */
export interface DefaultNamespaceSettingState {
    etag?: pulumi.Input<string>;
    /**
     * The configuration details.
     */
    namespace?: pulumi.Input<inputs.DefaultNamespaceSettingNamespace>;
    settingName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultNamespaceSetting resource.
 */
export interface DefaultNamespaceSettingArgs {
    etag?: pulumi.Input<string>;
    /**
     * The configuration details.
     */
    namespace: pulumi.Input<inputs.DefaultNamespaceSettingNamespace>;
    settingName?: pulumi.Input<string>;
}
