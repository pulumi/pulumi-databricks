// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to manage Databricks [Dashboards](https://docs.databricks.com/en/dashboards/index.html). To manage [Dashboards](https://docs.databricks.com/en/dashboards/index.html) you must have a warehouse access on your databricks workspace.
 *
 * > This resource can only be used with a workspace-level provider!
 *
 * ## Example Usage
 *
 * Dashboard using `serializedDashboard` attribute:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const starter = databricks.getSqlWarehouse({
 *     name: "Starter Warehouse",
 * });
 * const dashboard = new databricks.Dashboard("dashboard", {
 *     displayName: "New Dashboard",
 *     warehouseId: starter.then(starter => starter.id),
 *     serializedDashboard: "{\"pages\":[{\"name\":\"new_name\",\"displayName\":\"New Page\"}]}",
 *     embedCredentials: false,
 *     parentPath: "/Shared/provider-test",
 * });
 * ```
 *
 * Dashboard using `filePath` attribute:
 *
 * ## Import
 *
 * You can import a `databricks_dashboard` resource with ID like the following:
 *
 * hcl
 *
 * import {
 *
 *   to = databricks_dashboard.this
 *
 *   id = "<dashboard-id>"
 *
 * }
 *
 * Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/dashboard:Dashboard this <dashboard-id>
 * ```
 */
export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/dashboard:Dashboard';

    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }

    declare public readonly createTime: pulumi.Output<string>;
    declare public readonly dashboardChangeDetected: pulumi.Output<boolean | undefined>;
    declare public readonly dashboardId: pulumi.Output<string>;
    /**
     * The display name of the dashboard.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * Whether to embed credentials in the dashboard. Default is `true`.
     */
    declare public readonly embedCredentials: pulumi.Output<boolean | undefined>;
    declare public readonly etag: pulumi.Output<string>;
    /**
     * The path to the dashboard JSON file. Conflicts with `serializedDashboard`.
     */
    declare public readonly filePath: pulumi.Output<string | undefined>;
    declare public readonly lifecycleState: pulumi.Output<string>;
    declare public readonly md5: pulumi.Output<string>;
    /**
     * The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn't exist, it will be created.
     */
    declare public readonly parentPath: pulumi.Output<string>;
    declare public readonly path: pulumi.Output<string>;
    /**
     * The contents of the dashboard in serialized string form. Conflicts with `filePath`.
     */
    declare public readonly serializedDashboard: pulumi.Output<string | undefined>;
    declare public readonly updateTime: pulumi.Output<string>;
    /**
     * The warehouse ID used to run the dashboard.
     */
    declare public readonly warehouseId: pulumi.Output<string>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardState | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["dashboardChangeDetected"] = state?.dashboardChangeDetected;
            resourceInputs["dashboardId"] = state?.dashboardId;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["embedCredentials"] = state?.embedCredentials;
            resourceInputs["etag"] = state?.etag;
            resourceInputs["filePath"] = state?.filePath;
            resourceInputs["lifecycleState"] = state?.lifecycleState;
            resourceInputs["md5"] = state?.md5;
            resourceInputs["parentPath"] = state?.parentPath;
            resourceInputs["path"] = state?.path;
            resourceInputs["serializedDashboard"] = state?.serializedDashboard;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["warehouseId"] = state?.warehouseId;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.parentPath === undefined && !opts.urn) {
                throw new Error("Missing required property 'parentPath'");
            }
            if (args?.warehouseId === undefined && !opts.urn) {
                throw new Error("Missing required property 'warehouseId'");
            }
            resourceInputs["createTime"] = args?.createTime;
            resourceInputs["dashboardChangeDetected"] = args?.dashboardChangeDetected;
            resourceInputs["dashboardId"] = args?.dashboardId;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["embedCredentials"] = args?.embedCredentials;
            resourceInputs["etag"] = args?.etag;
            resourceInputs["filePath"] = args?.filePath;
            resourceInputs["lifecycleState"] = args?.lifecycleState;
            resourceInputs["md5"] = args?.md5;
            resourceInputs["parentPath"] = args?.parentPath;
            resourceInputs["path"] = args?.path;
            resourceInputs["serializedDashboard"] = args?.serializedDashboard;
            resourceInputs["updateTime"] = args?.updateTime;
            resourceInputs["warehouseId"] = args?.warehouseId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dashboard.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    createTime?: pulumi.Input<string>;
    dashboardChangeDetected?: pulumi.Input<boolean>;
    dashboardId?: pulumi.Input<string>;
    /**
     * The display name of the dashboard.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Whether to embed credentials in the dashboard. Default is `true`.
     */
    embedCredentials?: pulumi.Input<boolean>;
    etag?: pulumi.Input<string>;
    /**
     * The path to the dashboard JSON file. Conflicts with `serializedDashboard`.
     */
    filePath?: pulumi.Input<string>;
    lifecycleState?: pulumi.Input<string>;
    md5?: pulumi.Input<string>;
    /**
     * The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn't exist, it will be created.
     */
    parentPath?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    /**
     * The contents of the dashboard in serialized string form. Conflicts with `filePath`.
     */
    serializedDashboard?: pulumi.Input<string>;
    updateTime?: pulumi.Input<string>;
    /**
     * The warehouse ID used to run the dashboard.
     */
    warehouseId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    createTime?: pulumi.Input<string>;
    dashboardChangeDetected?: pulumi.Input<boolean>;
    dashboardId?: pulumi.Input<string>;
    /**
     * The display name of the dashboard.
     */
    displayName: pulumi.Input<string>;
    /**
     * Whether to embed credentials in the dashboard. Default is `true`.
     */
    embedCredentials?: pulumi.Input<boolean>;
    etag?: pulumi.Input<string>;
    /**
     * The path to the dashboard JSON file. Conflicts with `serializedDashboard`.
     */
    filePath?: pulumi.Input<string>;
    lifecycleState?: pulumi.Input<string>;
    md5?: pulumi.Input<string>;
    /**
     * The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn't exist, it will be created.
     */
    parentPath: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    /**
     * The contents of the dashboard in serialized string form. Conflicts with `filePath`.
     */
    serializedDashboard?: pulumi.Input<string>;
    updateTime?: pulumi.Input<string>;
    /**
     * The warehouse ID used to run the dashboard.
     */
    warehouseId: pulumi.Input<string>;
}
