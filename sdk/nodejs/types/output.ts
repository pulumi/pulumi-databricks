// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface ClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface ClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface ClusterClusterLogConf {
    dbfs?: outputs.ClusterClusterLogConfDbfs;
    s3?: outputs.ClusterClusterLogConfS3;
}

export interface ClusterClusterLogConfDbfs {
    destination: string;
}

export interface ClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface ClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.ClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface ClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface ClusterDockerImage {
    basicAuth?: outputs.ClusterDockerImageBasicAuth;
    url: string;
}

export interface ClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface ClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface ClusterInitScript {
    abfss?: outputs.ClusterInitScriptAbfss;
    dbfs?: outputs.ClusterInitScriptDbfs;
    file?: outputs.ClusterInitScriptFile;
    gcs?: outputs.ClusterInitScriptGcs;
    s3?: outputs.ClusterInitScriptS3;
}

export interface ClusterInitScriptAbfss {
    destination?: string;
}

export interface ClusterInitScriptDbfs {
    destination: string;
}

export interface ClusterInitScriptFile {
    destination?: string;
}

export interface ClusterInitScriptGcs {
    destination?: string;
}

export interface ClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface ClusterLibrary {
    cran?: outputs.ClusterLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.ClusterLibraryMaven;
    pypi?: outputs.ClusterLibraryPypi;
    whl?: string;
}

export interface ClusterLibraryCran {
    package: string;
    repo?: string;
}

export interface ClusterLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface ClusterLibraryPypi {
    package: string;
    repo?: string;
}

export interface ClusterWorkloadType {
    clients: outputs.ClusterWorkloadTypeClients;
}

export interface ClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetClusterClusterInfo {
    autoscale?: outputs.GetClusterClusterInfoAutoscale;
    /**
     * Automatically terminate the cluster after being inactive for this time in minutes. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination.
     */
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetClusterClusterInfoAwsAttributes;
    azureAttributes?: outputs.GetClusterClusterInfoAzureAttributes;
    clusterCores?: number;
    /**
     * The id of the cluster
     */
    clusterId?: string;
    clusterLogConf?: outputs.GetClusterClusterInfoClusterLogConf;
    clusterLogStatus?: outputs.GetClusterClusterInfoClusterLogStatus;
    clusterMemoryMb?: number;
    /**
     * The exact name of the cluster to search
     */
    clusterName?: string;
    clusterSource?: string;
    creatorUserName?: string;
    /**
     * Additional tags for cluster resources.
     */
    customTags?: {[key: string]: any};
    /**
     * Security features of the cluster. Unity Catalog requires `SINGLE_USER` or `USER_ISOLATION` mode. `LEGACY_PASSTHROUGH` for passthrough cluster and `LEGACY_TABLE_ACL` for Table ACL cluster. Default to `NONE`, i.e. no security feature enabled.
     */
    dataSecurityMode?: string;
    defaultTags: {[key: string]: any};
    dockerImage?: outputs.GetClusterClusterInfoDockerImage;
    driver?: outputs.GetClusterClusterInfoDriver;
    /**
     * similar to `instancePoolId`, but for driver node.
     */
    driverInstancePoolId: string;
    /**
     * The node type of the Spark driver.
     */
    driverNodeTypeId?: string;
    /**
     * Use autoscaling local storage.
     */
    enableElasticDisk?: boolean;
    /**
     * Enable local disk encryption.
     */
    enableLocalDiskEncryption?: boolean;
    executors?: outputs.GetClusterClusterInfoExecutor[];
    gcpAttributes?: outputs.GetClusterClusterInfoGcpAttributes;
    initScripts?: outputs.GetClusterClusterInfoInitScript[];
    /**
     * The pool of idle instances the cluster is attached to.
     */
    instancePoolId?: string;
    jdbcPort?: number;
    lastActivityTime?: number;
    lastStateLossTime?: number;
    /**
     * Any supported databricks.getNodeType id.
     */
    nodeTypeId?: string;
    numWorkers?: number;
    /**
     * Identifier of Cluster Policy to validate cluster and preset certain defaults.
     */
    policyId?: string;
    /**
     * The type of runtime of the cluster
     */
    runtimeEngine?: string;
    /**
     * The optional user name of the user to assign to an interactive cluster. This field is required when using standard AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
     */
    singleUserName?: string;
    /**
     * Map with key-value pairs to fine-tune Spark clusters.
     */
    sparkConf?: {[key: string]: any};
    sparkContextId?: number;
    /**
     * Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
     */
    sparkEnvVars?: {[key: string]: any};
    /**
     * [Runtime version](https://docs.databricks.com/runtime/index.html) of the cluster.
     */
    sparkVersion: string;
    /**
     * SSH public key contents that will be added to each Spark node in this cluster.
     */
    sshPublicKeys?: string[];
    startTime?: number;
    state: string;
    stateMessage?: string;
    terminateTime?: number;
    terminationReason?: outputs.GetClusterClusterInfoTerminationReason;
}

export interface GetClusterClusterInfoAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetClusterClusterInfoAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetClusterClusterInfoAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetClusterClusterInfoClusterLogConf {
    dbfs?: outputs.GetClusterClusterInfoClusterLogConfDbfs;
    s3?: outputs.GetClusterClusterInfoClusterLogConfS3;
}

export interface GetClusterClusterInfoClusterLogConfDbfs {
    destination: string;
}

export interface GetClusterClusterInfoClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoClusterLogStatus {
    lastAttempted?: number;
    lastException?: string;
}

export interface GetClusterClusterInfoDockerImage {
    basicAuth?: outputs.GetClusterClusterInfoDockerImageBasicAuth;
    url: string;
}

export interface GetClusterClusterInfoDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetClusterClusterInfoDriver {
    hostPrivateIp?: string;
    instanceId?: string;
    nodeAwsAttributes?: outputs.GetClusterClusterInfoDriverNodeAwsAttributes;
    nodeId?: string;
    privateIp?: string;
    publicDns?: string;
    startTimestamp?: number;
}

export interface GetClusterClusterInfoDriverNodeAwsAttributes {
    isSpot?: boolean;
}

export interface GetClusterClusterInfoExecutor {
    hostPrivateIp?: string;
    instanceId?: string;
    nodeAwsAttributes?: outputs.GetClusterClusterInfoExecutorNodeAwsAttributes;
    nodeId?: string;
    privateIp?: string;
    publicDns?: string;
    startTimestamp?: number;
}

export interface GetClusterClusterInfoExecutorNodeAwsAttributes {
    isSpot?: boolean;
}

export interface GetClusterClusterInfoGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetClusterClusterInfoInitScript {
    abfss?: outputs.GetClusterClusterInfoInitScriptAbfss;
    dbfs?: outputs.GetClusterClusterInfoInitScriptDbfs;
    file?: outputs.GetClusterClusterInfoInitScriptFile;
    gcs?: outputs.GetClusterClusterInfoInitScriptGcs;
    s3?: outputs.GetClusterClusterInfoInitScriptS3;
}

export interface GetClusterClusterInfoInitScriptAbfss {
    destination?: string;
}

export interface GetClusterClusterInfoInitScriptDbfs {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptFile {
    destination?: string;
}

export interface GetClusterClusterInfoInitScriptGcs {
    destination?: string;
}

export interface GetClusterClusterInfoInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoTerminationReason {
    code?: string;
    parameters?: {[key: string]: any};
    type?: string;
}

export interface GetDbfsFilePathsPathList {
    fileSize?: number;
    /**
     * Path on DBFS for the file to perform listing
     */
    path?: string;
}

export interface GetInstancePoolPoolInfo {
    awsAttributes?: outputs.GetInstancePoolPoolInfoAwsAttributes;
    azureAttributes?: outputs.GetInstancePoolPoolInfoAzureAttributes;
    customTags?: {[key: string]: any};
    defaultTags: {[key: string]: any};
    diskSpec?: outputs.GetInstancePoolPoolInfoDiskSpec;
    enableElasticDisk?: boolean;
    gcpAttributes?: outputs.GetInstancePoolPoolInfoGcpAttributes;
    idleInstanceAutoterminationMinutes: number;
    instancePoolFleetAttributes?: outputs.GetInstancePoolPoolInfoInstancePoolFleetAttribute[];
    instancePoolId: string;
    instancePoolName: string;
    maxCapacity?: number;
    minIdleInstances?: number;
    nodeTypeId?: string;
    preloadedDockerImages?: outputs.GetInstancePoolPoolInfoPreloadedDockerImage[];
    preloadedSparkVersions?: string[];
    state?: string;
    stats?: outputs.GetInstancePoolPoolInfoStats;
}

export interface GetInstancePoolPoolInfoAwsAttributes {
    availability?: string;
    spotBidPricePercent?: number;
    zoneId: string;
}

export interface GetInstancePoolPoolInfoAzureAttributes {
    availability?: string;
    spotBidMaxPrice?: number;
}

export interface GetInstancePoolPoolInfoDiskSpec {
    diskCount?: number;
    diskSize?: number;
    diskType?: outputs.GetInstancePoolPoolInfoDiskSpecDiskType;
}

export interface GetInstancePoolPoolInfoDiskSpecDiskType {
    azureDiskVolumeType?: string;
    ebsVolumeType?: string;
}

export interface GetInstancePoolPoolInfoGcpAttributes {
    gcpAvailability?: string;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttribute {
    fleetOnDemandOption?: outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOption;
    fleetSpotOption?: outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOption;
    launchTemplateOverrides: outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverride[];
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverride {
    availabilityZone: string;
    instanceType: string;
}

export interface GetInstancePoolPoolInfoPreloadedDockerImage {
    basicAuth?: outputs.GetInstancePoolPoolInfoPreloadedDockerImageBasicAuth;
    url: string;
}

export interface GetInstancePoolPoolInfoPreloadedDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetInstancePoolPoolInfoStats {
    idleCount?: number;
    pendingIdleCount?: number;
    pendingUsedCount?: number;
    usedCount?: number;
}

export interface GetJobJobSettings {
    createdTime?: number;
    creatorUserName?: string;
    jobId?: number;
    settings?: outputs.GetJobJobSettingsSettings;
}

export interface GetJobJobSettingsSettings {
    continuous?: outputs.GetJobJobSettingsSettingsContinuous;
    dbtTask?: outputs.GetJobJobSettingsSettingsDbtTask;
    emailNotifications?: outputs.GetJobJobSettingsSettingsEmailNotifications;
    existingClusterId?: string;
    format: string;
    gitSource?: outputs.GetJobJobSettingsSettingsGitSource;
    jobClusters?: outputs.GetJobJobSettingsSettingsJobCluster[];
    libraries?: outputs.GetJobJobSettingsSettingsLibrary[];
    maxConcurrentRuns?: number;
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    /**
     * the job name of databricks.Job if the resource was matched by id.
     */
    name?: string;
    newCluster?: outputs.GetJobJobSettingsSettingsNewCluster;
    notebookTask?: outputs.GetJobJobSettingsSettingsNotebookTask;
    pipelineTask?: outputs.GetJobJobSettingsSettingsPipelineTask;
    pythonWheelTask?: outputs.GetJobJobSettingsSettingsPythonWheelTask;
    queue?: outputs.GetJobJobSettingsSettingsQueue;
    retryOnTimeout?: boolean;
    schedule?: outputs.GetJobJobSettingsSettingsSchedule;
    sparkJarTask?: outputs.GetJobJobSettingsSettingsSparkJarTask;
    sparkPythonTask?: outputs.GetJobJobSettingsSettingsSparkPythonTask;
    sparkSubmitTask?: outputs.GetJobJobSettingsSettingsSparkSubmitTask;
    tags?: {[key: string]: any};
    tasks?: outputs.GetJobJobSettingsSettingsTask[];
    timeoutSeconds?: number;
    trigger?: outputs.GetJobJobSettingsSettingsTrigger;
    webhookNotifications?: outputs.GetJobJobSettingsSettingsWebhookNotifications;
}

export interface GetJobJobSettingsSettingsContinuous {
    pauseStatus: string;
}

export interface GetJobJobSettingsSettingsDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsEmailNotifications {
    alertOnLastAttempt?: boolean;
    noAlertForSkippedRuns?: boolean;
    onFailures?: string[];
    onStarts?: string[];
    onSuccesses?: string[];
}

export interface GetJobJobSettingsSettingsGitSource {
    branch?: string;
    commit?: string;
    provider?: string;
    tag?: string;
    url: string;
}

export interface GetJobJobSettingsSettingsJobCluster {
    jobClusterKey?: string;
    newCluster?: outputs.GetJobJobSettingsSettingsJobClusterNewCluster;
}

export interface GetJobJobSettingsSettingsJobClusterNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributes;
    azureAttributes?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConf;
    clusterMountInfos?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConf {
    dbfs?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfs;
    s3?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterDockerImage {
    basicAuth?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScript {
    abfss?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfss;
    dbfs?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfs;
    file?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFile;
    gcs?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcs;
    s3?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfss {
    destination?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFile {
    destination?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcs {
    destination?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterWorkloadType {
    clients: outputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsLibrary {
    cran?: outputs.GetJobJobSettingsSettingsLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.GetJobJobSettingsSettingsLibraryMaven;
    pypi?: outputs.GetJobJobSettingsSettingsLibraryPypi;
    whl?: string;
}

export interface GetJobJobSettingsSettingsLibraryCran {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface GetJobJobSettingsSettingsLibraryPypi {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.GetJobJobSettingsSettingsNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetJobJobSettingsSettingsNewClusterAwsAttributes;
    azureAttributes?: outputs.GetJobJobSettingsSettingsNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.GetJobJobSettingsSettingsNewClusterClusterLogConf;
    clusterMountInfos?: outputs.GetJobJobSettingsSettingsNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.GetJobJobSettingsSettingsNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.GetJobJobSettingsSettingsNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.GetJobJobSettingsSettingsNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.GetJobJobSettingsSettingsNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConf {
    dbfs?: outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfDbfs;
    s3?: outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsNewClusterDockerImage {
    basicAuth?: outputs.GetJobJobSettingsSettingsNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScript {
    abfss?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptAbfss;
    dbfs?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptDbfs;
    file?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptFile;
    gcs?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptGcs;
    s3?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptS3;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptAbfss {
    destination?: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptFile {
    destination?: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptGcs {
    destination?: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsNewClusterWorkloadType {
    clients: outputs.GetJobJobSettingsSettingsNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsNotebookTask {
    baseParameters?: {[key: string]: any};
    notebookPath: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsPipelineTask {
    pipelineId: string;
}

export interface GetJobJobSettingsSettingsPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: any};
    packageName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsQueue {
}

export interface GetJobJobSettingsSettingsSchedule {
    pauseStatus: string;
    quartzCronExpression: string;
    timezoneId: string;
}

export interface GetJobJobSettingsSettingsSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsSparkSubmitTask {
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTask {
    dbtTask?: outputs.GetJobJobSettingsSettingsTaskDbtTask;
    dependsOns?: outputs.GetJobJobSettingsSettingsTaskDependsOn[];
    description?: string;
    emailNotifications?: outputs.GetJobJobSettingsSettingsTaskEmailNotifications;
    existingClusterId?: string;
    jobClusterKey?: string;
    libraries?: outputs.GetJobJobSettingsSettingsTaskLibrary[];
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    newCluster?: outputs.GetJobJobSettingsSettingsTaskNewCluster;
    notebookTask?: outputs.GetJobJobSettingsSettingsTaskNotebookTask;
    pipelineTask?: outputs.GetJobJobSettingsSettingsTaskPipelineTask;
    pythonWheelTask?: outputs.GetJobJobSettingsSettingsTaskPythonWheelTask;
    retryOnTimeout: boolean;
    runIf?: string;
    sparkJarTask?: outputs.GetJobJobSettingsSettingsTaskSparkJarTask;
    sparkPythonTask?: outputs.GetJobJobSettingsSettingsTaskSparkPythonTask;
    sparkSubmitTask?: outputs.GetJobJobSettingsSettingsTaskSparkSubmitTask;
    sqlTask?: outputs.GetJobJobSettingsSettingsTaskSqlTask;
    taskKey?: string;
    timeoutSeconds?: number;
}

export interface GetJobJobSettingsSettingsTaskDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskDependsOn {
    taskKey?: string;
}

export interface GetJobJobSettingsSettingsTaskEmailNotifications {
    alertOnLastAttempt?: boolean;
    noAlertForSkippedRuns?: boolean;
    onFailures?: string[];
    onStarts?: string[];
    onSuccesses?: string[];
}

export interface GetJobJobSettingsSettingsTaskLibrary {
    cran?: outputs.GetJobJobSettingsSettingsTaskLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.GetJobJobSettingsSettingsTaskLibraryMaven;
    pypi?: outputs.GetJobJobSettingsSettingsTaskLibraryPypi;
    whl?: string;
}

export interface GetJobJobSettingsSettingsTaskLibraryCran {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskLibraryPypi {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.GetJobJobSettingsSettingsTaskNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetJobJobSettingsSettingsTaskNewClusterAwsAttributes;
    azureAttributes?: outputs.GetJobJobSettingsSettingsTaskNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConf;
    clusterMountInfos?: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.GetJobJobSettingsSettingsTaskNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.GetJobJobSettingsSettingsTaskNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConf {
    dbfs?: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfs;
    s3?: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterDockerImage {
    basicAuth?: outputs.GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScript {
    abfss?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfss;
    dbfs?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfs;
    file?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptFile;
    gcs?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptGcs;
    s3?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptS3;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfss {
    destination?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptFile {
    destination?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptGcs {
    destination?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterWorkloadType {
    clients: outputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsTaskNotebookTask {
    baseParameters?: {[key: string]: any};
    notebookPath: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskPipelineTask {
    pipelineId: string;
}

export interface GetJobJobSettingsSettingsTaskPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: any};
    packageName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskSparkSubmitTask {
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskSqlTask {
    alert?: outputs.GetJobJobSettingsSettingsTaskSqlTaskAlert;
    dashboard?: outputs.GetJobJobSettingsSettingsTaskSqlTaskDashboard;
    parameters?: {[key: string]: any};
    query?: outputs.GetJobJobSettingsSettingsTaskSqlTaskQuery;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskAlert {
    alertId: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskDashboard {
    dashboardId: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskQuery {
    queryId: string;
}

export interface GetJobJobSettingsSettingsTrigger {
    fileArrival: outputs.GetJobJobSettingsSettingsTriggerFileArrival;
    pauseStatus: string;
}

export interface GetJobJobSettingsSettingsTriggerFileArrival {
    minTimeBetweenTriggerSeconds?: number;
    url: string;
    waitAfterLastChangeSeconds?: number;
}

export interface GetJobJobSettingsSettingsWebhookNotifications {
    onFailures?: outputs.GetJobJobSettingsSettingsWebhookNotificationsOnFailure[];
    onStarts?: outputs.GetJobJobSettingsSettingsWebhookNotificationsOnStart[];
    onSuccesses?: outputs.GetJobJobSettingsSettingsWebhookNotificationsOnSuccess[];
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnFailure {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnStart {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnSuccess {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetNotebookPathsNotebookPathList {
    language?: string;
    /**
     * Path to workspace directory
     */
    path?: string;
}

export interface GetShareObject {
    addedAt: number;
    addedBy: string;
    cdfEnabled?: boolean;
    /**
     * Description about the object.
     */
    comment?: string;
    /**
     * Type of the object.
     */
    dataObjectType: string;
    historyDataSharingStatus?: string;
    /**
     * The name of the share
     */
    name: string;
    partitions?: outputs.GetShareObjectPartition[];
    sharedAs?: string;
    startVersion?: number;
    status: string;
}

export interface GetShareObjectPartition {
    values: outputs.GetShareObjectPartitionValue[];
}

export interface GetShareObjectPartitionValue {
    /**
     * The name of the share
     */
    name: string;
    op: string;
    recipientPropertyKey?: string;
    value?: string;
}

export interface GetSqlWarehouseChannel {
    /**
     * Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
     */
    name?: string;
}

export interface GetSqlWarehouseOdbcParams {
    host?: string;
    hostname?: string;
    path: string;
    port: number;
    protocol: string;
}

export interface GetSqlWarehouseTags {
    customTags: outputs.GetSqlWarehouseTagsCustomTag[];
}

export interface GetSqlWarehouseTagsCustomTag {
    key: string;
    value: string;
}

export interface GrantsGrant {
    principal: string;
    privileges: string[];
}

export interface InstancePoolAwsAttributes {
    /**
     * (String) Availability type used for all instances in the pool. Only `ON_DEMAND` and `SPOT` are supported.
     */
    availability?: string;
    /**
     * (Integer) The max price for AWS spot instances, as a percentage of the corresponding instance type’s on-demand price. For example, if this field is set to 50, and the instance pool needs a new i3.xlarge spot instance, then the max price is half of the price of on-demand i3.xlarge instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand i3.xlarge instances. If not specified, the *default value is 100*. When spot instances are requested for this instance pool, only spot instances whose max price percentage matches this field are considered. *For safety, this field cannot be greater than 10000.*
     */
    spotBidPricePercent?: number;
    /**
     * (String) Identifier for the availability zone/datacenter in which the instance pool resides. This string is of the form like `"us-west-2a"`. The provided availability zone must be in the same region as the Databricks deployment. For example, `"us-west-2a"` is not a valid zone ID if the Databricks deployment resides in the `"us-east-1"` region. If not specified, a default zone is used. You can find the list of available zones as well as the default value by using the [List Zones API](https://docs.databricks.com/dev-tools/api/latest/clusters.html#clusterclusterservicelistavailablezones).
     */
    zoneId: string;
}

export interface InstancePoolAzureAttributes {
    /**
     * Availability type used for all nodes. Valid values are `PREEMPTIBLE_GCP`, `PREEMPTIBLE_WITH_FALLBACK_GCP` and `ON_DEMAND_GCP`, default: `ON_DEMAND_GCP`.
     */
    availability?: string;
    /**
     * The max price for Azure spot instances.  Use `-1` to specify the lowest price.
     */
    spotBidMaxPrice?: number;
}

export interface InstancePoolDiskSpec {
    /**
     * (Integer) The number of disks to attach to each instance. This feature is only enabled for supported node types. Users can choose up to the limit of the disks supported by the node type. For node types with no local disk, at least one disk needs to be specified.
     */
    diskCount?: number;
    /**
     * (Integer) The size of each disk (in GiB) to attach.
     */
    diskSize?: number;
    diskType?: outputs.InstancePoolDiskSpecDiskType;
}

export interface InstancePoolDiskSpecDiskType {
    azureDiskVolumeType?: string;
    ebsVolumeType?: string;
}

export interface InstancePoolGcpAttributes {
    gcpAvailability?: string;
}

export interface InstancePoolInstancePoolFleetAttributes {
    fleetOnDemandOption?: outputs.InstancePoolInstancePoolFleetAttributesFleetOnDemandOption;
    fleetSpotOption?: outputs.InstancePoolInstancePoolFleetAttributesFleetSpotOption;
    launchTemplateOverrides: outputs.InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride[];
}

export interface InstancePoolInstancePoolFleetAttributesFleetOnDemandOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface InstancePoolInstancePoolFleetAttributesFleetSpotOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride {
    availabilityZone: string;
    instanceType: string;
}

export interface InstancePoolPreloadedDockerImage {
    basicAuth?: outputs.InstancePoolPreloadedDockerImageBasicAuth;
    url: string;
}

export interface InstancePoolPreloadedDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobContinuous {
    /**
     * Indicate whether this continuous job is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pauseStatus` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pauseStatus`.
     */
    pauseStatus: string;
}

export interface JobDbtTask {
    /**
     * The name of the catalog to use inside Unity Catalog.
     */
    catalog?: string;
    /**
     * (Array) Series of dbt commands to execute in sequence. Every command must start with "dbt".
     */
    commands: string[];
    /**
     * The relative path to the directory in the repository specified by `gitSource` where dbt should look in for the `profiles.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--profile-dir` to a dbt command.
     */
    profilesDirectory?: string;
    /**
     * The relative path to the directory in the repository specified in `gitSource` where dbt should look in for the `dbt_project.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--project-dir` to a dbt command.
     */
    projectDirectory?: string;
    /**
     * The name of the schema dbt should run in. Defaults to `default`.
     */
    schema?: string;
    /**
     * The ID of the SQL warehouse that dbt should execute against.
     */
    warehouseId?: string;
}

export interface JobEmailNotifications {
    alertOnLastAttempt?: boolean;
    /**
     * (Bool) don't send alert for skipped runs.
     */
    noAlertForSkippedRuns?: boolean;
    /**
     * (List) list of emails to notify when the run fails.
     */
    onFailures?: string[];
    /**
     * (List) list of emails to notify when the run starts.
     */
    onStarts?: string[];
    /**
     * (List) list of emails to notify when the run completes successfully.
     */
    onSuccesses?: string[];
}

export interface JobGitSource {
    /**
     * name of the Git branch to use. Conflicts with `tag` and `commit`.
     */
    branch?: string;
    /**
     * hash of Git commit to use. Conflicts with `branch` and `tag`.
     */
    commit?: string;
    /**
     * case insensitive name of the Git provider.  Following values are supported right now (could be a subject for change, consult [Repos API documentation](https://docs.databricks.com/dev-tools/api/latest/repos.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`.
     */
    provider?: string;
    /**
     * name of the Git branch to use. Conflicts with `branch` and `commit`.
     */
    tag?: string;
    /**
     * URL of the Git repository to use.
     */
    url: string;
}

export interface JobJobCluster {
    /**
     * Identifier that can be referenced in `task` block, so that cluster is shared between tasks
     */
    jobClusterKey?: string;
    /**
     * Same set of parameters as for databricks.Cluster resource.
     */
    newCluster?: outputs.JobJobClusterNewCluster;
}

export interface JobJobClusterNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.JobJobClusterNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.JobJobClusterNewClusterAwsAttributes;
    azureAttributes?: outputs.JobJobClusterNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.JobJobClusterNewClusterClusterLogConf;
    clusterMountInfos?: outputs.JobJobClusterNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobJobClusterNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobJobClusterNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobJobClusterNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.JobJobClusterNewClusterWorkloadType;
}

export interface JobJobClusterNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobJobClusterNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobJobClusterNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface JobJobClusterNewClusterClusterLogConf {
    dbfs?: outputs.JobJobClusterNewClusterClusterLogConfDbfs;
    s3?: outputs.JobJobClusterNewClusterClusterLogConfS3;
}

export interface JobJobClusterNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobJobClusterNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobJobClusterNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface JobJobClusterNewClusterDockerImage {
    basicAuth?: outputs.JobJobClusterNewClusterDockerImageBasicAuth;
    /**
     * string with URL under the Unity Catalog external location that will be monitored for new files. Please note that have a trailing slash character (`/`).
     */
    url: string;
}

export interface JobJobClusterNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobJobClusterNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobJobClusterNewClusterInitScript {
    abfss?: outputs.JobJobClusterNewClusterInitScriptAbfss;
    dbfs?: outputs.JobJobClusterNewClusterInitScriptDbfs;
    file?: outputs.JobJobClusterNewClusterInitScriptFile;
    gcs?: outputs.JobJobClusterNewClusterInitScriptGcs;
    s3?: outputs.JobJobClusterNewClusterInitScriptS3;
}

export interface JobJobClusterNewClusterInitScriptAbfss {
    destination?: string;
}

export interface JobJobClusterNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobJobClusterNewClusterInitScriptFile {
    destination?: string;
}

export interface JobJobClusterNewClusterInitScriptGcs {
    destination?: string;
}

export interface JobJobClusterNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobJobClusterNewClusterWorkloadType {
    clients: outputs.JobJobClusterNewClusterWorkloadTypeClients;
}

export interface JobJobClusterNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobLibrary {
    cran?: outputs.JobLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobLibraryMaven;
    pypi?: outputs.JobLibraryPypi;
    whl?: string;
}

export interface JobLibraryCran {
    package: string;
    repo?: string;
}

export interface JobLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.JobNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.JobNewClusterAwsAttributes;
    azureAttributes?: outputs.JobNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.JobNewClusterClusterLogConf;
    clusterMountInfos?: outputs.JobNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.JobNewClusterWorkloadType;
}

export interface JobNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface JobNewClusterClusterLogConf {
    dbfs?: outputs.JobNewClusterClusterLogConfDbfs;
    s3?: outputs.JobNewClusterClusterLogConfS3;
}

export interface JobNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.JobNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface JobNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface JobNewClusterDockerImage {
    basicAuth?: outputs.JobNewClusterDockerImageBasicAuth;
    /**
     * string with URL under the Unity Catalog external location that will be monitored for new files. Please note that have a trailing slash character (`/`).
     */
    url: string;
}

export interface JobNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobNewClusterInitScript {
    abfss?: outputs.JobNewClusterInitScriptAbfss;
    dbfs?: outputs.JobNewClusterInitScriptDbfs;
    file?: outputs.JobNewClusterInitScriptFile;
    gcs?: outputs.JobNewClusterInitScriptGcs;
    s3?: outputs.JobNewClusterInitScriptS3;
}

export interface JobNewClusterInitScriptAbfss {
    destination?: string;
}

export interface JobNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobNewClusterInitScriptFile {
    destination?: string;
}

export interface JobNewClusterInitScriptGcs {
    destination?: string;
}

export interface JobNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobNewClusterWorkloadType {
    clients: outputs.JobNewClusterWorkloadTypeClients;
}

export interface JobNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobNotebookTask {
    /**
     * (Map) Base parameters to be used for each run of this job. If the run is initiated by a call to run-now with parameters specified, the two parameters maps will be merged. If the same key is specified in baseParameters and in run-now, the value from run-now will be used. If the notebook takes a parameter that is not specified in the job’s baseParameters or the run-now override parameters, the default value from the notebook will be used. Retrieve these parameters in a notebook using `dbutils.widgets.get`.
     */
    baseParameters?: {[key: string]: any};
    /**
     * The path of the databricks.Notebook to be run in the Databricks workspace or remote repository. For notebooks stored in the Databricks workspace, the path must be absolute and begin with a slash. For notebooks stored in a remote repository, the path must be relative. This field is required.
     */
    notebookPath: string;
    /**
     * Location type of the notebook, can only be `WORKSPACE` or `GIT`. When set to `WORKSPACE`, the notebook will be retrieved from the local Databricks workspace. When set to `GIT`, the notebook will be retrieved from a Git repository defined in `gitSource`. If the value is empty, the task will use `GIT` if `gitSource` is defined and `WORKSPACE` otherwise.
     */
    source?: string;
}

export interface JobPipelineTask {
    /**
     * The pipeline's unique ID.
     */
    pipelineId: string;
}

export interface JobPythonWheelTask {
    /**
     * Python function as entry point for the task
     */
    entryPoint?: string;
    /**
     * Named parameters for the task
     */
    namedParameters?: {[key: string]: any};
    /**
     * Name of Python package
     */
    packageName?: string;
    /**
     * Parameters for the task
     */
    parameters?: string[];
}

export interface JobQueue {
}

export interface JobSchedule {
    /**
     * Indicate whether this schedule is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pauseStatus` field is omitted and a schedule is provided, the server will default to using `UNPAUSED` as a value for `pauseStatus`.
     */
    pauseStatus: string;
    /**
     * A [Cron expression using Quartz syntax](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) that describes the schedule for a job. This field is required.
     */
    quartzCronExpression: string;
    /**
     * A Java timezone ID. The schedule for a job will be resolved with respect to this timezone. See Java TimeZone for details. This field is required.
     */
    timezoneId: string;
}

export interface JobSparkJarTask {
    jarUri?: string;
    /**
     * The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. The code should use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs of the job will fail.
     */
    mainClassName?: string;
    /**
     * (List) Parameters passed to the main method.
     */
    parameters?: string[];
}

export interface JobSparkPythonTask {
    /**
     * (List) Command line parameters passed to the Python file.
     */
    parameters?: string[];
    /**
     * The URI of the Python file to be executed. databricks_dbfs_file, cloud file URIs (e.g. `s3:/`, `abfss:/`, `gs:/`), workspace paths and remote repository are supported. For Python files stored in the Databricks workspace, the path must be absolute and begin with `/Repos`. For files stored in a remote repository, the path must be relative. This field is required.
     */
    pythonFile: string;
    /**
     * Location type of the Python file, can only be `GIT`. When set to `GIT`, the Python file will be retrieved from a Git repository defined in `gitSource`.
     */
    source?: string;
}

export interface JobSparkSubmitTask {
    /**
     * (List) Command-line parameters passed to spark submit.
     */
    parameters?: string[];
}

export interface JobTask {
    dbtTask?: outputs.JobTaskDbtTask;
    dependsOns?: outputs.JobTaskDependsOn[];
    description?: string;
    /**
     * (List) An optional set of email addresses notified when runs of this job begins, completes and fails. The default behavior is to not send any emails. This field is a block and is documented below.
     */
    emailNotifications?: outputs.JobTaskEmailNotifications;
    existingClusterId?: string;
    /**
     * Identifier that can be referenced in `task` block, so that cluster is shared between tasks
     */
    jobClusterKey?: string;
    /**
     * (Set) An optional list of libraries to be installed on the cluster that will execute the job. Please consult libraries section for databricks.Cluster resource.
     */
    libraries?: outputs.JobTaskLibrary[];
    /**
     * (Integer) An optional maximum number of times to retry an unsuccessful run. A run is considered to be unsuccessful if it completes with a FAILED or INTERNAL_ERROR lifecycle state. The value -1 means to retry indefinitely and the value 0 means to never retry. The default behavior is to never retry. A run can have the following lifecycle state: PENDING, RUNNING, TERMINATING, TERMINATED, SKIPPED or INTERNAL_ERROR
     */
    maxRetries?: number;
    /**
     * (Integer) An optional minimal interval in milliseconds between the start of the failed run and the subsequent retry run. The default behavior is that unsuccessful runs are immediately retried.
     */
    minRetryIntervalMillis?: number;
    /**
     * Same set of parameters as for databricks.Cluster resource.
     */
    newCluster?: outputs.JobTaskNewCluster;
    notebookTask?: outputs.JobTaskNotebookTask;
    pipelineTask?: outputs.JobTaskPipelineTask;
    pythonWheelTask?: outputs.JobTaskPythonWheelTask;
    /**
     * (Bool) An optional policy to specify whether to retry a job when it times out. The default behavior is to not retry on timeout.
     */
    retryOnTimeout: boolean;
    runIf?: string;
    sparkJarTask?: outputs.JobTaskSparkJarTask;
    sparkPythonTask?: outputs.JobTaskSparkPythonTask;
    sparkSubmitTask?: outputs.JobTaskSparkSubmitTask;
    sqlTask?: outputs.JobTaskSqlTask;
    taskKey?: string;
    /**
     * (Integer) An optional timeout applied to each run of this job. The default behavior is to have no timeout.
     */
    timeoutSeconds?: number;
}

export interface JobTaskDbtTask {
    /**
     * The name of the catalog to use inside Unity Catalog.
     */
    catalog?: string;
    /**
     * (Array) Series of dbt commands to execute in sequence. Every command must start with "dbt".
     */
    commands: string[];
    /**
     * The relative path to the directory in the repository specified by `gitSource` where dbt should look in for the `profiles.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--profile-dir` to a dbt command.
     */
    profilesDirectory?: string;
    /**
     * The relative path to the directory in the repository specified in `gitSource` where dbt should look in for the `dbt_project.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--project-dir` to a dbt command.
     */
    projectDirectory?: string;
    /**
     * The name of the schema dbt should run in. Defaults to `default`.
     */
    schema?: string;
    /**
     * The ID of the SQL warehouse that dbt should execute against.
     */
    warehouseId?: string;
}

export interface JobTaskDependsOn {
    taskKey?: string;
}

export interface JobTaskEmailNotifications {
    alertOnLastAttempt?: boolean;
    /**
     * (Bool) don't send alert for skipped runs.
     */
    noAlertForSkippedRuns?: boolean;
    /**
     * (List) list of emails to notify when the run fails.
     */
    onFailures?: string[];
    /**
     * (List) list of emails to notify when the run starts.
     */
    onStarts?: string[];
    /**
     * (List) list of emails to notify when the run completes successfully.
     */
    onSuccesses?: string[];
}

export interface JobTaskLibrary {
    cran?: outputs.JobTaskLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobTaskLibraryMaven;
    pypi?: outputs.JobTaskLibraryPypi;
    whl?: string;
}

export interface JobTaskLibraryCran {
    package: string;
    repo?: string;
}

export interface JobTaskLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobTaskLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobTaskNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.JobTaskNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.JobTaskNewClusterAwsAttributes;
    azureAttributes?: outputs.JobTaskNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.JobTaskNewClusterClusterLogConf;
    clusterMountInfos?: outputs.JobTaskNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobTaskNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobTaskNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobTaskNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.JobTaskNewClusterWorkloadType;
}

export interface JobTaskNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobTaskNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobTaskNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface JobTaskNewClusterClusterLogConf {
    dbfs?: outputs.JobTaskNewClusterClusterLogConfDbfs;
    s3?: outputs.JobTaskNewClusterClusterLogConfS3;
}

export interface JobTaskNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobTaskNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobTaskNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface JobTaskNewClusterDockerImage {
    basicAuth?: outputs.JobTaskNewClusterDockerImageBasicAuth;
    /**
     * string with URL under the Unity Catalog external location that will be monitored for new files. Please note that have a trailing slash character (`/`).
     */
    url: string;
}

export interface JobTaskNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobTaskNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobTaskNewClusterInitScript {
    abfss?: outputs.JobTaskNewClusterInitScriptAbfss;
    dbfs?: outputs.JobTaskNewClusterInitScriptDbfs;
    file?: outputs.JobTaskNewClusterInitScriptFile;
    gcs?: outputs.JobTaskNewClusterInitScriptGcs;
    s3?: outputs.JobTaskNewClusterInitScriptS3;
}

export interface JobTaskNewClusterInitScriptAbfss {
    destination?: string;
}

export interface JobTaskNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobTaskNewClusterInitScriptFile {
    destination?: string;
}

export interface JobTaskNewClusterInitScriptGcs {
    destination?: string;
}

export interface JobTaskNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobTaskNewClusterWorkloadType {
    clients: outputs.JobTaskNewClusterWorkloadTypeClients;
}

export interface JobTaskNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobTaskNotebookTask {
    /**
     * (Map) Base parameters to be used for each run of this job. If the run is initiated by a call to run-now with parameters specified, the two parameters maps will be merged. If the same key is specified in baseParameters and in run-now, the value from run-now will be used. If the notebook takes a parameter that is not specified in the job’s baseParameters or the run-now override parameters, the default value from the notebook will be used. Retrieve these parameters in a notebook using `dbutils.widgets.get`.
     */
    baseParameters?: {[key: string]: any};
    /**
     * The path of the databricks.Notebook to be run in the Databricks workspace or remote repository. For notebooks stored in the Databricks workspace, the path must be absolute and begin with a slash. For notebooks stored in a remote repository, the path must be relative. This field is required.
     */
    notebookPath: string;
    /**
     * Location type of the notebook, can only be `WORKSPACE` or `GIT`. When set to `WORKSPACE`, the notebook will be retrieved from the local Databricks workspace. When set to `GIT`, the notebook will be retrieved from a Git repository defined in `gitSource`. If the value is empty, the task will use `GIT` if `gitSource` is defined and `WORKSPACE` otherwise.
     */
    source?: string;
}

export interface JobTaskPipelineTask {
    /**
     * The pipeline's unique ID.
     */
    pipelineId: string;
}

export interface JobTaskPythonWheelTask {
    /**
     * Python function as entry point for the task
     */
    entryPoint?: string;
    /**
     * Named parameters for the task
     */
    namedParameters?: {[key: string]: any};
    /**
     * Name of Python package
     */
    packageName?: string;
    /**
     * Parameters for the task
     */
    parameters?: string[];
}

export interface JobTaskSparkJarTask {
    jarUri?: string;
    /**
     * The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. The code should use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs of the job will fail.
     */
    mainClassName?: string;
    /**
     * (List) Parameters passed to the main method.
     */
    parameters?: string[];
}

export interface JobTaskSparkPythonTask {
    /**
     * (List) Command line parameters passed to the Python file.
     */
    parameters?: string[];
    /**
     * The URI of the Python file to be executed. databricks_dbfs_file, cloud file URIs (e.g. `s3:/`, `abfss:/`, `gs:/`), workspace paths and remote repository are supported. For Python files stored in the Databricks workspace, the path must be absolute and begin with `/Repos`. For files stored in a remote repository, the path must be relative. This field is required.
     */
    pythonFile: string;
    /**
     * Location type of the Python file, can only be `GIT`. When set to `GIT`, the Python file will be retrieved from a Git repository defined in `gitSource`.
     */
    source?: string;
}

export interface JobTaskSparkSubmitTask {
    /**
     * (List) Command-line parameters passed to spark submit.
     */
    parameters?: string[];
}

export interface JobTaskSqlTask {
    /**
     * block consisting of single string field: `alertId` - identifier of the Databricks SQL Alert.
     */
    alert?: outputs.JobTaskSqlTaskAlert;
    /**
     * block consisting of single string field: `dashboardId` - identifier of the Databricks SQL Dashboard databricks_sql_dashboard.
     */
    dashboard?: outputs.JobTaskSqlTaskDashboard;
    /**
     * (Map) parameters to be used for each run of this task. The SQL alert task does not support custom parameters.
     */
    parameters?: {[key: string]: any};
    /**
     * block consisting of single string field: `queryId` - identifier of the Databricks SQL Query (databricks_sql_query).
     */
    query?: outputs.JobTaskSqlTaskQuery;
    /**
     * ID of the (the databricks_sql_endpoint) that will be used to execute the task.  Only Serverless & Pro warehouses are supported right now.
     */
    warehouseId?: string;
}

export interface JobTaskSqlTaskAlert {
    alertId: string;
}

export interface JobTaskSqlTaskDashboard {
    dashboardId: string;
}

export interface JobTaskSqlTaskQuery {
    queryId: string;
}

export interface JobTrigger {
    /**
     * configuration block to define a trigger for [File Arrival events](https://learn.microsoft.com/en-us/azure/databricks/workflows/jobs/file-arrival-triggers) consisting of following attributes:
     */
    fileArrival: outputs.JobTriggerFileArrival;
    /**
     * Indicate whether this trigger is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pauseStatus` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pauseStatus`.
     */
    pauseStatus: string;
}

export interface JobTriggerFileArrival {
    /**
     * If set, the trigger starts a run only after the specified amount of time passed since the last time the trigger fired. The minimum allowed value is 60 seconds.
     */
    minTimeBetweenTriggerSeconds?: number;
    /**
     * string with URL under the Unity Catalog external location that will be monitored for new files. Please note that have a trailing slash character (`/`).
     */
    url: string;
    /**
     * If set, the trigger starts a run only after no file activity has occurred for the specified amount of time. This makes it possible to wait for a batch of incoming files to arrive before triggering a run. The minimum allowed value is 60 seconds.
     */
    waitAfterLastChangeSeconds?: number;
}

export interface JobWebhookNotifications {
    /**
     * (List) list of notification IDs to call when the run fails. A maximum of 3 destinations can be specified.
     */
    onFailures?: outputs.JobWebhookNotificationsOnFailure[];
    /**
     * (List) list of notification IDs to call when the run starts. A maximum of 3 destinations can be specified.
     */
    onStarts?: outputs.JobWebhookNotificationsOnStart[];
    /**
     * (List) list of notification IDs to call when the run completes successfully. A maximum of 3 destinations can be specified.
     */
    onSuccesses?: outputs.JobWebhookNotificationsOnSuccess[];
}

export interface JobWebhookNotificationsOnFailure {
    /**
     * ID of the system notification that is notified when an event defined in `webhookNotifications` is triggered.
     */
    id: string;
}

export interface JobWebhookNotificationsOnStart {
    /**
     * ID of the system notification that is notified when an event defined in `webhookNotifications` is triggered.
     */
    id: string;
}

export interface JobWebhookNotificationsOnSuccess {
    /**
     * ID of the system notification that is notified when an event defined in `webhookNotifications` is triggered.
     */
    id: string;
}

export interface LibraryCran {
    package: string;
    repo?: string;
}

export interface LibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface LibraryPypi {
    package: string;
    repo?: string;
}

export interface MetastoreDataAccessAwsIamRole {
    /**
     * The Amazon Resource Name (ARN) of the AWS IAM role for S3 data access, of the form `arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF`
     */
    roleArn: string;
}

export interface MetastoreDataAccessAzureManagedIdentity {
    /**
     * The Resource ID of the Azure Databricks Access Connector resource, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.Databricks/accessConnectors/connector-name`
     */
    accessConnectorId: string;
}

export interface MetastoreDataAccessAzureServicePrincipal {
    /**
     * The application ID of the application registration within the referenced AAD tenant
     */
    applicationId: string;
    /**
     * The client secret generated for the above app ID in AAD. **This field is redacted on output**
     */
    clientSecret: string;
    /**
     * The directory ID corresponding to the Azure Active Directory (AAD) tenant of the application
     */
    directoryId: string;
}

export interface MetastoreDataAccessDatabricksGcpServiceAccount {
    /**
     * The email of the GCP service account created, to be granted access to relevant buckets.
     */
    email: string;
}

export interface MetastoreDataAccessGcpServiceAccountKey {
    /**
     * The email of the GCP service account created, to be granted access to relevant buckets.
     */
    email: string;
    privateKey: string;
    privateKeyId: string;
}

export interface MlflowModelTag {
    key: string;
    value: string;
}

export interface MlflowWebhookHttpUrlSpec {
    /**
     * Value of the authorization header that should be sent in the request sent by the wehbook.  It should be of the form `<auth type> <credentials>`, e.g. `Bearer <access_token>`. If set to an empty string, no authorization header will be included in the request.
     */
    authorization?: string;
    /**
     * Enable/disable SSL certificate validation. Default is `true`. For self-signed certificates, this field must be `false` AND the destination server must disable certificate validation as well. For security purposes, it is encouraged to perform secret validation with the HMAC-encoded portion of the payload and acknowledge the risk associated with disabling hostname validation whereby it becomes more likely that requests can be maliciously routed to an unintended host.
     */
    enableSslVerification?: boolean;
    /**
     * Shared secret required for HMAC encoding payload. The HMAC-encoded payload will be sent in the header as `X-Databricks-Signature: encodedPayload`.
     */
    secret?: string;
    /**
     * External HTTPS URL called on event trigger (by using a POST request). Structure of payload depends on the event type, refer to [documentation](https://docs.databricks.com/applications/mlflow/model-registry-webhooks.html) for more details.
     */
    url: string;
}

export interface MlflowWebhookJobSpec {
    /**
     * The personal access token used to authorize webhook's job runs.
     */
    accessToken: string;
    /**
     * ID of the Databricks job that the webhook runs.
     */
    jobId: string;
    /**
     * URL of the workspace containing the job that this webhook runs. If not specified, the job’s workspace URL is assumed to be the same as the workspace where the webhook is created.
     */
    workspaceUrl?: string;
}

export interface ModelServingConfig {
    /**
     * Each block represents a served model for the endpoint to serve. A model serving endpoint can have up to 10 served models.
     */
    servedModels: outputs.ModelServingConfigServedModel[];
    /**
     * A single block represents the traffic split configuration amongst the served models.
     */
    trafficConfig?: outputs.ModelServingConfigTrafficConfig;
}

export interface ModelServingConfigServedModel {
    /**
     * The name of the model in Databricks Model Registry to be served.
     */
    modelName: string;
    /**
     * The version of the model in Databricks Model Registry to be served.
     */
    modelVersion: string;
    /**
     * The name of a served model. It must be unique across an endpoint. If not specified, this field will default to `modelname-modelversion`. A served model name can consist of alphanumeric characters, dashes, and underscores.
     */
    name: string;
    /**
     * Whether the compute resources for the served model should scale down to zero. If scale-to-zero is enabled, the lower bound of the provisioned concurrency for each workload size will be 0. The default value is `true`.
     */
    scaleToZeroEnabled?: boolean;
    /**
     * The workload size of the served model. The workload size corresponds to a range of provisioned concurrency that the compute will autoscale between. A single unit of provisioned concurrency can process one request at a time. Valid workload sizes are "Small" (4 - 4 provisioned concurrency), "Medium" (8 - 16 provisioned concurrency), and "Large" (16 - 64 provisioned concurrency).
     */
    workloadSize: string;
}

export interface ModelServingConfigTrafficConfig {
    /**
     * Each block represents a route that defines traffic to each served model. Each `servedModels` block needs to have a corresponding `routes` block
     */
    routes?: outputs.ModelServingConfigTrafficConfigRoute[];
}

export interface ModelServingConfigTrafficConfigRoute {
    /**
     * The name of the served model this route configures traffic for. This needs to match the name of a `servedModels` block
     */
    servedModelName: string;
    /**
     * The percentage of endpoint traffic to send to this route. It must be an integer between 0 and 100 inclusive.
     */
    trafficPercentage: number;
}

export interface MountAbfs {
    clientId: string;
    clientSecretKey: string;
    clientSecretScope: string;
    containerName: string;
    directory?: string;
    initializeFileSystem: boolean;
    storageAccountName: string;
    tenantId: string;
}

export interface MountAdl {
    clientId: string;
    clientSecretKey: string;
    clientSecretScope: string;
    directory?: string;
    sparkConfPrefix?: string;
    storageResourceName: string;
    tenantId: string;
}

export interface MountGs {
    bucketName: string;
    serviceAccount?: string;
}

export interface MountS3 {
    bucketName: string;
    instanceProfile?: string;
}

export interface MountWasb {
    authType: string;
    containerName: string;
    directory?: string;
    storageAccountName: string;
    tokenSecretKey: string;
    tokenSecretScope: string;
}

export interface MwsCustomerManagedKeysAwsKeyInfo {
    /**
     * The AWS KMS key alias.
     */
    keyAlias: string;
    /**
     * The AWS KMS key's Amazon Resource Name (ARN).
     */
    keyArn: string;
    /**
     * (Computed) The AWS region in which KMS key is deployed to. This is not required.
     */
    keyRegion: string;
}

export interface MwsCustomerManagedKeysGcpKeyInfo {
    kmsKeyId: string;
}

export interface MwsNetworksErrorMessage {
    errorMessage?: string;
    errorType?: string;
}

export interface MwsNetworksGcpNetworkInfo {
    /**
     * The Google Cloud project ID of the VPC network.
     */
    networkProjectId: string;
    /**
     * The name of the secondary IP range for pods. A Databricks-managed GKE cluster uses this IP range for its pods. This secondary IP range can only be used by one workspace.
     */
    podIpRangeName: string;
    /**
     * The name of the secondary IP range for services. A Databricks-managed GKE cluster uses this IP range for its services. This secondary IP range can only be used by one workspace.
     */
    serviceIpRangeName: string;
    /**
     * The ID of the subnet associated with this network.
     */
    subnetId: string;
    /**
     * The Google Cloud region of the workspace data plane. For example, `us-east4`.
     */
    subnetRegion: string;
    /**
     * The ID of the VPC associated with this network. VPC IDs can be used in multiple network configurations.
     */
    vpcId: string;
}

export interface MwsNetworksVpcEndpoints {
    dataplaneRelays: string[];
    restApis: string[];
}

export interface MwsVpcEndpointGcpVpcEndpointInfo {
    /**
     * Region of the PSC endpoint.
     */
    endpointRegion: string;
    /**
     * The Google Cloud project ID of the VPC network where the PSC connection resides.
     */
    projectId: string;
    /**
     * The unique ID of this PSC connection.
     */
    pscConnectionId: string;
    /**
     * The name of the PSC endpoint in the Google Cloud project.
     */
    pscEndpointName: string;
    /**
     * The service attachment this PSC connection connects to.
     */
    serviceAttachmentId: string;
}

export interface MwsWorkspacesCloudResourceContainer {
    /**
     * A block that consists of the following field:
     */
    gcp: outputs.MwsWorkspacesCloudResourceContainerGcp;
}

export interface MwsWorkspacesCloudResourceContainerGcp {
    /**
     * The Google Cloud project ID, which the workspace uses to instantiate cloud resources for your workspace.
     */
    projectId: string;
}

export interface MwsWorkspacesExternalCustomerInfo {
    authoritativeUserEmail: string;
    authoritativeUserFullName: string;
    customerName: string;
}

export interface MwsWorkspacesGcpManagedNetworkConfig {
    gkeClusterPodIpRange: string;
    gkeClusterServiceIpRange: string;
    subnetCidr: string;
}

export interface MwsWorkspacesGkeConfig {
    /**
     * Specifies the network connectivity types for the GKE nodes and the GKE master network. Possible values are: `PRIVATE_NODE_PUBLIC_MASTER`, `PUBLIC_NODE_PUBLIC_MASTER`.
     */
    connectivityType: string;
    /**
     * The IP range from which to allocate GKE cluster master resources. This field will be ignored if GKE private cluster is not enabled. It must be exactly as big as `/28`.
     */
    masterIpRange: string;
}

export interface MwsWorkspacesToken {
    comment?: string;
    lifetimeSeconds?: number;
    tokenId: string;
    tokenValue: string;
}

export interface PermissionsAccessControl {
    /**
     * name of the group. We recommend setting permissions on groups.
     */
    groupName?: string;
    /**
     * permission level according to specific resource. See examples above for the reference.
     */
    permissionLevel: string;
    /**
     * Application ID of the service_principal.
     */
    servicePrincipalName?: string;
    /**
     * name of the user.
     */
    userName?: string;
}

export interface PipelineCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.PipelineClusterAutoscale;
    awsAttributes?: outputs.PipelineClusterAwsAttributes;
    azureAttributes?: outputs.PipelineClusterAzureAttributes;
    clusterLogConf?: outputs.PipelineClusterClusterLogConf;
    customTags?: {[key: string]: any};
    driverInstancePoolId?: string;
    driverNodeTypeId: string;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.PipelineClusterGcpAttributes;
    initScripts?: outputs.PipelineClusterInitScript[];
    instancePoolId?: string;
    label?: string;
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sshPublicKeys?: string[];
}

export interface PipelineClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
    mode?: string;
}

export interface PipelineClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface PipelineClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface PipelineClusterClusterLogConf {
    dbfs?: outputs.PipelineClusterClusterLogConfDbfs;
    s3?: outputs.PipelineClusterClusterLogConfS3;
}

export interface PipelineClusterClusterLogConfDbfs {
    destination: string;
}

export interface PipelineClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface PipelineClusterGcpAttributes {
    availability?: string;
    googleServiceAccount?: string;
    zoneId?: string;
}

export interface PipelineClusterInitScript {
    abfss?: outputs.PipelineClusterInitScriptAbfss;
    dbfs?: outputs.PipelineClusterInitScriptDbfs;
    file?: outputs.PipelineClusterInitScriptFile;
    gcs?: outputs.PipelineClusterInitScriptGcs;
    s3?: outputs.PipelineClusterInitScriptS3;
}

export interface PipelineClusterInitScriptAbfss {
    destination?: string;
}

export interface PipelineClusterInitScriptDbfs {
    destination: string;
}

export interface PipelineClusterInitScriptFile {
    destination?: string;
}

export interface PipelineClusterInitScriptGcs {
    destination?: string;
}

export interface PipelineClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface PipelineFilters {
    excludes?: string[];
    includes?: string[];
}

export interface PipelineLibrary {
    file?: outputs.PipelineLibraryFile;
    jar?: string;
    maven?: outputs.PipelineLibraryMaven;
    notebook?: outputs.PipelineLibraryNotebook;
    whl?: string;
}

export interface PipelineLibraryFile {
    path: string;
}

export interface PipelineLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface PipelineLibraryNotebook {
    path: string;
}

export interface RecipientIpAccessList {
    /**
     * Allowed IP Addresses in CIDR notation. Limit of 100.
     */
    allowedIpAddresses: string[];
}

export interface RecipientToken {
    activationUrl: string;
    createdAt: number;
    createdBy: string;
    expirationTime: number;
    id: string;
    updatedAt: number;
    updatedBy: string;
}

export interface RepoSparseCheckout {
    patterns: string[];
}

export interface SecretScopeKeyvaultMetadata {
    dnsName: string;
    resourceId: string;
}

export interface ShareObject {
    addedAt: number;
    addedBy: string;
    /**
     * Whether to enable Change Data Feed (cdf) on the shared object. When this field is set, field `historyDataSharingStatus` can not be set.
     */
    cdfEnabled?: boolean;
    /**
     * Description about the object.
     */
    comment?: string;
    /**
     * Type of the object, currently only `TABLE` is allowed.
     */
    dataObjectType: string;
    /**
     * Whether to enable history sharing, one of: `ENABLED`, `DISABLED`. When a table has history sharing enabled, recipients can query table data by version, starting from the current table version. If not specified, clients can only query starting from the version of the object at the time it was added to the share. *NOTE*: The startVersion should be less than or equal the current version of the object. When this field is set, field `cdfEnabled` can not be set.
     */
    historyDataSharingStatus?: string;
    /**
     * Full name of the object, e.g. `catalog.schema.name` for a table.
     */
    name: string;
    partitions?: outputs.ShareObjectPartition[];
    /**
     * A user-provided new name for the data object within the share. If this new name is not provided, the object's original name will be used as the `sharedAs` name. The `sharedAs` name must be unique within a Share.
     */
    sharedAs?: string;
    /**
     * The start version associated with the object for cdf. This allows data providers to control the lowest object version that is accessible by clients.
     */
    startVersion?: number;
    /**
     * Status of the object, one of: `ACTIVE`, `PERMISSION_DENIED`.
     */
    status: string;
}

export interface ShareObjectPartition {
    values: outputs.ShareObjectPartitionValue[];
}

export interface ShareObjectPartitionValue {
    /**
     * The name of the partition column.
     */
    name: string;
    /**
     * The operator to apply for the value, one of: `EQUAL`, `LIKE`
     */
    op: string;
    /**
     * The key of a Delta Sharing recipient's property. For example `databricks-account-id`. When this field is set, field `value` can not be set.
     */
    recipientPropertyKey?: string;
    /**
     * The value of the partition column. When this value is not set, it means null value. When this field is set, field `recipientPropertyKey` can not be set.
     */
    value?: string;
}

export interface SqlAlertOptions {
    /**
     * Name of column in the query result to compare in alert evaluation.
     */
    column: string;
    /**
     * Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/sql/user/alerts/index.html) for custom templating instructions.
     */
    customBody?: string;
    /**
     * Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/sql/user/alerts/index.html) for custom templating instructions.
     */
    customSubject?: string;
    /**
     * Whether or not the alert is muted. If an alert is muted, it will not notify users and alert destinations when triggered.
     */
    muted?: boolean;
    /**
     * Operator used to compare in alert evaluation. (Enum: `>`, `>=`, `<`, `<=`, `==`, `!=`)
     */
    op: string;
    /**
     * Value used to compare in alert evaluation.
     */
    value: string;
}

export interface SqlEndpointChannel {
    /**
     * Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
     */
    name?: string;
}

export interface SqlEndpointOdbcParams {
    host?: string;
    hostname?: string;
    path: string;
    port: number;
    protocol: string;
}

export interface SqlEndpointTags {
    customTags: outputs.SqlEndpointTagsCustomTag[];
}

export interface SqlEndpointTagsCustomTag {
    key: string;
    value: string;
}

export interface SqlPermissionsPrivilegeAssignment {
    /**
     * `displayName` for a databricks.Group or databricks_user, `applicationId` for a databricks_service_principal.
     */
    principal: string;
    /**
     * set of available privilege names in upper case.
     */
    privileges: string[];
}

export interface SqlQueryParameter {
    date?: outputs.SqlQueryParameterDate;
    dateRange?: outputs.SqlQueryParameterDateRange;
    datetime?: outputs.SqlQueryParameterDatetime;
    datetimeRange?: outputs.SqlQueryParameterDatetimeRange;
    datetimesec?: outputs.SqlQueryParameterDatetimesec;
    datetimesecRange?: outputs.SqlQueryParameterDatetimesecRange;
    enum?: outputs.SqlQueryParameterEnum;
    name: string;
    number?: outputs.SqlQueryParameterNumber;
    query?: outputs.SqlQueryParameterQuery;
    text?: outputs.SqlQueryParameterText;
    title?: string;
}

export interface SqlQueryParameterDate {
    value: string;
}

export interface SqlQueryParameterDateRange {
    range?: outputs.SqlQueryParameterDateRangeRange;
    value?: string;
}

export interface SqlQueryParameterDateRangeRange {
    end: string;
    start: string;
}

export interface SqlQueryParameterDatetime {
    value: string;
}

export interface SqlQueryParameterDatetimeRange {
    range?: outputs.SqlQueryParameterDatetimeRangeRange;
    value?: string;
}

export interface SqlQueryParameterDatetimeRangeRange {
    end: string;
    start: string;
}

export interface SqlQueryParameterDatetimesec {
    value: string;
}

export interface SqlQueryParameterDatetimesecRange {
    range?: outputs.SqlQueryParameterDatetimesecRangeRange;
    value?: string;
}

export interface SqlQueryParameterDatetimesecRangeRange {
    end: string;
    start: string;
}

export interface SqlQueryParameterEnum {
    multiple?: outputs.SqlQueryParameterEnumMultiple;
    options: string[];
    value?: string;
    values?: string[];
}

export interface SqlQueryParameterEnumMultiple {
    prefix: string;
    separator: string;
    suffix: string;
}

export interface SqlQueryParameterNumber {
    value: number;
}

export interface SqlQueryParameterQuery {
    multiple?: outputs.SqlQueryParameterQueryMultiple;
    queryId: string;
    value?: string;
    values?: string[];
}

export interface SqlQueryParameterQueryMultiple {
    prefix: string;
    separator: string;
    suffix: string;
}

export interface SqlQueryParameterText {
    value: string;
}

export interface SqlQuerySchedule {
    continuous?: outputs.SqlQueryScheduleContinuous;
    daily?: outputs.SqlQueryScheduleDaily;
    weekly?: outputs.SqlQueryScheduleWeekly;
}

export interface SqlQueryScheduleContinuous {
    intervalSeconds: number;
    untilDate?: string;
}

export interface SqlQueryScheduleDaily {
    intervalDays: number;
    timeOfDay: string;
    untilDate?: string;
}

export interface SqlQueryScheduleWeekly {
    dayOfWeek: string;
    intervalWeeks: number;
    timeOfDay: string;
    untilDate?: string;
}

export interface SqlWidgetParameter {
    mapTo?: string;
    name: string;
    title?: string;
    type: string;
    value?: string;
    values?: string[];
}

export interface SqlWidgetPosition {
    autoHeight?: boolean;
    posX?: number;
    posY?: number;
    sizeX: number;
    sizeY: number;
}

export interface StorageCredentialAwsIamRole {
    /**
     * The Amazon Resource Name (ARN) of the AWS IAM role for S3 data access, of the form `arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF`
     */
    roleArn: string;
}

export interface StorageCredentialAzureManagedIdentity {
    /**
     * The Resource ID of the Azure Databricks Access Connector resource, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.Databricks/accessConnectors/connector-name`
     */
    accessConnectorId: string;
}

export interface StorageCredentialAzureServicePrincipal {
    /**
     * The application ID of the application registration within the referenced AAD tenant
     */
    applicationId: string;
    /**
     * The client secret generated for the above app ID in AAD. **This field is redacted on output**
     */
    clientSecret: string;
    /**
     * The directory ID corresponding to the Azure Active Directory (AAD) tenant of the application
     */
    directoryId: string;
}

export interface StorageCredentialDatabricksGcpServiceAccount {
    /**
     * The email of the GCP service account created, to be granted access to relevant buckets.
     */
    email: string;
}

export interface StorageCredentialGcpServiceAccountKey {
    /**
     * The email of the GCP service account created, to be granted access to relevant buckets.
     */
    email: string;
    privateKey: string;
    privateKeyId: string;
}

export interface TableColumn {
    comment?: string;
    name: string;
    nullable?: boolean;
    partitionIndex?: number;
    position: number;
    typeIntervalType?: string;
    typeJson?: string;
    typeName: string;
    typePrecision?: number;
    typeScale?: number;
    typeText: string;
}

