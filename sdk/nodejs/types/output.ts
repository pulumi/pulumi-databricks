// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessControlRuleSetGrantRule {
    principals?: string[];
    role: string;
}

export interface AlertCondition {
    emptyResultState?: string;
    op: string;
    operand: outputs.AlertConditionOperand;
    threshold?: outputs.AlertConditionThreshold;
}

export interface AlertConditionOperand {
    column: outputs.AlertConditionOperandColumn;
}

export interface AlertConditionOperandColumn {
    name: string;
}

export interface AlertConditionThreshold {
    value: outputs.AlertConditionThresholdValue;
}

export interface AlertConditionThresholdValue {
    boolValue?: boolean;
    doubleValue?: number;
    stringValue?: string;
}

export interface AppActiveDeployment {
    createTime: string;
    creator: string;
    deploymentArtifacts: outputs.AppActiveDeploymentDeploymentArtifacts;
    deploymentId?: string;
    mode?: string;
    sourceCodePath?: string;
    status: outputs.AppActiveDeploymentStatus;
    updateTime: string;
}

export interface AppActiveDeploymentDeploymentArtifacts {
    sourceCodePath?: string;
}

export interface AppActiveDeploymentStatus {
    message: string;
    state: string;
}

export interface AppAppStatus {
    message: string;
    state: string;
}

export interface AppComputeStatus {
    message: string;
    state: string;
}

export interface AppPendingDeployment {
    createTime: string;
    creator: string;
    deploymentArtifacts: outputs.AppPendingDeploymentDeploymentArtifacts;
    deploymentId?: string;
    mode?: string;
    sourceCodePath?: string;
    status: outputs.AppPendingDeploymentStatus;
    updateTime: string;
}

export interface AppPendingDeploymentDeploymentArtifacts {
    sourceCodePath?: string;
}

export interface AppPendingDeploymentStatus {
    message: string;
    state: string;
}

export interface AppResource {
    description?: string;
    job?: outputs.AppResourceJob;
    name: string;
    secret?: outputs.AppResourceSecret;
    servingEndpoint?: outputs.AppResourceServingEndpoint;
    sqlWarehouse?: outputs.AppResourceSqlWarehouse;
}

export interface AppResourceJob {
    id: string;
    permission: string;
}

export interface AppResourceSecret {
    key: string;
    permission: string;
    scope: string;
}

export interface AppResourceServingEndpoint {
    name: string;
    permission: string;
}

export interface AppResourceSqlWarehouse {
    id: string;
    permission: string;
}

export interface ArtifactAllowlistArtifactMatcher {
    artifact: string;
    matchType: string;
}

export interface AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspace {
    canToggle?: boolean;
    enabled: boolean;
    enablementDetails: outputs.AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceEnablementDetails;
    maintenanceWindow?: outputs.AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceMaintenanceWindow;
    restartEvenIfNoUpdatesAvailable?: boolean;
}

export interface AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceEnablementDetails {
    forcedForComplianceMode?: boolean;
    unavailableForDisabledEntitlement?: boolean;
    unavailableForNonEnterpriseTier?: boolean;
}

export interface AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceMaintenanceWindow {
    weekDayBasedSchedule?: outputs.AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceMaintenanceWindowWeekDayBasedSchedule;
}

export interface AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceMaintenanceWindowWeekDayBasedSchedule {
    dayOfWeek: string;
    frequency: string;
    windowStartTime?: outputs.AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceMaintenanceWindowWeekDayBasedScheduleWindowStartTime;
}

export interface AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceMaintenanceWindowWeekDayBasedScheduleWindowStartTime {
    hours: number;
    minutes: number;
}

export interface BudgetAlertConfiguration {
    actionConfigurations?: outputs.BudgetAlertConfigurationActionConfiguration[];
    alertConfigurationId: string;
    quantityThreshold?: string;
    quantityType?: string;
    timePeriod?: string;
    triggerType?: string;
}

export interface BudgetAlertConfigurationActionConfiguration {
    actionConfigurationId: string;
    actionType?: string;
    target?: string;
}

export interface BudgetFilter {
    tags?: outputs.BudgetFilterTag[];
    workspaceId?: outputs.BudgetFilterWorkspaceId;
}

export interface BudgetFilterTag {
    key?: string;
    value?: outputs.BudgetFilterTagValue;
}

export interface BudgetFilterTagValue {
    operator?: string;
    values?: string[];
}

export interface BudgetFilterWorkspaceId {
    operator?: string;
    values?: number[];
}

export interface ClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface ClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface ClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: outputs.ClusterAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface ClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface ClusterClusterLogConf {
    dbfs?: outputs.ClusterClusterLogConfDbfs;
    s3?: outputs.ClusterClusterLogConfS3;
}

export interface ClusterClusterLogConfDbfs {
    destination: string;
}

export interface ClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface ClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.ClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface ClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface ClusterDockerImage {
    basicAuth?: outputs.ClusterDockerImageBasicAuth;
    url: string;
}

export interface ClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface ClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface ClusterInitScript {
    abfss?: outputs.ClusterInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: outputs.ClusterInitScriptDbfs;
    file?: outputs.ClusterInitScriptFile;
    gcs?: outputs.ClusterInitScriptGcs;
    s3?: outputs.ClusterInitScriptS3;
    volumes?: outputs.ClusterInitScriptVolumes;
    workspace?: outputs.ClusterInitScriptWorkspace;
}

export interface ClusterInitScriptAbfss {
    destination: string;
}

export interface ClusterInitScriptDbfs {
    destination: string;
}

export interface ClusterInitScriptFile {
    destination: string;
}

export interface ClusterInitScriptGcs {
    destination: string;
}

export interface ClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface ClusterInitScriptVolumes {
    destination: string;
}

export interface ClusterInitScriptWorkspace {
    destination: string;
}

export interface ClusterLibrary {
    cran?: outputs.ClusterLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.ClusterLibraryMaven;
    pypi?: outputs.ClusterLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface ClusterLibraryCran {
    package: string;
    repo?: string;
}

export interface ClusterLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface ClusterLibraryPypi {
    package: string;
    repo?: string;
}

export interface ClusterPolicyLibrary {
    cran?: outputs.ClusterPolicyLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.ClusterPolicyLibraryMaven;
    pypi?: outputs.ClusterPolicyLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface ClusterPolicyLibraryCran {
    package: string;
    repo?: string;
}

export interface ClusterPolicyLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface ClusterPolicyLibraryPypi {
    package: string;
    repo?: string;
}

export interface ClusterWorkloadType {
    clients: outputs.ClusterWorkloadTypeClients;
}

export interface ClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface ComplianceSecurityProfileWorkspaceSettingComplianceSecurityProfileWorkspace {
    complianceStandards: string[];
    isEnabled: boolean;
}

export interface CredentialAwsIamRole {
    externalId: string;
    roleArn?: string;
    unityCatalogIamArn: string;
}

export interface CredentialAzureManagedIdentity {
    accessConnectorId: string;
    credentialId: string;
    managedIdentityId?: string;
}

export interface CredentialAzureServicePrincipal {
    applicationId: string;
    clientSecret: string;
    directoryId: string;
}

export interface CredentialDatabricksGcpServiceAccount {
    credentialId: string;
    email: string;
    privateKeyId: string;
}

export interface CustomAppIntegrationTokenAccessPolicy {
    accessTokenTtlInMinutes?: number;
    refreshTokenTtlInMinutes?: number;
}

export interface DefaultNamespaceSettingNamespace {
    value?: string;
}

export interface EnhancedSecurityMonitoringWorkspaceSettingEnhancedSecurityMonitoringWorkspace {
    isEnabled: boolean;
}

export interface ExternalLocationEncryptionDetails {
    sseEncryptionDetails?: outputs.ExternalLocationEncryptionDetailsSseEncryptionDetails;
}

export interface ExternalLocationEncryptionDetailsSseEncryptionDetails {
    algorithm?: string;
    awsKmsKeyArn?: string;
}

export interface GetAppApp {
    activeDeployment: outputs.GetAppAppActiveDeployment;
    appStatus: outputs.GetAppAppAppStatus;
    computeStatus: outputs.GetAppAppComputeStatus;
    createTime: string;
    creator: string;
    defaultSourceCodePath: string;
    description?: string;
    name: string;
    pendingDeployment: outputs.GetAppAppPendingDeployment;
    resources?: outputs.GetAppAppResource[];
    servicePrincipalClientId: string;
    servicePrincipalId: number;
    servicePrincipalName: string;
    updateTime: string;
    updater: string;
    url: string;
}

export interface GetAppAppActiveDeployment {
    createTime: string;
    creator: string;
    deploymentArtifacts: outputs.GetAppAppActiveDeploymentDeploymentArtifacts;
    deploymentId?: string;
    mode?: string;
    sourceCodePath?: string;
    status: outputs.GetAppAppActiveDeploymentStatus;
    updateTime: string;
}

export interface GetAppAppActiveDeploymentDeploymentArtifacts {
    sourceCodePath?: string;
}

export interface GetAppAppActiveDeploymentStatus {
    message: string;
    state: string;
}

export interface GetAppAppAppStatus {
    message: string;
    state: string;
}

export interface GetAppAppComputeStatus {
    message: string;
    state: string;
}

export interface GetAppAppPendingDeployment {
    createTime: string;
    creator: string;
    deploymentArtifacts: outputs.GetAppAppPendingDeploymentDeploymentArtifacts;
    deploymentId?: string;
    mode?: string;
    sourceCodePath?: string;
    status: outputs.GetAppAppPendingDeploymentStatus;
    updateTime: string;
}

export interface GetAppAppPendingDeploymentDeploymentArtifacts {
    sourceCodePath?: string;
}

export interface GetAppAppPendingDeploymentStatus {
    message: string;
    state: string;
}

export interface GetAppAppResource {
    description?: string;
    job?: outputs.GetAppAppResourceJob;
    name: string;
    secret?: outputs.GetAppAppResourceSecret;
    servingEndpoint?: outputs.GetAppAppResourceServingEndpoint;
    sqlWarehouse?: outputs.GetAppAppResourceSqlWarehouse;
}

export interface GetAppAppResourceJob {
    id: string;
    permission: string;
}

export interface GetAppAppResourceSecret {
    key: string;
    permission: string;
    scope: string;
}

export interface GetAppAppResourceServingEndpoint {
    name: string;
    permission: string;
}

export interface GetAppAppResourceSqlWarehouse {
    id: string;
    permission: string;
}

export interface GetAppsApp {
    activeDeployment: outputs.GetAppsAppActiveDeployment;
    appStatus: outputs.GetAppsAppAppStatus;
    computeStatus: outputs.GetAppsAppComputeStatus;
    createTime: string;
    creator: string;
    defaultSourceCodePath: string;
    description?: string;
    name: string;
    pendingDeployment: outputs.GetAppsAppPendingDeployment;
    resources?: outputs.GetAppsAppResource[];
    servicePrincipalClientId: string;
    servicePrincipalId: number;
    servicePrincipalName: string;
    updateTime: string;
    updater: string;
    url: string;
}

export interface GetAppsAppActiveDeployment {
    createTime: string;
    creator: string;
    deploymentArtifacts: outputs.GetAppsAppActiveDeploymentDeploymentArtifacts;
    deploymentId?: string;
    mode?: string;
    sourceCodePath?: string;
    status: outputs.GetAppsAppActiveDeploymentStatus;
    updateTime: string;
}

export interface GetAppsAppActiveDeploymentDeploymentArtifacts {
    sourceCodePath?: string;
}

export interface GetAppsAppActiveDeploymentStatus {
    message: string;
    state: string;
}

export interface GetAppsAppAppStatus {
    message: string;
    state: string;
}

export interface GetAppsAppComputeStatus {
    message: string;
    state: string;
}

export interface GetAppsAppPendingDeployment {
    createTime: string;
    creator: string;
    deploymentArtifacts: outputs.GetAppsAppPendingDeploymentDeploymentArtifacts;
    deploymentId?: string;
    mode?: string;
    sourceCodePath?: string;
    status: outputs.GetAppsAppPendingDeploymentStatus;
    updateTime: string;
}

export interface GetAppsAppPendingDeploymentDeploymentArtifacts {
    sourceCodePath?: string;
}

export interface GetAppsAppPendingDeploymentStatus {
    message: string;
    state: string;
}

export interface GetAppsAppResource {
    description?: string;
    job?: outputs.GetAppsAppResourceJob;
    name: string;
    secret?: outputs.GetAppsAppResourceSecret;
    servingEndpoint?: outputs.GetAppsAppResourceServingEndpoint;
    sqlWarehouse?: outputs.GetAppsAppResourceSqlWarehouse;
}

export interface GetAppsAppResourceJob {
    id: string;
    permission: string;
}

export interface GetAppsAppResourceSecret {
    key: string;
    permission: string;
    scope: string;
}

export interface GetAppsAppResourceServingEndpoint {
    name: string;
    permission: string;
}

export interface GetAppsAppResourceSqlWarehouse {
    id: string;
    permission: string;
}

export interface GetCatalogCatalogInfo {
    browseOnly?: boolean;
    catalogType?: string;
    comment?: string;
    connectionName?: string;
    createdAt?: number;
    createdBy?: string;
    effectivePredictiveOptimizationFlag?: outputs.GetCatalogCatalogInfoEffectivePredictiveOptimizationFlag;
    enablePredictiveOptimization?: string;
    fullName?: string;
    isolationMode?: string;
    metastoreId?: string;
    name?: string;
    options?: {[key: string]: string};
    owner?: string;
    properties?: {[key: string]: string};
    providerName?: string;
    provisioningInfo?: outputs.GetCatalogCatalogInfoProvisioningInfo;
    securableKind?: string;
    securableType?: string;
    shareName?: string;
    storageLocation?: string;
    storageRoot?: string;
    updatedAt?: number;
    updatedBy?: string;
}

export interface GetCatalogCatalogInfoEffectivePredictiveOptimizationFlag {
    inheritedFromName?: string;
    inheritedFromType?: string;
    value: string;
}

export interface GetCatalogCatalogInfoProvisioningInfo {
    state?: string;
}

export interface GetClusterClusterInfo {
    autoscale?: outputs.GetClusterClusterInfoAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetClusterClusterInfoAwsAttributes;
    azureAttributes?: outputs.GetClusterClusterInfoAzureAttributes;
    clusterCores?: number;
    clusterId?: string;
    clusterLogConf?: outputs.GetClusterClusterInfoClusterLogConf;
    clusterLogStatus?: outputs.GetClusterClusterInfoClusterLogStatus;
    clusterMemoryMb?: number;
    clusterName?: string;
    clusterSource?: string;
    creatorUserName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    defaultTags?: {[key: string]: string};
    dockerImage?: outputs.GetClusterClusterInfoDockerImage;
    driver?: outputs.GetClusterClusterInfoDriver;
    driverInstancePoolId?: string;
    driverNodeTypeId?: string;
    enableElasticDisk?: boolean;
    enableLocalDiskEncryption?: boolean;
    executors?: outputs.GetClusterClusterInfoExecutor[];
    gcpAttributes?: outputs.GetClusterClusterInfoGcpAttributes;
    initScripts?: outputs.GetClusterClusterInfoInitScript[];
    instancePoolId?: string;
    isSingleNode?: boolean;
    jdbcPort?: number;
    kind?: string;
    lastRestartedTime?: number;
    lastStateLossTime?: number;
    nodeTypeId?: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkContextId?: number;
    sparkEnvVars?: {[key: string]: string};
    sparkVersion?: string;
    spec?: outputs.GetClusterClusterInfoSpec;
    sshPublicKeys?: string[];
    startTime?: number;
    state?: string;
    stateMessage?: string;
    terminatedTime?: number;
    terminationReason?: outputs.GetClusterClusterInfoTerminationReason;
    useMlRuntime?: boolean;
    workloadType?: outputs.GetClusterClusterInfoWorkloadType;
}

export interface GetClusterClusterInfoAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetClusterClusterInfoAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetClusterClusterInfoAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: outputs.GetClusterClusterInfoAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface GetClusterClusterInfoAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface GetClusterClusterInfoClusterLogConf {
    dbfs?: outputs.GetClusterClusterInfoClusterLogConfDbfs;
    s3?: outputs.GetClusterClusterInfoClusterLogConfS3;
}

export interface GetClusterClusterInfoClusterLogConfDbfs {
    destination: string;
}

export interface GetClusterClusterInfoClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoClusterLogStatus {
    lastAttempted?: number;
    lastException?: string;
}

export interface GetClusterClusterInfoDockerImage {
    basicAuth?: outputs.GetClusterClusterInfoDockerImageBasicAuth;
    url?: string;
}

export interface GetClusterClusterInfoDockerImageBasicAuth {
    password?: string;
    username?: string;
}

export interface GetClusterClusterInfoDriver {
    hostPrivateIp?: string;
    instanceId?: string;
    nodeAwsAttributes?: outputs.GetClusterClusterInfoDriverNodeAwsAttributes;
    nodeId?: string;
    privateIp?: string;
    publicDns?: string;
    startTimestamp?: number;
}

export interface GetClusterClusterInfoDriverNodeAwsAttributes {
    isSpot?: boolean;
}

export interface GetClusterClusterInfoExecutor {
    hostPrivateIp?: string;
    instanceId?: string;
    nodeAwsAttributes?: outputs.GetClusterClusterInfoExecutorNodeAwsAttributes;
    nodeId?: string;
    privateIp?: string;
    publicDns?: string;
    startTimestamp?: number;
}

export interface GetClusterClusterInfoExecutorNodeAwsAttributes {
    isSpot?: boolean;
}

export interface GetClusterClusterInfoGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetClusterClusterInfoInitScript {
    abfss?: outputs.GetClusterClusterInfoInitScriptAbfss;
    dbfs?: outputs.GetClusterClusterInfoInitScriptDbfs;
    file?: outputs.GetClusterClusterInfoInitScriptFile;
    gcs?: outputs.GetClusterClusterInfoInitScriptGcs;
    s3?: outputs.GetClusterClusterInfoInitScriptS3;
    volumes?: outputs.GetClusterClusterInfoInitScriptVolumes;
    workspace?: outputs.GetClusterClusterInfoInitScriptWorkspace;
}

export interface GetClusterClusterInfoInitScriptAbfss {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptDbfs {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptFile {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptGcs {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoInitScriptVolumes {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptWorkspace {
    destination: string;
}

export interface GetClusterClusterInfoSpec {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.GetClusterClusterInfoSpecAutoscale;
    awsAttributes?: outputs.GetClusterClusterInfoSpecAwsAttributes;
    azureAttributes?: outputs.GetClusterClusterInfoSpecAzureAttributes;
    clusterId: string;
    clusterLogConf?: outputs.GetClusterClusterInfoSpecClusterLogConf;
    clusterMountInfos?: outputs.GetClusterClusterInfoSpecClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: outputs.GetClusterClusterInfoSpecDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.GetClusterClusterInfoSpecGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.GetClusterClusterInfoSpecInitScript[];
    instancePoolId?: string;
    isSingleNode?: boolean;
    kind?: string;
    libraries?: outputs.GetClusterClusterInfoSpecLibrary[];
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    useMlRuntime?: boolean;
    workloadType?: outputs.GetClusterClusterInfoSpecWorkloadType;
}

export interface GetClusterClusterInfoSpecAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetClusterClusterInfoSpecAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetClusterClusterInfoSpecAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: outputs.GetClusterClusterInfoSpecAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface GetClusterClusterInfoSpecAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface GetClusterClusterInfoSpecClusterLogConf {
    dbfs?: outputs.GetClusterClusterInfoSpecClusterLogConfDbfs;
    s3?: outputs.GetClusterClusterInfoSpecClusterLogConfS3;
}

export interface GetClusterClusterInfoSpecClusterLogConfDbfs {
    destination: string;
}

export interface GetClusterClusterInfoSpecClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoSpecClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.GetClusterClusterInfoSpecClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetClusterClusterInfoSpecClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetClusterClusterInfoSpecDockerImage {
    basicAuth?: outputs.GetClusterClusterInfoSpecDockerImageBasicAuth;
    url: string;
}

export interface GetClusterClusterInfoSpecDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetClusterClusterInfoSpecGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetClusterClusterInfoSpecInitScript {
    abfss?: outputs.GetClusterClusterInfoSpecInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: outputs.GetClusterClusterInfoSpecInitScriptDbfs;
    file?: outputs.GetClusterClusterInfoSpecInitScriptFile;
    gcs?: outputs.GetClusterClusterInfoSpecInitScriptGcs;
    s3?: outputs.GetClusterClusterInfoSpecInitScriptS3;
    volumes?: outputs.GetClusterClusterInfoSpecInitScriptVolumes;
    workspace?: outputs.GetClusterClusterInfoSpecInitScriptWorkspace;
}

export interface GetClusterClusterInfoSpecInitScriptAbfss {
    destination: string;
}

export interface GetClusterClusterInfoSpecInitScriptDbfs {
    destination: string;
}

export interface GetClusterClusterInfoSpecInitScriptFile {
    destination: string;
}

export interface GetClusterClusterInfoSpecInitScriptGcs {
    destination: string;
}

export interface GetClusterClusterInfoSpecInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoSpecInitScriptVolumes {
    destination: string;
}

export interface GetClusterClusterInfoSpecInitScriptWorkspace {
    destination: string;
}

export interface GetClusterClusterInfoSpecLibrary {
    cran?: outputs.GetClusterClusterInfoSpecLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.GetClusterClusterInfoSpecLibraryMaven;
    pypi?: outputs.GetClusterClusterInfoSpecLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface GetClusterClusterInfoSpecLibraryCran {
    package: string;
    repo?: string;
}

export interface GetClusterClusterInfoSpecLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface GetClusterClusterInfoSpecLibraryPypi {
    package: string;
    repo?: string;
}

export interface GetClusterClusterInfoSpecWorkloadType {
    clients: outputs.GetClusterClusterInfoSpecWorkloadTypeClients;
}

export interface GetClusterClusterInfoSpecWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetClusterClusterInfoTerminationReason {
    code?: string;
    parameters?: {[key: string]: string};
    type?: string;
}

export interface GetClusterClusterInfoWorkloadType {
    clients: outputs.GetClusterClusterInfoWorkloadTypeClients;
}

export interface GetClusterClusterInfoWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetClustersFilterBy {
    clusterSources?: string[];
    clusterStates?: string[];
    isPinned?: boolean;
    policyId?: string;
}

export interface GetCurrentMetastoreMetastoreInfo {
    cloud?: string;
    createdAt?: number;
    createdBy?: string;
    defaultDataAccessConfigId?: string;
    deltaSharingOrganizationName?: string;
    deltaSharingRecipientTokenLifetimeInSeconds?: number;
    deltaSharingScope?: string;
    externalAccessEnabled?: boolean;
    globalMetastoreId?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    privilegeModelVersion?: string;
    region?: string;
    storageRoot?: string;
    storageRootCredentialId?: string;
    storageRootCredentialName?: string;
    updatedAt?: number;
    updatedBy?: string;
}

export interface GetDbfsFilePathsPathList {
    fileSize?: number;
    path?: string;
}

export interface GetExternalLocationExternalLocationInfo {
    accessPoint?: string;
    browseOnly?: boolean;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    credentialId?: string;
    credentialName?: string;
    encryptionDetails?: outputs.GetExternalLocationExternalLocationInfoEncryptionDetails;
    fallback?: boolean;
    isolationMode?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    readOnly?: boolean;
    updatedAt?: number;
    updatedBy?: string;
    url?: string;
}

export interface GetExternalLocationExternalLocationInfoEncryptionDetails {
    sseEncryptionDetails?: outputs.GetExternalLocationExternalLocationInfoEncryptionDetailsSseEncryptionDetails;
}

export interface GetExternalLocationExternalLocationInfoEncryptionDetailsSseEncryptionDetails {
    algorithm?: string;
    awsKmsKeyArn?: string;
}

export interface GetFunctionsFunction {
    browseOnly?: boolean;
    catalogName?: string;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    dataType?: string;
    externalLanguage?: string;
    externalName?: string;
    fullDataType?: string;
    fullName?: string;
    functionId?: string;
    inputParams?: outputs.GetFunctionsFunctionInputParam[];
    isDeterministic?: boolean;
    isNullCall?: boolean;
    metastoreId?: string;
    name?: string;
    owner?: string;
    parameterStyle?: string;
    properties?: string;
    returnParams?: outputs.GetFunctionsFunctionReturnParam[];
    routineBody?: string;
    routineDefinition?: string;
    routineDependencies?: outputs.GetFunctionsFunctionRoutineDependency[];
    schemaName?: string;
    securityType?: string;
    specificName?: string;
    sqlDataAccess?: string;
    sqlPath?: string;
    updatedAt?: number;
    updatedBy?: string;
}

export interface GetFunctionsFunctionInputParam {
    parameters?: outputs.GetFunctionsFunctionInputParamParameter[];
}

export interface GetFunctionsFunctionInputParamParameter {
    comment?: string;
    name: string;
    parameterDefault?: string;
    parameterMode?: string;
    parameterType?: string;
    position: number;
    typeIntervalType?: string;
    typeJson?: string;
    typeName: string;
    typePrecision?: number;
    typeScale?: number;
    typeText: string;
}

export interface GetFunctionsFunctionReturnParam {
    parameters?: outputs.GetFunctionsFunctionReturnParamParameter[];
}

export interface GetFunctionsFunctionReturnParamParameter {
    comment?: string;
    name: string;
    parameterDefault?: string;
    parameterMode?: string;
    parameterType?: string;
    position: number;
    typeIntervalType?: string;
    typeJson?: string;
    typeName: string;
    typePrecision?: number;
    typeScale?: number;
    typeText: string;
}

export interface GetFunctionsFunctionRoutineDependency {
    dependencies?: outputs.GetFunctionsFunctionRoutineDependencyDependency[];
}

export interface GetFunctionsFunctionRoutineDependencyDependency {
    functions?: outputs.GetFunctionsFunctionRoutineDependencyDependencyFunction[];
    tables?: outputs.GetFunctionsFunctionRoutineDependencyDependencyTable[];
}

export interface GetFunctionsFunctionRoutineDependencyDependencyFunction {
    functionFullName: string;
}

export interface GetFunctionsFunctionRoutineDependencyDependencyTable {
    tableFullName: string;
}

export interface GetInstancePoolPoolInfo {
    awsAttributes?: outputs.GetInstancePoolPoolInfoAwsAttributes;
    azureAttributes?: outputs.GetInstancePoolPoolInfoAzureAttributes;
    customTags?: {[key: string]: string};
    defaultTags: {[key: string]: string};
    diskSpec?: outputs.GetInstancePoolPoolInfoDiskSpec;
    enableElasticDisk?: boolean;
    gcpAttributes?: outputs.GetInstancePoolPoolInfoGcpAttributes;
    idleInstanceAutoterminationMinutes: number;
    instancePoolFleetAttributes?: outputs.GetInstancePoolPoolInfoInstancePoolFleetAttribute[];
    instancePoolId: string;
    instancePoolName: string;
    maxCapacity?: number;
    minIdleInstances?: number;
    nodeTypeId?: string;
    preloadedDockerImages?: outputs.GetInstancePoolPoolInfoPreloadedDockerImage[];
    preloadedSparkVersions?: string[];
    state?: string;
    stats?: outputs.GetInstancePoolPoolInfoStats;
}

export interface GetInstancePoolPoolInfoAwsAttributes {
    availability?: string;
    spotBidPricePercent?: number;
    zoneId: string;
}

export interface GetInstancePoolPoolInfoAzureAttributes {
    availability?: string;
    spotBidMaxPrice?: number;
}

export interface GetInstancePoolPoolInfoDiskSpec {
    diskCount?: number;
    diskSize?: number;
    diskType?: outputs.GetInstancePoolPoolInfoDiskSpecDiskType;
}

export interface GetInstancePoolPoolInfoDiskSpecDiskType {
    azureDiskVolumeType?: string;
    ebsVolumeType?: string;
}

export interface GetInstancePoolPoolInfoGcpAttributes {
    gcpAvailability?: string;
    localSsdCount: number;
    zoneId: string;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttribute {
    fleetOnDemandOption?: outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOption;
    fleetSpotOption?: outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOption;
    launchTemplateOverrides: outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverride[];
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverride {
    availabilityZone: string;
    instanceType: string;
}

export interface GetInstancePoolPoolInfoPreloadedDockerImage {
    basicAuth?: outputs.GetInstancePoolPoolInfoPreloadedDockerImageBasicAuth;
    url: string;
}

export interface GetInstancePoolPoolInfoPreloadedDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetInstancePoolPoolInfoStats {
    idleCount?: number;
    pendingIdleCount?: number;
    pendingUsedCount?: number;
    usedCount?: number;
}

export interface GetInstanceProfilesInstanceProfile {
    arn: string;
    isMeta: boolean;
    name: string;
    roleArn: string;
}

export interface GetJobJobSettings {
    createdTime?: number;
    creatorUserName?: string;
    jobId?: number;
    runAsUserName: string;
    settings?: outputs.GetJobJobSettingsSettings;
}

export interface GetJobJobSettingsSettings {
    continuous?: outputs.GetJobJobSettingsSettingsContinuous;
    dbtTask?: outputs.GetJobJobSettingsSettingsDbtTask;
    deployment?: outputs.GetJobJobSettingsSettingsDeployment;
    description?: string;
    editMode?: string;
    emailNotifications?: outputs.GetJobJobSettingsSettingsEmailNotifications;
    environments?: outputs.GetJobJobSettingsSettingsEnvironment[];
    existingClusterId?: string;
    format: string;
    gitSource?: outputs.GetJobJobSettingsSettingsGitSource;
    health?: outputs.GetJobJobSettingsSettingsHealth;
    jobClusters?: outputs.GetJobJobSettingsSettingsJobCluster[];
    libraries?: outputs.GetJobJobSettingsSettingsLibrary[];
    maxConcurrentRuns?: number;
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    name?: string;
    newCluster?: outputs.GetJobJobSettingsSettingsNewCluster;
    notebookTask?: outputs.GetJobJobSettingsSettingsNotebookTask;
    notificationSettings?: outputs.GetJobJobSettingsSettingsNotificationSettings;
    parameters?: outputs.GetJobJobSettingsSettingsParameter[];
    pipelineTask?: outputs.GetJobJobSettingsSettingsPipelineTask;
    pythonWheelTask?: outputs.GetJobJobSettingsSettingsPythonWheelTask;
    queue?: outputs.GetJobJobSettingsSettingsQueue;
    retryOnTimeout?: boolean;
    runAs: outputs.GetJobJobSettingsSettingsRunAs;
    runJobTask?: outputs.GetJobJobSettingsSettingsRunJobTask;
    schedule?: outputs.GetJobJobSettingsSettingsSchedule;
    sparkJarTask?: outputs.GetJobJobSettingsSettingsSparkJarTask;
    sparkPythonTask?: outputs.GetJobJobSettingsSettingsSparkPythonTask;
    sparkSubmitTask?: outputs.GetJobJobSettingsSettingsSparkSubmitTask;
    tags?: {[key: string]: string};
    tasks?: outputs.GetJobJobSettingsSettingsTask[];
    timeoutSeconds?: number;
    trigger?: outputs.GetJobJobSettingsSettingsTrigger;
    webhookNotifications?: outputs.GetJobJobSettingsSettingsWebhookNotifications;
}

export interface GetJobJobSettingsSettingsContinuous {
    pauseStatus?: string;
}

export interface GetJobJobSettingsSettingsDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsDeployment {
    kind: string;
    metadataFilePath?: string;
}

export interface GetJobJobSettingsSettingsEmailNotifications {
    noAlertForSkippedRuns?: boolean;
    onDurationWarningThresholdExceededs?: string[];
    onFailures?: string[];
    onStarts?: string[];
    onStreamingBacklogExceededs?: string[];
    onSuccesses?: string[];
}

export interface GetJobJobSettingsSettingsEnvironment {
    environmentKey: string;
    spec?: outputs.GetJobJobSettingsSettingsEnvironmentSpec;
}

export interface GetJobJobSettingsSettingsEnvironmentSpec {
    client: string;
    dependencies?: string[];
}

export interface GetJobJobSettingsSettingsGitSource {
    branch?: string;
    commit?: string;
    jobSource?: outputs.GetJobJobSettingsSettingsGitSourceJobSource;
    provider?: string;
    tag?: string;
    url: string;
}

export interface GetJobJobSettingsSettingsGitSourceJobSource {
    dirtyState?: string;
    importFromGitBranch: string;
    jobConfigPath: string;
}

export interface GetJobJobSettingsSettingsHealth {
    rules: outputs.GetJobJobSettingsSettingsHealthRule[];
}

export interface GetJobJobSettingsSettingsHealthRule {
    metric: string;
    op: string;
    value: number;
}

export interface GetJobJobSettingsSettingsJobCluster {
    jobClusterKey: string;
    newCluster: outputs.GetJobJobSettingsSettingsJobClusterNewCluster;
}

export interface GetJobJobSettingsSettingsJobClusterNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributes;
    azureAttributes?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConf;
    clusterMountInfos?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConf {
    dbfs?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfs;
    s3?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterDockerImage {
    basicAuth?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScript {
    abfss?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfss;
    dbfs?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfs;
    file?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFile;
    gcs?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcs;
    s3?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3;
    volumes?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumes;
    workspace?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspace;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfss {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFile {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcs {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumes {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspace {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterWorkloadType {
    clients: outputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsLibrary {
    cran?: outputs.GetJobJobSettingsSettingsLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.GetJobJobSettingsSettingsLibraryMaven;
    pypi?: outputs.GetJobJobSettingsSettingsLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface GetJobJobSettingsSettingsLibraryCran {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface GetJobJobSettingsSettingsLibraryPypi {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.GetJobJobSettingsSettingsNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetJobJobSettingsSettingsNewClusterAwsAttributes;
    azureAttributes?: outputs.GetJobJobSettingsSettingsNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.GetJobJobSettingsSettingsNewClusterClusterLogConf;
    clusterMountInfos?: outputs.GetJobJobSettingsSettingsNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: outputs.GetJobJobSettingsSettingsNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.GetJobJobSettingsSettingsNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.GetJobJobSettingsSettingsNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.GetJobJobSettingsSettingsNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConf {
    dbfs?: outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfDbfs;
    s3?: outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsNewClusterDockerImage {
    basicAuth?: outputs.GetJobJobSettingsSettingsNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScript {
    abfss?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptAbfss;
    dbfs?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptDbfs;
    file?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptFile;
    gcs?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptGcs;
    s3?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptS3;
    volumes?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptVolumes;
    workspace?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptWorkspace;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptAbfss {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptFile {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptGcs {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptVolumes {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptWorkspace {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterWorkloadType {
    clients: outputs.GetJobJobSettingsSettingsNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsNotebookTask {
    baseParameters?: {[key: string]: string};
    notebookPath: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsNotificationSettings {
    noAlertForCanceledRuns?: boolean;
    noAlertForSkippedRuns?: boolean;
}

export interface GetJobJobSettingsSettingsParameter {
    default: string;
    name: string;
}

export interface GetJobJobSettingsSettingsPipelineTask {
    fullRefresh?: boolean;
    pipelineId: string;
}

export interface GetJobJobSettingsSettingsPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: string};
    packageName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsQueue {
    enabled: boolean;
}

export interface GetJobJobSettingsSettingsRunAs {
    servicePrincipalName?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsRunJobTask {
    jobId: number;
    jobParameters?: {[key: string]: string};
}

export interface GetJobJobSettingsSettingsSchedule {
    pauseStatus?: string;
    quartzCronExpression: string;
    timezoneId: string;
}

export interface GetJobJobSettingsSettingsSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsSparkSubmitTask {
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTask {
    conditionTask?: outputs.GetJobJobSettingsSettingsTaskConditionTask;
    dbtTask?: outputs.GetJobJobSettingsSettingsTaskDbtTask;
    dependsOns?: outputs.GetJobJobSettingsSettingsTaskDependsOn[];
    description?: string;
    emailNotifications?: outputs.GetJobJobSettingsSettingsTaskEmailNotifications;
    environmentKey?: string;
    existingClusterId?: string;
    forEachTask?: outputs.GetJobJobSettingsSettingsTaskForEachTask;
    health?: outputs.GetJobJobSettingsSettingsTaskHealth;
    jobClusterKey?: string;
    libraries?: outputs.GetJobJobSettingsSettingsTaskLibrary[];
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    newCluster?: outputs.GetJobJobSettingsSettingsTaskNewCluster;
    notebookTask?: outputs.GetJobJobSettingsSettingsTaskNotebookTask;
    notificationSettings?: outputs.GetJobJobSettingsSettingsTaskNotificationSettings;
    pipelineTask?: outputs.GetJobJobSettingsSettingsTaskPipelineTask;
    pythonWheelTask?: outputs.GetJobJobSettingsSettingsTaskPythonWheelTask;
    retryOnTimeout: boolean;
    runIf?: string;
    runJobTask?: outputs.GetJobJobSettingsSettingsTaskRunJobTask;
    sparkJarTask?: outputs.GetJobJobSettingsSettingsTaskSparkJarTask;
    sparkPythonTask?: outputs.GetJobJobSettingsSettingsTaskSparkPythonTask;
    sparkSubmitTask?: outputs.GetJobJobSettingsSettingsTaskSparkSubmitTask;
    sqlTask?: outputs.GetJobJobSettingsSettingsTaskSqlTask;
    taskKey: string;
    timeoutSeconds?: number;
    webhookNotifications?: outputs.GetJobJobSettingsSettingsTaskWebhookNotifications;
}

export interface GetJobJobSettingsSettingsTaskConditionTask {
    left: string;
    op: string;
    right: string;
}

export interface GetJobJobSettingsSettingsTaskDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskDependsOn {
    outcome?: string;
    taskKey: string;
}

export interface GetJobJobSettingsSettingsTaskEmailNotifications {
    noAlertForSkippedRuns?: boolean;
    onDurationWarningThresholdExceededs?: string[];
    onFailures?: string[];
    onStarts?: string[];
    onStreamingBacklogExceededs?: string[];
    onSuccesses?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTask {
    concurrency?: number;
    inputs: string;
    task: outputs.GetJobJobSettingsSettingsTaskForEachTaskTask;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTask {
    conditionTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTask;
    dbtTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTask;
    dependsOns?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOn[];
    description?: string;
    emailNotifications?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotifications;
    environmentKey?: string;
    existingClusterId?: string;
    health?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskHealth;
    jobClusterKey?: string;
    libraries?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibrary[];
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    newCluster?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewCluster;
    notebookTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTask;
    notificationSettings?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettings;
    pipelineTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTask;
    pythonWheelTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTask;
    retryOnTimeout: boolean;
    runIf?: string;
    runJobTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTask;
    sparkJarTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTask;
    sparkPythonTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTask;
    sparkSubmitTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTask;
    sqlTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTask;
    taskKey: string;
    timeoutSeconds?: number;
    webhookNotifications?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotifications;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTask {
    left: string;
    op: string;
    right: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOn {
    outcome?: string;
    taskKey: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotifications {
    noAlertForSkippedRuns?: boolean;
    onDurationWarningThresholdExceededs?: string[];
    onFailures?: string[];
    onStarts?: string[];
    onStreamingBacklogExceededs?: string[];
    onSuccesses?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskHealth {
    rules: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskHealthRule[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskHealthRule {
    metric: string;
    op: string;
    value: number;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibrary {
    cran?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryMaven;
    pypi?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryCran {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryPypi {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAwsAttributes;
    azureAttributes?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConf;
    clusterMountInfos?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConf {
    dbfs?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfDbfs;
    s3?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImage {
    basicAuth?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScript {
    abfss?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptAbfss;
    dbfs?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptDbfs;
    file?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptFile;
    gcs?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptGcs;
    s3?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptS3;
    volumes?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptVolumes;
    workspace?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptWorkspace;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptAbfss {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptFile {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptGcs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptVolumes {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptWorkspace {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadType {
    clients: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTask {
    baseParameters?: {[key: string]: string};
    notebookPath: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettings {
    alertOnLastAttempt?: boolean;
    noAlertForCanceledRuns?: boolean;
    noAlertForSkippedRuns?: boolean;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTask {
    fullRefresh?: boolean;
    pipelineId: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: string};
    packageName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTask {
    jobId: number;
    jobParameters?: {[key: string]: string};
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTask {
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTask {
    alert?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlert;
    dashboard?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboard;
    file?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskFile;
    parameters?: {[key: string]: string};
    query?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskQuery;
    warehouseId: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlert {
    alertId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlertSubscription[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlertSubscription {
    destinationId?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboard {
    customSubject?: string;
    dashboardId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboardSubscription[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboardSubscription {
    destinationId?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskFile {
    path: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskQuery {
    queryId: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotifications {
    onDurationWarningThresholdExceededs?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceeded[];
    onFailures?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnFailure[];
    onStarts?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStart[];
    onStreamingBacklogExceededs?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStreamingBacklogExceeded[];
    onSuccesses?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnSuccess[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceeded {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnFailure {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStart {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStreamingBacklogExceeded {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnSuccess {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskHealth {
    rules: outputs.GetJobJobSettingsSettingsTaskHealthRule[];
}

export interface GetJobJobSettingsSettingsTaskHealthRule {
    metric: string;
    op: string;
    value: number;
}

export interface GetJobJobSettingsSettingsTaskLibrary {
    cran?: outputs.GetJobJobSettingsSettingsTaskLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.GetJobJobSettingsSettingsTaskLibraryMaven;
    pypi?: outputs.GetJobJobSettingsSettingsTaskLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface GetJobJobSettingsSettingsTaskLibraryCran {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskLibraryPypi {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.GetJobJobSettingsSettingsTaskNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetJobJobSettingsSettingsTaskNewClusterAwsAttributes;
    azureAttributes?: outputs.GetJobJobSettingsSettingsTaskNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConf;
    clusterMountInfos?: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: outputs.GetJobJobSettingsSettingsTaskNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.GetJobJobSettingsSettingsTaskNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConf {
    dbfs?: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfs;
    s3?: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterDockerImage {
    basicAuth?: outputs.GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScript {
    abfss?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfss;
    dbfs?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfs;
    file?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptFile;
    gcs?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptGcs;
    s3?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptS3;
    volumes?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumes;
    workspace?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspace;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfss {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptFile {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptGcs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumes {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspace {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterWorkloadType {
    clients: outputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsTaskNotebookTask {
    baseParameters?: {[key: string]: string};
    notebookPath: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskNotificationSettings {
    alertOnLastAttempt?: boolean;
    noAlertForCanceledRuns?: boolean;
    noAlertForSkippedRuns?: boolean;
}

export interface GetJobJobSettingsSettingsTaskPipelineTask {
    fullRefresh?: boolean;
    pipelineId: string;
}

export interface GetJobJobSettingsSettingsTaskPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: string};
    packageName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskRunJobTask {
    jobId: number;
    jobParameters?: {[key: string]: string};
}

export interface GetJobJobSettingsSettingsTaskSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskSparkSubmitTask {
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskSqlTask {
    alert?: outputs.GetJobJobSettingsSettingsTaskSqlTaskAlert;
    dashboard?: outputs.GetJobJobSettingsSettingsTaskSqlTaskDashboard;
    file?: outputs.GetJobJobSettingsSettingsTaskSqlTaskFile;
    parameters?: {[key: string]: string};
    query?: outputs.GetJobJobSettingsSettingsTaskSqlTaskQuery;
    warehouseId: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskAlert {
    alertId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: outputs.GetJobJobSettingsSettingsTaskSqlTaskAlertSubscription[];
}

export interface GetJobJobSettingsSettingsTaskSqlTaskAlertSubscription {
    destinationId?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskDashboard {
    customSubject?: string;
    dashboardId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: outputs.GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscription[];
}

export interface GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscription {
    destinationId?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskFile {
    path: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskQuery {
    queryId: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotifications {
    onDurationWarningThresholdExceededs?: outputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnDurationWarningThresholdExceeded[];
    onFailures?: outputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnFailure[];
    onStarts?: outputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnStart[];
    onStreamingBacklogExceededs?: outputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnStreamingBacklogExceeded[];
    onSuccesses?: outputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnSuccess[];
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnDurationWarningThresholdExceeded {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnFailure {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnStart {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnStreamingBacklogExceeded {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnSuccess {
    id: string;
}

export interface GetJobJobSettingsSettingsTrigger {
    fileArrival?: outputs.GetJobJobSettingsSettingsTriggerFileArrival;
    pauseStatus?: string;
    periodic?: outputs.GetJobJobSettingsSettingsTriggerPeriodic;
    tableUpdate?: outputs.GetJobJobSettingsSettingsTriggerTableUpdate;
}

export interface GetJobJobSettingsSettingsTriggerFileArrival {
    minTimeBetweenTriggersSeconds?: number;
    url: string;
    waitAfterLastChangeSeconds?: number;
}

export interface GetJobJobSettingsSettingsTriggerPeriodic {
    interval: number;
    unit: string;
}

export interface GetJobJobSettingsSettingsTriggerTableUpdate {
    condition?: string;
    minTimeBetweenTriggersSeconds?: number;
    tableNames: string[];
    waitAfterLastChangeSeconds?: number;
}

export interface GetJobJobSettingsSettingsWebhookNotifications {
    onDurationWarningThresholdExceededs?: outputs.GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceeded[];
    onFailures?: outputs.GetJobJobSettingsSettingsWebhookNotificationsOnFailure[];
    onStarts?: outputs.GetJobJobSettingsSettingsWebhookNotificationsOnStart[];
    onStreamingBacklogExceededs?: outputs.GetJobJobSettingsSettingsWebhookNotificationsOnStreamingBacklogExceeded[];
    onSuccesses?: outputs.GetJobJobSettingsSettingsWebhookNotificationsOnSuccess[];
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceeded {
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnFailure {
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnStart {
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnStreamingBacklogExceeded {
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnSuccess {
    id: string;
}

export interface GetMetastoreMetastoreInfo {
    cloud?: string;
    createdAt?: number;
    createdBy?: string;
    defaultDataAccessConfigId?: string;
    deltaSharingOrganizationName?: string;
    deltaSharingRecipientTokenLifetimeInSeconds?: number;
    deltaSharingScope?: string;
    externalAccessEnabled?: boolean;
    globalMetastoreId?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    privilegeModelVersion?: string;
    region?: string;
    storageRoot?: string;
    storageRootCredentialId?: string;
    storageRootCredentialName?: string;
    updatedAt?: number;
    updatedBy?: string;
}

export interface GetMlflowExperimentTag {
    key?: string;
    value?: string;
}

export interface GetMlflowModelLatestVersion {
    creationTimestamp?: number;
    currentStage?: string;
    description?: string;
    lastUpdatedTimestamp?: number;
    name?: string;
    runId?: string;
    runLink?: string;
    source?: string;
    status?: string;
    statusMessage?: string;
    tags?: outputs.GetMlflowModelLatestVersionTag[];
    userId?: string;
    version?: string;
}

export interface GetMlflowModelLatestVersionTag {
    key?: string;
    value?: string;
}

export interface GetMlflowModelTag {
    key?: string;
    value?: string;
}

export interface GetMwsNetworkConnectivityConfigEgressConfig {
    defaultRules?: outputs.GetMwsNetworkConnectivityConfigEgressConfigDefaultRules;
    targetRules?: outputs.GetMwsNetworkConnectivityConfigEgressConfigTargetRules;
}

export interface GetMwsNetworkConnectivityConfigEgressConfigDefaultRules {
    awsStableIpRule?: outputs.GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesAwsStableIpRule;
    azureServiceEndpointRule?: outputs.GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesAzureServiceEndpointRule;
}

export interface GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesAwsStableIpRule {
    cidrBlocks?: string[];
}

export interface GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesAzureServiceEndpointRule {
    subnets?: string[];
    targetRegion?: string;
    targetServices?: string[];
}

export interface GetMwsNetworkConnectivityConfigEgressConfigTargetRules {
    azurePrivateEndpointRules?: outputs.GetMwsNetworkConnectivityConfigEgressConfigTargetRulesAzurePrivateEndpointRule[];
}

export interface GetMwsNetworkConnectivityConfigEgressConfigTargetRulesAzurePrivateEndpointRule {
    connectionState?: string;
    creationTime?: number;
    deactivated?: boolean;
    deactivatedAt?: number;
    endpointName?: string;
    groupId?: string;
    networkConnectivityConfigId?: string;
    resourceId?: string;
    ruleId?: string;
    updatedTime?: number;
}

export interface GetNotebookPathsNotebookPathList {
    language?: string;
    path?: string;
}

export interface GetNotificationDestinationsNotificationDestination {
    destinationType?: string;
    displayName?: string;
    id?: string;
}

export interface GetRegisteredModelModelInfo {
    aliases?: outputs.GetRegisteredModelModelInfoAlias[];
    browseOnly?: boolean;
    catalogName?: string;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    fullName?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    schemaName?: string;
    storageLocation?: string;
    updatedAt?: number;
    updatedBy?: string;
}

export interface GetRegisteredModelModelInfoAlias {
    aliasName?: string;
    versionNum?: number;
}

export interface GetRegisteredModelVersionsModelVersion {
    aliases?: outputs.GetRegisteredModelVersionsModelVersionAlias[];
    browseOnly?: boolean;
    catalogName?: string;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    id?: string;
    metastoreId?: string;
    modelName?: string;
    modelVersionDependencies?: outputs.GetRegisteredModelVersionsModelVersionModelVersionDependency[];
    runId?: string;
    runWorkspaceId?: number;
    schemaName?: string;
    source?: string;
    status?: string;
    storageLocation?: string;
    updatedAt?: number;
    updatedBy?: string;
    version?: number;
}

export interface GetRegisteredModelVersionsModelVersionAlias {
    aliasName?: string;
    versionNum?: number;
}

export interface GetRegisteredModelVersionsModelVersionModelVersionDependency {
    dependencies?: outputs.GetRegisteredModelVersionsModelVersionModelVersionDependencyDependency[];
}

export interface GetRegisteredModelVersionsModelVersionModelVersionDependencyDependency {
    functions?: outputs.GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyFunction[];
    tables?: outputs.GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyTable[];
}

export interface GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyFunction {
    functionFullName: string;
}

export interface GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyTable {
    tableFullName: string;
}

export interface GetSchemaSchemaInfo {
    browseOnly?: boolean;
    catalogName?: string;
    catalogType?: string;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    effectivePredictiveOptimizationFlag?: outputs.GetSchemaSchemaInfoEffectivePredictiveOptimizationFlag;
    enablePredictiveOptimization?: string;
    fullName?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    properties?: {[key: string]: string};
    schemaId?: string;
    storageLocation?: string;
    storageRoot?: string;
    updatedAt?: number;
    updatedBy?: string;
}

export interface GetSchemaSchemaInfoEffectivePredictiveOptimizationFlag {
    inheritedFromName?: string;
    inheritedFromType?: string;
    value: string;
}

export interface GetServingEndpointsEndpoint {
    aiGateways?: outputs.GetServingEndpointsEndpointAiGateway[];
    configs?: outputs.GetServingEndpointsEndpointConfig[];
    creationTimestamp?: number;
    creator?: string;
    id?: string;
    lastUpdatedTimestamp?: number;
    name?: string;
    states?: outputs.GetServingEndpointsEndpointState[];
    tags?: outputs.GetServingEndpointsEndpointTag[];
    task?: string;
}

export interface GetServingEndpointsEndpointAiGateway {
    guardrails?: outputs.GetServingEndpointsEndpointAiGatewayGuardrail[];
    inferenceTableConfigs?: outputs.GetServingEndpointsEndpointAiGatewayInferenceTableConfig[];
    rateLimits?: outputs.GetServingEndpointsEndpointAiGatewayRateLimit[];
    usageTrackingConfigs?: outputs.GetServingEndpointsEndpointAiGatewayUsageTrackingConfig[];
}

export interface GetServingEndpointsEndpointAiGatewayGuardrail {
    inputs?: outputs.GetServingEndpointsEndpointAiGatewayGuardrailInput[];
    outputs?: outputs.GetServingEndpointsEndpointAiGatewayGuardrailOutput[];
}

export interface GetServingEndpointsEndpointAiGatewayGuardrailInput {
    invalidKeywords?: string[];
    piis?: outputs.GetServingEndpointsEndpointAiGatewayGuardrailInputPii[];
    safety?: boolean;
    validTopics?: string[];
}

export interface GetServingEndpointsEndpointAiGatewayGuardrailInputPii {
    behavior: string;
}

export interface GetServingEndpointsEndpointAiGatewayGuardrailOutput {
    invalidKeywords?: string[];
    piis?: outputs.GetServingEndpointsEndpointAiGatewayGuardrailOutputPii[];
    safety?: boolean;
    validTopics?: string[];
}

export interface GetServingEndpointsEndpointAiGatewayGuardrailOutputPii {
    behavior: string;
}

export interface GetServingEndpointsEndpointAiGatewayInferenceTableConfig {
    catalogName?: string;
    enabled?: boolean;
    schemaName?: string;
    tableNamePrefix?: string;
}

export interface GetServingEndpointsEndpointAiGatewayRateLimit {
    calls: number;
    key?: string;
    renewalPeriod: string;
}

export interface GetServingEndpointsEndpointAiGatewayUsageTrackingConfig {
    enabled?: boolean;
}

export interface GetServingEndpointsEndpointConfig {
    servedEntities?: outputs.GetServingEndpointsEndpointConfigServedEntity[];
    servedModels?: outputs.GetServingEndpointsEndpointConfigServedModel[];
}

export interface GetServingEndpointsEndpointConfigServedEntity {
    entityName?: string;
    entityVersion?: string;
    externalModels?: outputs.GetServingEndpointsEndpointConfigServedEntityExternalModel[];
    foundationModels?: outputs.GetServingEndpointsEndpointConfigServedEntityFoundationModel[];
    name?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModel {
    ai21labsConfigs?: outputs.GetServingEndpointsEndpointConfigServedEntityExternalModelAi21labsConfig[];
    amazonBedrockConfigs?: outputs.GetServingEndpointsEndpointConfigServedEntityExternalModelAmazonBedrockConfig[];
    anthropicConfigs?: outputs.GetServingEndpointsEndpointConfigServedEntityExternalModelAnthropicConfig[];
    cohereConfigs?: outputs.GetServingEndpointsEndpointConfigServedEntityExternalModelCohereConfig[];
    databricksModelServingConfigs?: outputs.GetServingEndpointsEndpointConfigServedEntityExternalModelDatabricksModelServingConfig[];
    googleCloudVertexAiConfigs?: outputs.GetServingEndpointsEndpointConfigServedEntityExternalModelGoogleCloudVertexAiConfig[];
    name: string;
    openaiConfigs?: outputs.GetServingEndpointsEndpointConfigServedEntityExternalModelOpenaiConfig[];
    palmConfigs?: outputs.GetServingEndpointsEndpointConfigServedEntityExternalModelPalmConfig[];
    provider: string;
    task: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelAi21labsConfig {
    ai21labsApiKey?: string;
    ai21labsApiKeyPlaintext?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelAmazonBedrockConfig {
    awsAccessKeyId?: string;
    awsAccessKeyIdPlaintext?: string;
    awsRegion: string;
    awsSecretAccessKey?: string;
    awsSecretAccessKeyPlaintext?: string;
    bedrockProvider: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelAnthropicConfig {
    anthropicApiKey?: string;
    anthropicApiKeyPlaintext?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelCohereConfig {
    cohereApiBase?: string;
    cohereApiKey?: string;
    cohereApiKeyPlaintext?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelDatabricksModelServingConfig {
    databricksApiToken?: string;
    databricksApiTokenPlaintext?: string;
    databricksWorkspaceUrl: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelGoogleCloudVertexAiConfig {
    privateKey?: string;
    privateKeyPlaintext?: string;
    projectId?: string;
    region?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelOpenaiConfig {
    microsoftEntraClientId?: string;
    microsoftEntraClientSecret?: string;
    microsoftEntraClientSecretPlaintext?: string;
    microsoftEntraTenantId?: string;
    openaiApiBase?: string;
    openaiApiKey?: string;
    openaiApiKeyPlaintext?: string;
    openaiApiType?: string;
    openaiApiVersion?: string;
    openaiDeploymentName?: string;
    openaiOrganization?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelPalmConfig {
    palmApiKey?: string;
    palmApiKeyPlaintext?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityFoundationModel {
    description?: string;
    displayName?: string;
    docs?: string;
    name?: string;
}

export interface GetServingEndpointsEndpointConfigServedModel {
    modelName?: string;
    modelVersion?: string;
    name?: string;
}

export interface GetServingEndpointsEndpointState {
    configUpdate?: string;
    ready?: string;
}

export interface GetServingEndpointsEndpointTag {
    key: string;
    value?: string;
}

export interface GetShareObject {
    addedAt: number;
    addedBy: string;
    cdfEnabled?: boolean;
    comment?: string;
    content?: string;
    dataObjectType: string;
    historyDataSharingStatus?: string;
    name: string;
    partitions?: outputs.GetShareObjectPartition[];
    sharedAs?: string;
    startVersion?: number;
    status: string;
    stringSharedAs?: string;
}

export interface GetShareObjectPartition {
    values?: outputs.GetShareObjectPartitionValue[];
}

export interface GetShareObjectPartitionValue {
    name: string;
    op: string;
    recipientPropertyKey?: string;
    value?: string;
}

export interface GetSqlWarehouseChannel {
    dbsqlVersion?: string;
    name?: string;
}

export interface GetSqlWarehouseHealth {
    details?: string;
    failureReason?: outputs.GetSqlWarehouseHealthFailureReason;
    message?: string;
    status?: string;
    summary?: string;
}

export interface GetSqlWarehouseHealthFailureReason {
    code?: string;
    parameters?: {[key: string]: string};
    type?: string;
}

export interface GetSqlWarehouseOdbcParams {
    hostname?: string;
    path?: string;
    port?: number;
    protocol?: string;
}

export interface GetSqlWarehouseTags {
    customTags?: outputs.GetSqlWarehouseTagsCustomTag[];
}

export interface GetSqlWarehouseTagsCustomTag {
    key?: string;
    value?: string;
}

export interface GetStorageCredentialStorageCredentialInfo {
    awsIamRole?: outputs.GetStorageCredentialStorageCredentialInfoAwsIamRole;
    azureManagedIdentity?: outputs.GetStorageCredentialStorageCredentialInfoAzureManagedIdentity;
    azureServicePrincipal?: outputs.GetStorageCredentialStorageCredentialInfoAzureServicePrincipal;
    cloudflareApiToken?: outputs.GetStorageCredentialStorageCredentialInfoCloudflareApiToken;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    databricksGcpServiceAccount?: outputs.GetStorageCredentialStorageCredentialInfoDatabricksGcpServiceAccount;
    fullName?: string;
    id?: string;
    isolationMode?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    readOnly?: boolean;
    updatedAt?: number;
    updatedBy?: string;
    usedForManagedStorage?: boolean;
}

export interface GetStorageCredentialStorageCredentialInfoAwsIamRole {
    externalId?: string;
    roleArn: string;
    unityCatalogIamArn?: string;
}

export interface GetStorageCredentialStorageCredentialInfoAzureManagedIdentity {
    accessConnectorId: string;
    credentialId?: string;
    managedIdentityId?: string;
}

export interface GetStorageCredentialStorageCredentialInfoAzureServicePrincipal {
    applicationId: string;
    clientSecret: string;
    directoryId: string;
}

export interface GetStorageCredentialStorageCredentialInfoCloudflareApiToken {
    accessKeyId: string;
    accountId: string;
    secretAccessKey: string;
}

export interface GetStorageCredentialStorageCredentialInfoDatabricksGcpServiceAccount {
    credentialId?: string;
    email?: string;
}

export interface GetTableTableInfo {
    accessPoint?: string;
    browseOnly?: boolean;
    catalogName?: string;
    columns?: outputs.GetTableTableInfoColumn[];
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    dataAccessConfigurationId?: string;
    dataSourceFormat?: string;
    deletedAt?: number;
    deltaRuntimePropertiesKvpairs?: outputs.GetTableTableInfoDeltaRuntimePropertiesKvpairs;
    effectivePredictiveOptimizationFlag?: outputs.GetTableTableInfoEffectivePredictiveOptimizationFlag;
    enablePredictiveOptimization?: string;
    encryptionDetails?: outputs.GetTableTableInfoEncryptionDetails;
    fullName?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    pipelineId?: string;
    properties?: {[key: string]: string};
    rowFilter?: outputs.GetTableTableInfoRowFilter;
    schemaName?: string;
    sqlPath?: string;
    storageCredentialName?: string;
    storageLocation?: string;
    tableConstraints?: outputs.GetTableTableInfoTableConstraint[];
    tableId?: string;
    tableType?: string;
    updatedAt?: number;
    updatedBy?: string;
    viewDefinition?: string;
    viewDependencies?: outputs.GetTableTableInfoViewDependencies;
}

export interface GetTableTableInfoColumn {
    comment?: string;
    mask?: outputs.GetTableTableInfoColumnMask;
    name?: string;
    nullable?: boolean;
    partitionIndex?: number;
    position?: number;
    typeIntervalType?: string;
    typeJson?: string;
    typeName?: string;
    typePrecision?: number;
    typeScale?: number;
    typeText?: string;
}

export interface GetTableTableInfoColumnMask {
    functionName?: string;
    usingColumnNames?: string[];
}

export interface GetTableTableInfoDeltaRuntimePropertiesKvpairs {
    deltaRuntimeProperties: {[key: string]: string};
}

export interface GetTableTableInfoEffectivePredictiveOptimizationFlag {
    inheritedFromName?: string;
    inheritedFromType?: string;
    value: string;
}

export interface GetTableTableInfoEncryptionDetails {
    sseEncryptionDetails?: outputs.GetTableTableInfoEncryptionDetailsSseEncryptionDetails;
}

export interface GetTableTableInfoEncryptionDetailsSseEncryptionDetails {
    algorithm?: string;
    awsKmsKeyArn?: string;
}

export interface GetTableTableInfoRowFilter {
    functionName: string;
    inputColumnNames: string[];
}

export interface GetTableTableInfoTableConstraint {
    foreignKeyConstraint?: outputs.GetTableTableInfoTableConstraintForeignKeyConstraint;
    namedTableConstraint?: outputs.GetTableTableInfoTableConstraintNamedTableConstraint;
    primaryKeyConstraint?: outputs.GetTableTableInfoTableConstraintPrimaryKeyConstraint;
}

export interface GetTableTableInfoTableConstraintForeignKeyConstraint {
    childColumns: string[];
    name: string;
    parentColumns: string[];
    parentTable: string;
}

export interface GetTableTableInfoTableConstraintNamedTableConstraint {
    name: string;
}

export interface GetTableTableInfoTableConstraintPrimaryKeyConstraint {
    childColumns: string[];
    name: string;
}

export interface GetTableTableInfoViewDependencies {
    dependencies?: outputs.GetTableTableInfoViewDependenciesDependency[];
}

export interface GetTableTableInfoViewDependenciesDependency {
    function?: outputs.GetTableTableInfoViewDependenciesDependencyFunction;
    table?: outputs.GetTableTableInfoViewDependenciesDependencyTable;
}

export interface GetTableTableInfoViewDependenciesDependencyFunction {
    functionFullName: string;
}

export interface GetTableTableInfoViewDependenciesDependencyTable {
    tableFullName: string;
}

export interface GetVolumeVolumeInfo {
    accessPoint?: string;
    browseOnly?: boolean;
    catalogName?: string;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    encryptionDetails?: outputs.GetVolumeVolumeInfoEncryptionDetails;
    fullName?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    schemaName?: string;
    storageLocation?: string;
    updatedAt?: number;
    updatedBy?: string;
    volumeId?: string;
    volumeType?: string;
}

export interface GetVolumeVolumeInfoEncryptionDetails {
    sseEncryptionDetails?: outputs.GetVolumeVolumeInfoEncryptionDetailsSseEncryptionDetails;
}

export interface GetVolumeVolumeInfoEncryptionDetailsSseEncryptionDetails {
    algorithm?: string;
    awsKmsKeyArn?: string;
}

export interface GrantsGrant {
    principal: string;
    privileges: string[];
}

export interface InstancePoolAwsAttributes {
    availability?: string;
    spotBidPricePercent?: number;
    zoneId: string;
}

export interface InstancePoolAzureAttributes {
    availability?: string;
    spotBidMaxPrice?: number;
}

export interface InstancePoolDiskSpec {
    diskCount?: number;
    diskSize?: number;
    diskType?: outputs.InstancePoolDiskSpecDiskType;
}

export interface InstancePoolDiskSpecDiskType {
    azureDiskVolumeType?: string;
    ebsVolumeType?: string;
}

export interface InstancePoolGcpAttributes {
    gcpAvailability?: string;
    localSsdCount: number;
    zoneId: string;
}

export interface InstancePoolInstancePoolFleetAttributes {
    fleetOnDemandOption?: outputs.InstancePoolInstancePoolFleetAttributesFleetOnDemandOption;
    fleetSpotOption?: outputs.InstancePoolInstancePoolFleetAttributesFleetSpotOption;
    launchTemplateOverrides: outputs.InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride[];
}

export interface InstancePoolInstancePoolFleetAttributesFleetOnDemandOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface InstancePoolInstancePoolFleetAttributesFleetSpotOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride {
    availabilityZone: string;
    instanceType: string;
}

export interface InstancePoolPreloadedDockerImage {
    basicAuth?: outputs.InstancePoolPreloadedDockerImageBasicAuth;
    url: string;
}

export interface InstancePoolPreloadedDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobContinuous {
    pauseStatus?: string;
}

export interface JobDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    source?: string;
    warehouseId?: string;
}

export interface JobDeployment {
    kind: string;
    metadataFilePath?: string;
}

export interface JobEmailNotifications {
    noAlertForSkippedRuns?: boolean;
    onDurationWarningThresholdExceededs?: string[];
    onFailures?: string[];
    onStarts?: string[];
    onStreamingBacklogExceededs?: string[];
    onSuccesses?: string[];
}

export interface JobEnvironment {
    environmentKey: string;
    spec?: outputs.JobEnvironmentSpec;
}

export interface JobEnvironmentSpec {
    client: string;
    dependencies?: string[];
}

export interface JobGitSource {
    branch?: string;
    commit?: string;
    gitSnapshot?: outputs.JobGitSourceGitSnapshot;
    jobSource?: outputs.JobGitSourceJobSource;
    provider?: string;
    tag?: string;
    url: string;
}

export interface JobGitSourceGitSnapshot {
    usedCommit?: string;
}

export interface JobGitSourceJobSource {
    dirtyState?: string;
    importFromGitBranch: string;
    jobConfigPath: string;
}

export interface JobHealth {
    rules: outputs.JobHealthRule[];
}

export interface JobHealthRule {
    metric: string;
    op: string;
    value: number;
}

export interface JobJobCluster {
    jobClusterKey: string;
    newCluster: outputs.JobJobClusterNewCluster;
}

export interface JobJobClusterNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.JobJobClusterNewClusterAutoscale;
    awsAttributes?: outputs.JobJobClusterNewClusterAwsAttributes;
    azureAttributes?: outputs.JobJobClusterNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.JobJobClusterNewClusterClusterLogConf;
    clusterMountInfos?: outputs.JobJobClusterNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobJobClusterNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobJobClusterNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobJobClusterNewClusterInitScript[];
    instancePoolId?: string;
    isSingleNode?: boolean;
    kind?: string;
    libraries?: outputs.JobJobClusterNewClusterLibrary[];
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    useMlRuntime?: boolean;
    workloadType?: outputs.JobJobClusterNewClusterWorkloadType;
}

export interface JobJobClusterNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobJobClusterNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobJobClusterNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: outputs.JobJobClusterNewClusterAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface JobJobClusterNewClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface JobJobClusterNewClusterClusterLogConf {
    dbfs?: outputs.JobJobClusterNewClusterClusterLogConfDbfs;
    s3?: outputs.JobJobClusterNewClusterClusterLogConfS3;
}

export interface JobJobClusterNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobJobClusterNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobJobClusterNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface JobJobClusterNewClusterDockerImage {
    basicAuth?: outputs.JobJobClusterNewClusterDockerImageBasicAuth;
    url: string;
}

export interface JobJobClusterNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobJobClusterNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobJobClusterNewClusterInitScript {
    abfss?: outputs.JobJobClusterNewClusterInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: outputs.JobJobClusterNewClusterInitScriptDbfs;
    file?: outputs.JobJobClusterNewClusterInitScriptFile;
    gcs?: outputs.JobJobClusterNewClusterInitScriptGcs;
    s3?: outputs.JobJobClusterNewClusterInitScriptS3;
    volumes?: outputs.JobJobClusterNewClusterInitScriptVolumes;
    workspace?: outputs.JobJobClusterNewClusterInitScriptWorkspace;
}

export interface JobJobClusterNewClusterInitScriptAbfss {
    destination: string;
}

export interface JobJobClusterNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobJobClusterNewClusterInitScriptFile {
    destination: string;
}

export interface JobJobClusterNewClusterInitScriptGcs {
    destination: string;
}

export interface JobJobClusterNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobJobClusterNewClusterInitScriptVolumes {
    destination: string;
}

export interface JobJobClusterNewClusterInitScriptWorkspace {
    destination: string;
}

export interface JobJobClusterNewClusterLibrary {
    cran?: outputs.JobJobClusterNewClusterLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobJobClusterNewClusterLibraryMaven;
    pypi?: outputs.JobJobClusterNewClusterLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobJobClusterNewClusterLibraryCran {
    package: string;
    repo?: string;
}

export interface JobJobClusterNewClusterLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobJobClusterNewClusterLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobJobClusterNewClusterWorkloadType {
    clients: outputs.JobJobClusterNewClusterWorkloadTypeClients;
}

export interface JobJobClusterNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobLibrary {
    cran?: outputs.JobLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobLibraryMaven;
    pypi?: outputs.JobLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobLibraryCran {
    package: string;
    repo?: string;
}

export interface JobLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.JobNewClusterAutoscale;
    awsAttributes?: outputs.JobNewClusterAwsAttributes;
    azureAttributes?: outputs.JobNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.JobNewClusterClusterLogConf;
    clusterMountInfos?: outputs.JobNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobNewClusterInitScript[];
    instancePoolId?: string;
    isSingleNode?: boolean;
    kind?: string;
    libraries?: outputs.JobNewClusterLibrary[];
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    useMlRuntime?: boolean;
    workloadType?: outputs.JobNewClusterWorkloadType;
}

export interface JobNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: outputs.JobNewClusterAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface JobNewClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface JobNewClusterClusterLogConf {
    dbfs?: outputs.JobNewClusterClusterLogConfDbfs;
    s3?: outputs.JobNewClusterClusterLogConfS3;
}

export interface JobNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.JobNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface JobNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface JobNewClusterDockerImage {
    basicAuth?: outputs.JobNewClusterDockerImageBasicAuth;
    url: string;
}

export interface JobNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobNewClusterInitScript {
    abfss?: outputs.JobNewClusterInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: outputs.JobNewClusterInitScriptDbfs;
    file?: outputs.JobNewClusterInitScriptFile;
    gcs?: outputs.JobNewClusterInitScriptGcs;
    s3?: outputs.JobNewClusterInitScriptS3;
    volumes?: outputs.JobNewClusterInitScriptVolumes;
    workspace?: outputs.JobNewClusterInitScriptWorkspace;
}

export interface JobNewClusterInitScriptAbfss {
    destination: string;
}

export interface JobNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobNewClusterInitScriptFile {
    destination: string;
}

export interface JobNewClusterInitScriptGcs {
    destination: string;
}

export interface JobNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobNewClusterInitScriptVolumes {
    destination: string;
}

export interface JobNewClusterInitScriptWorkspace {
    destination: string;
}

export interface JobNewClusterLibrary {
    cran?: outputs.JobNewClusterLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobNewClusterLibraryMaven;
    pypi?: outputs.JobNewClusterLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobNewClusterLibraryCran {
    package: string;
    repo?: string;
}

export interface JobNewClusterLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobNewClusterLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobNewClusterWorkloadType {
    clients: outputs.JobNewClusterWorkloadTypeClients;
}

export interface JobNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobNotebookTask {
    baseParameters?: {[key: string]: string};
    notebookPath: string;
    source?: string;
    warehouseId?: string;
}

export interface JobNotificationSettings {
    noAlertForCanceledRuns?: boolean;
    noAlertForSkippedRuns?: boolean;
}

export interface JobParameter {
    default: string;
    name: string;
}

export interface JobPipelineTask {
    fullRefresh?: boolean;
    pipelineId: string;
}

export interface JobPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: string};
    packageName?: string;
    parameters?: string[];
}

export interface JobQueue {
    enabled: boolean;
}

export interface JobRunAs {
    servicePrincipalName?: string;
    userName?: string;
}

export interface JobRunJobTask {
    jobId: number;
    jobParameters?: {[key: string]: string};
}

export interface JobSchedule {
    pauseStatus?: string;
    quartzCronExpression: string;
    timezoneId: string;
}

export interface JobSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface JobSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface JobSparkSubmitTask {
    parameters?: string[];
}

export interface JobTask {
    cleanRoomsNotebookTask?: outputs.JobTaskCleanRoomsNotebookTask;
    conditionTask?: outputs.JobTaskConditionTask;
    dbtTask?: outputs.JobTaskDbtTask;
    dependsOns?: outputs.JobTaskDependsOn[];
    description?: string;
    disableAutoOptimization?: boolean;
    emailNotifications?: outputs.JobTaskEmailNotifications;
    environmentKey?: string;
    existingClusterId?: string;
    forEachTask?: outputs.JobTaskForEachTask;
    health?: outputs.JobTaskHealth;
    jobClusterKey?: string;
    libraries?: outputs.JobTaskLibrary[];
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    newCluster?: outputs.JobTaskNewCluster;
    notebookTask?: outputs.JobTaskNotebookTask;
    notificationSettings?: outputs.JobTaskNotificationSettings;
    pipelineTask?: outputs.JobTaskPipelineTask;
    pythonWheelTask?: outputs.JobTaskPythonWheelTask;
    retryOnTimeout: boolean;
    runIf?: string;
    runJobTask?: outputs.JobTaskRunJobTask;
    sparkJarTask?: outputs.JobTaskSparkJarTask;
    sparkPythonTask?: outputs.JobTaskSparkPythonTask;
    sparkSubmitTask?: outputs.JobTaskSparkSubmitTask;
    sqlTask?: outputs.JobTaskSqlTask;
    taskKey: string;
    timeoutSeconds?: number;
    webhookNotifications?: outputs.JobTaskWebhookNotifications;
}

export interface JobTaskCleanRoomsNotebookTask {
    cleanRoomName: string;
    etag?: string;
    notebookBaseParameters?: {[key: string]: string};
    notebookName: string;
}

export interface JobTaskConditionTask {
    left: string;
    op: string;
    right: string;
}

export interface JobTaskDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    source?: string;
    warehouseId?: string;
}

export interface JobTaskDependsOn {
    outcome?: string;
    taskKey: string;
}

export interface JobTaskEmailNotifications {
    noAlertForSkippedRuns?: boolean;
    onDurationWarningThresholdExceededs?: string[];
    onFailures?: string[];
    onStarts?: string[];
    onStreamingBacklogExceededs?: string[];
    onSuccesses?: string[];
}

export interface JobTaskForEachTask {
    concurrency?: number;
    inputs: string;
    task: outputs.JobTaskForEachTaskTask;
}

export interface JobTaskForEachTaskTask {
    cleanRoomsNotebookTask?: outputs.JobTaskForEachTaskTaskCleanRoomsNotebookTask;
    conditionTask?: outputs.JobTaskForEachTaskTaskConditionTask;
    dbtTask?: outputs.JobTaskForEachTaskTaskDbtTask;
    dependsOns?: outputs.JobTaskForEachTaskTaskDependsOn[];
    description?: string;
    disableAutoOptimization?: boolean;
    emailNotifications?: outputs.JobTaskForEachTaskTaskEmailNotifications;
    environmentKey?: string;
    existingClusterId?: string;
    health?: outputs.JobTaskForEachTaskTaskHealth;
    jobClusterKey?: string;
    libraries?: outputs.JobTaskForEachTaskTaskLibrary[];
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    newCluster?: outputs.JobTaskForEachTaskTaskNewCluster;
    notebookTask?: outputs.JobTaskForEachTaskTaskNotebookTask;
    notificationSettings?: outputs.JobTaskForEachTaskTaskNotificationSettings;
    pipelineTask?: outputs.JobTaskForEachTaskTaskPipelineTask;
    pythonWheelTask?: outputs.JobTaskForEachTaskTaskPythonWheelTask;
    retryOnTimeout: boolean;
    runIf?: string;
    runJobTask?: outputs.JobTaskForEachTaskTaskRunJobTask;
    sparkJarTask?: outputs.JobTaskForEachTaskTaskSparkJarTask;
    sparkPythonTask?: outputs.JobTaskForEachTaskTaskSparkPythonTask;
    sparkSubmitTask?: outputs.JobTaskForEachTaskTaskSparkSubmitTask;
    sqlTask?: outputs.JobTaskForEachTaskTaskSqlTask;
    taskKey: string;
    timeoutSeconds?: number;
    webhookNotifications?: outputs.JobTaskForEachTaskTaskWebhookNotifications;
}

export interface JobTaskForEachTaskTaskCleanRoomsNotebookTask {
    cleanRoomName: string;
    etag?: string;
    notebookBaseParameters?: {[key: string]: string};
    notebookName: string;
}

export interface JobTaskForEachTaskTaskConditionTask {
    left: string;
    op: string;
    right: string;
}

export interface JobTaskForEachTaskTaskDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    source?: string;
    warehouseId?: string;
}

export interface JobTaskForEachTaskTaskDependsOn {
    outcome?: string;
    taskKey: string;
}

export interface JobTaskForEachTaskTaskEmailNotifications {
    noAlertForSkippedRuns?: boolean;
    onDurationWarningThresholdExceededs?: string[];
    onFailures?: string[];
    onStarts?: string[];
    onStreamingBacklogExceededs?: string[];
    onSuccesses?: string[];
}

export interface JobTaskForEachTaskTaskHealth {
    rules: outputs.JobTaskForEachTaskTaskHealthRule[];
}

export interface JobTaskForEachTaskTaskHealthRule {
    metric: string;
    op: string;
    value: number;
}

export interface JobTaskForEachTaskTaskLibrary {
    cran?: outputs.JobTaskForEachTaskTaskLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobTaskForEachTaskTaskLibraryMaven;
    pypi?: outputs.JobTaskForEachTaskTaskLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobTaskForEachTaskTaskLibraryCran {
    package: string;
    repo?: string;
}

export interface JobTaskForEachTaskTaskLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobTaskForEachTaskTaskLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobTaskForEachTaskTaskNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.JobTaskForEachTaskTaskNewClusterAutoscale;
    awsAttributes?: outputs.JobTaskForEachTaskTaskNewClusterAwsAttributes;
    azureAttributes?: outputs.JobTaskForEachTaskTaskNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.JobTaskForEachTaskTaskNewClusterClusterLogConf;
    clusterMountInfos?: outputs.JobTaskForEachTaskTaskNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobTaskForEachTaskTaskNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobTaskForEachTaskTaskNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobTaskForEachTaskTaskNewClusterInitScript[];
    instancePoolId?: string;
    isSingleNode?: boolean;
    kind?: string;
    libraries?: outputs.JobTaskForEachTaskTaskNewClusterLibrary[];
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    useMlRuntime?: boolean;
    workloadType?: outputs.JobTaskForEachTaskTaskNewClusterWorkloadType;
}

export interface JobTaskForEachTaskTaskNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobTaskForEachTaskTaskNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobTaskForEachTaskTaskNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: outputs.JobTaskForEachTaskTaskNewClusterAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface JobTaskForEachTaskTaskNewClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface JobTaskForEachTaskTaskNewClusterClusterLogConf {
    dbfs?: outputs.JobTaskForEachTaskTaskNewClusterClusterLogConfDbfs;
    s3?: outputs.JobTaskForEachTaskTaskNewClusterClusterLogConfS3;
}

export interface JobTaskForEachTaskTaskNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobTaskForEachTaskTaskNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.JobTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface JobTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface JobTaskForEachTaskTaskNewClusterDockerImage {
    basicAuth?: outputs.JobTaskForEachTaskTaskNewClusterDockerImageBasicAuth;
    url: string;
}

export interface JobTaskForEachTaskTaskNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobTaskForEachTaskTaskNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScript {
    abfss?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptDbfs;
    file?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptFile;
    gcs?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptGcs;
    s3?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptS3;
    volumes?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptVolumes;
    workspace?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptWorkspace;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptAbfss {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptFile {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptGcs {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptVolumes {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptWorkspace {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterLibrary {
    cran?: outputs.JobTaskForEachTaskTaskNewClusterLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobTaskForEachTaskTaskNewClusterLibraryMaven;
    pypi?: outputs.JobTaskForEachTaskTaskNewClusterLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobTaskForEachTaskTaskNewClusterLibraryCran {
    package: string;
    repo?: string;
}

export interface JobTaskForEachTaskTaskNewClusterLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobTaskForEachTaskTaskNewClusterLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobTaskForEachTaskTaskNewClusterWorkloadType {
    clients: outputs.JobTaskForEachTaskTaskNewClusterWorkloadTypeClients;
}

export interface JobTaskForEachTaskTaskNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobTaskForEachTaskTaskNotebookTask {
    baseParameters?: {[key: string]: string};
    notebookPath: string;
    source?: string;
    warehouseId?: string;
}

export interface JobTaskForEachTaskTaskNotificationSettings {
    alertOnLastAttempt?: boolean;
    noAlertForCanceledRuns?: boolean;
    noAlertForSkippedRuns?: boolean;
}

export interface JobTaskForEachTaskTaskPipelineTask {
    fullRefresh?: boolean;
    pipelineId: string;
}

export interface JobTaskForEachTaskTaskPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: string};
    packageName?: string;
    parameters?: string[];
}

export interface JobTaskForEachTaskTaskRunJobTask {
    dbtCommands?: string[];
    jarParams?: string[];
    jobId: number;
    jobParameters?: {[key: string]: string};
    notebookParams?: {[key: string]: string};
    pipelineParams?: outputs.JobTaskForEachTaskTaskRunJobTaskPipelineParams;
    pythonNamedParams?: {[key: string]: string};
    pythonParams?: string[];
    sparkSubmitParams?: string[];
    sqlParams?: {[key: string]: string};
}

export interface JobTaskForEachTaskTaskRunJobTaskPipelineParams {
    fullRefresh?: boolean;
}

export interface JobTaskForEachTaskTaskSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface JobTaskForEachTaskTaskSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface JobTaskForEachTaskTaskSparkSubmitTask {
    parameters?: string[];
}

export interface JobTaskForEachTaskTaskSqlTask {
    alert?: outputs.JobTaskForEachTaskTaskSqlTaskAlert;
    dashboard?: outputs.JobTaskForEachTaskTaskSqlTaskDashboard;
    file?: outputs.JobTaskForEachTaskTaskSqlTaskFile;
    parameters?: {[key: string]: string};
    query?: outputs.JobTaskForEachTaskTaskSqlTaskQuery;
    warehouseId: string;
}

export interface JobTaskForEachTaskTaskSqlTaskAlert {
    alertId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: outputs.JobTaskForEachTaskTaskSqlTaskAlertSubscription[];
}

export interface JobTaskForEachTaskTaskSqlTaskAlertSubscription {
    destinationId?: string;
    userName?: string;
}

export interface JobTaskForEachTaskTaskSqlTaskDashboard {
    customSubject?: string;
    dashboardId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: outputs.JobTaskForEachTaskTaskSqlTaskDashboardSubscription[];
}

export interface JobTaskForEachTaskTaskSqlTaskDashboardSubscription {
    destinationId?: string;
    userName?: string;
}

export interface JobTaskForEachTaskTaskSqlTaskFile {
    path: string;
    source?: string;
}

export interface JobTaskForEachTaskTaskSqlTaskQuery {
    queryId: string;
}

export interface JobTaskForEachTaskTaskWebhookNotifications {
    onDurationWarningThresholdExceededs?: outputs.JobTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceeded[];
    onFailures?: outputs.JobTaskForEachTaskTaskWebhookNotificationsOnFailure[];
    onStarts?: outputs.JobTaskForEachTaskTaskWebhookNotificationsOnStart[];
    onStreamingBacklogExceededs?: outputs.JobTaskForEachTaskTaskWebhookNotificationsOnStreamingBacklogExceeded[];
    onSuccesses?: outputs.JobTaskForEachTaskTaskWebhookNotificationsOnSuccess[];
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceeded {
    id: string;
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnFailure {
    id: string;
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnStart {
    id: string;
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnStreamingBacklogExceeded {
    id: string;
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnSuccess {
    id: string;
}

export interface JobTaskHealth {
    rules: outputs.JobTaskHealthRule[];
}

export interface JobTaskHealthRule {
    metric: string;
    op: string;
    value: number;
}

export interface JobTaskLibrary {
    cran?: outputs.JobTaskLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobTaskLibraryMaven;
    pypi?: outputs.JobTaskLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobTaskLibraryCran {
    package: string;
    repo?: string;
}

export interface JobTaskLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobTaskLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobTaskNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.JobTaskNewClusterAutoscale;
    awsAttributes?: outputs.JobTaskNewClusterAwsAttributes;
    azureAttributes?: outputs.JobTaskNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.JobTaskNewClusterClusterLogConf;
    clusterMountInfos?: outputs.JobTaskNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobTaskNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobTaskNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobTaskNewClusterInitScript[];
    instancePoolId?: string;
    isSingleNode?: boolean;
    kind?: string;
    libraries?: outputs.JobTaskNewClusterLibrary[];
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    useMlRuntime?: boolean;
    workloadType?: outputs.JobTaskNewClusterWorkloadType;
}

export interface JobTaskNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobTaskNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobTaskNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: outputs.JobTaskNewClusterAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface JobTaskNewClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface JobTaskNewClusterClusterLogConf {
    dbfs?: outputs.JobTaskNewClusterClusterLogConfDbfs;
    s3?: outputs.JobTaskNewClusterClusterLogConfS3;
}

export interface JobTaskNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobTaskNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobTaskNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface JobTaskNewClusterDockerImage {
    basicAuth?: outputs.JobTaskNewClusterDockerImageBasicAuth;
    url: string;
}

export interface JobTaskNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobTaskNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobTaskNewClusterInitScript {
    abfss?: outputs.JobTaskNewClusterInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: outputs.JobTaskNewClusterInitScriptDbfs;
    file?: outputs.JobTaskNewClusterInitScriptFile;
    gcs?: outputs.JobTaskNewClusterInitScriptGcs;
    s3?: outputs.JobTaskNewClusterInitScriptS3;
    volumes?: outputs.JobTaskNewClusterInitScriptVolumes;
    workspace?: outputs.JobTaskNewClusterInitScriptWorkspace;
}

export interface JobTaskNewClusterInitScriptAbfss {
    destination: string;
}

export interface JobTaskNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobTaskNewClusterInitScriptFile {
    destination: string;
}

export interface JobTaskNewClusterInitScriptGcs {
    destination: string;
}

export interface JobTaskNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobTaskNewClusterInitScriptVolumes {
    destination: string;
}

export interface JobTaskNewClusterInitScriptWorkspace {
    destination: string;
}

export interface JobTaskNewClusterLibrary {
    cran?: outputs.JobTaskNewClusterLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobTaskNewClusterLibraryMaven;
    pypi?: outputs.JobTaskNewClusterLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobTaskNewClusterLibraryCran {
    package: string;
    repo?: string;
}

export interface JobTaskNewClusterLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobTaskNewClusterLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobTaskNewClusterWorkloadType {
    clients: outputs.JobTaskNewClusterWorkloadTypeClients;
}

export interface JobTaskNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobTaskNotebookTask {
    baseParameters?: {[key: string]: string};
    notebookPath: string;
    source?: string;
    warehouseId?: string;
}

export interface JobTaskNotificationSettings {
    alertOnLastAttempt?: boolean;
    noAlertForCanceledRuns?: boolean;
    noAlertForSkippedRuns?: boolean;
}

export interface JobTaskPipelineTask {
    fullRefresh?: boolean;
    pipelineId: string;
}

export interface JobTaskPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: string};
    packageName?: string;
    parameters?: string[];
}

export interface JobTaskRunJobTask {
    dbtCommands?: string[];
    jarParams?: string[];
    jobId: number;
    jobParameters?: {[key: string]: string};
    notebookParams?: {[key: string]: string};
    pipelineParams?: outputs.JobTaskRunJobTaskPipelineParams;
    pythonNamedParams?: {[key: string]: string};
    pythonParams?: string[];
    sparkSubmitParams?: string[];
    sqlParams?: {[key: string]: string};
}

export interface JobTaskRunJobTaskPipelineParams {
    fullRefresh?: boolean;
}

export interface JobTaskSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface JobTaskSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface JobTaskSparkSubmitTask {
    parameters?: string[];
}

export interface JobTaskSqlTask {
    alert?: outputs.JobTaskSqlTaskAlert;
    dashboard?: outputs.JobTaskSqlTaskDashboard;
    file?: outputs.JobTaskSqlTaskFile;
    parameters?: {[key: string]: string};
    query?: outputs.JobTaskSqlTaskQuery;
    warehouseId: string;
}

export interface JobTaskSqlTaskAlert {
    alertId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: outputs.JobTaskSqlTaskAlertSubscription[];
}

export interface JobTaskSqlTaskAlertSubscription {
    destinationId?: string;
    userName?: string;
}

export interface JobTaskSqlTaskDashboard {
    customSubject?: string;
    dashboardId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: outputs.JobTaskSqlTaskDashboardSubscription[];
}

export interface JobTaskSqlTaskDashboardSubscription {
    destinationId?: string;
    userName?: string;
}

export interface JobTaskSqlTaskFile {
    path: string;
    source?: string;
}

export interface JobTaskSqlTaskQuery {
    queryId: string;
}

export interface JobTaskWebhookNotifications {
    onDurationWarningThresholdExceededs?: outputs.JobTaskWebhookNotificationsOnDurationWarningThresholdExceeded[];
    onFailures?: outputs.JobTaskWebhookNotificationsOnFailure[];
    onStarts?: outputs.JobTaskWebhookNotificationsOnStart[];
    onStreamingBacklogExceededs?: outputs.JobTaskWebhookNotificationsOnStreamingBacklogExceeded[];
    onSuccesses?: outputs.JobTaskWebhookNotificationsOnSuccess[];
}

export interface JobTaskWebhookNotificationsOnDurationWarningThresholdExceeded {
    id: string;
}

export interface JobTaskWebhookNotificationsOnFailure {
    id: string;
}

export interface JobTaskWebhookNotificationsOnStart {
    id: string;
}

export interface JobTaskWebhookNotificationsOnStreamingBacklogExceeded {
    id: string;
}

export interface JobTaskWebhookNotificationsOnSuccess {
    id: string;
}

export interface JobTrigger {
    fileArrival?: outputs.JobTriggerFileArrival;
    pauseStatus?: string;
    periodic?: outputs.JobTriggerPeriodic;
    table?: outputs.JobTriggerTable;
    tableUpdate?: outputs.JobTriggerTableUpdate;
}

export interface JobTriggerFileArrival {
    minTimeBetweenTriggersSeconds?: number;
    url: string;
    waitAfterLastChangeSeconds?: number;
}

export interface JobTriggerPeriodic {
    interval: number;
    unit: string;
}

export interface JobTriggerTable {
    condition?: string;
    minTimeBetweenTriggersSeconds?: number;
    tableNames?: string[];
    waitAfterLastChangeSeconds?: number;
}

export interface JobTriggerTableUpdate {
    condition?: string;
    minTimeBetweenTriggersSeconds?: number;
    tableNames: string[];
    waitAfterLastChangeSeconds?: number;
}

export interface JobWebhookNotifications {
    onDurationWarningThresholdExceededs?: outputs.JobWebhookNotificationsOnDurationWarningThresholdExceeded[];
    onFailures?: outputs.JobWebhookNotificationsOnFailure[];
    onStarts?: outputs.JobWebhookNotificationsOnStart[];
    onStreamingBacklogExceededs?: outputs.JobWebhookNotificationsOnStreamingBacklogExceeded[];
    onSuccesses?: outputs.JobWebhookNotificationsOnSuccess[];
}

export interface JobWebhookNotificationsOnDurationWarningThresholdExceeded {
    id: string;
}

export interface JobWebhookNotificationsOnFailure {
    id: string;
}

export interface JobWebhookNotificationsOnStart {
    id: string;
}

export interface JobWebhookNotificationsOnStreamingBacklogExceeded {
    id: string;
}

export interface JobWebhookNotificationsOnSuccess {
    id: string;
}

export interface LakehouseMonitorCustomMetric {
    definition: string;
    inputColumns: string[];
    name: string;
    outputDataType: string;
    type: string;
}

export interface LakehouseMonitorDataClassificationConfig {
    enabled?: boolean;
}

export interface LakehouseMonitorInferenceLog {
    granularities: string[];
    labelCol?: string;
    modelIdCol: string;
    predictionCol: string;
    predictionProbaCol?: string;
    problemType: string;
    timestampCol: string;
}

export interface LakehouseMonitorNotifications {
    onFailure?: outputs.LakehouseMonitorNotificationsOnFailure;
    onNewClassificationTagDetected?: outputs.LakehouseMonitorNotificationsOnNewClassificationTagDetected;
}

export interface LakehouseMonitorNotificationsOnFailure {
    emailAddresses?: string[];
}

export interface LakehouseMonitorNotificationsOnNewClassificationTagDetected {
    emailAddresses?: string[];
}

export interface LakehouseMonitorSchedule {
    pauseStatus: string;
    quartzCronExpression: string;
    timezoneId: string;
}

export interface LakehouseMonitorSnapshot {
}

export interface LakehouseMonitorTimeSeries {
    granularities: string[];
    timestampCol: string;
}

export interface LibraryCran {
    package: string;
    repo?: string;
}

export interface LibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface LibraryPypi {
    package: string;
    repo?: string;
}

export interface MetastoreDataAccessAwsIamRole {
    externalId: string;
    roleArn: string;
    unityCatalogIamArn: string;
}

export interface MetastoreDataAccessAzureManagedIdentity {
    accessConnectorId: string;
    credentialId: string;
    managedIdentityId?: string;
}

export interface MetastoreDataAccessAzureServicePrincipal {
    applicationId: string;
    clientSecret: string;
    directoryId: string;
}

export interface MetastoreDataAccessCloudflareApiToken {
    accessKeyId: string;
    accountId: string;
    secretAccessKey: string;
}

export interface MetastoreDataAccessDatabricksGcpServiceAccount {
    credentialId: string;
    email: string;
}

export interface MetastoreDataAccessGcpServiceAccountKey {
    email: string;
    privateKey: string;
    privateKeyId: string;
}

export interface MlflowModelTag {
    key?: string;
    value?: string;
}

export interface MlflowWebhookHttpUrlSpec {
    authorization?: string;
    enableSslVerification?: boolean;
    secret?: string;
    url: string;
}

export interface MlflowWebhookJobSpec {
    accessToken: string;
    jobId: string;
    workspaceUrl?: string;
}

export interface ModelServingAiGateway {
    guardrails?: outputs.ModelServingAiGatewayGuardrails;
    inferenceTableConfig?: outputs.ModelServingAiGatewayInferenceTableConfig;
    rateLimits?: outputs.ModelServingAiGatewayRateLimit[];
    usageTrackingConfig?: outputs.ModelServingAiGatewayUsageTrackingConfig;
}

export interface ModelServingAiGatewayGuardrails {
    input?: outputs.ModelServingAiGatewayGuardrailsInput;
    output?: outputs.ModelServingAiGatewayGuardrailsOutput;
}

export interface ModelServingAiGatewayGuardrailsInput {
    invalidKeywords?: string[];
    pii?: outputs.ModelServingAiGatewayGuardrailsInputPii;
    safety?: boolean;
    validTopics?: string[];
}

export interface ModelServingAiGatewayGuardrailsInputPii {
    behavior: string;
}

export interface ModelServingAiGatewayGuardrailsOutput {
    invalidKeywords?: string[];
    pii?: outputs.ModelServingAiGatewayGuardrailsOutputPii;
    safety?: boolean;
    validTopics?: string[];
}

export interface ModelServingAiGatewayGuardrailsOutputPii {
    behavior: string;
}

export interface ModelServingAiGatewayInferenceTableConfig {
    catalogName?: string;
    enabled?: boolean;
    schemaName?: string;
    tableNamePrefix?: string;
}

export interface ModelServingAiGatewayRateLimit {
    calls: number;
    key?: string;
    renewalPeriod: string;
}

export interface ModelServingAiGatewayUsageTrackingConfig {
    enabled?: boolean;
}

export interface ModelServingConfig {
    autoCaptureConfig?: outputs.ModelServingConfigAutoCaptureConfig;
    servedEntities?: outputs.ModelServingConfigServedEntity[];
    /**
     * @deprecated Please use 'config.served_entities' instead of 'config.served_models'.
     */
    servedModels?: outputs.ModelServingConfigServedModel[];
    trafficConfig: outputs.ModelServingConfigTrafficConfig;
}

export interface ModelServingConfigAutoCaptureConfig {
    catalogName?: string;
    enabled: boolean;
    schemaName?: string;
    tableNamePrefix: string;
}

export interface ModelServingConfigServedEntity {
    entityName?: string;
    entityVersion?: string;
    environmentVars?: {[key: string]: string};
    externalModel?: outputs.ModelServingConfigServedEntityExternalModel;
    instanceProfileArn?: string;
    maxProvisionedThroughput?: number;
    minProvisionedThroughput?: number;
    name: string;
    scaleToZeroEnabled?: boolean;
    workloadSize: string;
    workloadType: string;
}

export interface ModelServingConfigServedEntityExternalModel {
    ai21labsConfig?: outputs.ModelServingConfigServedEntityExternalModelAi21labsConfig;
    amazonBedrockConfig?: outputs.ModelServingConfigServedEntityExternalModelAmazonBedrockConfig;
    anthropicConfig?: outputs.ModelServingConfigServedEntityExternalModelAnthropicConfig;
    cohereConfig?: outputs.ModelServingConfigServedEntityExternalModelCohereConfig;
    databricksModelServingConfig?: outputs.ModelServingConfigServedEntityExternalModelDatabricksModelServingConfig;
    googleCloudVertexAiConfig?: outputs.ModelServingConfigServedEntityExternalModelGoogleCloudVertexAiConfig;
    name: string;
    openaiConfig?: outputs.ModelServingConfigServedEntityExternalModelOpenaiConfig;
    palmConfig?: outputs.ModelServingConfigServedEntityExternalModelPalmConfig;
    provider: string;
    task: string;
}

export interface ModelServingConfigServedEntityExternalModelAi21labsConfig {
    ai21labsApiKey?: string;
    ai21labsApiKeyPlaintext?: string;
}

export interface ModelServingConfigServedEntityExternalModelAmazonBedrockConfig {
    awsAccessKeyId?: string;
    awsAccessKeyIdPlaintext?: string;
    awsRegion: string;
    awsSecretAccessKey?: string;
    awsSecretAccessKeyPlaintext?: string;
    bedrockProvider: string;
}

export interface ModelServingConfigServedEntityExternalModelAnthropicConfig {
    anthropicApiKey?: string;
    anthropicApiKeyPlaintext?: string;
}

export interface ModelServingConfigServedEntityExternalModelCohereConfig {
    cohereApiBase?: string;
    cohereApiKey?: string;
    cohereApiKeyPlaintext?: string;
}

export interface ModelServingConfigServedEntityExternalModelDatabricksModelServingConfig {
    databricksApiToken?: string;
    databricksApiTokenPlaintext?: string;
    databricksWorkspaceUrl: string;
}

export interface ModelServingConfigServedEntityExternalModelGoogleCloudVertexAiConfig {
    privateKey?: string;
    privateKeyPlaintext?: string;
    projectId?: string;
    region?: string;
}

export interface ModelServingConfigServedEntityExternalModelOpenaiConfig {
    microsoftEntraClientId?: string;
    microsoftEntraClientSecret?: string;
    microsoftEntraClientSecretPlaintext?: string;
    microsoftEntraTenantId?: string;
    openaiApiBase?: string;
    openaiApiKey?: string;
    openaiApiKeyPlaintext?: string;
    openaiApiType?: string;
    openaiApiVersion?: string;
    openaiDeploymentName?: string;
    openaiOrganization?: string;
}

export interface ModelServingConfigServedEntityExternalModelPalmConfig {
    palmApiKey?: string;
    palmApiKeyPlaintext?: string;
}

export interface ModelServingConfigServedModel {
    environmentVars?: {[key: string]: string};
    instanceProfileArn?: string;
    maxProvisionedThroughput?: number;
    minProvisionedThroughput?: number;
    modelName: string;
    modelVersion: string;
    name: string;
    scaleToZeroEnabled?: boolean;
    workloadSize?: string;
    workloadType: string;
}

export interface ModelServingConfigTrafficConfig {
    routes?: outputs.ModelServingConfigTrafficConfigRoute[];
}

export interface ModelServingConfigTrafficConfigRoute {
    servedModelName: string;
    trafficPercentage: number;
}

export interface ModelServingRateLimit {
    calls: number;
    key?: string;
    renewalPeriod: string;
}

export interface ModelServingTag {
    key: string;
    value?: string;
}

export interface MountAbfs {
    clientId: string;
    clientSecretKey: string;
    clientSecretScope: string;
    containerName: string;
    directory?: string;
    initializeFileSystem: boolean;
    storageAccountName: string;
    tenantId: string;
}

export interface MountAdl {
    clientId: string;
    clientSecretKey: string;
    clientSecretScope: string;
    directory?: string;
    sparkConfPrefix?: string;
    storageResourceName: string;
    tenantId: string;
}

export interface MountGs {
    bucketName: string;
    serviceAccount?: string;
}

export interface MountS3 {
    bucketName: string;
    instanceProfile?: string;
}

export interface MountWasb {
    authType: string;
    containerName: string;
    directory?: string;
    storageAccountName: string;
    tokenSecretKey: string;
    tokenSecretScope: string;
}

export interface MwsCustomerManagedKeysAwsKeyInfo {
    keyAlias?: string;
    keyArn: string;
    keyRegion: string;
}

export interface MwsCustomerManagedKeysGcpKeyInfo {
    kmsKeyId: string;
}

export interface MwsNetworkConnectivityConfigEgressConfig {
    defaultRules?: outputs.MwsNetworkConnectivityConfigEgressConfigDefaultRules;
    targetRules?: outputs.MwsNetworkConnectivityConfigEgressConfigTargetRules;
}

export interface MwsNetworkConnectivityConfigEgressConfigDefaultRules {
    awsStableIpRule?: outputs.MwsNetworkConnectivityConfigEgressConfigDefaultRulesAwsStableIpRule;
    azureServiceEndpointRule?: outputs.MwsNetworkConnectivityConfigEgressConfigDefaultRulesAzureServiceEndpointRule;
}

export interface MwsNetworkConnectivityConfigEgressConfigDefaultRulesAwsStableIpRule {
    cidrBlocks?: string[];
}

export interface MwsNetworkConnectivityConfigEgressConfigDefaultRulesAzureServiceEndpointRule {
    subnets?: string[];
    targetRegion?: string;
    targetServices?: string[];
}

export interface MwsNetworkConnectivityConfigEgressConfigTargetRules {
    azurePrivateEndpointRules?: outputs.MwsNetworkConnectivityConfigEgressConfigTargetRulesAzurePrivateEndpointRule[];
}

export interface MwsNetworkConnectivityConfigEgressConfigTargetRulesAzurePrivateEndpointRule {
    connectionState?: string;
    creationTime?: number;
    deactivated?: boolean;
    deactivatedAt?: number;
    endpointName?: string;
    groupId?: string;
    networkConnectivityConfigId?: string;
    resourceId?: string;
    ruleId?: string;
    updatedTime?: number;
}

export interface MwsNetworksErrorMessage {
    errorMessage?: string;
    errorType?: string;
}

export interface MwsNetworksGcpNetworkInfo {
    networkProjectId: string;
    podIpRangeName: string;
    serviceIpRangeName: string;
    subnetId: string;
    subnetRegion: string;
    vpcId: string;
}

export interface MwsNetworksVpcEndpoints {
    dataplaneRelays: string[];
    restApis: string[];
}

export interface MwsVpcEndpointGcpVpcEndpointInfo {
    endpointRegion: string;
    projectId: string;
    pscConnectionId: string;
    pscEndpointName: string;
    serviceAttachmentId: string;
}

export interface MwsWorkspacesCloudResourceContainer {
    gcp: outputs.MwsWorkspacesCloudResourceContainerGcp;
}

export interface MwsWorkspacesCloudResourceContainerGcp {
    projectId: string;
}

export interface MwsWorkspacesExternalCustomerInfo {
    authoritativeUserEmail: string;
    authoritativeUserFullName: string;
    customerName: string;
}

export interface MwsWorkspacesGcpManagedNetworkConfig {
    gkeClusterPodIpRange: string;
    gkeClusterServiceIpRange: string;
    subnetCidr: string;
}

export interface MwsWorkspacesGkeConfig {
    connectivityType: string;
    masterIpRange: string;
}

export interface MwsWorkspacesToken {
    comment?: string;
    lifetimeSeconds?: number;
    tokenId: string;
    tokenValue: string;
}

export interface NotificationDestinationConfig {
    email?: outputs.NotificationDestinationConfigEmail;
    genericWebhook?: outputs.NotificationDestinationConfigGenericWebhook;
    microsoftTeams?: outputs.NotificationDestinationConfigMicrosoftTeams;
    pagerduty?: outputs.NotificationDestinationConfigPagerduty;
    slack?: outputs.NotificationDestinationConfigSlack;
}

export interface NotificationDestinationConfigEmail {
    addresses?: string[];
}

export interface NotificationDestinationConfigGenericWebhook {
    password?: string;
    passwordSet: boolean;
    url?: string;
    urlSet: boolean;
    username?: string;
    usernameSet: boolean;
}

export interface NotificationDestinationConfigMicrosoftTeams {
    url?: string;
    urlSet: boolean;
}

export interface NotificationDestinationConfigPagerduty {
    integrationKey?: string;
    integrationKeySet: boolean;
}

export interface NotificationDestinationConfigSlack {
    url?: string;
    urlSet: boolean;
}

export interface OnlineTableSpec {
    performFullCopy?: boolean;
    pipelineId: string;
    primaryKeyColumns?: string[];
    runContinuously?: outputs.OnlineTableSpecRunContinuously;
    runTriggered?: outputs.OnlineTableSpecRunTriggered;
    sourceTableFullName?: string;
    timeseriesKey?: string;
}

export interface OnlineTableSpecRunContinuously {
}

export interface OnlineTableSpecRunTriggered {
}

export interface OnlineTableStatus {
    continuousUpdateStatus?: outputs.OnlineTableStatusContinuousUpdateStatus;
    detailedState?: string;
    failedStatus?: outputs.OnlineTableStatusFailedStatus;
    message?: string;
    provisioningStatus?: outputs.OnlineTableStatusProvisioningStatus;
    triggeredUpdateStatus?: outputs.OnlineTableStatusTriggeredUpdateStatus;
}

export interface OnlineTableStatusContinuousUpdateStatus {
    initialPipelineSyncProgress?: outputs.OnlineTableStatusContinuousUpdateStatusInitialPipelineSyncProgress;
    lastProcessedCommitVersion?: number;
    timestamp?: string;
}

export interface OnlineTableStatusContinuousUpdateStatusInitialPipelineSyncProgress {
    estimatedCompletionTimeSeconds?: number;
    latestVersionCurrentlyProcessing?: number;
    syncProgressCompletion?: number;
    syncedRowCount?: number;
    totalRowCount?: number;
}

export interface OnlineTableStatusFailedStatus {
    lastProcessedCommitVersion?: number;
    timestamp?: string;
}

export interface OnlineTableStatusProvisioningStatus {
    initialPipelineSyncProgress?: outputs.OnlineTableStatusProvisioningStatusInitialPipelineSyncProgress;
}

export interface OnlineTableStatusProvisioningStatusInitialPipelineSyncProgress {
    estimatedCompletionTimeSeconds?: number;
    latestVersionCurrentlyProcessing?: number;
    syncProgressCompletion?: number;
    syncedRowCount?: number;
    totalRowCount?: number;
}

export interface OnlineTableStatusTriggeredUpdateStatus {
    lastProcessedCommitVersion?: number;
    timestamp?: string;
    triggeredUpdateProgress?: outputs.OnlineTableStatusTriggeredUpdateStatusTriggeredUpdateProgress;
}

export interface OnlineTableStatusTriggeredUpdateStatusTriggeredUpdateProgress {
    estimatedCompletionTimeSeconds?: number;
    latestVersionCurrentlyProcessing?: number;
    syncProgressCompletion?: number;
    syncedRowCount?: number;
    totalRowCount?: number;
}

export interface PermissionsAccessControl {
    groupName?: string;
    permissionLevel?: string;
    servicePrincipalName?: string;
    userName?: string;
}

export interface PipelineCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.PipelineClusterAutoscale;
    awsAttributes?: outputs.PipelineClusterAwsAttributes;
    azureAttributes?: outputs.PipelineClusterAzureAttributes;
    clusterLogConf?: outputs.PipelineClusterClusterLogConf;
    customTags?: {[key: string]: string};
    driverInstancePoolId?: string;
    driverNodeTypeId: string;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.PipelineClusterGcpAttributes;
    initScripts?: outputs.PipelineClusterInitScript[];
    instancePoolId?: string;
    label?: string;
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sshPublicKeys?: string[];
}

export interface PipelineClusterAutoscale {
    maxWorkers: number;
    minWorkers: number;
    mode?: string;
}

export interface PipelineClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface PipelineClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: outputs.PipelineClusterAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface PipelineClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface PipelineClusterClusterLogConf {
    dbfs?: outputs.PipelineClusterClusterLogConfDbfs;
    s3?: outputs.PipelineClusterClusterLogConfS3;
}

export interface PipelineClusterClusterLogConfDbfs {
    destination: string;
}

export interface PipelineClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface PipelineClusterGcpAttributes {
    availability?: string;
    googleServiceAccount?: string;
    localSsdCount?: number;
    zoneId?: string;
}

export interface PipelineClusterInitScript {
    abfss?: outputs.PipelineClusterInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: outputs.PipelineClusterInitScriptDbfs;
    file?: outputs.PipelineClusterInitScriptFile;
    gcs?: outputs.PipelineClusterInitScriptGcs;
    s3?: outputs.PipelineClusterInitScriptS3;
    volumes?: outputs.PipelineClusterInitScriptVolumes;
    workspace?: outputs.PipelineClusterInitScriptWorkspace;
}

export interface PipelineClusterInitScriptAbfss {
    destination: string;
}

export interface PipelineClusterInitScriptDbfs {
    destination: string;
}

export interface PipelineClusterInitScriptFile {
    destination: string;
}

export interface PipelineClusterInitScriptGcs {
    destination: string;
}

export interface PipelineClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface PipelineClusterInitScriptVolumes {
    destination: string;
}

export interface PipelineClusterInitScriptWorkspace {
    destination: string;
}

export interface PipelineDeployment {
    kind?: string;
    metadataFilePath?: string;
}

export interface PipelineFilters {
    excludes?: string[];
    includes?: string[];
}

export interface PipelineGatewayDefinition {
    connectionId?: string;
    connectionName?: string;
    gatewayStorageCatalog?: string;
    gatewayStorageName?: string;
    gatewayStorageSchema?: string;
}

export interface PipelineIngestionDefinition {
    connectionName?: string;
    ingestionGatewayId?: string;
    objects?: outputs.PipelineIngestionDefinitionObject[];
    tableConfiguration?: outputs.PipelineIngestionDefinitionTableConfiguration;
}

export interface PipelineIngestionDefinitionObject {
    report?: outputs.PipelineIngestionDefinitionObjectReport;
    schema?: outputs.PipelineIngestionDefinitionObjectSchema;
    table?: outputs.PipelineIngestionDefinitionObjectTable;
}

export interface PipelineIngestionDefinitionObjectReport {
    destinationCatalog?: string;
    destinationSchema?: string;
    destinationTable?: string;
    sourceUrl?: string;
    tableConfiguration?: outputs.PipelineIngestionDefinitionObjectReportTableConfiguration;
}

export interface PipelineIngestionDefinitionObjectReportTableConfiguration {
    primaryKeys?: string[];
    salesforceIncludeFormulaFields?: boolean;
    scdType?: string;
    sequenceBies?: string[];
}

export interface PipelineIngestionDefinitionObjectSchema {
    destinationCatalog?: string;
    destinationSchema?: string;
    sourceCatalog?: string;
    sourceSchema?: string;
    tableConfiguration?: outputs.PipelineIngestionDefinitionObjectSchemaTableConfiguration;
}

export interface PipelineIngestionDefinitionObjectSchemaTableConfiguration {
    primaryKeys?: string[];
    salesforceIncludeFormulaFields?: boolean;
    scdType?: string;
    sequenceBies?: string[];
}

export interface PipelineIngestionDefinitionObjectTable {
    destinationCatalog?: string;
    destinationSchema?: string;
    destinationTable?: string;
    sourceCatalog?: string;
    sourceSchema?: string;
    sourceTable?: string;
    tableConfiguration?: outputs.PipelineIngestionDefinitionObjectTableTableConfiguration;
}

export interface PipelineIngestionDefinitionObjectTableTableConfiguration {
    primaryKeys?: string[];
    salesforceIncludeFormulaFields?: boolean;
    scdType?: string;
    sequenceBies?: string[];
}

export interface PipelineIngestionDefinitionTableConfiguration {
    primaryKeys?: string[];
    salesforceIncludeFormulaFields?: boolean;
    scdType?: string;
    sequenceBies?: string[];
}

export interface PipelineLatestUpdate {
    creationTime?: string;
    state?: string;
    updateId?: string;
}

export interface PipelineLibrary {
    file?: outputs.PipelineLibraryFile;
    jar?: string;
    maven?: outputs.PipelineLibraryMaven;
    notebook?: outputs.PipelineLibraryNotebook;
    /**
     * @deprecated The 'whl' field is deprecated
     */
    whl?: string;
}

export interface PipelineLibraryFile {
    path?: string;
}

export interface PipelineLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface PipelineLibraryNotebook {
    path?: string;
}

export interface PipelineNotification {
    alerts?: string[];
    emailRecipients?: string[];
}

export interface PipelineRestartWindow {
    daysOfWeeks?: string[];
    startHour: number;
    timeZoneId?: string;
}

export interface PipelineTrigger {
    cron?: outputs.PipelineTriggerCron;
    manual?: outputs.PipelineTriggerManual;
}

export interface PipelineTriggerCron {
    quartzCronSchedule?: string;
    timezoneId?: string;
}

export interface PipelineTriggerManual {
}

export interface QualityMonitorCustomMetric {
    definition: string;
    inputColumns: string[];
    name: string;
    outputDataType: string;
    type: string;
}

export interface QualityMonitorDataClassificationConfig {
    enabled?: boolean;
}

export interface QualityMonitorInferenceLog {
    granularities: string[];
    labelCol?: string;
    modelIdCol: string;
    predictionCol: string;
    predictionProbaCol?: string;
    problemType: string;
    timestampCol: string;
}

export interface QualityMonitorNotifications {
    onFailure?: outputs.QualityMonitorNotificationsOnFailure;
    onNewClassificationTagDetected?: outputs.QualityMonitorNotificationsOnNewClassificationTagDetected;
}

export interface QualityMonitorNotificationsOnFailure {
    emailAddresses?: string[];
}

export interface QualityMonitorNotificationsOnNewClassificationTagDetected {
    emailAddresses?: string[];
}

export interface QualityMonitorSchedule {
    pauseStatus: string;
    quartzCronExpression: string;
    timezoneId: string;
}

export interface QualityMonitorSnapshot {
}

export interface QualityMonitorTimeSeries {
    granularities: string[];
    timestampCol: string;
}

export interface QueryParameter {
    dateRangeValue?: outputs.QueryParameterDateRangeValue;
    dateValue?: outputs.QueryParameterDateValue;
    enumValue?: outputs.QueryParameterEnumValue;
    name: string;
    numericValue?: outputs.QueryParameterNumericValue;
    queryBackedValue?: outputs.QueryParameterQueryBackedValue;
    textValue?: outputs.QueryParameterTextValue;
    title?: string;
}

export interface QueryParameterDateRangeValue {
    dateRangeValue?: outputs.QueryParameterDateRangeValueDateRangeValue;
    dynamicDateRangeValue?: string;
    precision?: string;
    startDayOfWeek?: number;
}

export interface QueryParameterDateRangeValueDateRangeValue {
    end: string;
    start: string;
}

export interface QueryParameterDateValue {
    dateValue?: string;
    dynamicDateValue?: string;
    precision?: string;
}

export interface QueryParameterEnumValue {
    enumOptions?: string;
    multiValuesOptions?: outputs.QueryParameterEnumValueMultiValuesOptions;
    values?: string[];
}

export interface QueryParameterEnumValueMultiValuesOptions {
    prefix?: string;
    separator?: string;
    suffix?: string;
}

export interface QueryParameterNumericValue {
    value: number;
}

export interface QueryParameterQueryBackedValue {
    multiValuesOptions?: outputs.QueryParameterQueryBackedValueMultiValuesOptions;
    queryId: string;
    values?: string[];
}

export interface QueryParameterQueryBackedValueMultiValuesOptions {
    prefix?: string;
    separator?: string;
    suffix?: string;
}

export interface QueryParameterTextValue {
    value: string;
}

export interface RecipientIpAccessList {
    allowedIpAddresses?: string[];
}

export interface RecipientPropertiesKvpairs {
    properties: {[key: string]: string};
}

export interface RecipientToken {
    activationUrl: string;
    createdAt: number;
    createdBy: string;
    expirationTime: number;
    id: string;
    updatedAt: number;
    updatedBy: string;
}

export interface RepoSparseCheckout {
    patterns: string[];
}

export interface RestrictWorkspaceAdminsSettingRestrictWorkspaceAdmins {
    status: string;
}

export interface SecretScopeKeyvaultMetadata {
    dnsName: string;
    resourceId: string;
}

export interface ShareObject {
    addedAt: number;
    addedBy: string;
    cdfEnabled?: boolean;
    comment?: string;
    content?: string;
    dataObjectType: string;
    historyDataSharingStatus?: string;
    name: string;
    partitions?: outputs.ShareObjectPartition[];
    sharedAs?: string;
    startVersion?: number;
    status: string;
    stringSharedAs?: string;
}

export interface ShareObjectPartition {
    values?: outputs.ShareObjectPartitionValue[];
}

export interface ShareObjectPartitionValue {
    name: string;
    op: string;
    recipientPropertyKey?: string;
    value?: string;
}

export interface SqlAlertOptions {
    column: string;
    customBody?: string;
    customSubject?: string;
    emptyResultState?: string;
    muted?: boolean;
    op: string;
    value: string;
}

export interface SqlEndpointChannel {
    dbsqlVersion?: string;
    name?: string;
}

export interface SqlEndpointHealth {
    details?: string;
    failureReason?: outputs.SqlEndpointHealthFailureReason;
    message?: string;
    status?: string;
    summary?: string;
}

export interface SqlEndpointHealthFailureReason {
    code?: string;
    parameters?: {[key: string]: string};
    type?: string;
}

export interface SqlEndpointOdbcParams {
    hostname?: string;
    path?: string;
    port?: number;
    protocol?: string;
}

export interface SqlEndpointTags {
    customTags?: outputs.SqlEndpointTagsCustomTag[];
}

export interface SqlEndpointTagsCustomTag {
    key: string;
    value: string;
}

export interface SqlPermissionsPrivilegeAssignment {
    principal: string;
    privileges: string[];
}

export interface SqlQueryParameter {
    date?: outputs.SqlQueryParameterDate;
    dateRange?: outputs.SqlQueryParameterDateRange;
    datetime?: outputs.SqlQueryParameterDatetime;
    datetimeRange?: outputs.SqlQueryParameterDatetimeRange;
    datetimesec?: outputs.SqlQueryParameterDatetimesec;
    datetimesecRange?: outputs.SqlQueryParameterDatetimesecRange;
    enum?: outputs.SqlQueryParameterEnum;
    name: string;
    number?: outputs.SqlQueryParameterNumber;
    query?: outputs.SqlQueryParameterQuery;
    text?: outputs.SqlQueryParameterText;
    title?: string;
}

export interface SqlQueryParameterDate {
    value: string;
}

export interface SqlQueryParameterDateRange {
    range?: outputs.SqlQueryParameterDateRangeRange;
    value?: string;
}

export interface SqlQueryParameterDateRangeRange {
    end: string;
    start: string;
}

export interface SqlQueryParameterDatetime {
    value: string;
}

export interface SqlQueryParameterDatetimeRange {
    range?: outputs.SqlQueryParameterDatetimeRangeRange;
    value?: string;
}

export interface SqlQueryParameterDatetimeRangeRange {
    end: string;
    start: string;
}

export interface SqlQueryParameterDatetimesec {
    value: string;
}

export interface SqlQueryParameterDatetimesecRange {
    range?: outputs.SqlQueryParameterDatetimesecRangeRange;
    value?: string;
}

export interface SqlQueryParameterDatetimesecRangeRange {
    end: string;
    start: string;
}

export interface SqlQueryParameterEnum {
    multiple?: outputs.SqlQueryParameterEnumMultiple;
    options: string[];
    value?: string;
    values?: string[];
}

export interface SqlQueryParameterEnumMultiple {
    prefix?: string;
    separator: string;
    suffix?: string;
}

export interface SqlQueryParameterNumber {
    value: number;
}

export interface SqlQueryParameterQuery {
    multiple?: outputs.SqlQueryParameterQueryMultiple;
    queryId: string;
    value?: string;
    values?: string[];
}

export interface SqlQueryParameterQueryMultiple {
    prefix?: string;
    separator: string;
    suffix?: string;
}

export interface SqlQueryParameterText {
    value: string;
}

export interface SqlQuerySchedule {
    continuous?: outputs.SqlQueryScheduleContinuous;
    daily?: outputs.SqlQueryScheduleDaily;
    weekly?: outputs.SqlQueryScheduleWeekly;
}

export interface SqlQueryScheduleContinuous {
    intervalSeconds: number;
    untilDate?: string;
}

export interface SqlQueryScheduleDaily {
    intervalDays: number;
    timeOfDay: string;
    untilDate?: string;
}

export interface SqlQueryScheduleWeekly {
    dayOfWeek: string;
    intervalWeeks: number;
    timeOfDay: string;
    untilDate?: string;
}

export interface SqlTableColumn {
    comment?: string;
    identity?: string;
    name: string;
    nullable?: boolean;
    type: string;
    typeJson: string;
}

export interface SqlWidgetParameter {
    mapTo?: string;
    name: string;
    title?: string;
    type: string;
    value?: string;
    values?: string[];
}

export interface SqlWidgetPosition {
    autoHeight?: boolean;
    posX?: number;
    posY?: number;
    sizeX: number;
    sizeY: number;
}

export interface StorageCredentialAwsIamRole {
    externalId: string;
    roleArn: string;
    unityCatalogIamArn: string;
}

export interface StorageCredentialAzureManagedIdentity {
    accessConnectorId: string;
    credentialId: string;
    managedIdentityId?: string;
}

export interface StorageCredentialAzureServicePrincipal {
    applicationId: string;
    clientSecret: string;
    directoryId: string;
}

export interface StorageCredentialCloudflareApiToken {
    accessKeyId: string;
    accountId: string;
    secretAccessKey: string;
}

export interface StorageCredentialDatabricksGcpServiceAccount {
    credentialId: string;
    email: string;
}

export interface StorageCredentialGcpServiceAccountKey {
    email: string;
    privateKey: string;
    privateKeyId: string;
}

export interface TableColumn {
    comment?: string;
    name: string;
    nullable?: boolean;
    partitionIndex?: number;
    position: number;
    typeIntervalType?: string;
    typeJson?: string;
    typeName: string;
    typePrecision?: number;
    typeScale?: number;
    typeText: string;
}

export interface VectorSearchEndpointEndpointStatus {
    message?: string;
    state?: string;
}

export interface VectorSearchIndexDeltaSyncIndexSpec {
    embeddingSourceColumns?: outputs.VectorSearchIndexDeltaSyncIndexSpecEmbeddingSourceColumn[];
    embeddingVectorColumns?: outputs.VectorSearchIndexDeltaSyncIndexSpecEmbeddingVectorColumn[];
    embeddingWritebackTable?: string;
    pipelineId: string;
    pipelineType?: string;
    sourceTable?: string;
}

export interface VectorSearchIndexDeltaSyncIndexSpecEmbeddingSourceColumn {
    embeddingModelEndpointName?: string;
    name?: string;
}

export interface VectorSearchIndexDeltaSyncIndexSpecEmbeddingVectorColumn {
    embeddingDimension?: number;
    name?: string;
}

export interface VectorSearchIndexDirectAccessIndexSpec {
    embeddingSourceColumns?: outputs.VectorSearchIndexDirectAccessIndexSpecEmbeddingSourceColumn[];
    embeddingVectorColumns?: outputs.VectorSearchIndexDirectAccessIndexSpecEmbeddingVectorColumn[];
    schemaJson?: string;
}

export interface VectorSearchIndexDirectAccessIndexSpecEmbeddingSourceColumn {
    embeddingModelEndpointName?: string;
    name?: string;
}

export interface VectorSearchIndexDirectAccessIndexSpecEmbeddingVectorColumn {
    embeddingDimension?: number;
    name?: string;
}

export interface VectorSearchIndexStatus {
    indexUrl?: string;
    indexedRowCount?: number;
    message?: string;
    ready?: boolean;
}

