// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessControlRuleSetGrantRule {
    /**
     * a list of principals who are granted a role. The following format is supported:
     * * `users/{username}` (also exposed as `aclPrincipalId` attribute of `databricks.User` resource).
     * * `groups/{groupname}` (also exposed as `aclPrincipalId` attribute of `databricks.Group` resource).
     * * `servicePrincipals/{applicationId}` (also exposed as `aclPrincipalId` attribute of `databricks.ServicePrincipal` resource).
     */
    principals?: string[];
    /**
     * Role to be granted. The supported roles are listed below. For more information about these roles, refer to [service principal roles](https://docs.databricks.com/security/auth-authz/access-control/service-principal-acl.html#service-principal-roles), [group roles](https://docs.databricks.com/en/administration-guide/users-groups/groups.html#manage-roles-on-an-account-group-using-the-workspace-admin-settings-page) or [marketplace roles](https://docs.databricks.com/en/marketplace/get-started-provider.html#assign-the-marketplace-admin-role).
     * * `roles/servicePrincipal.manager` - Manager of a service principal.
     * * `roles/servicePrincipal.user` - User of a service principal.
     * * `roles/group.manager` - Manager of a group.
     * * `roles/marketplace.admin` - Admin of marketplace.
     */
    role: string;
}

export interface ArtifactAllowlistArtifactMatcher {
    /**
     * The artifact path or maven coordinate.
     */
    artifact: string;
    /**
     * The pattern matching type of the artifact. Only `PREFIX_MATCH` is supported.
     */
    matchType: string;
}

export interface ClusterAutoscale {
    /**
     * The maximum number of workers to which the cluster can scale up when overloaded. maxWorkers must be strictly greater than min_workers.
     *
     * When using a [Single Node cluster](https://docs.databricks.com/clusters/single-node.html), `numWorkers` needs to be `0`. It can be set to `0` explicitly, or simply not specified, as it defaults to `0`.  When `numWorkers` is `0`, provider checks for presence of the required Spark configurations:
     *
     * * `spark.master` must have prefix `local`, like `local[*]`
     * * `spark.databricks.cluster.profile` must have value `singleNode`
     *
     * and also `customTag` entry:
     *
     * * `"ResourceClass" = "SingleNode"`
     *
     * The following example demonstrates how to create an single node cluster:
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as databricks from "@pulumi/databricks";
     *
     * const smallest = databricks.getNodeType({
     *     localDisk: true,
     * });
     * const latestLts = databricks.getSparkVersion({
     *     longTermSupport: true,
     * });
     * const singleNode = new databricks.Cluster("single_node", {
     *     clusterName: "Single Node",
     *     sparkVersion: latestLts.then(latestLts => latestLts.id),
     *     nodeTypeId: smallest.then(smallest => smallest.id),
     *     autoterminationMinutes: 20,
     *     sparkConf: {
     *         "spark.databricks.cluster.profile": "singleNode",
     *         "spark.master": "local[*]",
     *     },
     *     customTags: {
     *         ResourceClass: "SingleNode",
     *     },
     * });
     * ```
     */
    maxWorkers?: number;
    /**
     * The minimum number of workers to which the cluster can scale down when underutilized. It is also the initial number of workers the cluster will have after creation.
     */
    minWorkers?: number;
}

export interface ClusterAwsAttributes {
    /**
     * Availability type used for all subsequent nodes past the `firstOnDemand` ones. Valid values are `SPOT`, `SPOT_WITH_FALLBACK` and `ON_DEMAND`. Note: If `firstOnDemand` is zero, this availability type will be used for the entire cluster. Backend default value is `SPOT_WITH_FALLBACK` and could change in the future
     */
    availability?: string;
    /**
     * The number of volumes launched for each instance. You can choose up to 10 volumes. This feature is only enabled for supported node types. Legacy node types cannot specify custom EBS volumes. For node types with no instance store, at least one EBS volume needs to be specified; otherwise, cluster creation will fail. These EBS volumes will be mounted at /ebs0, /ebs1, and etc. Instance store volumes will be mounted at /local_disk0, /local_disk1, and etc. If EBS volumes are attached, Databricks will configure Spark to use only the EBS volumes for scratch storage because heterogeneously sized scratch devices can lead to inefficient disk utilization. If no EBS volumes are attached, Databricks will configure Spark to use instance store volumes. If EBS volumes are specified, then the Spark configuration spark.local.dir will be overridden.
     */
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    /**
     * The size of each EBS volume (in GiB) launched for each instance. For general purpose SSD, this value must be within the range 100 - 4096. For throughput optimized HDD, this value must be within the range 500 - 4096. Custom EBS volumes cannot be specified for the legacy node types (memory-optimized and compute-optimized).
     */
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    /**
     * The type of EBS volumes that will be launched with this cluster. Valid values are `GENERAL_PURPOSE_SSD` or `THROUGHPUT_OPTIMIZED_HDD`. Use this option only if you're not picking *Delta Optimized `i3.*`* node types.
     */
    ebsVolumeType?: string;
    /**
     * The first `firstOnDemand` nodes of the cluster will be placed on on-demand instances. If this value is greater than 0, the cluster driver node will be placed on an on-demand instance. If this value is greater than or equal to the current cluster size, all nodes will be placed on on-demand instances. If this value is less than the current cluster size, `firstOnDemand` nodes will be placed on on-demand instances, and the remainder will be placed on availability instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster. Backend default value is `1` and could change in the future
     */
    firstOnDemand?: number;
    instanceProfileArn?: string;
    /**
     * The max price for AWS spot instances, as a percentage of the corresponding instance typeâ€™s on-demand price. For example, if this field is set to 50, and the cluster needs a new `i3.xlarge` spot instance, then the max price is half of the price of on-demand `i3.xlarge` instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand `i3.xlarge` instances. If not specified, the default value is `100`. When spot instances are requested for this cluster, only spot instances whose max price percentage matches this field will be considered. For safety, we enforce this field to be no more than `10000`.
     */
    spotBidPricePercent?: number;
    /**
     * Identifier for the availability zone/datacenter in which the cluster resides. This string will be of a form like `us-west-2a`. The provided availability zone must be in the same region as the Databricks deployment. For example, `us-west-2a` is not a valid zone ID if the Databricks deployment resides in the `us-east-1` region. Enable automatic availability zone selection ("Auto-AZ"), by setting the value `auto`. Databricks selects the AZ based on available IPs in the workspace subnets and retries in other availability zones if AWS returns insufficient capacity errors.
     */
    zoneId?: string;
}

export interface ClusterAzureAttributes {
    /**
     * Availability type used for all subsequent nodes past the `firstOnDemand` ones. Valid values are `SPOT_AZURE`, `SPOT_WITH_FALLBACK_AZURE`, and `ON_DEMAND_AZURE`. Note: If `firstOnDemand` is zero, this availability type will be used for the entire cluster.
     */
    availability?: string;
    /**
     * The first `firstOnDemand` nodes of the cluster will be placed on on-demand instances. If this value is greater than 0, the cluster driver node will be placed on an on-demand instance. If this value is greater than or equal to the current cluster size, all nodes will be placed on on-demand instances. If this value is less than the current cluster size, `firstOnDemand` nodes will be placed on on-demand instances, and the remainder will be placed on availability instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster.
     */
    firstOnDemand?: number;
    logAnalyticsInfo?: outputs.ClusterAzureAttributesLogAnalyticsInfo;
    /**
     * The max price for Azure spot instances.  Use `-1` to specify the lowest price.
     */
    spotBidMaxPrice?: number;
}

export interface ClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface ClusterCloneFrom {
    sourceClusterId: string;
}

export interface ClusterClusterLogConf {
    dbfs?: outputs.ClusterClusterLogConfDbfs;
    s3?: outputs.ClusterClusterLogConfS3;
}

export interface ClusterClusterLogConfDbfs {
    destination: string;
}

export interface ClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface ClusterClusterMountInfo {
    /**
     * path inside the Spark container.
     *
     * For example, you can mount Azure Data Lake Storage container using the following code:
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as databricks from "@pulumi/databricks";
     *
     * const storageAccount = "ewfw3ggwegwg";
     * const storageContainer = "test";
     * const withNfs = new databricks.Cluster("with_nfs", {clusterMountInfos: [{
     *     networkFilesystemInfo: {
     *         serverAddress: `${storageAccount}.blob.core.windows.net`,
     *         mountOptions: "sec=sys,vers=3,nolock,proto=tcp",
     *     },
     *     remoteMountDirPath: `${storageAccount}/${storageContainer}`,
     *     localMountDirPath: "/mnt/nfs-test",
     * }]});
     * ```
     */
    localMountDirPath: string;
    /**
     * block specifying connection. It consists of:
     */
    networkFilesystemInfo: outputs.ClusterClusterMountInfoNetworkFilesystemInfo;
    /**
     * string specifying path to mount on the remote service.
     */
    remoteMountDirPath?: string;
}

export interface ClusterClusterMountInfoNetworkFilesystemInfo {
    /**
     * string that will be passed as options passed to the `mount` command.
     */
    mountOptions?: string;
    /**
     * host name.
     */
    serverAddress: string;
}

export interface ClusterDockerImage {
    /**
     * `basic_auth.username` and `basic_auth.password` for Docker repository. Docker registry credentials are encrypted when they are stored in Databricks internal storage and when they are passed to a registry upon fetching Docker images at cluster launch. However, other authenticated and authorized API users of this workspace can access the username and password.
     *
     * Example usage with azurerm_container_registry, that you can adapt to your specific use-case:
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as databricks from "@pulumi/databricks";
     * import * as docker from "@pulumi/docker";
     *
     * const _this = new docker.index.RegistryImage("this", {
     *     build: [{}],
     *     name: `${thisAzurermContainerRegistry.loginServer}/sample:latest`,
     * });
     * const thisCluster = new databricks.Cluster("this", {dockerImage: {
     *     url: _this.name,
     *     basicAuth: {
     *         username: thisAzurermContainerRegistry.adminUsername,
     *         password: thisAzurermContainerRegistry.adminPassword,
     *     },
     * }});
     * ```
     */
    basicAuth?: outputs.ClusterDockerImageBasicAuth;
    /**
     * URL for the Docker image
     */
    url: string;
}

export interface ClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface ClusterGcpAttributes {
    /**
     * Availability type used for all nodes. Valid values are `PREEMPTIBLE_GCP`, `PREEMPTIBLE_WITH_FALLBACK_GCP` and `ON_DEMAND_GCP`, default: `ON_DEMAND_GCP`.
     */
    availability?: string;
    /**
     * Boot disk size in GB
     */
    bootDiskSize?: number;
    /**
     * Google Service Account email address that the cluster uses to authenticate with Google Identity. This field is used for authentication with the GCS and BigQuery data sources.
     */
    googleServiceAccount?: string;
    /**
     * Number of local SSD disks (each is 375GB in size) that will be attached to each node of the cluster.
     */
    localSsdCount?: number;
    /**
     * if we should use preemptible executors ([GCP documentation](https://cloud.google.com/compute/docs/instances/preemptible)). *Warning: this field is deprecated in favor of `availability`, and will be removed soon.*
     */
    usePreemptibleExecutors?: boolean;
    /**
     * Identifier for the availability zone in which the cluster resides. This can be one of the following:
     * * `HA` (default): High availability, spread nodes across availability zones for a Databricks deployment region.
     * * `AUTO`: Databricks picks an availability zone to schedule the cluster on.
     * * name of a GCP availability zone: pick one of the available zones from the [list of available availability zones](https://cloud.google.com/compute/docs/regions-zones#available).
     */
    zoneId?: string;
}

export interface ClusterInitScript {
    abfss?: outputs.ClusterInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: outputs.ClusterInitScriptDbfs;
    file?: outputs.ClusterInitScriptFile;
    gcs?: outputs.ClusterInitScriptGcs;
    s3?: outputs.ClusterInitScriptS3;
    volumes?: outputs.ClusterInitScriptVolumes;
    workspace?: outputs.ClusterInitScriptWorkspace;
}

export interface ClusterInitScriptAbfss {
    destination: string;
}

export interface ClusterInitScriptDbfs {
    destination: string;
}

export interface ClusterInitScriptFile {
    destination: string;
}

export interface ClusterInitScriptGcs {
    destination: string;
}

export interface ClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface ClusterInitScriptVolumes {
    destination: string;
}

export interface ClusterInitScriptWorkspace {
    destination: string;
}

export interface ClusterLibrary {
    cran?: outputs.ClusterLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.ClusterLibraryMaven;
    pypi?: outputs.ClusterLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface ClusterLibraryCran {
    package: string;
    repo?: string;
}

export interface ClusterLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface ClusterLibraryPypi {
    package: string;
    repo?: string;
}

export interface ClusterPolicyLibrary {
    cran?: outputs.ClusterPolicyLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.ClusterPolicyLibraryMaven;
    pypi?: outputs.ClusterPolicyLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface ClusterPolicyLibraryCran {
    package: string;
    repo?: string;
}

export interface ClusterPolicyLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface ClusterPolicyLibraryPypi {
    package: string;
    repo?: string;
}

export interface ClusterWorkloadType {
    clients: outputs.ClusterWorkloadTypeClients;
}

export interface ClusterWorkloadTypeClients {
    /**
     * boolean flag defining if it's possible to run Databricks Jobs on this cluster. Default: `true`.
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as databricks from "@pulumi/databricks";
     *
     * const withNfs = new databricks.Cluster("with_nfs", {workloadType: {
     *     clients: {
     *         jobs: false,
     *         notebooks: true,
     *     },
     * }});
     * ```
     */
    jobs?: boolean;
    /**
     * boolean flag defining if it's possible to run notebooks on this cluster. Default: `true`.
     */
    notebooks?: boolean;
}

export interface DefaultNamespaceSettingNamespace {
    /**
     * The value for the setting.
     */
    value?: string;
}

export interface ExternalLocationEncryptionDetails {
    sseEncryptionDetails?: outputs.ExternalLocationEncryptionDetailsSseEncryptionDetails;
}

export interface ExternalLocationEncryptionDetailsSseEncryptionDetails {
    algorithm?: string;
    awsKmsKeyArn?: string;
}

export interface GetCatalogCatalogInfo {
    browseOnly?: boolean;
    /**
     * Type of the catalog, e.g. `MANAGED_CATALOG`, `DELTASHARING_CATALOG`, `SYSTEM_CATALOG`,
     */
    catalogType?: string;
    /**
     * Free-form text description
     */
    comment?: string;
    /**
     * The name of the connection to an external data source.
     */
    connectionName?: string;
    /**
     * Time at which this catalog was created, in epoch milliseconds.
     */
    createdAt?: number;
    /**
     * Username of catalog creator.
     */
    createdBy?: string;
    /**
     * object describing applied predictive optimization flag.
     */
    effectivePredictiveOptimizationFlag?: outputs.GetCatalogCatalogInfoEffectivePredictiveOptimizationFlag;
    /**
     * Whether predictive optimization should be enabled for this object and objects under it.
     */
    enablePredictiveOptimization?: string;
    /**
     * The full name of the catalog. Corresponds with the name field.
     */
    fullName?: string;
    /**
     * Whether the current securable is accessible from all workspaces or a  specific set of workspaces.
     */
    isolationMode?: string;
    /**
     * Unique identifier of parent metastore.
     */
    metastoreId?: string;
    /**
     * name of the catalog
     */
    name?: string;
    /**
     * A map of key-value properties attached to the securable.
     */
    options?: {[key: string]: any};
    /**
     * Current owner of the catalog
     */
    owner?: string;
    /**
     * A map of key-value properties attached to the securable.
     */
    properties?: {[key: string]: any};
    /**
     * The name of delta sharing provider.
     */
    providerName?: string;
    provisioningInfo?: outputs.GetCatalogCatalogInfoProvisioningInfo;
    /**
     * Kind of catalog securable.
     */
    securableKind?: string;
    /**
     * Securable type.
     */
    securableType?: string;
    /**
     * The name of the share under the share provider.
     */
    shareName?: string;
    /**
     * Storage Location URL (full path) for managed tables within catalog.
     */
    storageLocation?: string;
    /**
     * Storage root URL for managed tables within catalog.
     */
    storageRoot?: string;
    /**
     * Time at which this catalog was last modified, in epoch milliseconds.
     */
    updatedAt?: number;
    /**
     * Username of user who last modified catalog.
     */
    updatedBy?: string;
}

export interface GetCatalogCatalogInfoEffectivePredictiveOptimizationFlag {
    inheritedFromName?: string;
    inheritedFromType?: string;
    value: string;
}

export interface GetCatalogCatalogInfoProvisioningInfo {
    state?: string;
}

export interface GetClusterClusterInfo {
    autoscale?: outputs.GetClusterClusterInfoAutoscale;
    /**
     * Automatically terminate the cluster after being inactive for this time in minutes. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination.
     */
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetClusterClusterInfoAwsAttributes;
    azureAttributes?: outputs.GetClusterClusterInfoAzureAttributes;
    clusterCores?: number;
    /**
     * The id of the cluster
     */
    clusterId?: string;
    clusterLogConf?: outputs.GetClusterClusterInfoClusterLogConf;
    clusterLogStatus?: outputs.GetClusterClusterInfoClusterLogStatus;
    clusterMemoryMb?: number;
    /**
     * The exact name of the cluster to search
     */
    clusterName?: string;
    clusterSource: string;
    creatorUserName?: string;
    /**
     * Additional tags for cluster resources.
     */
    customTags?: {[key: string]: any};
    /**
     * Security features of the cluster. Unity Catalog requires `SINGLE_USER` or `USER_ISOLATION` mode. `LEGACY_PASSTHROUGH` for passthrough cluster and `LEGACY_TABLE_ACL` for Table ACL cluster. Default to `NONE`, i.e. no security feature enabled.
     */
    dataSecurityMode?: string;
    defaultTags: {[key: string]: any};
    dockerImage?: outputs.GetClusterClusterInfoDockerImage;
    driver?: outputs.GetClusterClusterInfoDriver;
    /**
     * similar to `instancePoolId`, but for driver node.
     */
    driverInstancePoolId: string;
    /**
     * The node type of the Spark driver.
     */
    driverNodeTypeId?: string;
    /**
     * Use autoscaling local storage.
     */
    enableElasticDisk?: boolean;
    /**
     * Enable local disk encryption.
     */
    enableLocalDiskEncryption?: boolean;
    executors?: outputs.GetClusterClusterInfoExecutor[];
    gcpAttributes?: outputs.GetClusterClusterInfoGcpAttributes;
    initScripts?: outputs.GetClusterClusterInfoInitScript[];
    /**
     * The pool of idle instances the cluster is attached to.
     */
    instancePoolId?: string;
    jdbcPort?: number;
    lastActivityTime?: number;
    lastStateLossTime?: number;
    /**
     * Any supported databricks.getNodeType id.
     */
    nodeTypeId?: string;
    numWorkers?: number;
    /**
     * Identifier of Cluster Policy to validate cluster and preset certain defaults.
     */
    policyId?: string;
    /**
     * The type of runtime of the cluster
     */
    runtimeEngine?: string;
    /**
     * The optional user name of the user to assign to an interactive cluster. This field is required when using standard AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
     */
    singleUserName?: string;
    /**
     * Map with key-value pairs to fine-tune Spark clusters.
     */
    sparkConf?: {[key: string]: any};
    sparkContextId?: number;
    /**
     * Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
     */
    sparkEnvVars?: {[key: string]: any};
    /**
     * [Runtime version](https://docs.databricks.com/runtime/index.html) of the cluster.
     */
    sparkVersion: string;
    /**
     * SSH public key contents that will be added to each Spark node in this cluster.
     */
    sshPublicKeys?: string[];
    startTime?: number;
    state: string;
    stateMessage?: string;
    terminateTime?: number;
    terminationReason?: outputs.GetClusterClusterInfoTerminationReason;
}

export interface GetClusterClusterInfoAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetClusterClusterInfoAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetClusterClusterInfoAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetClusterClusterInfoClusterLogConf {
    dbfs?: outputs.GetClusterClusterInfoClusterLogConfDbfs;
    s3?: outputs.GetClusterClusterInfoClusterLogConfS3;
}

export interface GetClusterClusterInfoClusterLogConfDbfs {
    destination: string;
}

export interface GetClusterClusterInfoClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoClusterLogStatus {
    lastAttempted?: number;
    lastException?: string;
}

export interface GetClusterClusterInfoDockerImage {
    basicAuth?: outputs.GetClusterClusterInfoDockerImageBasicAuth;
    url: string;
}

export interface GetClusterClusterInfoDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetClusterClusterInfoDriver {
    hostPrivateIp?: string;
    instanceId?: string;
    nodeAwsAttributes?: outputs.GetClusterClusterInfoDriverNodeAwsAttributes;
    nodeId?: string;
    privateIp?: string;
    publicDns?: string;
    startTimestamp?: number;
}

export interface GetClusterClusterInfoDriverNodeAwsAttributes {
    isSpot?: boolean;
}

export interface GetClusterClusterInfoExecutor {
    hostPrivateIp?: string;
    instanceId?: string;
    nodeAwsAttributes?: outputs.GetClusterClusterInfoExecutorNodeAwsAttributes;
    nodeId?: string;
    privateIp?: string;
    publicDns?: string;
    startTimestamp?: number;
}

export interface GetClusterClusterInfoExecutorNodeAwsAttributes {
    isSpot?: boolean;
}

export interface GetClusterClusterInfoGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetClusterClusterInfoInitScript {
    abfss?: outputs.GetClusterClusterInfoInitScriptAbfss;
    dbfs?: outputs.GetClusterClusterInfoInitScriptDbfs;
    file?: outputs.GetClusterClusterInfoInitScriptFile;
    gcs?: outputs.GetClusterClusterInfoInitScriptGcs;
    s3?: outputs.GetClusterClusterInfoInitScriptS3;
    volumes?: outputs.GetClusterClusterInfoInitScriptVolumes;
    workspace?: outputs.GetClusterClusterInfoInitScriptWorkspace;
}

export interface GetClusterClusterInfoInitScriptAbfss {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptDbfs {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptFile {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptGcs {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoInitScriptVolumes {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptWorkspace {
    destination: string;
}

export interface GetClusterClusterInfoTerminationReason {
    code?: string;
    parameters?: {[key: string]: any};
    type?: string;
}

export interface GetCurrentMetastoreMetastoreInfo {
    cloud?: string;
    /**
     * Timestamp (in milliseconds) when the current metastore was created.
     */
    createdAt?: number;
    /**
     * the ID of the identity that created the current metastore.
     */
    createdBy?: string;
    /**
     * the ID of the default data access configuration.
     */
    defaultDataAccessConfigId?: string;
    /**
     * The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing.
     */
    deltaSharingOrganizationName?: string;
    /**
     * the expiration duration in seconds on recipient data access tokens.
     */
    deltaSharingRecipientTokenLifetimeInSeconds?: number;
    /**
     * Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL. INTERNAL only allows sharing within the same account, and INTERNAL_AND_EXTERNAL allows cross account sharing and token based sharing.
     */
    deltaSharingScope?: string;
    /**
     * Identifier in form of `<cloud>:<region>:<metastore_id>` for use in Databricks to Databricks Delta Sharing.
     */
    globalMetastoreId?: string;
    /**
     * Metastore ID.
     */
    metastoreId?: string;
    /**
     * Name of metastore.
     */
    name?: string;
    /**
     * Username/group name/sp applicationId of the metastore owner.
     */
    owner?: string;
    /**
     * the version of the privilege model used by the metastore.
     */
    privilegeModelVersion?: string;
    /**
     * (Mandatory for account-level) The region of the metastore.
     */
    region?: string;
    /**
     * Path on cloud storage account, where managed `databricks.Table` are stored.
     */
    storageRoot?: string;
    /**
     * ID of a storage credential used for the `storageRoot`.
     */
    storageRootCredentialId?: string;
    /**
     * Name of a storage credential used for the `storageRoot`.
     */
    storageRootCredentialName?: string;
    /**
     * Timestamp (in milliseconds) when the current metastore was updated.
     */
    updatedAt?: number;
    /**
     * the ID of the identity that updated the current metastore.
     */
    updatedBy?: string;
}

export interface GetDbfsFilePathsPathList {
    fileSize?: number;
    /**
     * Path on DBFS for the file to perform listing
     */
    path?: string;
}

export interface GetExternalLocationExternalLocationInfo {
    /**
     * The ARN of the s3 access point to use with the external location (AWS).
     */
    accessPoint?: string;
    browseOnly?: boolean;
    /**
     * User-supplied comment.
     */
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    credentialId?: string;
    /**
     * Name of the databricks.StorageCredential to use with this external location.
     */
    credentialName?: string;
    /**
     * The options for Server-Side Encryption to be used by each Databricks s3 client when connecting to S3 cloud storage (AWS).
     */
    encryptionDetails?: outputs.GetExternalLocationExternalLocationInfoEncryptionDetails;
    metastoreId?: string;
    /**
     * The name of the storage credential
     */
    name?: string;
    /**
     * Username/groupname/sp applicationId of the external location owner.
     */
    owner?: string;
    /**
     * Indicates whether the external location is read-only.
     */
    readOnly?: boolean;
    updatedAt?: number;
    updatedBy?: string;
    /**
     * Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
     */
    url?: string;
}

export interface GetExternalLocationExternalLocationInfoEncryptionDetails {
    sseEncryptionDetails?: outputs.GetExternalLocationExternalLocationInfoEncryptionDetailsSseEncryptionDetails;
}

export interface GetExternalLocationExternalLocationInfoEncryptionDetailsSseEncryptionDetails {
    algorithm?: string;
    awsKmsKeyArn?: string;
}

export interface GetInstancePoolPoolInfo {
    awsAttributes?: outputs.GetInstancePoolPoolInfoAwsAttributes;
    azureAttributes?: outputs.GetInstancePoolPoolInfoAzureAttributes;
    customTags?: {[key: string]: any};
    defaultTags: {[key: string]: any};
    diskSpec?: outputs.GetInstancePoolPoolInfoDiskSpec;
    enableElasticDisk?: boolean;
    gcpAttributes?: outputs.GetInstancePoolPoolInfoGcpAttributes;
    idleInstanceAutoterminationMinutes: number;
    instancePoolFleetAttributes?: outputs.GetInstancePoolPoolInfoInstancePoolFleetAttribute[];
    instancePoolId: string;
    instancePoolName: string;
    maxCapacity?: number;
    minIdleInstances?: number;
    nodeTypeId?: string;
    preloadedDockerImages?: outputs.GetInstancePoolPoolInfoPreloadedDockerImage[];
    preloadedSparkVersions?: string[];
    state?: string;
    stats?: outputs.GetInstancePoolPoolInfoStats;
}

export interface GetInstancePoolPoolInfoAwsAttributes {
    availability?: string;
    spotBidPricePercent?: number;
    zoneId: string;
}

export interface GetInstancePoolPoolInfoAzureAttributes {
    availability?: string;
    spotBidMaxPrice?: number;
}

export interface GetInstancePoolPoolInfoDiskSpec {
    diskCount?: number;
    diskSize?: number;
    diskType?: outputs.GetInstancePoolPoolInfoDiskSpecDiskType;
}

export interface GetInstancePoolPoolInfoDiskSpecDiskType {
    azureDiskVolumeType?: string;
    ebsVolumeType?: string;
}

export interface GetInstancePoolPoolInfoGcpAttributes {
    gcpAvailability?: string;
    localSsdCount: number;
    zoneId: string;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttribute {
    fleetOnDemandOption?: outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOption;
    fleetSpotOption?: outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOption;
    launchTemplateOverrides: outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverride[];
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverride {
    availabilityZone: string;
    instanceType: string;
}

export interface GetInstancePoolPoolInfoPreloadedDockerImage {
    basicAuth?: outputs.GetInstancePoolPoolInfoPreloadedDockerImageBasicAuth;
    url: string;
}

export interface GetInstancePoolPoolInfoPreloadedDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetInstancePoolPoolInfoStats {
    idleCount?: number;
    pendingIdleCount?: number;
    pendingUsedCount?: number;
    usedCount?: number;
}

export interface GetInstanceProfilesInstanceProfile {
    /**
     * ARN of the instance profile.
     */
    arn: string;
    /**
     * Whether the instance profile is a meta instance profile or not.
     */
    isMeta: boolean;
    /**
     * Name of the instance profile.
     */
    name: string;
    /**
     * ARN of the role attached to the instance profile.
     */
    roleArn: string;
}

export interface GetJobJobSettings {
    createdTime?: number;
    creatorUserName?: string;
    jobId?: number;
    runAsUserName: string;
    settings?: outputs.GetJobJobSettingsSettings;
}

export interface GetJobJobSettingsSettings {
    continuous?: outputs.GetJobJobSettingsSettingsContinuous;
    dbtTask?: outputs.GetJobJobSettingsSettingsDbtTask;
    deployment?: outputs.GetJobJobSettingsSettingsDeployment;
    description?: string;
    editMode?: string;
    emailNotifications?: outputs.GetJobJobSettingsSettingsEmailNotifications;
    environments?: outputs.GetJobJobSettingsSettingsEnvironment[];
    existingClusterId?: string;
    format: string;
    gitSource?: outputs.GetJobJobSettingsSettingsGitSource;
    health?: outputs.GetJobJobSettingsSettingsHealth;
    jobClusters?: outputs.GetJobJobSettingsSettingsJobCluster[];
    libraries?: outputs.GetJobJobSettingsSettingsLibrary[];
    maxConcurrentRuns?: number;
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    /**
     * the job name of databricks.Job if the resource was matched by id.
     */
    name?: string;
    newCluster?: outputs.GetJobJobSettingsSettingsNewCluster;
    notebookTask?: outputs.GetJobJobSettingsSettingsNotebookTask;
    notificationSettings?: outputs.GetJobJobSettingsSettingsNotificationSettings;
    parameters?: outputs.GetJobJobSettingsSettingsParameter[];
    pipelineTask?: outputs.GetJobJobSettingsSettingsPipelineTask;
    pythonWheelTask?: outputs.GetJobJobSettingsSettingsPythonWheelTask;
    queue?: outputs.GetJobJobSettingsSettingsQueue;
    retryOnTimeout?: boolean;
    runAs: outputs.GetJobJobSettingsSettingsRunAs;
    runJobTask?: outputs.GetJobJobSettingsSettingsRunJobTask;
    schedule?: outputs.GetJobJobSettingsSettingsSchedule;
    sparkJarTask?: outputs.GetJobJobSettingsSettingsSparkJarTask;
    sparkPythonTask?: outputs.GetJobJobSettingsSettingsSparkPythonTask;
    sparkSubmitTask?: outputs.GetJobJobSettingsSettingsSparkSubmitTask;
    tags?: {[key: string]: any};
    tasks?: outputs.GetJobJobSettingsSettingsTask[];
    timeoutSeconds?: number;
    trigger?: outputs.GetJobJobSettingsSettingsTrigger;
    webhookNotifications?: outputs.GetJobJobSettingsSettingsWebhookNotifications;
}

export interface GetJobJobSettingsSettingsContinuous {
    pauseStatus?: string;
}

export interface GetJobJobSettingsSettingsDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsDeployment {
    kind: string;
    metadataFilePath?: string;
}

export interface GetJobJobSettingsSettingsEmailNotifications {
    noAlertForSkippedRuns?: boolean;
    onDurationWarningThresholdExceededs?: string[];
    onFailures?: string[];
    onStarts?: string[];
    onSuccesses?: string[];
}

export interface GetJobJobSettingsSettingsEnvironment {
    environmentKey: string;
    spec?: outputs.GetJobJobSettingsSettingsEnvironmentSpec;
}

export interface GetJobJobSettingsSettingsEnvironmentSpec {
    client: string;
    dependencies?: string[];
}

export interface GetJobJobSettingsSettingsGitSource {
    branch?: string;
    commit?: string;
    jobSource?: outputs.GetJobJobSettingsSettingsGitSourceJobSource;
    provider?: string;
    tag?: string;
    url: string;
}

export interface GetJobJobSettingsSettingsGitSourceJobSource {
    dirtyState?: string;
    importFromGitBranch: string;
    jobConfigPath: string;
}

export interface GetJobJobSettingsSettingsHealth {
    rules: outputs.GetJobJobSettingsSettingsHealthRule[];
}

export interface GetJobJobSettingsSettingsHealthRule {
    metric?: string;
    op?: string;
    value?: number;
}

export interface GetJobJobSettingsSettingsJobCluster {
    jobClusterKey?: string;
    newCluster?: outputs.GetJobJobSettingsSettingsJobClusterNewCluster;
}

export interface GetJobJobSettingsSettingsJobClusterNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributes;
    azureAttributes?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConf;
    clusterMountInfos?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConf {
    dbfs?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfs;
    s3?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterDockerImage {
    basicAuth?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScript {
    abfss?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfss;
    dbfs?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfs;
    file?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFile;
    gcs?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcs;
    s3?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3;
    volumes?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumes;
    workspace?: outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspace;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfss {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFile {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcs {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumes {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspace {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterWorkloadType {
    clients: outputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsLibrary {
    cran?: outputs.GetJobJobSettingsSettingsLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.GetJobJobSettingsSettingsLibraryMaven;
    pypi?: outputs.GetJobJobSettingsSettingsLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface GetJobJobSettingsSettingsLibraryCran {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface GetJobJobSettingsSettingsLibraryPypi {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.GetJobJobSettingsSettingsNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetJobJobSettingsSettingsNewClusterAwsAttributes;
    azureAttributes?: outputs.GetJobJobSettingsSettingsNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.GetJobJobSettingsSettingsNewClusterClusterLogConf;
    clusterMountInfos?: outputs.GetJobJobSettingsSettingsNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.GetJobJobSettingsSettingsNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.GetJobJobSettingsSettingsNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.GetJobJobSettingsSettingsNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.GetJobJobSettingsSettingsNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConf {
    dbfs?: outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfDbfs;
    s3?: outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsNewClusterDockerImage {
    basicAuth?: outputs.GetJobJobSettingsSettingsNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScript {
    abfss?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptAbfss;
    dbfs?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptDbfs;
    file?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptFile;
    gcs?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptGcs;
    s3?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptS3;
    volumes?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptVolumes;
    workspace?: outputs.GetJobJobSettingsSettingsNewClusterInitScriptWorkspace;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptAbfss {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptFile {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptGcs {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptVolumes {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptWorkspace {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterWorkloadType {
    clients: outputs.GetJobJobSettingsSettingsNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsNotebookTask {
    baseParameters?: {[key: string]: any};
    notebookPath: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsNotificationSettings {
    noAlertForCanceledRuns?: boolean;
    noAlertForSkippedRuns?: boolean;
}

export interface GetJobJobSettingsSettingsParameter {
    default: string;
    /**
     * the job name of databricks.Job if the resource was matched by id.
     */
    name: string;
}

export interface GetJobJobSettingsSettingsPipelineTask {
    fullRefresh?: boolean;
    pipelineId: string;
}

export interface GetJobJobSettingsSettingsPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: any};
    packageName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsQueue {
    enabled: boolean;
}

export interface GetJobJobSettingsSettingsRunAs {
    servicePrincipalName?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsRunJobTask {
    jobId: number;
    jobParameters?: {[key: string]: any};
}

export interface GetJobJobSettingsSettingsSchedule {
    pauseStatus?: string;
    quartzCronExpression: string;
    timezoneId: string;
}

export interface GetJobJobSettingsSettingsSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsSparkSubmitTask {
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTask {
    conditionTask?: outputs.GetJobJobSettingsSettingsTaskConditionTask;
    dbtTask?: outputs.GetJobJobSettingsSettingsTaskDbtTask;
    dependsOns?: outputs.GetJobJobSettingsSettingsTaskDependsOn[];
    description?: string;
    emailNotifications?: outputs.GetJobJobSettingsSettingsTaskEmailNotifications;
    environmentKey?: string;
    existingClusterId?: string;
    forEachTask?: outputs.GetJobJobSettingsSettingsTaskForEachTask;
    health?: outputs.GetJobJobSettingsSettingsTaskHealth;
    jobClusterKey?: string;
    libraries?: outputs.GetJobJobSettingsSettingsTaskLibrary[];
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    newCluster?: outputs.GetJobJobSettingsSettingsTaskNewCluster;
    notebookTask?: outputs.GetJobJobSettingsSettingsTaskNotebookTask;
    notificationSettings?: outputs.GetJobJobSettingsSettingsTaskNotificationSettings;
    pipelineTask?: outputs.GetJobJobSettingsSettingsTaskPipelineTask;
    pythonWheelTask?: outputs.GetJobJobSettingsSettingsTaskPythonWheelTask;
    retryOnTimeout: boolean;
    runIf?: string;
    runJobTask?: outputs.GetJobJobSettingsSettingsTaskRunJobTask;
    sparkJarTask?: outputs.GetJobJobSettingsSettingsTaskSparkJarTask;
    sparkPythonTask?: outputs.GetJobJobSettingsSettingsTaskSparkPythonTask;
    sparkSubmitTask?: outputs.GetJobJobSettingsSettingsTaskSparkSubmitTask;
    sqlTask?: outputs.GetJobJobSettingsSettingsTaskSqlTask;
    taskKey?: string;
    timeoutSeconds?: number;
    webhookNotifications?: outputs.GetJobJobSettingsSettingsTaskWebhookNotifications;
}

export interface GetJobJobSettingsSettingsTaskConditionTask {
    left: string;
    op: string;
    right: string;
}

export interface GetJobJobSettingsSettingsTaskDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskDependsOn {
    outcome?: string;
    taskKey: string;
}

export interface GetJobJobSettingsSettingsTaskEmailNotifications {
    noAlertForSkippedRuns?: boolean;
    onDurationWarningThresholdExceededs?: string[];
    onFailures?: string[];
    onStarts?: string[];
    onSuccesses?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTask {
    concurrency?: number;
    inputs: string;
    task: outputs.GetJobJobSettingsSettingsTaskForEachTaskTask;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTask {
    conditionTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTask;
    dbtTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTask;
    dependsOns?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOn[];
    description?: string;
    emailNotifications?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotifications;
    environmentKey?: string;
    existingClusterId?: string;
    health?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskHealth;
    jobClusterKey?: string;
    libraries?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibrary[];
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    newCluster?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewCluster;
    notebookTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTask;
    notificationSettings?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettings;
    pipelineTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTask;
    pythonWheelTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTask;
    retryOnTimeout: boolean;
    runIf?: string;
    runJobTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTask;
    sparkJarTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTask;
    sparkPythonTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTask;
    sparkSubmitTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTask;
    sqlTask?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTask;
    taskKey?: string;
    timeoutSeconds?: number;
    webhookNotifications?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotifications;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTask {
    left: string;
    op: string;
    right: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOn {
    outcome?: string;
    taskKey: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotifications {
    noAlertForSkippedRuns?: boolean;
    onDurationWarningThresholdExceededs?: string[];
    onFailures?: string[];
    onStarts?: string[];
    onSuccesses?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskHealth {
    rules: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskHealthRule[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskHealthRule {
    metric?: string;
    op?: string;
    value?: number;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibrary {
    cran?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryMaven;
    pypi?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryCran {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryPypi {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAwsAttributes;
    azureAttributes?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConf;
    clusterMountInfos?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConf {
    dbfs?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfDbfs;
    s3?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImage {
    basicAuth?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScript {
    abfss?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptAbfss;
    dbfs?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptDbfs;
    file?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptFile;
    gcs?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptGcs;
    s3?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptS3;
    volumes?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptVolumes;
    workspace?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptWorkspace;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptAbfss {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptFile {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptGcs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptVolumes {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptWorkspace {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadType {
    clients: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTask {
    baseParameters?: {[key: string]: any};
    notebookPath: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettings {
    alertOnLastAttempt?: boolean;
    noAlertForCanceledRuns?: boolean;
    noAlertForSkippedRuns?: boolean;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTask {
    fullRefresh?: boolean;
    pipelineId: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: any};
    packageName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTask {
    jobId: number;
    jobParameters?: {[key: string]: any};
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTask {
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTask {
    alert?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlert;
    dashboard?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboard;
    file?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskFile;
    parameters?: {[key: string]: any};
    query?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskQuery;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlert {
    alertId: string;
    pauseSubscriptions?: boolean;
    subscriptions: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlertSubscription[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlertSubscription {
    destinationId?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboard {
    customSubject?: string;
    dashboardId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboardSubscription[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboardSubscription {
    destinationId?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskFile {
    path: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskQuery {
    queryId: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotifications {
    onDurationWarningThresholdExceededs?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceeded[];
    onFailures?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnFailure[];
    onStarts?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStart[];
    onSuccesses?: outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnSuccess[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceeded {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnFailure {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStart {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnSuccess {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetJobJobSettingsSettingsTaskHealth {
    rules: outputs.GetJobJobSettingsSettingsTaskHealthRule[];
}

export interface GetJobJobSettingsSettingsTaskHealthRule {
    metric?: string;
    op?: string;
    value?: number;
}

export interface GetJobJobSettingsSettingsTaskLibrary {
    cran?: outputs.GetJobJobSettingsSettingsTaskLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.GetJobJobSettingsSettingsTaskLibraryMaven;
    pypi?: outputs.GetJobJobSettingsSettingsTaskLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface GetJobJobSettingsSettingsTaskLibraryCran {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskLibraryPypi {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.GetJobJobSettingsSettingsTaskNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.GetJobJobSettingsSettingsTaskNewClusterAwsAttributes;
    azureAttributes?: outputs.GetJobJobSettingsSettingsTaskNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConf;
    clusterMountInfos?: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.GetJobJobSettingsSettingsTaskNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.GetJobJobSettingsSettingsTaskNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConf {
    dbfs?: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfs;
    s3?: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterDockerImage {
    basicAuth?: outputs.GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScript {
    abfss?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfss;
    dbfs?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfs;
    file?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptFile;
    gcs?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptGcs;
    s3?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptS3;
    volumes?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumes;
    workspace?: outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspace;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfss {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptFile {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptGcs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumes {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspace {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterWorkloadType {
    clients: outputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsTaskNotebookTask {
    baseParameters?: {[key: string]: any};
    notebookPath: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskNotificationSettings {
    alertOnLastAttempt?: boolean;
    noAlertForCanceledRuns?: boolean;
    noAlertForSkippedRuns?: boolean;
}

export interface GetJobJobSettingsSettingsTaskPipelineTask {
    fullRefresh?: boolean;
    pipelineId: string;
}

export interface GetJobJobSettingsSettingsTaskPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: any};
    packageName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskRunJobTask {
    jobId: number;
    jobParameters?: {[key: string]: any};
}

export interface GetJobJobSettingsSettingsTaskSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskSparkSubmitTask {
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskSqlTask {
    alert?: outputs.GetJobJobSettingsSettingsTaskSqlTaskAlert;
    dashboard?: outputs.GetJobJobSettingsSettingsTaskSqlTaskDashboard;
    file?: outputs.GetJobJobSettingsSettingsTaskSqlTaskFile;
    parameters?: {[key: string]: any};
    query?: outputs.GetJobJobSettingsSettingsTaskSqlTaskQuery;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskAlert {
    alertId: string;
    pauseSubscriptions?: boolean;
    subscriptions: outputs.GetJobJobSettingsSettingsTaskSqlTaskAlertSubscription[];
}

export interface GetJobJobSettingsSettingsTaskSqlTaskAlertSubscription {
    destinationId?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskDashboard {
    customSubject?: string;
    dashboardId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: outputs.GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscription[];
}

export interface GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscription {
    destinationId?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskFile {
    path: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskQuery {
    queryId: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotifications {
    onDurationWarningThresholdExceededs?: outputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnDurationWarningThresholdExceeded[];
    onFailures?: outputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnFailure[];
    onStarts?: outputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnStart[];
    onSuccesses?: outputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnSuccess[];
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnDurationWarningThresholdExceeded {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnFailure {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnStart {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnSuccess {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetJobJobSettingsSettingsTrigger {
    fileArrival?: outputs.GetJobJobSettingsSettingsTriggerFileArrival;
    pauseStatus?: string;
    tableUpdate?: outputs.GetJobJobSettingsSettingsTriggerTableUpdate;
}

export interface GetJobJobSettingsSettingsTriggerFileArrival {
    minTimeBetweenTriggersSeconds?: number;
    url: string;
    waitAfterLastChangeSeconds?: number;
}

export interface GetJobJobSettingsSettingsTriggerTableUpdate {
    condition?: string;
    minTimeBetweenTriggersSeconds?: number;
    tableNames: string[];
    waitAfterLastChangeSeconds?: number;
}

export interface GetJobJobSettingsSettingsWebhookNotifications {
    onDurationWarningThresholdExceededs?: outputs.GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceeded[];
    onFailures?: outputs.GetJobJobSettingsSettingsWebhookNotificationsOnFailure[];
    onStarts?: outputs.GetJobJobSettingsSettingsWebhookNotificationsOnStart[];
    onSuccesses?: outputs.GetJobJobSettingsSettingsWebhookNotificationsOnSuccess[];
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceeded {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnFailure {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnStart {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnSuccess {
    /**
     * the id of databricks.Job if the resource was matched by name.
     */
    id: string;
}

export interface GetMetastoreMetastoreInfo {
    cloud?: string;
    createdAt?: number;
    createdBy?: string;
    defaultDataAccessConfigId?: string;
    /**
     * The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing.
     */
    deltaSharingOrganizationName?: string;
    /**
     * Used to set expiration duration in seconds on recipient data access tokens.
     */
    deltaSharingRecipientTokenLifetimeInSeconds?: number;
    /**
     * Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL. INTERNAL only allows sharing within the same account, and INTERNAL_AND_EXTERNAL allows cross account sharing and token based sharing.
     */
    deltaSharingScope?: string;
    globalMetastoreId?: string;
    /**
     * ID of the metastore
     */
    metastoreId?: string;
    /**
     * Name of the metastore
     */
    name?: string;
    /**
     * Username/groupname/sp applicationId of the metastore owner.
     */
    owner?: string;
    privilegeModelVersion?: string;
    /**
     * Region of the metastore
     */
    region?: string;
    /**
     * Path on cloud storage account, where managed `databricks.Table` are stored.
     */
    storageRoot?: string;
    storageRootCredentialId?: string;
    storageRootCredentialName?: string;
    updatedAt?: number;
    updatedBy?: string;
}

export interface GetMlflowExperimentTag {
    key?: string;
    value?: string;
}

export interface GetMlflowModelLatestVersion {
    creationTimestamp?: number;
    currentStage?: string;
    /**
     * User-specified description for the object.
     */
    description?: string;
    lastUpdatedTimestamp?: number;
    /**
     * Name of the registered model.
     */
    name?: string;
    runId?: string;
    runLink?: string;
    source?: string;
    status?: string;
    statusMessage?: string;
    /**
     * Array of tags associated with the model.
     */
    tags?: outputs.GetMlflowModelLatestVersionTag[];
    /**
     * The username of the user that created the object.
     */
    userId?: string;
    version?: string;
}

export interface GetMlflowModelLatestVersionTag {
    key?: string;
    value?: string;
}

export interface GetMlflowModelTag {
    key?: string;
    value?: string;
}

export interface GetNotebookPathsNotebookPathList {
    language?: string;
    /**
     * Path to workspace directory
     */
    path?: string;
}

export interface GetShareObject {
    addedAt: number;
    addedBy: string;
    cdfEnabled?: boolean;
    /**
     * Description about the object.
     */
    comment?: string;
    /**
     * Type of the object.
     */
    dataObjectType: string;
    historyDataSharingStatus?: string;
    /**
     * The name of the share
     */
    name: string;
    partitions?: outputs.GetShareObjectPartition[];
    sharedAs?: string;
    startVersion?: number;
    status: string;
}

export interface GetShareObjectPartition {
    values: outputs.GetShareObjectPartitionValue[];
}

export interface GetShareObjectPartitionValue {
    /**
     * The name of the share
     */
    name: string;
    op: string;
    recipientPropertyKey?: string;
    value?: string;
}

export interface GetSqlWarehouseChannel {
    dbsqlVersion?: string;
    /**
     * Name of the SQL warehouse to search (case-sensitive).
     */
    name?: string;
}

export interface GetSqlWarehouseHealth {
    details?: string;
    failureReason?: outputs.GetSqlWarehouseHealthFailureReason;
    message?: string;
    status?: string;
    summary?: string;
}

export interface GetSqlWarehouseHealthFailureReason {
    code?: string;
    parameters?: {[key: string]: any};
    type?: string;
}

export interface GetSqlWarehouseOdbcParams {
    hostname?: string;
    path?: string;
    port?: number;
    protocol?: string;
}

export interface GetSqlWarehouseTags {
    customTags?: outputs.GetSqlWarehouseTagsCustomTag[];
}

export interface GetSqlWarehouseTagsCustomTag {
    key?: string;
    value?: string;
}

export interface GetStorageCredentialStorageCredentialInfo {
    awsIamRole?: outputs.GetStorageCredentialStorageCredentialInfoAwsIamRole;
    azureManagedIdentity?: outputs.GetStorageCredentialStorageCredentialInfoAzureManagedIdentity;
    azureServicePrincipal?: outputs.GetStorageCredentialStorageCredentialInfoAzureServicePrincipal;
    cloudflareApiToken?: outputs.GetStorageCredentialStorageCredentialInfoCloudflareApiToken;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    databricksGcpServiceAccount?: outputs.GetStorageCredentialStorageCredentialInfoDatabricksGcpServiceAccount;
    id?: string;
    /**
     * Unique identifier of the parent Metastore.
     */
    metastoreId?: string;
    /**
     * The name of the storage credential
     */
    name?: string;
    /**
     * Username/groupname/sp applicationId of the storage credential owner.
     */
    owner?: string;
    /**
     * Indicates whether the storage credential is only usable for read operations.
     */
    readOnly?: boolean;
    updatedAt?: number;
    updatedBy?: string;
    usedForManagedStorage?: boolean;
}

export interface GetStorageCredentialStorageCredentialInfoAwsIamRole {
    /**
     * (output only) - The external ID used in role assumption to prevent confused deputy problem.
     */
    externalId?: string;
    /**
     * The Amazon Resource Name (ARN) of the AWS IAM role for S3 data access, of the form `arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF`
     */
    roleArn: string;
    /**
     * (output only) - The Amazon Resource Name (ARN) of the AWS IAM user managed by Databricks. This is the identity that is going to assume the AWS IAM role.
     */
    unityCatalogIamArn?: string;
}

export interface GetStorageCredentialStorageCredentialInfoAzureManagedIdentity {
    /**
     * The Resource ID of the Azure Databricks Access Connector resource, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.Databricks/accessConnectors/connector-name`.
     */
    accessConnectorId: string;
    credentialId?: string;
    /**
     * The Resource ID of the Azure User Assigned Managed Identity associated with Azure Databricks Access Connector, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/user-managed-identity-name`.
     */
    managedIdentityId?: string;
}

export interface GetStorageCredentialStorageCredentialInfoAzureServicePrincipal {
    /**
     * The application ID of the application registration within the referenced AAD tenant
     */
    applicationId: string;
    clientSecret: string;
    /**
     * The directory ID corresponding to the Azure Active Directory (AAD) tenant of the application
     */
    directoryId: string;
}

export interface GetStorageCredentialStorageCredentialInfoCloudflareApiToken {
    accessKeyId: string;
    accountId: string;
    secretAccessKey: string;
}

export interface GetStorageCredentialStorageCredentialInfoDatabricksGcpServiceAccount {
    credentialId?: string;
    /**
     * The email of the GCP service account created, to be granted access to relevant buckets.
     */
    email?: string;
}

export interface GetTableTableInfo {
    accessPoint?: string;
    browseOnly?: boolean;
    /**
     * Name of parent catalog.
     */
    catalogName?: string;
    /**
     * Array of ColumnInfo objects of the table's columns
     */
    columns?: outputs.GetTableTableInfoColumn[];
    /**
     * Free-form text description
     */
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    dataAccessConfigurationId?: string;
    /**
     * Table format, e.g. DELTA, CSV, JSON
     */
    dataSourceFormat?: string;
    deletedAt?: number;
    deltaRuntimePropertiesKvpairs?: outputs.GetTableTableInfoDeltaRuntimePropertiesKvpairs;
    effectivePredictiveOptimizationFlag?: outputs.GetTableTableInfoEffectivePredictiveOptimizationFlag;
    enablePredictiveOptimization?: string;
    encryptionDetails?: outputs.GetTableTableInfoEncryptionDetails;
    fullName?: string;
    metastoreId?: string;
    /**
     * Full name of the databricks_table: _`catalog`.`schema`.`table`_
     */
    name?: string;
    /**
     * Current owner of the table
     */
    owner?: string;
    pipelineId?: string;
    properties?: {[key: string]: any};
    rowFilter?: outputs.GetTableTableInfoRowFilter;
    /**
     * Name of parent schema relative to its parent catalog.
     */
    schemaName?: string;
    sqlPath?: string;
    storageCredentialName?: string;
    storageLocation?: string;
    tableConstraints?: outputs.GetTableTableInfoTableConstraint[];
    tableId?: string;
    /**
     * Table type, e.g. MANAGED, EXTERNAL, VIEW
     */
    tableType?: string;
    updatedAt?: number;
    updatedBy?: string;
    /**
     * View definition SQL (when `tableType` is VIEW, MATERIALIZED_VIEW, or STREAMING_TABLE)
     */
    viewDefinition?: string;
    /**
     * View dependencies (when `tableType` is VIEW or MATERIALIZED_VIEW, STREAMING_TABLE)
     */
    viewDependencies?: outputs.GetTableTableInfoViewDependencies;
}

export interface GetTableTableInfoColumn {
    /**
     * Free-form text description
     */
    comment?: string;
    mask?: outputs.GetTableTableInfoColumnMask;
    /**
     * Full name of the databricks_table: _`catalog`.`schema`.`table`_
     */
    name?: string;
    nullable?: boolean;
    partitionIndex?: number;
    position?: number;
    typeIntervalType?: string;
    typeJson?: string;
    typeName?: string;
    typePrecision?: number;
    typeScale?: number;
    typeText?: string;
}

export interface GetTableTableInfoColumnMask {
    functionName?: string;
    usingColumnNames?: string[];
}

export interface GetTableTableInfoDeltaRuntimePropertiesKvpairs {
    deltaRuntimeProperties: {[key: string]: any};
}

export interface GetTableTableInfoEffectivePredictiveOptimizationFlag {
    inheritedFromName?: string;
    inheritedFromType?: string;
    value: string;
}

export interface GetTableTableInfoEncryptionDetails {
    sseEncryptionDetails?: outputs.GetTableTableInfoEncryptionDetailsSseEncryptionDetails;
}

export interface GetTableTableInfoEncryptionDetailsSseEncryptionDetails {
    algorithm?: string;
    awsKmsKeyArn?: string;
}

export interface GetTableTableInfoRowFilter {
    functionName: string;
    inputColumnNames: string[];
}

export interface GetTableTableInfoTableConstraint {
    foreignKeyConstraint?: outputs.GetTableTableInfoTableConstraintForeignKeyConstraint;
    namedTableConstraint?: outputs.GetTableTableInfoTableConstraintNamedTableConstraint;
    primaryKeyConstraint?: outputs.GetTableTableInfoTableConstraintPrimaryKeyConstraint;
}

export interface GetTableTableInfoTableConstraintForeignKeyConstraint {
    childColumns: string[];
    /**
     * Full name of the databricks_table: _`catalog`.`schema`.`table`_
     */
    name: string;
    parentColumns: string[];
    parentTable: string;
}

export interface GetTableTableInfoTableConstraintNamedTableConstraint {
    /**
     * Full name of the databricks_table: _`catalog`.`schema`.`table`_
     */
    name: string;
}

export interface GetTableTableInfoTableConstraintPrimaryKeyConstraint {
    childColumns: string[];
    /**
     * Full name of the databricks_table: _`catalog`.`schema`.`table`_
     */
    name: string;
}

export interface GetTableTableInfoViewDependencies {
    dependencies?: outputs.GetTableTableInfoViewDependenciesDependency[];
}

export interface GetTableTableInfoViewDependenciesDependency {
    function?: outputs.GetTableTableInfoViewDependenciesDependencyFunction;
    table?: outputs.GetTableTableInfoViewDependenciesDependencyTable;
}

export interface GetTableTableInfoViewDependenciesDependencyFunction {
    functionFullName: string;
}

export interface GetTableTableInfoViewDependenciesDependencyTable {
    tableFullName: string;
}

export interface GrantsGrant {
    principal: string;
    privileges: string[];
}

export interface InstancePoolAwsAttributes {
    /**
     * (String) Availability type used for all instances in the pool. Only `ON_DEMAND` and `SPOT` are supported.
     */
    availability?: string;
    /**
     * (Integer) The max price for AWS spot instances, as a percentage of the corresponding instance typeâ€™s on-demand price. For example, if this field is set to 50, and the instance pool needs a new i3.xlarge spot instance, then the max price is half of the price of on-demand i3.xlarge instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand i3.xlarge instances. If not specified, the *default value is 100*. When spot instances are requested for this instance pool, only spot instances whose max price percentage matches this field are considered. *For safety, this field cannot be greater than 10000.*
     */
    spotBidPricePercent?: number;
    /**
     * (String) Identifier for the availability zone/datacenter in which the instance pool resides. This string is of the form like `"us-west-2a"`. The provided availability zone must be in the same region as the Databricks deployment. For example, `"us-west-2a"` is not a valid zone ID if the Databricks deployment resides in the `"us-east-1"` region. If not specified, a default zone is used. You can find the list of available zones as well as the default value by using the [List Zones API](https://docs.databricks.com/dev-tools/api/latest/clusters.html#clusterclusterservicelistavailablezones).
     */
    zoneId: string;
}

export interface InstancePoolAzureAttributes {
    /**
     * Availability type used for all nodes. Valid values are `SPOT_AZURE` and `ON_DEMAND_AZURE`.
     */
    availability?: string;
    /**
     * The max price for Azure spot instances.  Use `-1` to specify the lowest price.
     */
    spotBidMaxPrice?: number;
}

export interface InstancePoolDiskSpec {
    /**
     * (Integer) The number of disks to attach to each instance. This feature is only enabled for supported node types. Users can choose up to the limit of the disks supported by the node type. For node types with no local disk, at least one disk needs to be specified.
     */
    diskCount?: number;
    /**
     * (Integer) The size of each disk (in GiB) to attach.
     */
    diskSize?: number;
    diskType?: outputs.InstancePoolDiskSpecDiskType;
}

export interface InstancePoolDiskSpecDiskType {
    azureDiskVolumeType?: string;
    ebsVolumeType?: string;
}

export interface InstancePoolGcpAttributes {
    /**
     * Availability type used for all nodes. Valid values are `PREEMPTIBLE_GCP`, `PREEMPTIBLE_WITH_FALLBACK_GCP` and `ON_DEMAND_GCP`, default: `ON_DEMAND_GCP`.
     */
    gcpAvailability?: string;
    /**
     * Number of local SSD disks (each is 375GB in size) that will be attached to each node of the cluster.
     */
    localSsdCount: number;
    /**
     * Identifier for the availability zone/datacenter in which the cluster resides. This string will be of a form like `us-central1-a`. The provided availability zone must be in the same region as the Databricks workspace.
     */
    zoneId: string;
}

export interface InstancePoolInstancePoolFleetAttributes {
    fleetOnDemandOption?: outputs.InstancePoolInstancePoolFleetAttributesFleetOnDemandOption;
    fleetSpotOption?: outputs.InstancePoolInstancePoolFleetAttributesFleetSpotOption;
    launchTemplateOverrides: outputs.InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride[];
}

export interface InstancePoolInstancePoolFleetAttributesFleetOnDemandOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface InstancePoolInstancePoolFleetAttributesFleetSpotOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride {
    availabilityZone: string;
    instanceType: string;
}

export interface InstancePoolPreloadedDockerImage {
    /**
     * `basic_auth.username` and `basic_auth.password` for Docker repository. Docker registry credentials are encrypted when they are stored in Databricks internal storage and when they are passed to a registry upon fetching Docker images at cluster launch. However, other authenticated and authorized API users of this workspace can access the username and password.
     *
     * Example usage with azurerm_container_registry, that you can adapt to your specific use-case:
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as databricks from "@pulumi/databricks";
     * import * as docker from "@pulumi/docker";
     *
     * const _this = new docker.index.RegistryImage("this", {
     *     build: [{}],
     *     name: `${thisAzurermContainerRegistry.loginServer}/sample:latest`,
     * });
     * const thisInstancePool = new databricks.InstancePool("this", {preloadedDockerImages: [{
     *     url: _this.name,
     *     basicAuth: {
     *         username: thisAzurermContainerRegistry.adminUsername,
     *         password: thisAzurermContainerRegistry.adminPassword,
     *     },
     * }]});
     * ```
     */
    basicAuth?: outputs.InstancePoolPreloadedDockerImageBasicAuth;
    /**
     * URL for the Docker image
     */
    url: string;
}

export interface InstancePoolPreloadedDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobContinuous {
    /**
     * Indicate whether this continuous job is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pauseStatus` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pauseStatus`.
     */
    pauseStatus?: string;
}

export interface JobDbtTask {
    /**
     * The name of the catalog to use inside Unity Catalog.
     */
    catalog?: string;
    /**
     * (Array) Series of dbt commands to execute in sequence. Every command must start with "dbt".
     */
    commands: string[];
    /**
     * The relative path to the directory in the repository specified by `gitSource` where dbt should look in for the `profiles.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--profile-dir` to a dbt command.
     */
    profilesDirectory?: string;
    /**
     * The path where dbt should look for `dbt_project.yml`. Equivalent to passing `--project-dir` to the dbt CLI.
     * * If `source` is `GIT`: Relative path to the directory in the repository specified in the `gitSource` block. Defaults to the repository's root directory when not specified.
     * * If `source` is `WORKSPACE`: Absolute path to the folder in the workspace.
     */
    projectDirectory?: string;
    /**
     * The name of the schema dbt should run in. Defaults to `default`.
     */
    schema?: string;
    /**
     * The source of the project. Possible values are `WORKSPACE` and `GIT`.  Defaults to `GIT` if a `gitSource` block is present in the job definition.
     */
    source?: string;
    /**
     * The ID of the SQL warehouse that dbt should execute against.
     *
     * You also need to include a `gitSource` block to configure the repository that contains the dbt project.
     */
    warehouseId?: string;
}

export interface JobDeployment {
    kind: string;
    metadataFilePath?: string;
}

export interface JobEmailNotifications {
    /**
     * (Bool) don't send alert for skipped runs. (It's recommended to use the corresponding setting in the `notificationSettings` configuration block).
     */
    noAlertForSkippedRuns?: boolean;
    /**
     * (List) list of emails to notify when the duration of a run exceeds the threshold specified by the `RUN_DURATION_SECONDS` metric in the `health` block.
     *
     * The following parameter is only available for the job level configuration.
     */
    onDurationWarningThresholdExceededs?: string[];
    /**
     * (List) list of emails to notify when the run fails.
     */
    onFailures?: string[];
    /**
     * (List) list of emails to notify when the run starts.
     */
    onStarts?: string[];
    /**
     * (List) list of emails to notify when the run completes successfully.
     */
    onSuccesses?: string[];
}

export interface JobEnvironment {
    environmentKey: string;
    spec?: outputs.JobEnvironmentSpec;
}

export interface JobEnvironmentSpec {
    client: string;
    dependencies?: string[];
}

export interface JobGitSource {
    /**
     * name of the Git branch to use. Conflicts with `tag` and `commit`.
     */
    branch?: string;
    /**
     * hash of Git commit to use. Conflicts with `branch` and `tag`.
     */
    commit?: string;
    gitSnapshot?: outputs.JobGitSourceGitSnapshot;
    jobSource?: outputs.JobGitSourceJobSource;
    /**
     * case insensitive name of the Git provider.  Following values are supported right now (could be a subject for change, consult [Repos API documentation](https://docs.databricks.com/dev-tools/api/latest/repos.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`.
     */
    provider?: string;
    /**
     * name of the Git branch to use. Conflicts with `branch` and `commit`.
     */
    tag?: string;
    /**
     * URL of the Git repository to use.
     */
    url: string;
}

export interface JobGitSourceGitSnapshot {
    usedCommit?: string;
}

export interface JobGitSourceJobSource {
    dirtyState?: string;
    importFromGitBranch: string;
    jobConfigPath: string;
}

export interface JobHealth {
    /**
     * list of rules that are represented as objects with the following attributes:
     */
    rules: outputs.JobHealthRule[];
}

export interface JobHealthRule {
    /**
     * string specifying the metric to check.  The only supported metric is `RUN_DURATION_SECONDS` (check [Jobs REST API documentation](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
     */
    metric?: string;
    /**
     * string specifying the operation used to evaluate the given metric. The only supported operation is `GREATER_THAN`.
     */
    op?: string;
    /**
     * integer value used to compare to the given metric.
     */
    value?: number;
}

export interface JobJobCluster {
    /**
     * Identifier that can be referenced in `task` block, so that cluster is shared between tasks
     */
    jobClusterKey?: string;
    /**
     * Same set of parameters as for databricks.Cluster resource.
     */
    newCluster?: outputs.JobJobClusterNewCluster;
}

export interface JobJobClusterNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.JobJobClusterNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.JobJobClusterNewClusterAwsAttributes;
    azureAttributes?: outputs.JobJobClusterNewClusterAzureAttributes;
    cloneFrom?: outputs.JobJobClusterNewClusterCloneFrom;
    clusterId?: string;
    clusterLogConf?: outputs.JobJobClusterNewClusterClusterLogConf;
    clusterMountInfos?: outputs.JobJobClusterNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobJobClusterNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobJobClusterNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobJobClusterNewClusterInitScript[];
    instancePoolId?: string;
    /**
     * (List) An optional list of libraries to be installed on the cluster that will execute the job. See library Configuration Block below.
     */
    libraries?: outputs.JobJobClusterNewClusterLibrary[];
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.JobJobClusterNewClusterWorkloadType;
}

export interface JobJobClusterNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobJobClusterNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobJobClusterNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: outputs.JobJobClusterNewClusterAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface JobJobClusterNewClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface JobJobClusterNewClusterCloneFrom {
    sourceClusterId: string;
}

export interface JobJobClusterNewClusterClusterLogConf {
    dbfs?: outputs.JobJobClusterNewClusterClusterLogConfDbfs;
    s3?: outputs.JobJobClusterNewClusterClusterLogConfS3;
}

export interface JobJobClusterNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobJobClusterNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobJobClusterNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface JobJobClusterNewClusterDockerImage {
    basicAuth?: outputs.JobJobClusterNewClusterDockerImageBasicAuth;
    /**
     * URL of the job on the given workspace
     */
    url: string;
}

export interface JobJobClusterNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobJobClusterNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobJobClusterNewClusterInitScript {
    abfss?: outputs.JobJobClusterNewClusterInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: outputs.JobJobClusterNewClusterInitScriptDbfs;
    file?: outputs.JobJobClusterNewClusterInitScriptFile;
    gcs?: outputs.JobJobClusterNewClusterInitScriptGcs;
    s3?: outputs.JobJobClusterNewClusterInitScriptS3;
    volumes?: outputs.JobJobClusterNewClusterInitScriptVolumes;
    workspace?: outputs.JobJobClusterNewClusterInitScriptWorkspace;
}

export interface JobJobClusterNewClusterInitScriptAbfss {
    destination: string;
}

export interface JobJobClusterNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobJobClusterNewClusterInitScriptFile {
    destination: string;
}

export interface JobJobClusterNewClusterInitScriptGcs {
    destination: string;
}

export interface JobJobClusterNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobJobClusterNewClusterInitScriptVolumes {
    destination: string;
}

export interface JobJobClusterNewClusterInitScriptWorkspace {
    destination: string;
}

export interface JobJobClusterNewClusterLibrary {
    cran?: outputs.JobJobClusterNewClusterLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobJobClusterNewClusterLibraryMaven;
    pypi?: outputs.JobJobClusterNewClusterLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobJobClusterNewClusterLibraryCran {
    package: string;
    repo?: string;
}

export interface JobJobClusterNewClusterLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobJobClusterNewClusterLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobJobClusterNewClusterWorkloadType {
    clients: outputs.JobJobClusterNewClusterWorkloadTypeClients;
}

export interface JobJobClusterNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobLibrary {
    cran?: outputs.JobLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobLibraryMaven;
    pypi?: outputs.JobLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobLibraryCran {
    package: string;
    repo?: string;
}

export interface JobLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.JobNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.JobNewClusterAwsAttributes;
    azureAttributes?: outputs.JobNewClusterAzureAttributes;
    cloneFrom?: outputs.JobNewClusterCloneFrom;
    clusterId?: string;
    clusterLogConf?: outputs.JobNewClusterClusterLogConf;
    clusterMountInfos?: outputs.JobNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobNewClusterInitScript[];
    instancePoolId?: string;
    /**
     * (List) An optional list of libraries to be installed on the cluster that will execute the job. See library Configuration Block below.
     */
    libraries?: outputs.JobNewClusterLibrary[];
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.JobNewClusterWorkloadType;
}

export interface JobNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: outputs.JobNewClusterAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface JobNewClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface JobNewClusterCloneFrom {
    sourceClusterId: string;
}

export interface JobNewClusterClusterLogConf {
    dbfs?: outputs.JobNewClusterClusterLogConfDbfs;
    s3?: outputs.JobNewClusterClusterLogConfS3;
}

export interface JobNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.JobNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface JobNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface JobNewClusterDockerImage {
    basicAuth?: outputs.JobNewClusterDockerImageBasicAuth;
    /**
     * URL of the job on the given workspace
     */
    url: string;
}

export interface JobNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobNewClusterInitScript {
    abfss?: outputs.JobNewClusterInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: outputs.JobNewClusterInitScriptDbfs;
    file?: outputs.JobNewClusterInitScriptFile;
    gcs?: outputs.JobNewClusterInitScriptGcs;
    s3?: outputs.JobNewClusterInitScriptS3;
    volumes?: outputs.JobNewClusterInitScriptVolumes;
    workspace?: outputs.JobNewClusterInitScriptWorkspace;
}

export interface JobNewClusterInitScriptAbfss {
    destination: string;
}

export interface JobNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobNewClusterInitScriptFile {
    destination: string;
}

export interface JobNewClusterInitScriptGcs {
    destination: string;
}

export interface JobNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobNewClusterInitScriptVolumes {
    destination: string;
}

export interface JobNewClusterInitScriptWorkspace {
    destination: string;
}

export interface JobNewClusterLibrary {
    cran?: outputs.JobNewClusterLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobNewClusterLibraryMaven;
    pypi?: outputs.JobNewClusterLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobNewClusterLibraryCran {
    package: string;
    repo?: string;
}

export interface JobNewClusterLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobNewClusterLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobNewClusterWorkloadType {
    clients: outputs.JobNewClusterWorkloadTypeClients;
}

export interface JobNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobNotebookTask {
    /**
     * (Map) Base parameters to be used for each run of this job. If the run is initiated by a call to run-now with parameters specified, the two parameters maps will be merged. If the same key is specified in baseParameters and in run-now, the value from run-now will be used. If the notebook takes a parameter that is not specified in the jobâ€™s baseParameters or the run-now override parameters, the default value from the notebook will be used. Retrieve these parameters in a notebook using `dbutils.widgets.get`.
     */
    baseParameters?: {[key: string]: any};
    /**
     * The path of the databricks.Notebook to be run in the Databricks workspace or remote repository. For notebooks stored in the Databricks workspace, the path must be absolute and begin with a slash. For notebooks stored in a remote repository, the path must be relative. This field is required.
     */
    notebookPath: string;
    /**
     * Location type of the notebook, can only be `WORKSPACE` or `GIT`. When set to `WORKSPACE`, the notebook will be retrieved from the local Databricks workspace. When set to `GIT`, the notebook will be retrieved from a Git repository defined in `gitSource`. If the value is empty, the task will use `GIT` if `gitSource` is defined and `WORKSPACE` otherwise.
     */
    source?: string;
    /**
     * ID of the (the databricks_sql_endpoint) that will be used to execute the task with SQL notebook.
     */
    warehouseId?: string;
}

export interface JobNotificationSettings {
    /**
     * (Bool) don't send alert for cancelled runs.
     *
     * The following parameter is only available on task level.
     */
    noAlertForCanceledRuns?: boolean;
    /**
     * (Bool) don't send alert for skipped runs.
     */
    noAlertForSkippedRuns?: boolean;
}

export interface JobParameter {
    /**
     * Default value of the parameter.
     *
     * *You can use this block only together with `task` blocks, not with the legacy tasks specification!*
     */
    default: string;
    /**
     * The name of the defined parameter. May only contain alphanumeric characters, `_`, `-`, and `.`.
     */
    name: string;
}

export interface JobPipelineTask {
    /**
     * (Bool) Specifies if there should be full refresh of the pipeline.
     *
     * > **Note** The following configuration blocks are only supported inside a `task` block
     */
    fullRefresh?: boolean;
    /**
     * The pipeline's unique ID.
     */
    pipelineId: string;
}

export interface JobPythonWheelTask {
    /**
     * Python function as entry point for the task
     */
    entryPoint?: string;
    /**
     * Named parameters for the task
     */
    namedParameters?: {[key: string]: any};
    /**
     * Name of Python package
     */
    packageName?: string;
    /**
     * Parameters for the task
     */
    parameters?: string[];
}

export interface JobQueue {
    /**
     * If true, enable queueing for the job.
     */
    enabled: boolean;
}

export interface JobRunAs {
    /**
     * The application ID of an active service principal. Setting this field requires the `servicePrincipal/user` role.
     *
     * Example:
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as databricks from "@pulumi/databricks";
     *
     * const _this = new databricks.Job("this", {runAs: {
     *     servicePrincipalName: "8d23ae77-912e-4a19-81e4-b9c3f5cc9349",
     * }});
     * ```
     */
    servicePrincipalName?: string;
    /**
     * The email of an active workspace user. Non-admin users can only set this field to their own email.
     */
    userName?: string;
}

export interface JobRunJobTask {
    /**
     * (String) ID of the job
     */
    jobId: number;
    /**
     * (Map) Job parameters for the task
     */
    jobParameters?: {[key: string]: any};
}

export interface JobSchedule {
    /**
     * Indicate whether this schedule is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pauseStatus` field is omitted and a schedule is provided, the server will default to using `UNPAUSED` as a value for `pauseStatus`.
     */
    pauseStatus?: string;
    /**
     * A [Cron expression using Quartz syntax](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) that describes the schedule for a job. This field is required.
     */
    quartzCronExpression: string;
    /**
     * A Java timezone ID. The schedule for a job will be resolved with respect to this timezone. See Java TimeZone for details. This field is required.
     */
    timezoneId: string;
}

export interface JobSparkJarTask {
    jarUri?: string;
    /**
     * The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. The code should use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs of the job will fail.
     */
    mainClassName?: string;
    /**
     * (List) Parameters passed to the main method.
     */
    parameters?: string[];
}

export interface JobSparkPythonTask {
    /**
     * (List) Command line parameters passed to the Python file.
     */
    parameters?: string[];
    /**
     * The URI of the Python file to be executed. databricks_dbfs_file, cloud file URIs (e.g. `s3:/`, `abfss:/`, `gs:/`), workspace paths and remote repository are supported. For Python files stored in the Databricks workspace, the path must be absolute and begin with `/Repos`. For files stored in a remote repository, the path must be relative. This field is required.
     */
    pythonFile: string;
    /**
     * Location type of the Python file, can only be `GIT`. When set to `GIT`, the Python file will be retrieved from a Git repository defined in `gitSource`.
     */
    source?: string;
}

export interface JobSparkSubmitTask {
    /**
     * (List) Command-line parameters passed to spark submit.
     */
    parameters?: string[];
}

export interface JobTask {
    conditionTask?: outputs.JobTaskConditionTask;
    dbtTask?: outputs.JobTaskDbtTask;
    /**
     * block specifying dependency(-ies) for a given task.
     */
    dependsOns?: outputs.JobTaskDependsOn[];
    /**
     * An optional description for the job. The maximum length is 1024 characters in UTF-8 encoding.
     */
    description?: string;
    disableAutoOptimization?: boolean;
    /**
     * (List) An optional set of email addresses notified when this task begins, completes or fails. The default behavior is to not send any emails. This field is a block and is documented below.
     */
    emailNotifications?: outputs.JobTaskEmailNotifications;
    environmentKey?: string;
    /**
     * Identifier of the interactive cluster to run job on.  *Note: running tasks on interactive clusters may lead to increased costs!*
     */
    existingClusterId?: string;
    forEachTask?: outputs.JobTaskForEachTask;
    /**
     * block described below that specifies health conditions for a given task.
     *
     * > **Note** If no `jobClusterKey`, `existingClusterId`, or `newCluster` were specified in task definition, then task will executed using serverless compute.
     */
    health?: outputs.JobTaskHealth;
    /**
     * Identifier of the Job cluster specified in the `jobCluster` block.
     */
    jobClusterKey?: string;
    /**
     * (Set) An optional list of libraries to be installed on the cluster that will execute the job.
     */
    libraries?: outputs.JobTaskLibrary[];
    /**
     * (Integer) An optional maximum number of times to retry an unsuccessful run. A run is considered to be unsuccessful if it completes with a `FAILED` or `INTERNAL_ERROR` lifecycle state. The value -1 means to retry indefinitely and the value 0 means to never retry. The default behavior is to never retry. A run can have the following lifecycle state: `PENDING`, `RUNNING`, `TERMINATING`, `TERMINATED`, `SKIPPED` or `INTERNAL_ERROR`.
     */
    maxRetries?: number;
    /**
     * (Integer) An optional minimal interval in milliseconds between the start of the failed run and the subsequent retry run. The default behavior is that unsuccessful runs are immediately retried.
     */
    minRetryIntervalMillis?: number;
    /**
     * Task will run on a dedicated cluster.  See databricks.Cluster documentation for specification.
     */
    newCluster?: outputs.JobTaskNewCluster;
    notebookTask?: outputs.JobTaskNotebookTask;
    /**
     * An optional block controlling the notification settings on the job level documented below.
     */
    notificationSettings?: outputs.JobTaskNotificationSettings;
    pipelineTask?: outputs.JobTaskPipelineTask;
    pythonWheelTask?: outputs.JobTaskPythonWheelTask;
    /**
     * (Bool) An optional policy to specify whether to retry a job when it times out. The default behavior is to not retry on timeout.
     */
    retryOnTimeout: boolean;
    /**
     * An optional value indicating the condition that determines whether the task should be run once its dependencies have been completed. One of `ALL_SUCCESS`, `AT_LEAST_ONE_SUCCESS`, `NONE_FAILED`, `ALL_DONE`, `AT_LEAST_ONE_FAILED` or `ALL_FAILED`. When omitted, defaults to `ALL_SUCCESS`.
     */
    runIf?: string;
    runJobTask?: outputs.JobTaskRunJobTask;
    sparkJarTask?: outputs.JobTaskSparkJarTask;
    sparkPythonTask?: outputs.JobTaskSparkPythonTask;
    sparkSubmitTask?: outputs.JobTaskSparkSubmitTask;
    sqlTask?: outputs.JobTaskSqlTask;
    /**
     * string specifying an unique key for a given task.
     * * `*_task` - (Required) one of the specific task blocks described below:
     */
    taskKey?: string;
    /**
     * (Integer) An optional timeout applied to each run of this job. The default behavior is to have no timeout.
     */
    timeoutSeconds?: number;
    /**
     * (List) An optional set of system destinations (for example, webhook destinations or Slack) to be notified when runs of this task begins, completes or fails. The default behavior is to not send any notifications. This field is a block and is documented below.
     */
    webhookNotifications?: outputs.JobTaskWebhookNotifications;
}

export interface JobTaskConditionTask {
    /**
     * The left operand of the condition task. It could be a string value, job state, or a parameter reference.
     */
    left: string;
    /**
     * The string specifying the operation used to compare operands.  Currently, following operators are supported: `EQUAL_TO`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `NOT_EQUAL`. (Check the [API docs](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
     *
     * This task does not require a cluster to execute and does not support retries or notifications.
     */
    op: string;
    /**
     * The right operand of the condition task. It could be a string value, job state, or parameter reference.
     */
    right: string;
}

export interface JobTaskDbtTask {
    /**
     * The name of the catalog to use inside Unity Catalog.
     */
    catalog?: string;
    /**
     * (Array) Series of dbt commands to execute in sequence. Every command must start with "dbt".
     */
    commands: string[];
    /**
     * The relative path to the directory in the repository specified by `gitSource` where dbt should look in for the `profiles.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--profile-dir` to a dbt command.
     */
    profilesDirectory?: string;
    /**
     * The path where dbt should look for `dbt_project.yml`. Equivalent to passing `--project-dir` to the dbt CLI.
     * * If `source` is `GIT`: Relative path to the directory in the repository specified in the `gitSource` block. Defaults to the repository's root directory when not specified.
     * * If `source` is `WORKSPACE`: Absolute path to the folder in the workspace.
     */
    projectDirectory?: string;
    /**
     * The name of the schema dbt should run in. Defaults to `default`.
     */
    schema?: string;
    /**
     * The source of the project. Possible values are `WORKSPACE` and `GIT`.  Defaults to `GIT` if a `gitSource` block is present in the job definition.
     */
    source?: string;
    /**
     * The ID of the SQL warehouse that dbt should execute against.
     *
     * You also need to include a `gitSource` block to configure the repository that contains the dbt project.
     */
    warehouseId?: string;
}

export interface JobTaskDependsOn {
    outcome?: string;
    /**
     * The name of the task this task depends on.
     */
    taskKey: string;
}

export interface JobTaskEmailNotifications {
    /**
     * (Bool) don't send alert for skipped runs. (It's recommended to use the corresponding setting in the `notificationSettings` configuration block).
     */
    noAlertForSkippedRuns?: boolean;
    /**
     * (List) list of emails to notify when the duration of a run exceeds the threshold specified by the `RUN_DURATION_SECONDS` metric in the `health` block.
     *
     * The following parameter is only available for the job level configuration.
     */
    onDurationWarningThresholdExceededs?: string[];
    /**
     * (List) list of emails to notify when the run fails.
     */
    onFailures?: string[];
    /**
     * (List) list of emails to notify when the run starts.
     */
    onStarts?: string[];
    /**
     * (List) list of emails to notify when the run completes successfully.
     */
    onSuccesses?: string[];
}

export interface JobTaskForEachTask {
    /**
     * Controls the number of active iteration task runs. Default is 20, maximum allowed is 100.
     */
    concurrency?: number;
    /**
     * (String) Array for task to iterate on. This can be a JSON string or a reference to an array parameter.
     */
    inputs: string;
    /**
     * Task to run against the `inputs` list.
     */
    task: outputs.JobTaskForEachTaskTask;
}

export interface JobTaskForEachTaskTask {
    conditionTask?: outputs.JobTaskForEachTaskTaskConditionTask;
    dbtTask?: outputs.JobTaskForEachTaskTaskDbtTask;
    /**
     * block specifying dependency(-ies) for a given task.
     */
    dependsOns?: outputs.JobTaskForEachTaskTaskDependsOn[];
    /**
     * An optional description for the job. The maximum length is 1024 characters in UTF-8 encoding.
     */
    description?: string;
    disableAutoOptimization?: boolean;
    /**
     * (List) An optional set of email addresses notified when this task begins, completes or fails. The default behavior is to not send any emails. This field is a block and is documented below.
     */
    emailNotifications?: outputs.JobTaskForEachTaskTaskEmailNotifications;
    environmentKey?: string;
    /**
     * Identifier of the interactive cluster to run job on.  *Note: running tasks on interactive clusters may lead to increased costs!*
     */
    existingClusterId?: string;
    /**
     * block described below that specifies health conditions for a given task.
     *
     * > **Note** If no `jobClusterKey`, `existingClusterId`, or `newCluster` were specified in task definition, then task will executed using serverless compute.
     */
    health?: outputs.JobTaskForEachTaskTaskHealth;
    /**
     * Identifier of the Job cluster specified in the `jobCluster` block.
     */
    jobClusterKey?: string;
    /**
     * (Set) An optional list of libraries to be installed on the cluster that will execute the job.
     */
    libraries?: outputs.JobTaskForEachTaskTaskLibrary[];
    /**
     * (Integer) An optional maximum number of times to retry an unsuccessful run. A run is considered to be unsuccessful if it completes with a `FAILED` or `INTERNAL_ERROR` lifecycle state. The value -1 means to retry indefinitely and the value 0 means to never retry. The default behavior is to never retry. A run can have the following lifecycle state: `PENDING`, `RUNNING`, `TERMINATING`, `TERMINATED`, `SKIPPED` or `INTERNAL_ERROR`.
     */
    maxRetries?: number;
    /**
     * (Integer) An optional minimal interval in milliseconds between the start of the failed run and the subsequent retry run. The default behavior is that unsuccessful runs are immediately retried.
     */
    minRetryIntervalMillis?: number;
    /**
     * Task will run on a dedicated cluster.  See databricks.Cluster documentation for specification.
     */
    newCluster?: outputs.JobTaskForEachTaskTaskNewCluster;
    notebookTask?: outputs.JobTaskForEachTaskTaskNotebookTask;
    /**
     * An optional block controlling the notification settings on the job level documented below.
     */
    notificationSettings?: outputs.JobTaskForEachTaskTaskNotificationSettings;
    pipelineTask?: outputs.JobTaskForEachTaskTaskPipelineTask;
    pythonWheelTask?: outputs.JobTaskForEachTaskTaskPythonWheelTask;
    /**
     * (Bool) An optional policy to specify whether to retry a job when it times out. The default behavior is to not retry on timeout.
     */
    retryOnTimeout: boolean;
    /**
     * An optional value indicating the condition that determines whether the task should be run once its dependencies have been completed. One of `ALL_SUCCESS`, `AT_LEAST_ONE_SUCCESS`, `NONE_FAILED`, `ALL_DONE`, `AT_LEAST_ONE_FAILED` or `ALL_FAILED`. When omitted, defaults to `ALL_SUCCESS`.
     */
    runIf?: string;
    runJobTask?: outputs.JobTaskForEachTaskTaskRunJobTask;
    sparkJarTask?: outputs.JobTaskForEachTaskTaskSparkJarTask;
    sparkPythonTask?: outputs.JobTaskForEachTaskTaskSparkPythonTask;
    sparkSubmitTask?: outputs.JobTaskForEachTaskTaskSparkSubmitTask;
    sqlTask?: outputs.JobTaskForEachTaskTaskSqlTask;
    /**
     * string specifying an unique key for a given task.
     * * `*_task` - (Required) one of the specific task blocks described below:
     */
    taskKey?: string;
    /**
     * (Integer) An optional timeout applied to each run of this job. The default behavior is to have no timeout.
     */
    timeoutSeconds?: number;
    /**
     * (List) An optional set of system destinations (for example, webhook destinations or Slack) to be notified when runs of this task begins, completes or fails. The default behavior is to not send any notifications. This field is a block and is documented below.
     */
    webhookNotifications?: outputs.JobTaskForEachTaskTaskWebhookNotifications;
}

export interface JobTaskForEachTaskTaskConditionTask {
    /**
     * The left operand of the condition task. It could be a string value, job state, or a parameter reference.
     */
    left: string;
    /**
     * The string specifying the operation used to compare operands.  Currently, following operators are supported: `EQUAL_TO`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `NOT_EQUAL`. (Check the [API docs](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
     *
     * This task does not require a cluster to execute and does not support retries or notifications.
     */
    op: string;
    /**
     * The right operand of the condition task. It could be a string value, job state, or parameter reference.
     */
    right: string;
}

export interface JobTaskForEachTaskTaskDbtTask {
    /**
     * The name of the catalog to use inside Unity Catalog.
     */
    catalog?: string;
    /**
     * (Array) Series of dbt commands to execute in sequence. Every command must start with "dbt".
     */
    commands: string[];
    /**
     * The relative path to the directory in the repository specified by `gitSource` where dbt should look in for the `profiles.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--profile-dir` to a dbt command.
     */
    profilesDirectory?: string;
    /**
     * The path where dbt should look for `dbt_project.yml`. Equivalent to passing `--project-dir` to the dbt CLI.
     * * If `source` is `GIT`: Relative path to the directory in the repository specified in the `gitSource` block. Defaults to the repository's root directory when not specified.
     * * If `source` is `WORKSPACE`: Absolute path to the folder in the workspace.
     */
    projectDirectory?: string;
    /**
     * The name of the schema dbt should run in. Defaults to `default`.
     */
    schema?: string;
    /**
     * The source of the project. Possible values are `WORKSPACE` and `GIT`.  Defaults to `GIT` if a `gitSource` block is present in the job definition.
     */
    source?: string;
    /**
     * The ID of the SQL warehouse that dbt should execute against.
     *
     * You also need to include a `gitSource` block to configure the repository that contains the dbt project.
     */
    warehouseId?: string;
}

export interface JobTaskForEachTaskTaskDependsOn {
    outcome?: string;
    /**
     * The name of the task this task depends on.
     */
    taskKey: string;
}

export interface JobTaskForEachTaskTaskEmailNotifications {
    /**
     * (Bool) don't send alert for skipped runs. (It's recommended to use the corresponding setting in the `notificationSettings` configuration block).
     */
    noAlertForSkippedRuns?: boolean;
    /**
     * (List) list of emails to notify when the duration of a run exceeds the threshold specified by the `RUN_DURATION_SECONDS` metric in the `health` block.
     *
     * The following parameter is only available for the job level configuration.
     */
    onDurationWarningThresholdExceededs?: string[];
    /**
     * (List) list of emails to notify when the run fails.
     */
    onFailures?: string[];
    /**
     * (List) list of emails to notify when the run starts.
     */
    onStarts?: string[];
    /**
     * (List) list of emails to notify when the run completes successfully.
     */
    onSuccesses?: string[];
}

export interface JobTaskForEachTaskTaskHealth {
    /**
     * list of rules that are represented as objects with the following attributes:
     */
    rules: outputs.JobTaskForEachTaskTaskHealthRule[];
}

export interface JobTaskForEachTaskTaskHealthRule {
    /**
     * string specifying the metric to check.  The only supported metric is `RUN_DURATION_SECONDS` (check [Jobs REST API documentation](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
     */
    metric?: string;
    /**
     * string specifying the operation used to evaluate the given metric. The only supported operation is `GREATER_THAN`.
     */
    op?: string;
    /**
     * integer value used to compare to the given metric.
     */
    value?: number;
}

export interface JobTaskForEachTaskTaskLibrary {
    cran?: outputs.JobTaskForEachTaskTaskLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobTaskForEachTaskTaskLibraryMaven;
    pypi?: outputs.JobTaskForEachTaskTaskLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobTaskForEachTaskTaskLibraryCran {
    package: string;
    repo?: string;
}

export interface JobTaskForEachTaskTaskLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobTaskForEachTaskTaskLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobTaskForEachTaskTaskNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.JobTaskForEachTaskTaskNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.JobTaskForEachTaskTaskNewClusterAwsAttributes;
    azureAttributes?: outputs.JobTaskForEachTaskTaskNewClusterAzureAttributes;
    cloneFrom?: outputs.JobTaskForEachTaskTaskNewClusterCloneFrom;
    clusterId?: string;
    clusterLogConf?: outputs.JobTaskForEachTaskTaskNewClusterClusterLogConf;
    clusterMountInfos?: outputs.JobTaskForEachTaskTaskNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobTaskForEachTaskTaskNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobTaskForEachTaskTaskNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobTaskForEachTaskTaskNewClusterInitScript[];
    instancePoolId?: string;
    /**
     * (List) An optional list of libraries to be installed on the cluster that will execute the job. See library Configuration Block below.
     */
    libraries?: outputs.JobTaskForEachTaskTaskNewClusterLibrary[];
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.JobTaskForEachTaskTaskNewClusterWorkloadType;
}

export interface JobTaskForEachTaskTaskNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobTaskForEachTaskTaskNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobTaskForEachTaskTaskNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: outputs.JobTaskForEachTaskTaskNewClusterAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface JobTaskForEachTaskTaskNewClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface JobTaskForEachTaskTaskNewClusterCloneFrom {
    sourceClusterId: string;
}

export interface JobTaskForEachTaskTaskNewClusterClusterLogConf {
    dbfs?: outputs.JobTaskForEachTaskTaskNewClusterClusterLogConfDbfs;
    s3?: outputs.JobTaskForEachTaskTaskNewClusterClusterLogConfS3;
}

export interface JobTaskForEachTaskTaskNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobTaskForEachTaskTaskNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.JobTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface JobTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface JobTaskForEachTaskTaskNewClusterDockerImage {
    basicAuth?: outputs.JobTaskForEachTaskTaskNewClusterDockerImageBasicAuth;
    /**
     * URL of the job on the given workspace
     */
    url: string;
}

export interface JobTaskForEachTaskTaskNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobTaskForEachTaskTaskNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScript {
    abfss?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptDbfs;
    file?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptFile;
    gcs?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptGcs;
    s3?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptS3;
    volumes?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptVolumes;
    workspace?: outputs.JobTaskForEachTaskTaskNewClusterInitScriptWorkspace;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptAbfss {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptFile {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptGcs {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptVolumes {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptWorkspace {
    destination: string;
}

export interface JobTaskForEachTaskTaskNewClusterLibrary {
    cran?: outputs.JobTaskForEachTaskTaskNewClusterLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobTaskForEachTaskTaskNewClusterLibraryMaven;
    pypi?: outputs.JobTaskForEachTaskTaskNewClusterLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobTaskForEachTaskTaskNewClusterLibraryCran {
    package: string;
    repo?: string;
}

export interface JobTaskForEachTaskTaskNewClusterLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobTaskForEachTaskTaskNewClusterLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobTaskForEachTaskTaskNewClusterWorkloadType {
    clients: outputs.JobTaskForEachTaskTaskNewClusterWorkloadTypeClients;
}

export interface JobTaskForEachTaskTaskNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobTaskForEachTaskTaskNotebookTask {
    /**
     * (Map) Base parameters to be used for each run of this job. If the run is initiated by a call to run-now with parameters specified, the two parameters maps will be merged. If the same key is specified in baseParameters and in run-now, the value from run-now will be used. If the notebook takes a parameter that is not specified in the jobâ€™s baseParameters or the run-now override parameters, the default value from the notebook will be used. Retrieve these parameters in a notebook using `dbutils.widgets.get`.
     */
    baseParameters?: {[key: string]: any};
    /**
     * The path of the databricks.Notebook to be run in the Databricks workspace or remote repository. For notebooks stored in the Databricks workspace, the path must be absolute and begin with a slash. For notebooks stored in a remote repository, the path must be relative. This field is required.
     */
    notebookPath: string;
    /**
     * Location type of the notebook, can only be `WORKSPACE` or `GIT`. When set to `WORKSPACE`, the notebook will be retrieved from the local Databricks workspace. When set to `GIT`, the notebook will be retrieved from a Git repository defined in `gitSource`. If the value is empty, the task will use `GIT` if `gitSource` is defined and `WORKSPACE` otherwise.
     */
    source?: string;
    /**
     * ID of the (the databricks_sql_endpoint) that will be used to execute the task with SQL notebook.
     */
    warehouseId?: string;
}

export interface JobTaskForEachTaskTaskNotificationSettings {
    /**
     * (Bool) do not send notifications to recipients specified in `onStart` for the retried runs and do not send notifications to recipients specified in `onFailure` until the last retry of the run.
     */
    alertOnLastAttempt?: boolean;
    /**
     * (Bool) don't send alert for cancelled runs.
     *
     * The following parameter is only available on task level.
     */
    noAlertForCanceledRuns?: boolean;
    /**
     * (Bool) don't send alert for skipped runs.
     */
    noAlertForSkippedRuns?: boolean;
}

export interface JobTaskForEachTaskTaskPipelineTask {
    /**
     * (Bool) Specifies if there should be full refresh of the pipeline.
     *
     * > **Note** The following configuration blocks are only supported inside a `task` block
     */
    fullRefresh?: boolean;
    /**
     * The pipeline's unique ID.
     */
    pipelineId: string;
}

export interface JobTaskForEachTaskTaskPythonWheelTask {
    /**
     * Python function as entry point for the task
     */
    entryPoint?: string;
    /**
     * Named parameters for the task
     */
    namedParameters?: {[key: string]: any};
    /**
     * Name of Python package
     */
    packageName?: string;
    /**
     * Parameters for the task
     */
    parameters?: string[];
}

export interface JobTaskForEachTaskTaskRunJobTask {
    dbtCommands?: string[];
    jarParams?: string[];
    /**
     * (String) ID of the job
     */
    jobId: number;
    /**
     * (Map) Job parameters for the task
     */
    jobParameters?: {[key: string]: any};
    notebookParams?: {[key: string]: any};
    pipelineParams?: outputs.JobTaskForEachTaskTaskRunJobTaskPipelineParams;
    pythonNamedParams?: {[key: string]: any};
    pythonParams?: string[];
    sparkSubmitParams?: string[];
    sqlParams?: {[key: string]: any};
}

export interface JobTaskForEachTaskTaskRunJobTaskPipelineParams {
    fullRefresh?: boolean;
}

export interface JobTaskForEachTaskTaskSparkJarTask {
    jarUri?: string;
    /**
     * The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. The code should use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs of the job will fail.
     */
    mainClassName?: string;
    /**
     * (List) Parameters passed to the main method.
     */
    parameters?: string[];
}

export interface JobTaskForEachTaskTaskSparkPythonTask {
    /**
     * (List) Command line parameters passed to the Python file.
     */
    parameters?: string[];
    /**
     * The URI of the Python file to be executed. databricks_dbfs_file, cloud file URIs (e.g. `s3:/`, `abfss:/`, `gs:/`), workspace paths and remote repository are supported. For Python files stored in the Databricks workspace, the path must be absolute and begin with `/Repos`. For files stored in a remote repository, the path must be relative. This field is required.
     */
    pythonFile: string;
    /**
     * Location type of the Python file, can only be `GIT`. When set to `GIT`, the Python file will be retrieved from a Git repository defined in `gitSource`.
     */
    source?: string;
}

export interface JobTaskForEachTaskTaskSparkSubmitTask {
    /**
     * (List) Command-line parameters passed to spark submit.
     */
    parameters?: string[];
}

export interface JobTaskForEachTaskTaskSqlTask {
    /**
     * block consisting of following fields:
     */
    alert?: outputs.JobTaskForEachTaskTaskSqlTaskAlert;
    /**
     * block consisting of following fields:
     */
    dashboard?: outputs.JobTaskForEachTaskTaskSqlTaskDashboard;
    /**
     * block consisting of single string fields:
     */
    file?: outputs.JobTaskForEachTaskTaskSqlTaskFile;
    /**
     * (Map) parameters to be used for each run of this task. The SQL alert task does not support custom parameters.
     */
    parameters?: {[key: string]: any};
    /**
     * block consisting of single string field: `queryId` - identifier of the Databricks SQL Query (databricks_sql_query).
     */
    query?: outputs.JobTaskForEachTaskTaskSqlTaskQuery;
    /**
     * ID of the (the databricks_sql_endpoint) that will be used to execute the task.  Only Serverless & Pro warehouses are supported right now.
     */
    warehouseId?: string;
}

export interface JobTaskForEachTaskTaskSqlTaskAlert {
    /**
     * (String) identifier of the Databricks SQL Alert.
     */
    alertId: string;
    /**
     * flag that specifies if subscriptions are paused or not.
     */
    pauseSubscriptions?: boolean;
    /**
     * a list of subscription blocks consisting out of one of the required fields: `userName` for user emails or `destinationId` - for Alert destination's identifier.
     */
    subscriptions: outputs.JobTaskForEachTaskTaskSqlTaskAlertSubscription[];
}

export interface JobTaskForEachTaskTaskSqlTaskAlertSubscription {
    destinationId?: string;
    userName?: string;
}

export interface JobTaskForEachTaskTaskSqlTaskDashboard {
    /**
     * string specifying a custom subject of email sent.
     */
    customSubject?: string;
    /**
     * (String) identifier of the Databricks SQL Dashboard databricks_sql_dashboard.
     */
    dashboardId: string;
    /**
     * flag that specifies if subscriptions are paused or not.
     */
    pauseSubscriptions?: boolean;
    /**
     * a list of subscription blocks consisting out of one of the required fields: `userName` for user emails or `destinationId` - for Alert destination's identifier.
     */
    subscriptions?: outputs.JobTaskForEachTaskTaskSqlTaskDashboardSubscription[];
}

export interface JobTaskForEachTaskTaskSqlTaskDashboardSubscription {
    destinationId?: string;
    userName?: string;
}

export interface JobTaskForEachTaskTaskSqlTaskFile {
    /**
     * If `source` is `GIT`: Relative path to the file in the repository specified in the `gitSource` block with SQL commands to execute. If `source` is `WORKSPACE`: Absolute path to the file in the workspace with SQL commands to execute.
     *
     * Example
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as databricks from "@pulumi/databricks";
     *
     * const sqlAggregationJob = new databricks.Job("sql_aggregation_job", {
     *     name: "Example SQL Job",
     *     tasks: [
     *         {
     *             taskKey: "run_agg_query",
     *             sqlTask: {
     *                 warehouseId: sqlJobWarehouse.id,
     *                 query: {
     *                     queryId: aggQuery.id,
     *                 },
     *             },
     *         },
     *         {
     *             taskKey: "run_dashboard",
     *             sqlTask: {
     *                 warehouseId: sqlJobWarehouse.id,
     *                 dashboard: {
     *                     dashboardId: dash.id,
     *                     subscriptions: [{
     *                         userName: "user@domain.com",
     *                     }],
     *                 },
     *             },
     *         },
     *         {
     *             taskKey: "run_alert",
     *             sqlTask: {
     *                 warehouseId: sqlJobWarehouse.id,
     *                 alert: {
     *                     alertId: alert.id,
     *                     subscriptions: [{
     *                         userName: "user@domain.com",
     *                     }],
     *                 },
     *             },
     *         },
     *     ],
     * });
     * ```
     */
    path: string;
    /**
     * The source of the project. Possible values are `WORKSPACE` and `GIT`.
     */
    source?: string;
}

export interface JobTaskForEachTaskTaskSqlTaskQuery {
    queryId: string;
}

export interface JobTaskForEachTaskTaskWebhookNotifications {
    /**
     * (List) list of notification IDs to call when the duration of a run exceeds the threshold specified by the `RUN_DURATION_SECONDS` metric in the `health` block.
     *
     * Note that the `id` is not to be confused with the name of the alert destination. The `id` can be retrieved through the API or the URL of Databricks UI `https://<workspace host>/sql/destinations/<notification id>?o=<workspace id>`
     *
     * Example
     */
    onDurationWarningThresholdExceededs?: outputs.JobTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceeded[];
    /**
     * (List) list of notification IDs to call when the run fails. A maximum of 3 destinations can be specified.
     */
    onFailures?: outputs.JobTaskForEachTaskTaskWebhookNotificationsOnFailure[];
    /**
     * (List) list of notification IDs to call when the run starts. A maximum of 3 destinations can be specified.
     */
    onStarts?: outputs.JobTaskForEachTaskTaskWebhookNotificationsOnStart[];
    /**
     * (List) list of notification IDs to call when the run completes successfully. A maximum of 3 destinations can be specified.
     */
    onSuccesses?: outputs.JobTaskForEachTaskTaskWebhookNotificationsOnSuccess[];
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceeded {
    /**
     * ID of the job
     */
    id: string;
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnFailure {
    /**
     * ID of the job
     */
    id: string;
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnStart {
    /**
     * ID of the job
     */
    id: string;
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnSuccess {
    /**
     * ID of the job
     */
    id: string;
}

export interface JobTaskHealth {
    /**
     * list of rules that are represented as objects with the following attributes:
     */
    rules: outputs.JobTaskHealthRule[];
}

export interface JobTaskHealthRule {
    /**
     * string specifying the metric to check.  The only supported metric is `RUN_DURATION_SECONDS` (check [Jobs REST API documentation](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
     */
    metric?: string;
    /**
     * string specifying the operation used to evaluate the given metric. The only supported operation is `GREATER_THAN`.
     */
    op?: string;
    /**
     * integer value used to compare to the given metric.
     */
    value?: number;
}

export interface JobTaskLibrary {
    cran?: outputs.JobTaskLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobTaskLibraryMaven;
    pypi?: outputs.JobTaskLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobTaskLibraryCran {
    package: string;
    repo?: string;
}

export interface JobTaskLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobTaskLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobTaskNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.JobTaskNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: outputs.JobTaskNewClusterAwsAttributes;
    azureAttributes?: outputs.JobTaskNewClusterAzureAttributes;
    cloneFrom?: outputs.JobTaskNewClusterCloneFrom;
    clusterId?: string;
    clusterLogConf?: outputs.JobTaskNewClusterClusterLogConf;
    clusterMountInfos?: outputs.JobTaskNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: any};
    dataSecurityMode?: string;
    dockerImage?: outputs.JobTaskNewClusterDockerImage;
    driverInstancePoolId: string;
    driverNodeTypeId: string;
    enableElasticDisk: boolean;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.JobTaskNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: outputs.JobTaskNewClusterInitScript[];
    instancePoolId?: string;
    /**
     * (List) An optional list of libraries to be installed on the cluster that will execute the job. See library Configuration Block below.
     */
    libraries?: outputs.JobTaskNewClusterLibrary[];
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: outputs.JobTaskNewClusterWorkloadType;
}

export interface JobTaskNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface JobTaskNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface JobTaskNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: outputs.JobTaskNewClusterAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface JobTaskNewClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface JobTaskNewClusterCloneFrom {
    sourceClusterId: string;
}

export interface JobTaskNewClusterClusterLogConf {
    dbfs?: outputs.JobTaskNewClusterClusterLogConfDbfs;
    s3?: outputs.JobTaskNewClusterClusterLogConfS3;
}

export interface JobTaskNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface JobTaskNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobTaskNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: outputs.JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface JobTaskNewClusterDockerImage {
    basicAuth?: outputs.JobTaskNewClusterDockerImageBasicAuth;
    /**
     * URL of the job on the given workspace
     */
    url: string;
}

export interface JobTaskNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface JobTaskNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface JobTaskNewClusterInitScript {
    abfss?: outputs.JobTaskNewClusterInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: outputs.JobTaskNewClusterInitScriptDbfs;
    file?: outputs.JobTaskNewClusterInitScriptFile;
    gcs?: outputs.JobTaskNewClusterInitScriptGcs;
    s3?: outputs.JobTaskNewClusterInitScriptS3;
    volumes?: outputs.JobTaskNewClusterInitScriptVolumes;
    workspace?: outputs.JobTaskNewClusterInitScriptWorkspace;
}

export interface JobTaskNewClusterInitScriptAbfss {
    destination: string;
}

export interface JobTaskNewClusterInitScriptDbfs {
    destination: string;
}

export interface JobTaskNewClusterInitScriptFile {
    destination: string;
}

export interface JobTaskNewClusterInitScriptGcs {
    destination: string;
}

export interface JobTaskNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface JobTaskNewClusterInitScriptVolumes {
    destination: string;
}

export interface JobTaskNewClusterInitScriptWorkspace {
    destination: string;
}

export interface JobTaskNewClusterLibrary {
    cran?: outputs.JobTaskNewClusterLibraryCran;
    egg?: string;
    jar?: string;
    maven?: outputs.JobTaskNewClusterLibraryMaven;
    pypi?: outputs.JobTaskNewClusterLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface JobTaskNewClusterLibraryCran {
    package: string;
    repo?: string;
}

export interface JobTaskNewClusterLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface JobTaskNewClusterLibraryPypi {
    package: string;
    repo?: string;
}

export interface JobTaskNewClusterWorkloadType {
    clients: outputs.JobTaskNewClusterWorkloadTypeClients;
}

export interface JobTaskNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface JobTaskNotebookTask {
    /**
     * (Map) Base parameters to be used for each run of this job. If the run is initiated by a call to run-now with parameters specified, the two parameters maps will be merged. If the same key is specified in baseParameters and in run-now, the value from run-now will be used. If the notebook takes a parameter that is not specified in the jobâ€™s baseParameters or the run-now override parameters, the default value from the notebook will be used. Retrieve these parameters in a notebook using `dbutils.widgets.get`.
     */
    baseParameters?: {[key: string]: any};
    /**
     * The path of the databricks.Notebook to be run in the Databricks workspace or remote repository. For notebooks stored in the Databricks workspace, the path must be absolute and begin with a slash. For notebooks stored in a remote repository, the path must be relative. This field is required.
     */
    notebookPath: string;
    /**
     * Location type of the notebook, can only be `WORKSPACE` or `GIT`. When set to `WORKSPACE`, the notebook will be retrieved from the local Databricks workspace. When set to `GIT`, the notebook will be retrieved from a Git repository defined in `gitSource`. If the value is empty, the task will use `GIT` if `gitSource` is defined and `WORKSPACE` otherwise.
     */
    source?: string;
    /**
     * ID of the (the databricks_sql_endpoint) that will be used to execute the task with SQL notebook.
     */
    warehouseId?: string;
}

export interface JobTaskNotificationSettings {
    /**
     * (Bool) do not send notifications to recipients specified in `onStart` for the retried runs and do not send notifications to recipients specified in `onFailure` until the last retry of the run.
     */
    alertOnLastAttempt?: boolean;
    /**
     * (Bool) don't send alert for cancelled runs.
     *
     * The following parameter is only available on task level.
     */
    noAlertForCanceledRuns?: boolean;
    /**
     * (Bool) don't send alert for skipped runs.
     */
    noAlertForSkippedRuns?: boolean;
}

export interface JobTaskPipelineTask {
    /**
     * (Bool) Specifies if there should be full refresh of the pipeline.
     *
     * > **Note** The following configuration blocks are only supported inside a `task` block
     */
    fullRefresh?: boolean;
    /**
     * The pipeline's unique ID.
     */
    pipelineId: string;
}

export interface JobTaskPythonWheelTask {
    /**
     * Python function as entry point for the task
     */
    entryPoint?: string;
    /**
     * Named parameters for the task
     */
    namedParameters?: {[key: string]: any};
    /**
     * Name of Python package
     */
    packageName?: string;
    /**
     * Parameters for the task
     */
    parameters?: string[];
}

export interface JobTaskRunJobTask {
    dbtCommands?: string[];
    jarParams?: string[];
    /**
     * (String) ID of the job
     */
    jobId: number;
    /**
     * (Map) Job parameters for the task
     */
    jobParameters?: {[key: string]: any};
    notebookParams?: {[key: string]: any};
    pipelineParams?: outputs.JobTaskRunJobTaskPipelineParams;
    pythonNamedParams?: {[key: string]: any};
    pythonParams?: string[];
    sparkSubmitParams?: string[];
    sqlParams?: {[key: string]: any};
}

export interface JobTaskRunJobTaskPipelineParams {
    fullRefresh?: boolean;
}

export interface JobTaskSparkJarTask {
    jarUri?: string;
    /**
     * The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. The code should use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs of the job will fail.
     */
    mainClassName?: string;
    /**
     * (List) Parameters passed to the main method.
     */
    parameters?: string[];
}

export interface JobTaskSparkPythonTask {
    /**
     * (List) Command line parameters passed to the Python file.
     */
    parameters?: string[];
    /**
     * The URI of the Python file to be executed. databricks_dbfs_file, cloud file URIs (e.g. `s3:/`, `abfss:/`, `gs:/`), workspace paths and remote repository are supported. For Python files stored in the Databricks workspace, the path must be absolute and begin with `/Repos`. For files stored in a remote repository, the path must be relative. This field is required.
     */
    pythonFile: string;
    /**
     * Location type of the Python file, can only be `GIT`. When set to `GIT`, the Python file will be retrieved from a Git repository defined in `gitSource`.
     */
    source?: string;
}

export interface JobTaskSparkSubmitTask {
    /**
     * (List) Command-line parameters passed to spark submit.
     */
    parameters?: string[];
}

export interface JobTaskSqlTask {
    /**
     * block consisting of following fields:
     */
    alert?: outputs.JobTaskSqlTaskAlert;
    /**
     * block consisting of following fields:
     */
    dashboard?: outputs.JobTaskSqlTaskDashboard;
    /**
     * block consisting of single string fields:
     */
    file?: outputs.JobTaskSqlTaskFile;
    /**
     * (Map) parameters to be used for each run of this task. The SQL alert task does not support custom parameters.
     */
    parameters?: {[key: string]: any};
    /**
     * block consisting of single string field: `queryId` - identifier of the Databricks SQL Query (databricks_sql_query).
     */
    query?: outputs.JobTaskSqlTaskQuery;
    /**
     * ID of the (the databricks_sql_endpoint) that will be used to execute the task.  Only Serverless & Pro warehouses are supported right now.
     */
    warehouseId?: string;
}

export interface JobTaskSqlTaskAlert {
    /**
     * (String) identifier of the Databricks SQL Alert.
     */
    alertId: string;
    /**
     * flag that specifies if subscriptions are paused or not.
     */
    pauseSubscriptions?: boolean;
    /**
     * a list of subscription blocks consisting out of one of the required fields: `userName` for user emails or `destinationId` - for Alert destination's identifier.
     */
    subscriptions: outputs.JobTaskSqlTaskAlertSubscription[];
}

export interface JobTaskSqlTaskAlertSubscription {
    destinationId?: string;
    userName?: string;
}

export interface JobTaskSqlTaskDashboard {
    /**
     * string specifying a custom subject of email sent.
     */
    customSubject?: string;
    /**
     * (String) identifier of the Databricks SQL Dashboard databricks_sql_dashboard.
     */
    dashboardId: string;
    /**
     * flag that specifies if subscriptions are paused or not.
     */
    pauseSubscriptions?: boolean;
    /**
     * a list of subscription blocks consisting out of one of the required fields: `userName` for user emails or `destinationId` - for Alert destination's identifier.
     */
    subscriptions?: outputs.JobTaskSqlTaskDashboardSubscription[];
}

export interface JobTaskSqlTaskDashboardSubscription {
    destinationId?: string;
    userName?: string;
}

export interface JobTaskSqlTaskFile {
    /**
     * If `source` is `GIT`: Relative path to the file in the repository specified in the `gitSource` block with SQL commands to execute. If `source` is `WORKSPACE`: Absolute path to the file in the workspace with SQL commands to execute.
     *
     * Example
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as databricks from "@pulumi/databricks";
     *
     * const sqlAggregationJob = new databricks.Job("sql_aggregation_job", {
     *     name: "Example SQL Job",
     *     tasks: [
     *         {
     *             taskKey: "run_agg_query",
     *             sqlTask: {
     *                 warehouseId: sqlJobWarehouse.id,
     *                 query: {
     *                     queryId: aggQuery.id,
     *                 },
     *             },
     *         },
     *         {
     *             taskKey: "run_dashboard",
     *             sqlTask: {
     *                 warehouseId: sqlJobWarehouse.id,
     *                 dashboard: {
     *                     dashboardId: dash.id,
     *                     subscriptions: [{
     *                         userName: "user@domain.com",
     *                     }],
     *                 },
     *             },
     *         },
     *         {
     *             taskKey: "run_alert",
     *             sqlTask: {
     *                 warehouseId: sqlJobWarehouse.id,
     *                 alert: {
     *                     alertId: alert.id,
     *                     subscriptions: [{
     *                         userName: "user@domain.com",
     *                     }],
     *                 },
     *             },
     *         },
     *     ],
     * });
     * ```
     */
    path: string;
    /**
     * The source of the project. Possible values are `WORKSPACE` and `GIT`.
     */
    source?: string;
}

export interface JobTaskSqlTaskQuery {
    queryId: string;
}

export interface JobTaskWebhookNotifications {
    /**
     * (List) list of notification IDs to call when the duration of a run exceeds the threshold specified by the `RUN_DURATION_SECONDS` metric in the `health` block.
     *
     * Note that the `id` is not to be confused with the name of the alert destination. The `id` can be retrieved through the API or the URL of Databricks UI `https://<workspace host>/sql/destinations/<notification id>?o=<workspace id>`
     *
     * Example
     */
    onDurationWarningThresholdExceededs?: outputs.JobTaskWebhookNotificationsOnDurationWarningThresholdExceeded[];
    /**
     * (List) list of notification IDs to call when the run fails. A maximum of 3 destinations can be specified.
     */
    onFailures?: outputs.JobTaskWebhookNotificationsOnFailure[];
    /**
     * (List) list of notification IDs to call when the run starts. A maximum of 3 destinations can be specified.
     */
    onStarts?: outputs.JobTaskWebhookNotificationsOnStart[];
    /**
     * (List) list of notification IDs to call when the run completes successfully. A maximum of 3 destinations can be specified.
     */
    onSuccesses?: outputs.JobTaskWebhookNotificationsOnSuccess[];
}

export interface JobTaskWebhookNotificationsOnDurationWarningThresholdExceeded {
    /**
     * ID of the job
     */
    id: string;
}

export interface JobTaskWebhookNotificationsOnFailure {
    /**
     * ID of the job
     */
    id: string;
}

export interface JobTaskWebhookNotificationsOnStart {
    /**
     * ID of the job
     */
    id: string;
}

export interface JobTaskWebhookNotificationsOnSuccess {
    /**
     * ID of the job
     */
    id: string;
}

export interface JobTrigger {
    /**
     * configuration block to define a trigger for [File Arrival events](https://learn.microsoft.com/en-us/azure/databricks/workflows/jobs/file-arrival-triggers) consisting of following attributes:
     */
    fileArrival?: outputs.JobTriggerFileArrival;
    /**
     * Indicate whether this trigger is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pauseStatus` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pauseStatus`.
     */
    pauseStatus?: string;
    table?: outputs.JobTriggerTable;
    /**
     * configuration block to define a trigger for Table Update events consisting of following attributes:
     */
    tableUpdate?: outputs.JobTriggerTableUpdate;
}

export interface JobTriggerFileArrival {
    /**
     * If set, the trigger starts a run only after the specified amount of time passed since the last time the trigger fired. The minimum allowed value is 60 seconds.
     */
    minTimeBetweenTriggersSeconds?: number;
    /**
     * string with URL under the Unity Catalog external location that will be monitored for new files. Please note that have a trailing slash character (`/`).
     */
    url: string;
    /**
     * If set, the trigger starts a run only after no file activity has occurred for the specified amount of time. This makes it possible to wait for a batch of incoming files to arrive before triggering a run. The minimum allowed value is 60 seconds.
     */
    waitAfterLastChangeSeconds?: number;
}

export interface JobTriggerTable {
    condition?: string;
    minTimeBetweenTriggersSeconds?: number;
    tableNames?: string[];
    waitAfterLastChangeSeconds?: number;
}

export interface JobTriggerTableUpdate {
    /**
     * The table(s) condition based on which to trigger a job run. Valid values are `ANY_UPDATED` or `ALL_UPDATED`.
     */
    condition?: string;
    /**
     * If set, the trigger starts a run only after the specified amount of time passed since the last time the trigger fired. The minimum allowed value is 60 seconds.
     */
    minTimeBetweenTriggersSeconds?: number;
    /**
     * A list of Delta tables to monitor for changes. The table name must be in the format `catalog_name.schema_name.table_name`.
     */
    tableNames: string[];
    /**
     * If set, the trigger starts a run only after no file activity has occurred for the specified amount of time. This makes it possible to wait for a batch of incoming files to arrive before triggering a run. The minimum allowed value is 60 seconds.
     */
    waitAfterLastChangeSeconds?: number;
}

export interface JobWebhookNotifications {
    /**
     * (List) list of notification IDs to call when the duration of a run exceeds the threshold specified by the `RUN_DURATION_SECONDS` metric in the `health` block.
     *
     * Note that the `id` is not to be confused with the name of the alert destination. The `id` can be retrieved through the API or the URL of Databricks UI `https://<workspace host>/sql/destinations/<notification id>?o=<workspace id>`
     *
     * Example
     */
    onDurationWarningThresholdExceededs?: outputs.JobWebhookNotificationsOnDurationWarningThresholdExceeded[];
    /**
     * (List) list of notification IDs to call when the run fails. A maximum of 3 destinations can be specified.
     */
    onFailures?: outputs.JobWebhookNotificationsOnFailure[];
    /**
     * (List) list of notification IDs to call when the run starts. A maximum of 3 destinations can be specified.
     */
    onStarts?: outputs.JobWebhookNotificationsOnStart[];
    /**
     * (List) list of notification IDs to call when the run completes successfully. A maximum of 3 destinations can be specified.
     */
    onSuccesses?: outputs.JobWebhookNotificationsOnSuccess[];
}

export interface JobWebhookNotificationsOnDurationWarningThresholdExceeded {
    /**
     * ID of the job
     */
    id: string;
}

export interface JobWebhookNotificationsOnFailure {
    /**
     * ID of the job
     */
    id: string;
}

export interface JobWebhookNotificationsOnStart {
    /**
     * ID of the job
     */
    id: string;
}

export interface JobWebhookNotificationsOnSuccess {
    /**
     * ID of the job
     */
    id: string;
}

export interface LakehouseMonitorCustomMetric {
    /**
     * [create metric definition](https://docs.databricks.com/en/lakehouse-monitoring/custom-metrics.html#create-definition)
     */
    definition: string;
    /**
     * Columns on the monitored table to apply the custom metrics to.
     */
    inputColumns: string[];
    /**
     * Name of the custom metric.
     */
    name: string;
    /**
     * The output type of the custom metric.
     */
    outputDataType: string;
    /**
     * The type of the custom metric.
     */
    type: string;
}

export interface LakehouseMonitorDataClassificationConfig {
    enabled?: boolean;
}

export interface LakehouseMonitorInferenceLog {
    /**
     * List of granularities to use when aggregating data into time windows based on their timestamp.
     */
    granularities: string[];
    /**
     * Column of the model label
     */
    labelCol?: string;
    /**
     * Column of the model id or version
     */
    modelIdCol: string;
    /**
     * Column of the model prediction
     */
    predictionCol: string;
    /**
     * Column of the model prediction probabilities
     */
    predictionProbaCol?: string;
    /**
     * Problem type the model aims to solve. Either `PROBLEM_TYPE_CLASSIFICATION` or `PROBLEM_TYPE_REGRESSION`
     */
    problemType: string;
    /**
     * Column of the timestamp of predictions
     */
    timestampCol: string;
}

export interface LakehouseMonitorNotifications {
    /**
     * who to send notifications to on monitor failure.
     */
    onFailure?: outputs.LakehouseMonitorNotificationsOnFailure;
    /**
     * Who to send notifications to when new data classification tags are detected.
     */
    onNewClassificationTagDetected?: outputs.LakehouseMonitorNotificationsOnNewClassificationTagDetected;
}

export interface LakehouseMonitorNotificationsOnFailure {
    emailAddresses?: string[];
}

export interface LakehouseMonitorNotificationsOnNewClassificationTagDetected {
    emailAddresses?: string[];
}

export interface LakehouseMonitorSchedule {
    /**
     * optional string field that indicates whether a schedule is paused (`PAUSED`) or not (`UNPAUSED`).
     */
    pauseStatus?: string;
    /**
     * string expression that determines when to run the monitor. See [Quartz documentation](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) for examples.
     */
    quartzCronExpression: string;
    /**
     * string with timezone id (e.g., `PST`) in which to evaluate the Quartz expression.
     */
    timezoneId: string;
}

export interface LakehouseMonitorSnapshot {
}

export interface LakehouseMonitorTimeSeries {
    /**
     * List of granularities to use when aggregating data into time windows based on their timestamp.
     */
    granularities: string[];
    /**
     * Column of the timestamp of predictions
     */
    timestampCol: string;
}

export interface LibraryCran {
    package: string;
    repo?: string;
}

export interface LibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface LibraryPypi {
    package: string;
    repo?: string;
}

export interface MetastoreDataAccessAwsIamRole {
    externalId: string;
    roleArn: string;
    unityCatalogIamArn: string;
}

export interface MetastoreDataAccessAzureManagedIdentity {
    accessConnectorId: string;
    credentialId: string;
    managedIdentityId?: string;
}

export interface MetastoreDataAccessAzureServicePrincipal {
    applicationId: string;
    clientSecret: string;
    directoryId: string;
}

export interface MetastoreDataAccessDatabricksGcpServiceAccount {
    credentialId: string;
    email: string;
}

export interface MetastoreDataAccessGcpServiceAccountKey {
    email: string;
    privateKey: string;
    privateKeyId: string;
}

export interface MlflowModelTag {
    key?: string;
    value?: string;
}

export interface MlflowWebhookHttpUrlSpec {
    /**
     * Value of the authorization header that should be sent in the request sent by the wehbook.  It should be of the form `<auth type> <credentials>`, e.g. `Bearer <access_token>`. If set to an empty string, no authorization header will be included in the request.
     */
    authorization?: string;
    /**
     * Enable/disable SSL certificate validation. Default is `true`. For self-signed certificates, this field must be `false` AND the destination server must disable certificate validation as well. For security purposes, it is encouraged to perform secret validation with the HMAC-encoded portion of the payload and acknowledge the risk associated with disabling hostname validation whereby it becomes more likely that requests can be maliciously routed to an unintended host.
     */
    enableSslVerification?: boolean;
    /**
     * Shared secret required for HMAC encoding payload. The HMAC-encoded payload will be sent in the header as `X-Databricks-Signature: encodedPayload`.
     */
    secret?: string;
    /**
     * External HTTPS URL called on event trigger (by using a POST request). Structure of payload depends on the event type, refer to [documentation](https://docs.databricks.com/applications/mlflow/model-registry-webhooks.html) for more details.
     */
    url: string;
}

export interface MlflowWebhookJobSpec {
    /**
     * The personal access token used to authorize webhook's job runs.
     */
    accessToken: string;
    /**
     * ID of the Databricks job that the webhook runs.
     */
    jobId: string;
    /**
     * URL of the workspace containing the job that this webhook runs. If not specified, the jobâ€™s workspace URL is assumed to be the same as the workspace where the webhook is created.
     */
    workspaceUrl?: string;
}

export interface ModelServingConfig {
    /**
     * Configuration for Inference Tables which automatically logs requests and responses to Unity Catalog.
     */
    autoCaptureConfig?: outputs.ModelServingConfigAutoCaptureConfig;
    /**
     * A list of served entities for the endpoint to serve. A serving endpoint can have up to 10 served entities.
     */
    servedEntities?: outputs.ModelServingConfigServedEntity[];
    /**
     * Each block represents a served model for the endpoint to serve. A model serving endpoint can have up to 10 served models.
     *
     * @deprecated Please use 'config.served_entities' instead of 'config.served_models'.
     */
    servedModels?: outputs.ModelServingConfigServedModel[];
    /**
     * A single block represents the traffic split configuration amongst the served models.
     */
    trafficConfig: outputs.ModelServingConfigTrafficConfig;
}

export interface ModelServingConfigAutoCaptureConfig {
    /**
     * The name of the catalog in Unity Catalog. NOTE: On update, you cannot change the catalog name if it was already set.
     */
    catalogName?: string;
    /**
     * If inference tables are enabled or not. NOTE: If you have already disabled payload logging once, you cannot enable again.
     */
    enabled?: boolean;
    /**
     * The name of the schema in Unity Catalog. NOTE: On update, you cannot change the schema name if it was already set.
     */
    schemaName?: string;
    /**
     * The prefix of the table in Unity Catalog. NOTE: On update, you cannot change the prefix name if it was already set.
     */
    tableNamePrefix?: string;
}

export interface ModelServingConfigServedEntity {
    /**
     * The name of the entity to be served. The entity may be a model in the Databricks Model Registry, a model in the Unity Catalog (UC), or a function of type `FEATURE_SPEC` in the UC. If it is a UC object, the full name of the object should be given in the form of `catalog_name.schema_name.model_name`.
     */
    entityName?: string;
    /**
     * The version of the model in Databricks Model Registry to be served or empty if the entity is a `FEATURE_SPEC`.
     */
    entityVersion?: string;
    /**
     * An object containing a set of optional, user-specified environment variable key-value pairs used for serving this entity. Note: this is an experimental feature and subject to change. Example entity environment variables that refer to Databricks secrets: ```{"OPENAI_API_KEY": "{{secrets/my_scope/my_key}}", "DATABRICKS_TOKEN": "{{secrets/my_scope2/my_key2}}"}```
     */
    environmentVars?: {[key: string]: any};
    /**
     * The external model to be served. NOTE: Only one of `externalModel` and (`entityName`, `entityVersion`, `workloadSize`, `workloadType`, and `scaleToZeroEnabled`) can be specified with the latter set being used for custom model serving for a Databricks registered model. When an `externalModel` is present, the served entities list can only have one `servedEntity` object. For an existing endpoint with `externalModel`, it can not be updated to an endpoint without `externalModel`. If the endpoint is created without `externalModel`, users cannot update it to add `externalModel` later.
     */
    externalModel?: outputs.ModelServingConfigServedEntityExternalModel;
    /**
     * ARN of the instance profile that the served entity uses to access AWS resources.
     */
    instanceProfileArn?: string;
    /**
     * The maximum tokens per second that the endpoint can scale up to.
     */
    maxProvisionedThroughput?: number;
    /**
     * The minimum tokens per second that the endpoint can scale down to.
     */
    minProvisionedThroughput?: number;
    /**
     * The name of a served entity. It must be unique across an endpoint. A served entity name can consist of alphanumeric characters, dashes, and underscores. If not specified for an external model, this field defaults to `external_model.name`, with '.' and ':' replaced with '-', and if not specified for other entities, it defaults to -.
     */
    name: string;
    /**
     * Whether the compute resources for the served entity should scale down to zero.
     */
    scaleToZeroEnabled?: boolean;
    /**
     * The workload size of the served entity. The workload size corresponds to a range of provisioned concurrency that the compute autoscales between. A single unit of provisioned concurrency can process one request at a time. Valid workload sizes are `Small` (4 - 4 provisioned concurrency), `Medium` (8 - 16 provisioned concurrency), and `Large` (16 - 64 provisioned concurrency). If `scale-to-zero` is enabled, the lower bound of the provisioned concurrency for each workload size is 0.
     */
    workloadSize?: string;
    /**
     * The workload type of the served entity. The workload type selects which type of compute to use in the endpoint. The default value for this parameter is `CPU`. For deep learning workloads, GPU acceleration is available by selecting workload types like `GPU_SMALL` and others. See the available [GPU types](https://docs.databricks.com/machine-learning/model-serving/create-manage-serving-endpoints.html#gpu-workload-types).
     */
    workloadType?: string;
}

export interface ModelServingConfigServedEntityExternalModel {
    ai21labsConfig?: outputs.ModelServingConfigServedEntityExternalModelAi21labsConfig;
    amazonBedrockConfig?: outputs.ModelServingConfigServedEntityExternalModelAmazonBedrockConfig;
    anthropicConfig?: outputs.ModelServingConfigServedEntityExternalModelAnthropicConfig;
    cohereConfig?: outputs.ModelServingConfigServedEntityExternalModelCohereConfig;
    databricksModelServingConfig?: outputs.ModelServingConfigServedEntityExternalModelDatabricksModelServingConfig;
    /**
     * The name of the external model.
     */
    name: string;
    openaiConfig?: outputs.ModelServingConfigServedEntityExternalModelOpenaiConfig;
    palmConfig?: outputs.ModelServingConfigServedEntityExternalModelPalmConfig;
    /**
     * The name of the provider for the external model. Currently, the supported providers are `ai21labs`, `anthropic`, `amazon-bedrock`, `cohere`, `databricks-model-serving`, `openai`, and `palm`.
     */
    provider: string;
    /**
     * The task type of the external model.
     */
    task: string;
}

export interface ModelServingConfigServedEntityExternalModelAi21labsConfig {
    ai21labsApiKey: string;
}

export interface ModelServingConfigServedEntityExternalModelAmazonBedrockConfig {
    awsAccessKeyId: string;
    awsRegion: string;
    awsSecretAccessKey: string;
    bedrockProvider: string;
}

export interface ModelServingConfigServedEntityExternalModelAnthropicConfig {
    anthropicApiKey: string;
}

export interface ModelServingConfigServedEntityExternalModelCohereConfig {
    cohereApiKey: string;
}

export interface ModelServingConfigServedEntityExternalModelDatabricksModelServingConfig {
    databricksApiToken: string;
    databricksWorkspaceUrl: string;
}

export interface ModelServingConfigServedEntityExternalModelOpenaiConfig {
    openaiApiBase?: string;
    openaiApiKey: string;
    openaiApiType?: string;
    openaiApiVersion?: string;
    openaiDeploymentName?: string;
    openaiOrganization?: string;
}

export interface ModelServingConfigServedEntityExternalModelPalmConfig {
    palmApiKey: string;
}

export interface ModelServingConfigServedModel {
    /**
     * a map of environment variable name/values that will be used for serving this model.  Environment variables may refer to Databricks secrets using the standard syntax: `{{secrets/secret_scope/secret_key}}`.
     */
    environmentVars?: {[key: string]: any};
    /**
     * ARN of the instance profile that the served model will use to access AWS resources.
     */
    instanceProfileArn?: string;
    /**
     * The name of the model in Databricks Model Registry to be served.
     */
    modelName: string;
    /**
     * The version of the model in Databricks Model Registry to be served.
     */
    modelVersion: string;
    /**
     * The name of a served model. It must be unique across an endpoint. If not specified, this field will default to `modelname-modelversion`. A served model name can consist of alphanumeric characters, dashes, and underscores.
     */
    name: string;
    /**
     * Whether the compute resources for the served model should scale down to zero. If `scale-to-zero` is enabled, the lower bound of the provisioned concurrency for each workload size will be 0. The default value is `true`.
     */
    scaleToZeroEnabled?: boolean;
    /**
     * The workload size of the served model. The workload size corresponds to a range of provisioned concurrency that the compute will autoscale between. A single unit of provisioned concurrency can process one request at a time. Valid workload sizes are `Small` (4 - 4 provisioned concurrency), `Medium` (8 - 16 provisioned concurrency), and `Large` (16 - 64 provisioned concurrency).
     */
    workloadSize: string;
    /**
     * The workload type of the served model. The workload type selects which type of compute to use in the endpoint. For deep learning workloads, GPU acceleration is available by selecting workload types like `GPU_SMALL` and others. See documentation for all options. The default value is `CPU`.
     */
    workloadType?: string;
}

export interface ModelServingConfigTrafficConfig {
    /**
     * Each block represents a route that defines traffic to each served entity. Each `servedEntity` block needs to have a corresponding `routes` block.
     */
    routes?: outputs.ModelServingConfigTrafficConfigRoute[];
}

export interface ModelServingConfigTrafficConfigRoute {
    servedModelName: string;
    /**
     * The percentage of endpoint traffic to send to this route. It must be an integer between 0 and 100 inclusive.
     */
    trafficPercentage: number;
}

export interface ModelServingRateLimit {
    /**
     * Used to specify how many calls are allowed for a key within the renewal_period.
     */
    calls: number;
    /**
     * Key field for a serving endpoint rate limit. Currently, only `user` and `endpoint` are supported, with `endpoint` being the default if not specified.
     */
    key?: string;
    /**
     * Renewal period field for a serving endpoint rate limit. Currently, only `minute` is supported.
     */
    renewalPeriod: string;
}

export interface ModelServingTag {
    /**
     * The key field for a tag.
     */
    key: string;
    /**
     * The value field for a tag.
     */
    value?: string;
}

export interface MountAbfs {
    clientId: string;
    clientSecretKey: string;
    clientSecretScope: string;
    containerName: string;
    directory?: string;
    initializeFileSystem: boolean;
    storageAccountName: string;
    tenantId: string;
}

export interface MountAdl {
    clientId: string;
    clientSecretKey: string;
    clientSecretScope: string;
    directory?: string;
    sparkConfPrefix?: string;
    storageResourceName: string;
    tenantId: string;
}

export interface MountGs {
    bucketName: string;
    serviceAccount?: string;
}

export interface MountS3 {
    bucketName: string;
    instanceProfile?: string;
}

export interface MountWasb {
    authType: string;
    containerName: string;
    directory?: string;
    storageAccountName: string;
    tokenSecretKey: string;
    tokenSecretScope: string;
}

export interface MwsCustomerManagedKeysAwsKeyInfo {
    /**
     * The AWS KMS key alias.
     */
    keyAlias?: string;
    /**
     * The AWS KMS key's Amazon Resource Name (ARN).
     */
    keyArn: string;
    /**
     * (Computed) The AWS region in which KMS key is deployed to. This is not required.
     */
    keyRegion: string;
}

export interface MwsCustomerManagedKeysGcpKeyInfo {
    /**
     * The GCP KMS key's resource name.
     */
    kmsKeyId: string;
}

export interface MwsNetworkConnectivityConfigEgressConfig {
    defaultRules?: outputs.MwsNetworkConnectivityConfigEgressConfigDefaultRules;
    targetRules?: outputs.MwsNetworkConnectivityConfigEgressConfigTargetRules;
}

export interface MwsNetworkConnectivityConfigEgressConfigDefaultRules {
    awsStableIpRule?: outputs.MwsNetworkConnectivityConfigEgressConfigDefaultRulesAwsStableIpRule;
    /**
     * This provides a list of subnets. These subnets need to be allowed in your Azure resources in order for Databricks to access. See `default_rules.azure_service_endpoint_rule.target_services` for the supported Azure services.
     */
    azureServiceEndpointRule?: outputs.MwsNetworkConnectivityConfigEgressConfigDefaultRulesAzureServiceEndpointRule;
}

export interface MwsNetworkConnectivityConfigEgressConfigDefaultRulesAwsStableIpRule {
    cidrBlocks?: string[];
}

export interface MwsNetworkConnectivityConfigEgressConfigDefaultRulesAzureServiceEndpointRule {
    subnets?: string[];
    targetRegion?: string;
    targetServices?: string[];
}

export interface MwsNetworkConnectivityConfigEgressConfigTargetRules {
    azurePrivateEndpointRules?: outputs.MwsNetworkConnectivityConfigEgressConfigTargetRulesAzurePrivateEndpointRule[];
}

export interface MwsNetworkConnectivityConfigEgressConfigTargetRulesAzurePrivateEndpointRule {
    connectionState?: string;
    creationTime?: number;
    deactivated?: boolean;
    deactivatedAt?: number;
    endpointName?: string;
    groupId?: string;
    /**
     * Canonical unique identifier of Network Connectivity Config in Databricks Account
     */
    networkConnectivityConfigId?: string;
    resourceId?: string;
    ruleId?: string;
    updatedTime?: number;
}

export interface MwsNetworksErrorMessage {
    errorMessage?: string;
    errorType?: string;
}

export interface MwsNetworksGcpNetworkInfo {
    /**
     * The Google Cloud project ID of the VPC network.
     */
    networkProjectId: string;
    /**
     * The name of the secondary IP range for pods. A Databricks-managed GKE cluster uses this IP range for its pods. This secondary IP range can only be used by one workspace.
     */
    podIpRangeName: string;
    /**
     * The name of the secondary IP range for services. A Databricks-managed GKE cluster uses this IP range for its services. This secondary IP range can only be used by one workspace.
     */
    serviceIpRangeName: string;
    /**
     * The ID of the subnet associated with this network.
     */
    subnetId: string;
    /**
     * The Google Cloud region of the workspace data plane. For example, `us-east4`.
     */
    subnetRegion: string;
    /**
     * The ID of the VPC associated with this network. VPC IDs can be used in multiple network configurations.
     */
    vpcId: string;
}

export interface MwsNetworksVpcEndpoints {
    dataplaneRelays: string[];
    restApis: string[];
}

export interface MwsVpcEndpointGcpVpcEndpointInfo {
    /**
     * Region of the PSC endpoint.
     */
    endpointRegion: string;
    /**
     * The Google Cloud project ID of the VPC network where the PSC connection resides.
     */
    projectId: string;
    /**
     * The unique ID of this PSC connection.
     */
    pscConnectionId: string;
    /**
     * The name of the PSC endpoint in the Google Cloud project.
     */
    pscEndpointName: string;
    /**
     * The service attachment this PSC connection connects to.
     */
    serviceAttachmentId: string;
}

export interface MwsWorkspacesCloudResourceContainer {
    /**
     * A block that consists of the following field:
     */
    gcp: outputs.MwsWorkspacesCloudResourceContainerGcp;
}

export interface MwsWorkspacesCloudResourceContainerGcp {
    /**
     * The Google Cloud project ID, which the workspace uses to instantiate cloud resources for your workspace.
     */
    projectId: string;
}

export interface MwsWorkspacesExternalCustomerInfo {
    authoritativeUserEmail: string;
    authoritativeUserFullName: string;
    customerName: string;
}

export interface MwsWorkspacesGcpManagedNetworkConfig {
    gkeClusterPodIpRange: string;
    gkeClusterServiceIpRange: string;
    subnetCidr: string;
}

export interface MwsWorkspacesGkeConfig {
    /**
     * Specifies the network connectivity types for the GKE nodes and the GKE master network. Possible values are: `PRIVATE_NODE_PUBLIC_MASTER`, `PUBLIC_NODE_PUBLIC_MASTER`.
     */
    connectivityType: string;
    /**
     * The IP range from which to allocate GKE cluster master resources. This field will be ignored if GKE private cluster is not enabled. It must be exactly as big as `/28`.
     */
    masterIpRange: string;
}

export interface MwsWorkspacesToken {
    comment?: string;
    /**
     * Token expiry lifetime. By default its 2592000 (30 days).
     */
    lifetimeSeconds?: number;
    tokenId: string;
    tokenValue: string;
}

export interface OnlineTableSpec {
    /**
     * Whether to create a full-copy pipeline -- a pipeline that stops after creates a full copy of the source table upon initialization and does not process any change data feeds (CDFs) afterwards. The pipeline can still be manually triggered afterwards, but it always perform a full copy of the source table and there are no incremental updates. This mode is useful for syncing views or tables without CDFs to online tables. Note that the full-copy pipeline only supports "triggered" scheduling policy.
     */
    performFullCopy?: boolean;
    /**
     * ID of the associated Delta Live Table pipeline.
     */
    pipelineId: string;
    /**
     * list of the columns comprising the primary key.
     */
    primaryKeyColumns?: string[];
    /**
     * empty block that specifies that pipeline runs continuously after generating the initial data.  Conflicts with `runTriggered`.
     */
    runContinuously?: outputs.OnlineTableSpecRunContinuously;
    /**
     * empty block that specifies that pipeline stops after generating the initial data and can be triggered later (manually, through a cron job or through data triggers).
     */
    runTriggered?: outputs.OnlineTableSpecRunTriggered;
    /**
     * full name of the source table.
     */
    sourceTableFullName?: string;
    /**
     * Time series key to deduplicate (tie-break) rows with the same primary key.
     */
    timeseriesKey?: string;
}

export interface OnlineTableSpecRunContinuously {
}

export interface OnlineTableSpecRunTriggered {
}

export interface OnlineTableStatus {
    continuousUpdateStatus?: outputs.OnlineTableStatusContinuousUpdateStatus;
    /**
     * The state of the online table.
     */
    detailedState?: string;
    failedStatus?: outputs.OnlineTableStatusFailedStatus;
    /**
     * A text description of the current state of the online table.
     */
    message?: string;
    provisioningStatus?: outputs.OnlineTableStatusProvisioningStatus;
    triggeredUpdateStatus?: outputs.OnlineTableStatusTriggeredUpdateStatus;
}

export interface OnlineTableStatusContinuousUpdateStatus {
    initialPipelineSyncProgress?: outputs.OnlineTableStatusContinuousUpdateStatusInitialPipelineSyncProgress;
    lastProcessedCommitVersion?: number;
    timestamp?: string;
}

export interface OnlineTableStatusContinuousUpdateStatusInitialPipelineSyncProgress {
    estimatedCompletionTimeSeconds?: number;
    latestVersionCurrentlyProcessing?: number;
    syncProgressCompletion?: number;
    syncedRowCount?: number;
    totalRowCount?: number;
}

export interface OnlineTableStatusFailedStatus {
    lastProcessedCommitVersion?: number;
    timestamp?: string;
}

export interface OnlineTableStatusProvisioningStatus {
    initialPipelineSyncProgress?: outputs.OnlineTableStatusProvisioningStatusInitialPipelineSyncProgress;
}

export interface OnlineTableStatusProvisioningStatusInitialPipelineSyncProgress {
    estimatedCompletionTimeSeconds?: number;
    latestVersionCurrentlyProcessing?: number;
    syncProgressCompletion?: number;
    syncedRowCount?: number;
    totalRowCount?: number;
}

export interface OnlineTableStatusTriggeredUpdateStatus {
    lastProcessedCommitVersion?: number;
    timestamp?: string;
    triggeredUpdateProgress?: outputs.OnlineTableStatusTriggeredUpdateStatusTriggeredUpdateProgress;
}

export interface OnlineTableStatusTriggeredUpdateStatusTriggeredUpdateProgress {
    estimatedCompletionTimeSeconds?: number;
    latestVersionCurrentlyProcessing?: number;
    syncProgressCompletion?: number;
    syncedRowCount?: number;
    totalRowCount?: number;
}

export interface PermissionsAccessControl {
    groupName?: string;
    permissionLevel: string;
    servicePrincipalName?: string;
    userName?: string;
}

export interface PipelineCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: outputs.PipelineClusterAutoscale;
    awsAttributes?: outputs.PipelineClusterAwsAttributes;
    azureAttributes?: outputs.PipelineClusterAzureAttributes;
    clusterLogConf?: outputs.PipelineClusterClusterLogConf;
    customTags?: {[key: string]: any};
    driverInstancePoolId?: string;
    driverNodeTypeId: string;
    enableLocalDiskEncryption: boolean;
    gcpAttributes?: outputs.PipelineClusterGcpAttributes;
    initScripts?: outputs.PipelineClusterInitScript[];
    instancePoolId?: string;
    label?: string;
    nodeTypeId: string;
    numWorkers?: number;
    policyId?: string;
    sparkConf?: {[key: string]: any};
    sparkEnvVars?: {[key: string]: any};
    sshPublicKeys?: string[];
}

export interface PipelineClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
    mode?: string;
}

export interface PipelineClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface PipelineClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface PipelineClusterClusterLogConf {
    dbfs?: outputs.PipelineClusterClusterLogConfDbfs;
    s3?: outputs.PipelineClusterClusterLogConfS3;
}

export interface PipelineClusterClusterLogConfDbfs {
    destination: string;
}

export interface PipelineClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface PipelineClusterGcpAttributes {
    availability?: string;
    googleServiceAccount?: string;
    localSsdCount?: number;
    zoneId?: string;
}

export interface PipelineClusterInitScript {
    abfss?: outputs.PipelineClusterInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: outputs.PipelineClusterInitScriptDbfs;
    file?: outputs.PipelineClusterInitScriptFile;
    gcs?: outputs.PipelineClusterInitScriptGcs;
    s3?: outputs.PipelineClusterInitScriptS3;
    volumes?: outputs.PipelineClusterInitScriptVolumes;
    workspace?: outputs.PipelineClusterInitScriptWorkspace;
}

export interface PipelineClusterInitScriptAbfss {
    destination: string;
}

export interface PipelineClusterInitScriptDbfs {
    destination: string;
}

export interface PipelineClusterInitScriptFile {
    destination: string;
}

export interface PipelineClusterInitScriptGcs {
    destination: string;
}

export interface PipelineClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface PipelineClusterInitScriptVolumes {
    destination: string;
}

export interface PipelineClusterInitScriptWorkspace {
    destination: string;
}

export interface PipelineDeployment {
    kind?: string;
    metadataFilePath?: string;
}

export interface PipelineFilters {
    excludes?: string[];
    includes?: string[];
}

export interface PipelineLibrary {
    file?: outputs.PipelineLibraryFile;
    jar?: string;
    maven?: outputs.PipelineLibraryMaven;
    notebook?: outputs.PipelineLibraryNotebook;
    whl?: string;
}

export interface PipelineLibraryFile {
    path: string;
}

export interface PipelineLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface PipelineLibraryNotebook {
    path: string;
}

export interface PipelineNotification {
    /**
     * non-empty list of alert types. Right now following alert types are supported, consult documentation for actual list
     * * `on-update-success` - a pipeline update completes successfully.
     * * `on-update-failure` - a pipeline update fails with a retryable error.
     * * `on-update-fatal-failure` - a pipeline update fails with a non-retryable (fatal) error.
     * * `on-flow-failure` - a single data flow fails.
     */
    alerts: string[];
    /**
     * non-empty list of emails to notify.
     */
    emailRecipients: string[];
}

export interface RecipientIpAccessList {
    allowedIpAddresses?: string[];
}

export interface RecipientPropertiesKvpairs {
    /**
     * a map of string key-value pairs with recipient's properties.  Properties with name starting with `databricks.` are reserved.
     */
    properties: {[key: string]: any};
}

export interface RecipientToken {
    /**
     * Full activation URL to retrieve the access token. It will be empty if the token is already retrieved.
     */
    activationUrl: string;
    /**
     * Time at which this recipient was created, in epoch milliseconds.
     */
    createdAt: number;
    /**
     * Username of recipient creator.
     */
    createdBy: string;
    /**
     * Expiration timestamp of the token in epoch milliseconds.
     */
    expirationTime: number;
    /**
     * Unique ID of the recipient token.
     */
    id: string;
    /**
     * Time at which this recipient was updated, in epoch milliseconds.
     */
    updatedAt: number;
    /**
     * Username of recipient Token updater.
     */
    updatedBy: string;
}

export interface RepoSparseCheckout {
    /**
     * array of paths (directories) that will be used for sparse checkout.  List of patterns could be updated in-place.
     *
     * Addition or removal of the `sparseCheckout` configuration block will lead to recreation of the Git folder.
     */
    patterns: string[];
}

export interface RestrictWorkspaceAdminsSettingRestrictWorkspaceAdmins {
    /**
     * The restrict workspace admins status for the workspace.
     */
    status: string;
}

export interface SecretScopeKeyvaultMetadata {
    dnsName: string;
    resourceId: string;
}

export interface ShareObject {
    addedAt: number;
    addedBy: string;
    /**
     * Whether to enable Change Data Feed (cdf) on the shared object. When this field is set, field `historyDataSharingStatus` can not be set.
     */
    cdfEnabled?: boolean;
    /**
     * Description about the object.
     */
    comment?: string;
    /**
     * Type of the data object, currently `TABLE`, `SCHEMA`, `VOLUME`, and `MODEL` are supported.
     */
    dataObjectType: string;
    /**
     * Whether to enable history sharing, one of: `ENABLED`, `DISABLED`. When a table has history sharing enabled, recipients can query table data by version, starting from the current table version. If not specified, clients can only query starting from the version of the object at the time it was added to the share. *NOTE*: The startVersion should be less than or equal the current version of the object. When this field is set, field `cdfEnabled` can not be set.
     *
     * To share only part of a table when you add the table to a share, you can provide partition specifications. This is specified by a number of `partition` blocks. Each entry in `partition` block takes a list of `value` blocks. The field is documented below.
     */
    historyDataSharingStatus?: string;
    /**
     * Full name of the object, e.g. `catalog.schema.name` for a tables, volumes and models, or `catalog.schema` for schemas.
     */
    name: string;
    partitions?: outputs.ShareObjectPartition[];
    /**
     * A user-provided new name for the data object within the share. If this new name is not provided, the object's original name will be used as the `sharedAs` name. The `sharedAs` name must be unique within a Share. Change forces creation of a new resource.
     */
    sharedAs?: string;
    /**
     * The start version associated with the object for cdf. This allows data providers to control the lowest object version that is accessible by clients.
     */
    startVersion?: number;
    /**
     * Status of the object, one of: `ACTIVE`, `PERMISSION_DENIED`.
     */
    status: string;
}

export interface ShareObjectPartition {
    values: outputs.ShareObjectPartitionValue[];
}

export interface ShareObjectPartitionValue {
    /**
     * The name of the partition column.
     */
    name: string;
    /**
     * The operator to apply for the value, one of: `EQUAL`, `LIKE`
     */
    op: string;
    /**
     * The key of a Delta Sharing recipient's property. For example `databricks-account-id`. When this field is set, field `value` can not be set.
     */
    recipientPropertyKey?: string;
    /**
     * The value of the partition column. When this value is not set, it means null value. When this field is set, field `recipientPropertyKey` can not be set.
     */
    value?: string;
}

export interface SqlAlertOptions {
    /**
     * Name of column in the query result to compare in alert evaluation.
     */
    column: string;
    /**
     * Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/sql/user/alerts/index.html) for custom templating instructions.
     */
    customBody?: string;
    /**
     * Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/sql/user/alerts/index.html) for custom templating instructions.
     */
    customSubject?: string;
    /**
     * State that alert evaluates to when query result is empty.  Currently supported values are `unknown`, `triggered`, `ok` - check [API documentation](https://docs.databricks.com/api/workspace/alerts/create) for full list of supported values.
     */
    emptyResultState?: string;
    /**
     * Whether or not the alert is muted. If an alert is muted, it will not notify users and alert destinations when triggered.
     */
    muted?: boolean;
    /**
     * Operator used to compare in alert evaluation. (Enum: `>`, `>=`, `<`, `<=`, `==`, `!=`)
     */
    op: string;
    /**
     * Value used to compare in alert evaluation.
     */
    value: string;
}

export interface SqlEndpointChannel {
    dbsqlVersion?: string;
    /**
     * Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
     */
    name?: string;
}

export interface SqlEndpointHealth {
    details?: string;
    failureReason?: outputs.SqlEndpointHealthFailureReason;
    message?: string;
    status?: string;
    summary?: string;
}

export interface SqlEndpointHealthFailureReason {
    code?: string;
    parameters?: {[key: string]: any};
    type?: string;
}

export interface SqlEndpointOdbcParams {
    hostname?: string;
    path?: string;
    port?: number;
    protocol?: string;
}

export interface SqlEndpointTags {
    customTags?: outputs.SqlEndpointTagsCustomTag[];
}

export interface SqlEndpointTagsCustomTag {
    key: string;
    value: string;
}

export interface SqlPermissionsPrivilegeAssignment {
    /**
     * `displayName` for a databricks.Group or databricks_user, `applicationId` for a databricks_service_principal.
     */
    principal: string;
    privileges: string[];
}

export interface SqlQueryParameter {
    date?: outputs.SqlQueryParameterDate;
    dateRange?: outputs.SqlQueryParameterDateRange;
    datetime?: outputs.SqlQueryParameterDatetime;
    datetimeRange?: outputs.SqlQueryParameterDatetimeRange;
    datetimesec?: outputs.SqlQueryParameterDatetimesec;
    datetimesecRange?: outputs.SqlQueryParameterDatetimesecRange;
    enum?: outputs.SqlQueryParameterEnum;
    /**
     * The literal parameter marker that appears between double curly braces in the query text.
     * Parameters can have several different types. Type is specified using one of the following configuration blocks: `text`, `number`, `enum`, `query`, `date`, `datetime`, `datetimesec`, `dateRange`, `datetimeRange`, `datetimesecRange`.
     *
     * For `text`, `number`, `date`, `datetime`, `datetimesec` block
     */
    name: string;
    number?: outputs.SqlQueryParameterNumber;
    /**
     * The text of the query to be run.
     */
    query?: outputs.SqlQueryParameterQuery;
    text?: outputs.SqlQueryParameterText;
    /**
     * The text displayed in a parameter picking widget.
     */
    title?: string;
}

export interface SqlQueryParameterDate {
    value: string;
}

export interface SqlQueryParameterDateRange {
    range?: outputs.SqlQueryParameterDateRangeRange;
    value?: string;
}

export interface SqlQueryParameterDateRangeRange {
    end: string;
    start: string;
}

export interface SqlQueryParameterDatetime {
    value: string;
}

export interface SqlQueryParameterDatetimeRange {
    range?: outputs.SqlQueryParameterDatetimeRangeRange;
    value?: string;
}

export interface SqlQueryParameterDatetimeRangeRange {
    end: string;
    start: string;
}

export interface SqlQueryParameterDatetimesec {
    value: string;
}

export interface SqlQueryParameterDatetimesecRange {
    range?: outputs.SqlQueryParameterDatetimesecRangeRange;
    value?: string;
}

export interface SqlQueryParameterDatetimesecRangeRange {
    end: string;
    start: string;
}

export interface SqlQueryParameterEnum {
    multiple?: outputs.SqlQueryParameterEnumMultiple;
    options: string[];
    value?: string;
    values?: string[];
}

export interface SqlQueryParameterEnumMultiple {
    prefix?: string;
    separator: string;
    suffix?: string;
}

export interface SqlQueryParameterNumber {
    value: number;
}

export interface SqlQueryParameterQuery {
    multiple?: outputs.SqlQueryParameterQueryMultiple;
    queryId: string;
    value?: string;
    values?: string[];
}

export interface SqlQueryParameterQueryMultiple {
    prefix?: string;
    separator: string;
    suffix?: string;
}

export interface SqlQueryParameterText {
    value: string;
}

export interface SqlQuerySchedule {
    continuous?: outputs.SqlQueryScheduleContinuous;
    daily?: outputs.SqlQueryScheduleDaily;
    weekly?: outputs.SqlQueryScheduleWeekly;
}

export interface SqlQueryScheduleContinuous {
    intervalSeconds: number;
    untilDate?: string;
}

export interface SqlQueryScheduleDaily {
    intervalDays: number;
    timeOfDay: string;
    untilDate?: string;
}

export interface SqlQueryScheduleWeekly {
    dayOfWeek: string;
    intervalWeeks: number;
    timeOfDay: string;
    untilDate?: string;
}

export interface SqlTableColumn {
    /**
     * User-supplied free-form text.
     */
    comment?: string;
    /**
     * User-visible name of column
     */
    name: string;
    /**
     * Whether field is nullable (Default: `true`)
     */
    nullable?: boolean;
    /**
     * Column type spec (with metadata) as SQL text. Not supported for `VIEW` table_type.
     */
    type?: string;
}

export interface SqlWidgetParameter {
    mapTo?: string;
    name: string;
    title?: string;
    type: string;
    value?: string;
    values?: string[];
}

export interface SqlWidgetPosition {
    autoHeight?: boolean;
    posX?: number;
    posY?: number;
    sizeX: number;
    sizeY: number;
}

export interface StorageCredentialAwsIamRole {
    externalId: string;
    /**
     * The Amazon Resource Name (ARN) of the AWS IAM role for S3 data access, of the form `arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF`
     *
     * `azureManagedIdentity` optional configuration block for using managed identity as credential details for Azure (recommended over service principal):
     */
    roleArn: string;
    unityCatalogIamArn: string;
}

export interface StorageCredentialAzureManagedIdentity {
    /**
     * The Resource ID of the Azure Databricks Access Connector resource, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.Databricks/accessConnectors/connector-name`.
     */
    accessConnectorId: string;
    credentialId: string;
    /**
     * The Resource ID of the Azure User Assigned Managed Identity associated with Azure Databricks Access Connector, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/user-managed-identity-name`.
     *
     * `databricksGcpServiceAccount` optional configuration block for creating a Databricks-managed GCP Service Account:
     */
    managedIdentityId?: string;
}

export interface StorageCredentialAzureServicePrincipal {
    /**
     * The application ID of the application registration within the referenced AAD tenant
     */
    applicationId: string;
    /**
     * The client secret generated for the above app ID in AAD. **This field is redacted on output**
     */
    clientSecret: string;
    /**
     * The directory ID corresponding to the Azure Active Directory (AAD) tenant of the application
     */
    directoryId: string;
}

export interface StorageCredentialDatabricksGcpServiceAccount {
    credentialId: string;
    /**
     * The email of the GCP service account created, to be granted access to relevant buckets.
     *
     * `azureServicePrincipal` optional configuration block to use service principal as credential details for Azure (Legacy):
     */
    email: string;
}

export interface StorageCredentialGcpServiceAccountKey {
    /**
     * The email of the GCP service account created, to be granted access to relevant buckets.
     *
     * `azureServicePrincipal` optional configuration block to use service principal as credential details for Azure (Legacy):
     */
    email: string;
    privateKey: string;
    privateKeyId: string;
}

export interface TableColumn {
    comment?: string;
    name: string;
    nullable?: boolean;
    partitionIndex?: number;
    position: number;
    typeIntervalType?: string;
    typeJson?: string;
    typeName: string;
    typePrecision?: number;
    typeScale?: number;
    typeText: string;
}

export interface VectorSearchEndpointEndpointStatus {
    /**
     * Additional status message.
     */
    message?: string;
    /**
     * Current state of the endpoint. Currently following values are supported: `PROVISIONING`, `ONLINE`, and `OFFLINE`.
     */
    state?: string;
}

export interface VectorSearchIndexDeltaSyncIndexSpec {
    /**
     * array of objects representing columns that contain the embedding source.  Each entry consists of:
     */
    embeddingSourceColumns?: outputs.VectorSearchIndexDeltaSyncIndexSpecEmbeddingSourceColumn[];
    embeddingVectorColumns?: outputs.VectorSearchIndexDeltaSyncIndexSpecEmbeddingVectorColumn[];
    /**
     * ID of the associated Delta Live Table pipeline.
     */
    pipelineId: string;
    pipelineType?: string;
    /**
     * The name of the source table.
     */
    sourceTable?: string;
}

export interface VectorSearchIndexDeltaSyncIndexSpecEmbeddingSourceColumn {
    embeddingModelEndpointName?: string;
    /**
     * Three-level name of the Vector Search Index to create (`catalog.schema.index_name`).
     */
    name?: string;
}

export interface VectorSearchIndexDeltaSyncIndexSpecEmbeddingVectorColumn {
    embeddingDimension?: number;
    /**
     * Three-level name of the Vector Search Index to create (`catalog.schema.index_name`).
     */
    name?: string;
}

export interface VectorSearchIndexDirectAccessIndexSpec {
    /**
     * array of objects representing columns that contain the embedding source.  Each entry consists of:
     */
    embeddingSourceColumns?: outputs.VectorSearchIndexDirectAccessIndexSpecEmbeddingSourceColumn[];
    embeddingVectorColumns?: outputs.VectorSearchIndexDirectAccessIndexSpecEmbeddingVectorColumn[];
    /**
     * The schema of the index in JSON format.  Check the [API documentation](https://docs.databricks.com/api/workspace/vectorsearchindexes/createindex#direct_access_index_spec-schema_json) for a list of supported data types.
     */
    schemaJson?: string;
}

export interface VectorSearchIndexDirectAccessIndexSpecEmbeddingSourceColumn {
    embeddingModelEndpointName?: string;
    /**
     * Three-level name of the Vector Search Index to create (`catalog.schema.index_name`).
     */
    name?: string;
}

export interface VectorSearchIndexDirectAccessIndexSpecEmbeddingVectorColumn {
    embeddingDimension?: number;
    /**
     * Three-level name of the Vector Search Index to create (`catalog.schema.index_name`).
     */
    name?: string;
}

export interface VectorSearchIndexStatus {
    /**
     * Index API Url to be used to perform operations on the index
     */
    indexUrl?: string;
    /**
     * Number of rows indexed
     */
    indexedRowCount?: number;
    /**
     * Message associated with the index status
     */
    message?: string;
    /**
     * Whether the index is ready for search
     */
    ready?: boolean;
}

