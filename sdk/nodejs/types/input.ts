// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessControlRuleSetGrantRule {
    principals?: pulumi.Input<pulumi.Input<string>[]>;
    role: pulumi.Input<string>;
}

export interface AlertCondition {
    emptyResultState?: pulumi.Input<string>;
    op: pulumi.Input<string>;
    operand: pulumi.Input<inputs.AlertConditionOperand>;
    threshold?: pulumi.Input<inputs.AlertConditionThreshold>;
}

export interface AlertConditionOperand {
    column: pulumi.Input<inputs.AlertConditionOperandColumn>;
}

export interface AlertConditionOperandColumn {
    name: pulumi.Input<string>;
}

export interface AlertConditionThreshold {
    value: pulumi.Input<inputs.AlertConditionThresholdValue>;
}

export interface AlertConditionThresholdValue {
    boolValue?: pulumi.Input<boolean>;
    doubleValue?: pulumi.Input<number>;
    stringValue?: pulumi.Input<string>;
}

export interface AppActiveDeployment {
    createTime?: pulumi.Input<string>;
    creator?: pulumi.Input<string>;
    deploymentArtifacts?: pulumi.Input<inputs.AppActiveDeploymentDeploymentArtifacts>;
    deploymentId?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    sourceCodePath?: pulumi.Input<string>;
    status?: pulumi.Input<inputs.AppActiveDeploymentStatus>;
    updateTime?: pulumi.Input<string>;
}

export interface AppActiveDeploymentDeploymentArtifacts {
    sourceCodePath?: pulumi.Input<string>;
}

export interface AppActiveDeploymentStatus {
    message?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface AppAppStatus {
    message?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface AppComputeStatus {
    message?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface AppPendingDeployment {
    createTime?: pulumi.Input<string>;
    creator?: pulumi.Input<string>;
    deploymentArtifacts?: pulumi.Input<inputs.AppPendingDeploymentDeploymentArtifacts>;
    deploymentId?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    sourceCodePath?: pulumi.Input<string>;
    status?: pulumi.Input<inputs.AppPendingDeploymentStatus>;
    updateTime?: pulumi.Input<string>;
}

export interface AppPendingDeploymentDeploymentArtifacts {
    sourceCodePath?: pulumi.Input<string>;
}

export interface AppPendingDeploymentStatus {
    message?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface AppResource {
    description?: pulumi.Input<string>;
    job?: pulumi.Input<inputs.AppResourceJob>;
    name: pulumi.Input<string>;
    secret?: pulumi.Input<inputs.AppResourceSecret>;
    servingEndpoint?: pulumi.Input<inputs.AppResourceServingEndpoint>;
    sqlWarehouse?: pulumi.Input<inputs.AppResourceSqlWarehouse>;
}

export interface AppResourceJob {
    id: pulumi.Input<string>;
    permission: pulumi.Input<string>;
}

export interface AppResourceSecret {
    key: pulumi.Input<string>;
    permission: pulumi.Input<string>;
    scope: pulumi.Input<string>;
}

export interface AppResourceServingEndpoint {
    name: pulumi.Input<string>;
    permission: pulumi.Input<string>;
}

export interface AppResourceSqlWarehouse {
    id: pulumi.Input<string>;
    permission: pulumi.Input<string>;
}

export interface ArtifactAllowlistArtifactMatcher {
    artifact: pulumi.Input<string>;
    matchType: pulumi.Input<string>;
}

export interface AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspace {
    canToggle?: pulumi.Input<boolean>;
    enabled: pulumi.Input<boolean>;
    enablementDetails?: pulumi.Input<inputs.AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceEnablementDetails>;
    maintenanceWindow?: pulumi.Input<inputs.AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceMaintenanceWindow>;
    restartEvenIfNoUpdatesAvailable?: pulumi.Input<boolean>;
}

export interface AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceEnablementDetails {
    forcedForComplianceMode?: pulumi.Input<boolean>;
    unavailableForDisabledEntitlement?: pulumi.Input<boolean>;
    unavailableForNonEnterpriseTier?: pulumi.Input<boolean>;
}

export interface AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceMaintenanceWindow {
    weekDayBasedSchedule?: pulumi.Input<inputs.AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceMaintenanceWindowWeekDayBasedSchedule>;
}

export interface AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceMaintenanceWindowWeekDayBasedSchedule {
    dayOfWeek: pulumi.Input<string>;
    frequency: pulumi.Input<string>;
    windowStartTime?: pulumi.Input<inputs.AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceMaintenanceWindowWeekDayBasedScheduleWindowStartTime>;
}

export interface AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceMaintenanceWindowWeekDayBasedScheduleWindowStartTime {
    hours: pulumi.Input<number>;
    minutes: pulumi.Input<number>;
}

export interface BudgetAlertConfiguration {
    actionConfigurations?: pulumi.Input<pulumi.Input<inputs.BudgetAlertConfigurationActionConfiguration>[]>;
    alertConfigurationId?: pulumi.Input<string>;
    quantityThreshold?: pulumi.Input<string>;
    quantityType?: pulumi.Input<string>;
    timePeriod?: pulumi.Input<string>;
    triggerType?: pulumi.Input<string>;
}

export interface BudgetAlertConfigurationActionConfiguration {
    actionConfigurationId?: pulumi.Input<string>;
    actionType?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

export interface BudgetFilter {
    tags?: pulumi.Input<pulumi.Input<inputs.BudgetFilterTag>[]>;
    workspaceId?: pulumi.Input<inputs.BudgetFilterWorkspaceId>;
}

export interface BudgetFilterTag {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.BudgetFilterTagValue>;
}

export interface BudgetFilterTagValue {
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BudgetFilterWorkspaceId {
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ClusterAutoscale {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface ClusterAwsAttributes {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeIops?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeThroughput?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface ClusterAzureAttributes {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    logAnalyticsInfo?: pulumi.Input<inputs.ClusterAzureAttributesLogAnalyticsInfo>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface ClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: pulumi.Input<string>;
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
}

export interface ClusterClusterLogConf {
    dbfs?: pulumi.Input<inputs.ClusterClusterLogConfDbfs>;
    s3?: pulumi.Input<inputs.ClusterClusterLogConfS3>;
}

export interface ClusterClusterLogConfDbfs {
    destination: pulumi.Input<string>;
}

export interface ClusterClusterLogConfS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface ClusterClusterMountInfo {
    localMountDirPath: pulumi.Input<string>;
    networkFilesystemInfo: pulumi.Input<inputs.ClusterClusterMountInfoNetworkFilesystemInfo>;
    remoteMountDirPath?: pulumi.Input<string>;
}

export interface ClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
}

export interface ClusterDockerImage {
    basicAuth?: pulumi.Input<inputs.ClusterDockerImageBasicAuth>;
    url: pulumi.Input<string>;
}

export interface ClusterDockerImageBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface ClusterGcpAttributes {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface ClusterInitScript {
    abfss?: pulumi.Input<inputs.ClusterInitScriptAbfss>;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: pulumi.Input<inputs.ClusterInitScriptDbfs>;
    file?: pulumi.Input<inputs.ClusterInitScriptFile>;
    gcs?: pulumi.Input<inputs.ClusterInitScriptGcs>;
    s3?: pulumi.Input<inputs.ClusterInitScriptS3>;
    volumes?: pulumi.Input<inputs.ClusterInitScriptVolumes>;
    workspace?: pulumi.Input<inputs.ClusterInitScriptWorkspace>;
}

export interface ClusterInitScriptAbfss {
    destination: pulumi.Input<string>;
}

export interface ClusterInitScriptDbfs {
    destination: pulumi.Input<string>;
}

export interface ClusterInitScriptFile {
    destination: pulumi.Input<string>;
}

export interface ClusterInitScriptGcs {
    destination: pulumi.Input<string>;
}

export interface ClusterInitScriptS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface ClusterInitScriptVolumes {
    destination: pulumi.Input<string>;
}

export interface ClusterInitScriptWorkspace {
    destination: pulumi.Input<string>;
}

export interface ClusterLibrary {
    cran?: pulumi.Input<inputs.ClusterLibraryCran>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.ClusterLibraryMaven>;
    pypi?: pulumi.Input<inputs.ClusterLibraryPypi>;
    requirements?: pulumi.Input<string>;
    whl?: pulumi.Input<string>;
}

export interface ClusterLibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface ClusterLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface ClusterLibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface ClusterPolicyLibrary {
    cran?: pulumi.Input<inputs.ClusterPolicyLibraryCran>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.ClusterPolicyLibraryMaven>;
    pypi?: pulumi.Input<inputs.ClusterPolicyLibraryPypi>;
    requirements?: pulumi.Input<string>;
    whl?: pulumi.Input<string>;
}

export interface ClusterPolicyLibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface ClusterPolicyLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface ClusterPolicyLibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface ClusterWorkloadType {
    clients: pulumi.Input<inputs.ClusterWorkloadTypeClients>;
}

export interface ClusterWorkloadTypeClients {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface ComplianceSecurityProfileWorkspaceSettingComplianceSecurityProfileWorkspace {
    complianceStandards: pulumi.Input<pulumi.Input<string>[]>;
    isEnabled: pulumi.Input<boolean>;
}

export interface CredentialAwsIamRole {
    externalId?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    unityCatalogIamArn?: pulumi.Input<string>;
}

export interface CredentialAzureManagedIdentity {
    accessConnectorId: pulumi.Input<string>;
    credentialId?: pulumi.Input<string>;
    managedIdentityId?: pulumi.Input<string>;
}

export interface CredentialAzureServicePrincipal {
    applicationId: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    directoryId: pulumi.Input<string>;
}

export interface CredentialDatabricksGcpServiceAccount {
    credentialId?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    privateKeyId?: pulumi.Input<string>;
}

export interface CustomAppIntegrationTokenAccessPolicy {
    accessTokenTtlInMinutes?: pulumi.Input<number>;
    refreshTokenTtlInMinutes?: pulumi.Input<number>;
}

export interface DefaultNamespaceSettingNamespace {
    value?: pulumi.Input<string>;
}

export interface EnhancedSecurityMonitoringWorkspaceSettingEnhancedSecurityMonitoringWorkspace {
    isEnabled: pulumi.Input<boolean>;
}

export interface ExternalLocationEncryptionDetails {
    sseEncryptionDetails?: pulumi.Input<inputs.ExternalLocationEncryptionDetailsSseEncryptionDetails>;
}

export interface ExternalLocationEncryptionDetailsSseEncryptionDetails {
    algorithm?: pulumi.Input<string>;
    awsKmsKeyArn?: pulumi.Input<string>;
}

export interface GetCatalogCatalogInfo {
    browseOnly?: boolean;
    catalogType?: string;
    comment?: string;
    connectionName?: string;
    createdAt?: number;
    createdBy?: string;
    effectivePredictiveOptimizationFlag?: inputs.GetCatalogCatalogInfoEffectivePredictiveOptimizationFlag;
    enablePredictiveOptimization?: string;
    fullName?: string;
    isolationMode?: string;
    metastoreId?: string;
    name?: string;
    options?: {[key: string]: string};
    owner?: string;
    properties?: {[key: string]: string};
    providerName?: string;
    provisioningInfo?: inputs.GetCatalogCatalogInfoProvisioningInfo;
    securableKind?: string;
    securableType?: string;
    shareName?: string;
    storageLocation?: string;
    storageRoot?: string;
    updatedAt?: number;
    updatedBy?: string;
}

export interface GetCatalogCatalogInfoArgs {
    browseOnly?: pulumi.Input<boolean>;
    catalogType?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    connectionName?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    effectivePredictiveOptimizationFlag?: pulumi.Input<inputs.GetCatalogCatalogInfoEffectivePredictiveOptimizationFlagArgs>;
    enablePredictiveOptimization?: pulumi.Input<string>;
    fullName?: pulumi.Input<string>;
    isolationMode?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    owner?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    providerName?: pulumi.Input<string>;
    provisioningInfo?: pulumi.Input<inputs.GetCatalogCatalogInfoProvisioningInfoArgs>;
    securableKind?: pulumi.Input<string>;
    securableType?: pulumi.Input<string>;
    shareName?: pulumi.Input<string>;
    storageLocation?: pulumi.Input<string>;
    storageRoot?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
}

export interface GetCatalogCatalogInfoEffectivePredictiveOptimizationFlag {
    inheritedFromName?: string;
    inheritedFromType?: string;
    value: string;
}

export interface GetCatalogCatalogInfoEffectivePredictiveOptimizationFlagArgs {
    inheritedFromName?: pulumi.Input<string>;
    inheritedFromType?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface GetCatalogCatalogInfoProvisioningInfo {
    state?: string;
}

export interface GetCatalogCatalogInfoProvisioningInfoArgs {
    state?: pulumi.Input<string>;
}

export interface GetClusterClusterInfo {
    autoscale?: inputs.GetClusterClusterInfoAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: inputs.GetClusterClusterInfoAwsAttributes;
    azureAttributes?: inputs.GetClusterClusterInfoAzureAttributes;
    clusterCores?: number;
    clusterId?: string;
    clusterLogConf?: inputs.GetClusterClusterInfoClusterLogConf;
    clusterLogStatus?: inputs.GetClusterClusterInfoClusterLogStatus;
    clusterMemoryMb?: number;
    clusterName?: string;
    clusterSource?: string;
    creatorUserName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    defaultTags?: {[key: string]: string};
    dockerImage?: inputs.GetClusterClusterInfoDockerImage;
    driver?: inputs.GetClusterClusterInfoDriver;
    driverInstancePoolId?: string;
    driverNodeTypeId?: string;
    enableElasticDisk?: boolean;
    enableLocalDiskEncryption?: boolean;
    executors?: inputs.GetClusterClusterInfoExecutor[];
    gcpAttributes?: inputs.GetClusterClusterInfoGcpAttributes;
    initScripts?: inputs.GetClusterClusterInfoInitScript[];
    instancePoolId?: string;
    isSingleNode?: boolean;
    jdbcPort?: number;
    kind?: string;
    lastRestartedTime?: number;
    lastStateLossTime?: number;
    nodeTypeId?: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkContextId?: number;
    sparkEnvVars?: {[key: string]: string};
    sparkVersion?: string;
    spec?: inputs.GetClusterClusterInfoSpec;
    sshPublicKeys?: string[];
    startTime?: number;
    state?: string;
    stateMessage?: string;
    terminatedTime?: number;
    terminationReason?: inputs.GetClusterClusterInfoTerminationReason;
    useMlRuntime?: boolean;
    workloadType?: inputs.GetClusterClusterInfoWorkloadType;
}

export interface GetClusterClusterInfoArgs {
    autoscale?: pulumi.Input<inputs.GetClusterClusterInfoAutoscaleArgs>;
    autoterminationMinutes?: pulumi.Input<number>;
    awsAttributes?: pulumi.Input<inputs.GetClusterClusterInfoAwsAttributesArgs>;
    azureAttributes?: pulumi.Input<inputs.GetClusterClusterInfoAzureAttributesArgs>;
    clusterCores?: pulumi.Input<number>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.GetClusterClusterInfoClusterLogConfArgs>;
    clusterLogStatus?: pulumi.Input<inputs.GetClusterClusterInfoClusterLogStatusArgs>;
    clusterMemoryMb?: pulumi.Input<number>;
    clusterName?: pulumi.Input<string>;
    clusterSource?: pulumi.Input<string>;
    creatorUserName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dataSecurityMode?: pulumi.Input<string>;
    defaultTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dockerImage?: pulumi.Input<inputs.GetClusterClusterInfoDockerImageArgs>;
    driver?: pulumi.Input<inputs.GetClusterClusterInfoDriverArgs>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    executors?: pulumi.Input<pulumi.Input<inputs.GetClusterClusterInfoExecutorArgs>[]>;
    gcpAttributes?: pulumi.Input<inputs.GetClusterClusterInfoGcpAttributesArgs>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.GetClusterClusterInfoInitScriptArgs>[]>;
    instancePoolId?: pulumi.Input<string>;
    isSingleNode?: pulumi.Input<boolean>;
    jdbcPort?: pulumi.Input<number>;
    kind?: pulumi.Input<string>;
    lastRestartedTime?: pulumi.Input<number>;
    lastStateLossTime?: pulumi.Input<number>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    runtimeEngine?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkContextId?: pulumi.Input<number>;
    sparkEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkVersion?: pulumi.Input<string>;
    spec?: pulumi.Input<inputs.GetClusterClusterInfoSpecArgs>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    startTime?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    stateMessage?: pulumi.Input<string>;
    terminatedTime?: pulumi.Input<number>;
    terminationReason?: pulumi.Input<inputs.GetClusterClusterInfoTerminationReasonArgs>;
    useMlRuntime?: pulumi.Input<boolean>;
    workloadType?: pulumi.Input<inputs.GetClusterClusterInfoWorkloadTypeArgs>;
}

export interface GetClusterClusterInfoAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetClusterClusterInfoAutoscaleArgs {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface GetClusterClusterInfoAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetClusterClusterInfoAwsAttributesArgs {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeIops?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeThroughput?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: inputs.GetClusterClusterInfoAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface GetClusterClusterInfoAzureAttributesArgs {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    logAnalyticsInfo?: pulumi.Input<inputs.GetClusterClusterInfoAzureAttributesLogAnalyticsInfoArgs>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface GetClusterClusterInfoAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface GetClusterClusterInfoAzureAttributesLogAnalyticsInfoArgs {
    logAnalyticsPrimaryKey?: pulumi.Input<string>;
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoClusterLogConf {
    dbfs?: inputs.GetClusterClusterInfoClusterLogConfDbfs;
    s3?: inputs.GetClusterClusterInfoClusterLogConfS3;
}

export interface GetClusterClusterInfoClusterLogConfArgs {
    dbfs?: pulumi.Input<inputs.GetClusterClusterInfoClusterLogConfDbfsArgs>;
    s3?: pulumi.Input<inputs.GetClusterClusterInfoClusterLogConfS3Args>;
}

export interface GetClusterClusterInfoClusterLogConfDbfs {
    destination: string;
}

export interface GetClusterClusterInfoClusterLogConfDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoClusterLogConfS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoClusterLogStatus {
    lastAttempted?: number;
    lastException?: string;
}

export interface GetClusterClusterInfoClusterLogStatusArgs {
    lastAttempted?: pulumi.Input<number>;
    lastException?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoDockerImage {
    basicAuth?: inputs.GetClusterClusterInfoDockerImageBasicAuth;
    url?: string;
}

export interface GetClusterClusterInfoDockerImageArgs {
    basicAuth?: pulumi.Input<inputs.GetClusterClusterInfoDockerImageBasicAuthArgs>;
    url?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoDockerImageBasicAuth {
    password?: string;
    username?: string;
}

export interface GetClusterClusterInfoDockerImageBasicAuthArgs {
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoDriver {
    hostPrivateIp?: string;
    instanceId?: string;
    nodeAwsAttributes?: inputs.GetClusterClusterInfoDriverNodeAwsAttributes;
    nodeId?: string;
    privateIp?: string;
    publicDns?: string;
    startTimestamp?: number;
}

export interface GetClusterClusterInfoDriverArgs {
    hostPrivateIp?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    nodeAwsAttributes?: pulumi.Input<inputs.GetClusterClusterInfoDriverNodeAwsAttributesArgs>;
    nodeId?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    publicDns?: pulumi.Input<string>;
    startTimestamp?: pulumi.Input<number>;
}

export interface GetClusterClusterInfoDriverNodeAwsAttributes {
    isSpot?: boolean;
}

export interface GetClusterClusterInfoDriverNodeAwsAttributesArgs {
    isSpot?: pulumi.Input<boolean>;
}

export interface GetClusterClusterInfoExecutor {
    hostPrivateIp?: string;
    instanceId?: string;
    nodeAwsAttributes?: inputs.GetClusterClusterInfoExecutorNodeAwsAttributes;
    nodeId?: string;
    privateIp?: string;
    publicDns?: string;
    startTimestamp?: number;
}

export interface GetClusterClusterInfoExecutorArgs {
    hostPrivateIp?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    nodeAwsAttributes?: pulumi.Input<inputs.GetClusterClusterInfoExecutorNodeAwsAttributesArgs>;
    nodeId?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    publicDns?: pulumi.Input<string>;
    startTimestamp?: pulumi.Input<number>;
}

export interface GetClusterClusterInfoExecutorNodeAwsAttributes {
    isSpot?: boolean;
}

export interface GetClusterClusterInfoExecutorNodeAwsAttributesArgs {
    isSpot?: pulumi.Input<boolean>;
}

export interface GetClusterClusterInfoGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetClusterClusterInfoGcpAttributesArgs {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoInitScript {
    abfss?: inputs.GetClusterClusterInfoInitScriptAbfss;
    dbfs?: inputs.GetClusterClusterInfoInitScriptDbfs;
    file?: inputs.GetClusterClusterInfoInitScriptFile;
    gcs?: inputs.GetClusterClusterInfoInitScriptGcs;
    s3?: inputs.GetClusterClusterInfoInitScriptS3;
    volumes?: inputs.GetClusterClusterInfoInitScriptVolumes;
    workspace?: inputs.GetClusterClusterInfoInitScriptWorkspace;
}

export interface GetClusterClusterInfoInitScriptArgs {
    abfss?: pulumi.Input<inputs.GetClusterClusterInfoInitScriptAbfssArgs>;
    dbfs?: pulumi.Input<inputs.GetClusterClusterInfoInitScriptDbfsArgs>;
    file?: pulumi.Input<inputs.GetClusterClusterInfoInitScriptFileArgs>;
    gcs?: pulumi.Input<inputs.GetClusterClusterInfoInitScriptGcsArgs>;
    s3?: pulumi.Input<inputs.GetClusterClusterInfoInitScriptS3Args>;
    volumes?: pulumi.Input<inputs.GetClusterClusterInfoInitScriptVolumesArgs>;
    workspace?: pulumi.Input<inputs.GetClusterClusterInfoInitScriptWorkspaceArgs>;
}

export interface GetClusterClusterInfoInitScriptAbfss {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptAbfssArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoInitScriptDbfs {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoInitScriptFile {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptFileArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoInitScriptGcs {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptGcsArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoInitScriptS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoInitScriptVolumes {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptVolumesArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoInitScriptWorkspace {
    destination: string;
}

export interface GetClusterClusterInfoInitScriptWorkspaceArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpec {
    applyPolicyDefaultValues?: boolean;
    autoscale?: inputs.GetClusterClusterInfoSpecAutoscale;
    awsAttributes?: inputs.GetClusterClusterInfoSpecAwsAttributes;
    azureAttributes?: inputs.GetClusterClusterInfoSpecAzureAttributes;
    clusterId?: string;
    clusterLogConf?: inputs.GetClusterClusterInfoSpecClusterLogConf;
    clusterMountInfos?: inputs.GetClusterClusterInfoSpecClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: inputs.GetClusterClusterInfoSpecDockerImage;
    driverInstancePoolId?: string;
    driverNodeTypeId?: string;
    enableElasticDisk?: boolean;
    enableLocalDiskEncryption?: boolean;
    gcpAttributes?: inputs.GetClusterClusterInfoSpecGcpAttributes;
    idempotencyToken?: string;
    initScripts?: inputs.GetClusterClusterInfoSpecInitScript[];
    instancePoolId?: string;
    isSingleNode?: boolean;
    kind?: string;
    libraries?: inputs.GetClusterClusterInfoSpecLibrary[];
    nodeTypeId?: string;
    numWorkers?: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    useMlRuntime?: boolean;
    workloadType?: inputs.GetClusterClusterInfoSpecWorkloadType;
}

export interface GetClusterClusterInfoSpecArgs {
    applyPolicyDefaultValues?: pulumi.Input<boolean>;
    autoscale?: pulumi.Input<inputs.GetClusterClusterInfoSpecAutoscaleArgs>;
    awsAttributes?: pulumi.Input<inputs.GetClusterClusterInfoSpecAwsAttributesArgs>;
    azureAttributes?: pulumi.Input<inputs.GetClusterClusterInfoSpecAzureAttributesArgs>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.GetClusterClusterInfoSpecClusterLogConfArgs>;
    clusterMountInfos?: pulumi.Input<pulumi.Input<inputs.GetClusterClusterInfoSpecClusterMountInfoArgs>[]>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dataSecurityMode?: pulumi.Input<string>;
    dockerImage?: pulumi.Input<inputs.GetClusterClusterInfoSpecDockerImageArgs>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.GetClusterClusterInfoSpecGcpAttributesArgs>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.GetClusterClusterInfoSpecInitScriptArgs>[]>;
    instancePoolId?: pulumi.Input<string>;
    isSingleNode?: pulumi.Input<boolean>;
    kind?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.GetClusterClusterInfoSpecLibraryArgs>[]>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    runtimeEngine?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    useMlRuntime?: pulumi.Input<boolean>;
    workloadType?: pulumi.Input<inputs.GetClusterClusterInfoSpecWorkloadTypeArgs>;
}

export interface GetClusterClusterInfoSpecAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetClusterClusterInfoSpecAutoscaleArgs {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface GetClusterClusterInfoSpecAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeIops?: number;
    ebsVolumeSize?: number;
    ebsVolumeThroughput?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetClusterClusterInfoSpecAwsAttributesArgs {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeIops?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeThroughput?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    logAnalyticsInfo?: inputs.GetClusterClusterInfoSpecAzureAttributesLogAnalyticsInfo;
    spotBidMaxPrice?: number;
}

export interface GetClusterClusterInfoSpecAzureAttributesArgs {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    logAnalyticsInfo?: pulumi.Input<inputs.GetClusterClusterInfoSpecAzureAttributesLogAnalyticsInfoArgs>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface GetClusterClusterInfoSpecAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: string;
    logAnalyticsWorkspaceId?: string;
}

export interface GetClusterClusterInfoSpecAzureAttributesLogAnalyticsInfoArgs {
    logAnalyticsPrimaryKey?: pulumi.Input<string>;
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecClusterLogConf {
    dbfs?: inputs.GetClusterClusterInfoSpecClusterLogConfDbfs;
    s3?: inputs.GetClusterClusterInfoSpecClusterLogConfS3;
}

export interface GetClusterClusterInfoSpecClusterLogConfArgs {
    dbfs?: pulumi.Input<inputs.GetClusterClusterInfoSpecClusterLogConfDbfsArgs>;
    s3?: pulumi.Input<inputs.GetClusterClusterInfoSpecClusterLogConfS3Args>;
}

export interface GetClusterClusterInfoSpecClusterLogConfDbfs {
    destination: string;
}

export interface GetClusterClusterInfoSpecClusterLogConfDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoSpecClusterLogConfS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: inputs.GetClusterClusterInfoSpecClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetClusterClusterInfoSpecClusterMountInfoArgs {
    localMountDirPath: pulumi.Input<string>;
    networkFilesystemInfo: pulumi.Input<inputs.GetClusterClusterInfoSpecClusterMountInfoNetworkFilesystemInfoArgs>;
    remoteMountDirPath?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetClusterClusterInfoSpecClusterMountInfoNetworkFilesystemInfoArgs {
    mountOptions?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecDockerImage {
    basicAuth?: inputs.GetClusterClusterInfoSpecDockerImageBasicAuth;
    url: string;
}

export interface GetClusterClusterInfoSpecDockerImageArgs {
    basicAuth?: pulumi.Input<inputs.GetClusterClusterInfoSpecDockerImageBasicAuthArgs>;
    url: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetClusterClusterInfoSpecDockerImageBasicAuthArgs {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetClusterClusterInfoSpecGcpAttributesArgs {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecInitScript {
    abfss?: inputs.GetClusterClusterInfoSpecInitScriptAbfss;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: inputs.GetClusterClusterInfoSpecInitScriptDbfs;
    file?: inputs.GetClusterClusterInfoSpecInitScriptFile;
    gcs?: inputs.GetClusterClusterInfoSpecInitScriptGcs;
    s3?: inputs.GetClusterClusterInfoSpecInitScriptS3;
    volumes?: inputs.GetClusterClusterInfoSpecInitScriptVolumes;
    workspace?: inputs.GetClusterClusterInfoSpecInitScriptWorkspace;
}

export interface GetClusterClusterInfoSpecInitScriptArgs {
    abfss?: pulumi.Input<inputs.GetClusterClusterInfoSpecInitScriptAbfssArgs>;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: pulumi.Input<inputs.GetClusterClusterInfoSpecInitScriptDbfsArgs>;
    file?: pulumi.Input<inputs.GetClusterClusterInfoSpecInitScriptFileArgs>;
    gcs?: pulumi.Input<inputs.GetClusterClusterInfoSpecInitScriptGcsArgs>;
    s3?: pulumi.Input<inputs.GetClusterClusterInfoSpecInitScriptS3Args>;
    volumes?: pulumi.Input<inputs.GetClusterClusterInfoSpecInitScriptVolumesArgs>;
    workspace?: pulumi.Input<inputs.GetClusterClusterInfoSpecInitScriptWorkspaceArgs>;
}

export interface GetClusterClusterInfoSpecInitScriptAbfss {
    destination: string;
}

export interface GetClusterClusterInfoSpecInitScriptAbfssArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecInitScriptDbfs {
    destination: string;
}

export interface GetClusterClusterInfoSpecInitScriptDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecInitScriptFile {
    destination: string;
}

export interface GetClusterClusterInfoSpecInitScriptFileArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecInitScriptGcs {
    destination: string;
}

export interface GetClusterClusterInfoSpecInitScriptGcsArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetClusterClusterInfoSpecInitScriptS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecInitScriptVolumes {
    destination: string;
}

export interface GetClusterClusterInfoSpecInitScriptVolumesArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecInitScriptWorkspace {
    destination: string;
}

export interface GetClusterClusterInfoSpecInitScriptWorkspaceArgs {
    destination: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecLibrary {
    cran?: inputs.GetClusterClusterInfoSpecLibraryCran;
    egg?: string;
    jar?: string;
    maven?: inputs.GetClusterClusterInfoSpecLibraryMaven;
    pypi?: inputs.GetClusterClusterInfoSpecLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface GetClusterClusterInfoSpecLibraryArgs {
    cran?: pulumi.Input<inputs.GetClusterClusterInfoSpecLibraryCranArgs>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.GetClusterClusterInfoSpecLibraryMavenArgs>;
    pypi?: pulumi.Input<inputs.GetClusterClusterInfoSpecLibraryPypiArgs>;
    requirements?: pulumi.Input<string>;
    whl?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecLibraryCran {
    package: string;
    repo?: string;
}

export interface GetClusterClusterInfoSpecLibraryCranArgs {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface GetClusterClusterInfoSpecLibraryMavenArgs {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecLibraryPypi {
    package: string;
    repo?: string;
}

export interface GetClusterClusterInfoSpecLibraryPypiArgs {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoSpecWorkloadType {
    clients: inputs.GetClusterClusterInfoSpecWorkloadTypeClients;
}

export interface GetClusterClusterInfoSpecWorkloadTypeArgs {
    clients: pulumi.Input<inputs.GetClusterClusterInfoSpecWorkloadTypeClientsArgs>;
}

export interface GetClusterClusterInfoSpecWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetClusterClusterInfoSpecWorkloadTypeClientsArgs {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface GetClusterClusterInfoTerminationReason {
    code?: string;
    parameters?: {[key: string]: string};
    type?: string;
}

export interface GetClusterClusterInfoTerminationReasonArgs {
    code?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
}

export interface GetClusterClusterInfoWorkloadType {
    clients: inputs.GetClusterClusterInfoWorkloadTypeClients;
}

export interface GetClusterClusterInfoWorkloadTypeArgs {
    clients: pulumi.Input<inputs.GetClusterClusterInfoWorkloadTypeClientsArgs>;
}

export interface GetClusterClusterInfoWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetClusterClusterInfoWorkloadTypeClientsArgs {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface GetClustersFilterBy {
    clusterSources?: string[];
    clusterStates?: string[];
    isPinned?: boolean;
    policyId?: string;
}

export interface GetClustersFilterByArgs {
    clusterSources?: pulumi.Input<pulumi.Input<string>[]>;
    clusterStates?: pulumi.Input<pulumi.Input<string>[]>;
    isPinned?: pulumi.Input<boolean>;
    policyId?: pulumi.Input<string>;
}

export interface GetCurrentMetastoreMetastoreInfo {
    cloud?: string;
    createdAt?: number;
    createdBy?: string;
    defaultDataAccessConfigId?: string;
    deltaSharingOrganizationName?: string;
    deltaSharingRecipientTokenLifetimeInSeconds?: number;
    deltaSharingScope?: string;
    externalAccessEnabled?: boolean;
    globalMetastoreId?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    privilegeModelVersion?: string;
    region?: string;
    storageRoot?: string;
    storageRootCredentialId?: string;
    storageRootCredentialName?: string;
    updatedAt?: number;
    updatedBy?: string;
}

export interface GetCurrentMetastoreMetastoreInfoArgs {
    cloud?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    defaultDataAccessConfigId?: pulumi.Input<string>;
    deltaSharingOrganizationName?: pulumi.Input<string>;
    deltaSharingRecipientTokenLifetimeInSeconds?: pulumi.Input<number>;
    deltaSharingScope?: pulumi.Input<string>;
    externalAccessEnabled?: pulumi.Input<boolean>;
    globalMetastoreId?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    privilegeModelVersion?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    storageRoot?: pulumi.Input<string>;
    storageRootCredentialId?: pulumi.Input<string>;
    storageRootCredentialName?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
}

export interface GetExternalLocationExternalLocationInfo {
    accessPoint?: string;
    browseOnly?: boolean;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    credentialId?: string;
    credentialName?: string;
    encryptionDetails?: inputs.GetExternalLocationExternalLocationInfoEncryptionDetails;
    fallback?: boolean;
    isolationMode?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    readOnly?: boolean;
    updatedAt?: number;
    updatedBy?: string;
    url?: string;
}

export interface GetExternalLocationExternalLocationInfoArgs {
    accessPoint?: pulumi.Input<string>;
    browseOnly?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    credentialId?: pulumi.Input<string>;
    credentialName?: pulumi.Input<string>;
    encryptionDetails?: pulumi.Input<inputs.GetExternalLocationExternalLocationInfoEncryptionDetailsArgs>;
    fallback?: pulumi.Input<boolean>;
    isolationMode?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface GetExternalLocationExternalLocationInfoEncryptionDetails {
    sseEncryptionDetails?: inputs.GetExternalLocationExternalLocationInfoEncryptionDetailsSseEncryptionDetails;
}

export interface GetExternalLocationExternalLocationInfoEncryptionDetailsArgs {
    sseEncryptionDetails?: pulumi.Input<inputs.GetExternalLocationExternalLocationInfoEncryptionDetailsSseEncryptionDetailsArgs>;
}

export interface GetExternalLocationExternalLocationInfoEncryptionDetailsSseEncryptionDetails {
    algorithm?: string;
    awsKmsKeyArn?: string;
}

export interface GetExternalLocationExternalLocationInfoEncryptionDetailsSseEncryptionDetailsArgs {
    algorithm?: pulumi.Input<string>;
    awsKmsKeyArn?: pulumi.Input<string>;
}

export interface GetFunctionsFunction {
    browseOnly?: boolean;
    catalogName?: string;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    dataType?: string;
    externalLanguage?: string;
    externalName?: string;
    fullDataType?: string;
    fullName?: string;
    functionId?: string;
    inputParams?: inputs.GetFunctionsFunctionInputParam[];
    isDeterministic?: boolean;
    isNullCall?: boolean;
    metastoreId?: string;
    name?: string;
    owner?: string;
    parameterStyle?: string;
    properties?: string;
    returnParams?: inputs.GetFunctionsFunctionReturnParam[];
    routineBody?: string;
    routineDefinition?: string;
    routineDependencies?: inputs.GetFunctionsFunctionRoutineDependency[];
    schemaName?: string;
    securityType?: string;
    specificName?: string;
    sqlDataAccess?: string;
    sqlPath?: string;
    updatedAt?: number;
    updatedBy?: string;
}

export interface GetFunctionsFunctionArgs {
    browseOnly?: pulumi.Input<boolean>;
    catalogName?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    dataType?: pulumi.Input<string>;
    externalLanguage?: pulumi.Input<string>;
    externalName?: pulumi.Input<string>;
    fullDataType?: pulumi.Input<string>;
    fullName?: pulumi.Input<string>;
    functionId?: pulumi.Input<string>;
    inputParams?: pulumi.Input<pulumi.Input<inputs.GetFunctionsFunctionInputParamArgs>[]>;
    isDeterministic?: pulumi.Input<boolean>;
    isNullCall?: pulumi.Input<boolean>;
    metastoreId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    parameterStyle?: pulumi.Input<string>;
    properties?: pulumi.Input<string>;
    returnParams?: pulumi.Input<pulumi.Input<inputs.GetFunctionsFunctionReturnParamArgs>[]>;
    routineBody?: pulumi.Input<string>;
    routineDefinition?: pulumi.Input<string>;
    routineDependencies?: pulumi.Input<pulumi.Input<inputs.GetFunctionsFunctionRoutineDependencyArgs>[]>;
    schemaName?: pulumi.Input<string>;
    securityType?: pulumi.Input<string>;
    specificName?: pulumi.Input<string>;
    sqlDataAccess?: pulumi.Input<string>;
    sqlPath?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
}

export interface GetFunctionsFunctionInputParam {
    parameters?: inputs.GetFunctionsFunctionInputParamParameter[];
}

export interface GetFunctionsFunctionInputParamArgs {
    parameters?: pulumi.Input<pulumi.Input<inputs.GetFunctionsFunctionInputParamParameterArgs>[]>;
}

export interface GetFunctionsFunctionInputParamParameter {
    comment?: string;
    name: string;
    parameterDefault?: string;
    parameterMode?: string;
    parameterType?: string;
    position: number;
    typeIntervalType?: string;
    typeJson?: string;
    typeName: string;
    typePrecision?: number;
    typeScale?: number;
    typeText: string;
}

export interface GetFunctionsFunctionInputParamParameterArgs {
    comment?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    parameterDefault?: pulumi.Input<string>;
    parameterMode?: pulumi.Input<string>;
    parameterType?: pulumi.Input<string>;
    position: pulumi.Input<number>;
    typeIntervalType?: pulumi.Input<string>;
    typeJson?: pulumi.Input<string>;
    typeName: pulumi.Input<string>;
    typePrecision?: pulumi.Input<number>;
    typeScale?: pulumi.Input<number>;
    typeText: pulumi.Input<string>;
}

export interface GetFunctionsFunctionReturnParam {
    parameters?: inputs.GetFunctionsFunctionReturnParamParameter[];
}

export interface GetFunctionsFunctionReturnParamArgs {
    parameters?: pulumi.Input<pulumi.Input<inputs.GetFunctionsFunctionReturnParamParameterArgs>[]>;
}

export interface GetFunctionsFunctionReturnParamParameter {
    comment?: string;
    name: string;
    parameterDefault?: string;
    parameterMode?: string;
    parameterType?: string;
    position: number;
    typeIntervalType?: string;
    typeJson?: string;
    typeName: string;
    typePrecision?: number;
    typeScale?: number;
    typeText: string;
}

export interface GetFunctionsFunctionReturnParamParameterArgs {
    comment?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    parameterDefault?: pulumi.Input<string>;
    parameterMode?: pulumi.Input<string>;
    parameterType?: pulumi.Input<string>;
    position: pulumi.Input<number>;
    typeIntervalType?: pulumi.Input<string>;
    typeJson?: pulumi.Input<string>;
    typeName: pulumi.Input<string>;
    typePrecision?: pulumi.Input<number>;
    typeScale?: pulumi.Input<number>;
    typeText: pulumi.Input<string>;
}

export interface GetFunctionsFunctionRoutineDependency {
    dependencies?: inputs.GetFunctionsFunctionRoutineDependencyDependency[];
}

export interface GetFunctionsFunctionRoutineDependencyArgs {
    dependencies?: pulumi.Input<pulumi.Input<inputs.GetFunctionsFunctionRoutineDependencyDependencyArgs>[]>;
}

export interface GetFunctionsFunctionRoutineDependencyDependency {
    functions?: inputs.GetFunctionsFunctionRoutineDependencyDependencyFunction[];
    tables?: inputs.GetFunctionsFunctionRoutineDependencyDependencyTable[];
}

export interface GetFunctionsFunctionRoutineDependencyDependencyArgs {
    functions?: pulumi.Input<pulumi.Input<inputs.GetFunctionsFunctionRoutineDependencyDependencyFunctionArgs>[]>;
    tables?: pulumi.Input<pulumi.Input<inputs.GetFunctionsFunctionRoutineDependencyDependencyTableArgs>[]>;
}

export interface GetFunctionsFunctionRoutineDependencyDependencyFunction {
    functionFullName: string;
}

export interface GetFunctionsFunctionRoutineDependencyDependencyFunctionArgs {
    functionFullName: pulumi.Input<string>;
}

export interface GetFunctionsFunctionRoutineDependencyDependencyTable {
    tableFullName: string;
}

export interface GetFunctionsFunctionRoutineDependencyDependencyTableArgs {
    tableFullName: pulumi.Input<string>;
}

export interface GetInstancePoolPoolInfo {
    awsAttributes?: inputs.GetInstancePoolPoolInfoAwsAttributes;
    azureAttributes?: inputs.GetInstancePoolPoolInfoAzureAttributes;
    customTags?: {[key: string]: string};
    defaultTags?: {[key: string]: string};
    diskSpec?: inputs.GetInstancePoolPoolInfoDiskSpec;
    enableElasticDisk?: boolean;
    gcpAttributes?: inputs.GetInstancePoolPoolInfoGcpAttributes;
    idleInstanceAutoterminationMinutes: number;
    instancePoolFleetAttributes?: inputs.GetInstancePoolPoolInfoInstancePoolFleetAttribute[];
    instancePoolId?: string;
    instancePoolName: string;
    maxCapacity?: number;
    minIdleInstances?: number;
    nodeTypeId?: string;
    preloadedDockerImages?: inputs.GetInstancePoolPoolInfoPreloadedDockerImage[];
    preloadedSparkVersions?: string[];
    state?: string;
    stats?: inputs.GetInstancePoolPoolInfoStats;
}

export interface GetInstancePoolPoolInfoArgs {
    awsAttributes?: pulumi.Input<inputs.GetInstancePoolPoolInfoAwsAttributesArgs>;
    azureAttributes?: pulumi.Input<inputs.GetInstancePoolPoolInfoAzureAttributesArgs>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    defaultTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    diskSpec?: pulumi.Input<inputs.GetInstancePoolPoolInfoDiskSpecArgs>;
    enableElasticDisk?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.GetInstancePoolPoolInfoGcpAttributesArgs>;
    idleInstanceAutoterminationMinutes: pulumi.Input<number>;
    instancePoolFleetAttributes?: pulumi.Input<pulumi.Input<inputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeArgs>[]>;
    instancePoolId?: pulumi.Input<string>;
    instancePoolName: pulumi.Input<string>;
    maxCapacity?: pulumi.Input<number>;
    minIdleInstances?: pulumi.Input<number>;
    nodeTypeId?: pulumi.Input<string>;
    preloadedDockerImages?: pulumi.Input<pulumi.Input<inputs.GetInstancePoolPoolInfoPreloadedDockerImageArgs>[]>;
    preloadedSparkVersions?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
    stats?: pulumi.Input<inputs.GetInstancePoolPoolInfoStatsArgs>;
}

export interface GetInstancePoolPoolInfoAwsAttributes {
    availability?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetInstancePoolPoolInfoAwsAttributesArgs {
    availability?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface GetInstancePoolPoolInfoAzureAttributes {
    availability?: string;
    spotBidMaxPrice?: number;
}

export interface GetInstancePoolPoolInfoAzureAttributesArgs {
    availability?: pulumi.Input<string>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface GetInstancePoolPoolInfoDiskSpec {
    diskCount?: number;
    diskSize?: number;
    diskType?: inputs.GetInstancePoolPoolInfoDiskSpecDiskType;
}

export interface GetInstancePoolPoolInfoDiskSpecArgs {
    diskCount?: pulumi.Input<number>;
    diskSize?: pulumi.Input<number>;
    diskType?: pulumi.Input<inputs.GetInstancePoolPoolInfoDiskSpecDiskTypeArgs>;
}

export interface GetInstancePoolPoolInfoDiskSpecDiskType {
    azureDiskVolumeType?: string;
    ebsVolumeType?: string;
}

export interface GetInstancePoolPoolInfoDiskSpecDiskTypeArgs {
    azureDiskVolumeType?: pulumi.Input<string>;
    ebsVolumeType?: pulumi.Input<string>;
}

export interface GetInstancePoolPoolInfoGcpAttributes {
    gcpAvailability?: string;
    localSsdCount?: number;
    zoneId?: string;
}

export interface GetInstancePoolPoolInfoGcpAttributesArgs {
    gcpAvailability?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttribute {
    fleetOnDemandOption?: inputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOption;
    fleetSpotOption?: inputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOption;
    launchTemplateOverrides: inputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverride[];
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeArgs {
    fleetOnDemandOption?: pulumi.Input<inputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOptionArgs>;
    fleetSpotOption?: pulumi.Input<inputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOptionArgs>;
    launchTemplateOverrides: pulumi.Input<pulumi.Input<inputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverrideArgs>[]>;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOptionArgs {
    allocationStrategy: pulumi.Input<string>;
    instancePoolsToUseCount?: pulumi.Input<number>;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOption {
    allocationStrategy: string;
    instancePoolsToUseCount?: number;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOptionArgs {
    allocationStrategy: pulumi.Input<string>;
    instancePoolsToUseCount?: pulumi.Input<number>;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverride {
    availabilityZone: string;
    instanceType: string;
}

export interface GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverrideArgs {
    availabilityZone: pulumi.Input<string>;
    instanceType: pulumi.Input<string>;
}

export interface GetInstancePoolPoolInfoPreloadedDockerImage {
    basicAuth?: inputs.GetInstancePoolPoolInfoPreloadedDockerImageBasicAuth;
    url: string;
}

export interface GetInstancePoolPoolInfoPreloadedDockerImageArgs {
    basicAuth?: pulumi.Input<inputs.GetInstancePoolPoolInfoPreloadedDockerImageBasicAuthArgs>;
    url: pulumi.Input<string>;
}

export interface GetInstancePoolPoolInfoPreloadedDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetInstancePoolPoolInfoPreloadedDockerImageBasicAuthArgs {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface GetInstancePoolPoolInfoStats {
    idleCount?: number;
    pendingIdleCount?: number;
    pendingUsedCount?: number;
    usedCount?: number;
}

export interface GetInstancePoolPoolInfoStatsArgs {
    idleCount?: pulumi.Input<number>;
    pendingIdleCount?: pulumi.Input<number>;
    pendingUsedCount?: pulumi.Input<number>;
    usedCount?: pulumi.Input<number>;
}

export interface GetInstanceProfilesInstanceProfile {
    arn?: string;
    isMeta?: boolean;
    name?: string;
    roleArn?: string;
}

export interface GetInstanceProfilesInstanceProfileArgs {
    arn?: pulumi.Input<string>;
    isMeta?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
}

export interface GetJobJobSettings {
    createdTime?: number;
    creatorUserName?: string;
    jobId?: number;
    runAsUserName?: string;
    settings?: inputs.GetJobJobSettingsSettings;
}

export interface GetJobJobSettingsArgs {
    createdTime?: pulumi.Input<number>;
    creatorUserName?: pulumi.Input<string>;
    jobId?: pulumi.Input<number>;
    runAsUserName?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetJobJobSettingsSettingsArgs>;
}

export interface GetJobJobSettingsSettings {
    continuous?: inputs.GetJobJobSettingsSettingsContinuous;
    dbtTask?: inputs.GetJobJobSettingsSettingsDbtTask;
    deployment?: inputs.GetJobJobSettingsSettingsDeployment;
    description?: string;
    editMode?: string;
    emailNotifications?: inputs.GetJobJobSettingsSettingsEmailNotifications;
    environments?: inputs.GetJobJobSettingsSettingsEnvironment[];
    existingClusterId?: string;
    format?: string;
    gitSource?: inputs.GetJobJobSettingsSettingsGitSource;
    health?: inputs.GetJobJobSettingsSettingsHealth;
    jobClusters?: inputs.GetJobJobSettingsSettingsJobCluster[];
    libraries?: inputs.GetJobJobSettingsSettingsLibrary[];
    maxConcurrentRuns?: number;
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    name?: string;
    newCluster?: inputs.GetJobJobSettingsSettingsNewCluster;
    notebookTask?: inputs.GetJobJobSettingsSettingsNotebookTask;
    notificationSettings?: inputs.GetJobJobSettingsSettingsNotificationSettings;
    parameters?: inputs.GetJobJobSettingsSettingsParameter[];
    pipelineTask?: inputs.GetJobJobSettingsSettingsPipelineTask;
    pythonWheelTask?: inputs.GetJobJobSettingsSettingsPythonWheelTask;
    queue?: inputs.GetJobJobSettingsSettingsQueue;
    retryOnTimeout?: boolean;
    runAs?: inputs.GetJobJobSettingsSettingsRunAs;
    runJobTask?: inputs.GetJobJobSettingsSettingsRunJobTask;
    schedule?: inputs.GetJobJobSettingsSettingsSchedule;
    sparkJarTask?: inputs.GetJobJobSettingsSettingsSparkJarTask;
    sparkPythonTask?: inputs.GetJobJobSettingsSettingsSparkPythonTask;
    sparkSubmitTask?: inputs.GetJobJobSettingsSettingsSparkSubmitTask;
    tags?: {[key: string]: string};
    tasks?: inputs.GetJobJobSettingsSettingsTask[];
    timeoutSeconds?: number;
    trigger?: inputs.GetJobJobSettingsSettingsTrigger;
    webhookNotifications?: inputs.GetJobJobSettingsSettingsWebhookNotifications;
}

export interface GetJobJobSettingsSettingsArgs {
    continuous?: pulumi.Input<inputs.GetJobJobSettingsSettingsContinuousArgs>;
    dbtTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsDbtTaskArgs>;
    deployment?: pulumi.Input<inputs.GetJobJobSettingsSettingsDeploymentArgs>;
    description?: pulumi.Input<string>;
    editMode?: pulumi.Input<string>;
    emailNotifications?: pulumi.Input<inputs.GetJobJobSettingsSettingsEmailNotificationsArgs>;
    environments?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsEnvironmentArgs>[]>;
    existingClusterId?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    gitSource?: pulumi.Input<inputs.GetJobJobSettingsSettingsGitSourceArgs>;
    health?: pulumi.Input<inputs.GetJobJobSettingsSettingsHealthArgs>;
    jobClusters?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterArgs>[]>;
    libraries?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsLibraryArgs>[]>;
    maxConcurrentRuns?: pulumi.Input<number>;
    maxRetries?: pulumi.Input<number>;
    minRetryIntervalMillis?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    newCluster?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterArgs>;
    notebookTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsNotebookTaskArgs>;
    notificationSettings?: pulumi.Input<inputs.GetJobJobSettingsSettingsNotificationSettingsArgs>;
    parameters?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsParameterArgs>[]>;
    pipelineTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsPipelineTaskArgs>;
    pythonWheelTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsPythonWheelTaskArgs>;
    queue?: pulumi.Input<inputs.GetJobJobSettingsSettingsQueueArgs>;
    retryOnTimeout?: pulumi.Input<boolean>;
    runAs?: pulumi.Input<inputs.GetJobJobSettingsSettingsRunAsArgs>;
    runJobTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsRunJobTaskArgs>;
    schedule?: pulumi.Input<inputs.GetJobJobSettingsSettingsScheduleArgs>;
    sparkJarTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsSparkJarTaskArgs>;
    sparkPythonTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsSparkPythonTaskArgs>;
    sparkSubmitTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsSparkSubmitTaskArgs>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tasks?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskArgs>[]>;
    timeoutSeconds?: pulumi.Input<number>;
    trigger?: pulumi.Input<inputs.GetJobJobSettingsSettingsTriggerArgs>;
    webhookNotifications?: pulumi.Input<inputs.GetJobJobSettingsSettingsWebhookNotificationsArgs>;
}

export interface GetJobJobSettingsSettingsContinuous {
    pauseStatus?: string;
}

export interface GetJobJobSettingsSettingsContinuousArgs {
    pauseStatus?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsDbtTaskArgs {
    catalog?: pulumi.Input<string>;
    commands: pulumi.Input<pulumi.Input<string>[]>;
    profilesDirectory?: pulumi.Input<string>;
    projectDirectory?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    warehouseId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsDeployment {
    kind: string;
    metadataFilePath?: string;
}

export interface GetJobJobSettingsSettingsDeploymentArgs {
    kind: pulumi.Input<string>;
    metadataFilePath?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsEmailNotifications {
    noAlertForSkippedRuns?: boolean;
    onDurationWarningThresholdExceededs?: string[];
    onFailures?: string[];
    onStarts?: string[];
    onStreamingBacklogExceededs?: string[];
    onSuccesses?: string[];
}

export interface GetJobJobSettingsSettingsEmailNotificationsArgs {
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
    onDurationWarningThresholdExceededs?: pulumi.Input<pulumi.Input<string>[]>;
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    onStarts?: pulumi.Input<pulumi.Input<string>[]>;
    onStreamingBacklogExceededs?: pulumi.Input<pulumi.Input<string>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetJobJobSettingsSettingsEnvironment {
    environmentKey: string;
    spec?: inputs.GetJobJobSettingsSettingsEnvironmentSpec;
}

export interface GetJobJobSettingsSettingsEnvironmentArgs {
    environmentKey: pulumi.Input<string>;
    spec?: pulumi.Input<inputs.GetJobJobSettingsSettingsEnvironmentSpecArgs>;
}

export interface GetJobJobSettingsSettingsEnvironmentSpec {
    client: string;
    dependencies?: string[];
}

export interface GetJobJobSettingsSettingsEnvironmentSpecArgs {
    client: pulumi.Input<string>;
    dependencies?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetJobJobSettingsSettingsGitSource {
    branch?: string;
    commit?: string;
    jobSource?: inputs.GetJobJobSettingsSettingsGitSourceJobSource;
    provider?: string;
    tag?: string;
    url: string;
}

export interface GetJobJobSettingsSettingsGitSourceArgs {
    branch?: pulumi.Input<string>;
    commit?: pulumi.Input<string>;
    jobSource?: pulumi.Input<inputs.GetJobJobSettingsSettingsGitSourceJobSourceArgs>;
    provider?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsGitSourceJobSource {
    dirtyState?: string;
    importFromGitBranch: string;
    jobConfigPath: string;
}

export interface GetJobJobSettingsSettingsGitSourceJobSourceArgs {
    dirtyState?: pulumi.Input<string>;
    importFromGitBranch: pulumi.Input<string>;
    jobConfigPath: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsHealth {
    rules: inputs.GetJobJobSettingsSettingsHealthRule[];
}

export interface GetJobJobSettingsSettingsHealthArgs {
    rules: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsHealthRuleArgs>[]>;
}

export interface GetJobJobSettingsSettingsHealthRule {
    metric: string;
    op: string;
    value: number;
}

export interface GetJobJobSettingsSettingsHealthRuleArgs {
    metric: pulumi.Input<string>;
    op: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface GetJobJobSettingsSettingsJobCluster {
    jobClusterKey: string;
    newCluster: inputs.GetJobJobSettingsSettingsJobClusterNewCluster;
}

export interface GetJobJobSettingsSettingsJobClusterArgs {
    jobClusterKey: pulumi.Input<string>;
    newCluster: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterArgs>;
}

export interface GetJobJobSettingsSettingsJobClusterNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributes;
    azureAttributes?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConf;
    clusterMountInfos?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImage;
    driverInstancePoolId?: string;
    driverNodeTypeId?: string;
    enableElasticDisk?: boolean;
    enableLocalDiskEncryption?: boolean;
    gcpAttributes?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId?: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterArgs {
    applyPolicyDefaultValues?: pulumi.Input<boolean>;
    autoscale?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterAutoscaleArgs>;
    autoterminationMinutes?: pulumi.Input<number>;
    awsAttributes?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributesArgs>;
    azureAttributes?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributesArgs>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfArgs>;
    clusterMountInfos?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoArgs>[]>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dataSecurityMode?: pulumi.Input<string>;
    dockerImage?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImageArgs>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributesArgs>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptArgs>[]>;
    instancePoolId?: pulumi.Input<string>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    runtimeEngine?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    workloadType?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeArgs>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAutoscaleArgs {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributesArgs {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributesArgs {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConf {
    dbfs?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfs;
    s3?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfArgs {
    dbfs?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfsArgs>;
    s3?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3Args>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: inputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoArgs {
    localMountDirPath: pulumi.Input<string>;
    networkFilesystemInfo: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfoArgs>;
    remoteMountDirPath?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfoArgs {
    mountOptions?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterDockerImage {
    basicAuth?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterDockerImageArgs {
    basicAuth?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuthArgs>;
    url: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuthArgs {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributesArgs {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScript {
    abfss?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfss;
    dbfs?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfs;
    file?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFile;
    gcs?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcs;
    s3?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3;
    volumes?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumes;
    workspace?: inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspace;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptArgs {
    abfss?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfssArgs>;
    dbfs?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfsArgs>;
    file?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFileArgs>;
    gcs?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcsArgs>;
    s3?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3Args>;
    volumes?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumesArgs>;
    workspace?: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspaceArgs>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfss {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfssArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFile {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFileArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcs {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcsArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumes {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumesArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspace {
    destination: string;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspaceArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterWorkloadType {
    clients: inputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeArgs {
    clients: pulumi.Input<inputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClientsArgs>;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClientsArgs {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface GetJobJobSettingsSettingsLibrary {
    cran?: inputs.GetJobJobSettingsSettingsLibraryCran;
    egg?: string;
    jar?: string;
    maven?: inputs.GetJobJobSettingsSettingsLibraryMaven;
    pypi?: inputs.GetJobJobSettingsSettingsLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface GetJobJobSettingsSettingsLibraryArgs {
    cran?: pulumi.Input<inputs.GetJobJobSettingsSettingsLibraryCranArgs>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.GetJobJobSettingsSettingsLibraryMavenArgs>;
    pypi?: pulumi.Input<inputs.GetJobJobSettingsSettingsLibraryPypiArgs>;
    requirements?: pulumi.Input<string>;
    whl?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsLibraryCran {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsLibraryCranArgs {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface GetJobJobSettingsSettingsLibraryMavenArgs {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsLibraryPypi {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsLibraryPypiArgs {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: inputs.GetJobJobSettingsSettingsNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: inputs.GetJobJobSettingsSettingsNewClusterAwsAttributes;
    azureAttributes?: inputs.GetJobJobSettingsSettingsNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: inputs.GetJobJobSettingsSettingsNewClusterClusterLogConf;
    clusterMountInfos?: inputs.GetJobJobSettingsSettingsNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: inputs.GetJobJobSettingsSettingsNewClusterDockerImage;
    driverInstancePoolId?: string;
    driverNodeTypeId?: string;
    enableElasticDisk?: boolean;
    enableLocalDiskEncryption?: boolean;
    gcpAttributes?: inputs.GetJobJobSettingsSettingsNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: inputs.GetJobJobSettingsSettingsNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId?: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: inputs.GetJobJobSettingsSettingsNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsNewClusterArgs {
    applyPolicyDefaultValues?: pulumi.Input<boolean>;
    autoscale?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterAutoscaleArgs>;
    autoterminationMinutes?: pulumi.Input<number>;
    awsAttributes?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterAwsAttributesArgs>;
    azureAttributes?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterAzureAttributesArgs>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterClusterLogConfArgs>;
    clusterMountInfos?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterClusterMountInfoArgs>[]>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dataSecurityMode?: pulumi.Input<string>;
    dockerImage?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterDockerImageArgs>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterGcpAttributesArgs>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterInitScriptArgs>[]>;
    instancePoolId?: pulumi.Input<string>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    runtimeEngine?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    workloadType?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterWorkloadTypeArgs>;
}

export interface GetJobJobSettingsSettingsNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsNewClusterAutoscaleArgs {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface GetJobJobSettingsSettingsNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsNewClusterAwsAttributesArgs {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsNewClusterAzureAttributesArgs {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConf {
    dbfs?: inputs.GetJobJobSettingsSettingsNewClusterClusterLogConfDbfs;
    s3?: inputs.GetJobJobSettingsSettingsNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConfArgs {
    dbfs?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterClusterLogConfDbfsArgs>;
    s3?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterClusterLogConfS3Args>;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConfDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsNewClusterClusterLogConfS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: inputs.GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsNewClusterClusterMountInfoArgs {
    localMountDirPath: pulumi.Input<string>;
    networkFilesystemInfo: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfoArgs>;
    remoteMountDirPath?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfoArgs {
    mountOptions?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterDockerImage {
    basicAuth?: inputs.GetJobJobSettingsSettingsNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsNewClusterDockerImageArgs {
    basicAuth?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterDockerImageBasicAuthArgs>;
    url: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsNewClusterDockerImageBasicAuthArgs {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsNewClusterGcpAttributesArgs {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterInitScript {
    abfss?: inputs.GetJobJobSettingsSettingsNewClusterInitScriptAbfss;
    dbfs?: inputs.GetJobJobSettingsSettingsNewClusterInitScriptDbfs;
    file?: inputs.GetJobJobSettingsSettingsNewClusterInitScriptFile;
    gcs?: inputs.GetJobJobSettingsSettingsNewClusterInitScriptGcs;
    s3?: inputs.GetJobJobSettingsSettingsNewClusterInitScriptS3;
    volumes?: inputs.GetJobJobSettingsSettingsNewClusterInitScriptVolumes;
    workspace?: inputs.GetJobJobSettingsSettingsNewClusterInitScriptWorkspace;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptArgs {
    abfss?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterInitScriptAbfssArgs>;
    dbfs?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterInitScriptDbfsArgs>;
    file?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterInitScriptFileArgs>;
    gcs?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterInitScriptGcsArgs>;
    s3?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterInitScriptS3Args>;
    volumes?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterInitScriptVolumesArgs>;
    workspace?: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterInitScriptWorkspaceArgs>;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptAbfss {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptAbfssArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptFile {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptFileArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptGcs {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptGcsArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptVolumes {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptVolumesArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptWorkspace {
    destination: string;
}

export interface GetJobJobSettingsSettingsNewClusterInitScriptWorkspaceArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNewClusterWorkloadType {
    clients: inputs.GetJobJobSettingsSettingsNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsNewClusterWorkloadTypeArgs {
    clients: pulumi.Input<inputs.GetJobJobSettingsSettingsNewClusterWorkloadTypeClientsArgs>;
}

export interface GetJobJobSettingsSettingsNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsNewClusterWorkloadTypeClientsArgs {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface GetJobJobSettingsSettingsNotebookTask {
    baseParameters?: {[key: string]: string};
    notebookPath: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsNotebookTaskArgs {
    baseParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    notebookPath: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    warehouseId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsNotificationSettings {
    noAlertForCanceledRuns?: boolean;
    noAlertForSkippedRuns?: boolean;
}

export interface GetJobJobSettingsSettingsNotificationSettingsArgs {
    noAlertForCanceledRuns?: pulumi.Input<boolean>;
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
}

export interface GetJobJobSettingsSettingsParameter {
    default: string;
    name: string;
}

export interface GetJobJobSettingsSettingsParameterArgs {
    default: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsPipelineTask {
    fullRefresh?: boolean;
    pipelineId: string;
}

export interface GetJobJobSettingsSettingsPipelineTaskArgs {
    fullRefresh?: pulumi.Input<boolean>;
    pipelineId: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: string};
    packageName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsPythonWheelTaskArgs {
    entryPoint?: pulumi.Input<string>;
    namedParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    packageName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetJobJobSettingsSettingsQueue {
    enabled: boolean;
}

export interface GetJobJobSettingsSettingsQueueArgs {
    enabled: pulumi.Input<boolean>;
}

export interface GetJobJobSettingsSettingsRunAs {
    servicePrincipalName?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsRunAsArgs {
    servicePrincipalName?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsRunJobTask {
    jobId: number;
    jobParameters?: {[key: string]: string};
}

export interface GetJobJobSettingsSettingsRunJobTaskArgs {
    jobId: pulumi.Input<number>;
    jobParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface GetJobJobSettingsSettingsSchedule {
    pauseStatus?: string;
    quartzCronExpression: string;
    timezoneId: string;
}

export interface GetJobJobSettingsSettingsScheduleArgs {
    pauseStatus?: pulumi.Input<string>;
    quartzCronExpression: pulumi.Input<string>;
    timezoneId: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsSparkJarTaskArgs {
    jarUri?: pulumi.Input<string>;
    mainClassName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetJobJobSettingsSettingsSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsSparkPythonTaskArgs {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    pythonFile: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsSparkSubmitTask {
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsSparkSubmitTaskArgs {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetJobJobSettingsSettingsTask {
    conditionTask?: inputs.GetJobJobSettingsSettingsTaskConditionTask;
    dbtTask?: inputs.GetJobJobSettingsSettingsTaskDbtTask;
    dependsOns?: inputs.GetJobJobSettingsSettingsTaskDependsOn[];
    description?: string;
    emailNotifications?: inputs.GetJobJobSettingsSettingsTaskEmailNotifications;
    environmentKey?: string;
    existingClusterId?: string;
    forEachTask?: inputs.GetJobJobSettingsSettingsTaskForEachTask;
    health?: inputs.GetJobJobSettingsSettingsTaskHealth;
    jobClusterKey?: string;
    libraries?: inputs.GetJobJobSettingsSettingsTaskLibrary[];
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    newCluster?: inputs.GetJobJobSettingsSettingsTaskNewCluster;
    notebookTask?: inputs.GetJobJobSettingsSettingsTaskNotebookTask;
    notificationSettings?: inputs.GetJobJobSettingsSettingsTaskNotificationSettings;
    pipelineTask?: inputs.GetJobJobSettingsSettingsTaskPipelineTask;
    pythonWheelTask?: inputs.GetJobJobSettingsSettingsTaskPythonWheelTask;
    retryOnTimeout?: boolean;
    runIf?: string;
    runJobTask?: inputs.GetJobJobSettingsSettingsTaskRunJobTask;
    sparkJarTask?: inputs.GetJobJobSettingsSettingsTaskSparkJarTask;
    sparkPythonTask?: inputs.GetJobJobSettingsSettingsTaskSparkPythonTask;
    sparkSubmitTask?: inputs.GetJobJobSettingsSettingsTaskSparkSubmitTask;
    sqlTask?: inputs.GetJobJobSettingsSettingsTaskSqlTask;
    taskKey: string;
    timeoutSeconds?: number;
    webhookNotifications?: inputs.GetJobJobSettingsSettingsTaskWebhookNotifications;
}

export interface GetJobJobSettingsSettingsTaskArgs {
    conditionTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskConditionTaskArgs>;
    dbtTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskDbtTaskArgs>;
    dependsOns?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskDependsOnArgs>[]>;
    description?: pulumi.Input<string>;
    emailNotifications?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskEmailNotificationsArgs>;
    environmentKey?: pulumi.Input<string>;
    existingClusterId?: pulumi.Input<string>;
    forEachTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskArgs>;
    health?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskHealthArgs>;
    jobClusterKey?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskLibraryArgs>[]>;
    maxRetries?: pulumi.Input<number>;
    minRetryIntervalMillis?: pulumi.Input<number>;
    newCluster?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterArgs>;
    notebookTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNotebookTaskArgs>;
    notificationSettings?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNotificationSettingsArgs>;
    pipelineTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskPipelineTaskArgs>;
    pythonWheelTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskPythonWheelTaskArgs>;
    retryOnTimeout?: pulumi.Input<boolean>;
    runIf?: pulumi.Input<string>;
    runJobTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskRunJobTaskArgs>;
    sparkJarTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskSparkJarTaskArgs>;
    sparkPythonTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskSparkPythonTaskArgs>;
    sparkSubmitTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskSparkSubmitTaskArgs>;
    sqlTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskSqlTaskArgs>;
    taskKey: pulumi.Input<string>;
    timeoutSeconds?: pulumi.Input<number>;
    webhookNotifications?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskWebhookNotificationsArgs>;
}

export interface GetJobJobSettingsSettingsTaskConditionTask {
    left: string;
    op: string;
    right: string;
}

export interface GetJobJobSettingsSettingsTaskConditionTaskArgs {
    left: pulumi.Input<string>;
    op: pulumi.Input<string>;
    right: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskDbtTaskArgs {
    catalog?: pulumi.Input<string>;
    commands: pulumi.Input<pulumi.Input<string>[]>;
    profilesDirectory?: pulumi.Input<string>;
    projectDirectory?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    warehouseId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskDependsOn {
    outcome?: string;
    taskKey: string;
}

export interface GetJobJobSettingsSettingsTaskDependsOnArgs {
    outcome?: pulumi.Input<string>;
    taskKey: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskEmailNotifications {
    noAlertForSkippedRuns?: boolean;
    onDurationWarningThresholdExceededs?: string[];
    onFailures?: string[];
    onStarts?: string[];
    onStreamingBacklogExceededs?: string[];
    onSuccesses?: string[];
}

export interface GetJobJobSettingsSettingsTaskEmailNotificationsArgs {
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
    onDurationWarningThresholdExceededs?: pulumi.Input<pulumi.Input<string>[]>;
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    onStarts?: pulumi.Input<pulumi.Input<string>[]>;
    onStreamingBacklogExceededs?: pulumi.Input<pulumi.Input<string>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetJobJobSettingsSettingsTaskForEachTask {
    concurrency?: number;
    inputs: string;
    task: inputs.GetJobJobSettingsSettingsTaskForEachTaskTask;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskArgs {
    concurrency?: pulumi.Input<number>;
    inputs: pulumi.Input<string>;
    task: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskArgs>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTask {
    conditionTask?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTask;
    dbtTask?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTask;
    dependsOns?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOn[];
    description?: string;
    emailNotifications?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotifications;
    environmentKey?: string;
    existingClusterId?: string;
    health?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskHealth;
    jobClusterKey?: string;
    libraries?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibrary[];
    maxRetries?: number;
    minRetryIntervalMillis?: number;
    newCluster?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewCluster;
    notebookTask?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTask;
    notificationSettings?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettings;
    pipelineTask?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTask;
    pythonWheelTask?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTask;
    retryOnTimeout?: boolean;
    runIf?: string;
    runJobTask?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTask;
    sparkJarTask?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTask;
    sparkPythonTask?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTask;
    sparkSubmitTask?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTask;
    sqlTask?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTask;
    taskKey: string;
    timeoutSeconds?: number;
    webhookNotifications?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotifications;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskArgs {
    conditionTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTaskArgs>;
    dbtTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTaskArgs>;
    dependsOns?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOnArgs>[]>;
    description?: pulumi.Input<string>;
    emailNotifications?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotificationsArgs>;
    environmentKey?: pulumi.Input<string>;
    existingClusterId?: pulumi.Input<string>;
    health?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskHealthArgs>;
    jobClusterKey?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryArgs>[]>;
    maxRetries?: pulumi.Input<number>;
    minRetryIntervalMillis?: pulumi.Input<number>;
    newCluster?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterArgs>;
    notebookTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTaskArgs>;
    notificationSettings?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettingsArgs>;
    pipelineTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTaskArgs>;
    pythonWheelTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTaskArgs>;
    retryOnTimeout?: pulumi.Input<boolean>;
    runIf?: pulumi.Input<string>;
    runJobTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTaskArgs>;
    sparkJarTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTaskArgs>;
    sparkPythonTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTaskArgs>;
    sparkSubmitTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTaskArgs>;
    sqlTask?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskArgs>;
    taskKey: pulumi.Input<string>;
    timeoutSeconds?: pulumi.Input<number>;
    webhookNotifications?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsArgs>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTask {
    left: string;
    op: string;
    right: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTaskArgs {
    left: pulumi.Input<string>;
    op: pulumi.Input<string>;
    right: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTask {
    catalog?: string;
    commands: string[];
    profilesDirectory?: string;
    projectDirectory?: string;
    schema?: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTaskArgs {
    catalog?: pulumi.Input<string>;
    commands: pulumi.Input<pulumi.Input<string>[]>;
    profilesDirectory?: pulumi.Input<string>;
    projectDirectory?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    warehouseId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOn {
    outcome?: string;
    taskKey: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOnArgs {
    outcome?: pulumi.Input<string>;
    taskKey: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotifications {
    noAlertForSkippedRuns?: boolean;
    onDurationWarningThresholdExceededs?: string[];
    onFailures?: string[];
    onStarts?: string[];
    onStreamingBacklogExceededs?: string[];
    onSuccesses?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotificationsArgs {
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
    onDurationWarningThresholdExceededs?: pulumi.Input<pulumi.Input<string>[]>;
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    onStarts?: pulumi.Input<pulumi.Input<string>[]>;
    onStreamingBacklogExceededs?: pulumi.Input<pulumi.Input<string>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskHealth {
    rules: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskHealthRule[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskHealthArgs {
    rules: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskHealthRuleArgs>[]>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskHealthRule {
    metric: string;
    op: string;
    value: number;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskHealthRuleArgs {
    metric: pulumi.Input<string>;
    op: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibrary {
    cran?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryCran;
    egg?: string;
    jar?: string;
    maven?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryMaven;
    pypi?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryArgs {
    cran?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryCranArgs>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryMavenArgs>;
    pypi?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryPypiArgs>;
    requirements?: pulumi.Input<string>;
    whl?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryCran {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryCranArgs {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryMavenArgs {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryPypi {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskLibraryPypiArgs {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAwsAttributes;
    azureAttributes?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConf;
    clusterMountInfos?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImage;
    driverInstancePoolId?: string;
    driverNodeTypeId?: string;
    enableElasticDisk?: boolean;
    enableLocalDiskEncryption?: boolean;
    gcpAttributes?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId?: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterArgs {
    applyPolicyDefaultValues?: pulumi.Input<boolean>;
    autoscale?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAutoscaleArgs>;
    autoterminationMinutes?: pulumi.Input<number>;
    awsAttributes?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAwsAttributesArgs>;
    azureAttributes?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAzureAttributesArgs>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfArgs>;
    clusterMountInfos?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfoArgs>[]>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dataSecurityMode?: pulumi.Input<string>;
    dockerImage?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImageArgs>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterGcpAttributesArgs>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptArgs>[]>;
    instancePoolId?: pulumi.Input<string>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    runtimeEngine?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    workloadType?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadTypeArgs>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAutoscaleArgs {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAwsAttributesArgs {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterAzureAttributesArgs {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConf {
    dbfs?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfDbfs;
    s3?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfArgs {
    dbfs?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfDbfsArgs>;
    s3?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfS3Args>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterLogConfS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfoArgs {
    localMountDirPath: pulumi.Input<string>;
    networkFilesystemInfo: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfoArgs>;
    remoteMountDirPath?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfoArgs {
    mountOptions?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImage {
    basicAuth?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImageArgs {
    basicAuth?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImageBasicAuthArgs>;
    url: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterDockerImageBasicAuthArgs {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterGcpAttributesArgs {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScript {
    abfss?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptAbfss;
    dbfs?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptDbfs;
    file?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptFile;
    gcs?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptGcs;
    s3?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptS3;
    volumes?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptVolumes;
    workspace?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptWorkspace;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptArgs {
    abfss?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptAbfssArgs>;
    dbfs?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptDbfsArgs>;
    file?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptFileArgs>;
    gcs?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptGcsArgs>;
    s3?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptS3Args>;
    volumes?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptVolumesArgs>;
    workspace?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptWorkspaceArgs>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptAbfss {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptAbfssArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptFile {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptFileArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptGcs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptGcsArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptVolumes {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptVolumesArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptWorkspace {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterInitScriptWorkspaceArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadType {
    clients: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadTypeArgs {
    clients: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadTypeClientsArgs>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNewClusterWorkloadTypeClientsArgs {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTask {
    baseParameters?: {[key: string]: string};
    notebookPath: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTaskArgs {
    baseParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    notebookPath: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    warehouseId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettings {
    alertOnLastAttempt?: boolean;
    noAlertForCanceledRuns?: boolean;
    noAlertForSkippedRuns?: boolean;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettingsArgs {
    alertOnLastAttempt?: pulumi.Input<boolean>;
    noAlertForCanceledRuns?: pulumi.Input<boolean>;
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTask {
    fullRefresh?: boolean;
    pipelineId: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTaskArgs {
    fullRefresh?: pulumi.Input<boolean>;
    pipelineId: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: string};
    packageName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTaskArgs {
    entryPoint?: pulumi.Input<string>;
    namedParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    packageName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTask {
    jobId: number;
    jobParameters?: {[key: string]: string};
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTaskArgs {
    jobId: pulumi.Input<number>;
    jobParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTaskArgs {
    jarUri?: pulumi.Input<string>;
    mainClassName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTaskArgs {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    pythonFile: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTask {
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTaskArgs {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTask {
    alert?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlert;
    dashboard?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboard;
    file?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskFile;
    parameters?: {[key: string]: string};
    query?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskQuery;
    warehouseId: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskArgs {
    alert?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlertArgs>;
    dashboard?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboardArgs>;
    file?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskFileArgs>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    query?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskQueryArgs>;
    warehouseId: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlert {
    alertId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlertSubscription[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlertArgs {
    alertId: pulumi.Input<string>;
    pauseSubscriptions?: pulumi.Input<boolean>;
    subscriptions?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlertSubscriptionArgs>[]>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlertSubscription {
    destinationId?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskAlertSubscriptionArgs {
    destinationId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboard {
    customSubject?: string;
    dashboardId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboardSubscription[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboardArgs {
    customSubject?: pulumi.Input<string>;
    dashboardId: pulumi.Input<string>;
    pauseSubscriptions?: pulumi.Input<boolean>;
    subscriptions?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboardSubscriptionArgs>[]>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboardSubscription {
    destinationId?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskDashboardSubscriptionArgs {
    destinationId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskFile {
    path: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskFileArgs {
    path: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskQuery {
    queryId: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTaskQueryArgs {
    queryId: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotifications {
    onDurationWarningThresholdExceededs?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceeded[];
    onFailures?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnFailure[];
    onStarts?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStart[];
    onStreamingBacklogExceededs?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStreamingBacklogExceeded[];
    onSuccesses?: inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnSuccess[];
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsArgs {
    onDurationWarningThresholdExceededs?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceededArgs>[]>;
    onFailures?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnFailureArgs>[]>;
    onStarts?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStartArgs>[]>;
    onStreamingBacklogExceededs?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStreamingBacklogExceededArgs>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnSuccessArgs>[]>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceeded {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceededArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnFailure {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnFailureArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStart {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStartArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStreamingBacklogExceeded {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnStreamingBacklogExceededArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnSuccess {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotificationsOnSuccessArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskHealth {
    rules: inputs.GetJobJobSettingsSettingsTaskHealthRule[];
}

export interface GetJobJobSettingsSettingsTaskHealthArgs {
    rules: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskHealthRuleArgs>[]>;
}

export interface GetJobJobSettingsSettingsTaskHealthRule {
    metric: string;
    op: string;
    value: number;
}

export interface GetJobJobSettingsSettingsTaskHealthRuleArgs {
    metric: pulumi.Input<string>;
    op: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface GetJobJobSettingsSettingsTaskLibrary {
    cran?: inputs.GetJobJobSettingsSettingsTaskLibraryCran;
    egg?: string;
    jar?: string;
    maven?: inputs.GetJobJobSettingsSettingsTaskLibraryMaven;
    pypi?: inputs.GetJobJobSettingsSettingsTaskLibraryPypi;
    requirements?: string;
    whl?: string;
}

export interface GetJobJobSettingsSettingsTaskLibraryArgs {
    cran?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskLibraryCranArgs>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskLibraryMavenArgs>;
    pypi?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskLibraryPypiArgs>;
    requirements?: pulumi.Input<string>;
    whl?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskLibraryCran {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskLibraryCranArgs {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskLibraryMaven {
    coordinates: string;
    exclusions?: string[];
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskLibraryMavenArgs {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskLibraryPypi {
    package: string;
    repo?: string;
}

export interface GetJobJobSettingsSettingsTaskLibraryPypiArgs {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewCluster {
    applyPolicyDefaultValues?: boolean;
    autoscale?: inputs.GetJobJobSettingsSettingsTaskNewClusterAutoscale;
    autoterminationMinutes?: number;
    awsAttributes?: inputs.GetJobJobSettingsSettingsTaskNewClusterAwsAttributes;
    azureAttributes?: inputs.GetJobJobSettingsSettingsTaskNewClusterAzureAttributes;
    clusterId?: string;
    clusterLogConf?: inputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConf;
    clusterMountInfos?: inputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfo[];
    clusterName?: string;
    customTags?: {[key: string]: string};
    dataSecurityMode?: string;
    dockerImage?: inputs.GetJobJobSettingsSettingsTaskNewClusterDockerImage;
    driverInstancePoolId?: string;
    driverNodeTypeId?: string;
    enableElasticDisk?: boolean;
    enableLocalDiskEncryption?: boolean;
    gcpAttributes?: inputs.GetJobJobSettingsSettingsTaskNewClusterGcpAttributes;
    idempotencyToken?: string;
    initScripts?: inputs.GetJobJobSettingsSettingsTaskNewClusterInitScript[];
    instancePoolId?: string;
    nodeTypeId?: string;
    numWorkers: number;
    policyId?: string;
    runtimeEngine?: string;
    singleUserName?: string;
    sparkConf?: {[key: string]: string};
    sparkEnvVars?: {[key: string]: string};
    sparkVersion: string;
    sshPublicKeys?: string[];
    workloadType?: inputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadType;
}

export interface GetJobJobSettingsSettingsTaskNewClusterArgs {
    applyPolicyDefaultValues?: pulumi.Input<boolean>;
    autoscale?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterAutoscaleArgs>;
    autoterminationMinutes?: pulumi.Input<number>;
    awsAttributes?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterAwsAttributesArgs>;
    azureAttributes?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterAzureAttributesArgs>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfArgs>;
    clusterMountInfos?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoArgs>[]>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dataSecurityMode?: pulumi.Input<string>;
    dockerImage?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterDockerImageArgs>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterGcpAttributesArgs>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptArgs>[]>;
    instancePoolId?: pulumi.Input<string>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    runtimeEngine?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    workloadType?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeArgs>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAutoscale {
    maxWorkers?: number;
    minWorkers?: number;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAutoscaleArgs {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAwsAttributes {
    availability?: string;
    ebsVolumeCount?: number;
    ebsVolumeSize?: number;
    ebsVolumeType?: string;
    firstOnDemand?: number;
    instanceProfileArn?: string;
    spotBidPricePercent?: number;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAwsAttributesArgs {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAzureAttributes {
    availability?: string;
    firstOnDemand?: number;
    spotBidMaxPrice?: number;
}

export interface GetJobJobSettingsSettingsTaskNewClusterAzureAttributesArgs {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConf {
    dbfs?: inputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfs;
    s3?: inputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConfArgs {
    dbfs?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfsArgs>;
    s3?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3Args>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterMountInfo {
    localMountDirPath: string;
    networkFilesystemInfo: inputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfo;
    remoteMountDirPath?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoArgs {
    localMountDirPath: pulumi.Input<string>;
    networkFilesystemInfo: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfoArgs>;
    remoteMountDirPath?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: string;
    serverAddress: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfoArgs {
    mountOptions?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterDockerImage {
    basicAuth?: inputs.GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuth;
    url: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterDockerImageArgs {
    basicAuth?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuthArgs>;
    url: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuth {
    password: string;
    username: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuthArgs {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterGcpAttributes {
    availability?: string;
    bootDiskSize?: number;
    googleServiceAccount?: string;
    localSsdCount?: number;
    usePreemptibleExecutors?: boolean;
    zoneId?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterGcpAttributesArgs {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScript {
    abfss?: inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfss;
    dbfs?: inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfs;
    file?: inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptFile;
    gcs?: inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptGcs;
    s3?: inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptS3;
    volumes?: inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumes;
    workspace?: inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspace;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptArgs {
    abfss?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfssArgs>;
    dbfs?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfsArgs>;
    file?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptFileArgs>;
    gcs?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptGcsArgs>;
    s3?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptS3Args>;
    volumes?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumesArgs>;
    workspace?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspaceArgs>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfss {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfssArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfsArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptFile {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptFileArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptGcs {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptGcsArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptS3 {
    cannedAcl?: string;
    destination: string;
    enableEncryption?: boolean;
    encryptionType?: string;
    endpoint?: string;
    kmsKey?: string;
    region?: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptS3Args {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumes {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumesArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspace {
    destination: string;
}

export interface GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspaceArgs {
    destination: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterWorkloadType {
    clients: inputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClients;
}

export interface GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeArgs {
    clients: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClientsArgs>;
}

export interface GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClients {
    jobs?: boolean;
    notebooks?: boolean;
}

export interface GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClientsArgs {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface GetJobJobSettingsSettingsTaskNotebookTask {
    baseParameters?: {[key: string]: string};
    notebookPath: string;
    source?: string;
    warehouseId?: string;
}

export interface GetJobJobSettingsSettingsTaskNotebookTaskArgs {
    baseParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    notebookPath: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    warehouseId?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskNotificationSettings {
    alertOnLastAttempt?: boolean;
    noAlertForCanceledRuns?: boolean;
    noAlertForSkippedRuns?: boolean;
}

export interface GetJobJobSettingsSettingsTaskNotificationSettingsArgs {
    alertOnLastAttempt?: pulumi.Input<boolean>;
    noAlertForCanceledRuns?: pulumi.Input<boolean>;
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
}

export interface GetJobJobSettingsSettingsTaskPipelineTask {
    fullRefresh?: boolean;
    pipelineId: string;
}

export interface GetJobJobSettingsSettingsTaskPipelineTaskArgs {
    fullRefresh?: pulumi.Input<boolean>;
    pipelineId: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskPythonWheelTask {
    entryPoint?: string;
    namedParameters?: {[key: string]: string};
    packageName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskPythonWheelTaskArgs {
    entryPoint?: pulumi.Input<string>;
    namedParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    packageName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetJobJobSettingsSettingsTaskRunJobTask {
    jobId: number;
    jobParameters?: {[key: string]: string};
}

export interface GetJobJobSettingsSettingsTaskRunJobTaskArgs {
    jobId: pulumi.Input<number>;
    jobParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface GetJobJobSettingsSettingsTaskSparkJarTask {
    jarUri?: string;
    mainClassName?: string;
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskSparkJarTaskArgs {
    jarUri?: pulumi.Input<string>;
    mainClassName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetJobJobSettingsSettingsTaskSparkPythonTask {
    parameters?: string[];
    pythonFile: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskSparkPythonTaskArgs {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    pythonFile: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskSparkSubmitTask {
    parameters?: string[];
}

export interface GetJobJobSettingsSettingsTaskSparkSubmitTaskArgs {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetJobJobSettingsSettingsTaskSqlTask {
    alert?: inputs.GetJobJobSettingsSettingsTaskSqlTaskAlert;
    dashboard?: inputs.GetJobJobSettingsSettingsTaskSqlTaskDashboard;
    file?: inputs.GetJobJobSettingsSettingsTaskSqlTaskFile;
    parameters?: {[key: string]: string};
    query?: inputs.GetJobJobSettingsSettingsTaskSqlTaskQuery;
    warehouseId: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskArgs {
    alert?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskSqlTaskAlertArgs>;
    dashboard?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskSqlTaskDashboardArgs>;
    file?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskSqlTaskFileArgs>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    query?: pulumi.Input<inputs.GetJobJobSettingsSettingsTaskSqlTaskQueryArgs>;
    warehouseId: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskAlert {
    alertId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: inputs.GetJobJobSettingsSettingsTaskSqlTaskAlertSubscription[];
}

export interface GetJobJobSettingsSettingsTaskSqlTaskAlertArgs {
    alertId: pulumi.Input<string>;
    pauseSubscriptions?: pulumi.Input<boolean>;
    subscriptions?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskSqlTaskAlertSubscriptionArgs>[]>;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskAlertSubscription {
    destinationId?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskAlertSubscriptionArgs {
    destinationId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskDashboard {
    customSubject?: string;
    dashboardId: string;
    pauseSubscriptions?: boolean;
    subscriptions?: inputs.GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscription[];
}

export interface GetJobJobSettingsSettingsTaskSqlTaskDashboardArgs {
    customSubject?: pulumi.Input<string>;
    dashboardId: pulumi.Input<string>;
    pauseSubscriptions?: pulumi.Input<boolean>;
    subscriptions?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscriptionArgs>[]>;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscription {
    destinationId?: string;
    userName?: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscriptionArgs {
    destinationId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskFile {
    path: string;
    source?: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskFileArgs {
    path: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskQuery {
    queryId: string;
}

export interface GetJobJobSettingsSettingsTaskSqlTaskQueryArgs {
    queryId: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotifications {
    onDurationWarningThresholdExceededs?: inputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnDurationWarningThresholdExceeded[];
    onFailures?: inputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnFailure[];
    onStarts?: inputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnStart[];
    onStreamingBacklogExceededs?: inputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnStreamingBacklogExceeded[];
    onSuccesses?: inputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnSuccess[];
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsArgs {
    onDurationWarningThresholdExceededs?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnDurationWarningThresholdExceededArgs>[]>;
    onFailures?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnFailureArgs>[]>;
    onStarts?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnStartArgs>[]>;
    onStreamingBacklogExceededs?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnStreamingBacklogExceededArgs>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsTaskWebhookNotificationsOnSuccessArgs>[]>;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnDurationWarningThresholdExceeded {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnDurationWarningThresholdExceededArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnFailure {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnFailureArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnStart {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnStartArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnStreamingBacklogExceeded {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnStreamingBacklogExceededArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnSuccess {
    id: string;
}

export interface GetJobJobSettingsSettingsTaskWebhookNotificationsOnSuccessArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTrigger {
    fileArrival?: inputs.GetJobJobSettingsSettingsTriggerFileArrival;
    pauseStatus?: string;
    periodic?: inputs.GetJobJobSettingsSettingsTriggerPeriodic;
    tableUpdate?: inputs.GetJobJobSettingsSettingsTriggerTableUpdate;
}

export interface GetJobJobSettingsSettingsTriggerArgs {
    fileArrival?: pulumi.Input<inputs.GetJobJobSettingsSettingsTriggerFileArrivalArgs>;
    pauseStatus?: pulumi.Input<string>;
    periodic?: pulumi.Input<inputs.GetJobJobSettingsSettingsTriggerPeriodicArgs>;
    tableUpdate?: pulumi.Input<inputs.GetJobJobSettingsSettingsTriggerTableUpdateArgs>;
}

export interface GetJobJobSettingsSettingsTriggerFileArrival {
    minTimeBetweenTriggersSeconds?: number;
    url: string;
    waitAfterLastChangeSeconds?: number;
}

export interface GetJobJobSettingsSettingsTriggerFileArrivalArgs {
    minTimeBetweenTriggersSeconds?: pulumi.Input<number>;
    url: pulumi.Input<string>;
    waitAfterLastChangeSeconds?: pulumi.Input<number>;
}

export interface GetJobJobSettingsSettingsTriggerPeriodic {
    interval: number;
    unit: string;
}

export interface GetJobJobSettingsSettingsTriggerPeriodicArgs {
    interval: pulumi.Input<number>;
    unit: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsTriggerTableUpdate {
    condition?: string;
    minTimeBetweenTriggersSeconds?: number;
    tableNames: string[];
    waitAfterLastChangeSeconds?: number;
}

export interface GetJobJobSettingsSettingsTriggerTableUpdateArgs {
    condition?: pulumi.Input<string>;
    minTimeBetweenTriggersSeconds?: pulumi.Input<number>;
    tableNames: pulumi.Input<pulumi.Input<string>[]>;
    waitAfterLastChangeSeconds?: pulumi.Input<number>;
}

export interface GetJobJobSettingsSettingsWebhookNotifications {
    onDurationWarningThresholdExceededs?: inputs.GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceeded[];
    onFailures?: inputs.GetJobJobSettingsSettingsWebhookNotificationsOnFailure[];
    onStarts?: inputs.GetJobJobSettingsSettingsWebhookNotificationsOnStart[];
    onStreamingBacklogExceededs?: inputs.GetJobJobSettingsSettingsWebhookNotificationsOnStreamingBacklogExceeded[];
    onSuccesses?: inputs.GetJobJobSettingsSettingsWebhookNotificationsOnSuccess[];
}

export interface GetJobJobSettingsSettingsWebhookNotificationsArgs {
    onDurationWarningThresholdExceededs?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceededArgs>[]>;
    onFailures?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsWebhookNotificationsOnFailureArgs>[]>;
    onStarts?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsWebhookNotificationsOnStartArgs>[]>;
    onStreamingBacklogExceededs?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsWebhookNotificationsOnStreamingBacklogExceededArgs>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<inputs.GetJobJobSettingsSettingsWebhookNotificationsOnSuccessArgs>[]>;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceeded {
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceededArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnFailure {
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnFailureArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnStart {
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnStartArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnStreamingBacklogExceeded {
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnStreamingBacklogExceededArgs {
    id: pulumi.Input<string>;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnSuccess {
    id: string;
}

export interface GetJobJobSettingsSettingsWebhookNotificationsOnSuccessArgs {
    id: pulumi.Input<string>;
}

export interface GetMetastoreMetastoreInfo {
    cloud?: string;
    createdAt?: number;
    createdBy?: string;
    defaultDataAccessConfigId?: string;
    deltaSharingOrganizationName?: string;
    deltaSharingRecipientTokenLifetimeInSeconds?: number;
    deltaSharingScope?: string;
    externalAccessEnabled?: boolean;
    globalMetastoreId?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    privilegeModelVersion?: string;
    region?: string;
    storageRoot?: string;
    storageRootCredentialId?: string;
    storageRootCredentialName?: string;
    updatedAt?: number;
    updatedBy?: string;
}

export interface GetMetastoreMetastoreInfoArgs {
    cloud?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    defaultDataAccessConfigId?: pulumi.Input<string>;
    deltaSharingOrganizationName?: pulumi.Input<string>;
    deltaSharingRecipientTokenLifetimeInSeconds?: pulumi.Input<number>;
    deltaSharingScope?: pulumi.Input<string>;
    externalAccessEnabled?: pulumi.Input<boolean>;
    globalMetastoreId?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    privilegeModelVersion?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    storageRoot?: pulumi.Input<string>;
    storageRootCredentialId?: pulumi.Input<string>;
    storageRootCredentialName?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
}

export interface GetMlflowExperimentTag {
    key?: string;
    value?: string;
}

export interface GetMlflowExperimentTagArgs {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetMlflowModelLatestVersion {
    creationTimestamp?: number;
    currentStage?: string;
    description?: string;
    lastUpdatedTimestamp?: number;
    name?: string;
    runId?: string;
    runLink?: string;
    source?: string;
    status?: string;
    statusMessage?: string;
    tags?: inputs.GetMlflowModelLatestVersionTag[];
    userId?: string;
    version?: string;
}

export interface GetMlflowModelLatestVersionArgs {
    creationTimestamp?: pulumi.Input<number>;
    currentStage?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    lastUpdatedTimestamp?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    runId?: pulumi.Input<string>;
    runLink?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    statusMessage?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetMlflowModelLatestVersionTagArgs>[]>;
    userId?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface GetMlflowModelLatestVersionTag {
    key?: string;
    value?: string;
}

export interface GetMlflowModelLatestVersionTagArgs {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetMlflowModelTag {
    key?: string;
    value?: string;
}

export interface GetMlflowModelTagArgs {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetMwsNetworkConnectivityConfigEgressConfig {
    defaultRules?: inputs.GetMwsNetworkConnectivityConfigEgressConfigDefaultRules;
    targetRules?: inputs.GetMwsNetworkConnectivityConfigEgressConfigTargetRules;
}

export interface GetMwsNetworkConnectivityConfigEgressConfigArgs {
    defaultRules?: pulumi.Input<inputs.GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesArgs>;
    targetRules?: pulumi.Input<inputs.GetMwsNetworkConnectivityConfigEgressConfigTargetRulesArgs>;
}

export interface GetMwsNetworkConnectivityConfigEgressConfigDefaultRules {
    awsStableIpRule?: inputs.GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesAwsStableIpRule;
    azureServiceEndpointRule?: inputs.GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesAzureServiceEndpointRule;
}

export interface GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesArgs {
    awsStableIpRule?: pulumi.Input<inputs.GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesAwsStableIpRuleArgs>;
    azureServiceEndpointRule?: pulumi.Input<inputs.GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesAzureServiceEndpointRuleArgs>;
}

export interface GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesAwsStableIpRule {
    cidrBlocks?: string[];
}

export interface GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesAwsStableIpRuleArgs {
    cidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesAzureServiceEndpointRule {
    subnets?: string[];
    targetRegion?: string;
    targetServices?: string[];
}

export interface GetMwsNetworkConnectivityConfigEgressConfigDefaultRulesAzureServiceEndpointRuleArgs {
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    targetRegion?: pulumi.Input<string>;
    targetServices?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMwsNetworkConnectivityConfigEgressConfigTargetRules {
    azurePrivateEndpointRules?: inputs.GetMwsNetworkConnectivityConfigEgressConfigTargetRulesAzurePrivateEndpointRule[];
}

export interface GetMwsNetworkConnectivityConfigEgressConfigTargetRulesArgs {
    azurePrivateEndpointRules?: pulumi.Input<pulumi.Input<inputs.GetMwsNetworkConnectivityConfigEgressConfigTargetRulesAzurePrivateEndpointRuleArgs>[]>;
}

export interface GetMwsNetworkConnectivityConfigEgressConfigTargetRulesAzurePrivateEndpointRule {
    connectionState?: string;
    creationTime?: number;
    deactivated?: boolean;
    deactivatedAt?: number;
    endpointName?: string;
    groupId?: string;
    networkConnectivityConfigId?: string;
    resourceId?: string;
    ruleId?: string;
    updatedTime?: number;
}

export interface GetMwsNetworkConnectivityConfigEgressConfigTargetRulesAzurePrivateEndpointRuleArgs {
    connectionState?: pulumi.Input<string>;
    creationTime?: pulumi.Input<number>;
    deactivated?: pulumi.Input<boolean>;
    deactivatedAt?: pulumi.Input<number>;
    endpointName?: pulumi.Input<string>;
    groupId?: pulumi.Input<string>;
    networkConnectivityConfigId?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    ruleId?: pulumi.Input<string>;
    updatedTime?: pulumi.Input<number>;
}

export interface GetRegisteredModelModelInfo {
    aliases?: inputs.GetRegisteredModelModelInfoAlias[];
    browseOnly?: boolean;
    catalogName?: string;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    fullName?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    schemaName?: string;
    storageLocation?: string;
    updatedAt?: number;
    updatedBy?: string;
}

export interface GetRegisteredModelModelInfoArgs {
    aliases?: pulumi.Input<pulumi.Input<inputs.GetRegisteredModelModelInfoAliasArgs>[]>;
    browseOnly?: pulumi.Input<boolean>;
    catalogName?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    fullName?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    schemaName?: pulumi.Input<string>;
    storageLocation?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
}

export interface GetRegisteredModelModelInfoAlias {
    aliasName?: string;
    versionNum?: number;
}

export interface GetRegisteredModelModelInfoAliasArgs {
    aliasName?: pulumi.Input<string>;
    versionNum?: pulumi.Input<number>;
}

export interface GetRegisteredModelVersionsModelVersion {
    aliases?: inputs.GetRegisteredModelVersionsModelVersionAlias[];
    browseOnly?: boolean;
    catalogName?: string;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    id?: string;
    metastoreId?: string;
    modelName?: string;
    modelVersionDependencies?: inputs.GetRegisteredModelVersionsModelVersionModelVersionDependency[];
    runId?: string;
    runWorkspaceId?: number;
    schemaName?: string;
    source?: string;
    status?: string;
    storageLocation?: string;
    updatedAt?: number;
    updatedBy?: string;
    version?: number;
}

export interface GetRegisteredModelVersionsModelVersionArgs {
    aliases?: pulumi.Input<pulumi.Input<inputs.GetRegisteredModelVersionsModelVersionAliasArgs>[]>;
    browseOnly?: pulumi.Input<boolean>;
    catalogName?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    modelName?: pulumi.Input<string>;
    modelVersionDependencies?: pulumi.Input<pulumi.Input<inputs.GetRegisteredModelVersionsModelVersionModelVersionDependencyArgs>[]>;
    runId?: pulumi.Input<string>;
    runWorkspaceId?: pulumi.Input<number>;
    schemaName?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageLocation?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface GetRegisteredModelVersionsModelVersionAlias {
    aliasName?: string;
    versionNum?: number;
}

export interface GetRegisteredModelVersionsModelVersionAliasArgs {
    aliasName?: pulumi.Input<string>;
    versionNum?: pulumi.Input<number>;
}

export interface GetRegisteredModelVersionsModelVersionModelVersionDependency {
    dependencies?: inputs.GetRegisteredModelVersionsModelVersionModelVersionDependencyDependency[];
}

export interface GetRegisteredModelVersionsModelVersionModelVersionDependencyArgs {
    dependencies?: pulumi.Input<pulumi.Input<inputs.GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyArgs>[]>;
}

export interface GetRegisteredModelVersionsModelVersionModelVersionDependencyDependency {
    functions?: inputs.GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyFunction[];
    tables?: inputs.GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyTable[];
}

export interface GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyArgs {
    functions?: pulumi.Input<pulumi.Input<inputs.GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyFunctionArgs>[]>;
    tables?: pulumi.Input<pulumi.Input<inputs.GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyTableArgs>[]>;
}

export interface GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyFunction {
    functionFullName: string;
}

export interface GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyFunctionArgs {
    functionFullName: pulumi.Input<string>;
}

export interface GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyTable {
    tableFullName: string;
}

export interface GetRegisteredModelVersionsModelVersionModelVersionDependencyDependencyTableArgs {
    tableFullName: pulumi.Input<string>;
}

export interface GetSchemaSchemaInfo {
    browseOnly?: boolean;
    catalogName?: string;
    catalogType?: string;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    effectivePredictiveOptimizationFlag?: inputs.GetSchemaSchemaInfoEffectivePredictiveOptimizationFlag;
    enablePredictiveOptimization?: string;
    fullName?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    properties?: {[key: string]: string};
    schemaId?: string;
    storageLocation?: string;
    storageRoot?: string;
    updatedAt?: number;
    updatedBy?: string;
}

export interface GetSchemaSchemaInfoArgs {
    browseOnly?: pulumi.Input<boolean>;
    catalogName?: pulumi.Input<string>;
    catalogType?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    effectivePredictiveOptimizationFlag?: pulumi.Input<inputs.GetSchemaSchemaInfoEffectivePredictiveOptimizationFlagArgs>;
    enablePredictiveOptimization?: pulumi.Input<string>;
    fullName?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    schemaId?: pulumi.Input<string>;
    storageLocation?: pulumi.Input<string>;
    storageRoot?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
}

export interface GetSchemaSchemaInfoEffectivePredictiveOptimizationFlag {
    inheritedFromName?: string;
    inheritedFromType?: string;
    value: string;
}

export interface GetSchemaSchemaInfoEffectivePredictiveOptimizationFlagArgs {
    inheritedFromName?: pulumi.Input<string>;
    inheritedFromType?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpoint {
    aiGateways?: inputs.GetServingEndpointsEndpointAiGateway[];
    configs?: inputs.GetServingEndpointsEndpointConfig[];
    creationTimestamp?: number;
    creator?: string;
    id?: string;
    lastUpdatedTimestamp?: number;
    name?: string;
    states?: inputs.GetServingEndpointsEndpointState[];
    tags?: inputs.GetServingEndpointsEndpointTag[];
    task?: string;
}

export interface GetServingEndpointsEndpointArgs {
    aiGateways?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointAiGatewayArgs>[]>;
    configs?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointConfigArgs>[]>;
    creationTimestamp?: pulumi.Input<number>;
    creator?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    lastUpdatedTimestamp?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    states?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointStateArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointTagArgs>[]>;
    task?: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointAiGateway {
    guardrails?: inputs.GetServingEndpointsEndpointAiGatewayGuardrail[];
    inferenceTableConfigs?: inputs.GetServingEndpointsEndpointAiGatewayInferenceTableConfig[];
    rateLimits?: inputs.GetServingEndpointsEndpointAiGatewayRateLimit[];
    usageTrackingConfigs?: inputs.GetServingEndpointsEndpointAiGatewayUsageTrackingConfig[];
}

export interface GetServingEndpointsEndpointAiGatewayArgs {
    guardrails?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointAiGatewayGuardrailArgs>[]>;
    inferenceTableConfigs?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointAiGatewayInferenceTableConfigArgs>[]>;
    rateLimits?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointAiGatewayRateLimitArgs>[]>;
    usageTrackingConfigs?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointAiGatewayUsageTrackingConfigArgs>[]>;
}

export interface GetServingEndpointsEndpointAiGatewayGuardrail {
    inputProperties?: inputs.GetServingEndpointsEndpointAiGatewayGuardrailInputProperty[];
    outputs?: inputs.GetServingEndpointsEndpointAiGatewayGuardrailOutput[];
}

export interface GetServingEndpointsEndpointAiGatewayGuardrailArgs {
    inputProperties?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointAiGatewayGuardrailInputPropertyArgs>[]>;
    outputs?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointAiGatewayGuardrailOutputArgs>[]>;
}

export interface GetServingEndpointsEndpointAiGatewayGuardrailInputProperty {
    invalidKeywords?: string[];
    piis?: inputs.GetServingEndpointsEndpointAiGatewayGuardrailInputPropertyPii[];
    safety?: boolean;
    validTopics?: string[];
}

export interface GetServingEndpointsEndpointAiGatewayGuardrailInputPropertyArgs {
    invalidKeywords?: pulumi.Input<pulumi.Input<string>[]>;
    piis?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointAiGatewayGuardrailInputPropertyPiiArgs>[]>;
    safety?: pulumi.Input<boolean>;
    validTopics?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetServingEndpointsEndpointAiGatewayGuardrailInputPropertyPii {
    behavior: string;
}

export interface GetServingEndpointsEndpointAiGatewayGuardrailInputPropertyPiiArgs {
    behavior: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointAiGatewayGuardrailOutput {
    invalidKeywords?: string[];
    piis?: inputs.GetServingEndpointsEndpointAiGatewayGuardrailOutputPii[];
    safety?: boolean;
    validTopics?: string[];
}

export interface GetServingEndpointsEndpointAiGatewayGuardrailOutputArgs {
    invalidKeywords?: pulumi.Input<pulumi.Input<string>[]>;
    piis?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointAiGatewayGuardrailOutputPiiArgs>[]>;
    safety?: pulumi.Input<boolean>;
    validTopics?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetServingEndpointsEndpointAiGatewayGuardrailOutputPii {
    behavior: string;
}

export interface GetServingEndpointsEndpointAiGatewayGuardrailOutputPiiArgs {
    behavior: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointAiGatewayInferenceTableConfig {
    catalogName?: string;
    enabled?: boolean;
    schemaName?: string;
    tableNamePrefix?: string;
}

export interface GetServingEndpointsEndpointAiGatewayInferenceTableConfigArgs {
    catalogName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    schemaName?: pulumi.Input<string>;
    tableNamePrefix?: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointAiGatewayRateLimit {
    calls: number;
    key?: string;
    renewalPeriod: string;
}

export interface GetServingEndpointsEndpointAiGatewayRateLimitArgs {
    calls: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    renewalPeriod: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointAiGatewayUsageTrackingConfig {
    enabled?: boolean;
}

export interface GetServingEndpointsEndpointAiGatewayUsageTrackingConfigArgs {
    enabled?: pulumi.Input<boolean>;
}

export interface GetServingEndpointsEndpointConfig {
    servedEntities?: inputs.GetServingEndpointsEndpointConfigServedEntity[];
    servedModels?: inputs.GetServingEndpointsEndpointConfigServedModel[];
}

export interface GetServingEndpointsEndpointConfigArgs {
    servedEntities?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointConfigServedEntityArgs>[]>;
    servedModels?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointConfigServedModelArgs>[]>;
}

export interface GetServingEndpointsEndpointConfigServedEntity {
    entityName?: string;
    entityVersion?: string;
    externalModels?: inputs.GetServingEndpointsEndpointConfigServedEntityExternalModel[];
    foundationModels?: inputs.GetServingEndpointsEndpointConfigServedEntityFoundationModel[];
    name?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityArgs {
    entityName?: pulumi.Input<string>;
    entityVersion?: pulumi.Input<string>;
    externalModels?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelArgs>[]>;
    foundationModels?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointConfigServedEntityFoundationModelArgs>[]>;
    name?: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModel {
    ai21labsConfigs?: inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelAi21labsConfig[];
    amazonBedrockConfigs?: inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelAmazonBedrockConfig[];
    anthropicConfigs?: inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelAnthropicConfig[];
    cohereConfigs?: inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelCohereConfig[];
    databricksModelServingConfigs?: inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelDatabricksModelServingConfig[];
    googleCloudVertexAiConfigs?: inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelGoogleCloudVertexAiConfig[];
    name: string;
    openaiConfigs?: inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelOpenaiConfig[];
    palmConfigs?: inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelPalmConfig[];
    provider: string;
    task: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelArgs {
    ai21labsConfigs?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelAi21labsConfigArgs>[]>;
    amazonBedrockConfigs?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelAmazonBedrockConfigArgs>[]>;
    anthropicConfigs?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelAnthropicConfigArgs>[]>;
    cohereConfigs?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelCohereConfigArgs>[]>;
    databricksModelServingConfigs?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelDatabricksModelServingConfigArgs>[]>;
    googleCloudVertexAiConfigs?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelGoogleCloudVertexAiConfigArgs>[]>;
    name: pulumi.Input<string>;
    openaiConfigs?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelOpenaiConfigArgs>[]>;
    palmConfigs?: pulumi.Input<pulumi.Input<inputs.GetServingEndpointsEndpointConfigServedEntityExternalModelPalmConfigArgs>[]>;
    provider: pulumi.Input<string>;
    task: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelAi21labsConfig {
    ai21labsApiKey?: string;
    ai21labsApiKeyPlaintext?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelAi21labsConfigArgs {
    ai21labsApiKey?: pulumi.Input<string>;
    ai21labsApiKeyPlaintext?: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelAmazonBedrockConfig {
    awsAccessKeyId?: string;
    awsAccessKeyIdPlaintext?: string;
    awsRegion: string;
    awsSecretAccessKey?: string;
    awsSecretAccessKeyPlaintext?: string;
    bedrockProvider: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelAmazonBedrockConfigArgs {
    awsAccessKeyId?: pulumi.Input<string>;
    awsAccessKeyIdPlaintext?: pulumi.Input<string>;
    awsRegion: pulumi.Input<string>;
    awsSecretAccessKey?: pulumi.Input<string>;
    awsSecretAccessKeyPlaintext?: pulumi.Input<string>;
    bedrockProvider: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelAnthropicConfig {
    anthropicApiKey?: string;
    anthropicApiKeyPlaintext?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelAnthropicConfigArgs {
    anthropicApiKey?: pulumi.Input<string>;
    anthropicApiKeyPlaintext?: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelCohereConfig {
    cohereApiBase?: string;
    cohereApiKey?: string;
    cohereApiKeyPlaintext?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelCohereConfigArgs {
    cohereApiBase?: pulumi.Input<string>;
    cohereApiKey?: pulumi.Input<string>;
    cohereApiKeyPlaintext?: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelDatabricksModelServingConfig {
    databricksApiToken?: string;
    databricksApiTokenPlaintext?: string;
    databricksWorkspaceUrl: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelDatabricksModelServingConfigArgs {
    databricksApiToken?: pulumi.Input<string>;
    databricksApiTokenPlaintext?: pulumi.Input<string>;
    databricksWorkspaceUrl: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelGoogleCloudVertexAiConfig {
    privateKey?: string;
    privateKeyPlaintext?: string;
    projectId?: string;
    region?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelGoogleCloudVertexAiConfigArgs {
    privateKey?: pulumi.Input<string>;
    privateKeyPlaintext?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelOpenaiConfig {
    microsoftEntraClientId?: string;
    microsoftEntraClientSecret?: string;
    microsoftEntraClientSecretPlaintext?: string;
    microsoftEntraTenantId?: string;
    openaiApiBase?: string;
    openaiApiKey?: string;
    openaiApiKeyPlaintext?: string;
    openaiApiType?: string;
    openaiApiVersion?: string;
    openaiDeploymentName?: string;
    openaiOrganization?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelOpenaiConfigArgs {
    microsoftEntraClientId?: pulumi.Input<string>;
    microsoftEntraClientSecret?: pulumi.Input<string>;
    microsoftEntraClientSecretPlaintext?: pulumi.Input<string>;
    microsoftEntraTenantId?: pulumi.Input<string>;
    openaiApiBase?: pulumi.Input<string>;
    openaiApiKey?: pulumi.Input<string>;
    openaiApiKeyPlaintext?: pulumi.Input<string>;
    openaiApiType?: pulumi.Input<string>;
    openaiApiVersion?: pulumi.Input<string>;
    openaiDeploymentName?: pulumi.Input<string>;
    openaiOrganization?: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelPalmConfig {
    palmApiKey?: string;
    palmApiKeyPlaintext?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityExternalModelPalmConfigArgs {
    palmApiKey?: pulumi.Input<string>;
    palmApiKeyPlaintext?: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointConfigServedEntityFoundationModel {
    description?: string;
    displayName?: string;
    docs?: string;
    name?: string;
}

export interface GetServingEndpointsEndpointConfigServedEntityFoundationModelArgs {
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    docs?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointConfigServedModel {
    modelName?: string;
    modelVersion?: string;
    name?: string;
}

export interface GetServingEndpointsEndpointConfigServedModelArgs {
    modelName?: pulumi.Input<string>;
    modelVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointState {
    configUpdate?: string;
    ready?: string;
}

export interface GetServingEndpointsEndpointStateArgs {
    configUpdate?: pulumi.Input<string>;
    ready?: pulumi.Input<string>;
}

export interface GetServingEndpointsEndpointTag {
    key: string;
    value?: string;
}

export interface GetServingEndpointsEndpointTagArgs {
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetShareObject {
    addedAt?: number;
    addedBy?: string;
    cdfEnabled?: boolean;
    comment?: string;
    content?: string;
    dataObjectType: string;
    historyDataSharingStatus?: string;
    name: string;
    partitions?: inputs.GetShareObjectPartition[];
    sharedAs?: string;
    startVersion?: number;
    status?: string;
    stringSharedAs?: string;
}

export interface GetShareObjectArgs {
    addedAt?: pulumi.Input<number>;
    addedBy?: pulumi.Input<string>;
    cdfEnabled?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    dataObjectType: pulumi.Input<string>;
    historyDataSharingStatus?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    partitions?: pulumi.Input<pulumi.Input<inputs.GetShareObjectPartitionArgs>[]>;
    sharedAs?: pulumi.Input<string>;
    startVersion?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    stringSharedAs?: pulumi.Input<string>;
}

export interface GetShareObjectPartition {
    values?: inputs.GetShareObjectPartitionValue[];
}

export interface GetShareObjectPartitionArgs {
    values?: pulumi.Input<pulumi.Input<inputs.GetShareObjectPartitionValueArgs>[]>;
}

export interface GetShareObjectPartitionValue {
    name: string;
    op: string;
    recipientPropertyKey?: string;
    value?: string;
}

export interface GetShareObjectPartitionValueArgs {
    name: pulumi.Input<string>;
    op: pulumi.Input<string>;
    recipientPropertyKey?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetSqlWarehouseChannel {
    dbsqlVersion?: string;
    name?: string;
}

export interface GetSqlWarehouseChannelArgs {
    dbsqlVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GetSqlWarehouseHealth {
    details?: string;
    failureReason?: inputs.GetSqlWarehouseHealthFailureReason;
    message?: string;
    status?: string;
    summary?: string;
}

export interface GetSqlWarehouseHealthArgs {
    details?: pulumi.Input<string>;
    failureReason?: pulumi.Input<inputs.GetSqlWarehouseHealthFailureReasonArgs>;
    message?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    summary?: pulumi.Input<string>;
}

export interface GetSqlWarehouseHealthFailureReason {
    code?: string;
    parameters?: {[key: string]: string};
    type?: string;
}

export interface GetSqlWarehouseHealthFailureReasonArgs {
    code?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
}

export interface GetSqlWarehouseOdbcParams {
    hostname?: string;
    path?: string;
    port?: number;
    protocol?: string;
}

export interface GetSqlWarehouseOdbcParamsArgs {
    hostname?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface GetSqlWarehouseTags {
    customTags?: inputs.GetSqlWarehouseTagsCustomTag[];
}

export interface GetSqlWarehouseTagsArgs {
    customTags?: pulumi.Input<pulumi.Input<inputs.GetSqlWarehouseTagsCustomTagArgs>[]>;
}

export interface GetSqlWarehouseTagsCustomTag {
    key?: string;
    value?: string;
}

export interface GetSqlWarehouseTagsCustomTagArgs {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetStorageCredentialStorageCredentialInfo {
    awsIamRole?: inputs.GetStorageCredentialStorageCredentialInfoAwsIamRole;
    azureManagedIdentity?: inputs.GetStorageCredentialStorageCredentialInfoAzureManagedIdentity;
    azureServicePrincipal?: inputs.GetStorageCredentialStorageCredentialInfoAzureServicePrincipal;
    cloudflareApiToken?: inputs.GetStorageCredentialStorageCredentialInfoCloudflareApiToken;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    databricksGcpServiceAccount?: inputs.GetStorageCredentialStorageCredentialInfoDatabricksGcpServiceAccount;
    fullName?: string;
    id?: string;
    isolationMode?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    readOnly?: boolean;
    updatedAt?: number;
    updatedBy?: string;
    usedForManagedStorage?: boolean;
}

export interface GetStorageCredentialStorageCredentialInfoArgs {
    awsIamRole?: pulumi.Input<inputs.GetStorageCredentialStorageCredentialInfoAwsIamRoleArgs>;
    azureManagedIdentity?: pulumi.Input<inputs.GetStorageCredentialStorageCredentialInfoAzureManagedIdentityArgs>;
    azureServicePrincipal?: pulumi.Input<inputs.GetStorageCredentialStorageCredentialInfoAzureServicePrincipalArgs>;
    cloudflareApiToken?: pulumi.Input<inputs.GetStorageCredentialStorageCredentialInfoCloudflareApiTokenArgs>;
    comment?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    databricksGcpServiceAccount?: pulumi.Input<inputs.GetStorageCredentialStorageCredentialInfoDatabricksGcpServiceAccountArgs>;
    fullName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isolationMode?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
    usedForManagedStorage?: pulumi.Input<boolean>;
}

export interface GetStorageCredentialStorageCredentialInfoAwsIamRole {
    externalId?: string;
    roleArn: string;
    unityCatalogIamArn?: string;
}

export interface GetStorageCredentialStorageCredentialInfoAwsIamRoleArgs {
    externalId?: pulumi.Input<string>;
    roleArn: pulumi.Input<string>;
    unityCatalogIamArn?: pulumi.Input<string>;
}

export interface GetStorageCredentialStorageCredentialInfoAzureManagedIdentity {
    accessConnectorId: string;
    credentialId?: string;
    managedIdentityId?: string;
}

export interface GetStorageCredentialStorageCredentialInfoAzureManagedIdentityArgs {
    accessConnectorId: pulumi.Input<string>;
    credentialId?: pulumi.Input<string>;
    managedIdentityId?: pulumi.Input<string>;
}

export interface GetStorageCredentialStorageCredentialInfoAzureServicePrincipal {
    applicationId: string;
    clientSecret: string;
    directoryId: string;
}

export interface GetStorageCredentialStorageCredentialInfoAzureServicePrincipalArgs {
    applicationId: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    directoryId: pulumi.Input<string>;
}

export interface GetStorageCredentialStorageCredentialInfoCloudflareApiToken {
    accessKeyId: string;
    accountId: string;
    secretAccessKey: string;
}

export interface GetStorageCredentialStorageCredentialInfoCloudflareApiTokenArgs {
    accessKeyId: pulumi.Input<string>;
    accountId: pulumi.Input<string>;
    secretAccessKey: pulumi.Input<string>;
}

export interface GetStorageCredentialStorageCredentialInfoDatabricksGcpServiceAccount {
    credentialId?: string;
    email?: string;
}

export interface GetStorageCredentialStorageCredentialInfoDatabricksGcpServiceAccountArgs {
    credentialId?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
}

export interface GetTableTableInfo {
    accessPoint?: string;
    browseOnly?: boolean;
    catalogName?: string;
    columns?: inputs.GetTableTableInfoColumn[];
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    dataAccessConfigurationId?: string;
    dataSourceFormat?: string;
    deletedAt?: number;
    deltaRuntimePropertiesKvpairs?: inputs.GetTableTableInfoDeltaRuntimePropertiesKvpairs;
    effectivePredictiveOptimizationFlag?: inputs.GetTableTableInfoEffectivePredictiveOptimizationFlag;
    enablePredictiveOptimization?: string;
    encryptionDetails?: inputs.GetTableTableInfoEncryptionDetails;
    fullName?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    pipelineId?: string;
    properties?: {[key: string]: string};
    rowFilter?: inputs.GetTableTableInfoRowFilter;
    schemaName?: string;
    sqlPath?: string;
    storageCredentialName?: string;
    storageLocation?: string;
    tableConstraints?: inputs.GetTableTableInfoTableConstraint[];
    tableId?: string;
    tableType?: string;
    updatedAt?: number;
    updatedBy?: string;
    viewDefinition?: string;
    viewDependencies?: inputs.GetTableTableInfoViewDependencies;
}

export interface GetTableTableInfoArgs {
    accessPoint?: pulumi.Input<string>;
    browseOnly?: pulumi.Input<boolean>;
    catalogName?: pulumi.Input<string>;
    columns?: pulumi.Input<pulumi.Input<inputs.GetTableTableInfoColumnArgs>[]>;
    comment?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    dataAccessConfigurationId?: pulumi.Input<string>;
    dataSourceFormat?: pulumi.Input<string>;
    deletedAt?: pulumi.Input<number>;
    deltaRuntimePropertiesKvpairs?: pulumi.Input<inputs.GetTableTableInfoDeltaRuntimePropertiesKvpairsArgs>;
    effectivePredictiveOptimizationFlag?: pulumi.Input<inputs.GetTableTableInfoEffectivePredictiveOptimizationFlagArgs>;
    enablePredictiveOptimization?: pulumi.Input<string>;
    encryptionDetails?: pulumi.Input<inputs.GetTableTableInfoEncryptionDetailsArgs>;
    fullName?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    pipelineId?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    rowFilter?: pulumi.Input<inputs.GetTableTableInfoRowFilterArgs>;
    schemaName?: pulumi.Input<string>;
    sqlPath?: pulumi.Input<string>;
    storageCredentialName?: pulumi.Input<string>;
    storageLocation?: pulumi.Input<string>;
    tableConstraints?: pulumi.Input<pulumi.Input<inputs.GetTableTableInfoTableConstraintArgs>[]>;
    tableId?: pulumi.Input<string>;
    tableType?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
    viewDefinition?: pulumi.Input<string>;
    viewDependencies?: pulumi.Input<inputs.GetTableTableInfoViewDependenciesArgs>;
}

export interface GetTableTableInfoColumn {
    comment?: string;
    mask?: inputs.GetTableTableInfoColumnMask;
    name?: string;
    nullable?: boolean;
    partitionIndex?: number;
    position?: number;
    typeIntervalType?: string;
    typeJson?: string;
    typeName?: string;
    typePrecision?: number;
    typeScale?: number;
    typeText?: string;
}

export interface GetTableTableInfoColumnArgs {
    comment?: pulumi.Input<string>;
    mask?: pulumi.Input<inputs.GetTableTableInfoColumnMaskArgs>;
    name?: pulumi.Input<string>;
    nullable?: pulumi.Input<boolean>;
    partitionIndex?: pulumi.Input<number>;
    position?: pulumi.Input<number>;
    typeIntervalType?: pulumi.Input<string>;
    typeJson?: pulumi.Input<string>;
    typeName?: pulumi.Input<string>;
    typePrecision?: pulumi.Input<number>;
    typeScale?: pulumi.Input<number>;
    typeText?: pulumi.Input<string>;
}

export interface GetTableTableInfoColumnMask {
    functionName?: string;
    usingColumnNames?: string[];
}

export interface GetTableTableInfoColumnMaskArgs {
    functionName?: pulumi.Input<string>;
    usingColumnNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetTableTableInfoDeltaRuntimePropertiesKvpairs {
    deltaRuntimeProperties: {[key: string]: string};
}

export interface GetTableTableInfoDeltaRuntimePropertiesKvpairsArgs {
    deltaRuntimeProperties: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface GetTableTableInfoEffectivePredictiveOptimizationFlag {
    inheritedFromName?: string;
    inheritedFromType?: string;
    value: string;
}

export interface GetTableTableInfoEffectivePredictiveOptimizationFlagArgs {
    inheritedFromName?: pulumi.Input<string>;
    inheritedFromType?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface GetTableTableInfoEncryptionDetails {
    sseEncryptionDetails?: inputs.GetTableTableInfoEncryptionDetailsSseEncryptionDetails;
}

export interface GetTableTableInfoEncryptionDetailsArgs {
    sseEncryptionDetails?: pulumi.Input<inputs.GetTableTableInfoEncryptionDetailsSseEncryptionDetailsArgs>;
}

export interface GetTableTableInfoEncryptionDetailsSseEncryptionDetails {
    algorithm?: string;
    awsKmsKeyArn?: string;
}

export interface GetTableTableInfoEncryptionDetailsSseEncryptionDetailsArgs {
    algorithm?: pulumi.Input<string>;
    awsKmsKeyArn?: pulumi.Input<string>;
}

export interface GetTableTableInfoRowFilter {
    functionName: string;
    inputColumnNames: string[];
}

export interface GetTableTableInfoRowFilterArgs {
    functionName: pulumi.Input<string>;
    inputColumnNames: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetTableTableInfoTableConstraint {
    foreignKeyConstraint?: inputs.GetTableTableInfoTableConstraintForeignKeyConstraint;
    namedTableConstraint?: inputs.GetTableTableInfoTableConstraintNamedTableConstraint;
    primaryKeyConstraint?: inputs.GetTableTableInfoTableConstraintPrimaryKeyConstraint;
}

export interface GetTableTableInfoTableConstraintArgs {
    foreignKeyConstraint?: pulumi.Input<inputs.GetTableTableInfoTableConstraintForeignKeyConstraintArgs>;
    namedTableConstraint?: pulumi.Input<inputs.GetTableTableInfoTableConstraintNamedTableConstraintArgs>;
    primaryKeyConstraint?: pulumi.Input<inputs.GetTableTableInfoTableConstraintPrimaryKeyConstraintArgs>;
}

export interface GetTableTableInfoTableConstraintForeignKeyConstraint {
    childColumns: string[];
    name: string;
    parentColumns: string[];
    parentTable: string;
}

export interface GetTableTableInfoTableConstraintForeignKeyConstraintArgs {
    childColumns: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    parentColumns: pulumi.Input<pulumi.Input<string>[]>;
    parentTable: pulumi.Input<string>;
}

export interface GetTableTableInfoTableConstraintNamedTableConstraint {
    name: string;
}

export interface GetTableTableInfoTableConstraintNamedTableConstraintArgs {
    name: pulumi.Input<string>;
}

export interface GetTableTableInfoTableConstraintPrimaryKeyConstraint {
    childColumns: string[];
    name: string;
}

export interface GetTableTableInfoTableConstraintPrimaryKeyConstraintArgs {
    childColumns: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
}

export interface GetTableTableInfoViewDependencies {
    dependencies?: inputs.GetTableTableInfoViewDependenciesDependency[];
}

export interface GetTableTableInfoViewDependenciesArgs {
    dependencies?: pulumi.Input<pulumi.Input<inputs.GetTableTableInfoViewDependenciesDependencyArgs>[]>;
}

export interface GetTableTableInfoViewDependenciesDependency {
    function?: inputs.GetTableTableInfoViewDependenciesDependencyFunction;
    table?: inputs.GetTableTableInfoViewDependenciesDependencyTable;
}

export interface GetTableTableInfoViewDependenciesDependencyArgs {
    function?: pulumi.Input<inputs.GetTableTableInfoViewDependenciesDependencyFunctionArgs>;
    table?: pulumi.Input<inputs.GetTableTableInfoViewDependenciesDependencyTableArgs>;
}

export interface GetTableTableInfoViewDependenciesDependencyFunction {
    functionFullName: string;
}

export interface GetTableTableInfoViewDependenciesDependencyFunctionArgs {
    functionFullName: pulumi.Input<string>;
}

export interface GetTableTableInfoViewDependenciesDependencyTable {
    tableFullName: string;
}

export interface GetTableTableInfoViewDependenciesDependencyTableArgs {
    tableFullName: pulumi.Input<string>;
}

export interface GetVolumeVolumeInfo {
    accessPoint?: string;
    browseOnly?: boolean;
    catalogName?: string;
    comment?: string;
    createdAt?: number;
    createdBy?: string;
    encryptionDetails?: inputs.GetVolumeVolumeInfoEncryptionDetails;
    fullName?: string;
    metastoreId?: string;
    name?: string;
    owner?: string;
    schemaName?: string;
    storageLocation?: string;
    updatedAt?: number;
    updatedBy?: string;
    volumeId?: string;
    volumeType?: string;
}

export interface GetVolumeVolumeInfoArgs {
    accessPoint?: pulumi.Input<string>;
    browseOnly?: pulumi.Input<boolean>;
    catalogName?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    encryptionDetails?: pulumi.Input<inputs.GetVolumeVolumeInfoEncryptionDetailsArgs>;
    fullName?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    schemaName?: pulumi.Input<string>;
    storageLocation?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
    volumeId?: pulumi.Input<string>;
    volumeType?: pulumi.Input<string>;
}

export interface GetVolumeVolumeInfoEncryptionDetails {
    sseEncryptionDetails?: inputs.GetVolumeVolumeInfoEncryptionDetailsSseEncryptionDetails;
}

export interface GetVolumeVolumeInfoEncryptionDetailsArgs {
    sseEncryptionDetails?: pulumi.Input<inputs.GetVolumeVolumeInfoEncryptionDetailsSseEncryptionDetailsArgs>;
}

export interface GetVolumeVolumeInfoEncryptionDetailsSseEncryptionDetails {
    algorithm?: string;
    awsKmsKeyArn?: string;
}

export interface GetVolumeVolumeInfoEncryptionDetailsSseEncryptionDetailsArgs {
    algorithm?: pulumi.Input<string>;
    awsKmsKeyArn?: pulumi.Input<string>;
}

export interface GrantsGrant {
    principal: pulumi.Input<string>;
    privileges: pulumi.Input<pulumi.Input<string>[]>;
}

export interface InstancePoolAwsAttributes {
    availability?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface InstancePoolAzureAttributes {
    availability?: pulumi.Input<string>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface InstancePoolDiskSpec {
    diskCount?: pulumi.Input<number>;
    diskSize?: pulumi.Input<number>;
    diskType?: pulumi.Input<inputs.InstancePoolDiskSpecDiskType>;
}

export interface InstancePoolDiskSpecDiskType {
    azureDiskVolumeType?: pulumi.Input<string>;
    ebsVolumeType?: pulumi.Input<string>;
}

export interface InstancePoolGcpAttributes {
    gcpAvailability?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface InstancePoolInstancePoolFleetAttributes {
    fleetOnDemandOption?: pulumi.Input<inputs.InstancePoolInstancePoolFleetAttributesFleetOnDemandOption>;
    fleetSpotOption?: pulumi.Input<inputs.InstancePoolInstancePoolFleetAttributesFleetSpotOption>;
    launchTemplateOverrides: pulumi.Input<pulumi.Input<inputs.InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride>[]>;
}

export interface InstancePoolInstancePoolFleetAttributesFleetOnDemandOption {
    allocationStrategy: pulumi.Input<string>;
    instancePoolsToUseCount?: pulumi.Input<number>;
}

export interface InstancePoolInstancePoolFleetAttributesFleetSpotOption {
    allocationStrategy: pulumi.Input<string>;
    instancePoolsToUseCount?: pulumi.Input<number>;
}

export interface InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride {
    availabilityZone: pulumi.Input<string>;
    instanceType: pulumi.Input<string>;
}

export interface InstancePoolPreloadedDockerImage {
    basicAuth?: pulumi.Input<inputs.InstancePoolPreloadedDockerImageBasicAuth>;
    url: pulumi.Input<string>;
}

export interface InstancePoolPreloadedDockerImageBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface JobContinuous {
    pauseStatus?: pulumi.Input<string>;
}

export interface JobDbtTask {
    catalog?: pulumi.Input<string>;
    commands: pulumi.Input<pulumi.Input<string>[]>;
    profilesDirectory?: pulumi.Input<string>;
    projectDirectory?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    warehouseId?: pulumi.Input<string>;
}

export interface JobDeployment {
    kind: pulumi.Input<string>;
    metadataFilePath?: pulumi.Input<string>;
}

export interface JobEmailNotifications {
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
    onDurationWarningThresholdExceededs?: pulumi.Input<pulumi.Input<string>[]>;
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    onStarts?: pulumi.Input<pulumi.Input<string>[]>;
    onStreamingBacklogExceededs?: pulumi.Input<pulumi.Input<string>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobEnvironment {
    environmentKey: pulumi.Input<string>;
    spec?: pulumi.Input<inputs.JobEnvironmentSpec>;
}

export interface JobEnvironmentSpec {
    client: pulumi.Input<string>;
    dependencies?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobGitSource {
    branch?: pulumi.Input<string>;
    commit?: pulumi.Input<string>;
    gitSnapshot?: pulumi.Input<inputs.JobGitSourceGitSnapshot>;
    jobSource?: pulumi.Input<inputs.JobGitSourceJobSource>;
    provider?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface JobGitSourceGitSnapshot {
    usedCommit?: pulumi.Input<string>;
}

export interface JobGitSourceJobSource {
    dirtyState?: pulumi.Input<string>;
    importFromGitBranch: pulumi.Input<string>;
    jobConfigPath: pulumi.Input<string>;
}

export interface JobHealth {
    rules: pulumi.Input<pulumi.Input<inputs.JobHealthRule>[]>;
}

export interface JobHealthRule {
    metric: pulumi.Input<string>;
    op: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface JobJobCluster {
    jobClusterKey: pulumi.Input<string>;
    newCluster: pulumi.Input<inputs.JobJobClusterNewCluster>;
}

export interface JobJobClusterNewCluster {
    applyPolicyDefaultValues?: pulumi.Input<boolean>;
    autoscale?: pulumi.Input<inputs.JobJobClusterNewClusterAutoscale>;
    awsAttributes?: pulumi.Input<inputs.JobJobClusterNewClusterAwsAttributes>;
    azureAttributes?: pulumi.Input<inputs.JobJobClusterNewClusterAzureAttributes>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.JobJobClusterNewClusterClusterLogConf>;
    clusterMountInfos?: pulumi.Input<pulumi.Input<inputs.JobJobClusterNewClusterClusterMountInfo>[]>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dataSecurityMode?: pulumi.Input<string>;
    dockerImage?: pulumi.Input<inputs.JobJobClusterNewClusterDockerImage>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.JobJobClusterNewClusterGcpAttributes>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.JobJobClusterNewClusterInitScript>[]>;
    instancePoolId?: pulumi.Input<string>;
    isSingleNode?: pulumi.Input<boolean>;
    kind?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.JobJobClusterNewClusterLibrary>[]>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    runtimeEngine?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    useMlRuntime?: pulumi.Input<boolean>;
    workloadType?: pulumi.Input<inputs.JobJobClusterNewClusterWorkloadType>;
}

export interface JobJobClusterNewClusterAutoscale {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface JobJobClusterNewClusterAwsAttributes {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeIops?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeThroughput?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterAzureAttributes {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    logAnalyticsInfo?: pulumi.Input<inputs.JobJobClusterNewClusterAzureAttributesLogAnalyticsInfo>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface JobJobClusterNewClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: pulumi.Input<string>;
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterClusterLogConf {
    dbfs?: pulumi.Input<inputs.JobJobClusterNewClusterClusterLogConfDbfs>;
    s3?: pulumi.Input<inputs.JobJobClusterNewClusterClusterLogConfS3>;
}

export interface JobJobClusterNewClusterClusterLogConfDbfs {
    destination: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterClusterLogConfS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterClusterMountInfo {
    localMountDirPath: pulumi.Input<string>;
    networkFilesystemInfo: pulumi.Input<inputs.JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo>;
    remoteMountDirPath?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterDockerImage {
    basicAuth?: pulumi.Input<inputs.JobJobClusterNewClusterDockerImageBasicAuth>;
    url: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterDockerImageBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterGcpAttributes {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterInitScript {
    abfss?: pulumi.Input<inputs.JobJobClusterNewClusterInitScriptAbfss>;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: pulumi.Input<inputs.JobJobClusterNewClusterInitScriptDbfs>;
    file?: pulumi.Input<inputs.JobJobClusterNewClusterInitScriptFile>;
    gcs?: pulumi.Input<inputs.JobJobClusterNewClusterInitScriptGcs>;
    s3?: pulumi.Input<inputs.JobJobClusterNewClusterInitScriptS3>;
    volumes?: pulumi.Input<inputs.JobJobClusterNewClusterInitScriptVolumes>;
    workspace?: pulumi.Input<inputs.JobJobClusterNewClusterInitScriptWorkspace>;
}

export interface JobJobClusterNewClusterInitScriptAbfss {
    destination: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterInitScriptDbfs {
    destination: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterInitScriptFile {
    destination: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterInitScriptGcs {
    destination: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterInitScriptS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterInitScriptVolumes {
    destination: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterInitScriptWorkspace {
    destination: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterLibrary {
    cran?: pulumi.Input<inputs.JobJobClusterNewClusterLibraryCran>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.JobJobClusterNewClusterLibraryMaven>;
    pypi?: pulumi.Input<inputs.JobJobClusterNewClusterLibraryPypi>;
    requirements?: pulumi.Input<string>;
    whl?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterLibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterLibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobJobClusterNewClusterWorkloadType {
    clients: pulumi.Input<inputs.JobJobClusterNewClusterWorkloadTypeClients>;
}

export interface JobJobClusterNewClusterWorkloadTypeClients {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface JobLibrary {
    cran?: pulumi.Input<inputs.JobLibraryCran>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.JobLibraryMaven>;
    pypi?: pulumi.Input<inputs.JobLibraryPypi>;
    requirements?: pulumi.Input<string>;
    whl?: pulumi.Input<string>;
}

export interface JobLibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface JobLibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobNewCluster {
    applyPolicyDefaultValues?: pulumi.Input<boolean>;
    autoscale?: pulumi.Input<inputs.JobNewClusterAutoscale>;
    awsAttributes?: pulumi.Input<inputs.JobNewClusterAwsAttributes>;
    azureAttributes?: pulumi.Input<inputs.JobNewClusterAzureAttributes>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.JobNewClusterClusterLogConf>;
    clusterMountInfos?: pulumi.Input<pulumi.Input<inputs.JobNewClusterClusterMountInfo>[]>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dataSecurityMode?: pulumi.Input<string>;
    dockerImage?: pulumi.Input<inputs.JobNewClusterDockerImage>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.JobNewClusterGcpAttributes>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.JobNewClusterInitScript>[]>;
    instancePoolId?: pulumi.Input<string>;
    isSingleNode?: pulumi.Input<boolean>;
    kind?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.JobNewClusterLibrary>[]>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    runtimeEngine?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    useMlRuntime?: pulumi.Input<boolean>;
    workloadType?: pulumi.Input<inputs.JobNewClusterWorkloadType>;
}

export interface JobNewClusterAutoscale {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface JobNewClusterAwsAttributes {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeIops?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeThroughput?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface JobNewClusterAzureAttributes {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    logAnalyticsInfo?: pulumi.Input<inputs.JobNewClusterAzureAttributesLogAnalyticsInfo>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface JobNewClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: pulumi.Input<string>;
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
}

export interface JobNewClusterClusterLogConf {
    dbfs?: pulumi.Input<inputs.JobNewClusterClusterLogConfDbfs>;
    s3?: pulumi.Input<inputs.JobNewClusterClusterLogConfS3>;
}

export interface JobNewClusterClusterLogConfDbfs {
    destination: pulumi.Input<string>;
}

export interface JobNewClusterClusterLogConfS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobNewClusterClusterMountInfo {
    localMountDirPath: pulumi.Input<string>;
    networkFilesystemInfo: pulumi.Input<inputs.JobNewClusterClusterMountInfoNetworkFilesystemInfo>;
    remoteMountDirPath?: pulumi.Input<string>;
}

export interface JobNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
}

export interface JobNewClusterDockerImage {
    basicAuth?: pulumi.Input<inputs.JobNewClusterDockerImageBasicAuth>;
    url: pulumi.Input<string>;
}

export interface JobNewClusterDockerImageBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface JobNewClusterGcpAttributes {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface JobNewClusterInitScript {
    abfss?: pulumi.Input<inputs.JobNewClusterInitScriptAbfss>;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: pulumi.Input<inputs.JobNewClusterInitScriptDbfs>;
    file?: pulumi.Input<inputs.JobNewClusterInitScriptFile>;
    gcs?: pulumi.Input<inputs.JobNewClusterInitScriptGcs>;
    s3?: pulumi.Input<inputs.JobNewClusterInitScriptS3>;
    volumes?: pulumi.Input<inputs.JobNewClusterInitScriptVolumes>;
    workspace?: pulumi.Input<inputs.JobNewClusterInitScriptWorkspace>;
}

export interface JobNewClusterInitScriptAbfss {
    destination: pulumi.Input<string>;
}

export interface JobNewClusterInitScriptDbfs {
    destination: pulumi.Input<string>;
}

export interface JobNewClusterInitScriptFile {
    destination: pulumi.Input<string>;
}

export interface JobNewClusterInitScriptGcs {
    destination: pulumi.Input<string>;
}

export interface JobNewClusterInitScriptS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobNewClusterInitScriptVolumes {
    destination: pulumi.Input<string>;
}

export interface JobNewClusterInitScriptWorkspace {
    destination: pulumi.Input<string>;
}

export interface JobNewClusterLibrary {
    cran?: pulumi.Input<inputs.JobNewClusterLibraryCran>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.JobNewClusterLibraryMaven>;
    pypi?: pulumi.Input<inputs.JobNewClusterLibraryPypi>;
    requirements?: pulumi.Input<string>;
    whl?: pulumi.Input<string>;
}

export interface JobNewClusterLibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobNewClusterLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface JobNewClusterLibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobNewClusterWorkloadType {
    clients: pulumi.Input<inputs.JobNewClusterWorkloadTypeClients>;
}

export interface JobNewClusterWorkloadTypeClients {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface JobNotebookTask {
    baseParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    notebookPath: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    warehouseId?: pulumi.Input<string>;
}

export interface JobNotificationSettings {
    noAlertForCanceledRuns?: pulumi.Input<boolean>;
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
}

export interface JobParameter {
    default: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface JobPipelineTask {
    fullRefresh?: pulumi.Input<boolean>;
    pipelineId: pulumi.Input<string>;
}

export interface JobPythonWheelTask {
    entryPoint?: pulumi.Input<string>;
    namedParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    packageName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobQueue {
    enabled: pulumi.Input<boolean>;
}

export interface JobRunAs {
    servicePrincipalName?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface JobRunJobTask {
    jobId: pulumi.Input<number>;
    jobParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface JobSchedule {
    pauseStatus?: pulumi.Input<string>;
    quartzCronExpression: pulumi.Input<string>;
    timezoneId: pulumi.Input<string>;
}

export interface JobSparkJarTask {
    jarUri?: pulumi.Input<string>;
    mainClassName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobSparkPythonTask {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    pythonFile: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

export interface JobSparkSubmitTask {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTask {
    cleanRoomsNotebookTask?: pulumi.Input<inputs.JobTaskCleanRoomsNotebookTask>;
    conditionTask?: pulumi.Input<inputs.JobTaskConditionTask>;
    dbtTask?: pulumi.Input<inputs.JobTaskDbtTask>;
    dependsOns?: pulumi.Input<pulumi.Input<inputs.JobTaskDependsOn>[]>;
    description?: pulumi.Input<string>;
    disableAutoOptimization?: pulumi.Input<boolean>;
    emailNotifications?: pulumi.Input<inputs.JobTaskEmailNotifications>;
    environmentKey?: pulumi.Input<string>;
    existingClusterId?: pulumi.Input<string>;
    forEachTask?: pulumi.Input<inputs.JobTaskForEachTask>;
    health?: pulumi.Input<inputs.JobTaskHealth>;
    jobClusterKey?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.JobTaskLibrary>[]>;
    maxRetries?: pulumi.Input<number>;
    minRetryIntervalMillis?: pulumi.Input<number>;
    newCluster?: pulumi.Input<inputs.JobTaskNewCluster>;
    notebookTask?: pulumi.Input<inputs.JobTaskNotebookTask>;
    notificationSettings?: pulumi.Input<inputs.JobTaskNotificationSettings>;
    pipelineTask?: pulumi.Input<inputs.JobTaskPipelineTask>;
    pythonWheelTask?: pulumi.Input<inputs.JobTaskPythonWheelTask>;
    retryOnTimeout?: pulumi.Input<boolean>;
    runIf?: pulumi.Input<string>;
    runJobTask?: pulumi.Input<inputs.JobTaskRunJobTask>;
    sparkJarTask?: pulumi.Input<inputs.JobTaskSparkJarTask>;
    sparkPythonTask?: pulumi.Input<inputs.JobTaskSparkPythonTask>;
    sparkSubmitTask?: pulumi.Input<inputs.JobTaskSparkSubmitTask>;
    sqlTask?: pulumi.Input<inputs.JobTaskSqlTask>;
    taskKey: pulumi.Input<string>;
    timeoutSeconds?: pulumi.Input<number>;
    webhookNotifications?: pulumi.Input<inputs.JobTaskWebhookNotifications>;
}

export interface JobTaskCleanRoomsNotebookTask {
    cleanRoomName: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    notebookBaseParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    notebookName: pulumi.Input<string>;
}

export interface JobTaskConditionTask {
    left: pulumi.Input<string>;
    op: pulumi.Input<string>;
    right: pulumi.Input<string>;
}

export interface JobTaskDbtTask {
    catalog?: pulumi.Input<string>;
    commands: pulumi.Input<pulumi.Input<string>[]>;
    profilesDirectory?: pulumi.Input<string>;
    projectDirectory?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    warehouseId?: pulumi.Input<string>;
}

export interface JobTaskDependsOn {
    outcome?: pulumi.Input<string>;
    taskKey: pulumi.Input<string>;
}

export interface JobTaskEmailNotifications {
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
    onDurationWarningThresholdExceededs?: pulumi.Input<pulumi.Input<string>[]>;
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    onStarts?: pulumi.Input<pulumi.Input<string>[]>;
    onStreamingBacklogExceededs?: pulumi.Input<pulumi.Input<string>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTaskForEachTask {
    concurrency?: pulumi.Input<number>;
    inputs: pulumi.Input<string>;
    task: pulumi.Input<inputs.JobTaskForEachTaskTask>;
}

export interface JobTaskForEachTaskTask {
    cleanRoomsNotebookTask?: pulumi.Input<inputs.JobTaskForEachTaskTaskCleanRoomsNotebookTask>;
    conditionTask?: pulumi.Input<inputs.JobTaskForEachTaskTaskConditionTask>;
    dbtTask?: pulumi.Input<inputs.JobTaskForEachTaskTaskDbtTask>;
    dependsOns?: pulumi.Input<pulumi.Input<inputs.JobTaskForEachTaskTaskDependsOn>[]>;
    description?: pulumi.Input<string>;
    disableAutoOptimization?: pulumi.Input<boolean>;
    emailNotifications?: pulumi.Input<inputs.JobTaskForEachTaskTaskEmailNotifications>;
    environmentKey?: pulumi.Input<string>;
    existingClusterId?: pulumi.Input<string>;
    health?: pulumi.Input<inputs.JobTaskForEachTaskTaskHealth>;
    jobClusterKey?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.JobTaskForEachTaskTaskLibrary>[]>;
    maxRetries?: pulumi.Input<number>;
    minRetryIntervalMillis?: pulumi.Input<number>;
    newCluster?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewCluster>;
    notebookTask?: pulumi.Input<inputs.JobTaskForEachTaskTaskNotebookTask>;
    notificationSettings?: pulumi.Input<inputs.JobTaskForEachTaskTaskNotificationSettings>;
    pipelineTask?: pulumi.Input<inputs.JobTaskForEachTaskTaskPipelineTask>;
    pythonWheelTask?: pulumi.Input<inputs.JobTaskForEachTaskTaskPythonWheelTask>;
    retryOnTimeout?: pulumi.Input<boolean>;
    runIf?: pulumi.Input<string>;
    runJobTask?: pulumi.Input<inputs.JobTaskForEachTaskTaskRunJobTask>;
    sparkJarTask?: pulumi.Input<inputs.JobTaskForEachTaskTaskSparkJarTask>;
    sparkPythonTask?: pulumi.Input<inputs.JobTaskForEachTaskTaskSparkPythonTask>;
    sparkSubmitTask?: pulumi.Input<inputs.JobTaskForEachTaskTaskSparkSubmitTask>;
    sqlTask?: pulumi.Input<inputs.JobTaskForEachTaskTaskSqlTask>;
    taskKey: pulumi.Input<string>;
    timeoutSeconds?: pulumi.Input<number>;
    webhookNotifications?: pulumi.Input<inputs.JobTaskForEachTaskTaskWebhookNotifications>;
}

export interface JobTaskForEachTaskTaskCleanRoomsNotebookTask {
    cleanRoomName: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    notebookBaseParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    notebookName: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskConditionTask {
    left: pulumi.Input<string>;
    op: pulumi.Input<string>;
    right: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskDbtTask {
    catalog?: pulumi.Input<string>;
    commands: pulumi.Input<pulumi.Input<string>[]>;
    profilesDirectory?: pulumi.Input<string>;
    projectDirectory?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    warehouseId?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskDependsOn {
    outcome?: pulumi.Input<string>;
    taskKey: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskEmailNotifications {
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
    onDurationWarningThresholdExceededs?: pulumi.Input<pulumi.Input<string>[]>;
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    onStarts?: pulumi.Input<pulumi.Input<string>[]>;
    onStreamingBacklogExceededs?: pulumi.Input<pulumi.Input<string>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTaskForEachTaskTaskHealth {
    rules: pulumi.Input<pulumi.Input<inputs.JobTaskForEachTaskTaskHealthRule>[]>;
}

export interface JobTaskForEachTaskTaskHealthRule {
    metric: pulumi.Input<string>;
    op: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface JobTaskForEachTaskTaskLibrary {
    cran?: pulumi.Input<inputs.JobTaskForEachTaskTaskLibraryCran>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.JobTaskForEachTaskTaskLibraryMaven>;
    pypi?: pulumi.Input<inputs.JobTaskForEachTaskTaskLibraryPypi>;
    requirements?: pulumi.Input<string>;
    whl?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskLibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskLibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewCluster {
    applyPolicyDefaultValues?: pulumi.Input<boolean>;
    autoscale?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterAutoscale>;
    awsAttributes?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterAwsAttributes>;
    azureAttributes?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterAzureAttributes>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterClusterLogConf>;
    clusterMountInfos?: pulumi.Input<pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterClusterMountInfo>[]>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dataSecurityMode?: pulumi.Input<string>;
    dockerImage?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterDockerImage>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterGcpAttributes>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterInitScript>[]>;
    instancePoolId?: pulumi.Input<string>;
    isSingleNode?: pulumi.Input<boolean>;
    kind?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterLibrary>[]>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    runtimeEngine?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    useMlRuntime?: pulumi.Input<boolean>;
    workloadType?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterWorkloadType>;
}

export interface JobTaskForEachTaskTaskNewClusterAutoscale {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface JobTaskForEachTaskTaskNewClusterAwsAttributes {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeIops?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeThroughput?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterAzureAttributes {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    logAnalyticsInfo?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterAzureAttributesLogAnalyticsInfo>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface JobTaskForEachTaskTaskNewClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: pulumi.Input<string>;
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterClusterLogConf {
    dbfs?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterClusterLogConfDbfs>;
    s3?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterClusterLogConfS3>;
}

export interface JobTaskForEachTaskTaskNewClusterClusterLogConfDbfs {
    destination: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterClusterLogConfS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterClusterMountInfo {
    localMountDirPath: pulumi.Input<string>;
    networkFilesystemInfo: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfo>;
    remoteMountDirPath?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterDockerImage {
    basicAuth?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterDockerImageBasicAuth>;
    url: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterDockerImageBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterGcpAttributes {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterInitScript {
    abfss?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterInitScriptAbfss>;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterInitScriptDbfs>;
    file?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterInitScriptFile>;
    gcs?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterInitScriptGcs>;
    s3?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterInitScriptS3>;
    volumes?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterInitScriptVolumes>;
    workspace?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterInitScriptWorkspace>;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptAbfss {
    destination: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptDbfs {
    destination: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptFile {
    destination: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptGcs {
    destination: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptVolumes {
    destination: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterInitScriptWorkspace {
    destination: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterLibrary {
    cran?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterLibraryCran>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterLibraryMaven>;
    pypi?: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterLibraryPypi>;
    requirements?: pulumi.Input<string>;
    whl?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterLibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterLibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNewClusterWorkloadType {
    clients: pulumi.Input<inputs.JobTaskForEachTaskTaskNewClusterWorkloadTypeClients>;
}

export interface JobTaskForEachTaskTaskNewClusterWorkloadTypeClients {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface JobTaskForEachTaskTaskNotebookTask {
    baseParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    notebookPath: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    warehouseId?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskNotificationSettings {
    alertOnLastAttempt?: pulumi.Input<boolean>;
    noAlertForCanceledRuns?: pulumi.Input<boolean>;
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
}

export interface JobTaskForEachTaskTaskPipelineTask {
    fullRefresh?: pulumi.Input<boolean>;
    pipelineId: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskPythonWheelTask {
    entryPoint?: pulumi.Input<string>;
    namedParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    packageName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTaskForEachTaskTaskRunJobTask {
    dbtCommands?: pulumi.Input<pulumi.Input<string>[]>;
    jarParams?: pulumi.Input<pulumi.Input<string>[]>;
    jobId: pulumi.Input<number>;
    jobParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    notebookParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    pipelineParams?: pulumi.Input<inputs.JobTaskForEachTaskTaskRunJobTaskPipelineParams>;
    pythonNamedParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    pythonParams?: pulumi.Input<pulumi.Input<string>[]>;
    sparkSubmitParams?: pulumi.Input<pulumi.Input<string>[]>;
    sqlParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface JobTaskForEachTaskTaskRunJobTaskPipelineParams {
    fullRefresh?: pulumi.Input<boolean>;
}

export interface JobTaskForEachTaskTaskSparkJarTask {
    jarUri?: pulumi.Input<string>;
    mainClassName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTaskForEachTaskTaskSparkPythonTask {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    pythonFile: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskSparkSubmitTask {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTaskForEachTaskTaskSqlTask {
    alert?: pulumi.Input<inputs.JobTaskForEachTaskTaskSqlTaskAlert>;
    dashboard?: pulumi.Input<inputs.JobTaskForEachTaskTaskSqlTaskDashboard>;
    file?: pulumi.Input<inputs.JobTaskForEachTaskTaskSqlTaskFile>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    query?: pulumi.Input<inputs.JobTaskForEachTaskTaskSqlTaskQuery>;
    warehouseId: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskSqlTaskAlert {
    alertId: pulumi.Input<string>;
    pauseSubscriptions?: pulumi.Input<boolean>;
    subscriptions?: pulumi.Input<pulumi.Input<inputs.JobTaskForEachTaskTaskSqlTaskAlertSubscription>[]>;
}

export interface JobTaskForEachTaskTaskSqlTaskAlertSubscription {
    destinationId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskSqlTaskDashboard {
    customSubject?: pulumi.Input<string>;
    dashboardId: pulumi.Input<string>;
    pauseSubscriptions?: pulumi.Input<boolean>;
    subscriptions?: pulumi.Input<pulumi.Input<inputs.JobTaskForEachTaskTaskSqlTaskDashboardSubscription>[]>;
}

export interface JobTaskForEachTaskTaskSqlTaskDashboardSubscription {
    destinationId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskSqlTaskFile {
    path: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskSqlTaskQuery {
    queryId: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskWebhookNotifications {
    onDurationWarningThresholdExceededs?: pulumi.Input<pulumi.Input<inputs.JobTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceeded>[]>;
    onFailures?: pulumi.Input<pulumi.Input<inputs.JobTaskForEachTaskTaskWebhookNotificationsOnFailure>[]>;
    onStarts?: pulumi.Input<pulumi.Input<inputs.JobTaskForEachTaskTaskWebhookNotificationsOnStart>[]>;
    onStreamingBacklogExceededs?: pulumi.Input<pulumi.Input<inputs.JobTaskForEachTaskTaskWebhookNotificationsOnStreamingBacklogExceeded>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<inputs.JobTaskForEachTaskTaskWebhookNotificationsOnSuccess>[]>;
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnDurationWarningThresholdExceeded {
    id: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnFailure {
    id: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnStart {
    id: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnStreamingBacklogExceeded {
    id: pulumi.Input<string>;
}

export interface JobTaskForEachTaskTaskWebhookNotificationsOnSuccess {
    id: pulumi.Input<string>;
}

export interface JobTaskHealth {
    rules: pulumi.Input<pulumi.Input<inputs.JobTaskHealthRule>[]>;
}

export interface JobTaskHealthRule {
    metric: pulumi.Input<string>;
    op: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface JobTaskLibrary {
    cran?: pulumi.Input<inputs.JobTaskLibraryCran>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.JobTaskLibraryMaven>;
    pypi?: pulumi.Input<inputs.JobTaskLibraryPypi>;
    requirements?: pulumi.Input<string>;
    whl?: pulumi.Input<string>;
}

export interface JobTaskLibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskLibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskNewCluster {
    applyPolicyDefaultValues?: pulumi.Input<boolean>;
    autoscale?: pulumi.Input<inputs.JobTaskNewClusterAutoscale>;
    awsAttributes?: pulumi.Input<inputs.JobTaskNewClusterAwsAttributes>;
    azureAttributes?: pulumi.Input<inputs.JobTaskNewClusterAzureAttributes>;
    clusterId?: pulumi.Input<string>;
    clusterLogConf?: pulumi.Input<inputs.JobTaskNewClusterClusterLogConf>;
    clusterMountInfos?: pulumi.Input<pulumi.Input<inputs.JobTaskNewClusterClusterMountInfo>[]>;
    clusterName?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dataSecurityMode?: pulumi.Input<string>;
    dockerImage?: pulumi.Input<inputs.JobTaskNewClusterDockerImage>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableElasticDisk?: pulumi.Input<boolean>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.JobTaskNewClusterGcpAttributes>;
    idempotencyToken?: pulumi.Input<string>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.JobTaskNewClusterInitScript>[]>;
    instancePoolId?: pulumi.Input<string>;
    isSingleNode?: pulumi.Input<boolean>;
    kind?: pulumi.Input<string>;
    libraries?: pulumi.Input<pulumi.Input<inputs.JobTaskNewClusterLibrary>[]>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    runtimeEngine?: pulumi.Input<string>;
    singleUserName?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkVersion: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    useMlRuntime?: pulumi.Input<boolean>;
    workloadType?: pulumi.Input<inputs.JobTaskNewClusterWorkloadType>;
}

export interface JobTaskNewClusterAutoscale {
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
}

export interface JobTaskNewClusterAwsAttributes {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeIops?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeThroughput?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface JobTaskNewClusterAzureAttributes {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    logAnalyticsInfo?: pulumi.Input<inputs.JobTaskNewClusterAzureAttributesLogAnalyticsInfo>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface JobTaskNewClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: pulumi.Input<string>;
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
}

export interface JobTaskNewClusterClusterLogConf {
    dbfs?: pulumi.Input<inputs.JobTaskNewClusterClusterLogConfDbfs>;
    s3?: pulumi.Input<inputs.JobTaskNewClusterClusterLogConfS3>;
}

export interface JobTaskNewClusterClusterLogConfDbfs {
    destination: pulumi.Input<string>;
}

export interface JobTaskNewClusterClusterLogConfS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobTaskNewClusterClusterMountInfo {
    localMountDirPath: pulumi.Input<string>;
    networkFilesystemInfo: pulumi.Input<inputs.JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo>;
    remoteMountDirPath?: pulumi.Input<string>;
}

export interface JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo {
    mountOptions?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
}

export interface JobTaskNewClusterDockerImage {
    basicAuth?: pulumi.Input<inputs.JobTaskNewClusterDockerImageBasicAuth>;
    url: pulumi.Input<string>;
}

export interface JobTaskNewClusterDockerImageBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface JobTaskNewClusterGcpAttributes {
    availability?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    googleServiceAccount?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    usePreemptibleExecutors?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

export interface JobTaskNewClusterInitScript {
    abfss?: pulumi.Input<inputs.JobTaskNewClusterInitScriptAbfss>;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: pulumi.Input<inputs.JobTaskNewClusterInitScriptDbfs>;
    file?: pulumi.Input<inputs.JobTaskNewClusterInitScriptFile>;
    gcs?: pulumi.Input<inputs.JobTaskNewClusterInitScriptGcs>;
    s3?: pulumi.Input<inputs.JobTaskNewClusterInitScriptS3>;
    volumes?: pulumi.Input<inputs.JobTaskNewClusterInitScriptVolumes>;
    workspace?: pulumi.Input<inputs.JobTaskNewClusterInitScriptWorkspace>;
}

export interface JobTaskNewClusterInitScriptAbfss {
    destination: pulumi.Input<string>;
}

export interface JobTaskNewClusterInitScriptDbfs {
    destination: pulumi.Input<string>;
}

export interface JobTaskNewClusterInitScriptFile {
    destination: pulumi.Input<string>;
}

export interface JobTaskNewClusterInitScriptGcs {
    destination: pulumi.Input<string>;
}

export interface JobTaskNewClusterInitScriptS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface JobTaskNewClusterInitScriptVolumes {
    destination: pulumi.Input<string>;
}

export interface JobTaskNewClusterInitScriptWorkspace {
    destination: pulumi.Input<string>;
}

export interface JobTaskNewClusterLibrary {
    cran?: pulumi.Input<inputs.JobTaskNewClusterLibraryCran>;
    egg?: pulumi.Input<string>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.JobTaskNewClusterLibraryMaven>;
    pypi?: pulumi.Input<inputs.JobTaskNewClusterLibraryPypi>;
    requirements?: pulumi.Input<string>;
    whl?: pulumi.Input<string>;
}

export interface JobTaskNewClusterLibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskNewClusterLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskNewClusterLibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface JobTaskNewClusterWorkloadType {
    clients: pulumi.Input<inputs.JobTaskNewClusterWorkloadTypeClients>;
}

export interface JobTaskNewClusterWorkloadTypeClients {
    jobs?: pulumi.Input<boolean>;
    notebooks?: pulumi.Input<boolean>;
}

export interface JobTaskNotebookTask {
    baseParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    notebookPath: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    warehouseId?: pulumi.Input<string>;
}

export interface JobTaskNotificationSettings {
    alertOnLastAttempt?: pulumi.Input<boolean>;
    noAlertForCanceledRuns?: pulumi.Input<boolean>;
    noAlertForSkippedRuns?: pulumi.Input<boolean>;
}

export interface JobTaskPipelineTask {
    fullRefresh?: pulumi.Input<boolean>;
    pipelineId: pulumi.Input<string>;
}

export interface JobTaskPythonWheelTask {
    entryPoint?: pulumi.Input<string>;
    namedParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    packageName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTaskRunJobTask {
    dbtCommands?: pulumi.Input<pulumi.Input<string>[]>;
    jarParams?: pulumi.Input<pulumi.Input<string>[]>;
    jobId: pulumi.Input<number>;
    jobParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    notebookParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    pipelineParams?: pulumi.Input<inputs.JobTaskRunJobTaskPipelineParams>;
    pythonNamedParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    pythonParams?: pulumi.Input<pulumi.Input<string>[]>;
    sparkSubmitParams?: pulumi.Input<pulumi.Input<string>[]>;
    sqlParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface JobTaskRunJobTaskPipelineParams {
    fullRefresh?: pulumi.Input<boolean>;
}

export interface JobTaskSparkJarTask {
    jarUri?: pulumi.Input<string>;
    mainClassName?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTaskSparkPythonTask {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    pythonFile: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

export interface JobTaskSparkSubmitTask {
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface JobTaskSqlTask {
    alert?: pulumi.Input<inputs.JobTaskSqlTaskAlert>;
    dashboard?: pulumi.Input<inputs.JobTaskSqlTaskDashboard>;
    file?: pulumi.Input<inputs.JobTaskSqlTaskFile>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    query?: pulumi.Input<inputs.JobTaskSqlTaskQuery>;
    warehouseId: pulumi.Input<string>;
}

export interface JobTaskSqlTaskAlert {
    alertId: pulumi.Input<string>;
    pauseSubscriptions?: pulumi.Input<boolean>;
    subscriptions?: pulumi.Input<pulumi.Input<inputs.JobTaskSqlTaskAlertSubscription>[]>;
}

export interface JobTaskSqlTaskAlertSubscription {
    destinationId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface JobTaskSqlTaskDashboard {
    customSubject?: pulumi.Input<string>;
    dashboardId: pulumi.Input<string>;
    pauseSubscriptions?: pulumi.Input<boolean>;
    subscriptions?: pulumi.Input<pulumi.Input<inputs.JobTaskSqlTaskDashboardSubscription>[]>;
}

export interface JobTaskSqlTaskDashboardSubscription {
    destinationId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface JobTaskSqlTaskFile {
    path: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

export interface JobTaskSqlTaskQuery {
    queryId: pulumi.Input<string>;
}

export interface JobTaskWebhookNotifications {
    onDurationWarningThresholdExceededs?: pulumi.Input<pulumi.Input<inputs.JobTaskWebhookNotificationsOnDurationWarningThresholdExceeded>[]>;
    onFailures?: pulumi.Input<pulumi.Input<inputs.JobTaskWebhookNotificationsOnFailure>[]>;
    onStarts?: pulumi.Input<pulumi.Input<inputs.JobTaskWebhookNotificationsOnStart>[]>;
    onStreamingBacklogExceededs?: pulumi.Input<pulumi.Input<inputs.JobTaskWebhookNotificationsOnStreamingBacklogExceeded>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<inputs.JobTaskWebhookNotificationsOnSuccess>[]>;
}

export interface JobTaskWebhookNotificationsOnDurationWarningThresholdExceeded {
    id: pulumi.Input<string>;
}

export interface JobTaskWebhookNotificationsOnFailure {
    id: pulumi.Input<string>;
}

export interface JobTaskWebhookNotificationsOnStart {
    id: pulumi.Input<string>;
}

export interface JobTaskWebhookNotificationsOnStreamingBacklogExceeded {
    id: pulumi.Input<string>;
}

export interface JobTaskWebhookNotificationsOnSuccess {
    id: pulumi.Input<string>;
}

export interface JobTrigger {
    fileArrival?: pulumi.Input<inputs.JobTriggerFileArrival>;
    pauseStatus?: pulumi.Input<string>;
    periodic?: pulumi.Input<inputs.JobTriggerPeriodic>;
    table?: pulumi.Input<inputs.JobTriggerTable>;
    tableUpdate?: pulumi.Input<inputs.JobTriggerTableUpdate>;
}

export interface JobTriggerFileArrival {
    minTimeBetweenTriggersSeconds?: pulumi.Input<number>;
    url: pulumi.Input<string>;
    waitAfterLastChangeSeconds?: pulumi.Input<number>;
}

export interface JobTriggerPeriodic {
    interval: pulumi.Input<number>;
    unit: pulumi.Input<string>;
}

export interface JobTriggerTable {
    condition?: pulumi.Input<string>;
    minTimeBetweenTriggersSeconds?: pulumi.Input<number>;
    tableNames?: pulumi.Input<pulumi.Input<string>[]>;
    waitAfterLastChangeSeconds?: pulumi.Input<number>;
}

export interface JobTriggerTableUpdate {
    condition?: pulumi.Input<string>;
    minTimeBetweenTriggersSeconds?: pulumi.Input<number>;
    tableNames: pulumi.Input<pulumi.Input<string>[]>;
    waitAfterLastChangeSeconds?: pulumi.Input<number>;
}

export interface JobWebhookNotifications {
    onDurationWarningThresholdExceededs?: pulumi.Input<pulumi.Input<inputs.JobWebhookNotificationsOnDurationWarningThresholdExceeded>[]>;
    onFailures?: pulumi.Input<pulumi.Input<inputs.JobWebhookNotificationsOnFailure>[]>;
    onStarts?: pulumi.Input<pulumi.Input<inputs.JobWebhookNotificationsOnStart>[]>;
    onStreamingBacklogExceededs?: pulumi.Input<pulumi.Input<inputs.JobWebhookNotificationsOnStreamingBacklogExceeded>[]>;
    onSuccesses?: pulumi.Input<pulumi.Input<inputs.JobWebhookNotificationsOnSuccess>[]>;
}

export interface JobWebhookNotificationsOnDurationWarningThresholdExceeded {
    id: pulumi.Input<string>;
}

export interface JobWebhookNotificationsOnFailure {
    id: pulumi.Input<string>;
}

export interface JobWebhookNotificationsOnStart {
    id: pulumi.Input<string>;
}

export interface JobWebhookNotificationsOnStreamingBacklogExceeded {
    id: pulumi.Input<string>;
}

export interface JobWebhookNotificationsOnSuccess {
    id: pulumi.Input<string>;
}

export interface LakehouseMonitorCustomMetric {
    definition: pulumi.Input<string>;
    inputColumns: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    outputDataType: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface LakehouseMonitorDataClassificationConfig {
    enabled?: pulumi.Input<boolean>;
}

export interface LakehouseMonitorInferenceLog {
    granularities: pulumi.Input<pulumi.Input<string>[]>;
    labelCol?: pulumi.Input<string>;
    modelIdCol: pulumi.Input<string>;
    predictionCol: pulumi.Input<string>;
    predictionProbaCol?: pulumi.Input<string>;
    problemType: pulumi.Input<string>;
    timestampCol: pulumi.Input<string>;
}

export interface LakehouseMonitorNotifications {
    onFailure?: pulumi.Input<inputs.LakehouseMonitorNotificationsOnFailure>;
    onNewClassificationTagDetected?: pulumi.Input<inputs.LakehouseMonitorNotificationsOnNewClassificationTagDetected>;
}

export interface LakehouseMonitorNotificationsOnFailure {
    emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LakehouseMonitorNotificationsOnNewClassificationTagDetected {
    emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LakehouseMonitorSchedule {
    pauseStatus?: pulumi.Input<string>;
    quartzCronExpression: pulumi.Input<string>;
    timezoneId: pulumi.Input<string>;
}

export interface LakehouseMonitorSnapshot {
}

export interface LakehouseMonitorTimeSeries {
    granularities: pulumi.Input<pulumi.Input<string>[]>;
    timestampCol: pulumi.Input<string>;
}

export interface LibraryCran {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface LibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface LibraryPypi {
    package: pulumi.Input<string>;
    repo?: pulumi.Input<string>;
}

export interface MetastoreDataAccessAwsIamRole {
    externalId?: pulumi.Input<string>;
    roleArn: pulumi.Input<string>;
    unityCatalogIamArn?: pulumi.Input<string>;
}

export interface MetastoreDataAccessAzureManagedIdentity {
    accessConnectorId: pulumi.Input<string>;
    credentialId?: pulumi.Input<string>;
    managedIdentityId?: pulumi.Input<string>;
}

export interface MetastoreDataAccessAzureServicePrincipal {
    applicationId: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    directoryId: pulumi.Input<string>;
}

export interface MetastoreDataAccessCloudflareApiToken {
    accessKeyId: pulumi.Input<string>;
    accountId: pulumi.Input<string>;
    secretAccessKey: pulumi.Input<string>;
}

export interface MetastoreDataAccessDatabricksGcpServiceAccount {
    credentialId?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
}

export interface MetastoreDataAccessGcpServiceAccountKey {
    email: pulumi.Input<string>;
    privateKey: pulumi.Input<string>;
    privateKeyId: pulumi.Input<string>;
}

export interface MlflowModelTag {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface MlflowWebhookHttpUrlSpec {
    authorization?: pulumi.Input<string>;
    enableSslVerification?: pulumi.Input<boolean>;
    secret?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface MlflowWebhookJobSpec {
    accessToken: pulumi.Input<string>;
    jobId: pulumi.Input<string>;
    workspaceUrl?: pulumi.Input<string>;
}

export interface ModelServingAiGateway {
    guardrails?: pulumi.Input<inputs.ModelServingAiGatewayGuardrails>;
    inferenceTableConfig?: pulumi.Input<inputs.ModelServingAiGatewayInferenceTableConfig>;
    rateLimits?: pulumi.Input<pulumi.Input<inputs.ModelServingAiGatewayRateLimit>[]>;
    usageTrackingConfig?: pulumi.Input<inputs.ModelServingAiGatewayUsageTrackingConfig>;
}

export interface ModelServingAiGatewayGuardrails {
    input?: pulumi.Input<inputs.ModelServingAiGatewayGuardrailsInput>;
    output?: pulumi.Input<inputs.ModelServingAiGatewayGuardrailsOutput>;
}

export interface ModelServingAiGatewayGuardrailsInput {
    invalidKeywords?: pulumi.Input<pulumi.Input<string>[]>;
    pii?: pulumi.Input<inputs.ModelServingAiGatewayGuardrailsInputPii>;
    safety?: pulumi.Input<boolean>;
    validTopics?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ModelServingAiGatewayGuardrailsInputPii {
    behavior: pulumi.Input<string>;
}

export interface ModelServingAiGatewayGuardrailsOutput {
    invalidKeywords?: pulumi.Input<pulumi.Input<string>[]>;
    pii?: pulumi.Input<inputs.ModelServingAiGatewayGuardrailsOutputPii>;
    safety?: pulumi.Input<boolean>;
    validTopics?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ModelServingAiGatewayGuardrailsOutputPii {
    behavior: pulumi.Input<string>;
}

export interface ModelServingAiGatewayInferenceTableConfig {
    catalogName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    schemaName?: pulumi.Input<string>;
    tableNamePrefix?: pulumi.Input<string>;
}

export interface ModelServingAiGatewayRateLimit {
    calls: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    renewalPeriod: pulumi.Input<string>;
}

export interface ModelServingAiGatewayUsageTrackingConfig {
    enabled?: pulumi.Input<boolean>;
}

export interface ModelServingConfig {
    autoCaptureConfig?: pulumi.Input<inputs.ModelServingConfigAutoCaptureConfig>;
    servedEntities?: pulumi.Input<pulumi.Input<inputs.ModelServingConfigServedEntity>[]>;
    /**
     * @deprecated Please use 'config.served_entities' instead of 'config.served_models'.
     */
    servedModels?: pulumi.Input<pulumi.Input<inputs.ModelServingConfigServedModel>[]>;
    trafficConfig?: pulumi.Input<inputs.ModelServingConfigTrafficConfig>;
}

export interface ModelServingConfigAutoCaptureConfig {
    catalogName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    schemaName?: pulumi.Input<string>;
    tableNamePrefix?: pulumi.Input<string>;
}

export interface ModelServingConfigServedEntity {
    entityName?: pulumi.Input<string>;
    entityVersion?: pulumi.Input<string>;
    environmentVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    externalModel?: pulumi.Input<inputs.ModelServingConfigServedEntityExternalModel>;
    instanceProfileArn?: pulumi.Input<string>;
    maxProvisionedThroughput?: pulumi.Input<number>;
    minProvisionedThroughput?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    scaleToZeroEnabled?: pulumi.Input<boolean>;
    workloadSize?: pulumi.Input<string>;
    workloadType?: pulumi.Input<string>;
}

export interface ModelServingConfigServedEntityExternalModel {
    ai21labsConfig?: pulumi.Input<inputs.ModelServingConfigServedEntityExternalModelAi21labsConfig>;
    amazonBedrockConfig?: pulumi.Input<inputs.ModelServingConfigServedEntityExternalModelAmazonBedrockConfig>;
    anthropicConfig?: pulumi.Input<inputs.ModelServingConfigServedEntityExternalModelAnthropicConfig>;
    cohereConfig?: pulumi.Input<inputs.ModelServingConfigServedEntityExternalModelCohereConfig>;
    databricksModelServingConfig?: pulumi.Input<inputs.ModelServingConfigServedEntityExternalModelDatabricksModelServingConfig>;
    googleCloudVertexAiConfig?: pulumi.Input<inputs.ModelServingConfigServedEntityExternalModelGoogleCloudVertexAiConfig>;
    name: pulumi.Input<string>;
    openaiConfig?: pulumi.Input<inputs.ModelServingConfigServedEntityExternalModelOpenaiConfig>;
    palmConfig?: pulumi.Input<inputs.ModelServingConfigServedEntityExternalModelPalmConfig>;
    provider: pulumi.Input<string>;
    task: pulumi.Input<string>;
}

export interface ModelServingConfigServedEntityExternalModelAi21labsConfig {
    ai21labsApiKey?: pulumi.Input<string>;
    ai21labsApiKeyPlaintext?: pulumi.Input<string>;
}

export interface ModelServingConfigServedEntityExternalModelAmazonBedrockConfig {
    awsAccessKeyId?: pulumi.Input<string>;
    awsAccessKeyIdPlaintext?: pulumi.Input<string>;
    awsRegion: pulumi.Input<string>;
    awsSecretAccessKey?: pulumi.Input<string>;
    awsSecretAccessKeyPlaintext?: pulumi.Input<string>;
    bedrockProvider: pulumi.Input<string>;
}

export interface ModelServingConfigServedEntityExternalModelAnthropicConfig {
    anthropicApiKey?: pulumi.Input<string>;
    anthropicApiKeyPlaintext?: pulumi.Input<string>;
}

export interface ModelServingConfigServedEntityExternalModelCohereConfig {
    cohereApiBase?: pulumi.Input<string>;
    cohereApiKey?: pulumi.Input<string>;
    cohereApiKeyPlaintext?: pulumi.Input<string>;
}

export interface ModelServingConfigServedEntityExternalModelDatabricksModelServingConfig {
    databricksApiToken?: pulumi.Input<string>;
    databricksApiTokenPlaintext?: pulumi.Input<string>;
    databricksWorkspaceUrl: pulumi.Input<string>;
}

export interface ModelServingConfigServedEntityExternalModelGoogleCloudVertexAiConfig {
    privateKey?: pulumi.Input<string>;
    privateKeyPlaintext?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface ModelServingConfigServedEntityExternalModelOpenaiConfig {
    microsoftEntraClientId?: pulumi.Input<string>;
    microsoftEntraClientSecret?: pulumi.Input<string>;
    microsoftEntraClientSecretPlaintext?: pulumi.Input<string>;
    microsoftEntraTenantId?: pulumi.Input<string>;
    openaiApiBase?: pulumi.Input<string>;
    openaiApiKey?: pulumi.Input<string>;
    openaiApiKeyPlaintext?: pulumi.Input<string>;
    openaiApiType?: pulumi.Input<string>;
    openaiApiVersion?: pulumi.Input<string>;
    openaiDeploymentName?: pulumi.Input<string>;
    openaiOrganization?: pulumi.Input<string>;
}

export interface ModelServingConfigServedEntityExternalModelPalmConfig {
    palmApiKey?: pulumi.Input<string>;
    palmApiKeyPlaintext?: pulumi.Input<string>;
}

export interface ModelServingConfigServedModel {
    environmentVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    instanceProfileArn?: pulumi.Input<string>;
    maxProvisionedThroughput?: pulumi.Input<number>;
    minProvisionedThroughput?: pulumi.Input<number>;
    modelName: pulumi.Input<string>;
    modelVersion: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scaleToZeroEnabled?: pulumi.Input<boolean>;
    workloadSize?: pulumi.Input<string>;
    workloadType?: pulumi.Input<string>;
}

export interface ModelServingConfigTrafficConfig {
    routes?: pulumi.Input<pulumi.Input<inputs.ModelServingConfigTrafficConfigRoute>[]>;
}

export interface ModelServingConfigTrafficConfigRoute {
    servedModelName: pulumi.Input<string>;
    trafficPercentage: pulumi.Input<number>;
}

export interface ModelServingRateLimit {
    calls: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    renewalPeriod: pulumi.Input<string>;
}

export interface ModelServingTag {
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface MountAbfs {
    clientId: pulumi.Input<string>;
    clientSecretKey: pulumi.Input<string>;
    clientSecretScope: pulumi.Input<string>;
    containerName?: pulumi.Input<string>;
    directory?: pulumi.Input<string>;
    initializeFileSystem: pulumi.Input<boolean>;
    storageAccountName?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
}

export interface MountAdl {
    clientId: pulumi.Input<string>;
    clientSecretKey: pulumi.Input<string>;
    clientSecretScope: pulumi.Input<string>;
    directory?: pulumi.Input<string>;
    sparkConfPrefix?: pulumi.Input<string>;
    storageResourceName?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
}

export interface MountGs {
    bucketName: pulumi.Input<string>;
    serviceAccount?: pulumi.Input<string>;
}

export interface MountS3 {
    bucketName: pulumi.Input<string>;
    instanceProfile?: pulumi.Input<string>;
}

export interface MountWasb {
    authType: pulumi.Input<string>;
    containerName?: pulumi.Input<string>;
    directory?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    tokenSecretKey: pulumi.Input<string>;
    tokenSecretScope: pulumi.Input<string>;
}

export interface MwsCustomerManagedKeysAwsKeyInfo {
    keyAlias?: pulumi.Input<string>;
    keyArn: pulumi.Input<string>;
    keyRegion?: pulumi.Input<string>;
}

export interface MwsCustomerManagedKeysGcpKeyInfo {
    kmsKeyId: pulumi.Input<string>;
}

export interface MwsNetworkConnectivityConfigEgressConfig {
    defaultRules?: pulumi.Input<inputs.MwsNetworkConnectivityConfigEgressConfigDefaultRules>;
    targetRules?: pulumi.Input<inputs.MwsNetworkConnectivityConfigEgressConfigTargetRules>;
}

export interface MwsNetworkConnectivityConfigEgressConfigDefaultRules {
    awsStableIpRule?: pulumi.Input<inputs.MwsNetworkConnectivityConfigEgressConfigDefaultRulesAwsStableIpRule>;
    azureServiceEndpointRule?: pulumi.Input<inputs.MwsNetworkConnectivityConfigEgressConfigDefaultRulesAzureServiceEndpointRule>;
}

export interface MwsNetworkConnectivityConfigEgressConfigDefaultRulesAwsStableIpRule {
    cidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MwsNetworkConnectivityConfigEgressConfigDefaultRulesAzureServiceEndpointRule {
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    targetRegion?: pulumi.Input<string>;
    targetServices?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MwsNetworkConnectivityConfigEgressConfigTargetRules {
    azurePrivateEndpointRules?: pulumi.Input<pulumi.Input<inputs.MwsNetworkConnectivityConfigEgressConfigTargetRulesAzurePrivateEndpointRule>[]>;
}

export interface MwsNetworkConnectivityConfigEgressConfigTargetRulesAzurePrivateEndpointRule {
    connectionState?: pulumi.Input<string>;
    creationTime?: pulumi.Input<number>;
    deactivated?: pulumi.Input<boolean>;
    deactivatedAt?: pulumi.Input<number>;
    endpointName?: pulumi.Input<string>;
    groupId?: pulumi.Input<string>;
    networkConnectivityConfigId?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    ruleId?: pulumi.Input<string>;
    updatedTime?: pulumi.Input<number>;
}

export interface MwsNetworksErrorMessage {
    errorMessage?: pulumi.Input<string>;
    errorType?: pulumi.Input<string>;
}

export interface MwsNetworksGcpNetworkInfo {
    networkProjectId: pulumi.Input<string>;
    podIpRangeName: pulumi.Input<string>;
    serviceIpRangeName: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    subnetRegion: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
}

export interface MwsNetworksVpcEndpoints {
    dataplaneRelays: pulumi.Input<pulumi.Input<string>[]>;
    restApis: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MwsVpcEndpointGcpVpcEndpointInfo {
    endpointRegion: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    pscConnectionId?: pulumi.Input<string>;
    pscEndpointName: pulumi.Input<string>;
    serviceAttachmentId?: pulumi.Input<string>;
}

export interface MwsWorkspacesCloudResourceContainer {
    gcp: pulumi.Input<inputs.MwsWorkspacesCloudResourceContainerGcp>;
}

export interface MwsWorkspacesCloudResourceContainerGcp {
    projectId: pulumi.Input<string>;
}

export interface MwsWorkspacesExternalCustomerInfo {
    authoritativeUserEmail: pulumi.Input<string>;
    authoritativeUserFullName: pulumi.Input<string>;
    customerName: pulumi.Input<string>;
}

export interface MwsWorkspacesGcpManagedNetworkConfig {
    gkeClusterPodIpRange: pulumi.Input<string>;
    gkeClusterServiceIpRange: pulumi.Input<string>;
    subnetCidr: pulumi.Input<string>;
}

export interface MwsWorkspacesGkeConfig {
    connectivityType: pulumi.Input<string>;
    masterIpRange: pulumi.Input<string>;
}

export interface MwsWorkspacesToken {
    comment?: pulumi.Input<string>;
    lifetimeSeconds?: pulumi.Input<number>;
    tokenId?: pulumi.Input<string>;
    tokenValue?: pulumi.Input<string>;
}

export interface NotificationDestinationConfig {
    email?: pulumi.Input<inputs.NotificationDestinationConfigEmail>;
    genericWebhook?: pulumi.Input<inputs.NotificationDestinationConfigGenericWebhook>;
    microsoftTeams?: pulumi.Input<inputs.NotificationDestinationConfigMicrosoftTeams>;
    pagerduty?: pulumi.Input<inputs.NotificationDestinationConfigPagerduty>;
    slack?: pulumi.Input<inputs.NotificationDestinationConfigSlack>;
}

export interface NotificationDestinationConfigEmail {
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NotificationDestinationConfigGenericWebhook {
    password?: pulumi.Input<string>;
    passwordSet?: pulumi.Input<boolean>;
    url?: pulumi.Input<string>;
    urlSet?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
    usernameSet?: pulumi.Input<boolean>;
}

export interface NotificationDestinationConfigMicrosoftTeams {
    url?: pulumi.Input<string>;
    urlSet?: pulumi.Input<boolean>;
}

export interface NotificationDestinationConfigPagerduty {
    integrationKey?: pulumi.Input<string>;
    integrationKeySet?: pulumi.Input<boolean>;
}

export interface NotificationDestinationConfigSlack {
    url?: pulumi.Input<string>;
    urlSet?: pulumi.Input<boolean>;
}

export interface OnlineTableSpec {
    performFullCopy?: pulumi.Input<boolean>;
    pipelineId?: pulumi.Input<string>;
    primaryKeyColumns?: pulumi.Input<pulumi.Input<string>[]>;
    runContinuously?: pulumi.Input<inputs.OnlineTableSpecRunContinuously>;
    runTriggered?: pulumi.Input<inputs.OnlineTableSpecRunTriggered>;
    sourceTableFullName?: pulumi.Input<string>;
    timeseriesKey?: pulumi.Input<string>;
}

export interface OnlineTableSpecRunContinuously {
}

export interface OnlineTableSpecRunTriggered {
}

export interface OnlineTableStatus {
    continuousUpdateStatus?: pulumi.Input<inputs.OnlineTableStatusContinuousUpdateStatus>;
    detailedState?: pulumi.Input<string>;
    failedStatus?: pulumi.Input<inputs.OnlineTableStatusFailedStatus>;
    message?: pulumi.Input<string>;
    provisioningStatus?: pulumi.Input<inputs.OnlineTableStatusProvisioningStatus>;
    triggeredUpdateStatus?: pulumi.Input<inputs.OnlineTableStatusTriggeredUpdateStatus>;
}

export interface OnlineTableStatusContinuousUpdateStatus {
    initialPipelineSyncProgress?: pulumi.Input<inputs.OnlineTableStatusContinuousUpdateStatusInitialPipelineSyncProgress>;
    lastProcessedCommitVersion?: pulumi.Input<number>;
    timestamp?: pulumi.Input<string>;
}

export interface OnlineTableStatusContinuousUpdateStatusInitialPipelineSyncProgress {
    estimatedCompletionTimeSeconds?: pulumi.Input<number>;
    latestVersionCurrentlyProcessing?: pulumi.Input<number>;
    syncProgressCompletion?: pulumi.Input<number>;
    syncedRowCount?: pulumi.Input<number>;
    totalRowCount?: pulumi.Input<number>;
}

export interface OnlineTableStatusFailedStatus {
    lastProcessedCommitVersion?: pulumi.Input<number>;
    timestamp?: pulumi.Input<string>;
}

export interface OnlineTableStatusProvisioningStatus {
    initialPipelineSyncProgress?: pulumi.Input<inputs.OnlineTableStatusProvisioningStatusInitialPipelineSyncProgress>;
}

export interface OnlineTableStatusProvisioningStatusInitialPipelineSyncProgress {
    estimatedCompletionTimeSeconds?: pulumi.Input<number>;
    latestVersionCurrentlyProcessing?: pulumi.Input<number>;
    syncProgressCompletion?: pulumi.Input<number>;
    syncedRowCount?: pulumi.Input<number>;
    totalRowCount?: pulumi.Input<number>;
}

export interface OnlineTableStatusTriggeredUpdateStatus {
    lastProcessedCommitVersion?: pulumi.Input<number>;
    timestamp?: pulumi.Input<string>;
    triggeredUpdateProgress?: pulumi.Input<inputs.OnlineTableStatusTriggeredUpdateStatusTriggeredUpdateProgress>;
}

export interface OnlineTableStatusTriggeredUpdateStatusTriggeredUpdateProgress {
    estimatedCompletionTimeSeconds?: pulumi.Input<number>;
    latestVersionCurrentlyProcessing?: pulumi.Input<number>;
    syncProgressCompletion?: pulumi.Input<number>;
    syncedRowCount?: pulumi.Input<number>;
    totalRowCount?: pulumi.Input<number>;
}

export interface PermissionsAccessControl {
    groupName?: pulumi.Input<string>;
    permissionLevel?: pulumi.Input<string>;
    servicePrincipalName?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface PipelineCluster {
    applyPolicyDefaultValues?: pulumi.Input<boolean>;
    autoscale?: pulumi.Input<inputs.PipelineClusterAutoscale>;
    awsAttributes?: pulumi.Input<inputs.PipelineClusterAwsAttributes>;
    azureAttributes?: pulumi.Input<inputs.PipelineClusterAzureAttributes>;
    clusterLogConf?: pulumi.Input<inputs.PipelineClusterClusterLogConf>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    driverInstancePoolId?: pulumi.Input<string>;
    driverNodeTypeId?: pulumi.Input<string>;
    enableLocalDiskEncryption?: pulumi.Input<boolean>;
    gcpAttributes?: pulumi.Input<inputs.PipelineClusterGcpAttributes>;
    initScripts?: pulumi.Input<pulumi.Input<inputs.PipelineClusterInitScript>[]>;
    instancePoolId?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    nodeTypeId?: pulumi.Input<string>;
    numWorkers?: pulumi.Input<number>;
    policyId?: pulumi.Input<string>;
    sparkConf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sparkEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PipelineClusterAutoscale {
    maxWorkers: pulumi.Input<number>;
    minWorkers: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface PipelineClusterAwsAttributes {
    availability?: pulumi.Input<string>;
    ebsVolumeCount?: pulumi.Input<number>;
    ebsVolumeIops?: pulumi.Input<number>;
    ebsVolumeSize?: pulumi.Input<number>;
    ebsVolumeThroughput?: pulumi.Input<number>;
    ebsVolumeType?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    instanceProfileArn?: pulumi.Input<string>;
    spotBidPricePercent?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface PipelineClusterAzureAttributes {
    availability?: pulumi.Input<string>;
    firstOnDemand?: pulumi.Input<number>;
    logAnalyticsInfo?: pulumi.Input<inputs.PipelineClusterAzureAttributesLogAnalyticsInfo>;
    spotBidMaxPrice?: pulumi.Input<number>;
}

export interface PipelineClusterAzureAttributesLogAnalyticsInfo {
    logAnalyticsPrimaryKey?: pulumi.Input<string>;
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
}

export interface PipelineClusterClusterLogConf {
    dbfs?: pulumi.Input<inputs.PipelineClusterClusterLogConfDbfs>;
    s3?: pulumi.Input<inputs.PipelineClusterClusterLogConfS3>;
}

export interface PipelineClusterClusterLogConfDbfs {
    destination: pulumi.Input<string>;
}

export interface PipelineClusterClusterLogConfS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface PipelineClusterGcpAttributes {
    availability?: pulumi.Input<string>;
    googleServiceAccount?: pulumi.Input<string>;
    localSsdCount?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

export interface PipelineClusterInitScript {
    abfss?: pulumi.Input<inputs.PipelineClusterInitScriptAbfss>;
    /**
     * @deprecated For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.
     */
    dbfs?: pulumi.Input<inputs.PipelineClusterInitScriptDbfs>;
    file?: pulumi.Input<inputs.PipelineClusterInitScriptFile>;
    gcs?: pulumi.Input<inputs.PipelineClusterInitScriptGcs>;
    s3?: pulumi.Input<inputs.PipelineClusterInitScriptS3>;
    volumes?: pulumi.Input<inputs.PipelineClusterInitScriptVolumes>;
    workspace?: pulumi.Input<inputs.PipelineClusterInitScriptWorkspace>;
}

export interface PipelineClusterInitScriptAbfss {
    destination: pulumi.Input<string>;
}

export interface PipelineClusterInitScriptDbfs {
    destination: pulumi.Input<string>;
}

export interface PipelineClusterInitScriptFile {
    destination: pulumi.Input<string>;
}

export interface PipelineClusterInitScriptGcs {
    destination: pulumi.Input<string>;
}

export interface PipelineClusterInitScriptS3 {
    cannedAcl?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    enableEncryption?: pulumi.Input<boolean>;
    encryptionType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

export interface PipelineClusterInitScriptVolumes {
    destination: pulumi.Input<string>;
}

export interface PipelineClusterInitScriptWorkspace {
    destination: pulumi.Input<string>;
}

export interface PipelineDeployment {
    kind?: pulumi.Input<string>;
    metadataFilePath?: pulumi.Input<string>;
}

export interface PipelineFilters {
    excludes?: pulumi.Input<pulumi.Input<string>[]>;
    includes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PipelineGatewayDefinition {
    connectionId?: pulumi.Input<string>;
    connectionName?: pulumi.Input<string>;
    gatewayStorageCatalog?: pulumi.Input<string>;
    gatewayStorageName?: pulumi.Input<string>;
    gatewayStorageSchema?: pulumi.Input<string>;
}

export interface PipelineIngestionDefinition {
    connectionName?: pulumi.Input<string>;
    ingestionGatewayId?: pulumi.Input<string>;
    objects?: pulumi.Input<pulumi.Input<inputs.PipelineIngestionDefinitionObject>[]>;
    tableConfiguration?: pulumi.Input<inputs.PipelineIngestionDefinitionTableConfiguration>;
}

export interface PipelineIngestionDefinitionObject {
    report?: pulumi.Input<inputs.PipelineIngestionDefinitionObjectReport>;
    schema?: pulumi.Input<inputs.PipelineIngestionDefinitionObjectSchema>;
    table?: pulumi.Input<inputs.PipelineIngestionDefinitionObjectTable>;
}

export interface PipelineIngestionDefinitionObjectReport {
    destinationCatalog?: pulumi.Input<string>;
    destinationSchema?: pulumi.Input<string>;
    destinationTable?: pulumi.Input<string>;
    sourceUrl?: pulumi.Input<string>;
    tableConfiguration?: pulumi.Input<inputs.PipelineIngestionDefinitionObjectReportTableConfiguration>;
}

export interface PipelineIngestionDefinitionObjectReportTableConfiguration {
    primaryKeys?: pulumi.Input<pulumi.Input<string>[]>;
    salesforceIncludeFormulaFields?: pulumi.Input<boolean>;
    scdType?: pulumi.Input<string>;
    sequenceBies?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PipelineIngestionDefinitionObjectSchema {
    destinationCatalog?: pulumi.Input<string>;
    destinationSchema?: pulumi.Input<string>;
    sourceCatalog?: pulumi.Input<string>;
    sourceSchema?: pulumi.Input<string>;
    tableConfiguration?: pulumi.Input<inputs.PipelineIngestionDefinitionObjectSchemaTableConfiguration>;
}

export interface PipelineIngestionDefinitionObjectSchemaTableConfiguration {
    primaryKeys?: pulumi.Input<pulumi.Input<string>[]>;
    salesforceIncludeFormulaFields?: pulumi.Input<boolean>;
    scdType?: pulumi.Input<string>;
    sequenceBies?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PipelineIngestionDefinitionObjectTable {
    destinationCatalog?: pulumi.Input<string>;
    destinationSchema?: pulumi.Input<string>;
    destinationTable?: pulumi.Input<string>;
    sourceCatalog?: pulumi.Input<string>;
    sourceSchema?: pulumi.Input<string>;
    sourceTable?: pulumi.Input<string>;
    tableConfiguration?: pulumi.Input<inputs.PipelineIngestionDefinitionObjectTableTableConfiguration>;
}

export interface PipelineIngestionDefinitionObjectTableTableConfiguration {
    primaryKeys?: pulumi.Input<pulumi.Input<string>[]>;
    salesforceIncludeFormulaFields?: pulumi.Input<boolean>;
    scdType?: pulumi.Input<string>;
    sequenceBies?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PipelineIngestionDefinitionTableConfiguration {
    primaryKeys?: pulumi.Input<pulumi.Input<string>[]>;
    salesforceIncludeFormulaFields?: pulumi.Input<boolean>;
    scdType?: pulumi.Input<string>;
    sequenceBies?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PipelineLatestUpdate {
    creationTime?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    updateId?: pulumi.Input<string>;
}

export interface PipelineLibrary {
    file?: pulumi.Input<inputs.PipelineLibraryFile>;
    jar?: pulumi.Input<string>;
    maven?: pulumi.Input<inputs.PipelineLibraryMaven>;
    notebook?: pulumi.Input<inputs.PipelineLibraryNotebook>;
    /**
     * @deprecated The 'whl' field is deprecated
     */
    whl?: pulumi.Input<string>;
}

export interface PipelineLibraryFile {
    path?: pulumi.Input<string>;
}

export interface PipelineLibraryMaven {
    coordinates: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<string>[]>;
    repo?: pulumi.Input<string>;
}

export interface PipelineLibraryNotebook {
    path?: pulumi.Input<string>;
}

export interface PipelineNotification {
    alerts?: pulumi.Input<pulumi.Input<string>[]>;
    emailRecipients?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PipelineRestartWindow {
    daysOfWeeks?: pulumi.Input<pulumi.Input<string>[]>;
    startHour: pulumi.Input<number>;
    timeZoneId?: pulumi.Input<string>;
}

export interface PipelineTrigger {
    cron?: pulumi.Input<inputs.PipelineTriggerCron>;
    manual?: pulumi.Input<inputs.PipelineTriggerManual>;
}

export interface PipelineTriggerCron {
    quartzCronSchedule?: pulumi.Input<string>;
    timezoneId?: pulumi.Input<string>;
}

export interface PipelineTriggerManual {
}

export interface QualityMonitorCustomMetric {
    definition: pulumi.Input<string>;
    inputColumns: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    outputDataType: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface QualityMonitorDataClassificationConfig {
    enabled?: pulumi.Input<boolean>;
}

export interface QualityMonitorInferenceLog {
    granularities: pulumi.Input<pulumi.Input<string>[]>;
    labelCol?: pulumi.Input<string>;
    modelIdCol: pulumi.Input<string>;
    predictionCol: pulumi.Input<string>;
    predictionProbaCol?: pulumi.Input<string>;
    problemType: pulumi.Input<string>;
    timestampCol: pulumi.Input<string>;
}

export interface QualityMonitorNotifications {
    onFailure?: pulumi.Input<inputs.QualityMonitorNotificationsOnFailure>;
    onNewClassificationTagDetected?: pulumi.Input<inputs.QualityMonitorNotificationsOnNewClassificationTagDetected>;
}

export interface QualityMonitorNotificationsOnFailure {
    emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface QualityMonitorNotificationsOnNewClassificationTagDetected {
    emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface QualityMonitorSchedule {
    pauseStatus?: pulumi.Input<string>;
    quartzCronExpression: pulumi.Input<string>;
    timezoneId: pulumi.Input<string>;
}

export interface QualityMonitorSnapshot {
}

export interface QualityMonitorTimeSeries {
    granularities: pulumi.Input<pulumi.Input<string>[]>;
    timestampCol: pulumi.Input<string>;
}

export interface QueryParameter {
    dateRangeValue?: pulumi.Input<inputs.QueryParameterDateRangeValue>;
    dateValue?: pulumi.Input<inputs.QueryParameterDateValue>;
    enumValue?: pulumi.Input<inputs.QueryParameterEnumValue>;
    name: pulumi.Input<string>;
    numericValue?: pulumi.Input<inputs.QueryParameterNumericValue>;
    queryBackedValue?: pulumi.Input<inputs.QueryParameterQueryBackedValue>;
    textValue?: pulumi.Input<inputs.QueryParameterTextValue>;
    title?: pulumi.Input<string>;
}

export interface QueryParameterDateRangeValue {
    dateRangeValue?: pulumi.Input<inputs.QueryParameterDateRangeValueDateRangeValue>;
    dynamicDateRangeValue?: pulumi.Input<string>;
    precision?: pulumi.Input<string>;
    startDayOfWeek?: pulumi.Input<number>;
}

export interface QueryParameterDateRangeValueDateRangeValue {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface QueryParameterDateValue {
    dateValue?: pulumi.Input<string>;
    dynamicDateValue?: pulumi.Input<string>;
    precision?: pulumi.Input<string>;
}

export interface QueryParameterEnumValue {
    enumOptions?: pulumi.Input<string>;
    multiValuesOptions?: pulumi.Input<inputs.QueryParameterEnumValueMultiValuesOptions>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface QueryParameterEnumValueMultiValuesOptions {
    prefix?: pulumi.Input<string>;
    separator?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
}

export interface QueryParameterNumericValue {
    value: pulumi.Input<number>;
}

export interface QueryParameterQueryBackedValue {
    multiValuesOptions?: pulumi.Input<inputs.QueryParameterQueryBackedValueMultiValuesOptions>;
    queryId: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface QueryParameterQueryBackedValueMultiValuesOptions {
    prefix?: pulumi.Input<string>;
    separator?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
}

export interface QueryParameterTextValue {
    value: pulumi.Input<string>;
}

export interface RecipientIpAccessList {
    allowedIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RecipientPropertiesKvpairs {
    properties: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RecipientToken {
    activationUrl?: pulumi.Input<string>;
    createdAt?: pulumi.Input<number>;
    createdBy?: pulumi.Input<string>;
    expirationTime?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<number>;
    updatedBy?: pulumi.Input<string>;
}

export interface RepoSparseCheckout {
    patterns: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RestrictWorkspaceAdminsSettingRestrictWorkspaceAdmins {
    status: pulumi.Input<string>;
}

export interface SecretScopeKeyvaultMetadata {
    dnsName: pulumi.Input<string>;
    resourceId: pulumi.Input<string>;
}

export interface ShareObject {
    addedAt?: pulumi.Input<number>;
    addedBy?: pulumi.Input<string>;
    cdfEnabled?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    dataObjectType: pulumi.Input<string>;
    historyDataSharingStatus?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    partitions?: pulumi.Input<pulumi.Input<inputs.ShareObjectPartition>[]>;
    sharedAs?: pulumi.Input<string>;
    startVersion?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    stringSharedAs?: pulumi.Input<string>;
}

export interface ShareObjectPartition {
    values?: pulumi.Input<pulumi.Input<inputs.ShareObjectPartitionValue>[]>;
}

export interface ShareObjectPartitionValue {
    name: pulumi.Input<string>;
    op: pulumi.Input<string>;
    recipientPropertyKey?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SqlAlertOptions {
    column: pulumi.Input<string>;
    customBody?: pulumi.Input<string>;
    customSubject?: pulumi.Input<string>;
    emptyResultState?: pulumi.Input<string>;
    muted?: pulumi.Input<boolean>;
    op: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SqlEndpointChannel {
    dbsqlVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface SqlEndpointHealth {
    details?: pulumi.Input<string>;
    failureReason?: pulumi.Input<inputs.SqlEndpointHealthFailureReason>;
    message?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    summary?: pulumi.Input<string>;
}

export interface SqlEndpointHealthFailureReason {
    code?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
}

export interface SqlEndpointOdbcParams {
    hostname?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface SqlEndpointTags {
    customTags?: pulumi.Input<pulumi.Input<inputs.SqlEndpointTagsCustomTag>[]>;
}

export interface SqlEndpointTagsCustomTag {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SqlPermissionsPrivilegeAssignment {
    principal: pulumi.Input<string>;
    privileges: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SqlQueryParameter {
    date?: pulumi.Input<inputs.SqlQueryParameterDate>;
    dateRange?: pulumi.Input<inputs.SqlQueryParameterDateRange>;
    datetime?: pulumi.Input<inputs.SqlQueryParameterDatetime>;
    datetimeRange?: pulumi.Input<inputs.SqlQueryParameterDatetimeRange>;
    datetimesec?: pulumi.Input<inputs.SqlQueryParameterDatetimesec>;
    datetimesecRange?: pulumi.Input<inputs.SqlQueryParameterDatetimesecRange>;
    enum?: pulumi.Input<inputs.SqlQueryParameterEnum>;
    name: pulumi.Input<string>;
    number?: pulumi.Input<inputs.SqlQueryParameterNumber>;
    query?: pulumi.Input<inputs.SqlQueryParameterQuery>;
    text?: pulumi.Input<inputs.SqlQueryParameterText>;
    title?: pulumi.Input<string>;
}

export interface SqlQueryParameterDate {
    value: pulumi.Input<string>;
}

export interface SqlQueryParameterDateRange {
    range?: pulumi.Input<inputs.SqlQueryParameterDateRangeRange>;
    value?: pulumi.Input<string>;
}

export interface SqlQueryParameterDateRangeRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface SqlQueryParameterDatetime {
    value: pulumi.Input<string>;
}

export interface SqlQueryParameterDatetimeRange {
    range?: pulumi.Input<inputs.SqlQueryParameterDatetimeRangeRange>;
    value?: pulumi.Input<string>;
}

export interface SqlQueryParameterDatetimeRangeRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface SqlQueryParameterDatetimesec {
    value: pulumi.Input<string>;
}

export interface SqlQueryParameterDatetimesecRange {
    range?: pulumi.Input<inputs.SqlQueryParameterDatetimesecRangeRange>;
    value?: pulumi.Input<string>;
}

export interface SqlQueryParameterDatetimesecRangeRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface SqlQueryParameterEnum {
    multiple?: pulumi.Input<inputs.SqlQueryParameterEnumMultiple>;
    options: pulumi.Input<pulumi.Input<string>[]>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SqlQueryParameterEnumMultiple {
    prefix?: pulumi.Input<string>;
    separator: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
}

export interface SqlQueryParameterNumber {
    value: pulumi.Input<number>;
}

export interface SqlQueryParameterQuery {
    multiple?: pulumi.Input<inputs.SqlQueryParameterQueryMultiple>;
    queryId: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SqlQueryParameterQueryMultiple {
    prefix?: pulumi.Input<string>;
    separator: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
}

export interface SqlQueryParameterText {
    value: pulumi.Input<string>;
}

export interface SqlQuerySchedule {
    continuous?: pulumi.Input<inputs.SqlQueryScheduleContinuous>;
    daily?: pulumi.Input<inputs.SqlQueryScheduleDaily>;
    weekly?: pulumi.Input<inputs.SqlQueryScheduleWeekly>;
}

export interface SqlQueryScheduleContinuous {
    intervalSeconds: pulumi.Input<number>;
    untilDate?: pulumi.Input<string>;
}

export interface SqlQueryScheduleDaily {
    intervalDays: pulumi.Input<number>;
    timeOfDay: pulumi.Input<string>;
    untilDate?: pulumi.Input<string>;
}

export interface SqlQueryScheduleWeekly {
    dayOfWeek: pulumi.Input<string>;
    intervalWeeks: pulumi.Input<number>;
    timeOfDay: pulumi.Input<string>;
    untilDate?: pulumi.Input<string>;
}

export interface SqlTableColumn {
    comment?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nullable?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
    typeJson?: pulumi.Input<string>;
}

export interface SqlWidgetParameter {
    mapTo?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SqlWidgetPosition {
    autoHeight?: pulumi.Input<boolean>;
    posX?: pulumi.Input<number>;
    posY?: pulumi.Input<number>;
    sizeX: pulumi.Input<number>;
    sizeY: pulumi.Input<number>;
}

export interface StorageCredentialAwsIamRole {
    externalId?: pulumi.Input<string>;
    roleArn: pulumi.Input<string>;
    unityCatalogIamArn?: pulumi.Input<string>;
}

export interface StorageCredentialAzureManagedIdentity {
    accessConnectorId: pulumi.Input<string>;
    credentialId?: pulumi.Input<string>;
    managedIdentityId?: pulumi.Input<string>;
}

export interface StorageCredentialAzureServicePrincipal {
    applicationId: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    directoryId: pulumi.Input<string>;
}

export interface StorageCredentialCloudflareApiToken {
    accessKeyId: pulumi.Input<string>;
    accountId: pulumi.Input<string>;
    secretAccessKey: pulumi.Input<string>;
}

export interface StorageCredentialDatabricksGcpServiceAccount {
    credentialId?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
}

export interface StorageCredentialGcpServiceAccountKey {
    email: pulumi.Input<string>;
    privateKey: pulumi.Input<string>;
    privateKeyId: pulumi.Input<string>;
}

export interface TableColumn {
    comment?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nullable?: pulumi.Input<boolean>;
    partitionIndex?: pulumi.Input<number>;
    position: pulumi.Input<number>;
    typeIntervalType?: pulumi.Input<string>;
    typeJson?: pulumi.Input<string>;
    typeName: pulumi.Input<string>;
    typePrecision?: pulumi.Input<number>;
    typeScale?: pulumi.Input<number>;
    typeText: pulumi.Input<string>;
}

export interface VectorSearchEndpointEndpointStatus {
    message?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface VectorSearchIndexDeltaSyncIndexSpec {
    embeddingSourceColumns?: pulumi.Input<pulumi.Input<inputs.VectorSearchIndexDeltaSyncIndexSpecEmbeddingSourceColumn>[]>;
    embeddingVectorColumns?: pulumi.Input<pulumi.Input<inputs.VectorSearchIndexDeltaSyncIndexSpecEmbeddingVectorColumn>[]>;
    embeddingWritebackTable?: pulumi.Input<string>;
    pipelineId?: pulumi.Input<string>;
    pipelineType?: pulumi.Input<string>;
    sourceTable?: pulumi.Input<string>;
}

export interface VectorSearchIndexDeltaSyncIndexSpecEmbeddingSourceColumn {
    embeddingModelEndpointName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface VectorSearchIndexDeltaSyncIndexSpecEmbeddingVectorColumn {
    embeddingDimension?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface VectorSearchIndexDirectAccessIndexSpec {
    embeddingSourceColumns?: pulumi.Input<pulumi.Input<inputs.VectorSearchIndexDirectAccessIndexSpecEmbeddingSourceColumn>[]>;
    embeddingVectorColumns?: pulumi.Input<pulumi.Input<inputs.VectorSearchIndexDirectAccessIndexSpecEmbeddingVectorColumn>[]>;
    schemaJson?: pulumi.Input<string>;
}

export interface VectorSearchIndexDirectAccessIndexSpecEmbeddingSourceColumn {
    embeddingModelEndpointName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface VectorSearchIndexDirectAccessIndexSpecEmbeddingVectorColumn {
    embeddingDimension?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface VectorSearchIndexStatus {
    indexUrl?: pulumi.Input<string>;
    indexedRowCount?: pulumi.Input<number>;
    message?: pulumi.Input<string>;
    ready?: pulumi.Input<boolean>;
}
