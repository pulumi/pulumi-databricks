// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * To work with external tables, Unity Catalog introduces two new objects to access and work with external cloud storage:
 *
 * - databricks.StorageCredential represent authentication methods to access cloud storage (e.g. an IAM role for Amazon S3 or a service principal for Azure Storage). Storage credentials are access-controlled to determine which users can use the credential.
 * - `databricks.ExternalLocation` are objects that combine a cloud storage path with a Storage Credential that can be used to access the location.
 *
 * > This resource can only be used with a workspace-level provider!
 *
 * ## Example Usage
 *
 * For AWS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const external = new databricks.StorageCredential("external", {
 *     name: externalDataAccess.name,
 *     awsIamRole: {
 *         roleArn: externalDataAccess.arn,
 *     },
 *     comment: "Managed by TF",
 * });
 * const some = new databricks.ExternalLocation("some", {
 *     name: "external",
 *     url: `s3://${externalAwsS3Bucket.id}/some`,
 *     credentialName: external.id,
 *     comment: "Managed by TF",
 * });
 * const someGrants = new databricks.Grants("some", {
 *     externalLocation: some.id,
 *     grants: [{
 *         principal: "Data Engineers",
 *         privileges: [
 *             "CREATE_EXTERNAL_TABLE",
 *             "READ_FILES",
 *         ],
 *     }],
 * });
 * ```
 *
 * For Azure
 *
 * ## Import
 *
 * This resource can be imported by `name`:
 *
 * hcl
 *
 * import {
 *
 *   to = databricks_external_location.this
 *
 *   id = "<name>"
 *
 * }
 *
 * Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
 *
 * bash
 *
 * ```sh
 * $ pulumi import databricks:index/externalLocation:ExternalLocation this <name>
 * ```
 */
export class ExternalLocation extends pulumi.CustomResource {
    /**
     * Get an existing ExternalLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalLocationState, opts?: pulumi.CustomResourceOptions): ExternalLocation {
        return new ExternalLocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/externalLocation:ExternalLocation';

    /**
     * Returns true if the given object is an instance of ExternalLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalLocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalLocation.__pulumiType;
    }

    declare public /*out*/ readonly browseOnly: pulumi.Output<boolean>;
    /**
     * User-supplied free-form text.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Time at which this external location was created, in epoch milliseconds.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<number>;
    /**
     * Username of external location creator.
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * Unique ID of the location's storage credential.
     */
    declare public /*out*/ readonly credentialId: pulumi.Output<string>;
    /**
     * Name of the databricks.StorageCredential to use with this external location.
     */
    declare public readonly credentialName: pulumi.Output<string>;
    /**
     * indicates if managed file events are enabled for this external location.  Requires `fileEventQueue` block.
     */
    declare public readonly enableFileEvents: pulumi.Output<boolean | undefined>;
    declare public readonly encryptionDetails: pulumi.Output<outputs.ExternalLocationEncryptionDetails | undefined>;
    /**
     * Indicates whether fallback mode is enabled for this external location. When fallback mode is enabled (disabled by default), the access to the location falls back to cluster credentials if UC credentials are not sufficient.
     */
    declare public readonly fallback: pulumi.Output<boolean | undefined>;
    declare public readonly fileEventQueue: pulumi.Output<outputs.ExternalLocationFileEventQueue | undefined>;
    /**
     * Destroy external location regardless of its dependents.
     */
    declare public readonly forceDestroy: pulumi.Output<boolean | undefined>;
    /**
     * Update external location regardless of its dependents.
     */
    declare public readonly forceUpdate: pulumi.Output<boolean | undefined>;
    /**
     * Whether the external location is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the external location to `ISOLATION_MODE_ISOLATED` will automatically allow access from the current workspace.
     */
    declare public readonly isolationMode: pulumi.Output<string>;
    declare public readonly metastoreId: pulumi.Output<string>;
    /**
     * Name of External Location, which must be unique within the databricks_metastore. Change forces creation of a new resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Username/groupname/sp applicationId of the external location owner.
     */
    declare public readonly owner: pulumi.Output<string>;
    /**
     * Indicates whether the external location is read-only.
     */
    declare public readonly readOnly: pulumi.Output<boolean | undefined>;
    /**
     * Suppress validation errors if any & force save the external location
     */
    declare public readonly skipValidation: pulumi.Output<boolean | undefined>;
    /**
     * Time at which external location this was last modified, in epoch milliseconds.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<number>;
    /**
     * Username of user who last modified the external location.
     */
    declare public /*out*/ readonly updatedBy: pulumi.Output<string>;
    /**
     * Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
     */
    declare public readonly url: pulumi.Output<string>;

    /**
     * Create a ExternalLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalLocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalLocationArgs | ExternalLocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalLocationState | undefined;
            resourceInputs["browseOnly"] = state?.browseOnly;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["credentialId"] = state?.credentialId;
            resourceInputs["credentialName"] = state?.credentialName;
            resourceInputs["enableFileEvents"] = state?.enableFileEvents;
            resourceInputs["encryptionDetails"] = state?.encryptionDetails;
            resourceInputs["fallback"] = state?.fallback;
            resourceInputs["fileEventQueue"] = state?.fileEventQueue;
            resourceInputs["forceDestroy"] = state?.forceDestroy;
            resourceInputs["forceUpdate"] = state?.forceUpdate;
            resourceInputs["isolationMode"] = state?.isolationMode;
            resourceInputs["metastoreId"] = state?.metastoreId;
            resourceInputs["name"] = state?.name;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["readOnly"] = state?.readOnly;
            resourceInputs["skipValidation"] = state?.skipValidation;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["updatedBy"] = state?.updatedBy;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as ExternalLocationArgs | undefined;
            if (args?.credentialName === undefined && !opts.urn) {
                throw new Error("Missing required property 'credentialName'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["comment"] = args?.comment;
            resourceInputs["credentialName"] = args?.credentialName;
            resourceInputs["enableFileEvents"] = args?.enableFileEvents;
            resourceInputs["encryptionDetails"] = args?.encryptionDetails;
            resourceInputs["fallback"] = args?.fallback;
            resourceInputs["fileEventQueue"] = args?.fileEventQueue;
            resourceInputs["forceDestroy"] = args?.forceDestroy;
            resourceInputs["forceUpdate"] = args?.forceUpdate;
            resourceInputs["isolationMode"] = args?.isolationMode;
            resourceInputs["metastoreId"] = args?.metastoreId;
            resourceInputs["name"] = args?.name;
            resourceInputs["owner"] = args?.owner;
            resourceInputs["readOnly"] = args?.readOnly;
            resourceInputs["skipValidation"] = args?.skipValidation;
            resourceInputs["url"] = args?.url;
            resourceInputs["browseOnly"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["credentialId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalLocation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalLocation resources.
 */
export interface ExternalLocationState {
    browseOnly?: pulumi.Input<boolean>;
    /**
     * User-supplied free-form text.
     */
    comment?: pulumi.Input<string>;
    /**
     * Time at which this external location was created, in epoch milliseconds.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * Username of external location creator.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Unique ID of the location's storage credential.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * Name of the databricks.StorageCredential to use with this external location.
     */
    credentialName?: pulumi.Input<string>;
    /**
     * indicates if managed file events are enabled for this external location.  Requires `fileEventQueue` block.
     */
    enableFileEvents?: pulumi.Input<boolean>;
    encryptionDetails?: pulumi.Input<inputs.ExternalLocationEncryptionDetails>;
    /**
     * Indicates whether fallback mode is enabled for this external location. When fallback mode is enabled (disabled by default), the access to the location falls back to cluster credentials if UC credentials are not sufficient.
     */
    fallback?: pulumi.Input<boolean>;
    fileEventQueue?: pulumi.Input<inputs.ExternalLocationFileEventQueue>;
    /**
     * Destroy external location regardless of its dependents.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * Update external location regardless of its dependents.
     */
    forceUpdate?: pulumi.Input<boolean>;
    /**
     * Whether the external location is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the external location to `ISOLATION_MODE_ISOLATED` will automatically allow access from the current workspace.
     */
    isolationMode?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    /**
     * Name of External Location, which must be unique within the databricks_metastore. Change forces creation of a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Username/groupname/sp applicationId of the external location owner.
     */
    owner?: pulumi.Input<string>;
    /**
     * Indicates whether the external location is read-only.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Suppress validation errors if any & force save the external location
     */
    skipValidation?: pulumi.Input<boolean>;
    /**
     * Time at which external location this was last modified, in epoch milliseconds.
     */
    updatedAt?: pulumi.Input<number>;
    /**
     * Username of user who last modified the external location.
     */
    updatedBy?: pulumi.Input<string>;
    /**
     * Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExternalLocation resource.
 */
export interface ExternalLocationArgs {
    /**
     * User-supplied free-form text.
     */
    comment?: pulumi.Input<string>;
    /**
     * Name of the databricks.StorageCredential to use with this external location.
     */
    credentialName: pulumi.Input<string>;
    /**
     * indicates if managed file events are enabled for this external location.  Requires `fileEventQueue` block.
     */
    enableFileEvents?: pulumi.Input<boolean>;
    encryptionDetails?: pulumi.Input<inputs.ExternalLocationEncryptionDetails>;
    /**
     * Indicates whether fallback mode is enabled for this external location. When fallback mode is enabled (disabled by default), the access to the location falls back to cluster credentials if UC credentials are not sufficient.
     */
    fallback?: pulumi.Input<boolean>;
    fileEventQueue?: pulumi.Input<inputs.ExternalLocationFileEventQueue>;
    /**
     * Destroy external location regardless of its dependents.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * Update external location regardless of its dependents.
     */
    forceUpdate?: pulumi.Input<boolean>;
    /**
     * Whether the external location is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the external location to `ISOLATION_MODE_ISOLATED` will automatically allow access from the current workspace.
     */
    isolationMode?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    /**
     * Name of External Location, which must be unique within the databricks_metastore. Change forces creation of a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Username/groupname/sp applicationId of the external location owner.
     */
    owner?: pulumi.Input<string>;
    /**
     * Indicates whether the external location is read-only.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Suppress validation errors if any & force save the external location
     */
    skipValidation?: pulumi.Input<boolean>;
    /**
     * Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
     */
    url: pulumi.Input<string>;
}
