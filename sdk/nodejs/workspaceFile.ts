// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * The workspace file resource can be imported using workspace file path
 *
 *  bash
 *
 * ```sh
 * $ pulumi import databricks:index/workspaceFile:WorkspaceFile this /path/to/file
 * ```
 */
export class WorkspaceFile extends pulumi.CustomResource {
    /**
     * Get an existing WorkspaceFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceFileState, opts?: pulumi.CustomResourceOptions): WorkspaceFile {
        return new WorkspaceFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/workspaceFile:WorkspaceFile';

    /**
     * Returns true if the given object is an instance of WorkspaceFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkspaceFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceFile.__pulumiType;
    }

    public readonly contentBase64!: pulumi.Output<string | undefined>;
    public readonly md5!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier for a workspace file
     */
    public readonly objectId!: pulumi.Output<number>;
    /**
     * The absolute path of the workspace file, beginning with "/", e.g. "/Demo".
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Path to file on local filesystem. Conflicts with `contentBase64`.
     */
    public readonly source!: pulumi.Output<string | undefined>;
    /**
     * Routable URL of the workspace file
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * path on Workspace File System (WSFS) in form of `/Workspace` + `path`
     */
    public /*out*/ readonly workspacePath!: pulumi.Output<string>;

    /**
     * Create a WorkspaceFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspaceFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceFileArgs | WorkspaceFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkspaceFileState | undefined;
            resourceInputs["contentBase64"] = state ? state.contentBase64 : undefined;
            resourceInputs["md5"] = state ? state.md5 : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["workspacePath"] = state ? state.workspacePath : undefined;
        } else {
            const args = argsOrState as WorkspaceFileArgs | undefined;
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["contentBase64"] = args ? args.contentBase64 : undefined;
            resourceInputs["md5"] = args ? args.md5 : undefined;
            resourceInputs["objectId"] = args ? args.objectId : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["url"] = undefined /*out*/;
            resourceInputs["workspacePath"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkspaceFile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkspaceFile resources.
 */
export interface WorkspaceFileState {
    contentBase64?: pulumi.Input<string>;
    md5?: pulumi.Input<string>;
    /**
     * Unique identifier for a workspace file
     */
    objectId?: pulumi.Input<number>;
    /**
     * The absolute path of the workspace file, beginning with "/", e.g. "/Demo".
     */
    path?: pulumi.Input<string>;
    /**
     * Path to file on local filesystem. Conflicts with `contentBase64`.
     */
    source?: pulumi.Input<string>;
    /**
     * Routable URL of the workspace file
     */
    url?: pulumi.Input<string>;
    /**
     * path on Workspace File System (WSFS) in form of `/Workspace` + `path`
     */
    workspacePath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkspaceFile resource.
 */
export interface WorkspaceFileArgs {
    contentBase64?: pulumi.Input<string>;
    md5?: pulumi.Input<string>;
    /**
     * Unique identifier for a workspace file
     */
    objectId?: pulumi.Input<number>;
    /**
     * The absolute path of the workspace file, beginning with "/", e.g. "/Demo".
     */
    path: pulumi.Input<string>;
    /**
     * Path to file on local filesystem. Conflicts with `contentBase64`.
     */
    source?: pulumi.Input<string>;
}
