// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Network policies control which network destinations can be accessed from the Databricks environment.
 *
 * Each Databricks account includes a default policy named `default-policy`. This policy is:
 *
 * - Associated with any workspace lacking an explicit network policy assignment
 * - Automatically associated with each newly created workspace
 * - Reserved and cannot be deleted, but can be updated to customize the default network access rules for your account
 *
 * The `default-policy` provides a baseline security configuration that ensures all workspaces have network access controls in place.
 *
 * > **Note** This resource can only be used with an account-level provider!
 *
 * ## Import
 *
 * As of Pulumi v1.5, resources can be imported through configuration.
 *
 * hcl
 *
 * import {
 *
 *   id = network_policy_id
 *
 *   to = databricks_account_network_policy.this
 *
 * }
 *
 * If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
 *
 * ```sh
 * $ pulumi import databricks:index/accountNetworkPolicy:AccountNetworkPolicy databricks_account_network_policy network_policy_id
 * ```
 */
export class AccountNetworkPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AccountNetworkPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountNetworkPolicyState, opts?: pulumi.CustomResourceOptions): AccountNetworkPolicy {
        return new AccountNetworkPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/accountNetworkPolicy:AccountNetworkPolicy';

    /**
     * Returns true if the given object is an instance of AccountNetworkPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountNetworkPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountNetworkPolicy.__pulumiType;
    }

    /**
     * The associated account ID for this Network Policy object
     */
    public readonly accountId!: pulumi.Output<string | undefined>;
    /**
     * The network policies applying for egress traffic
     */
    public readonly egress!: pulumi.Output<outputs.AccountNetworkPolicyEgress | undefined>;
    /**
     * The unique identifier for the network policy
     */
    public readonly networkPolicyId!: pulumi.Output<string | undefined>;

    /**
     * Create a AccountNetworkPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AccountNetworkPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountNetworkPolicyArgs | AccountNetworkPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountNetworkPolicyState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["egress"] = state ? state.egress : undefined;
            resourceInputs["networkPolicyId"] = state ? state.networkPolicyId : undefined;
        } else {
            const args = argsOrState as AccountNetworkPolicyArgs | undefined;
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["egress"] = args ? args.egress : undefined;
            resourceInputs["networkPolicyId"] = args ? args.networkPolicyId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountNetworkPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountNetworkPolicy resources.
 */
export interface AccountNetworkPolicyState {
    /**
     * The associated account ID for this Network Policy object
     */
    accountId?: pulumi.Input<string>;
    /**
     * The network policies applying for egress traffic
     */
    egress?: pulumi.Input<inputs.AccountNetworkPolicyEgress>;
    /**
     * The unique identifier for the network policy
     */
    networkPolicyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountNetworkPolicy resource.
 */
export interface AccountNetworkPolicyArgs {
    /**
     * The associated account ID for this Network Policy object
     */
    accountId?: pulumi.Input<string>;
    /**
     * The network policies applying for egress traffic
     */
    egress?: pulumi.Input<inputs.AccountNetworkPolicyEgress>;
    /**
     * The unique identifier for the network policy
     */
    networkPolicyId?: pulumi.Input<string>;
}
