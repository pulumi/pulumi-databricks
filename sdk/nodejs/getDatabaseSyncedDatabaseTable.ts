// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can be used to get a single Synced Database Table.
 *
 * ## Example Usage
 *
 * Referring to a Database Instance by name:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const _this = databricks.getDatabaseSyncedDatabaseTable({
 *     name: "my_database_catalog.public.synced_table",
 * });
 * ```
 */
export function getDatabaseSyncedDatabaseTable(args: GetDatabaseSyncedDatabaseTableArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseSyncedDatabaseTableResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("databricks:index/getDatabaseSyncedDatabaseTable:getDatabaseSyncedDatabaseTable", {
        "databaseInstanceName": args.databaseInstanceName,
        "logicalDatabaseName": args.logicalDatabaseName,
        "name": args.name,
        "spec": args.spec,
        "workspaceId": args.workspaceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatabaseSyncedDatabaseTable.
 */
export interface GetDatabaseSyncedDatabaseTableArgs {
    /**
     * (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
     * This is optional when creating synced database tables in registered catalogs. If this field is specified
     * when creating synced database tables in registered catalogs, the database instance name MUST
     * match that of the registered catalog (or the request will be rejected)
     */
    databaseInstanceName?: string;
    /**
     * (string) - Target Postgres database object (logical database) name for this table.
     */
    logicalDatabaseName?: string;
    /**
     * Full three-part (catalog, schema, table) name of the table
     */
    name: string;
    /**
     * (SyncedTableSpec)
     */
    spec?: inputs.GetDatabaseSyncedDatabaseTableSpec;
    /**
     * Workspace ID of the resource
     */
    workspaceId?: string;
}

/**
 * A collection of values returned by getDatabaseSyncedDatabaseTable.
 */
export interface GetDatabaseSyncedDatabaseTableResult {
    /**
     * (SyncedTableStatus) - Synced Table data synchronization status
     */
    readonly dataSynchronizationStatus: outputs.GetDatabaseSyncedDatabaseTableDataSynchronizationStatus;
    /**
     * (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
     * This is optional when creating synced database tables in registered catalogs. If this field is specified
     * when creating synced database tables in registered catalogs, the database instance name MUST
     * match that of the registered catalog (or the request will be rejected)
     */
    readonly databaseInstanceName: string;
    /**
     * (string) - The name of the database instance that this table is registered to. This field is always returned, and for
     * tables inside database catalogs is inferred database instance associated with the catalog
     */
    readonly effectiveDatabaseInstanceName: string;
    /**
     * (string) - The name of the logical database that this table is registered to
     */
    readonly effectiveLogicalDatabaseName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * (string) - Target Postgres database object (logical database) name for this table.
     */
    readonly logicalDatabaseName: string;
    /**
     * (string) - Full three-part (catalog, schema, table) name of the table
     */
    readonly name: string;
    /**
     * (SyncedTableSpec)
     */
    readonly spec?: outputs.GetDatabaseSyncedDatabaseTableSpec;
    /**
     * (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
     * state of the data synchronization pipeline (i.e. the table may be in "ACTIVE" but the pipeline
     * may be in "PROVISIONING" as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
     */
    readonly unityCatalogProvisioningState: string;
    readonly workspaceId?: string;
}
/**
 * This data source can be used to get a single Synced Database Table.
 *
 * ## Example Usage
 *
 * Referring to a Database Instance by name:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as databricks from "@pulumi/databricks";
 *
 * const _this = databricks.getDatabaseSyncedDatabaseTable({
 *     name: "my_database_catalog.public.synced_table",
 * });
 * ```
 */
export function getDatabaseSyncedDatabaseTableOutput(args: GetDatabaseSyncedDatabaseTableOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDatabaseSyncedDatabaseTableResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("databricks:index/getDatabaseSyncedDatabaseTable:getDatabaseSyncedDatabaseTable", {
        "databaseInstanceName": args.databaseInstanceName,
        "logicalDatabaseName": args.logicalDatabaseName,
        "name": args.name,
        "spec": args.spec,
        "workspaceId": args.workspaceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatabaseSyncedDatabaseTable.
 */
export interface GetDatabaseSyncedDatabaseTableOutputArgs {
    /**
     * (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
     * This is optional when creating synced database tables in registered catalogs. If this field is specified
     * when creating synced database tables in registered catalogs, the database instance name MUST
     * match that of the registered catalog (or the request will be rejected)
     */
    databaseInstanceName?: pulumi.Input<string>;
    /**
     * (string) - Target Postgres database object (logical database) name for this table.
     */
    logicalDatabaseName?: pulumi.Input<string>;
    /**
     * Full three-part (catalog, schema, table) name of the table
     */
    name: pulumi.Input<string>;
    /**
     * (SyncedTableSpec)
     */
    spec?: pulumi.Input<inputs.GetDatabaseSyncedDatabaseTableSpecArgs>;
    /**
     * Workspace ID of the resource
     */
    workspaceId?: pulumi.Input<string>;
}
