# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSparkVersionResult',
    'AwaitableGetSparkVersionResult',
    'get_spark_version',
    'get_spark_version_output',
]

@pulumi.output_type
class GetSparkVersionResult:
    """
    A collection of values returned by getSparkVersion.
    """
    def __init__(__self__, beta=None, genomics=None, gpu=None, graviton=None, id=None, latest=None, long_term_support=None, ml=None, photon=None, scala=None, spark_version=None):
        if beta and not isinstance(beta, bool):
            raise TypeError("Expected argument 'beta' to be a bool")
        pulumi.set(__self__, "beta", beta)
        if genomics and not isinstance(genomics, bool):
            raise TypeError("Expected argument 'genomics' to be a bool")
        pulumi.set(__self__, "genomics", genomics)
        if gpu and not isinstance(gpu, bool):
            raise TypeError("Expected argument 'gpu' to be a bool")
        pulumi.set(__self__, "gpu", gpu)
        if graviton and not isinstance(graviton, bool):
            raise TypeError("Expected argument 'graviton' to be a bool")
        pulumi.set(__self__, "graviton", graviton)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if latest and not isinstance(latest, bool):
            raise TypeError("Expected argument 'latest' to be a bool")
        pulumi.set(__self__, "latest", latest)
        if long_term_support and not isinstance(long_term_support, bool):
            raise TypeError("Expected argument 'long_term_support' to be a bool")
        pulumi.set(__self__, "long_term_support", long_term_support)
        if ml and not isinstance(ml, bool):
            raise TypeError("Expected argument 'ml' to be a bool")
        pulumi.set(__self__, "ml", ml)
        if photon and not isinstance(photon, bool):
            raise TypeError("Expected argument 'photon' to be a bool")
        pulumi.set(__self__, "photon", photon)
        if scala and not isinstance(scala, str):
            raise TypeError("Expected argument 'scala' to be a str")
        pulumi.set(__self__, "scala", scala)
        if spark_version and not isinstance(spark_version, str):
            raise TypeError("Expected argument 'spark_version' to be a str")
        pulumi.set(__self__, "spark_version", spark_version)

    @property
    @pulumi.getter
    def beta(self) -> Optional[bool]:
        return pulumi.get(self, "beta")

    @property
    @pulumi.getter
    def genomics(self) -> Optional[bool]:
        return pulumi.get(self, "genomics")

    @property
    @pulumi.getter
    def gpu(self) -> Optional[bool]:
        return pulumi.get(self, "gpu")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Not required anymore - it's automatically enabled on the Graviton-based node types""")
    def graviton(self) -> Optional[bool]:
        return pulumi.get(self, "graviton")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latest(self) -> Optional[bool]:
        return pulumi.get(self, "latest")

    @property
    @pulumi.getter(name="longTermSupport")
    def long_term_support(self) -> Optional[bool]:
        return pulumi.get(self, "long_term_support")

    @property
    @pulumi.getter
    def ml(self) -> Optional[bool]:
        return pulumi.get(self, "ml")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Specify runtime_engine=\"PHOTON\" in the cluster configuration""")
    def photon(self) -> Optional[bool]:
        return pulumi.get(self, "photon")

    @property
    @pulumi.getter
    def scala(self) -> Optional[str]:
        return pulumi.get(self, "scala")

    @property
    @pulumi.getter(name="sparkVersion")
    def spark_version(self) -> Optional[str]:
        return pulumi.get(self, "spark_version")


class AwaitableGetSparkVersionResult(GetSparkVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSparkVersionResult(
            beta=self.beta,
            genomics=self.genomics,
            gpu=self.gpu,
            graviton=self.graviton,
            id=self.id,
            latest=self.latest,
            long_term_support=self.long_term_support,
            ml=self.ml,
            photon=self.photon,
            scala=self.scala,
            spark_version=self.spark_version)


def get_spark_version(beta: Optional[bool] = None,
                      genomics: Optional[bool] = None,
                      gpu: Optional[bool] = None,
                      graviton: Optional[bool] = None,
                      id: Optional[str] = None,
                      latest: Optional[bool] = None,
                      long_term_support: Optional[bool] = None,
                      ml: Optional[bool] = None,
                      photon: Optional[bool] = None,
                      scala: Optional[str] = None,
                      spark_version: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSparkVersionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['beta'] = beta
    __args__['genomics'] = genomics
    __args__['gpu'] = gpu
    __args__['graviton'] = graviton
    __args__['id'] = id
    __args__['latest'] = latest
    __args__['longTermSupport'] = long_term_support
    __args__['ml'] = ml
    __args__['photon'] = photon
    __args__['scala'] = scala
    __args__['sparkVersion'] = spark_version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('databricks:index/getSparkVersion:getSparkVersion', __args__, opts=opts, typ=GetSparkVersionResult).value

    return AwaitableGetSparkVersionResult(
        beta=pulumi.get(__ret__, 'beta'),
        genomics=pulumi.get(__ret__, 'genomics'),
        gpu=pulumi.get(__ret__, 'gpu'),
        graviton=pulumi.get(__ret__, 'graviton'),
        id=pulumi.get(__ret__, 'id'),
        latest=pulumi.get(__ret__, 'latest'),
        long_term_support=pulumi.get(__ret__, 'long_term_support'),
        ml=pulumi.get(__ret__, 'ml'),
        photon=pulumi.get(__ret__, 'photon'),
        scala=pulumi.get(__ret__, 'scala'),
        spark_version=pulumi.get(__ret__, 'spark_version'))
def get_spark_version_output(beta: Optional[pulumi.Input[Optional[bool]]] = None,
                             genomics: Optional[pulumi.Input[Optional[bool]]] = None,
                             gpu: Optional[pulumi.Input[Optional[bool]]] = None,
                             graviton: Optional[pulumi.Input[Optional[bool]]] = None,
                             id: Optional[pulumi.Input[Optional[str]]] = None,
                             latest: Optional[pulumi.Input[Optional[bool]]] = None,
                             long_term_support: Optional[pulumi.Input[Optional[bool]]] = None,
                             ml: Optional[pulumi.Input[Optional[bool]]] = None,
                             photon: Optional[pulumi.Input[Optional[bool]]] = None,
                             scala: Optional[pulumi.Input[Optional[str]]] = None,
                             spark_version: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSparkVersionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['beta'] = beta
    __args__['genomics'] = genomics
    __args__['gpu'] = gpu
    __args__['graviton'] = graviton
    __args__['id'] = id
    __args__['latest'] = latest
    __args__['longTermSupport'] = long_term_support
    __args__['ml'] = ml
    __args__['photon'] = photon
    __args__['scala'] = scala
    __args__['sparkVersion'] = spark_version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('databricks:index/getSparkVersion:getSparkVersion', __args__, opts=opts, typ=GetSparkVersionResult)
    return __ret__.apply(lambda __response__: GetSparkVersionResult(
        beta=pulumi.get(__response__, 'beta'),
        genomics=pulumi.get(__response__, 'genomics'),
        gpu=pulumi.get(__response__, 'gpu'),
        graviton=pulumi.get(__response__, 'graviton'),
        id=pulumi.get(__response__, 'id'),
        latest=pulumi.get(__response__, 'latest'),
        long_term_support=pulumi.get(__response__, 'long_term_support'),
        ml=pulumi.get(__response__, 'ml'),
        photon=pulumi.get(__response__, 'photon'),
        scala=pulumi.get(__response__, 'scala'),
        spark_version=pulumi.get(__response__, 'spark_version')))
