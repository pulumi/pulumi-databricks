# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterPolicyArgs', 'ClusterPolicy']

@pulumi.input_type
class ClusterPolicyArgs:
    def __init__(__self__, *,
                 definition: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 libraries: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterPolicyLibraryArgs']]]] = None,
                 max_clusters_per_user: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_family_definition_overrides: Optional[pulumi.Input[str]] = None,
                 policy_family_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ClusterPolicy resource.
        """
        if definition is not None:
            pulumi.set(__self__, "definition", definition)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if libraries is not None:
            pulumi.set(__self__, "libraries", libraries)
        if max_clusters_per_user is not None:
            pulumi.set(__self__, "max_clusters_per_user", max_clusters_per_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_family_definition_overrides is not None:
            pulumi.set(__self__, "policy_family_definition_overrides", policy_family_definition_overrides)
        if policy_family_id is not None:
            pulumi.set(__self__, "policy_family_id", policy_family_id)

    @property
    @pulumi.getter
    def definition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def libraries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterPolicyLibraryArgs']]]]:
        return pulumi.get(self, "libraries")

    @libraries.setter
    def libraries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterPolicyLibraryArgs']]]]):
        pulumi.set(self, "libraries", value)

    @property
    @pulumi.getter(name="maxClustersPerUser")
    def max_clusters_per_user(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clusters_per_user")

    @max_clusters_per_user.setter
    def max_clusters_per_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clusters_per_user", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyFamilyDefinitionOverrides")
    def policy_family_definition_overrides(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_family_definition_overrides")

    @policy_family_definition_overrides.setter
    def policy_family_definition_overrides(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_family_definition_overrides", value)

    @property
    @pulumi.getter(name="policyFamilyId")
    def policy_family_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_family_id")

    @policy_family_id.setter
    def policy_family_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_family_id", value)


@pulumi.input_type
class _ClusterPolicyState:
    def __init__(__self__, *,
                 definition: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 libraries: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterPolicyLibraryArgs']]]] = None,
                 max_clusters_per_user: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_family_definition_overrides: Optional[pulumi.Input[str]] = None,
                 policy_family_id: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ClusterPolicy resources.
        """
        if definition is not None:
            pulumi.set(__self__, "definition", definition)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if libraries is not None:
            pulumi.set(__self__, "libraries", libraries)
        if max_clusters_per_user is not None:
            pulumi.set(__self__, "max_clusters_per_user", max_clusters_per_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_family_definition_overrides is not None:
            pulumi.set(__self__, "policy_family_definition_overrides", policy_family_definition_overrides)
        if policy_family_id is not None:
            pulumi.set(__self__, "policy_family_id", policy_family_id)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)

    @property
    @pulumi.getter
    def definition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def libraries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterPolicyLibraryArgs']]]]:
        return pulumi.get(self, "libraries")

    @libraries.setter
    def libraries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterPolicyLibraryArgs']]]]):
        pulumi.set(self, "libraries", value)

    @property
    @pulumi.getter(name="maxClustersPerUser")
    def max_clusters_per_user(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clusters_per_user")

    @max_clusters_per_user.setter
    def max_clusters_per_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clusters_per_user", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyFamilyDefinitionOverrides")
    def policy_family_definition_overrides(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_family_definition_overrides")

    @policy_family_definition_overrides.setter
    def policy_family_definition_overrides(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_family_definition_overrides", value)

    @property
    @pulumi.getter(name="policyFamilyId")
    def policy_family_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_family_id")

    @policy_family_id.setter
    def policy_family_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_family_id", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)


class ClusterPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 definition: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 libraries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ClusterPolicyLibraryArgs', 'ClusterPolicyLibraryArgsDict']]]]] = None,
                 max_clusters_per_user: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_family_definition_overrides: Optional[pulumi.Input[str]] = None,
                 policy_family_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ClusterPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ClusterPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ClusterPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ClusterPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 definition: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 libraries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ClusterPolicyLibraryArgs', 'ClusterPolicyLibraryArgsDict']]]]] = None,
                 max_clusters_per_user: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_family_definition_overrides: Optional[pulumi.Input[str]] = None,
                 policy_family_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterPolicyArgs.__new__(ClusterPolicyArgs)

            __props__.__dict__["definition"] = definition
            __props__.__dict__["description"] = description
            __props__.__dict__["libraries"] = libraries
            __props__.__dict__["max_clusters_per_user"] = max_clusters_per_user
            __props__.__dict__["name"] = name
            __props__.__dict__["policy_family_definition_overrides"] = policy_family_definition_overrides
            __props__.__dict__["policy_family_id"] = policy_family_id
            __props__.__dict__["policy_id"] = None
        super(ClusterPolicy, __self__).__init__(
            'databricks:index/clusterPolicy:ClusterPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            definition: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            libraries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ClusterPolicyLibraryArgs', 'ClusterPolicyLibraryArgsDict']]]]] = None,
            max_clusters_per_user: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            policy_family_definition_overrides: Optional[pulumi.Input[str]] = None,
            policy_family_id: Optional[pulumi.Input[str]] = None,
            policy_id: Optional[pulumi.Input[str]] = None) -> 'ClusterPolicy':
        """
        Get an existing ClusterPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterPolicyState.__new__(_ClusterPolicyState)

        __props__.__dict__["definition"] = definition
        __props__.__dict__["description"] = description
        __props__.__dict__["libraries"] = libraries
        __props__.__dict__["max_clusters_per_user"] = max_clusters_per_user
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_family_definition_overrides"] = policy_family_definition_overrides
        __props__.__dict__["policy_family_id"] = policy_family_id
        __props__.__dict__["policy_id"] = policy_id
        return ClusterPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Output[str]:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def libraries(self) -> pulumi.Output[Optional[Sequence['outputs.ClusterPolicyLibrary']]]:
        return pulumi.get(self, "libraries")

    @property
    @pulumi.getter(name="maxClustersPerUser")
    def max_clusters_per_user(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "max_clusters_per_user")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyFamilyDefinitionOverrides")
    def policy_family_definition_overrides(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "policy_family_definition_overrides")

    @property
    @pulumi.getter(name="policyFamilyId")
    def policy_family_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "policy_family_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "policy_id")

