# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPolicyInfosResult',
    'AwaitableGetPolicyInfosResult',
    'get_policy_infos',
    'get_policy_infos_output',
]

@pulumi.output_type
class GetPolicyInfosResult:
    """
    A collection of values returned by getPolicyInfos.
    """
    def __init__(__self__, id=None, on_securable_fullname=None, on_securable_type=None, policies=None, workspace_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if on_securable_fullname and not isinstance(on_securable_fullname, str):
            raise TypeError("Expected argument 'on_securable_fullname' to be a str")
        pulumi.set(__self__, "on_securable_fullname", on_securable_fullname)
        if on_securable_type and not isinstance(on_securable_type, str):
            raise TypeError("Expected argument 'on_securable_type' to be a str")
        pulumi.set(__self__, "on_securable_type", on_securable_type)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="onSecurableFullname")
    def on_securable_fullname(self) -> _builtins.str:
        """
        (string) - Full name of the securable on which the policy is defined.
        Required on create and ignored on update
        """
        return pulumi.get(self, "on_securable_fullname")

    @_builtins.property
    @pulumi.getter(name="onSecurableType")
    def on_securable_type(self) -> _builtins.str:
        """
        (string) - Type of the securable on which the policy is defined.
        Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
        Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
        """
        return pulumi.get(self, "on_securable_type")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetPolicyInfosPolicyResult']:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "workspace_id")


class AwaitableGetPolicyInfosResult(GetPolicyInfosResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyInfosResult(
            id=self.id,
            on_securable_fullname=self.on_securable_fullname,
            on_securable_type=self.on_securable_type,
            policies=self.policies,
            workspace_id=self.workspace_id)


def get_policy_infos(on_securable_fullname: Optional[_builtins.str] = None,
                     on_securable_type: Optional[_builtins.str] = None,
                     workspace_id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyInfosResult:
    """
    Use this data source to access information about an existing resource.

    :param _builtins.str on_securable_fullname: Required. The fully qualified name of securable to list policies for
    :param _builtins.str on_securable_type: Required. The type of the securable to list policies for
    :param _builtins.str workspace_id: Workspace ID of the resource
    """
    __args__ = dict()
    __args__['onSecurableFullname'] = on_securable_fullname
    __args__['onSecurableType'] = on_securable_type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('databricks:index/getPolicyInfos:getPolicyInfos', __args__, opts=opts, typ=GetPolicyInfosResult).value

    return AwaitableGetPolicyInfosResult(
        id=pulumi.get(__ret__, 'id'),
        on_securable_fullname=pulumi.get(__ret__, 'on_securable_fullname'),
        on_securable_type=pulumi.get(__ret__, 'on_securable_type'),
        policies=pulumi.get(__ret__, 'policies'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_policy_infos_output(on_securable_fullname: Optional[pulumi.Input[_builtins.str]] = None,
                            on_securable_type: Optional[pulumi.Input[_builtins.str]] = None,
                            workspace_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyInfosResult]:
    """
    Use this data source to access information about an existing resource.

    :param _builtins.str on_securable_fullname: Required. The fully qualified name of securable to list policies for
    :param _builtins.str on_securable_type: Required. The type of the securable to list policies for
    :param _builtins.str workspace_id: Workspace ID of the resource
    """
    __args__ = dict()
    __args__['onSecurableFullname'] = on_securable_fullname
    __args__['onSecurableType'] = on_securable_type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('databricks:index/getPolicyInfos:getPolicyInfos', __args__, opts=opts, typ=GetPolicyInfosResult)
    return __ret__.apply(lambda __response__: GetPolicyInfosResult(
        id=pulumi.get(__response__, 'id'),
        on_securable_fullname=pulumi.get(__response__, 'on_securable_fullname'),
        on_securable_type=pulumi.get(__response__, 'on_securable_type'),
        policies=pulumi.get(__response__, 'policies'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
