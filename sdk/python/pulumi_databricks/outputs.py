# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AccessControlRuleSetGrantRule',
    'ClusterAutoscale',
    'ClusterAwsAttributes',
    'ClusterAzureAttributes',
    'ClusterClusterLogConf',
    'ClusterClusterLogConfDbfs',
    'ClusterClusterLogConfS3',
    'ClusterClusterMountInfo',
    'ClusterClusterMountInfoNetworkFilesystemInfo',
    'ClusterDockerImage',
    'ClusterDockerImageBasicAuth',
    'ClusterGcpAttributes',
    'ClusterInitScript',
    'ClusterInitScriptAbfss',
    'ClusterInitScriptDbfs',
    'ClusterInitScriptFile',
    'ClusterInitScriptGcs',
    'ClusterInitScriptS3',
    'ClusterInitScriptVolumes',
    'ClusterInitScriptWorkspace',
    'ClusterLibrary',
    'ClusterLibraryCran',
    'ClusterLibraryMaven',
    'ClusterLibraryPypi',
    'ClusterWorkloadType',
    'ClusterWorkloadTypeClients',
    'ExternalLocationEncryptionDetails',
    'ExternalLocationEncryptionDetailsSseEncryptionDetails',
    'GrantsGrant',
    'InstancePoolAwsAttributes',
    'InstancePoolAzureAttributes',
    'InstancePoolDiskSpec',
    'InstancePoolDiskSpecDiskType',
    'InstancePoolGcpAttributes',
    'InstancePoolInstancePoolFleetAttributes',
    'InstancePoolInstancePoolFleetAttributesFleetOnDemandOption',
    'InstancePoolInstancePoolFleetAttributesFleetSpotOption',
    'InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride',
    'InstancePoolPreloadedDockerImage',
    'InstancePoolPreloadedDockerImageBasicAuth',
    'JobCompute',
    'JobComputeSpec',
    'JobContinuous',
    'JobDbtTask',
    'JobEmailNotifications',
    'JobGitSource',
    'JobGitSourceJobSource',
    'JobHealth',
    'JobHealthRule',
    'JobJobCluster',
    'JobJobClusterNewCluster',
    'JobJobClusterNewClusterAutoscale',
    'JobJobClusterNewClusterAwsAttributes',
    'JobJobClusterNewClusterAzureAttributes',
    'JobJobClusterNewClusterClusterLogConf',
    'JobJobClusterNewClusterClusterLogConfDbfs',
    'JobJobClusterNewClusterClusterLogConfS3',
    'JobJobClusterNewClusterClusterMountInfo',
    'JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo',
    'JobJobClusterNewClusterDockerImage',
    'JobJobClusterNewClusterDockerImageBasicAuth',
    'JobJobClusterNewClusterGcpAttributes',
    'JobJobClusterNewClusterInitScript',
    'JobJobClusterNewClusterInitScriptAbfss',
    'JobJobClusterNewClusterInitScriptDbfs',
    'JobJobClusterNewClusterInitScriptFile',
    'JobJobClusterNewClusterInitScriptGcs',
    'JobJobClusterNewClusterInitScriptS3',
    'JobJobClusterNewClusterInitScriptVolumes',
    'JobJobClusterNewClusterInitScriptWorkspace',
    'JobJobClusterNewClusterWorkloadType',
    'JobJobClusterNewClusterWorkloadTypeClients',
    'JobLibrary',
    'JobLibraryCran',
    'JobLibraryMaven',
    'JobLibraryPypi',
    'JobNewCluster',
    'JobNewClusterAutoscale',
    'JobNewClusterAwsAttributes',
    'JobNewClusterAzureAttributes',
    'JobNewClusterClusterLogConf',
    'JobNewClusterClusterLogConfDbfs',
    'JobNewClusterClusterLogConfS3',
    'JobNewClusterClusterMountInfo',
    'JobNewClusterClusterMountInfoNetworkFilesystemInfo',
    'JobNewClusterDockerImage',
    'JobNewClusterDockerImageBasicAuth',
    'JobNewClusterGcpAttributes',
    'JobNewClusterInitScript',
    'JobNewClusterInitScriptAbfss',
    'JobNewClusterInitScriptDbfs',
    'JobNewClusterInitScriptFile',
    'JobNewClusterInitScriptGcs',
    'JobNewClusterInitScriptS3',
    'JobNewClusterInitScriptVolumes',
    'JobNewClusterInitScriptWorkspace',
    'JobNewClusterWorkloadType',
    'JobNewClusterWorkloadTypeClients',
    'JobNotebookTask',
    'JobNotificationSettings',
    'JobParameter',
    'JobPipelineTask',
    'JobPythonWheelTask',
    'JobQueue',
    'JobRunAs',
    'JobRunJobTask',
    'JobSchedule',
    'JobSparkJarTask',
    'JobSparkPythonTask',
    'JobSparkSubmitTask',
    'JobTask',
    'JobTaskConditionTask',
    'JobTaskDbtTask',
    'JobTaskDependsOn',
    'JobTaskEmailNotifications',
    'JobTaskHealth',
    'JobTaskHealthRule',
    'JobTaskLibrary',
    'JobTaskLibraryCran',
    'JobTaskLibraryMaven',
    'JobTaskLibraryPypi',
    'JobTaskNewCluster',
    'JobTaskNewClusterAutoscale',
    'JobTaskNewClusterAwsAttributes',
    'JobTaskNewClusterAzureAttributes',
    'JobTaskNewClusterClusterLogConf',
    'JobTaskNewClusterClusterLogConfDbfs',
    'JobTaskNewClusterClusterLogConfS3',
    'JobTaskNewClusterClusterMountInfo',
    'JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo',
    'JobTaskNewClusterDockerImage',
    'JobTaskNewClusterDockerImageBasicAuth',
    'JobTaskNewClusterGcpAttributes',
    'JobTaskNewClusterInitScript',
    'JobTaskNewClusterInitScriptAbfss',
    'JobTaskNewClusterInitScriptDbfs',
    'JobTaskNewClusterInitScriptFile',
    'JobTaskNewClusterInitScriptGcs',
    'JobTaskNewClusterInitScriptS3',
    'JobTaskNewClusterInitScriptVolumes',
    'JobTaskNewClusterInitScriptWorkspace',
    'JobTaskNewClusterWorkloadType',
    'JobTaskNewClusterWorkloadTypeClients',
    'JobTaskNotebookTask',
    'JobTaskNotificationSettings',
    'JobTaskPipelineTask',
    'JobTaskPythonWheelTask',
    'JobTaskRunJobTask',
    'JobTaskSparkJarTask',
    'JobTaskSparkPythonTask',
    'JobTaskSparkSubmitTask',
    'JobTaskSqlTask',
    'JobTaskSqlTaskAlert',
    'JobTaskSqlTaskAlertSubscription',
    'JobTaskSqlTaskDashboard',
    'JobTaskSqlTaskDashboardSubscription',
    'JobTaskSqlTaskFile',
    'JobTaskSqlTaskQuery',
    'JobTrigger',
    'JobTriggerFileArrival',
    'JobWebhookNotifications',
    'JobWebhookNotificationsOnDurationWarningThresholdExceeded',
    'JobWebhookNotificationsOnFailure',
    'JobWebhookNotificationsOnStart',
    'JobWebhookNotificationsOnSuccess',
    'LibraryCran',
    'LibraryMaven',
    'LibraryPypi',
    'MetastoreDataAccessAwsIamRole',
    'MetastoreDataAccessAzureManagedIdentity',
    'MetastoreDataAccessAzureServicePrincipal',
    'MetastoreDataAccessDatabricksGcpServiceAccount',
    'MetastoreDataAccessGcpServiceAccountKey',
    'MlflowModelTag',
    'MlflowWebhookHttpUrlSpec',
    'MlflowWebhookJobSpec',
    'ModelServingConfig',
    'ModelServingConfigServedModel',
    'ModelServingConfigTrafficConfig',
    'ModelServingConfigTrafficConfigRoute',
    'ModelServingTag',
    'MountAbfs',
    'MountAdl',
    'MountGs',
    'MountS3',
    'MountWasb',
    'MwsCustomerManagedKeysAwsKeyInfo',
    'MwsCustomerManagedKeysGcpKeyInfo',
    'MwsNetworksErrorMessage',
    'MwsNetworksGcpNetworkInfo',
    'MwsNetworksVpcEndpoints',
    'MwsVpcEndpointGcpVpcEndpointInfo',
    'MwsWorkspacesCloudResourceContainer',
    'MwsWorkspacesCloudResourceContainerGcp',
    'MwsWorkspacesExternalCustomerInfo',
    'MwsWorkspacesGcpManagedNetworkConfig',
    'MwsWorkspacesGkeConfig',
    'MwsWorkspacesToken',
    'PermissionsAccessControl',
    'PipelineCluster',
    'PipelineClusterAutoscale',
    'PipelineClusterAwsAttributes',
    'PipelineClusterAzureAttributes',
    'PipelineClusterClusterLogConf',
    'PipelineClusterClusterLogConfDbfs',
    'PipelineClusterClusterLogConfS3',
    'PipelineClusterGcpAttributes',
    'PipelineClusterInitScript',
    'PipelineClusterInitScriptAbfss',
    'PipelineClusterInitScriptDbfs',
    'PipelineClusterInitScriptFile',
    'PipelineClusterInitScriptGcs',
    'PipelineClusterInitScriptS3',
    'PipelineClusterInitScriptVolumes',
    'PipelineClusterInitScriptWorkspace',
    'PipelineFilters',
    'PipelineLibrary',
    'PipelineLibraryFile',
    'PipelineLibraryMaven',
    'PipelineLibraryNotebook',
    'PipelineNotification',
    'RecipientIpAccessList',
    'RecipientToken',
    'RepoSparseCheckout',
    'SecretScopeKeyvaultMetadata',
    'ShareObject',
    'ShareObjectPartition',
    'ShareObjectPartitionValue',
    'SqlAlertOptions',
    'SqlEndpointChannel',
    'SqlEndpointOdbcParams',
    'SqlEndpointTags',
    'SqlEndpointTagsCustomTag',
    'SqlPermissionsPrivilegeAssignment',
    'SqlQueryParameter',
    'SqlQueryParameterDate',
    'SqlQueryParameterDateRange',
    'SqlQueryParameterDateRangeRange',
    'SqlQueryParameterDatetime',
    'SqlQueryParameterDatetimeRange',
    'SqlQueryParameterDatetimeRangeRange',
    'SqlQueryParameterDatetimesec',
    'SqlQueryParameterDatetimesecRange',
    'SqlQueryParameterDatetimesecRangeRange',
    'SqlQueryParameterEnum',
    'SqlQueryParameterEnumMultiple',
    'SqlQueryParameterNumber',
    'SqlQueryParameterQuery',
    'SqlQueryParameterQueryMultiple',
    'SqlQueryParameterText',
    'SqlQuerySchedule',
    'SqlQueryScheduleContinuous',
    'SqlQueryScheduleDaily',
    'SqlQueryScheduleWeekly',
    'SqlTableColumn',
    'SqlWidgetParameter',
    'SqlWidgetPosition',
    'StorageCredentialAwsIamRole',
    'StorageCredentialAzureManagedIdentity',
    'StorageCredentialAzureServicePrincipal',
    'StorageCredentialDatabricksGcpServiceAccount',
    'StorageCredentialGcpServiceAccountKey',
    'TableColumn',
    'GetClusterClusterInfoResult',
    'GetClusterClusterInfoAutoscaleResult',
    'GetClusterClusterInfoAwsAttributesResult',
    'GetClusterClusterInfoAzureAttributesResult',
    'GetClusterClusterInfoClusterLogConfResult',
    'GetClusterClusterInfoClusterLogConfDbfsResult',
    'GetClusterClusterInfoClusterLogConfS3Result',
    'GetClusterClusterInfoClusterLogStatusResult',
    'GetClusterClusterInfoDockerImageResult',
    'GetClusterClusterInfoDockerImageBasicAuthResult',
    'GetClusterClusterInfoDriverResult',
    'GetClusterClusterInfoDriverNodeAwsAttributesResult',
    'GetClusterClusterInfoExecutorResult',
    'GetClusterClusterInfoExecutorNodeAwsAttributesResult',
    'GetClusterClusterInfoGcpAttributesResult',
    'GetClusterClusterInfoInitScriptResult',
    'GetClusterClusterInfoInitScriptAbfssResult',
    'GetClusterClusterInfoInitScriptDbfsResult',
    'GetClusterClusterInfoInitScriptFileResult',
    'GetClusterClusterInfoInitScriptGcsResult',
    'GetClusterClusterInfoInitScriptS3Result',
    'GetClusterClusterInfoInitScriptVolumesResult',
    'GetClusterClusterInfoInitScriptWorkspaceResult',
    'GetClusterClusterInfoTerminationReasonResult',
    'GetDbfsFilePathsPathListResult',
    'GetInstancePoolPoolInfoResult',
    'GetInstancePoolPoolInfoAwsAttributesResult',
    'GetInstancePoolPoolInfoAzureAttributesResult',
    'GetInstancePoolPoolInfoDiskSpecResult',
    'GetInstancePoolPoolInfoDiskSpecDiskTypeResult',
    'GetInstancePoolPoolInfoGcpAttributesResult',
    'GetInstancePoolPoolInfoInstancePoolFleetAttributeResult',
    'GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOptionResult',
    'GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOptionResult',
    'GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverrideResult',
    'GetInstancePoolPoolInfoPreloadedDockerImageResult',
    'GetInstancePoolPoolInfoPreloadedDockerImageBasicAuthResult',
    'GetInstancePoolPoolInfoStatsResult',
    'GetJobJobSettingsResult',
    'GetJobJobSettingsSettingsResult',
    'GetJobJobSettingsSettingsComputeResult',
    'GetJobJobSettingsSettingsComputeSpecResult',
    'GetJobJobSettingsSettingsContinuousResult',
    'GetJobJobSettingsSettingsDbtTaskResult',
    'GetJobJobSettingsSettingsEmailNotificationsResult',
    'GetJobJobSettingsSettingsGitSourceResult',
    'GetJobJobSettingsSettingsGitSourceJobSourceResult',
    'GetJobJobSettingsSettingsHealthResult',
    'GetJobJobSettingsSettingsHealthRuleResult',
    'GetJobJobSettingsSettingsJobClusterResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterAutoscaleResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributesResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributesResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfsResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3Result',
    'GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfoResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterDockerImageResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuthResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributesResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterInitScriptResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfssResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfsResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFileResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcsResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3Result',
    'GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumesResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspaceResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeResult',
    'GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClientsResult',
    'GetJobJobSettingsSettingsLibraryResult',
    'GetJobJobSettingsSettingsLibraryCranResult',
    'GetJobJobSettingsSettingsLibraryMavenResult',
    'GetJobJobSettingsSettingsLibraryPypiResult',
    'GetJobJobSettingsSettingsNewClusterResult',
    'GetJobJobSettingsSettingsNewClusterAutoscaleResult',
    'GetJobJobSettingsSettingsNewClusterAwsAttributesResult',
    'GetJobJobSettingsSettingsNewClusterAzureAttributesResult',
    'GetJobJobSettingsSettingsNewClusterClusterLogConfResult',
    'GetJobJobSettingsSettingsNewClusterClusterLogConfDbfsResult',
    'GetJobJobSettingsSettingsNewClusterClusterLogConfS3Result',
    'GetJobJobSettingsSettingsNewClusterClusterMountInfoResult',
    'GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfoResult',
    'GetJobJobSettingsSettingsNewClusterDockerImageResult',
    'GetJobJobSettingsSettingsNewClusterDockerImageBasicAuthResult',
    'GetJobJobSettingsSettingsNewClusterGcpAttributesResult',
    'GetJobJobSettingsSettingsNewClusterInitScriptResult',
    'GetJobJobSettingsSettingsNewClusterInitScriptAbfssResult',
    'GetJobJobSettingsSettingsNewClusterInitScriptDbfsResult',
    'GetJobJobSettingsSettingsNewClusterInitScriptFileResult',
    'GetJobJobSettingsSettingsNewClusterInitScriptGcsResult',
    'GetJobJobSettingsSettingsNewClusterInitScriptS3Result',
    'GetJobJobSettingsSettingsNewClusterInitScriptVolumesResult',
    'GetJobJobSettingsSettingsNewClusterInitScriptWorkspaceResult',
    'GetJobJobSettingsSettingsNewClusterWorkloadTypeResult',
    'GetJobJobSettingsSettingsNewClusterWorkloadTypeClientsResult',
    'GetJobJobSettingsSettingsNotebookTaskResult',
    'GetJobJobSettingsSettingsNotificationSettingsResult',
    'GetJobJobSettingsSettingsParameterResult',
    'GetJobJobSettingsSettingsPipelineTaskResult',
    'GetJobJobSettingsSettingsPythonWheelTaskResult',
    'GetJobJobSettingsSettingsQueueResult',
    'GetJobJobSettingsSettingsRunAsResult',
    'GetJobJobSettingsSettingsRunJobTaskResult',
    'GetJobJobSettingsSettingsScheduleResult',
    'GetJobJobSettingsSettingsSparkJarTaskResult',
    'GetJobJobSettingsSettingsSparkPythonTaskResult',
    'GetJobJobSettingsSettingsSparkSubmitTaskResult',
    'GetJobJobSettingsSettingsTaskResult',
    'GetJobJobSettingsSettingsTaskConditionTaskResult',
    'GetJobJobSettingsSettingsTaskDbtTaskResult',
    'GetJobJobSettingsSettingsTaskDependsOnResult',
    'GetJobJobSettingsSettingsTaskEmailNotificationsResult',
    'GetJobJobSettingsSettingsTaskHealthResult',
    'GetJobJobSettingsSettingsTaskHealthRuleResult',
    'GetJobJobSettingsSettingsTaskLibraryResult',
    'GetJobJobSettingsSettingsTaskLibraryCranResult',
    'GetJobJobSettingsSettingsTaskLibraryMavenResult',
    'GetJobJobSettingsSettingsTaskLibraryPypiResult',
    'GetJobJobSettingsSettingsTaskNewClusterResult',
    'GetJobJobSettingsSettingsTaskNewClusterAutoscaleResult',
    'GetJobJobSettingsSettingsTaskNewClusterAwsAttributesResult',
    'GetJobJobSettingsSettingsTaskNewClusterAzureAttributesResult',
    'GetJobJobSettingsSettingsTaskNewClusterClusterLogConfResult',
    'GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfsResult',
    'GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3Result',
    'GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoResult',
    'GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfoResult',
    'GetJobJobSettingsSettingsTaskNewClusterDockerImageResult',
    'GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuthResult',
    'GetJobJobSettingsSettingsTaskNewClusterGcpAttributesResult',
    'GetJobJobSettingsSettingsTaskNewClusterInitScriptResult',
    'GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfssResult',
    'GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfsResult',
    'GetJobJobSettingsSettingsTaskNewClusterInitScriptFileResult',
    'GetJobJobSettingsSettingsTaskNewClusterInitScriptGcsResult',
    'GetJobJobSettingsSettingsTaskNewClusterInitScriptS3Result',
    'GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumesResult',
    'GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspaceResult',
    'GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeResult',
    'GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClientsResult',
    'GetJobJobSettingsSettingsTaskNotebookTaskResult',
    'GetJobJobSettingsSettingsTaskNotificationSettingsResult',
    'GetJobJobSettingsSettingsTaskPipelineTaskResult',
    'GetJobJobSettingsSettingsTaskPythonWheelTaskResult',
    'GetJobJobSettingsSettingsTaskRunJobTaskResult',
    'GetJobJobSettingsSettingsTaskSparkJarTaskResult',
    'GetJobJobSettingsSettingsTaskSparkPythonTaskResult',
    'GetJobJobSettingsSettingsTaskSparkSubmitTaskResult',
    'GetJobJobSettingsSettingsTaskSqlTaskResult',
    'GetJobJobSettingsSettingsTaskSqlTaskAlertResult',
    'GetJobJobSettingsSettingsTaskSqlTaskAlertSubscriptionResult',
    'GetJobJobSettingsSettingsTaskSqlTaskDashboardResult',
    'GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscriptionResult',
    'GetJobJobSettingsSettingsTaskSqlTaskFileResult',
    'GetJobJobSettingsSettingsTaskSqlTaskQueryResult',
    'GetJobJobSettingsSettingsTriggerResult',
    'GetJobJobSettingsSettingsTriggerFileArrivalResult',
    'GetJobJobSettingsSettingsWebhookNotificationsResult',
    'GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceededResult',
    'GetJobJobSettingsSettingsWebhookNotificationsOnFailureResult',
    'GetJobJobSettingsSettingsWebhookNotificationsOnStartResult',
    'GetJobJobSettingsSettingsWebhookNotificationsOnSuccessResult',
    'GetMetastoreMetastoreInfoResult',
    'GetNotebookPathsNotebookPathListResult',
    'GetShareObjectResult',
    'GetShareObjectPartitionResult',
    'GetShareObjectPartitionValueResult',
    'GetSqlWarehouseChannelResult',
    'GetSqlWarehouseOdbcParamsResult',
    'GetSqlWarehouseTagsResult',
    'GetSqlWarehouseTagsCustomTagResult',
]

@pulumi.output_type
class AccessControlRuleSetGrantRule(dict):
    def __init__(__self__, *,
                 role: str,
                 principals: Optional[Sequence[str]] = None):
        """
        :param str role: Role to be granted. The supported roles are listed below. For more information about these roles, refer to [service principal roles](https://docs.databricks.com/security/auth-authz/access-control/service-principal-acl.html#service-principal-roles), [group roles](https://docs.databricks.com/en/administration-guide/users-groups/groups.html#manage-roles-on-an-account-group-using-the-workspace-admin-settings-page) or [marketplace roles](https://docs.databricks.com/en/marketplace/get-started-provider.html#assign-the-marketplace-admin-role).
               * `roles/servicePrincipal.manager` - Manager of a service principal.
               * `roles/servicePrincipal.user` - User of a service principal.
               * `roles/group.manager` - Manager of a group.
               * `roles/marketplace.admin` - Admin of marketplace.
        :param Sequence[str] principals: a list of principals who are granted a role. The following format is supported:
               * `users/{username}` (also exposed as `acl_principal_id` attribute of `User` resource).
               * `groups/{groupname}` (also exposed as `acl_principal_id` attribute of `Group` resource).
               * `servicePrincipals/{applicationId}` (also exposed as `acl_principal_id` attribute of `ServicePrincipal` resource).
        """
        AccessControlRuleSetGrantRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role=role,
            principals=principals,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role: str,
             principals: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("role", role)
        if principals is not None:
            _setter("principals", principals)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Role to be granted. The supported roles are listed below. For more information about these roles, refer to [service principal roles](https://docs.databricks.com/security/auth-authz/access-control/service-principal-acl.html#service-principal-roles), [group roles](https://docs.databricks.com/en/administration-guide/users-groups/groups.html#manage-roles-on-an-account-group-using-the-workspace-admin-settings-page) or [marketplace roles](https://docs.databricks.com/en/marketplace/get-started-provider.html#assign-the-marketplace-admin-role).
        * `roles/servicePrincipal.manager` - Manager of a service principal.
        * `roles/servicePrincipal.user` - User of a service principal.
        * `roles/group.manager` - Manager of a group.
        * `roles/marketplace.admin` - Admin of marketplace.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def principals(self) -> Optional[Sequence[str]]:
        """
        a list of principals who are granted a role. The following format is supported:
        * `users/{username}` (also exposed as `acl_principal_id` attribute of `User` resource).
        * `groups/{groupname}` (also exposed as `acl_principal_id` attribute of `Group` resource).
        * `servicePrincipals/{applicationId}` (also exposed as `acl_principal_id` attribute of `ServicePrincipal` resource).
        """
        return pulumi.get(self, "principals")


@pulumi.output_type
class ClusterAutoscale(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxWorkers":
            suggest = "max_workers"
        elif key == "minWorkers":
            suggest = "min_workers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAutoscale. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAutoscale.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAutoscale.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_workers: Optional[int] = None,
                 min_workers: Optional[int] = None):
        ClusterAutoscale._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_workers=max_workers,
            min_workers=min_workers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_workers: Optional[int] = None,
             min_workers: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxWorkers' in kwargs:
            max_workers = kwargs['maxWorkers']
        if 'minWorkers' in kwargs:
            min_workers = kwargs['minWorkers']

        if max_workers is not None:
            _setter("max_workers", max_workers)
        if min_workers is not None:
            _setter("min_workers", min_workers)

    @property
    @pulumi.getter(name="maxWorkers")
    def max_workers(self) -> Optional[int]:
        return pulumi.get(self, "max_workers")

    @property
    @pulumi.getter(name="minWorkers")
    def min_workers(self) -> Optional[int]:
        return pulumi.get(self, "min_workers")


@pulumi.output_type
class ClusterAwsAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ebsVolumeCount":
            suggest = "ebs_volume_count"
        elif key == "ebsVolumeSize":
            suggest = "ebs_volume_size"
        elif key == "ebsVolumeType":
            suggest = "ebs_volume_type"
        elif key == "firstOnDemand":
            suggest = "first_on_demand"
        elif key == "instanceProfileArn":
            suggest = "instance_profile_arn"
        elif key == "spotBidPricePercent":
            suggest = "spot_bid_price_percent"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAwsAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAwsAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAwsAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 ebs_volume_count: Optional[int] = None,
                 ebs_volume_size: Optional[int] = None,
                 ebs_volume_type: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 instance_profile_arn: Optional[str] = None,
                 spot_bid_price_percent: Optional[int] = None,
                 zone_id: Optional[str] = None):
        ClusterAwsAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            ebs_volume_count=ebs_volume_count,
            ebs_volume_size=ebs_volume_size,
            ebs_volume_type=ebs_volume_type,
            first_on_demand=first_on_demand,
            instance_profile_arn=instance_profile_arn,
            spot_bid_price_percent=spot_bid_price_percent,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             ebs_volume_count: Optional[int] = None,
             ebs_volume_size: Optional[int] = None,
             ebs_volume_type: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             instance_profile_arn: Optional[str] = None,
             spot_bid_price_percent: Optional[int] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ebsVolumeCount' in kwargs:
            ebs_volume_count = kwargs['ebsVolumeCount']
        if 'ebsVolumeSize' in kwargs:
            ebs_volume_size = kwargs['ebsVolumeSize']
        if 'ebsVolumeType' in kwargs:
            ebs_volume_type = kwargs['ebsVolumeType']
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'instanceProfileArn' in kwargs:
            instance_profile_arn = kwargs['instanceProfileArn']
        if 'spotBidPricePercent' in kwargs:
            spot_bid_price_percent = kwargs['spotBidPricePercent']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if ebs_volume_count is not None:
            _setter("ebs_volume_count", ebs_volume_count)
        if ebs_volume_size is not None:
            _setter("ebs_volume_size", ebs_volume_size)
        if ebs_volume_type is not None:
            _setter("ebs_volume_type", ebs_volume_type)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if instance_profile_arn is not None:
            _setter("instance_profile_arn", instance_profile_arn)
        if spot_bid_price_percent is not None:
            _setter("spot_bid_price_percent", spot_bid_price_percent)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="ebsVolumeCount")
    def ebs_volume_count(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_count")

    @property
    @pulumi.getter(name="ebsVolumeSize")
    def ebs_volume_size(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_size")

    @property
    @pulumi.getter(name="ebsVolumeType")
    def ebs_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "ebs_volume_type")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[str]:
        return pulumi.get(self, "instance_profile_arn")

    @property
    @pulumi.getter(name="spotBidPricePercent")
    def spot_bid_price_percent(self) -> Optional[int]:
        return pulumi.get(self, "spot_bid_price_percent")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class ClusterAzureAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstOnDemand":
            suggest = "first_on_demand"
        elif key == "spotBidMaxPrice":
            suggest = "spot_bid_max_price"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAzureAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAzureAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAzureAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 spot_bid_max_price: Optional[float] = None):
        ClusterAzureAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            first_on_demand=first_on_demand,
            spot_bid_max_price=spot_bid_max_price,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             spot_bid_max_price: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'spotBidMaxPrice' in kwargs:
            spot_bid_max_price = kwargs['spotBidMaxPrice']

        if availability is not None:
            _setter("availability", availability)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if spot_bid_max_price is not None:
            _setter("spot_bid_max_price", spot_bid_max_price)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="spotBidMaxPrice")
    def spot_bid_max_price(self) -> Optional[float]:
        return pulumi.get(self, "spot_bid_max_price")


@pulumi.output_type
class ClusterClusterLogConf(dict):
    def __init__(__self__, *,
                 dbfs: Optional['outputs.ClusterClusterLogConfDbfs'] = None,
                 s3: Optional['outputs.ClusterClusterLogConfS3'] = None):
        ClusterClusterLogConf._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dbfs=dbfs,
            s3=s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dbfs: Optional['outputs.ClusterClusterLogConfDbfs'] = None,
             s3: Optional['outputs.ClusterClusterLogConfS3'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if dbfs is not None:
            _setter("dbfs", dbfs)
        if s3 is not None:
            _setter("s3", s3)

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.ClusterClusterLogConfDbfs']:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.ClusterClusterLogConfS3']:
        return pulumi.get(self, "s3")


@pulumi.output_type
class ClusterClusterLogConfDbfs(dict):
    def __init__(__self__, *,
                 destination: str):
        ClusterClusterLogConfDbfs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class ClusterClusterLogConfS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cannedAcl":
            suggest = "canned_acl"
        elif key == "enableEncryption":
            suggest = "enable_encryption"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClusterLogConfS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClusterLogConfS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClusterLogConfS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        ClusterClusterLogConfS3._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ClusterClusterMountInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localMountDirPath":
            suggest = "local_mount_dir_path"
        elif key == "networkFilesystemInfo":
            suggest = "network_filesystem_info"
        elif key == "remoteMountDirPath":
            suggest = "remote_mount_dir_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClusterMountInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClusterMountInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClusterMountInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_mount_dir_path: str,
                 network_filesystem_info: 'outputs.ClusterClusterMountInfoNetworkFilesystemInfo',
                 remote_mount_dir_path: Optional[str] = None):
        ClusterClusterMountInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            local_mount_dir_path=local_mount_dir_path,
            network_filesystem_info=network_filesystem_info,
            remote_mount_dir_path=remote_mount_dir_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             local_mount_dir_path: str,
             network_filesystem_info: 'outputs.ClusterClusterMountInfoNetworkFilesystemInfo',
             remote_mount_dir_path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'localMountDirPath' in kwargs:
            local_mount_dir_path = kwargs['localMountDirPath']
        if 'networkFilesystemInfo' in kwargs:
            network_filesystem_info = kwargs['networkFilesystemInfo']
        if 'remoteMountDirPath' in kwargs:
            remote_mount_dir_path = kwargs['remoteMountDirPath']

        _setter("local_mount_dir_path", local_mount_dir_path)
        _setter("network_filesystem_info", network_filesystem_info)
        if remote_mount_dir_path is not None:
            _setter("remote_mount_dir_path", remote_mount_dir_path)

    @property
    @pulumi.getter(name="localMountDirPath")
    def local_mount_dir_path(self) -> str:
        return pulumi.get(self, "local_mount_dir_path")

    @property
    @pulumi.getter(name="networkFilesystemInfo")
    def network_filesystem_info(self) -> 'outputs.ClusterClusterMountInfoNetworkFilesystemInfo':
        return pulumi.get(self, "network_filesystem_info")

    @property
    @pulumi.getter(name="remoteMountDirPath")
    def remote_mount_dir_path(self) -> Optional[str]:
        return pulumi.get(self, "remote_mount_dir_path")


@pulumi.output_type
class ClusterClusterMountInfoNetworkFilesystemInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverAddress":
            suggest = "server_address"
        elif key == "mountOptions":
            suggest = "mount_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClusterMountInfoNetworkFilesystemInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClusterMountInfoNetworkFilesystemInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClusterMountInfoNetworkFilesystemInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server_address: str,
                 mount_options: Optional[str] = None):
        ClusterClusterMountInfoNetworkFilesystemInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            server_address=server_address,
            mount_options=mount_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             server_address: str,
             mount_options: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serverAddress' in kwargs:
            server_address = kwargs['serverAddress']
        if 'mountOptions' in kwargs:
            mount_options = kwargs['mountOptions']

        _setter("server_address", server_address)
        if mount_options is not None:
            _setter("mount_options", mount_options)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> str:
        return pulumi.get(self, "server_address")

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[str]:
        return pulumi.get(self, "mount_options")


@pulumi.output_type
class ClusterDockerImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterDockerImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterDockerImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterDockerImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 basic_auth: Optional['outputs.ClusterDockerImageBasicAuth'] = None):
        ClusterDockerImage._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            basic_auth=basic_auth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             basic_auth: Optional['outputs.ClusterDockerImageBasicAuth'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'basicAuth' in kwargs:
            basic_auth = kwargs['basicAuth']

        _setter("url", url)
        if basic_auth is not None:
            _setter("basic_auth", basic_auth)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.ClusterDockerImageBasicAuth']:
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class ClusterDockerImageBasicAuth(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        ClusterDockerImageBasicAuth._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class ClusterGcpAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootDiskSize":
            suggest = "boot_disk_size"
        elif key == "googleServiceAccount":
            suggest = "google_service_account"
        elif key == "localSsdCount":
            suggest = "local_ssd_count"
        elif key == "usePreemptibleExecutors":
            suggest = "use_preemptible_executors"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterGcpAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterGcpAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterGcpAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 boot_disk_size: Optional[int] = None,
                 google_service_account: Optional[str] = None,
                 local_ssd_count: Optional[int] = None,
                 use_preemptible_executors: Optional[bool] = None,
                 zone_id: Optional[str] = None):
        ClusterGcpAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            boot_disk_size=boot_disk_size,
            google_service_account=google_service_account,
            local_ssd_count=local_ssd_count,
            use_preemptible_executors=use_preemptible_executors,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             boot_disk_size: Optional[int] = None,
             google_service_account: Optional[str] = None,
             local_ssd_count: Optional[int] = None,
             use_preemptible_executors: Optional[bool] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bootDiskSize' in kwargs:
            boot_disk_size = kwargs['bootDiskSize']
        if 'googleServiceAccount' in kwargs:
            google_service_account = kwargs['googleServiceAccount']
        if 'localSsdCount' in kwargs:
            local_ssd_count = kwargs['localSsdCount']
        if 'usePreemptibleExecutors' in kwargs:
            use_preemptible_executors = kwargs['usePreemptibleExecutors']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if boot_disk_size is not None:
            _setter("boot_disk_size", boot_disk_size)
        if google_service_account is not None:
            _setter("google_service_account", google_service_account)
        if local_ssd_count is not None:
            _setter("local_ssd_count", local_ssd_count)
        if use_preemptible_executors is not None:
            _setter("use_preemptible_executors", use_preemptible_executors)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[int]:
        return pulumi.get(self, "boot_disk_size")

    @property
    @pulumi.getter(name="googleServiceAccount")
    def google_service_account(self) -> Optional[str]:
        return pulumi.get(self, "google_service_account")

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[int]:
        return pulumi.get(self, "local_ssd_count")

    @property
    @pulumi.getter(name="usePreemptibleExecutors")
    def use_preemptible_executors(self) -> Optional[bool]:
        warnings.warn("""Please use 'availability' instead.""", DeprecationWarning)
        pulumi.log.warn("""use_preemptible_executors is deprecated: Please use 'availability' instead.""")

        return pulumi.get(self, "use_preemptible_executors")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class ClusterInitScript(dict):
    def __init__(__self__, *,
                 abfss: Optional['outputs.ClusterInitScriptAbfss'] = None,
                 dbfs: Optional['outputs.ClusterInitScriptDbfs'] = None,
                 file: Optional['outputs.ClusterInitScriptFile'] = None,
                 gcs: Optional['outputs.ClusterInitScriptGcs'] = None,
                 s3: Optional['outputs.ClusterInitScriptS3'] = None,
                 volumes: Optional['outputs.ClusterInitScriptVolumes'] = None,
                 workspace: Optional['outputs.ClusterInitScriptWorkspace'] = None):
        ClusterInitScript._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abfss=abfss,
            dbfs=dbfs,
            file=file,
            gcs=gcs,
            s3=s3,
            volumes=volumes,
            workspace=workspace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abfss: Optional['outputs.ClusterInitScriptAbfss'] = None,
             dbfs: Optional['outputs.ClusterInitScriptDbfs'] = None,
             file: Optional['outputs.ClusterInitScriptFile'] = None,
             gcs: Optional['outputs.ClusterInitScriptGcs'] = None,
             s3: Optional['outputs.ClusterInitScriptS3'] = None,
             volumes: Optional['outputs.ClusterInitScriptVolumes'] = None,
             workspace: Optional['outputs.ClusterInitScriptWorkspace'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if abfss is not None:
            _setter("abfss", abfss)
        if dbfs is not None:
            _setter("dbfs", dbfs)
        if file is not None:
            _setter("file", file)
        if gcs is not None:
            _setter("gcs", gcs)
        if s3 is not None:
            _setter("s3", s3)
        if volumes is not None:
            _setter("volumes", volumes)
        if workspace is not None:
            _setter("workspace", workspace)

    @property
    @pulumi.getter
    def abfss(self) -> Optional['outputs.ClusterInitScriptAbfss']:
        return pulumi.get(self, "abfss")

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.ClusterInitScriptDbfs']:
        warnings.warn("""For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.""", DeprecationWarning)
        pulumi.log.warn("""dbfs is deprecated: For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.""")

        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.ClusterInitScriptFile']:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def gcs(self) -> Optional['outputs.ClusterInitScriptGcs']:
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.ClusterInitScriptS3']:
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter
    def volumes(self) -> Optional['outputs.ClusterInitScriptVolumes']:
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def workspace(self) -> Optional['outputs.ClusterInitScriptWorkspace']:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class ClusterInitScriptAbfss(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        ClusterInitScriptAbfss._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class ClusterInitScriptDbfs(dict):
    def __init__(__self__, *,
                 destination: str):
        ClusterInitScriptDbfs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class ClusterInitScriptFile(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        ClusterInitScriptFile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class ClusterInitScriptGcs(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        ClusterInitScriptGcs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class ClusterInitScriptS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cannedAcl":
            suggest = "canned_acl"
        elif key == "enableEncryption":
            suggest = "enable_encryption"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterInitScriptS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterInitScriptS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterInitScriptS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        ClusterInitScriptS3._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ClusterInitScriptVolumes(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        ClusterInitScriptVolumes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class ClusterInitScriptWorkspace(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        ClusterInitScriptWorkspace._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class ClusterLibrary(dict):
    def __init__(__self__, *,
                 cran: Optional['outputs.ClusterLibraryCran'] = None,
                 egg: Optional[str] = None,
                 jar: Optional[str] = None,
                 maven: Optional['outputs.ClusterLibraryMaven'] = None,
                 pypi: Optional['outputs.ClusterLibraryPypi'] = None,
                 whl: Optional[str] = None):
        ClusterLibrary._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cran=cran,
            egg=egg,
            jar=jar,
            maven=maven,
            pypi=pypi,
            whl=whl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cran: Optional['outputs.ClusterLibraryCran'] = None,
             egg: Optional[str] = None,
             jar: Optional[str] = None,
             maven: Optional['outputs.ClusterLibraryMaven'] = None,
             pypi: Optional['outputs.ClusterLibraryPypi'] = None,
             whl: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if cran is not None:
            _setter("cran", cran)
        if egg is not None:
            _setter("egg", egg)
        if jar is not None:
            _setter("jar", jar)
        if maven is not None:
            _setter("maven", maven)
        if pypi is not None:
            _setter("pypi", pypi)
        if whl is not None:
            _setter("whl", whl)

    @property
    @pulumi.getter
    def cran(self) -> Optional['outputs.ClusterLibraryCran']:
        return pulumi.get(self, "cran")

    @property
    @pulumi.getter
    def egg(self) -> Optional[str]:
        return pulumi.get(self, "egg")

    @property
    @pulumi.getter
    def jar(self) -> Optional[str]:
        return pulumi.get(self, "jar")

    @property
    @pulumi.getter
    def maven(self) -> Optional['outputs.ClusterLibraryMaven']:
        return pulumi.get(self, "maven")

    @property
    @pulumi.getter
    def pypi(self) -> Optional['outputs.ClusterLibraryPypi']:
        return pulumi.get(self, "pypi")

    @property
    @pulumi.getter
    def whl(self) -> Optional[str]:
        return pulumi.get(self, "whl")


@pulumi.output_type
class ClusterLibraryCran(dict):
    def __init__(__self__, *,
                 package: str,
                 repo: Optional[str] = None):
        ClusterLibraryCran._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            package=package,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             package: str,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("package", package)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def package(self) -> str:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class ClusterLibraryMaven(dict):
    def __init__(__self__, *,
                 coordinates: str,
                 exclusions: Optional[Sequence[str]] = None,
                 repo: Optional[str] = None):
        ClusterLibraryMaven._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            coordinates=coordinates,
            exclusions=exclusions,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             coordinates: str,
             exclusions: Optional[Sequence[str]] = None,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("coordinates", coordinates)
        if exclusions is not None:
            _setter("exclusions", exclusions)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def coordinates(self) -> str:
        return pulumi.get(self, "coordinates")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class ClusterLibraryPypi(dict):
    def __init__(__self__, *,
                 package: str,
                 repo: Optional[str] = None):
        ClusterLibraryPypi._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            package=package,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             package: str,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("package", package)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def package(self) -> str:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class ClusterWorkloadType(dict):
    def __init__(__self__, *,
                 clients: 'outputs.ClusterWorkloadTypeClients'):
        ClusterWorkloadType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            clients=clients,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             clients: 'outputs.ClusterWorkloadTypeClients',
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("clients", clients)

    @property
    @pulumi.getter
    def clients(self) -> 'outputs.ClusterWorkloadTypeClients':
        return pulumi.get(self, "clients")


@pulumi.output_type
class ClusterWorkloadTypeClients(dict):
    def __init__(__self__, *,
                 jobs: Optional[bool] = None,
                 notebooks: Optional[bool] = None):
        ClusterWorkloadTypeClients._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jobs=jobs,
            notebooks=notebooks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jobs: Optional[bool] = None,
             notebooks: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if jobs is not None:
            _setter("jobs", jobs)
        if notebooks is not None:
            _setter("notebooks", notebooks)

    @property
    @pulumi.getter
    def jobs(self) -> Optional[bool]:
        return pulumi.get(self, "jobs")

    @property
    @pulumi.getter
    def notebooks(self) -> Optional[bool]:
        return pulumi.get(self, "notebooks")


@pulumi.output_type
class ExternalLocationEncryptionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sseEncryptionDetails":
            suggest = "sse_encryption_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalLocationEncryptionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalLocationEncryptionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalLocationEncryptionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sse_encryption_details: Optional['outputs.ExternalLocationEncryptionDetailsSseEncryptionDetails'] = None):
        ExternalLocationEncryptionDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sse_encryption_details=sse_encryption_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sse_encryption_details: Optional['outputs.ExternalLocationEncryptionDetailsSseEncryptionDetails'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sseEncryptionDetails' in kwargs:
            sse_encryption_details = kwargs['sseEncryptionDetails']

        if sse_encryption_details is not None:
            _setter("sse_encryption_details", sse_encryption_details)

    @property
    @pulumi.getter(name="sseEncryptionDetails")
    def sse_encryption_details(self) -> Optional['outputs.ExternalLocationEncryptionDetailsSseEncryptionDetails']:
        return pulumi.get(self, "sse_encryption_details")


@pulumi.output_type
class ExternalLocationEncryptionDetailsSseEncryptionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsKmsKeyArn":
            suggest = "aws_kms_key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalLocationEncryptionDetailsSseEncryptionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalLocationEncryptionDetailsSseEncryptionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalLocationEncryptionDetailsSseEncryptionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 aws_kms_key_arn: Optional[str] = None):
        ExternalLocationEncryptionDetailsSseEncryptionDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            algorithm=algorithm,
            aws_kms_key_arn=aws_kms_key_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             algorithm: Optional[str] = None,
             aws_kms_key_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'awsKmsKeyArn' in kwargs:
            aws_kms_key_arn = kwargs['awsKmsKeyArn']

        if algorithm is not None:
            _setter("algorithm", algorithm)
        if aws_kms_key_arn is not None:
            _setter("aws_kms_key_arn", aws_kms_key_arn)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="awsKmsKeyArn")
    def aws_kms_key_arn(self) -> Optional[str]:
        return pulumi.get(self, "aws_kms_key_arn")


@pulumi.output_type
class GrantsGrant(dict):
    def __init__(__self__, *,
                 principal: str,
                 privileges: Sequence[str]):
        GrantsGrant._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            principal=principal,
            privileges=privileges,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             principal: str,
             privileges: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("principal", principal)
        _setter("privileges", privileges)

    @property
    @pulumi.getter
    def principal(self) -> str:
        return pulumi.get(self, "principal")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")


@pulumi.output_type
class InstancePoolAwsAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "spotBidPricePercent":
            suggest = "spot_bid_price_percent"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolAwsAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolAwsAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolAwsAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 spot_bid_price_percent: Optional[int] = None,
                 zone_id: Optional[str] = None):
        """
        :param str availability: (String) Availability type used for all instances in the pool. Only `ON_DEMAND` and `SPOT` are supported.
        :param int spot_bid_price_percent: (Integer) The max price for AWS spot instances, as a percentage of the corresponding instance type’s on-demand price. For example, if this field is set to 50, and the instance pool needs a new i3.xlarge spot instance, then the max price is half of the price of on-demand i3.xlarge instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand i3.xlarge instances. If not specified, the *default value is 100*. When spot instances are requested for this instance pool, only spot instances whose max price percentage matches this field are considered. *For safety, this field cannot be greater than 10000.*
        :param str zone_id: (String) Identifier for the availability zone/datacenter in which the instance pool resides. This string is of the form like `"us-west-2a"`. The provided availability zone must be in the same region as the Databricks deployment. For example, `"us-west-2a"` is not a valid zone ID if the Databricks deployment resides in the `"us-east-1"` region. If not specified, a default zone is used. You can find the list of available zones as well as the default value by using the [List Zones API](https://docs.databricks.com/dev-tools/api/latest/clusters.html#clusterclusterservicelistavailablezones).
        """
        InstancePoolAwsAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            spot_bid_price_percent=spot_bid_price_percent,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             spot_bid_price_percent: Optional[int] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'spotBidPricePercent' in kwargs:
            spot_bid_price_percent = kwargs['spotBidPricePercent']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if spot_bid_price_percent is not None:
            _setter("spot_bid_price_percent", spot_bid_price_percent)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        """
        (String) Availability type used for all instances in the pool. Only `ON_DEMAND` and `SPOT` are supported.
        """
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="spotBidPricePercent")
    def spot_bid_price_percent(self) -> Optional[int]:
        """
        (Integer) The max price for AWS spot instances, as a percentage of the corresponding instance type’s on-demand price. For example, if this field is set to 50, and the instance pool needs a new i3.xlarge spot instance, then the max price is half of the price of on-demand i3.xlarge instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand i3.xlarge instances. If not specified, the *default value is 100*. When spot instances are requested for this instance pool, only spot instances whose max price percentage matches this field are considered. *For safety, this field cannot be greater than 10000.*
        """
        return pulumi.get(self, "spot_bid_price_percent")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        """
        (String) Identifier for the availability zone/datacenter in which the instance pool resides. This string is of the form like `"us-west-2a"`. The provided availability zone must be in the same region as the Databricks deployment. For example, `"us-west-2a"` is not a valid zone ID if the Databricks deployment resides in the `"us-east-1"` region. If not specified, a default zone is used. You can find the list of available zones as well as the default value by using the [List Zones API](https://docs.databricks.com/dev-tools/api/latest/clusters.html#clusterclusterservicelistavailablezones).
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class InstancePoolAzureAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "spotBidMaxPrice":
            suggest = "spot_bid_max_price"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolAzureAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolAzureAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolAzureAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 spot_bid_max_price: Optional[float] = None):
        """
        :param str availability: Availability type used for all nodes. Valid values are `SPOT_AZURE` and `ON_DEMAND_AZURE`.
        :param float spot_bid_max_price: The max price for Azure spot instances.  Use `-1` to specify the lowest price.
        """
        InstancePoolAzureAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            spot_bid_max_price=spot_bid_max_price,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             spot_bid_max_price: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'spotBidMaxPrice' in kwargs:
            spot_bid_max_price = kwargs['spotBidMaxPrice']

        if availability is not None:
            _setter("availability", availability)
        if spot_bid_max_price is not None:
            _setter("spot_bid_max_price", spot_bid_max_price)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        """
        Availability type used for all nodes. Valid values are `SPOT_AZURE` and `ON_DEMAND_AZURE`.
        """
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="spotBidMaxPrice")
    def spot_bid_max_price(self) -> Optional[float]:
        """
        The max price for Azure spot instances.  Use `-1` to specify the lowest price.
        """
        return pulumi.get(self, "spot_bid_max_price")


@pulumi.output_type
class InstancePoolDiskSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskCount":
            suggest = "disk_count"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolDiskSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolDiskSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolDiskSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_count: Optional[int] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional['outputs.InstancePoolDiskSpecDiskType'] = None):
        """
        :param int disk_count: (Integer) The number of disks to attach to each instance. This feature is only enabled for supported node types. Users can choose up to the limit of the disks supported by the node type. For node types with no local disk, at least one disk needs to be specified.
        :param int disk_size: (Integer) The size of each disk (in GiB) to attach.
        """
        InstancePoolDiskSpec._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_count=disk_count,
            disk_size=disk_size,
            disk_type=disk_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_count: Optional[int] = None,
             disk_size: Optional[int] = None,
             disk_type: Optional['outputs.InstancePoolDiskSpecDiskType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'diskCount' in kwargs:
            disk_count = kwargs['diskCount']
        if 'diskSize' in kwargs:
            disk_size = kwargs['diskSize']
        if 'diskType' in kwargs:
            disk_type = kwargs['diskType']

        if disk_count is not None:
            _setter("disk_count", disk_count)
        if disk_size is not None:
            _setter("disk_size", disk_size)
        if disk_type is not None:
            _setter("disk_type", disk_type)

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> Optional[int]:
        """
        (Integer) The number of disks to attach to each instance. This feature is only enabled for supported node types. Users can choose up to the limit of the disks supported by the node type. For node types with no local disk, at least one disk needs to be specified.
        """
        return pulumi.get(self, "disk_count")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        (Integer) The size of each disk (in GiB) to attach.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional['outputs.InstancePoolDiskSpecDiskType']:
        return pulumi.get(self, "disk_type")


@pulumi.output_type
class InstancePoolDiskSpecDiskType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureDiskVolumeType":
            suggest = "azure_disk_volume_type"
        elif key == "ebsVolumeType":
            suggest = "ebs_volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolDiskSpecDiskType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolDiskSpecDiskType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolDiskSpecDiskType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_disk_volume_type: Optional[str] = None,
                 ebs_volume_type: Optional[str] = None):
        InstancePoolDiskSpecDiskType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            azure_disk_volume_type=azure_disk_volume_type,
            ebs_volume_type=ebs_volume_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             azure_disk_volume_type: Optional[str] = None,
             ebs_volume_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'azureDiskVolumeType' in kwargs:
            azure_disk_volume_type = kwargs['azureDiskVolumeType']
        if 'ebsVolumeType' in kwargs:
            ebs_volume_type = kwargs['ebsVolumeType']

        if azure_disk_volume_type is not None:
            _setter("azure_disk_volume_type", azure_disk_volume_type)
        if ebs_volume_type is not None:
            _setter("ebs_volume_type", ebs_volume_type)

    @property
    @pulumi.getter(name="azureDiskVolumeType")
    def azure_disk_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "azure_disk_volume_type")

    @property
    @pulumi.getter(name="ebsVolumeType")
    def ebs_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "ebs_volume_type")


@pulumi.output_type
class InstancePoolGcpAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcpAvailability":
            suggest = "gcp_availability"
        elif key == "localSsdCount":
            suggest = "local_ssd_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolGcpAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolGcpAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolGcpAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gcp_availability: Optional[str] = None,
                 local_ssd_count: Optional[int] = None):
        """
        :param str gcp_availability: Availability type used for all nodes. Valid values are `PREEMPTIBLE_GCP`, `PREEMPTIBLE_WITH_FALLBACK_GCP` and `ON_DEMAND_GCP`, default: `ON_DEMAND_GCP`.
        :param int local_ssd_count: Number of local SSD disks (each is 375GB in size) that will be attached to each node of the cluster.
        """
        InstancePoolGcpAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gcp_availability=gcp_availability,
            local_ssd_count=local_ssd_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gcp_availability: Optional[str] = None,
             local_ssd_count: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'gcpAvailability' in kwargs:
            gcp_availability = kwargs['gcpAvailability']
        if 'localSsdCount' in kwargs:
            local_ssd_count = kwargs['localSsdCount']

        if gcp_availability is not None:
            _setter("gcp_availability", gcp_availability)
        if local_ssd_count is not None:
            _setter("local_ssd_count", local_ssd_count)

    @property
    @pulumi.getter(name="gcpAvailability")
    def gcp_availability(self) -> Optional[str]:
        """
        Availability type used for all nodes. Valid values are `PREEMPTIBLE_GCP`, `PREEMPTIBLE_WITH_FALLBACK_GCP` and `ON_DEMAND_GCP`, default: `ON_DEMAND_GCP`.
        """
        return pulumi.get(self, "gcp_availability")

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[int]:
        """
        Number of local SSD disks (each is 375GB in size) that will be attached to each node of the cluster.
        """
        return pulumi.get(self, "local_ssd_count")


@pulumi.output_type
class InstancePoolInstancePoolFleetAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "launchTemplateOverrides":
            suggest = "launch_template_overrides"
        elif key == "fleetOnDemandOption":
            suggest = "fleet_on_demand_option"
        elif key == "fleetSpotOption":
            suggest = "fleet_spot_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolInstancePoolFleetAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolInstancePoolFleetAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolInstancePoolFleetAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 launch_template_overrides: Sequence['outputs.InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride'],
                 fleet_on_demand_option: Optional['outputs.InstancePoolInstancePoolFleetAttributesFleetOnDemandOption'] = None,
                 fleet_spot_option: Optional['outputs.InstancePoolInstancePoolFleetAttributesFleetSpotOption'] = None):
        InstancePoolInstancePoolFleetAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            launch_template_overrides=launch_template_overrides,
            fleet_on_demand_option=fleet_on_demand_option,
            fleet_spot_option=fleet_spot_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             launch_template_overrides: Sequence['outputs.InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride'],
             fleet_on_demand_option: Optional['outputs.InstancePoolInstancePoolFleetAttributesFleetOnDemandOption'] = None,
             fleet_spot_option: Optional['outputs.InstancePoolInstancePoolFleetAttributesFleetSpotOption'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'launchTemplateOverrides' in kwargs:
            launch_template_overrides = kwargs['launchTemplateOverrides']
        if 'fleetOnDemandOption' in kwargs:
            fleet_on_demand_option = kwargs['fleetOnDemandOption']
        if 'fleetSpotOption' in kwargs:
            fleet_spot_option = kwargs['fleetSpotOption']

        _setter("launch_template_overrides", launch_template_overrides)
        if fleet_on_demand_option is not None:
            _setter("fleet_on_demand_option", fleet_on_demand_option)
        if fleet_spot_option is not None:
            _setter("fleet_spot_option", fleet_spot_option)

    @property
    @pulumi.getter(name="launchTemplateOverrides")
    def launch_template_overrides(self) -> Sequence['outputs.InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride']:
        return pulumi.get(self, "launch_template_overrides")

    @property
    @pulumi.getter(name="fleetOnDemandOption")
    def fleet_on_demand_option(self) -> Optional['outputs.InstancePoolInstancePoolFleetAttributesFleetOnDemandOption']:
        return pulumi.get(self, "fleet_on_demand_option")

    @property
    @pulumi.getter(name="fleetSpotOption")
    def fleet_spot_option(self) -> Optional['outputs.InstancePoolInstancePoolFleetAttributesFleetSpotOption']:
        return pulumi.get(self, "fleet_spot_option")


@pulumi.output_type
class InstancePoolInstancePoolFleetAttributesFleetOnDemandOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocationStrategy":
            suggest = "allocation_strategy"
        elif key == "instancePoolsToUseCount":
            suggest = "instance_pools_to_use_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolInstancePoolFleetAttributesFleetOnDemandOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolInstancePoolFleetAttributesFleetOnDemandOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolInstancePoolFleetAttributesFleetOnDemandOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allocation_strategy: str,
                 instance_pools_to_use_count: Optional[int] = None):
        InstancePoolInstancePoolFleetAttributesFleetOnDemandOption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allocation_strategy=allocation_strategy,
            instance_pools_to_use_count=instance_pools_to_use_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allocation_strategy: str,
             instance_pools_to_use_count: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allocationStrategy' in kwargs:
            allocation_strategy = kwargs['allocationStrategy']
        if 'instancePoolsToUseCount' in kwargs:
            instance_pools_to_use_count = kwargs['instancePoolsToUseCount']

        _setter("allocation_strategy", allocation_strategy)
        if instance_pools_to_use_count is not None:
            _setter("instance_pools_to_use_count", instance_pools_to_use_count)

    @property
    @pulumi.getter(name="allocationStrategy")
    def allocation_strategy(self) -> str:
        return pulumi.get(self, "allocation_strategy")

    @property
    @pulumi.getter(name="instancePoolsToUseCount")
    def instance_pools_to_use_count(self) -> Optional[int]:
        return pulumi.get(self, "instance_pools_to_use_count")


@pulumi.output_type
class InstancePoolInstancePoolFleetAttributesFleetSpotOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allocationStrategy":
            suggest = "allocation_strategy"
        elif key == "instancePoolsToUseCount":
            suggest = "instance_pools_to_use_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolInstancePoolFleetAttributesFleetSpotOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolInstancePoolFleetAttributesFleetSpotOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolInstancePoolFleetAttributesFleetSpotOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allocation_strategy: str,
                 instance_pools_to_use_count: Optional[int] = None):
        InstancePoolInstancePoolFleetAttributesFleetSpotOption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allocation_strategy=allocation_strategy,
            instance_pools_to_use_count=instance_pools_to_use_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allocation_strategy: str,
             instance_pools_to_use_count: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allocationStrategy' in kwargs:
            allocation_strategy = kwargs['allocationStrategy']
        if 'instancePoolsToUseCount' in kwargs:
            instance_pools_to_use_count = kwargs['instancePoolsToUseCount']

        _setter("allocation_strategy", allocation_strategy)
        if instance_pools_to_use_count is not None:
            _setter("instance_pools_to_use_count", instance_pools_to_use_count)

    @property
    @pulumi.getter(name="allocationStrategy")
    def allocation_strategy(self) -> str:
        return pulumi.get(self, "allocation_strategy")

    @property
    @pulumi.getter(name="instancePoolsToUseCount")
    def instance_pools_to_use_count(self) -> Optional[int]:
        return pulumi.get(self, "instance_pools_to_use_count")


@pulumi.output_type
class InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "instanceType":
            suggest = "instance_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: str,
                 instance_type: str):
        InstancePoolInstancePoolFleetAttributesLaunchTemplateOverride._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_zone=availability_zone,
            instance_type=instance_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_zone: str,
             instance_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'availabilityZone' in kwargs:
            availability_zone = kwargs['availabilityZone']
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']

        _setter("availability_zone", availability_zone)
        _setter("instance_type", instance_type)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")


@pulumi.output_type
class InstancePoolPreloadedDockerImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolPreloadedDockerImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolPreloadedDockerImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolPreloadedDockerImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 basic_auth: Optional['outputs.InstancePoolPreloadedDockerImageBasicAuth'] = None):
        InstancePoolPreloadedDockerImage._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            basic_auth=basic_auth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             basic_auth: Optional['outputs.InstancePoolPreloadedDockerImageBasicAuth'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'basicAuth' in kwargs:
            basic_auth = kwargs['basicAuth']

        _setter("url", url)
        if basic_auth is not None:
            _setter("basic_auth", basic_auth)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.InstancePoolPreloadedDockerImageBasicAuth']:
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class InstancePoolPreloadedDockerImageBasicAuth(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        InstancePoolPreloadedDockerImageBasicAuth._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class JobCompute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeKey":
            suggest = "compute_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobCompute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobCompute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobCompute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_key: Optional[str] = None,
                 spec: Optional['outputs.JobComputeSpec'] = None):
        JobCompute._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compute_key=compute_key,
            spec=spec,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compute_key: Optional[str] = None,
             spec: Optional['outputs.JobComputeSpec'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'computeKey' in kwargs:
            compute_key = kwargs['computeKey']

        if compute_key is not None:
            _setter("compute_key", compute_key)
        if spec is not None:
            _setter("spec", spec)

    @property
    @pulumi.getter(name="computeKey")
    def compute_key(self) -> Optional[str]:
        return pulumi.get(self, "compute_key")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.JobComputeSpec']:
        return pulumi.get(self, "spec")


@pulumi.output_type
class JobComputeSpec(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None):
        JobComputeSpec._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kind=kind,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kind: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if kind is not None:
            _setter("kind", kind)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")


@pulumi.output_type
class JobContinuous(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pauseStatus":
            suggest = "pause_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobContinuous. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobContinuous.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobContinuous.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pause_status: Optional[str] = None):
        """
        :param str pause_status: Indicate whether this continuous job is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pause_status` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pause_status`.
        """
        JobContinuous._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pause_status=pause_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pause_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'pauseStatus' in kwargs:
            pause_status = kwargs['pauseStatus']

        if pause_status is not None:
            _setter("pause_status", pause_status)

    @property
    @pulumi.getter(name="pauseStatus")
    def pause_status(self) -> Optional[str]:
        """
        Indicate whether this continuous job is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pause_status` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pause_status`.
        """
        return pulumi.get(self, "pause_status")


@pulumi.output_type
class JobDbtTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "profilesDirectory":
            suggest = "profiles_directory"
        elif key == "projectDirectory":
            suggest = "project_directory"
        elif key == "warehouseId":
            suggest = "warehouse_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobDbtTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobDbtTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobDbtTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 commands: Sequence[str],
                 catalog: Optional[str] = None,
                 profiles_directory: Optional[str] = None,
                 project_directory: Optional[str] = None,
                 schema: Optional[str] = None,
                 warehouse_id: Optional[str] = None):
        """
        :param Sequence[str] commands: (Array) Series of dbt commands to execute in sequence. Every command must start with "dbt".
        :param str catalog: The name of the catalog to use inside Unity Catalog.
        :param str profiles_directory: The relative path to the directory in the repository specified by `git_source` where dbt should look in for the `profiles.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--profile-dir` to a dbt command.
        :param str project_directory: The relative path to the directory in the repository specified in `git_source` where dbt should look in for the `dbt_project.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--project-dir` to a dbt command.
        :param str schema: The name of the schema dbt should run in. Defaults to `default`.
        :param str warehouse_id: The ID of the SQL warehouse that dbt should execute against.
               
               You also need to include a `git_source` block to configure the repository that contains the dbt project.
        """
        JobDbtTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            commands=commands,
            catalog=catalog,
            profiles_directory=profiles_directory,
            project_directory=project_directory,
            schema=schema,
            warehouse_id=warehouse_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             commands: Sequence[str],
             catalog: Optional[str] = None,
             profiles_directory: Optional[str] = None,
             project_directory: Optional[str] = None,
             schema: Optional[str] = None,
             warehouse_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'profilesDirectory' in kwargs:
            profiles_directory = kwargs['profilesDirectory']
        if 'projectDirectory' in kwargs:
            project_directory = kwargs['projectDirectory']
        if 'warehouseId' in kwargs:
            warehouse_id = kwargs['warehouseId']

        _setter("commands", commands)
        if catalog is not None:
            _setter("catalog", catalog)
        if profiles_directory is not None:
            _setter("profiles_directory", profiles_directory)
        if project_directory is not None:
            _setter("project_directory", project_directory)
        if schema is not None:
            _setter("schema", schema)
        if warehouse_id is not None:
            _setter("warehouse_id", warehouse_id)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[str]:
        """
        (Array) Series of dbt commands to execute in sequence. Every command must start with "dbt".
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def catalog(self) -> Optional[str]:
        """
        The name of the catalog to use inside Unity Catalog.
        """
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="profilesDirectory")
    def profiles_directory(self) -> Optional[str]:
        """
        The relative path to the directory in the repository specified by `git_source` where dbt should look in for the `profiles.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--profile-dir` to a dbt command.
        """
        return pulumi.get(self, "profiles_directory")

    @property
    @pulumi.getter(name="projectDirectory")
    def project_directory(self) -> Optional[str]:
        """
        The relative path to the directory in the repository specified in `git_source` where dbt should look in for the `dbt_project.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--project-dir` to a dbt command.
        """
        return pulumi.get(self, "project_directory")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        The name of the schema dbt should run in. Defaults to `default`.
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="warehouseId")
    def warehouse_id(self) -> Optional[str]:
        """
        The ID of the SQL warehouse that dbt should execute against.

        You also need to include a `git_source` block to configure the repository that contains the dbt project.
        """
        return pulumi.get(self, "warehouse_id")


@pulumi.output_type
class JobEmailNotifications(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertOnLastAttempt":
            suggest = "alert_on_last_attempt"
        elif key == "noAlertForSkippedRuns":
            suggest = "no_alert_for_skipped_runs"
        elif key == "onDurationWarningThresholdExceededs":
            suggest = "on_duration_warning_threshold_exceededs"
        elif key == "onFailures":
            suggest = "on_failures"
        elif key == "onStarts":
            suggest = "on_starts"
        elif key == "onSuccesses":
            suggest = "on_successes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobEmailNotifications. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobEmailNotifications.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobEmailNotifications.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_on_last_attempt: Optional[bool] = None,
                 no_alert_for_skipped_runs: Optional[bool] = None,
                 on_duration_warning_threshold_exceededs: Optional[Sequence[str]] = None,
                 on_failures: Optional[Sequence[str]] = None,
                 on_starts: Optional[Sequence[str]] = None,
                 on_successes: Optional[Sequence[str]] = None):
        """
        :param bool alert_on_last_attempt: (Bool) do not send notifications to recipients specified in `on_start` for the retried runs and do not send notifications to recipients specified in `on_failure` until the last retry of the run.
        :param bool no_alert_for_skipped_runs: (Bool) don't send alert for skipped runs. (It's recommended to use the corresponding setting in the `notification_settings` configuration block).
        :param Sequence[str] on_duration_warning_threshold_exceededs: (List) list of emails to notify when the duration of a run exceeds the threshold specified by the `RUN_DURATION_SECONDS` metric in the `health` block.
        :param Sequence[str] on_failures: (List) list of emails to notify when the run fails.
        :param Sequence[str] on_starts: (List) list of emails to notify when the run starts.
        :param Sequence[str] on_successes: (List) list of emails to notify when the run completes successfully.
        """
        JobEmailNotifications._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert_on_last_attempt=alert_on_last_attempt,
            no_alert_for_skipped_runs=no_alert_for_skipped_runs,
            on_duration_warning_threshold_exceededs=on_duration_warning_threshold_exceededs,
            on_failures=on_failures,
            on_starts=on_starts,
            on_successes=on_successes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert_on_last_attempt: Optional[bool] = None,
             no_alert_for_skipped_runs: Optional[bool] = None,
             on_duration_warning_threshold_exceededs: Optional[Sequence[str]] = None,
             on_failures: Optional[Sequence[str]] = None,
             on_starts: Optional[Sequence[str]] = None,
             on_successes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'alertOnLastAttempt' in kwargs:
            alert_on_last_attempt = kwargs['alertOnLastAttempt']
        if 'noAlertForSkippedRuns' in kwargs:
            no_alert_for_skipped_runs = kwargs['noAlertForSkippedRuns']
        if 'onDurationWarningThresholdExceededs' in kwargs:
            on_duration_warning_threshold_exceededs = kwargs['onDurationWarningThresholdExceededs']
        if 'onFailures' in kwargs:
            on_failures = kwargs['onFailures']
        if 'onStarts' in kwargs:
            on_starts = kwargs['onStarts']
        if 'onSuccesses' in kwargs:
            on_successes = kwargs['onSuccesses']

        if alert_on_last_attempt is not None:
            _setter("alert_on_last_attempt", alert_on_last_attempt)
        if no_alert_for_skipped_runs is not None:
            _setter("no_alert_for_skipped_runs", no_alert_for_skipped_runs)
        if on_duration_warning_threshold_exceededs is not None:
            _setter("on_duration_warning_threshold_exceededs", on_duration_warning_threshold_exceededs)
        if on_failures is not None:
            _setter("on_failures", on_failures)
        if on_starts is not None:
            _setter("on_starts", on_starts)
        if on_successes is not None:
            _setter("on_successes", on_successes)

    @property
    @pulumi.getter(name="alertOnLastAttempt")
    def alert_on_last_attempt(self) -> Optional[bool]:
        """
        (Bool) do not send notifications to recipients specified in `on_start` for the retried runs and do not send notifications to recipients specified in `on_failure` until the last retry of the run.
        """
        return pulumi.get(self, "alert_on_last_attempt")

    @property
    @pulumi.getter(name="noAlertForSkippedRuns")
    def no_alert_for_skipped_runs(self) -> Optional[bool]:
        """
        (Bool) don't send alert for skipped runs. (It's recommended to use the corresponding setting in the `notification_settings` configuration block).
        """
        return pulumi.get(self, "no_alert_for_skipped_runs")

    @property
    @pulumi.getter(name="onDurationWarningThresholdExceededs")
    def on_duration_warning_threshold_exceededs(self) -> Optional[Sequence[str]]:
        """
        (List) list of emails to notify when the duration of a run exceeds the threshold specified by the `RUN_DURATION_SECONDS` metric in the `health` block.
        """
        return pulumi.get(self, "on_duration_warning_threshold_exceededs")

    @property
    @pulumi.getter(name="onFailures")
    def on_failures(self) -> Optional[Sequence[str]]:
        """
        (List) list of emails to notify when the run fails.
        """
        return pulumi.get(self, "on_failures")

    @property
    @pulumi.getter(name="onStarts")
    def on_starts(self) -> Optional[Sequence[str]]:
        """
        (List) list of emails to notify when the run starts.
        """
        return pulumi.get(self, "on_starts")

    @property
    @pulumi.getter(name="onSuccesses")
    def on_successes(self) -> Optional[Sequence[str]]:
        """
        (List) list of emails to notify when the run completes successfully.
        """
        return pulumi.get(self, "on_successes")


@pulumi.output_type
class JobGitSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobSource":
            suggest = "job_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobGitSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobGitSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobGitSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 branch: Optional[str] = None,
                 commit: Optional[str] = None,
                 job_source: Optional['outputs.JobGitSourceJobSource'] = None,
                 provider: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        :param str url: URL of the Git repository to use.
        :param str branch: name of the Git branch to use. Conflicts with `tag` and `commit`.
        :param str commit: hash of Git commit to use. Conflicts with `branch` and `tag`.
        :param str provider: case insensitive name of the Git provider.  Following values are supported right now (could be a subject for change, consult [Repos API documentation](https://docs.databricks.com/dev-tools/api/latest/repos.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`.
        :param str tag: name of the Git branch to use. Conflicts with `branch` and `commit`.
        """
        JobGitSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            branch=branch,
            commit=commit,
            job_source=job_source,
            provider=provider,
            tag=tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             branch: Optional[str] = None,
             commit: Optional[str] = None,
             job_source: Optional['outputs.JobGitSourceJobSource'] = None,
             provider: Optional[str] = None,
             tag: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jobSource' in kwargs:
            job_source = kwargs['jobSource']

        _setter("url", url)
        if branch is not None:
            _setter("branch", branch)
        if commit is not None:
            _setter("commit", commit)
        if job_source is not None:
            _setter("job_source", job_source)
        if provider is not None:
            _setter("provider", provider)
        if tag is not None:
            _setter("tag", tag)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of the Git repository to use.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        """
        name of the Git branch to use. Conflicts with `tag` and `commit`.
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def commit(self) -> Optional[str]:
        """
        hash of Git commit to use. Conflicts with `branch` and `tag`.
        """
        return pulumi.get(self, "commit")

    @property
    @pulumi.getter(name="jobSource")
    def job_source(self) -> Optional['outputs.JobGitSourceJobSource']:
        return pulumi.get(self, "job_source")

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        """
        case insensitive name of the Git provider.  Following values are supported right now (could be a subject for change, consult [Repos API documentation](https://docs.databricks.com/dev-tools/api/latest/repos.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`.
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        name of the Git branch to use. Conflicts with `branch` and `commit`.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class JobGitSourceJobSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "importFromGitBranch":
            suggest = "import_from_git_branch"
        elif key == "jobConfigPath":
            suggest = "job_config_path"
        elif key == "dirtyState":
            suggest = "dirty_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobGitSourceJobSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobGitSourceJobSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobGitSourceJobSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 import_from_git_branch: str,
                 job_config_path: str,
                 dirty_state: Optional[str] = None):
        JobGitSourceJobSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            import_from_git_branch=import_from_git_branch,
            job_config_path=job_config_path,
            dirty_state=dirty_state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             import_from_git_branch: str,
             job_config_path: str,
             dirty_state: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'importFromGitBranch' in kwargs:
            import_from_git_branch = kwargs['importFromGitBranch']
        if 'jobConfigPath' in kwargs:
            job_config_path = kwargs['jobConfigPath']
        if 'dirtyState' in kwargs:
            dirty_state = kwargs['dirtyState']

        _setter("import_from_git_branch", import_from_git_branch)
        _setter("job_config_path", job_config_path)
        if dirty_state is not None:
            _setter("dirty_state", dirty_state)

    @property
    @pulumi.getter(name="importFromGitBranch")
    def import_from_git_branch(self) -> str:
        return pulumi.get(self, "import_from_git_branch")

    @property
    @pulumi.getter(name="jobConfigPath")
    def job_config_path(self) -> str:
        return pulumi.get(self, "job_config_path")

    @property
    @pulumi.getter(name="dirtyState")
    def dirty_state(self) -> Optional[str]:
        return pulumi.get(self, "dirty_state")


@pulumi.output_type
class JobHealth(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.JobHealthRule']):
        """
        :param Sequence['JobHealthRuleArgs'] rules: list of rules that are represented as objects with the following attributes:
        """
        JobHealth._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rules: Sequence['outputs.JobHealthRule'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.JobHealthRule']:
        """
        list of rules that are represented as objects with the following attributes:
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class JobHealthRule(dict):
    def __init__(__self__, *,
                 metric: Optional[str] = None,
                 op: Optional[str] = None,
                 value: Optional[int] = None):
        """
        :param str metric: string specifying the metric to check.  The only supported metric is `RUN_DURATION_SECONDS` (check [Jobs REST API documentation](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
        :param str op: string specifying the operation used to evaluate the given metric. The only supported operation is `GREATER_THAN`.
        :param int value: integer value used to compare to the given metric.
        """
        JobHealthRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric=metric,
            op=op,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric: Optional[str] = None,
             op: Optional[str] = None,
             value: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if metric is not None:
            _setter("metric", metric)
        if op is not None:
            _setter("op", op)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        """
        string specifying the metric to check.  The only supported metric is `RUN_DURATION_SECONDS` (check [Jobs REST API documentation](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def op(self) -> Optional[str]:
        """
        string specifying the operation used to evaluate the given metric. The only supported operation is `GREATER_THAN`.
        """
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        """
        integer value used to compare to the given metric.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class JobJobCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobClusterKey":
            suggest = "job_cluster_key"
        elif key == "newCluster":
            suggest = "new_cluster"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_cluster_key: Optional[str] = None,
                 new_cluster: Optional['outputs.JobJobClusterNewCluster'] = None):
        """
        :param str job_cluster_key: Identifier that can be referenced in `task` block, so that cluster is shared between tasks
        :param 'JobJobClusterNewClusterArgs' new_cluster: Same set of parameters as for Cluster resource.
        """
        JobJobCluster._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            job_cluster_key=job_cluster_key,
            new_cluster=new_cluster,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             job_cluster_key: Optional[str] = None,
             new_cluster: Optional['outputs.JobJobClusterNewCluster'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jobClusterKey' in kwargs:
            job_cluster_key = kwargs['jobClusterKey']
        if 'newCluster' in kwargs:
            new_cluster = kwargs['newCluster']

        if job_cluster_key is not None:
            _setter("job_cluster_key", job_cluster_key)
        if new_cluster is not None:
            _setter("new_cluster", new_cluster)

    @property
    @pulumi.getter(name="jobClusterKey")
    def job_cluster_key(self) -> Optional[str]:
        """
        Identifier that can be referenced in `task` block, so that cluster is shared between tasks
        """
        return pulumi.get(self, "job_cluster_key")

    @property
    @pulumi.getter(name="newCluster")
    def new_cluster(self) -> Optional['outputs.JobJobClusterNewCluster']:
        """
        Same set of parameters as for Cluster resource.
        """
        return pulumi.get(self, "new_cluster")


@pulumi.output_type
class JobJobClusterNewCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sparkVersion":
            suggest = "spark_version"
        elif key == "applyPolicyDefaultValues":
            suggest = "apply_policy_default_values"
        elif key == "autoterminationMinutes":
            suggest = "autotermination_minutes"
        elif key == "awsAttributes":
            suggest = "aws_attributes"
        elif key == "azureAttributes":
            suggest = "azure_attributes"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterLogConf":
            suggest = "cluster_log_conf"
        elif key == "clusterMountInfos":
            suggest = "cluster_mount_infos"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "customTags":
            suggest = "custom_tags"
        elif key == "dataSecurityMode":
            suggest = "data_security_mode"
        elif key == "dockerImage":
            suggest = "docker_image"
        elif key == "driverInstancePoolId":
            suggest = "driver_instance_pool_id"
        elif key == "driverNodeTypeId":
            suggest = "driver_node_type_id"
        elif key == "enableElasticDisk":
            suggest = "enable_elastic_disk"
        elif key == "enableLocalDiskEncryption":
            suggest = "enable_local_disk_encryption"
        elif key == "gcpAttributes":
            suggest = "gcp_attributes"
        elif key == "idempotencyToken":
            suggest = "idempotency_token"
        elif key == "initScripts":
            suggest = "init_scripts"
        elif key == "instancePoolId":
            suggest = "instance_pool_id"
        elif key == "nodeTypeId":
            suggest = "node_type_id"
        elif key == "numWorkers":
            suggest = "num_workers"
        elif key == "policyId":
            suggest = "policy_id"
        elif key == "runtimeEngine":
            suggest = "runtime_engine"
        elif key == "singleUserName":
            suggest = "single_user_name"
        elif key == "sparkConf":
            suggest = "spark_conf"
        elif key == "sparkEnvVars":
            suggest = "spark_env_vars"
        elif key == "sshPublicKeys":
            suggest = "ssh_public_keys"
        elif key == "workloadType":
            suggest = "workload_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobClusterNewCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobClusterNewCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobClusterNewCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 spark_version: str,
                 apply_policy_default_values: Optional[bool] = None,
                 autoscale: Optional['outputs.JobJobClusterNewClusterAutoscale'] = None,
                 autotermination_minutes: Optional[int] = None,
                 aws_attributes: Optional['outputs.JobJobClusterNewClusterAwsAttributes'] = None,
                 azure_attributes: Optional['outputs.JobJobClusterNewClusterAzureAttributes'] = None,
                 cluster_id: Optional[str] = None,
                 cluster_log_conf: Optional['outputs.JobJobClusterNewClusterClusterLogConf'] = None,
                 cluster_mount_infos: Optional[Sequence['outputs.JobJobClusterNewClusterClusterMountInfo']] = None,
                 cluster_name: Optional[str] = None,
                 custom_tags: Optional[Mapping[str, Any]] = None,
                 data_security_mode: Optional[str] = None,
                 docker_image: Optional['outputs.JobJobClusterNewClusterDockerImage'] = None,
                 driver_instance_pool_id: Optional[str] = None,
                 driver_node_type_id: Optional[str] = None,
                 enable_elastic_disk: Optional[bool] = None,
                 enable_local_disk_encryption: Optional[bool] = None,
                 gcp_attributes: Optional['outputs.JobJobClusterNewClusterGcpAttributes'] = None,
                 idempotency_token: Optional[str] = None,
                 init_scripts: Optional[Sequence['outputs.JobJobClusterNewClusterInitScript']] = None,
                 instance_pool_id: Optional[str] = None,
                 node_type_id: Optional[str] = None,
                 num_workers: Optional[int] = None,
                 policy_id: Optional[str] = None,
                 runtime_engine: Optional[str] = None,
                 single_user_name: Optional[str] = None,
                 spark_conf: Optional[Mapping[str, Any]] = None,
                 spark_env_vars: Optional[Mapping[str, Any]] = None,
                 ssh_public_keys: Optional[Sequence[str]] = None,
                 workload_type: Optional['outputs.JobJobClusterNewClusterWorkloadType'] = None):
        JobJobClusterNewCluster._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            spark_version=spark_version,
            apply_policy_default_values=apply_policy_default_values,
            autoscale=autoscale,
            autotermination_minutes=autotermination_minutes,
            aws_attributes=aws_attributes,
            azure_attributes=azure_attributes,
            cluster_id=cluster_id,
            cluster_log_conf=cluster_log_conf,
            cluster_mount_infos=cluster_mount_infos,
            cluster_name=cluster_name,
            custom_tags=custom_tags,
            data_security_mode=data_security_mode,
            docker_image=docker_image,
            driver_instance_pool_id=driver_instance_pool_id,
            driver_node_type_id=driver_node_type_id,
            enable_elastic_disk=enable_elastic_disk,
            enable_local_disk_encryption=enable_local_disk_encryption,
            gcp_attributes=gcp_attributes,
            idempotency_token=idempotency_token,
            init_scripts=init_scripts,
            instance_pool_id=instance_pool_id,
            node_type_id=node_type_id,
            num_workers=num_workers,
            policy_id=policy_id,
            runtime_engine=runtime_engine,
            single_user_name=single_user_name,
            spark_conf=spark_conf,
            spark_env_vars=spark_env_vars,
            ssh_public_keys=ssh_public_keys,
            workload_type=workload_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             spark_version: str,
             apply_policy_default_values: Optional[bool] = None,
             autoscale: Optional['outputs.JobJobClusterNewClusterAutoscale'] = None,
             autotermination_minutes: Optional[int] = None,
             aws_attributes: Optional['outputs.JobJobClusterNewClusterAwsAttributes'] = None,
             azure_attributes: Optional['outputs.JobJobClusterNewClusterAzureAttributes'] = None,
             cluster_id: Optional[str] = None,
             cluster_log_conf: Optional['outputs.JobJobClusterNewClusterClusterLogConf'] = None,
             cluster_mount_infos: Optional[Sequence['outputs.JobJobClusterNewClusterClusterMountInfo']] = None,
             cluster_name: Optional[str] = None,
             custom_tags: Optional[Mapping[str, Any]] = None,
             data_security_mode: Optional[str] = None,
             docker_image: Optional['outputs.JobJobClusterNewClusterDockerImage'] = None,
             driver_instance_pool_id: Optional[str] = None,
             driver_node_type_id: Optional[str] = None,
             enable_elastic_disk: Optional[bool] = None,
             enable_local_disk_encryption: Optional[bool] = None,
             gcp_attributes: Optional['outputs.JobJobClusterNewClusterGcpAttributes'] = None,
             idempotency_token: Optional[str] = None,
             init_scripts: Optional[Sequence['outputs.JobJobClusterNewClusterInitScript']] = None,
             instance_pool_id: Optional[str] = None,
             node_type_id: Optional[str] = None,
             num_workers: Optional[int] = None,
             policy_id: Optional[str] = None,
             runtime_engine: Optional[str] = None,
             single_user_name: Optional[str] = None,
             spark_conf: Optional[Mapping[str, Any]] = None,
             spark_env_vars: Optional[Mapping[str, Any]] = None,
             ssh_public_keys: Optional[Sequence[str]] = None,
             workload_type: Optional['outputs.JobJobClusterNewClusterWorkloadType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sparkVersion' in kwargs:
            spark_version = kwargs['sparkVersion']
        if 'applyPolicyDefaultValues' in kwargs:
            apply_policy_default_values = kwargs['applyPolicyDefaultValues']
        if 'autoterminationMinutes' in kwargs:
            autotermination_minutes = kwargs['autoterminationMinutes']
        if 'awsAttributes' in kwargs:
            aws_attributes = kwargs['awsAttributes']
        if 'azureAttributes' in kwargs:
            azure_attributes = kwargs['azureAttributes']
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'clusterLogConf' in kwargs:
            cluster_log_conf = kwargs['clusterLogConf']
        if 'clusterMountInfos' in kwargs:
            cluster_mount_infos = kwargs['clusterMountInfos']
        if 'clusterName' in kwargs:
            cluster_name = kwargs['clusterName']
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']
        if 'dataSecurityMode' in kwargs:
            data_security_mode = kwargs['dataSecurityMode']
        if 'dockerImage' in kwargs:
            docker_image = kwargs['dockerImage']
        if 'driverInstancePoolId' in kwargs:
            driver_instance_pool_id = kwargs['driverInstancePoolId']
        if 'driverNodeTypeId' in kwargs:
            driver_node_type_id = kwargs['driverNodeTypeId']
        if 'enableElasticDisk' in kwargs:
            enable_elastic_disk = kwargs['enableElasticDisk']
        if 'enableLocalDiskEncryption' in kwargs:
            enable_local_disk_encryption = kwargs['enableLocalDiskEncryption']
        if 'gcpAttributes' in kwargs:
            gcp_attributes = kwargs['gcpAttributes']
        if 'idempotencyToken' in kwargs:
            idempotency_token = kwargs['idempotencyToken']
        if 'initScripts' in kwargs:
            init_scripts = kwargs['initScripts']
        if 'instancePoolId' in kwargs:
            instance_pool_id = kwargs['instancePoolId']
        if 'nodeTypeId' in kwargs:
            node_type_id = kwargs['nodeTypeId']
        if 'numWorkers' in kwargs:
            num_workers = kwargs['numWorkers']
        if 'policyId' in kwargs:
            policy_id = kwargs['policyId']
        if 'runtimeEngine' in kwargs:
            runtime_engine = kwargs['runtimeEngine']
        if 'singleUserName' in kwargs:
            single_user_name = kwargs['singleUserName']
        if 'sparkConf' in kwargs:
            spark_conf = kwargs['sparkConf']
        if 'sparkEnvVars' in kwargs:
            spark_env_vars = kwargs['sparkEnvVars']
        if 'sshPublicKeys' in kwargs:
            ssh_public_keys = kwargs['sshPublicKeys']
        if 'workloadType' in kwargs:
            workload_type = kwargs['workloadType']

        _setter("spark_version", spark_version)
        if apply_policy_default_values is not None:
            _setter("apply_policy_default_values", apply_policy_default_values)
        if autoscale is not None:
            _setter("autoscale", autoscale)
        if autotermination_minutes is not None:
            _setter("autotermination_minutes", autotermination_minutes)
        if aws_attributes is not None:
            _setter("aws_attributes", aws_attributes)
        if azure_attributes is not None:
            _setter("azure_attributes", azure_attributes)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if cluster_log_conf is not None:
            _setter("cluster_log_conf", cluster_log_conf)
        if cluster_mount_infos is not None:
            _setter("cluster_mount_infos", cluster_mount_infos)
        if cluster_name is not None:
            _setter("cluster_name", cluster_name)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)
        if data_security_mode is not None:
            _setter("data_security_mode", data_security_mode)
        if docker_image is not None:
            _setter("docker_image", docker_image)
        if driver_instance_pool_id is not None:
            _setter("driver_instance_pool_id", driver_instance_pool_id)
        if driver_node_type_id is not None:
            _setter("driver_node_type_id", driver_node_type_id)
        if enable_elastic_disk is not None:
            _setter("enable_elastic_disk", enable_elastic_disk)
        if enable_local_disk_encryption is not None:
            _setter("enable_local_disk_encryption", enable_local_disk_encryption)
        if gcp_attributes is not None:
            _setter("gcp_attributes", gcp_attributes)
        if idempotency_token is not None:
            _setter("idempotency_token", idempotency_token)
        if init_scripts is not None:
            _setter("init_scripts", init_scripts)
        if instance_pool_id is not None:
            _setter("instance_pool_id", instance_pool_id)
        if node_type_id is not None:
            _setter("node_type_id", node_type_id)
        if num_workers is not None:
            _setter("num_workers", num_workers)
        if policy_id is not None:
            _setter("policy_id", policy_id)
        if runtime_engine is not None:
            _setter("runtime_engine", runtime_engine)
        if single_user_name is not None:
            _setter("single_user_name", single_user_name)
        if spark_conf is not None:
            _setter("spark_conf", spark_conf)
        if spark_env_vars is not None:
            _setter("spark_env_vars", spark_env_vars)
        if ssh_public_keys is not None:
            _setter("ssh_public_keys", ssh_public_keys)
        if workload_type is not None:
            _setter("workload_type", workload_type)

    @property
    @pulumi.getter(name="sparkVersion")
    def spark_version(self) -> str:
        return pulumi.get(self, "spark_version")

    @property
    @pulumi.getter(name="applyPolicyDefaultValues")
    def apply_policy_default_values(self) -> Optional[bool]:
        return pulumi.get(self, "apply_policy_default_values")

    @property
    @pulumi.getter
    def autoscale(self) -> Optional['outputs.JobJobClusterNewClusterAutoscale']:
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="autoterminationMinutes")
    def autotermination_minutes(self) -> Optional[int]:
        return pulumi.get(self, "autotermination_minutes")

    @property
    @pulumi.getter(name="awsAttributes")
    def aws_attributes(self) -> Optional['outputs.JobJobClusterNewClusterAwsAttributes']:
        return pulumi.get(self, "aws_attributes")

    @property
    @pulumi.getter(name="azureAttributes")
    def azure_attributes(self) -> Optional['outputs.JobJobClusterNewClusterAzureAttributes']:
        return pulumi.get(self, "azure_attributes")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterLogConf")
    def cluster_log_conf(self) -> Optional['outputs.JobJobClusterNewClusterClusterLogConf']:
        return pulumi.get(self, "cluster_log_conf")

    @property
    @pulumi.getter(name="clusterMountInfos")
    def cluster_mount_infos(self) -> Optional[Sequence['outputs.JobJobClusterNewClusterClusterMountInfo']]:
        return pulumi.get(self, "cluster_mount_infos")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_tags")

    @property
    @pulumi.getter(name="dataSecurityMode")
    def data_security_mode(self) -> Optional[str]:
        return pulumi.get(self, "data_security_mode")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional['outputs.JobJobClusterNewClusterDockerImage']:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter(name="driverInstancePoolId")
    def driver_instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "driver_instance_pool_id")

    @property
    @pulumi.getter(name="driverNodeTypeId")
    def driver_node_type_id(self) -> Optional[str]:
        return pulumi.get(self, "driver_node_type_id")

    @property
    @pulumi.getter(name="enableElasticDisk")
    def enable_elastic_disk(self) -> Optional[bool]:
        return pulumi.get(self, "enable_elastic_disk")

    @property
    @pulumi.getter(name="enableLocalDiskEncryption")
    def enable_local_disk_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_local_disk_encryption")

    @property
    @pulumi.getter(name="gcpAttributes")
    def gcp_attributes(self) -> Optional['outputs.JobJobClusterNewClusterGcpAttributes']:
        return pulumi.get(self, "gcp_attributes")

    @property
    @pulumi.getter(name="idempotencyToken")
    def idempotency_token(self) -> Optional[str]:
        return pulumi.get(self, "idempotency_token")

    @property
    @pulumi.getter(name="initScripts")
    def init_scripts(self) -> Optional[Sequence['outputs.JobJobClusterNewClusterInitScript']]:
        return pulumi.get(self, "init_scripts")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="nodeTypeId")
    def node_type_id(self) -> Optional[str]:
        return pulumi.get(self, "node_type_id")

    @property
    @pulumi.getter(name="numWorkers")
    def num_workers(self) -> Optional[int]:
        return pulumi.get(self, "num_workers")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="runtimeEngine")
    def runtime_engine(self) -> Optional[str]:
        return pulumi.get(self, "runtime_engine")

    @property
    @pulumi.getter(name="singleUserName")
    def single_user_name(self) -> Optional[str]:
        return pulumi.get(self, "single_user_name")

    @property
    @pulumi.getter(name="sparkConf")
    def spark_conf(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_conf")

    @property
    @pulumi.getter(name="sparkEnvVars")
    def spark_env_vars(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_env_vars")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional['outputs.JobJobClusterNewClusterWorkloadType']:
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class JobJobClusterNewClusterAutoscale(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxWorkers":
            suggest = "max_workers"
        elif key == "minWorkers":
            suggest = "min_workers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobClusterNewClusterAutoscale. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobClusterNewClusterAutoscale.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobClusterNewClusterAutoscale.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_workers: Optional[int] = None,
                 min_workers: Optional[int] = None):
        JobJobClusterNewClusterAutoscale._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_workers=max_workers,
            min_workers=min_workers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_workers: Optional[int] = None,
             min_workers: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxWorkers' in kwargs:
            max_workers = kwargs['maxWorkers']
        if 'minWorkers' in kwargs:
            min_workers = kwargs['minWorkers']

        if max_workers is not None:
            _setter("max_workers", max_workers)
        if min_workers is not None:
            _setter("min_workers", min_workers)

    @property
    @pulumi.getter(name="maxWorkers")
    def max_workers(self) -> Optional[int]:
        return pulumi.get(self, "max_workers")

    @property
    @pulumi.getter(name="minWorkers")
    def min_workers(self) -> Optional[int]:
        return pulumi.get(self, "min_workers")


@pulumi.output_type
class JobJobClusterNewClusterAwsAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ebsVolumeCount":
            suggest = "ebs_volume_count"
        elif key == "ebsVolumeSize":
            suggest = "ebs_volume_size"
        elif key == "ebsVolumeType":
            suggest = "ebs_volume_type"
        elif key == "firstOnDemand":
            suggest = "first_on_demand"
        elif key == "instanceProfileArn":
            suggest = "instance_profile_arn"
        elif key == "spotBidPricePercent":
            suggest = "spot_bid_price_percent"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobClusterNewClusterAwsAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobClusterNewClusterAwsAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobClusterNewClusterAwsAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 ebs_volume_count: Optional[int] = None,
                 ebs_volume_size: Optional[int] = None,
                 ebs_volume_type: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 instance_profile_arn: Optional[str] = None,
                 spot_bid_price_percent: Optional[int] = None,
                 zone_id: Optional[str] = None):
        JobJobClusterNewClusterAwsAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            ebs_volume_count=ebs_volume_count,
            ebs_volume_size=ebs_volume_size,
            ebs_volume_type=ebs_volume_type,
            first_on_demand=first_on_demand,
            instance_profile_arn=instance_profile_arn,
            spot_bid_price_percent=spot_bid_price_percent,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             ebs_volume_count: Optional[int] = None,
             ebs_volume_size: Optional[int] = None,
             ebs_volume_type: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             instance_profile_arn: Optional[str] = None,
             spot_bid_price_percent: Optional[int] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ebsVolumeCount' in kwargs:
            ebs_volume_count = kwargs['ebsVolumeCount']
        if 'ebsVolumeSize' in kwargs:
            ebs_volume_size = kwargs['ebsVolumeSize']
        if 'ebsVolumeType' in kwargs:
            ebs_volume_type = kwargs['ebsVolumeType']
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'instanceProfileArn' in kwargs:
            instance_profile_arn = kwargs['instanceProfileArn']
        if 'spotBidPricePercent' in kwargs:
            spot_bid_price_percent = kwargs['spotBidPricePercent']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if ebs_volume_count is not None:
            _setter("ebs_volume_count", ebs_volume_count)
        if ebs_volume_size is not None:
            _setter("ebs_volume_size", ebs_volume_size)
        if ebs_volume_type is not None:
            _setter("ebs_volume_type", ebs_volume_type)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if instance_profile_arn is not None:
            _setter("instance_profile_arn", instance_profile_arn)
        if spot_bid_price_percent is not None:
            _setter("spot_bid_price_percent", spot_bid_price_percent)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="ebsVolumeCount")
    def ebs_volume_count(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_count")

    @property
    @pulumi.getter(name="ebsVolumeSize")
    def ebs_volume_size(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_size")

    @property
    @pulumi.getter(name="ebsVolumeType")
    def ebs_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "ebs_volume_type")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[str]:
        return pulumi.get(self, "instance_profile_arn")

    @property
    @pulumi.getter(name="spotBidPricePercent")
    def spot_bid_price_percent(self) -> Optional[int]:
        return pulumi.get(self, "spot_bid_price_percent")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class JobJobClusterNewClusterAzureAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstOnDemand":
            suggest = "first_on_demand"
        elif key == "spotBidMaxPrice":
            suggest = "spot_bid_max_price"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobClusterNewClusterAzureAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobClusterNewClusterAzureAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobClusterNewClusterAzureAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 spot_bid_max_price: Optional[float] = None):
        JobJobClusterNewClusterAzureAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            first_on_demand=first_on_demand,
            spot_bid_max_price=spot_bid_max_price,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             spot_bid_max_price: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'spotBidMaxPrice' in kwargs:
            spot_bid_max_price = kwargs['spotBidMaxPrice']

        if availability is not None:
            _setter("availability", availability)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if spot_bid_max_price is not None:
            _setter("spot_bid_max_price", spot_bid_max_price)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="spotBidMaxPrice")
    def spot_bid_max_price(self) -> Optional[float]:
        return pulumi.get(self, "spot_bid_max_price")


@pulumi.output_type
class JobJobClusterNewClusterClusterLogConf(dict):
    def __init__(__self__, *,
                 dbfs: Optional['outputs.JobJobClusterNewClusterClusterLogConfDbfs'] = None,
                 s3: Optional['outputs.JobJobClusterNewClusterClusterLogConfS3'] = None):
        JobJobClusterNewClusterClusterLogConf._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dbfs=dbfs,
            s3=s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dbfs: Optional['outputs.JobJobClusterNewClusterClusterLogConfDbfs'] = None,
             s3: Optional['outputs.JobJobClusterNewClusterClusterLogConfS3'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if dbfs is not None:
            _setter("dbfs", dbfs)
        if s3 is not None:
            _setter("s3", s3)

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.JobJobClusterNewClusterClusterLogConfDbfs']:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.JobJobClusterNewClusterClusterLogConfS3']:
        return pulumi.get(self, "s3")


@pulumi.output_type
class JobJobClusterNewClusterClusterLogConfDbfs(dict):
    def __init__(__self__, *,
                 destination: str):
        JobJobClusterNewClusterClusterLogConfDbfs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobJobClusterNewClusterClusterLogConfS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cannedAcl":
            suggest = "canned_acl"
        elif key == "enableEncryption":
            suggest = "enable_encryption"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobClusterNewClusterClusterLogConfS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobClusterNewClusterClusterLogConfS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobClusterNewClusterClusterLogConfS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        JobJobClusterNewClusterClusterLogConfS3._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class JobJobClusterNewClusterClusterMountInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localMountDirPath":
            suggest = "local_mount_dir_path"
        elif key == "networkFilesystemInfo":
            suggest = "network_filesystem_info"
        elif key == "remoteMountDirPath":
            suggest = "remote_mount_dir_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobClusterNewClusterClusterMountInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobClusterNewClusterClusterMountInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobClusterNewClusterClusterMountInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_mount_dir_path: str,
                 network_filesystem_info: 'outputs.JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo',
                 remote_mount_dir_path: Optional[str] = None):
        JobJobClusterNewClusterClusterMountInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            local_mount_dir_path=local_mount_dir_path,
            network_filesystem_info=network_filesystem_info,
            remote_mount_dir_path=remote_mount_dir_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             local_mount_dir_path: str,
             network_filesystem_info: 'outputs.JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo',
             remote_mount_dir_path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'localMountDirPath' in kwargs:
            local_mount_dir_path = kwargs['localMountDirPath']
        if 'networkFilesystemInfo' in kwargs:
            network_filesystem_info = kwargs['networkFilesystemInfo']
        if 'remoteMountDirPath' in kwargs:
            remote_mount_dir_path = kwargs['remoteMountDirPath']

        _setter("local_mount_dir_path", local_mount_dir_path)
        _setter("network_filesystem_info", network_filesystem_info)
        if remote_mount_dir_path is not None:
            _setter("remote_mount_dir_path", remote_mount_dir_path)

    @property
    @pulumi.getter(name="localMountDirPath")
    def local_mount_dir_path(self) -> str:
        return pulumi.get(self, "local_mount_dir_path")

    @property
    @pulumi.getter(name="networkFilesystemInfo")
    def network_filesystem_info(self) -> 'outputs.JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo':
        return pulumi.get(self, "network_filesystem_info")

    @property
    @pulumi.getter(name="remoteMountDirPath")
    def remote_mount_dir_path(self) -> Optional[str]:
        return pulumi.get(self, "remote_mount_dir_path")


@pulumi.output_type
class JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverAddress":
            suggest = "server_address"
        elif key == "mountOptions":
            suggest = "mount_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server_address: str,
                 mount_options: Optional[str] = None):
        JobJobClusterNewClusterClusterMountInfoNetworkFilesystemInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            server_address=server_address,
            mount_options=mount_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             server_address: str,
             mount_options: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serverAddress' in kwargs:
            server_address = kwargs['serverAddress']
        if 'mountOptions' in kwargs:
            mount_options = kwargs['mountOptions']

        _setter("server_address", server_address)
        if mount_options is not None:
            _setter("mount_options", mount_options)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> str:
        return pulumi.get(self, "server_address")

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[str]:
        return pulumi.get(self, "mount_options")


@pulumi.output_type
class JobJobClusterNewClusterDockerImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobClusterNewClusterDockerImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobClusterNewClusterDockerImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobClusterNewClusterDockerImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 basic_auth: Optional['outputs.JobJobClusterNewClusterDockerImageBasicAuth'] = None):
        """
        :param str url: URL of the job on the given workspace
        """
        JobJobClusterNewClusterDockerImage._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            basic_auth=basic_auth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             basic_auth: Optional['outputs.JobJobClusterNewClusterDockerImageBasicAuth'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'basicAuth' in kwargs:
            basic_auth = kwargs['basicAuth']

        _setter("url", url)
        if basic_auth is not None:
            _setter("basic_auth", basic_auth)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of the job on the given workspace
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.JobJobClusterNewClusterDockerImageBasicAuth']:
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class JobJobClusterNewClusterDockerImageBasicAuth(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        JobJobClusterNewClusterDockerImageBasicAuth._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class JobJobClusterNewClusterGcpAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootDiskSize":
            suggest = "boot_disk_size"
        elif key == "googleServiceAccount":
            suggest = "google_service_account"
        elif key == "localSsdCount":
            suggest = "local_ssd_count"
        elif key == "usePreemptibleExecutors":
            suggest = "use_preemptible_executors"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobClusterNewClusterGcpAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobClusterNewClusterGcpAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobClusterNewClusterGcpAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 boot_disk_size: Optional[int] = None,
                 google_service_account: Optional[str] = None,
                 local_ssd_count: Optional[int] = None,
                 use_preemptible_executors: Optional[bool] = None,
                 zone_id: Optional[str] = None):
        JobJobClusterNewClusterGcpAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            boot_disk_size=boot_disk_size,
            google_service_account=google_service_account,
            local_ssd_count=local_ssd_count,
            use_preemptible_executors=use_preemptible_executors,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             boot_disk_size: Optional[int] = None,
             google_service_account: Optional[str] = None,
             local_ssd_count: Optional[int] = None,
             use_preemptible_executors: Optional[bool] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bootDiskSize' in kwargs:
            boot_disk_size = kwargs['bootDiskSize']
        if 'googleServiceAccount' in kwargs:
            google_service_account = kwargs['googleServiceAccount']
        if 'localSsdCount' in kwargs:
            local_ssd_count = kwargs['localSsdCount']
        if 'usePreemptibleExecutors' in kwargs:
            use_preemptible_executors = kwargs['usePreemptibleExecutors']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if boot_disk_size is not None:
            _setter("boot_disk_size", boot_disk_size)
        if google_service_account is not None:
            _setter("google_service_account", google_service_account)
        if local_ssd_count is not None:
            _setter("local_ssd_count", local_ssd_count)
        if use_preemptible_executors is not None:
            _setter("use_preemptible_executors", use_preemptible_executors)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[int]:
        return pulumi.get(self, "boot_disk_size")

    @property
    @pulumi.getter(name="googleServiceAccount")
    def google_service_account(self) -> Optional[str]:
        return pulumi.get(self, "google_service_account")

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[int]:
        return pulumi.get(self, "local_ssd_count")

    @property
    @pulumi.getter(name="usePreemptibleExecutors")
    def use_preemptible_executors(self) -> Optional[bool]:
        return pulumi.get(self, "use_preemptible_executors")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class JobJobClusterNewClusterInitScript(dict):
    def __init__(__self__, *,
                 abfss: Optional['outputs.JobJobClusterNewClusterInitScriptAbfss'] = None,
                 dbfs: Optional['outputs.JobJobClusterNewClusterInitScriptDbfs'] = None,
                 file: Optional['outputs.JobJobClusterNewClusterInitScriptFile'] = None,
                 gcs: Optional['outputs.JobJobClusterNewClusterInitScriptGcs'] = None,
                 s3: Optional['outputs.JobJobClusterNewClusterInitScriptS3'] = None,
                 volumes: Optional['outputs.JobJobClusterNewClusterInitScriptVolumes'] = None,
                 workspace: Optional['outputs.JobJobClusterNewClusterInitScriptWorkspace'] = None):
        """
        :param 'JobJobClusterNewClusterInitScriptFileArgs' file: block consisting of single string field: `path` - a relative path to the file (inside the Git repository) with SQL commands to execute.  *Requires `git_source` configuration block*.
               
               Example
               
               ```python
               import pulumi
               import pulumi_databricks as databricks
               
               sql_aggregation_job = databricks.Job("sqlAggregationJob", tasks=[
                   databricks.JobTaskArgs(
                       task_key="run_agg_query",
                       sql_task=databricks.JobTaskSqlTaskArgs(
                           warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                           query=databricks.JobTaskSqlTaskQueryArgs(
                               query_id=databricks_sql_query["agg_query"]["id"],
                           ),
                       ),
                   ),
                   databricks.JobTaskArgs(
                       task_key="run_dashboard",
                       sql_task=databricks.JobTaskSqlTaskArgs(
                           warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                           dashboard=databricks.JobTaskSqlTaskDashboardArgs(
                               dashboard_id=databricks_sql_dashboard["dash"]["id"],
                               subscriptions=[databricks.JobTaskSqlTaskDashboardSubscriptionArgs(
                                   user_name="user@domain.com",
                               )],
                           ),
                       ),
                   ),
                   databricks.JobTaskArgs(
                       task_key="run_alert",
                       sql_task=databricks.JobTaskSqlTaskArgs(
                           warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                           alert=databricks.JobTaskSqlTaskAlertArgs(
                               alert_id=databricks_sql_alert["alert"]["id"],
                               subscriptions=[databricks.JobTaskSqlTaskAlertSubscriptionArgs(
                                   user_name="user@domain.com",
                               )],
                           ),
                       ),
                   ),
               ])
               ```
        """
        JobJobClusterNewClusterInitScript._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abfss=abfss,
            dbfs=dbfs,
            file=file,
            gcs=gcs,
            s3=s3,
            volumes=volumes,
            workspace=workspace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abfss: Optional['outputs.JobJobClusterNewClusterInitScriptAbfss'] = None,
             dbfs: Optional['outputs.JobJobClusterNewClusterInitScriptDbfs'] = None,
             file: Optional['outputs.JobJobClusterNewClusterInitScriptFile'] = None,
             gcs: Optional['outputs.JobJobClusterNewClusterInitScriptGcs'] = None,
             s3: Optional['outputs.JobJobClusterNewClusterInitScriptS3'] = None,
             volumes: Optional['outputs.JobJobClusterNewClusterInitScriptVolumes'] = None,
             workspace: Optional['outputs.JobJobClusterNewClusterInitScriptWorkspace'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if abfss is not None:
            _setter("abfss", abfss)
        if dbfs is not None:
            _setter("dbfs", dbfs)
        if file is not None:
            _setter("file", file)
        if gcs is not None:
            _setter("gcs", gcs)
        if s3 is not None:
            _setter("s3", s3)
        if volumes is not None:
            _setter("volumes", volumes)
        if workspace is not None:
            _setter("workspace", workspace)

    @property
    @pulumi.getter
    def abfss(self) -> Optional['outputs.JobJobClusterNewClusterInitScriptAbfss']:
        return pulumi.get(self, "abfss")

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.JobJobClusterNewClusterInitScriptDbfs']:
        warnings.warn("""For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.""", DeprecationWarning)
        pulumi.log.warn("""dbfs is deprecated: For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.""")

        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.JobJobClusterNewClusterInitScriptFile']:
        """
        block consisting of single string field: `path` - a relative path to the file (inside the Git repository) with SQL commands to execute.  *Requires `git_source` configuration block*.

        Example

        ```python
        import pulumi
        import pulumi_databricks as databricks

        sql_aggregation_job = databricks.Job("sqlAggregationJob", tasks=[
            databricks.JobTaskArgs(
                task_key="run_agg_query",
                sql_task=databricks.JobTaskSqlTaskArgs(
                    warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                    query=databricks.JobTaskSqlTaskQueryArgs(
                        query_id=databricks_sql_query["agg_query"]["id"],
                    ),
                ),
            ),
            databricks.JobTaskArgs(
                task_key="run_dashboard",
                sql_task=databricks.JobTaskSqlTaskArgs(
                    warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                    dashboard=databricks.JobTaskSqlTaskDashboardArgs(
                        dashboard_id=databricks_sql_dashboard["dash"]["id"],
                        subscriptions=[databricks.JobTaskSqlTaskDashboardSubscriptionArgs(
                            user_name="user@domain.com",
                        )],
                    ),
                ),
            ),
            databricks.JobTaskArgs(
                task_key="run_alert",
                sql_task=databricks.JobTaskSqlTaskArgs(
                    warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                    alert=databricks.JobTaskSqlTaskAlertArgs(
                        alert_id=databricks_sql_alert["alert"]["id"],
                        subscriptions=[databricks.JobTaskSqlTaskAlertSubscriptionArgs(
                            user_name="user@domain.com",
                        )],
                    ),
                ),
            ),
        ])
        ```
        """
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def gcs(self) -> Optional['outputs.JobJobClusterNewClusterInitScriptGcs']:
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.JobJobClusterNewClusterInitScriptS3']:
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter
    def volumes(self) -> Optional['outputs.JobJobClusterNewClusterInitScriptVolumes']:
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def workspace(self) -> Optional['outputs.JobJobClusterNewClusterInitScriptWorkspace']:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class JobJobClusterNewClusterInitScriptAbfss(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobJobClusterNewClusterInitScriptAbfss._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobJobClusterNewClusterInitScriptDbfs(dict):
    def __init__(__self__, *,
                 destination: str):
        JobJobClusterNewClusterInitScriptDbfs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobJobClusterNewClusterInitScriptFile(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobJobClusterNewClusterInitScriptFile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobJobClusterNewClusterInitScriptGcs(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobJobClusterNewClusterInitScriptGcs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobJobClusterNewClusterInitScriptS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cannedAcl":
            suggest = "canned_acl"
        elif key == "enableEncryption":
            suggest = "enable_encryption"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobClusterNewClusterInitScriptS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobClusterNewClusterInitScriptS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobClusterNewClusterInitScriptS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        JobJobClusterNewClusterInitScriptS3._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class JobJobClusterNewClusterInitScriptVolumes(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobJobClusterNewClusterInitScriptVolumes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobJobClusterNewClusterInitScriptWorkspace(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobJobClusterNewClusterInitScriptWorkspace._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobJobClusterNewClusterWorkloadType(dict):
    def __init__(__self__, *,
                 clients: 'outputs.JobJobClusterNewClusterWorkloadTypeClients'):
        JobJobClusterNewClusterWorkloadType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            clients=clients,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             clients: 'outputs.JobJobClusterNewClusterWorkloadTypeClients',
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("clients", clients)

    @property
    @pulumi.getter
    def clients(self) -> 'outputs.JobJobClusterNewClusterWorkloadTypeClients':
        return pulumi.get(self, "clients")


@pulumi.output_type
class JobJobClusterNewClusterWorkloadTypeClients(dict):
    def __init__(__self__, *,
                 jobs: Optional[bool] = None,
                 notebooks: Optional[bool] = None):
        JobJobClusterNewClusterWorkloadTypeClients._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jobs=jobs,
            notebooks=notebooks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jobs: Optional[bool] = None,
             notebooks: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if jobs is not None:
            _setter("jobs", jobs)
        if notebooks is not None:
            _setter("notebooks", notebooks)

    @property
    @pulumi.getter
    def jobs(self) -> Optional[bool]:
        return pulumi.get(self, "jobs")

    @property
    @pulumi.getter
    def notebooks(self) -> Optional[bool]:
        return pulumi.get(self, "notebooks")


@pulumi.output_type
class JobLibrary(dict):
    def __init__(__self__, *,
                 cran: Optional['outputs.JobLibraryCran'] = None,
                 egg: Optional[str] = None,
                 jar: Optional[str] = None,
                 maven: Optional['outputs.JobLibraryMaven'] = None,
                 pypi: Optional['outputs.JobLibraryPypi'] = None,
                 whl: Optional[str] = None):
        JobLibrary._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cran=cran,
            egg=egg,
            jar=jar,
            maven=maven,
            pypi=pypi,
            whl=whl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cran: Optional['outputs.JobLibraryCran'] = None,
             egg: Optional[str] = None,
             jar: Optional[str] = None,
             maven: Optional['outputs.JobLibraryMaven'] = None,
             pypi: Optional['outputs.JobLibraryPypi'] = None,
             whl: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if cran is not None:
            _setter("cran", cran)
        if egg is not None:
            _setter("egg", egg)
        if jar is not None:
            _setter("jar", jar)
        if maven is not None:
            _setter("maven", maven)
        if pypi is not None:
            _setter("pypi", pypi)
        if whl is not None:
            _setter("whl", whl)

    @property
    @pulumi.getter
    def cran(self) -> Optional['outputs.JobLibraryCran']:
        return pulumi.get(self, "cran")

    @property
    @pulumi.getter
    def egg(self) -> Optional[str]:
        return pulumi.get(self, "egg")

    @property
    @pulumi.getter
    def jar(self) -> Optional[str]:
        return pulumi.get(self, "jar")

    @property
    @pulumi.getter
    def maven(self) -> Optional['outputs.JobLibraryMaven']:
        return pulumi.get(self, "maven")

    @property
    @pulumi.getter
    def pypi(self) -> Optional['outputs.JobLibraryPypi']:
        return pulumi.get(self, "pypi")

    @property
    @pulumi.getter
    def whl(self) -> Optional[str]:
        return pulumi.get(self, "whl")


@pulumi.output_type
class JobLibraryCran(dict):
    def __init__(__self__, *,
                 package: str,
                 repo: Optional[str] = None):
        JobLibraryCran._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            package=package,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             package: str,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("package", package)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def package(self) -> str:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class JobLibraryMaven(dict):
    def __init__(__self__, *,
                 coordinates: str,
                 exclusions: Optional[Sequence[str]] = None,
                 repo: Optional[str] = None):
        JobLibraryMaven._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            coordinates=coordinates,
            exclusions=exclusions,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             coordinates: str,
             exclusions: Optional[Sequence[str]] = None,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("coordinates", coordinates)
        if exclusions is not None:
            _setter("exclusions", exclusions)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def coordinates(self) -> str:
        return pulumi.get(self, "coordinates")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class JobLibraryPypi(dict):
    def __init__(__self__, *,
                 package: str,
                 repo: Optional[str] = None):
        JobLibraryPypi._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            package=package,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             package: str,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("package", package)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def package(self) -> str:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class JobNewCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sparkVersion":
            suggest = "spark_version"
        elif key == "applyPolicyDefaultValues":
            suggest = "apply_policy_default_values"
        elif key == "autoterminationMinutes":
            suggest = "autotermination_minutes"
        elif key == "awsAttributes":
            suggest = "aws_attributes"
        elif key == "azureAttributes":
            suggest = "azure_attributes"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterLogConf":
            suggest = "cluster_log_conf"
        elif key == "clusterMountInfos":
            suggest = "cluster_mount_infos"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "customTags":
            suggest = "custom_tags"
        elif key == "dataSecurityMode":
            suggest = "data_security_mode"
        elif key == "dockerImage":
            suggest = "docker_image"
        elif key == "driverInstancePoolId":
            suggest = "driver_instance_pool_id"
        elif key == "driverNodeTypeId":
            suggest = "driver_node_type_id"
        elif key == "enableElasticDisk":
            suggest = "enable_elastic_disk"
        elif key == "enableLocalDiskEncryption":
            suggest = "enable_local_disk_encryption"
        elif key == "gcpAttributes":
            suggest = "gcp_attributes"
        elif key == "idempotencyToken":
            suggest = "idempotency_token"
        elif key == "initScripts":
            suggest = "init_scripts"
        elif key == "instancePoolId":
            suggest = "instance_pool_id"
        elif key == "nodeTypeId":
            suggest = "node_type_id"
        elif key == "numWorkers":
            suggest = "num_workers"
        elif key == "policyId":
            suggest = "policy_id"
        elif key == "runtimeEngine":
            suggest = "runtime_engine"
        elif key == "singleUserName":
            suggest = "single_user_name"
        elif key == "sparkConf":
            suggest = "spark_conf"
        elif key == "sparkEnvVars":
            suggest = "spark_env_vars"
        elif key == "sshPublicKeys":
            suggest = "ssh_public_keys"
        elif key == "workloadType":
            suggest = "workload_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobNewCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobNewCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobNewCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 spark_version: str,
                 apply_policy_default_values: Optional[bool] = None,
                 autoscale: Optional['outputs.JobNewClusterAutoscale'] = None,
                 autotermination_minutes: Optional[int] = None,
                 aws_attributes: Optional['outputs.JobNewClusterAwsAttributes'] = None,
                 azure_attributes: Optional['outputs.JobNewClusterAzureAttributes'] = None,
                 cluster_id: Optional[str] = None,
                 cluster_log_conf: Optional['outputs.JobNewClusterClusterLogConf'] = None,
                 cluster_mount_infos: Optional[Sequence['outputs.JobNewClusterClusterMountInfo']] = None,
                 cluster_name: Optional[str] = None,
                 custom_tags: Optional[Mapping[str, Any]] = None,
                 data_security_mode: Optional[str] = None,
                 docker_image: Optional['outputs.JobNewClusterDockerImage'] = None,
                 driver_instance_pool_id: Optional[str] = None,
                 driver_node_type_id: Optional[str] = None,
                 enable_elastic_disk: Optional[bool] = None,
                 enable_local_disk_encryption: Optional[bool] = None,
                 gcp_attributes: Optional['outputs.JobNewClusterGcpAttributes'] = None,
                 idempotency_token: Optional[str] = None,
                 init_scripts: Optional[Sequence['outputs.JobNewClusterInitScript']] = None,
                 instance_pool_id: Optional[str] = None,
                 node_type_id: Optional[str] = None,
                 num_workers: Optional[int] = None,
                 policy_id: Optional[str] = None,
                 runtime_engine: Optional[str] = None,
                 single_user_name: Optional[str] = None,
                 spark_conf: Optional[Mapping[str, Any]] = None,
                 spark_env_vars: Optional[Mapping[str, Any]] = None,
                 ssh_public_keys: Optional[Sequence[str]] = None,
                 workload_type: Optional['outputs.JobNewClusterWorkloadType'] = None):
        JobNewCluster._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            spark_version=spark_version,
            apply_policy_default_values=apply_policy_default_values,
            autoscale=autoscale,
            autotermination_minutes=autotermination_minutes,
            aws_attributes=aws_attributes,
            azure_attributes=azure_attributes,
            cluster_id=cluster_id,
            cluster_log_conf=cluster_log_conf,
            cluster_mount_infos=cluster_mount_infos,
            cluster_name=cluster_name,
            custom_tags=custom_tags,
            data_security_mode=data_security_mode,
            docker_image=docker_image,
            driver_instance_pool_id=driver_instance_pool_id,
            driver_node_type_id=driver_node_type_id,
            enable_elastic_disk=enable_elastic_disk,
            enable_local_disk_encryption=enable_local_disk_encryption,
            gcp_attributes=gcp_attributes,
            idempotency_token=idempotency_token,
            init_scripts=init_scripts,
            instance_pool_id=instance_pool_id,
            node_type_id=node_type_id,
            num_workers=num_workers,
            policy_id=policy_id,
            runtime_engine=runtime_engine,
            single_user_name=single_user_name,
            spark_conf=spark_conf,
            spark_env_vars=spark_env_vars,
            ssh_public_keys=ssh_public_keys,
            workload_type=workload_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             spark_version: str,
             apply_policy_default_values: Optional[bool] = None,
             autoscale: Optional['outputs.JobNewClusterAutoscale'] = None,
             autotermination_minutes: Optional[int] = None,
             aws_attributes: Optional['outputs.JobNewClusterAwsAttributes'] = None,
             azure_attributes: Optional['outputs.JobNewClusterAzureAttributes'] = None,
             cluster_id: Optional[str] = None,
             cluster_log_conf: Optional['outputs.JobNewClusterClusterLogConf'] = None,
             cluster_mount_infos: Optional[Sequence['outputs.JobNewClusterClusterMountInfo']] = None,
             cluster_name: Optional[str] = None,
             custom_tags: Optional[Mapping[str, Any]] = None,
             data_security_mode: Optional[str] = None,
             docker_image: Optional['outputs.JobNewClusterDockerImage'] = None,
             driver_instance_pool_id: Optional[str] = None,
             driver_node_type_id: Optional[str] = None,
             enable_elastic_disk: Optional[bool] = None,
             enable_local_disk_encryption: Optional[bool] = None,
             gcp_attributes: Optional['outputs.JobNewClusterGcpAttributes'] = None,
             idempotency_token: Optional[str] = None,
             init_scripts: Optional[Sequence['outputs.JobNewClusterInitScript']] = None,
             instance_pool_id: Optional[str] = None,
             node_type_id: Optional[str] = None,
             num_workers: Optional[int] = None,
             policy_id: Optional[str] = None,
             runtime_engine: Optional[str] = None,
             single_user_name: Optional[str] = None,
             spark_conf: Optional[Mapping[str, Any]] = None,
             spark_env_vars: Optional[Mapping[str, Any]] = None,
             ssh_public_keys: Optional[Sequence[str]] = None,
             workload_type: Optional['outputs.JobNewClusterWorkloadType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sparkVersion' in kwargs:
            spark_version = kwargs['sparkVersion']
        if 'applyPolicyDefaultValues' in kwargs:
            apply_policy_default_values = kwargs['applyPolicyDefaultValues']
        if 'autoterminationMinutes' in kwargs:
            autotermination_minutes = kwargs['autoterminationMinutes']
        if 'awsAttributes' in kwargs:
            aws_attributes = kwargs['awsAttributes']
        if 'azureAttributes' in kwargs:
            azure_attributes = kwargs['azureAttributes']
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'clusterLogConf' in kwargs:
            cluster_log_conf = kwargs['clusterLogConf']
        if 'clusterMountInfos' in kwargs:
            cluster_mount_infos = kwargs['clusterMountInfos']
        if 'clusterName' in kwargs:
            cluster_name = kwargs['clusterName']
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']
        if 'dataSecurityMode' in kwargs:
            data_security_mode = kwargs['dataSecurityMode']
        if 'dockerImage' in kwargs:
            docker_image = kwargs['dockerImage']
        if 'driverInstancePoolId' in kwargs:
            driver_instance_pool_id = kwargs['driverInstancePoolId']
        if 'driverNodeTypeId' in kwargs:
            driver_node_type_id = kwargs['driverNodeTypeId']
        if 'enableElasticDisk' in kwargs:
            enable_elastic_disk = kwargs['enableElasticDisk']
        if 'enableLocalDiskEncryption' in kwargs:
            enable_local_disk_encryption = kwargs['enableLocalDiskEncryption']
        if 'gcpAttributes' in kwargs:
            gcp_attributes = kwargs['gcpAttributes']
        if 'idempotencyToken' in kwargs:
            idempotency_token = kwargs['idempotencyToken']
        if 'initScripts' in kwargs:
            init_scripts = kwargs['initScripts']
        if 'instancePoolId' in kwargs:
            instance_pool_id = kwargs['instancePoolId']
        if 'nodeTypeId' in kwargs:
            node_type_id = kwargs['nodeTypeId']
        if 'numWorkers' in kwargs:
            num_workers = kwargs['numWorkers']
        if 'policyId' in kwargs:
            policy_id = kwargs['policyId']
        if 'runtimeEngine' in kwargs:
            runtime_engine = kwargs['runtimeEngine']
        if 'singleUserName' in kwargs:
            single_user_name = kwargs['singleUserName']
        if 'sparkConf' in kwargs:
            spark_conf = kwargs['sparkConf']
        if 'sparkEnvVars' in kwargs:
            spark_env_vars = kwargs['sparkEnvVars']
        if 'sshPublicKeys' in kwargs:
            ssh_public_keys = kwargs['sshPublicKeys']
        if 'workloadType' in kwargs:
            workload_type = kwargs['workloadType']

        _setter("spark_version", spark_version)
        if apply_policy_default_values is not None:
            _setter("apply_policy_default_values", apply_policy_default_values)
        if autoscale is not None:
            _setter("autoscale", autoscale)
        if autotermination_minutes is not None:
            _setter("autotermination_minutes", autotermination_minutes)
        if aws_attributes is not None:
            _setter("aws_attributes", aws_attributes)
        if azure_attributes is not None:
            _setter("azure_attributes", azure_attributes)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if cluster_log_conf is not None:
            _setter("cluster_log_conf", cluster_log_conf)
        if cluster_mount_infos is not None:
            _setter("cluster_mount_infos", cluster_mount_infos)
        if cluster_name is not None:
            _setter("cluster_name", cluster_name)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)
        if data_security_mode is not None:
            _setter("data_security_mode", data_security_mode)
        if docker_image is not None:
            _setter("docker_image", docker_image)
        if driver_instance_pool_id is not None:
            _setter("driver_instance_pool_id", driver_instance_pool_id)
        if driver_node_type_id is not None:
            _setter("driver_node_type_id", driver_node_type_id)
        if enable_elastic_disk is not None:
            _setter("enable_elastic_disk", enable_elastic_disk)
        if enable_local_disk_encryption is not None:
            _setter("enable_local_disk_encryption", enable_local_disk_encryption)
        if gcp_attributes is not None:
            _setter("gcp_attributes", gcp_attributes)
        if idempotency_token is not None:
            _setter("idempotency_token", idempotency_token)
        if init_scripts is not None:
            _setter("init_scripts", init_scripts)
        if instance_pool_id is not None:
            _setter("instance_pool_id", instance_pool_id)
        if node_type_id is not None:
            _setter("node_type_id", node_type_id)
        if num_workers is not None:
            _setter("num_workers", num_workers)
        if policy_id is not None:
            _setter("policy_id", policy_id)
        if runtime_engine is not None:
            _setter("runtime_engine", runtime_engine)
        if single_user_name is not None:
            _setter("single_user_name", single_user_name)
        if spark_conf is not None:
            _setter("spark_conf", spark_conf)
        if spark_env_vars is not None:
            _setter("spark_env_vars", spark_env_vars)
        if ssh_public_keys is not None:
            _setter("ssh_public_keys", ssh_public_keys)
        if workload_type is not None:
            _setter("workload_type", workload_type)

    @property
    @pulumi.getter(name="sparkVersion")
    def spark_version(self) -> str:
        return pulumi.get(self, "spark_version")

    @property
    @pulumi.getter(name="applyPolicyDefaultValues")
    def apply_policy_default_values(self) -> Optional[bool]:
        return pulumi.get(self, "apply_policy_default_values")

    @property
    @pulumi.getter
    def autoscale(self) -> Optional['outputs.JobNewClusterAutoscale']:
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="autoterminationMinutes")
    def autotermination_minutes(self) -> Optional[int]:
        return pulumi.get(self, "autotermination_minutes")

    @property
    @pulumi.getter(name="awsAttributes")
    def aws_attributes(self) -> Optional['outputs.JobNewClusterAwsAttributes']:
        return pulumi.get(self, "aws_attributes")

    @property
    @pulumi.getter(name="azureAttributes")
    def azure_attributes(self) -> Optional['outputs.JobNewClusterAzureAttributes']:
        return pulumi.get(self, "azure_attributes")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterLogConf")
    def cluster_log_conf(self) -> Optional['outputs.JobNewClusterClusterLogConf']:
        return pulumi.get(self, "cluster_log_conf")

    @property
    @pulumi.getter(name="clusterMountInfos")
    def cluster_mount_infos(self) -> Optional[Sequence['outputs.JobNewClusterClusterMountInfo']]:
        return pulumi.get(self, "cluster_mount_infos")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_tags")

    @property
    @pulumi.getter(name="dataSecurityMode")
    def data_security_mode(self) -> Optional[str]:
        return pulumi.get(self, "data_security_mode")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional['outputs.JobNewClusterDockerImage']:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter(name="driverInstancePoolId")
    def driver_instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "driver_instance_pool_id")

    @property
    @pulumi.getter(name="driverNodeTypeId")
    def driver_node_type_id(self) -> Optional[str]:
        return pulumi.get(self, "driver_node_type_id")

    @property
    @pulumi.getter(name="enableElasticDisk")
    def enable_elastic_disk(self) -> Optional[bool]:
        return pulumi.get(self, "enable_elastic_disk")

    @property
    @pulumi.getter(name="enableLocalDiskEncryption")
    def enable_local_disk_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_local_disk_encryption")

    @property
    @pulumi.getter(name="gcpAttributes")
    def gcp_attributes(self) -> Optional['outputs.JobNewClusterGcpAttributes']:
        return pulumi.get(self, "gcp_attributes")

    @property
    @pulumi.getter(name="idempotencyToken")
    def idempotency_token(self) -> Optional[str]:
        return pulumi.get(self, "idempotency_token")

    @property
    @pulumi.getter(name="initScripts")
    def init_scripts(self) -> Optional[Sequence['outputs.JobNewClusterInitScript']]:
        return pulumi.get(self, "init_scripts")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="nodeTypeId")
    def node_type_id(self) -> Optional[str]:
        return pulumi.get(self, "node_type_id")

    @property
    @pulumi.getter(name="numWorkers")
    def num_workers(self) -> Optional[int]:
        return pulumi.get(self, "num_workers")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="runtimeEngine")
    def runtime_engine(self) -> Optional[str]:
        return pulumi.get(self, "runtime_engine")

    @property
    @pulumi.getter(name="singleUserName")
    def single_user_name(self) -> Optional[str]:
        return pulumi.get(self, "single_user_name")

    @property
    @pulumi.getter(name="sparkConf")
    def spark_conf(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_conf")

    @property
    @pulumi.getter(name="sparkEnvVars")
    def spark_env_vars(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_env_vars")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional['outputs.JobNewClusterWorkloadType']:
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class JobNewClusterAutoscale(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxWorkers":
            suggest = "max_workers"
        elif key == "minWorkers":
            suggest = "min_workers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobNewClusterAutoscale. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobNewClusterAutoscale.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobNewClusterAutoscale.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_workers: Optional[int] = None,
                 min_workers: Optional[int] = None):
        JobNewClusterAutoscale._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_workers=max_workers,
            min_workers=min_workers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_workers: Optional[int] = None,
             min_workers: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxWorkers' in kwargs:
            max_workers = kwargs['maxWorkers']
        if 'minWorkers' in kwargs:
            min_workers = kwargs['minWorkers']

        if max_workers is not None:
            _setter("max_workers", max_workers)
        if min_workers is not None:
            _setter("min_workers", min_workers)

    @property
    @pulumi.getter(name="maxWorkers")
    def max_workers(self) -> Optional[int]:
        return pulumi.get(self, "max_workers")

    @property
    @pulumi.getter(name="minWorkers")
    def min_workers(self) -> Optional[int]:
        return pulumi.get(self, "min_workers")


@pulumi.output_type
class JobNewClusterAwsAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ebsVolumeCount":
            suggest = "ebs_volume_count"
        elif key == "ebsVolumeSize":
            suggest = "ebs_volume_size"
        elif key == "ebsVolumeType":
            suggest = "ebs_volume_type"
        elif key == "firstOnDemand":
            suggest = "first_on_demand"
        elif key == "instanceProfileArn":
            suggest = "instance_profile_arn"
        elif key == "spotBidPricePercent":
            suggest = "spot_bid_price_percent"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobNewClusterAwsAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobNewClusterAwsAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobNewClusterAwsAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 ebs_volume_count: Optional[int] = None,
                 ebs_volume_size: Optional[int] = None,
                 ebs_volume_type: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 instance_profile_arn: Optional[str] = None,
                 spot_bid_price_percent: Optional[int] = None,
                 zone_id: Optional[str] = None):
        JobNewClusterAwsAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            ebs_volume_count=ebs_volume_count,
            ebs_volume_size=ebs_volume_size,
            ebs_volume_type=ebs_volume_type,
            first_on_demand=first_on_demand,
            instance_profile_arn=instance_profile_arn,
            spot_bid_price_percent=spot_bid_price_percent,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             ebs_volume_count: Optional[int] = None,
             ebs_volume_size: Optional[int] = None,
             ebs_volume_type: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             instance_profile_arn: Optional[str] = None,
             spot_bid_price_percent: Optional[int] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ebsVolumeCount' in kwargs:
            ebs_volume_count = kwargs['ebsVolumeCount']
        if 'ebsVolumeSize' in kwargs:
            ebs_volume_size = kwargs['ebsVolumeSize']
        if 'ebsVolumeType' in kwargs:
            ebs_volume_type = kwargs['ebsVolumeType']
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'instanceProfileArn' in kwargs:
            instance_profile_arn = kwargs['instanceProfileArn']
        if 'spotBidPricePercent' in kwargs:
            spot_bid_price_percent = kwargs['spotBidPricePercent']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if ebs_volume_count is not None:
            _setter("ebs_volume_count", ebs_volume_count)
        if ebs_volume_size is not None:
            _setter("ebs_volume_size", ebs_volume_size)
        if ebs_volume_type is not None:
            _setter("ebs_volume_type", ebs_volume_type)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if instance_profile_arn is not None:
            _setter("instance_profile_arn", instance_profile_arn)
        if spot_bid_price_percent is not None:
            _setter("spot_bid_price_percent", spot_bid_price_percent)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="ebsVolumeCount")
    def ebs_volume_count(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_count")

    @property
    @pulumi.getter(name="ebsVolumeSize")
    def ebs_volume_size(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_size")

    @property
    @pulumi.getter(name="ebsVolumeType")
    def ebs_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "ebs_volume_type")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[str]:
        return pulumi.get(self, "instance_profile_arn")

    @property
    @pulumi.getter(name="spotBidPricePercent")
    def spot_bid_price_percent(self) -> Optional[int]:
        return pulumi.get(self, "spot_bid_price_percent")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class JobNewClusterAzureAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstOnDemand":
            suggest = "first_on_demand"
        elif key == "spotBidMaxPrice":
            suggest = "spot_bid_max_price"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobNewClusterAzureAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobNewClusterAzureAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobNewClusterAzureAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 spot_bid_max_price: Optional[float] = None):
        JobNewClusterAzureAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            first_on_demand=first_on_demand,
            spot_bid_max_price=spot_bid_max_price,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             spot_bid_max_price: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'spotBidMaxPrice' in kwargs:
            spot_bid_max_price = kwargs['spotBidMaxPrice']

        if availability is not None:
            _setter("availability", availability)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if spot_bid_max_price is not None:
            _setter("spot_bid_max_price", spot_bid_max_price)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="spotBidMaxPrice")
    def spot_bid_max_price(self) -> Optional[float]:
        return pulumi.get(self, "spot_bid_max_price")


@pulumi.output_type
class JobNewClusterClusterLogConf(dict):
    def __init__(__self__, *,
                 dbfs: Optional['outputs.JobNewClusterClusterLogConfDbfs'] = None,
                 s3: Optional['outputs.JobNewClusterClusterLogConfS3'] = None):
        JobNewClusterClusterLogConf._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dbfs=dbfs,
            s3=s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dbfs: Optional['outputs.JobNewClusterClusterLogConfDbfs'] = None,
             s3: Optional['outputs.JobNewClusterClusterLogConfS3'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if dbfs is not None:
            _setter("dbfs", dbfs)
        if s3 is not None:
            _setter("s3", s3)

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.JobNewClusterClusterLogConfDbfs']:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.JobNewClusterClusterLogConfS3']:
        return pulumi.get(self, "s3")


@pulumi.output_type
class JobNewClusterClusterLogConfDbfs(dict):
    def __init__(__self__, *,
                 destination: str):
        JobNewClusterClusterLogConfDbfs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobNewClusterClusterLogConfS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cannedAcl":
            suggest = "canned_acl"
        elif key == "enableEncryption":
            suggest = "enable_encryption"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobNewClusterClusterLogConfS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobNewClusterClusterLogConfS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobNewClusterClusterLogConfS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        JobNewClusterClusterLogConfS3._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class JobNewClusterClusterMountInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localMountDirPath":
            suggest = "local_mount_dir_path"
        elif key == "networkFilesystemInfo":
            suggest = "network_filesystem_info"
        elif key == "remoteMountDirPath":
            suggest = "remote_mount_dir_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobNewClusterClusterMountInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobNewClusterClusterMountInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobNewClusterClusterMountInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_mount_dir_path: str,
                 network_filesystem_info: 'outputs.JobNewClusterClusterMountInfoNetworkFilesystemInfo',
                 remote_mount_dir_path: Optional[str] = None):
        JobNewClusterClusterMountInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            local_mount_dir_path=local_mount_dir_path,
            network_filesystem_info=network_filesystem_info,
            remote_mount_dir_path=remote_mount_dir_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             local_mount_dir_path: str,
             network_filesystem_info: 'outputs.JobNewClusterClusterMountInfoNetworkFilesystemInfo',
             remote_mount_dir_path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'localMountDirPath' in kwargs:
            local_mount_dir_path = kwargs['localMountDirPath']
        if 'networkFilesystemInfo' in kwargs:
            network_filesystem_info = kwargs['networkFilesystemInfo']
        if 'remoteMountDirPath' in kwargs:
            remote_mount_dir_path = kwargs['remoteMountDirPath']

        _setter("local_mount_dir_path", local_mount_dir_path)
        _setter("network_filesystem_info", network_filesystem_info)
        if remote_mount_dir_path is not None:
            _setter("remote_mount_dir_path", remote_mount_dir_path)

    @property
    @pulumi.getter(name="localMountDirPath")
    def local_mount_dir_path(self) -> str:
        return pulumi.get(self, "local_mount_dir_path")

    @property
    @pulumi.getter(name="networkFilesystemInfo")
    def network_filesystem_info(self) -> 'outputs.JobNewClusterClusterMountInfoNetworkFilesystemInfo':
        return pulumi.get(self, "network_filesystem_info")

    @property
    @pulumi.getter(name="remoteMountDirPath")
    def remote_mount_dir_path(self) -> Optional[str]:
        return pulumi.get(self, "remote_mount_dir_path")


@pulumi.output_type
class JobNewClusterClusterMountInfoNetworkFilesystemInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverAddress":
            suggest = "server_address"
        elif key == "mountOptions":
            suggest = "mount_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobNewClusterClusterMountInfoNetworkFilesystemInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobNewClusterClusterMountInfoNetworkFilesystemInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobNewClusterClusterMountInfoNetworkFilesystemInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server_address: str,
                 mount_options: Optional[str] = None):
        JobNewClusterClusterMountInfoNetworkFilesystemInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            server_address=server_address,
            mount_options=mount_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             server_address: str,
             mount_options: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serverAddress' in kwargs:
            server_address = kwargs['serverAddress']
        if 'mountOptions' in kwargs:
            mount_options = kwargs['mountOptions']

        _setter("server_address", server_address)
        if mount_options is not None:
            _setter("mount_options", mount_options)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> str:
        return pulumi.get(self, "server_address")

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[str]:
        return pulumi.get(self, "mount_options")


@pulumi.output_type
class JobNewClusterDockerImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobNewClusterDockerImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobNewClusterDockerImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobNewClusterDockerImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 basic_auth: Optional['outputs.JobNewClusterDockerImageBasicAuth'] = None):
        """
        :param str url: URL of the job on the given workspace
        """
        JobNewClusterDockerImage._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            basic_auth=basic_auth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             basic_auth: Optional['outputs.JobNewClusterDockerImageBasicAuth'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'basicAuth' in kwargs:
            basic_auth = kwargs['basicAuth']

        _setter("url", url)
        if basic_auth is not None:
            _setter("basic_auth", basic_auth)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of the job on the given workspace
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.JobNewClusterDockerImageBasicAuth']:
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class JobNewClusterDockerImageBasicAuth(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        JobNewClusterDockerImageBasicAuth._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class JobNewClusterGcpAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootDiskSize":
            suggest = "boot_disk_size"
        elif key == "googleServiceAccount":
            suggest = "google_service_account"
        elif key == "localSsdCount":
            suggest = "local_ssd_count"
        elif key == "usePreemptibleExecutors":
            suggest = "use_preemptible_executors"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobNewClusterGcpAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobNewClusterGcpAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobNewClusterGcpAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 boot_disk_size: Optional[int] = None,
                 google_service_account: Optional[str] = None,
                 local_ssd_count: Optional[int] = None,
                 use_preemptible_executors: Optional[bool] = None,
                 zone_id: Optional[str] = None):
        JobNewClusterGcpAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            boot_disk_size=boot_disk_size,
            google_service_account=google_service_account,
            local_ssd_count=local_ssd_count,
            use_preemptible_executors=use_preemptible_executors,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             boot_disk_size: Optional[int] = None,
             google_service_account: Optional[str] = None,
             local_ssd_count: Optional[int] = None,
             use_preemptible_executors: Optional[bool] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bootDiskSize' in kwargs:
            boot_disk_size = kwargs['bootDiskSize']
        if 'googleServiceAccount' in kwargs:
            google_service_account = kwargs['googleServiceAccount']
        if 'localSsdCount' in kwargs:
            local_ssd_count = kwargs['localSsdCount']
        if 'usePreemptibleExecutors' in kwargs:
            use_preemptible_executors = kwargs['usePreemptibleExecutors']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if boot_disk_size is not None:
            _setter("boot_disk_size", boot_disk_size)
        if google_service_account is not None:
            _setter("google_service_account", google_service_account)
        if local_ssd_count is not None:
            _setter("local_ssd_count", local_ssd_count)
        if use_preemptible_executors is not None:
            _setter("use_preemptible_executors", use_preemptible_executors)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[int]:
        return pulumi.get(self, "boot_disk_size")

    @property
    @pulumi.getter(name="googleServiceAccount")
    def google_service_account(self) -> Optional[str]:
        return pulumi.get(self, "google_service_account")

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[int]:
        return pulumi.get(self, "local_ssd_count")

    @property
    @pulumi.getter(name="usePreemptibleExecutors")
    def use_preemptible_executors(self) -> Optional[bool]:
        return pulumi.get(self, "use_preemptible_executors")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class JobNewClusterInitScript(dict):
    def __init__(__self__, *,
                 abfss: Optional['outputs.JobNewClusterInitScriptAbfss'] = None,
                 dbfs: Optional['outputs.JobNewClusterInitScriptDbfs'] = None,
                 file: Optional['outputs.JobNewClusterInitScriptFile'] = None,
                 gcs: Optional['outputs.JobNewClusterInitScriptGcs'] = None,
                 s3: Optional['outputs.JobNewClusterInitScriptS3'] = None,
                 volumes: Optional['outputs.JobNewClusterInitScriptVolumes'] = None,
                 workspace: Optional['outputs.JobNewClusterInitScriptWorkspace'] = None):
        """
        :param 'JobNewClusterInitScriptFileArgs' file: block consisting of single string field: `path` - a relative path to the file (inside the Git repository) with SQL commands to execute.  *Requires `git_source` configuration block*.
               
               Example
               
               ```python
               import pulumi
               import pulumi_databricks as databricks
               
               sql_aggregation_job = databricks.Job("sqlAggregationJob", tasks=[
                   databricks.JobTaskArgs(
                       task_key="run_agg_query",
                       sql_task=databricks.JobTaskSqlTaskArgs(
                           warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                           query=databricks.JobTaskSqlTaskQueryArgs(
                               query_id=databricks_sql_query["agg_query"]["id"],
                           ),
                       ),
                   ),
                   databricks.JobTaskArgs(
                       task_key="run_dashboard",
                       sql_task=databricks.JobTaskSqlTaskArgs(
                           warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                           dashboard=databricks.JobTaskSqlTaskDashboardArgs(
                               dashboard_id=databricks_sql_dashboard["dash"]["id"],
                               subscriptions=[databricks.JobTaskSqlTaskDashboardSubscriptionArgs(
                                   user_name="user@domain.com",
                               )],
                           ),
                       ),
                   ),
                   databricks.JobTaskArgs(
                       task_key="run_alert",
                       sql_task=databricks.JobTaskSqlTaskArgs(
                           warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                           alert=databricks.JobTaskSqlTaskAlertArgs(
                               alert_id=databricks_sql_alert["alert"]["id"],
                               subscriptions=[databricks.JobTaskSqlTaskAlertSubscriptionArgs(
                                   user_name="user@domain.com",
                               )],
                           ),
                       ),
                   ),
               ])
               ```
        """
        JobNewClusterInitScript._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abfss=abfss,
            dbfs=dbfs,
            file=file,
            gcs=gcs,
            s3=s3,
            volumes=volumes,
            workspace=workspace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abfss: Optional['outputs.JobNewClusterInitScriptAbfss'] = None,
             dbfs: Optional['outputs.JobNewClusterInitScriptDbfs'] = None,
             file: Optional['outputs.JobNewClusterInitScriptFile'] = None,
             gcs: Optional['outputs.JobNewClusterInitScriptGcs'] = None,
             s3: Optional['outputs.JobNewClusterInitScriptS3'] = None,
             volumes: Optional['outputs.JobNewClusterInitScriptVolumes'] = None,
             workspace: Optional['outputs.JobNewClusterInitScriptWorkspace'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if abfss is not None:
            _setter("abfss", abfss)
        if dbfs is not None:
            _setter("dbfs", dbfs)
        if file is not None:
            _setter("file", file)
        if gcs is not None:
            _setter("gcs", gcs)
        if s3 is not None:
            _setter("s3", s3)
        if volumes is not None:
            _setter("volumes", volumes)
        if workspace is not None:
            _setter("workspace", workspace)

    @property
    @pulumi.getter
    def abfss(self) -> Optional['outputs.JobNewClusterInitScriptAbfss']:
        return pulumi.get(self, "abfss")

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.JobNewClusterInitScriptDbfs']:
        warnings.warn("""For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.""", DeprecationWarning)
        pulumi.log.warn("""dbfs is deprecated: For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.""")

        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.JobNewClusterInitScriptFile']:
        """
        block consisting of single string field: `path` - a relative path to the file (inside the Git repository) with SQL commands to execute.  *Requires `git_source` configuration block*.

        Example

        ```python
        import pulumi
        import pulumi_databricks as databricks

        sql_aggregation_job = databricks.Job("sqlAggregationJob", tasks=[
            databricks.JobTaskArgs(
                task_key="run_agg_query",
                sql_task=databricks.JobTaskSqlTaskArgs(
                    warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                    query=databricks.JobTaskSqlTaskQueryArgs(
                        query_id=databricks_sql_query["agg_query"]["id"],
                    ),
                ),
            ),
            databricks.JobTaskArgs(
                task_key="run_dashboard",
                sql_task=databricks.JobTaskSqlTaskArgs(
                    warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                    dashboard=databricks.JobTaskSqlTaskDashboardArgs(
                        dashboard_id=databricks_sql_dashboard["dash"]["id"],
                        subscriptions=[databricks.JobTaskSqlTaskDashboardSubscriptionArgs(
                            user_name="user@domain.com",
                        )],
                    ),
                ),
            ),
            databricks.JobTaskArgs(
                task_key="run_alert",
                sql_task=databricks.JobTaskSqlTaskArgs(
                    warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                    alert=databricks.JobTaskSqlTaskAlertArgs(
                        alert_id=databricks_sql_alert["alert"]["id"],
                        subscriptions=[databricks.JobTaskSqlTaskAlertSubscriptionArgs(
                            user_name="user@domain.com",
                        )],
                    ),
                ),
            ),
        ])
        ```
        """
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def gcs(self) -> Optional['outputs.JobNewClusterInitScriptGcs']:
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.JobNewClusterInitScriptS3']:
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter
    def volumes(self) -> Optional['outputs.JobNewClusterInitScriptVolumes']:
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def workspace(self) -> Optional['outputs.JobNewClusterInitScriptWorkspace']:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class JobNewClusterInitScriptAbfss(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobNewClusterInitScriptAbfss._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobNewClusterInitScriptDbfs(dict):
    def __init__(__self__, *,
                 destination: str):
        JobNewClusterInitScriptDbfs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobNewClusterInitScriptFile(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobNewClusterInitScriptFile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobNewClusterInitScriptGcs(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobNewClusterInitScriptGcs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobNewClusterInitScriptS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cannedAcl":
            suggest = "canned_acl"
        elif key == "enableEncryption":
            suggest = "enable_encryption"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobNewClusterInitScriptS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobNewClusterInitScriptS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobNewClusterInitScriptS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        JobNewClusterInitScriptS3._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class JobNewClusterInitScriptVolumes(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobNewClusterInitScriptVolumes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobNewClusterInitScriptWorkspace(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobNewClusterInitScriptWorkspace._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobNewClusterWorkloadType(dict):
    def __init__(__self__, *,
                 clients: 'outputs.JobNewClusterWorkloadTypeClients'):
        JobNewClusterWorkloadType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            clients=clients,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             clients: 'outputs.JobNewClusterWorkloadTypeClients',
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("clients", clients)

    @property
    @pulumi.getter
    def clients(self) -> 'outputs.JobNewClusterWorkloadTypeClients':
        return pulumi.get(self, "clients")


@pulumi.output_type
class JobNewClusterWorkloadTypeClients(dict):
    def __init__(__self__, *,
                 jobs: Optional[bool] = None,
                 notebooks: Optional[bool] = None):
        JobNewClusterWorkloadTypeClients._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jobs=jobs,
            notebooks=notebooks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jobs: Optional[bool] = None,
             notebooks: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if jobs is not None:
            _setter("jobs", jobs)
        if notebooks is not None:
            _setter("notebooks", notebooks)

    @property
    @pulumi.getter
    def jobs(self) -> Optional[bool]:
        return pulumi.get(self, "jobs")

    @property
    @pulumi.getter
    def notebooks(self) -> Optional[bool]:
        return pulumi.get(self, "notebooks")


@pulumi.output_type
class JobNotebookTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notebookPath":
            suggest = "notebook_path"
        elif key == "baseParameters":
            suggest = "base_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobNotebookTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobNotebookTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobNotebookTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notebook_path: str,
                 base_parameters: Optional[Mapping[str, Any]] = None,
                 source: Optional[str] = None):
        """
        :param str notebook_path: The path of the Notebook to be run in the Databricks workspace or remote repository. For notebooks stored in the Databricks workspace, the path must be absolute and begin with a slash. For notebooks stored in a remote repository, the path must be relative. This field is required.
        :param Mapping[str, Any] base_parameters: (Map) Base parameters to be used for each run of this job. If the run is initiated by a call to run-now with parameters specified, the two parameters maps will be merged. If the same key is specified in base_parameters and in run-now, the value from run-now will be used. If the notebook takes a parameter that is not specified in the job’s base_parameters or the run-now override parameters, the default value from the notebook will be used. Retrieve these parameters in a notebook using `dbutils.widgets.get`.
        :param str source: Location type of the notebook, can only be `WORKSPACE` or `GIT`. When set to `WORKSPACE`, the notebook will be retrieved from the local Databricks workspace. When set to `GIT`, the notebook will be retrieved from a Git repository defined in `git_source`. If the value is empty, the task will use `GIT` if `git_source` is defined and `WORKSPACE` otherwise.
        """
        JobNotebookTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            notebook_path=notebook_path,
            base_parameters=base_parameters,
            source=source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             notebook_path: str,
             base_parameters: Optional[Mapping[str, Any]] = None,
             source: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'notebookPath' in kwargs:
            notebook_path = kwargs['notebookPath']
        if 'baseParameters' in kwargs:
            base_parameters = kwargs['baseParameters']

        _setter("notebook_path", notebook_path)
        if base_parameters is not None:
            _setter("base_parameters", base_parameters)
        if source is not None:
            _setter("source", source)

    @property
    @pulumi.getter(name="notebookPath")
    def notebook_path(self) -> str:
        """
        The path of the Notebook to be run in the Databricks workspace or remote repository. For notebooks stored in the Databricks workspace, the path must be absolute and begin with a slash. For notebooks stored in a remote repository, the path must be relative. This field is required.
        """
        return pulumi.get(self, "notebook_path")

    @property
    @pulumi.getter(name="baseParameters")
    def base_parameters(self) -> Optional[Mapping[str, Any]]:
        """
        (Map) Base parameters to be used for each run of this job. If the run is initiated by a call to run-now with parameters specified, the two parameters maps will be merged. If the same key is specified in base_parameters and in run-now, the value from run-now will be used. If the notebook takes a parameter that is not specified in the job’s base_parameters or the run-now override parameters, the default value from the notebook will be used. Retrieve these parameters in a notebook using `dbutils.widgets.get`.
        """
        return pulumi.get(self, "base_parameters")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Location type of the notebook, can only be `WORKSPACE` or `GIT`. When set to `WORKSPACE`, the notebook will be retrieved from the local Databricks workspace. When set to `GIT`, the notebook will be retrieved from a Git repository defined in `git_source`. If the value is empty, the task will use `GIT` if `git_source` is defined and `WORKSPACE` otherwise.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class JobNotificationSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noAlertForCanceledRuns":
            suggest = "no_alert_for_canceled_runs"
        elif key == "noAlertForSkippedRuns":
            suggest = "no_alert_for_skipped_runs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobNotificationSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobNotificationSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobNotificationSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 no_alert_for_canceled_runs: Optional[bool] = None,
                 no_alert_for_skipped_runs: Optional[bool] = None):
        """
        :param bool no_alert_for_canceled_runs: (Bool) don't send alert for cancelled runs.
        :param bool no_alert_for_skipped_runs: (Bool) don't send alert for skipped runs.
        """
        JobNotificationSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            no_alert_for_canceled_runs=no_alert_for_canceled_runs,
            no_alert_for_skipped_runs=no_alert_for_skipped_runs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             no_alert_for_canceled_runs: Optional[bool] = None,
             no_alert_for_skipped_runs: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'noAlertForCanceledRuns' in kwargs:
            no_alert_for_canceled_runs = kwargs['noAlertForCanceledRuns']
        if 'noAlertForSkippedRuns' in kwargs:
            no_alert_for_skipped_runs = kwargs['noAlertForSkippedRuns']

        if no_alert_for_canceled_runs is not None:
            _setter("no_alert_for_canceled_runs", no_alert_for_canceled_runs)
        if no_alert_for_skipped_runs is not None:
            _setter("no_alert_for_skipped_runs", no_alert_for_skipped_runs)

    @property
    @pulumi.getter(name="noAlertForCanceledRuns")
    def no_alert_for_canceled_runs(self) -> Optional[bool]:
        """
        (Bool) don't send alert for cancelled runs.
        """
        return pulumi.get(self, "no_alert_for_canceled_runs")

    @property
    @pulumi.getter(name="noAlertForSkippedRuns")
    def no_alert_for_skipped_runs(self) -> Optional[bool]:
        """
        (Bool) don't send alert for skipped runs.
        """
        return pulumi.get(self, "no_alert_for_skipped_runs")


@pulumi.output_type
class JobParameter(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str default: Default value of the parameter.
        :param str name: An optional name for the job. The default value is Untitled.
        """
        JobParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional[str] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if default is not None:
            _setter("default", default)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        Default value of the parameter.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        An optional name for the job. The default value is Untitled.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class JobPipelineTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pipelineId":
            suggest = "pipeline_id"
        elif key == "fullRefresh":
            suggest = "full_refresh"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobPipelineTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobPipelineTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobPipelineTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pipeline_id: str,
                 full_refresh: Optional[bool] = None):
        """
        :param str pipeline_id: The pipeline's unique ID.
        :param bool full_refresh: (Bool) Specifies if there should be full refresh of the pipeline.
               
               > **Note** The following configuration blocks are only supported inside a `task` block
        """
        JobPipelineTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pipeline_id=pipeline_id,
            full_refresh=full_refresh,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pipeline_id: str,
             full_refresh: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'pipelineId' in kwargs:
            pipeline_id = kwargs['pipelineId']
        if 'fullRefresh' in kwargs:
            full_refresh = kwargs['fullRefresh']

        _setter("pipeline_id", pipeline_id)
        if full_refresh is not None:
            _setter("full_refresh", full_refresh)

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> str:
        """
        The pipeline's unique ID.
        """
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="fullRefresh")
    def full_refresh(self) -> Optional[bool]:
        """
        (Bool) Specifies if there should be full refresh of the pipeline.

        > **Note** The following configuration blocks are only supported inside a `task` block
        """
        return pulumi.get(self, "full_refresh")


@pulumi.output_type
class JobPythonWheelTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entryPoint":
            suggest = "entry_point"
        elif key == "namedParameters":
            suggest = "named_parameters"
        elif key == "packageName":
            suggest = "package_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobPythonWheelTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobPythonWheelTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobPythonWheelTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entry_point: Optional[str] = None,
                 named_parameters: Optional[Mapping[str, Any]] = None,
                 package_name: Optional[str] = None,
                 parameters: Optional[Sequence[str]] = None):
        """
        :param str entry_point: Python function as entry point for the task
        :param Mapping[str, Any] named_parameters: Named parameters for the task
        :param str package_name: Name of Python package
        :param Sequence[str] parameters: Parameters for the task
        """
        JobPythonWheelTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            entry_point=entry_point,
            named_parameters=named_parameters,
            package_name=package_name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             entry_point: Optional[str] = None,
             named_parameters: Optional[Mapping[str, Any]] = None,
             package_name: Optional[str] = None,
             parameters: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'entryPoint' in kwargs:
            entry_point = kwargs['entryPoint']
        if 'namedParameters' in kwargs:
            named_parameters = kwargs['namedParameters']
        if 'packageName' in kwargs:
            package_name = kwargs['packageName']

        if entry_point is not None:
            _setter("entry_point", entry_point)
        if named_parameters is not None:
            _setter("named_parameters", named_parameters)
        if package_name is not None:
            _setter("package_name", package_name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter(name="entryPoint")
    def entry_point(self) -> Optional[str]:
        """
        Python function as entry point for the task
        """
        return pulumi.get(self, "entry_point")

    @property
    @pulumi.getter(name="namedParameters")
    def named_parameters(self) -> Optional[Mapping[str, Any]]:
        """
        Named parameters for the task
        """
        return pulumi.get(self, "named_parameters")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[str]:
        """
        Name of Python package
        """
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        """
        Parameters for the task
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class JobQueue(dict):
    def __init__(__self__, *,
                 enabled: bool):
        JobQueue._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class JobRunAs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "servicePrincipalName":
            suggest = "service_principal_name"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunAs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunAs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunAs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_principal_name: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        :param str service_principal_name: The application ID of an active service principal. Setting this field requires the `servicePrincipal/user` role.
               
               Example:
               
               ```python
               import pulumi
               import pulumi_databricks as databricks
               
               this = databricks.Job("this", run_as=databricks.JobRunAsArgs(
                   service_principal_name="8d23ae77-912e-4a19-81e4-b9c3f5cc9349",
               ))
               ```
        :param str user_name: The email of an active workspace user. Non-admin users can only set this field to their own email.
        """
        JobRunAs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            service_principal_name=service_principal_name,
            user_name=user_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             service_principal_name: Optional[str] = None,
             user_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'servicePrincipalName' in kwargs:
            service_principal_name = kwargs['servicePrincipalName']
        if 'userName' in kwargs:
            user_name = kwargs['userName']

        if service_principal_name is not None:
            _setter("service_principal_name", service_principal_name)
        if user_name is not None:
            _setter("user_name", user_name)

    @property
    @pulumi.getter(name="servicePrincipalName")
    def service_principal_name(self) -> Optional[str]:
        """
        The application ID of an active service principal. Setting this field requires the `servicePrincipal/user` role.

        Example:

        ```python
        import pulumi
        import pulumi_databricks as databricks

        this = databricks.Job("this", run_as=databricks.JobRunAsArgs(
            service_principal_name="8d23ae77-912e-4a19-81e4-b9c3f5cc9349",
        ))
        ```
        """
        return pulumi.get(self, "service_principal_name")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        The email of an active workspace user. Non-admin users can only set this field to their own email.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class JobRunJobTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobId":
            suggest = "job_id"
        elif key == "jobParameters":
            suggest = "job_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_id: int,
                 job_parameters: Optional[Mapping[str, Any]] = None):
        """
        :param int job_id: (String) ID of the job
        :param Mapping[str, Any] job_parameters: (Map) Job parameters for the task
        """
        JobRunJobTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            job_id=job_id,
            job_parameters=job_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             job_id: int,
             job_parameters: Optional[Mapping[str, Any]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jobId' in kwargs:
            job_id = kwargs['jobId']
        if 'jobParameters' in kwargs:
            job_parameters = kwargs['jobParameters']

        _setter("job_id", job_id)
        if job_parameters is not None:
            _setter("job_parameters", job_parameters)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> int:
        """
        (String) ID of the job
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobParameters")
    def job_parameters(self) -> Optional[Mapping[str, Any]]:
        """
        (Map) Job parameters for the task
        """
        return pulumi.get(self, "job_parameters")


@pulumi.output_type
class JobSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quartzCronExpression":
            suggest = "quartz_cron_expression"
        elif key == "timezoneId":
            suggest = "timezone_id"
        elif key == "pauseStatus":
            suggest = "pause_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quartz_cron_expression: str,
                 timezone_id: str,
                 pause_status: Optional[str] = None):
        """
        :param str quartz_cron_expression: A [Cron expression using Quartz syntax](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) that describes the schedule for a job. This field is required.
        :param str timezone_id: A Java timezone ID. The schedule for a job will be resolved with respect to this timezone. See Java TimeZone for details. This field is required.
        :param str pause_status: Indicate whether this schedule is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pause_status` field is omitted and a schedule is provided, the server will default to using `UNPAUSED` as a value for `pause_status`.
        """
        JobSchedule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            quartz_cron_expression=quartz_cron_expression,
            timezone_id=timezone_id,
            pause_status=pause_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             quartz_cron_expression: str,
             timezone_id: str,
             pause_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'quartzCronExpression' in kwargs:
            quartz_cron_expression = kwargs['quartzCronExpression']
        if 'timezoneId' in kwargs:
            timezone_id = kwargs['timezoneId']
        if 'pauseStatus' in kwargs:
            pause_status = kwargs['pauseStatus']

        _setter("quartz_cron_expression", quartz_cron_expression)
        _setter("timezone_id", timezone_id)
        if pause_status is not None:
            _setter("pause_status", pause_status)

    @property
    @pulumi.getter(name="quartzCronExpression")
    def quartz_cron_expression(self) -> str:
        """
        A [Cron expression using Quartz syntax](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) that describes the schedule for a job. This field is required.
        """
        return pulumi.get(self, "quartz_cron_expression")

    @property
    @pulumi.getter(name="timezoneId")
    def timezone_id(self) -> str:
        """
        A Java timezone ID. The schedule for a job will be resolved with respect to this timezone. See Java TimeZone for details. This field is required.
        """
        return pulumi.get(self, "timezone_id")

    @property
    @pulumi.getter(name="pauseStatus")
    def pause_status(self) -> Optional[str]:
        """
        Indicate whether this schedule is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pause_status` field is omitted and a schedule is provided, the server will default to using `UNPAUSED` as a value for `pause_status`.
        """
        return pulumi.get(self, "pause_status")


@pulumi.output_type
class JobSparkJarTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jarUri":
            suggest = "jar_uri"
        elif key == "mainClassName":
            suggest = "main_class_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobSparkJarTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobSparkJarTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobSparkJarTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jar_uri: Optional[str] = None,
                 main_class_name: Optional[str] = None,
                 parameters: Optional[Sequence[str]] = None):
        """
        :param str main_class_name: The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. The code should use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs of the job will fail.
        :param Sequence[str] parameters: (List) Parameters passed to the main method.
        """
        JobSparkJarTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jar_uri=jar_uri,
            main_class_name=main_class_name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jar_uri: Optional[str] = None,
             main_class_name: Optional[str] = None,
             parameters: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jarUri' in kwargs:
            jar_uri = kwargs['jarUri']
        if 'mainClassName' in kwargs:
            main_class_name = kwargs['mainClassName']

        if jar_uri is not None:
            _setter("jar_uri", jar_uri)
        if main_class_name is not None:
            _setter("main_class_name", main_class_name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter(name="jarUri")
    def jar_uri(self) -> Optional[str]:
        return pulumi.get(self, "jar_uri")

    @property
    @pulumi.getter(name="mainClassName")
    def main_class_name(self) -> Optional[str]:
        """
        The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. The code should use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs of the job will fail.
        """
        return pulumi.get(self, "main_class_name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        """
        (List) Parameters passed to the main method.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class JobSparkPythonTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pythonFile":
            suggest = "python_file"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobSparkPythonTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobSparkPythonTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobSparkPythonTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 python_file: str,
                 parameters: Optional[Sequence[str]] = None,
                 source: Optional[str] = None):
        """
        :param str python_file: The URI of the Python file to be executed. databricks_dbfs_file, cloud file URIs (e.g. `s3:/`, `abfss:/`, `gs:/`), workspace paths and remote repository are supported. For Python files stored in the Databricks workspace, the path must be absolute and begin with `/Repos`. For files stored in a remote repository, the path must be relative. This field is required.
        :param Sequence[str] parameters: (List) Command line parameters passed to the Python file.
        :param str source: Location type of the Python file, can only be `GIT`. When set to `GIT`, the Python file will be retrieved from a Git repository defined in `git_source`.
        """
        JobSparkPythonTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            python_file=python_file,
            parameters=parameters,
            source=source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             python_file: str,
             parameters: Optional[Sequence[str]] = None,
             source: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'pythonFile' in kwargs:
            python_file = kwargs['pythonFile']

        _setter("python_file", python_file)
        if parameters is not None:
            _setter("parameters", parameters)
        if source is not None:
            _setter("source", source)

    @property
    @pulumi.getter(name="pythonFile")
    def python_file(self) -> str:
        """
        The URI of the Python file to be executed. databricks_dbfs_file, cloud file URIs (e.g. `s3:/`, `abfss:/`, `gs:/`), workspace paths and remote repository are supported. For Python files stored in the Databricks workspace, the path must be absolute and begin with `/Repos`. For files stored in a remote repository, the path must be relative. This field is required.
        """
        return pulumi.get(self, "python_file")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        """
        (List) Command line parameters passed to the Python file.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Location type of the Python file, can only be `GIT`. When set to `GIT`, the Python file will be retrieved from a Git repository defined in `git_source`.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class JobSparkSubmitTask(dict):
    def __init__(__self__, *,
                 parameters: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] parameters: (List) Command-line parameters passed to spark submit.
        """
        JobSparkSubmitTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameters: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        """
        (List) Command-line parameters passed to spark submit.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class JobTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeKey":
            suggest = "compute_key"
        elif key == "conditionTask":
            suggest = "condition_task"
        elif key == "dbtTask":
            suggest = "dbt_task"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "emailNotifications":
            suggest = "email_notifications"
        elif key == "existingClusterId":
            suggest = "existing_cluster_id"
        elif key == "jobClusterKey":
            suggest = "job_cluster_key"
        elif key == "maxRetries":
            suggest = "max_retries"
        elif key == "minRetryIntervalMillis":
            suggest = "min_retry_interval_millis"
        elif key == "newCluster":
            suggest = "new_cluster"
        elif key == "notebookTask":
            suggest = "notebook_task"
        elif key == "notificationSettings":
            suggest = "notification_settings"
        elif key == "pipelineTask":
            suggest = "pipeline_task"
        elif key == "pythonWheelTask":
            suggest = "python_wheel_task"
        elif key == "retryOnTimeout":
            suggest = "retry_on_timeout"
        elif key == "runIf":
            suggest = "run_if"
        elif key == "runJobTask":
            suggest = "run_job_task"
        elif key == "sparkJarTask":
            suggest = "spark_jar_task"
        elif key == "sparkPythonTask":
            suggest = "spark_python_task"
        elif key == "sparkSubmitTask":
            suggest = "spark_submit_task"
        elif key == "sqlTask":
            suggest = "sql_task"
        elif key == "taskKey":
            suggest = "task_key"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_key: Optional[str] = None,
                 condition_task: Optional['outputs.JobTaskConditionTask'] = None,
                 dbt_task: Optional['outputs.JobTaskDbtTask'] = None,
                 depends_ons: Optional[Sequence['outputs.JobTaskDependsOn']] = None,
                 description: Optional[str] = None,
                 email_notifications: Optional['outputs.JobTaskEmailNotifications'] = None,
                 existing_cluster_id: Optional[str] = None,
                 health: Optional['outputs.JobTaskHealth'] = None,
                 job_cluster_key: Optional[str] = None,
                 libraries: Optional[Sequence['outputs.JobTaskLibrary']] = None,
                 max_retries: Optional[int] = None,
                 min_retry_interval_millis: Optional[int] = None,
                 new_cluster: Optional['outputs.JobTaskNewCluster'] = None,
                 notebook_task: Optional['outputs.JobTaskNotebookTask'] = None,
                 notification_settings: Optional['outputs.JobTaskNotificationSettings'] = None,
                 pipeline_task: Optional['outputs.JobTaskPipelineTask'] = None,
                 python_wheel_task: Optional['outputs.JobTaskPythonWheelTask'] = None,
                 retry_on_timeout: Optional[bool] = None,
                 run_if: Optional[str] = None,
                 run_job_task: Optional['outputs.JobTaskRunJobTask'] = None,
                 spark_jar_task: Optional['outputs.JobTaskSparkJarTask'] = None,
                 spark_python_task: Optional['outputs.JobTaskSparkPythonTask'] = None,
                 spark_submit_task: Optional['outputs.JobTaskSparkSubmitTask'] = None,
                 sql_task: Optional['outputs.JobTaskSqlTask'] = None,
                 task_key: Optional[str] = None,
                 timeout_seconds: Optional[int] = None):
        """
        :param Sequence['JobTaskDependsOnArgs'] depends_ons: block specifying dependency(-ies) for a given task.
        :param 'JobTaskEmailNotificationsArgs' email_notifications: (List) An optional set of email addresses notified when runs of this job begins, completes and fails. The default behavior is to not send any emails. This field is a block and is documented below.
        :param 'JobTaskHealthArgs' health: block described below that specifies health conditions for a given task.
        :param str job_cluster_key: Identifier that can be referenced in `task` block, so that cluster is shared between tasks
        :param Sequence['JobTaskLibraryArgs'] libraries: (Set) An optional list of libraries to be installed on the cluster that will execute the job. Please consult libraries section for Cluster resource.
        :param int max_retries: (Integer) An optional maximum number of times to retry an unsuccessful run. A run is considered to be unsuccessful if it completes with a `FAILED` or `INTERNAL_ERROR` lifecycle state. The value -1 means to retry indefinitely and the value 0 means to never retry. The default behavior is to never retry. A run can have the following lifecycle state: `PENDING`, `RUNNING`, `TERMINATING`, `TERMINATED`, `SKIPPED` or `INTERNAL_ERROR`.
        :param int min_retry_interval_millis: (Integer) An optional minimal interval in milliseconds between the start of the failed run and the subsequent retry run. The default behavior is that unsuccessful runs are immediately retried.
        :param 'JobTaskNewClusterArgs' new_cluster: Same set of parameters as for Cluster resource.
        :param 'JobTaskNotificationSettingsArgs' notification_settings: An optional block controlling the notification settings on the job level (described below).
        :param bool retry_on_timeout: (Bool) An optional policy to specify whether to retry a job when it times out. The default behavior is to not retry on timeout.
        :param str run_if: An optional value indicating the condition that determines whether the task should be run once its dependencies have been completed. When omitted, defaults to `ALL_SUCCESS`.
        :param str task_key: string specifying an unique key for a given task.
               * `*_task` - (Required) one of the specific task blocks described below:
        :param int timeout_seconds: (Integer) An optional timeout applied to each run of this job. The default behavior is to have no timeout.
        """
        JobTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compute_key=compute_key,
            condition_task=condition_task,
            dbt_task=dbt_task,
            depends_ons=depends_ons,
            description=description,
            email_notifications=email_notifications,
            existing_cluster_id=existing_cluster_id,
            health=health,
            job_cluster_key=job_cluster_key,
            libraries=libraries,
            max_retries=max_retries,
            min_retry_interval_millis=min_retry_interval_millis,
            new_cluster=new_cluster,
            notebook_task=notebook_task,
            notification_settings=notification_settings,
            pipeline_task=pipeline_task,
            python_wheel_task=python_wheel_task,
            retry_on_timeout=retry_on_timeout,
            run_if=run_if,
            run_job_task=run_job_task,
            spark_jar_task=spark_jar_task,
            spark_python_task=spark_python_task,
            spark_submit_task=spark_submit_task,
            sql_task=sql_task,
            task_key=task_key,
            timeout_seconds=timeout_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compute_key: Optional[str] = None,
             condition_task: Optional['outputs.JobTaskConditionTask'] = None,
             dbt_task: Optional['outputs.JobTaskDbtTask'] = None,
             depends_ons: Optional[Sequence['outputs.JobTaskDependsOn']] = None,
             description: Optional[str] = None,
             email_notifications: Optional['outputs.JobTaskEmailNotifications'] = None,
             existing_cluster_id: Optional[str] = None,
             health: Optional['outputs.JobTaskHealth'] = None,
             job_cluster_key: Optional[str] = None,
             libraries: Optional[Sequence['outputs.JobTaskLibrary']] = None,
             max_retries: Optional[int] = None,
             min_retry_interval_millis: Optional[int] = None,
             new_cluster: Optional['outputs.JobTaskNewCluster'] = None,
             notebook_task: Optional['outputs.JobTaskNotebookTask'] = None,
             notification_settings: Optional['outputs.JobTaskNotificationSettings'] = None,
             pipeline_task: Optional['outputs.JobTaskPipelineTask'] = None,
             python_wheel_task: Optional['outputs.JobTaskPythonWheelTask'] = None,
             retry_on_timeout: Optional[bool] = None,
             run_if: Optional[str] = None,
             run_job_task: Optional['outputs.JobTaskRunJobTask'] = None,
             spark_jar_task: Optional['outputs.JobTaskSparkJarTask'] = None,
             spark_python_task: Optional['outputs.JobTaskSparkPythonTask'] = None,
             spark_submit_task: Optional['outputs.JobTaskSparkSubmitTask'] = None,
             sql_task: Optional['outputs.JobTaskSqlTask'] = None,
             task_key: Optional[str] = None,
             timeout_seconds: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'computeKey' in kwargs:
            compute_key = kwargs['computeKey']
        if 'conditionTask' in kwargs:
            condition_task = kwargs['conditionTask']
        if 'dbtTask' in kwargs:
            dbt_task = kwargs['dbtTask']
        if 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']
        if 'emailNotifications' in kwargs:
            email_notifications = kwargs['emailNotifications']
        if 'existingClusterId' in kwargs:
            existing_cluster_id = kwargs['existingClusterId']
        if 'jobClusterKey' in kwargs:
            job_cluster_key = kwargs['jobClusterKey']
        if 'maxRetries' in kwargs:
            max_retries = kwargs['maxRetries']
        if 'minRetryIntervalMillis' in kwargs:
            min_retry_interval_millis = kwargs['minRetryIntervalMillis']
        if 'newCluster' in kwargs:
            new_cluster = kwargs['newCluster']
        if 'notebookTask' in kwargs:
            notebook_task = kwargs['notebookTask']
        if 'notificationSettings' in kwargs:
            notification_settings = kwargs['notificationSettings']
        if 'pipelineTask' in kwargs:
            pipeline_task = kwargs['pipelineTask']
        if 'pythonWheelTask' in kwargs:
            python_wheel_task = kwargs['pythonWheelTask']
        if 'retryOnTimeout' in kwargs:
            retry_on_timeout = kwargs['retryOnTimeout']
        if 'runIf' in kwargs:
            run_if = kwargs['runIf']
        if 'runJobTask' in kwargs:
            run_job_task = kwargs['runJobTask']
        if 'sparkJarTask' in kwargs:
            spark_jar_task = kwargs['sparkJarTask']
        if 'sparkPythonTask' in kwargs:
            spark_python_task = kwargs['sparkPythonTask']
        if 'sparkSubmitTask' in kwargs:
            spark_submit_task = kwargs['sparkSubmitTask']
        if 'sqlTask' in kwargs:
            sql_task = kwargs['sqlTask']
        if 'taskKey' in kwargs:
            task_key = kwargs['taskKey']
        if 'timeoutSeconds' in kwargs:
            timeout_seconds = kwargs['timeoutSeconds']

        if compute_key is not None:
            _setter("compute_key", compute_key)
        if condition_task is not None:
            _setter("condition_task", condition_task)
        if dbt_task is not None:
            _setter("dbt_task", dbt_task)
        if depends_ons is not None:
            _setter("depends_ons", depends_ons)
        if description is not None:
            _setter("description", description)
        if email_notifications is not None:
            _setter("email_notifications", email_notifications)
        if existing_cluster_id is not None:
            _setter("existing_cluster_id", existing_cluster_id)
        if health is not None:
            _setter("health", health)
        if job_cluster_key is not None:
            _setter("job_cluster_key", job_cluster_key)
        if libraries is not None:
            _setter("libraries", libraries)
        if max_retries is not None:
            _setter("max_retries", max_retries)
        if min_retry_interval_millis is not None:
            _setter("min_retry_interval_millis", min_retry_interval_millis)
        if new_cluster is not None:
            _setter("new_cluster", new_cluster)
        if notebook_task is not None:
            _setter("notebook_task", notebook_task)
        if notification_settings is not None:
            _setter("notification_settings", notification_settings)
        if pipeline_task is not None:
            _setter("pipeline_task", pipeline_task)
        if python_wheel_task is not None:
            _setter("python_wheel_task", python_wheel_task)
        if retry_on_timeout is not None:
            _setter("retry_on_timeout", retry_on_timeout)
        if run_if is not None:
            _setter("run_if", run_if)
        if run_job_task is not None:
            _setter("run_job_task", run_job_task)
        if spark_jar_task is not None:
            _setter("spark_jar_task", spark_jar_task)
        if spark_python_task is not None:
            _setter("spark_python_task", spark_python_task)
        if spark_submit_task is not None:
            _setter("spark_submit_task", spark_submit_task)
        if sql_task is not None:
            _setter("sql_task", sql_task)
        if task_key is not None:
            _setter("task_key", task_key)
        if timeout_seconds is not None:
            _setter("timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="computeKey")
    def compute_key(self) -> Optional[str]:
        return pulumi.get(self, "compute_key")

    @property
    @pulumi.getter(name="conditionTask")
    def condition_task(self) -> Optional['outputs.JobTaskConditionTask']:
        return pulumi.get(self, "condition_task")

    @property
    @pulumi.getter(name="dbtTask")
    def dbt_task(self) -> Optional['outputs.JobTaskDbtTask']:
        return pulumi.get(self, "dbt_task")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence['outputs.JobTaskDependsOn']]:
        """
        block specifying dependency(-ies) for a given task.
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="emailNotifications")
    def email_notifications(self) -> Optional['outputs.JobTaskEmailNotifications']:
        """
        (List) An optional set of email addresses notified when runs of this job begins, completes and fails. The default behavior is to not send any emails. This field is a block and is documented below.
        """
        return pulumi.get(self, "email_notifications")

    @property
    @pulumi.getter(name="existingClusterId")
    def existing_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "existing_cluster_id")

    @property
    @pulumi.getter
    def health(self) -> Optional['outputs.JobTaskHealth']:
        """
        block described below that specifies health conditions for a given task.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="jobClusterKey")
    def job_cluster_key(self) -> Optional[str]:
        """
        Identifier that can be referenced in `task` block, so that cluster is shared between tasks
        """
        return pulumi.get(self, "job_cluster_key")

    @property
    @pulumi.getter
    def libraries(self) -> Optional[Sequence['outputs.JobTaskLibrary']]:
        """
        (Set) An optional list of libraries to be installed on the cluster that will execute the job. Please consult libraries section for Cluster resource.
        """
        return pulumi.get(self, "libraries")

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[int]:
        """
        (Integer) An optional maximum number of times to retry an unsuccessful run. A run is considered to be unsuccessful if it completes with a `FAILED` or `INTERNAL_ERROR` lifecycle state. The value -1 means to retry indefinitely and the value 0 means to never retry. The default behavior is to never retry. A run can have the following lifecycle state: `PENDING`, `RUNNING`, `TERMINATING`, `TERMINATED`, `SKIPPED` or `INTERNAL_ERROR`.
        """
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter(name="minRetryIntervalMillis")
    def min_retry_interval_millis(self) -> Optional[int]:
        """
        (Integer) An optional minimal interval in milliseconds between the start of the failed run and the subsequent retry run. The default behavior is that unsuccessful runs are immediately retried.
        """
        return pulumi.get(self, "min_retry_interval_millis")

    @property
    @pulumi.getter(name="newCluster")
    def new_cluster(self) -> Optional['outputs.JobTaskNewCluster']:
        """
        Same set of parameters as for Cluster resource.
        """
        return pulumi.get(self, "new_cluster")

    @property
    @pulumi.getter(name="notebookTask")
    def notebook_task(self) -> Optional['outputs.JobTaskNotebookTask']:
        return pulumi.get(self, "notebook_task")

    @property
    @pulumi.getter(name="notificationSettings")
    def notification_settings(self) -> Optional['outputs.JobTaskNotificationSettings']:
        """
        An optional block controlling the notification settings on the job level (described below).
        """
        return pulumi.get(self, "notification_settings")

    @property
    @pulumi.getter(name="pipelineTask")
    def pipeline_task(self) -> Optional['outputs.JobTaskPipelineTask']:
        return pulumi.get(self, "pipeline_task")

    @property
    @pulumi.getter(name="pythonWheelTask")
    def python_wheel_task(self) -> Optional['outputs.JobTaskPythonWheelTask']:
        return pulumi.get(self, "python_wheel_task")

    @property
    @pulumi.getter(name="retryOnTimeout")
    def retry_on_timeout(self) -> Optional[bool]:
        """
        (Bool) An optional policy to specify whether to retry a job when it times out. The default behavior is to not retry on timeout.
        """
        return pulumi.get(self, "retry_on_timeout")

    @property
    @pulumi.getter(name="runIf")
    def run_if(self) -> Optional[str]:
        """
        An optional value indicating the condition that determines whether the task should be run once its dependencies have been completed. When omitted, defaults to `ALL_SUCCESS`.
        """
        return pulumi.get(self, "run_if")

    @property
    @pulumi.getter(name="runJobTask")
    def run_job_task(self) -> Optional['outputs.JobTaskRunJobTask']:
        return pulumi.get(self, "run_job_task")

    @property
    @pulumi.getter(name="sparkJarTask")
    def spark_jar_task(self) -> Optional['outputs.JobTaskSparkJarTask']:
        return pulumi.get(self, "spark_jar_task")

    @property
    @pulumi.getter(name="sparkPythonTask")
    def spark_python_task(self) -> Optional['outputs.JobTaskSparkPythonTask']:
        return pulumi.get(self, "spark_python_task")

    @property
    @pulumi.getter(name="sparkSubmitTask")
    def spark_submit_task(self) -> Optional['outputs.JobTaskSparkSubmitTask']:
        return pulumi.get(self, "spark_submit_task")

    @property
    @pulumi.getter(name="sqlTask")
    def sql_task(self) -> Optional['outputs.JobTaskSqlTask']:
        return pulumi.get(self, "sql_task")

    @property
    @pulumi.getter(name="taskKey")
    def task_key(self) -> Optional[str]:
        """
        string specifying an unique key for a given task.
        * `*_task` - (Required) one of the specific task blocks described below:
        """
        return pulumi.get(self, "task_key")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        (Integer) An optional timeout applied to each run of this job. The default behavior is to have no timeout.
        """
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class JobTaskConditionTask(dict):
    def __init__(__self__, *,
                 left: Optional[str] = None,
                 op: Optional[str] = None,
                 right: Optional[str] = None):
        """
        :param str op: string specifying the operation used to evaluate the given metric. The only supported operation is `GREATER_THAN`.
        """
        JobTaskConditionTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            left=left,
            op=op,
            right=right,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             left: Optional[str] = None,
             op: Optional[str] = None,
             right: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if left is not None:
            _setter("left", left)
        if op is not None:
            _setter("op", op)
        if right is not None:
            _setter("right", right)

    @property
    @pulumi.getter
    def left(self) -> Optional[str]:
        return pulumi.get(self, "left")

    @property
    @pulumi.getter
    def op(self) -> Optional[str]:
        """
        string specifying the operation used to evaluate the given metric. The only supported operation is `GREATER_THAN`.
        """
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def right(self) -> Optional[str]:
        return pulumi.get(self, "right")


@pulumi.output_type
class JobTaskDbtTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "profilesDirectory":
            suggest = "profiles_directory"
        elif key == "projectDirectory":
            suggest = "project_directory"
        elif key == "warehouseId":
            suggest = "warehouse_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskDbtTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskDbtTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskDbtTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 commands: Sequence[str],
                 catalog: Optional[str] = None,
                 profiles_directory: Optional[str] = None,
                 project_directory: Optional[str] = None,
                 schema: Optional[str] = None,
                 warehouse_id: Optional[str] = None):
        """
        :param Sequence[str] commands: (Array) Series of dbt commands to execute in sequence. Every command must start with "dbt".
        :param str catalog: The name of the catalog to use inside Unity Catalog.
        :param str profiles_directory: The relative path to the directory in the repository specified by `git_source` where dbt should look in for the `profiles.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--profile-dir` to a dbt command.
        :param str project_directory: The relative path to the directory in the repository specified in `git_source` where dbt should look in for the `dbt_project.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--project-dir` to a dbt command.
        :param str schema: The name of the schema dbt should run in. Defaults to `default`.
        :param str warehouse_id: The ID of the SQL warehouse that dbt should execute against.
               
               You also need to include a `git_source` block to configure the repository that contains the dbt project.
        """
        JobTaskDbtTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            commands=commands,
            catalog=catalog,
            profiles_directory=profiles_directory,
            project_directory=project_directory,
            schema=schema,
            warehouse_id=warehouse_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             commands: Sequence[str],
             catalog: Optional[str] = None,
             profiles_directory: Optional[str] = None,
             project_directory: Optional[str] = None,
             schema: Optional[str] = None,
             warehouse_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'profilesDirectory' in kwargs:
            profiles_directory = kwargs['profilesDirectory']
        if 'projectDirectory' in kwargs:
            project_directory = kwargs['projectDirectory']
        if 'warehouseId' in kwargs:
            warehouse_id = kwargs['warehouseId']

        _setter("commands", commands)
        if catalog is not None:
            _setter("catalog", catalog)
        if profiles_directory is not None:
            _setter("profiles_directory", profiles_directory)
        if project_directory is not None:
            _setter("project_directory", project_directory)
        if schema is not None:
            _setter("schema", schema)
        if warehouse_id is not None:
            _setter("warehouse_id", warehouse_id)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[str]:
        """
        (Array) Series of dbt commands to execute in sequence. Every command must start with "dbt".
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def catalog(self) -> Optional[str]:
        """
        The name of the catalog to use inside Unity Catalog.
        """
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="profilesDirectory")
    def profiles_directory(self) -> Optional[str]:
        """
        The relative path to the directory in the repository specified by `git_source` where dbt should look in for the `profiles.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--profile-dir` to a dbt command.
        """
        return pulumi.get(self, "profiles_directory")

    @property
    @pulumi.getter(name="projectDirectory")
    def project_directory(self) -> Optional[str]:
        """
        The relative path to the directory in the repository specified in `git_source` where dbt should look in for the `dbt_project.yml` file. If not specified, defaults to the repository's root directory. Equivalent to passing `--project-dir` to a dbt command.
        """
        return pulumi.get(self, "project_directory")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        The name of the schema dbt should run in. Defaults to `default`.
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="warehouseId")
    def warehouse_id(self) -> Optional[str]:
        """
        The ID of the SQL warehouse that dbt should execute against.

        You also need to include a `git_source` block to configure the repository that contains the dbt project.
        """
        return pulumi.get(self, "warehouse_id")


@pulumi.output_type
class JobTaskDependsOn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "taskKey":
            suggest = "task_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskDependsOn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskDependsOn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskDependsOn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 task_key: str,
                 outcome: Optional[str] = None):
        """
        :param str task_key: The name of the task this task depends on.
        """
        JobTaskDependsOn._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            task_key=task_key,
            outcome=outcome,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             task_key: str,
             outcome: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'taskKey' in kwargs:
            task_key = kwargs['taskKey']

        _setter("task_key", task_key)
        if outcome is not None:
            _setter("outcome", outcome)

    @property
    @pulumi.getter(name="taskKey")
    def task_key(self) -> str:
        """
        The name of the task this task depends on.
        """
        return pulumi.get(self, "task_key")

    @property
    @pulumi.getter
    def outcome(self) -> Optional[str]:
        return pulumi.get(self, "outcome")


@pulumi.output_type
class JobTaskEmailNotifications(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertOnLastAttempt":
            suggest = "alert_on_last_attempt"
        elif key == "noAlertForSkippedRuns":
            suggest = "no_alert_for_skipped_runs"
        elif key == "onDurationWarningThresholdExceededs":
            suggest = "on_duration_warning_threshold_exceededs"
        elif key == "onFailures":
            suggest = "on_failures"
        elif key == "onStarts":
            suggest = "on_starts"
        elif key == "onSuccesses":
            suggest = "on_successes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskEmailNotifications. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskEmailNotifications.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskEmailNotifications.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_on_last_attempt: Optional[bool] = None,
                 no_alert_for_skipped_runs: Optional[bool] = None,
                 on_duration_warning_threshold_exceededs: Optional[Sequence[str]] = None,
                 on_failures: Optional[Sequence[str]] = None,
                 on_starts: Optional[Sequence[str]] = None,
                 on_successes: Optional[Sequence[str]] = None):
        """
        :param bool alert_on_last_attempt: (Bool) do not send notifications to recipients specified in `on_start` for the retried runs and do not send notifications to recipients specified in `on_failure` until the last retry of the run.
        :param bool no_alert_for_skipped_runs: (Bool) don't send alert for skipped runs. (It's recommended to use the corresponding setting in the `notification_settings` configuration block).
        :param Sequence[str] on_duration_warning_threshold_exceededs: (List) list of emails to notify when the duration of a run exceeds the threshold specified by the `RUN_DURATION_SECONDS` metric in the `health` block.
        :param Sequence[str] on_failures: (List) list of emails to notify when the run fails.
        :param Sequence[str] on_starts: (List) list of emails to notify when the run starts.
        :param Sequence[str] on_successes: (List) list of emails to notify when the run completes successfully.
        """
        JobTaskEmailNotifications._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert_on_last_attempt=alert_on_last_attempt,
            no_alert_for_skipped_runs=no_alert_for_skipped_runs,
            on_duration_warning_threshold_exceededs=on_duration_warning_threshold_exceededs,
            on_failures=on_failures,
            on_starts=on_starts,
            on_successes=on_successes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert_on_last_attempt: Optional[bool] = None,
             no_alert_for_skipped_runs: Optional[bool] = None,
             on_duration_warning_threshold_exceededs: Optional[Sequence[str]] = None,
             on_failures: Optional[Sequence[str]] = None,
             on_starts: Optional[Sequence[str]] = None,
             on_successes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'alertOnLastAttempt' in kwargs:
            alert_on_last_attempt = kwargs['alertOnLastAttempt']
        if 'noAlertForSkippedRuns' in kwargs:
            no_alert_for_skipped_runs = kwargs['noAlertForSkippedRuns']
        if 'onDurationWarningThresholdExceededs' in kwargs:
            on_duration_warning_threshold_exceededs = kwargs['onDurationWarningThresholdExceededs']
        if 'onFailures' in kwargs:
            on_failures = kwargs['onFailures']
        if 'onStarts' in kwargs:
            on_starts = kwargs['onStarts']
        if 'onSuccesses' in kwargs:
            on_successes = kwargs['onSuccesses']

        if alert_on_last_attempt is not None:
            _setter("alert_on_last_attempt", alert_on_last_attempt)
        if no_alert_for_skipped_runs is not None:
            _setter("no_alert_for_skipped_runs", no_alert_for_skipped_runs)
        if on_duration_warning_threshold_exceededs is not None:
            _setter("on_duration_warning_threshold_exceededs", on_duration_warning_threshold_exceededs)
        if on_failures is not None:
            _setter("on_failures", on_failures)
        if on_starts is not None:
            _setter("on_starts", on_starts)
        if on_successes is not None:
            _setter("on_successes", on_successes)

    @property
    @pulumi.getter(name="alertOnLastAttempt")
    def alert_on_last_attempt(self) -> Optional[bool]:
        """
        (Bool) do not send notifications to recipients specified in `on_start` for the retried runs and do not send notifications to recipients specified in `on_failure` until the last retry of the run.
        """
        return pulumi.get(self, "alert_on_last_attempt")

    @property
    @pulumi.getter(name="noAlertForSkippedRuns")
    def no_alert_for_skipped_runs(self) -> Optional[bool]:
        """
        (Bool) don't send alert for skipped runs. (It's recommended to use the corresponding setting in the `notification_settings` configuration block).
        """
        return pulumi.get(self, "no_alert_for_skipped_runs")

    @property
    @pulumi.getter(name="onDurationWarningThresholdExceededs")
    def on_duration_warning_threshold_exceededs(self) -> Optional[Sequence[str]]:
        """
        (List) list of emails to notify when the duration of a run exceeds the threshold specified by the `RUN_DURATION_SECONDS` metric in the `health` block.
        """
        return pulumi.get(self, "on_duration_warning_threshold_exceededs")

    @property
    @pulumi.getter(name="onFailures")
    def on_failures(self) -> Optional[Sequence[str]]:
        """
        (List) list of emails to notify when the run fails.
        """
        return pulumi.get(self, "on_failures")

    @property
    @pulumi.getter(name="onStarts")
    def on_starts(self) -> Optional[Sequence[str]]:
        """
        (List) list of emails to notify when the run starts.
        """
        return pulumi.get(self, "on_starts")

    @property
    @pulumi.getter(name="onSuccesses")
    def on_successes(self) -> Optional[Sequence[str]]:
        """
        (List) list of emails to notify when the run completes successfully.
        """
        return pulumi.get(self, "on_successes")


@pulumi.output_type
class JobTaskHealth(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.JobTaskHealthRule']):
        """
        :param Sequence['JobTaskHealthRuleArgs'] rules: list of rules that are represented as objects with the following attributes:
        """
        JobTaskHealth._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rules: Sequence['outputs.JobTaskHealthRule'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.JobTaskHealthRule']:
        """
        list of rules that are represented as objects with the following attributes:
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class JobTaskHealthRule(dict):
    def __init__(__self__, *,
                 metric: Optional[str] = None,
                 op: Optional[str] = None,
                 value: Optional[int] = None):
        """
        :param str metric: string specifying the metric to check.  The only supported metric is `RUN_DURATION_SECONDS` (check [Jobs REST API documentation](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
        :param str op: string specifying the operation used to evaluate the given metric. The only supported operation is `GREATER_THAN`.
        :param int value: integer value used to compare to the given metric.
        """
        JobTaskHealthRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric=metric,
            op=op,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric: Optional[str] = None,
             op: Optional[str] = None,
             value: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if metric is not None:
            _setter("metric", metric)
        if op is not None:
            _setter("op", op)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        """
        string specifying the metric to check.  The only supported metric is `RUN_DURATION_SECONDS` (check [Jobs REST API documentation](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def op(self) -> Optional[str]:
        """
        string specifying the operation used to evaluate the given metric. The only supported operation is `GREATER_THAN`.
        """
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        """
        integer value used to compare to the given metric.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class JobTaskLibrary(dict):
    def __init__(__self__, *,
                 cran: Optional['outputs.JobTaskLibraryCran'] = None,
                 egg: Optional[str] = None,
                 jar: Optional[str] = None,
                 maven: Optional['outputs.JobTaskLibraryMaven'] = None,
                 pypi: Optional['outputs.JobTaskLibraryPypi'] = None,
                 whl: Optional[str] = None):
        JobTaskLibrary._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cran=cran,
            egg=egg,
            jar=jar,
            maven=maven,
            pypi=pypi,
            whl=whl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cran: Optional['outputs.JobTaskLibraryCran'] = None,
             egg: Optional[str] = None,
             jar: Optional[str] = None,
             maven: Optional['outputs.JobTaskLibraryMaven'] = None,
             pypi: Optional['outputs.JobTaskLibraryPypi'] = None,
             whl: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if cran is not None:
            _setter("cran", cran)
        if egg is not None:
            _setter("egg", egg)
        if jar is not None:
            _setter("jar", jar)
        if maven is not None:
            _setter("maven", maven)
        if pypi is not None:
            _setter("pypi", pypi)
        if whl is not None:
            _setter("whl", whl)

    @property
    @pulumi.getter
    def cran(self) -> Optional['outputs.JobTaskLibraryCran']:
        return pulumi.get(self, "cran")

    @property
    @pulumi.getter
    def egg(self) -> Optional[str]:
        return pulumi.get(self, "egg")

    @property
    @pulumi.getter
    def jar(self) -> Optional[str]:
        return pulumi.get(self, "jar")

    @property
    @pulumi.getter
    def maven(self) -> Optional['outputs.JobTaskLibraryMaven']:
        return pulumi.get(self, "maven")

    @property
    @pulumi.getter
    def pypi(self) -> Optional['outputs.JobTaskLibraryPypi']:
        return pulumi.get(self, "pypi")

    @property
    @pulumi.getter
    def whl(self) -> Optional[str]:
        return pulumi.get(self, "whl")


@pulumi.output_type
class JobTaskLibraryCran(dict):
    def __init__(__self__, *,
                 package: str,
                 repo: Optional[str] = None):
        JobTaskLibraryCran._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            package=package,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             package: str,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("package", package)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def package(self) -> str:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class JobTaskLibraryMaven(dict):
    def __init__(__self__, *,
                 coordinates: str,
                 exclusions: Optional[Sequence[str]] = None,
                 repo: Optional[str] = None):
        JobTaskLibraryMaven._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            coordinates=coordinates,
            exclusions=exclusions,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             coordinates: str,
             exclusions: Optional[Sequence[str]] = None,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("coordinates", coordinates)
        if exclusions is not None:
            _setter("exclusions", exclusions)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def coordinates(self) -> str:
        return pulumi.get(self, "coordinates")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class JobTaskLibraryPypi(dict):
    def __init__(__self__, *,
                 package: str,
                 repo: Optional[str] = None):
        JobTaskLibraryPypi._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            package=package,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             package: str,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("package", package)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def package(self) -> str:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class JobTaskNewCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sparkVersion":
            suggest = "spark_version"
        elif key == "applyPolicyDefaultValues":
            suggest = "apply_policy_default_values"
        elif key == "autoterminationMinutes":
            suggest = "autotermination_minutes"
        elif key == "awsAttributes":
            suggest = "aws_attributes"
        elif key == "azureAttributes":
            suggest = "azure_attributes"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterLogConf":
            suggest = "cluster_log_conf"
        elif key == "clusterMountInfos":
            suggest = "cluster_mount_infos"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "customTags":
            suggest = "custom_tags"
        elif key == "dataSecurityMode":
            suggest = "data_security_mode"
        elif key == "dockerImage":
            suggest = "docker_image"
        elif key == "driverInstancePoolId":
            suggest = "driver_instance_pool_id"
        elif key == "driverNodeTypeId":
            suggest = "driver_node_type_id"
        elif key == "enableElasticDisk":
            suggest = "enable_elastic_disk"
        elif key == "enableLocalDiskEncryption":
            suggest = "enable_local_disk_encryption"
        elif key == "gcpAttributes":
            suggest = "gcp_attributes"
        elif key == "idempotencyToken":
            suggest = "idempotency_token"
        elif key == "initScripts":
            suggest = "init_scripts"
        elif key == "instancePoolId":
            suggest = "instance_pool_id"
        elif key == "nodeTypeId":
            suggest = "node_type_id"
        elif key == "numWorkers":
            suggest = "num_workers"
        elif key == "policyId":
            suggest = "policy_id"
        elif key == "runtimeEngine":
            suggest = "runtime_engine"
        elif key == "singleUserName":
            suggest = "single_user_name"
        elif key == "sparkConf":
            suggest = "spark_conf"
        elif key == "sparkEnvVars":
            suggest = "spark_env_vars"
        elif key == "sshPublicKeys":
            suggest = "ssh_public_keys"
        elif key == "workloadType":
            suggest = "workload_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskNewCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskNewCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskNewCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 spark_version: str,
                 apply_policy_default_values: Optional[bool] = None,
                 autoscale: Optional['outputs.JobTaskNewClusterAutoscale'] = None,
                 autotermination_minutes: Optional[int] = None,
                 aws_attributes: Optional['outputs.JobTaskNewClusterAwsAttributes'] = None,
                 azure_attributes: Optional['outputs.JobTaskNewClusterAzureAttributes'] = None,
                 cluster_id: Optional[str] = None,
                 cluster_log_conf: Optional['outputs.JobTaskNewClusterClusterLogConf'] = None,
                 cluster_mount_infos: Optional[Sequence['outputs.JobTaskNewClusterClusterMountInfo']] = None,
                 cluster_name: Optional[str] = None,
                 custom_tags: Optional[Mapping[str, Any]] = None,
                 data_security_mode: Optional[str] = None,
                 docker_image: Optional['outputs.JobTaskNewClusterDockerImage'] = None,
                 driver_instance_pool_id: Optional[str] = None,
                 driver_node_type_id: Optional[str] = None,
                 enable_elastic_disk: Optional[bool] = None,
                 enable_local_disk_encryption: Optional[bool] = None,
                 gcp_attributes: Optional['outputs.JobTaskNewClusterGcpAttributes'] = None,
                 idempotency_token: Optional[str] = None,
                 init_scripts: Optional[Sequence['outputs.JobTaskNewClusterInitScript']] = None,
                 instance_pool_id: Optional[str] = None,
                 node_type_id: Optional[str] = None,
                 num_workers: Optional[int] = None,
                 policy_id: Optional[str] = None,
                 runtime_engine: Optional[str] = None,
                 single_user_name: Optional[str] = None,
                 spark_conf: Optional[Mapping[str, Any]] = None,
                 spark_env_vars: Optional[Mapping[str, Any]] = None,
                 ssh_public_keys: Optional[Sequence[str]] = None,
                 workload_type: Optional['outputs.JobTaskNewClusterWorkloadType'] = None):
        JobTaskNewCluster._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            spark_version=spark_version,
            apply_policy_default_values=apply_policy_default_values,
            autoscale=autoscale,
            autotermination_minutes=autotermination_minutes,
            aws_attributes=aws_attributes,
            azure_attributes=azure_attributes,
            cluster_id=cluster_id,
            cluster_log_conf=cluster_log_conf,
            cluster_mount_infos=cluster_mount_infos,
            cluster_name=cluster_name,
            custom_tags=custom_tags,
            data_security_mode=data_security_mode,
            docker_image=docker_image,
            driver_instance_pool_id=driver_instance_pool_id,
            driver_node_type_id=driver_node_type_id,
            enable_elastic_disk=enable_elastic_disk,
            enable_local_disk_encryption=enable_local_disk_encryption,
            gcp_attributes=gcp_attributes,
            idempotency_token=idempotency_token,
            init_scripts=init_scripts,
            instance_pool_id=instance_pool_id,
            node_type_id=node_type_id,
            num_workers=num_workers,
            policy_id=policy_id,
            runtime_engine=runtime_engine,
            single_user_name=single_user_name,
            spark_conf=spark_conf,
            spark_env_vars=spark_env_vars,
            ssh_public_keys=ssh_public_keys,
            workload_type=workload_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             spark_version: str,
             apply_policy_default_values: Optional[bool] = None,
             autoscale: Optional['outputs.JobTaskNewClusterAutoscale'] = None,
             autotermination_minutes: Optional[int] = None,
             aws_attributes: Optional['outputs.JobTaskNewClusterAwsAttributes'] = None,
             azure_attributes: Optional['outputs.JobTaskNewClusterAzureAttributes'] = None,
             cluster_id: Optional[str] = None,
             cluster_log_conf: Optional['outputs.JobTaskNewClusterClusterLogConf'] = None,
             cluster_mount_infos: Optional[Sequence['outputs.JobTaskNewClusterClusterMountInfo']] = None,
             cluster_name: Optional[str] = None,
             custom_tags: Optional[Mapping[str, Any]] = None,
             data_security_mode: Optional[str] = None,
             docker_image: Optional['outputs.JobTaskNewClusterDockerImage'] = None,
             driver_instance_pool_id: Optional[str] = None,
             driver_node_type_id: Optional[str] = None,
             enable_elastic_disk: Optional[bool] = None,
             enable_local_disk_encryption: Optional[bool] = None,
             gcp_attributes: Optional['outputs.JobTaskNewClusterGcpAttributes'] = None,
             idempotency_token: Optional[str] = None,
             init_scripts: Optional[Sequence['outputs.JobTaskNewClusterInitScript']] = None,
             instance_pool_id: Optional[str] = None,
             node_type_id: Optional[str] = None,
             num_workers: Optional[int] = None,
             policy_id: Optional[str] = None,
             runtime_engine: Optional[str] = None,
             single_user_name: Optional[str] = None,
             spark_conf: Optional[Mapping[str, Any]] = None,
             spark_env_vars: Optional[Mapping[str, Any]] = None,
             ssh_public_keys: Optional[Sequence[str]] = None,
             workload_type: Optional['outputs.JobTaskNewClusterWorkloadType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sparkVersion' in kwargs:
            spark_version = kwargs['sparkVersion']
        if 'applyPolicyDefaultValues' in kwargs:
            apply_policy_default_values = kwargs['applyPolicyDefaultValues']
        if 'autoterminationMinutes' in kwargs:
            autotermination_minutes = kwargs['autoterminationMinutes']
        if 'awsAttributes' in kwargs:
            aws_attributes = kwargs['awsAttributes']
        if 'azureAttributes' in kwargs:
            azure_attributes = kwargs['azureAttributes']
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'clusterLogConf' in kwargs:
            cluster_log_conf = kwargs['clusterLogConf']
        if 'clusterMountInfos' in kwargs:
            cluster_mount_infos = kwargs['clusterMountInfos']
        if 'clusterName' in kwargs:
            cluster_name = kwargs['clusterName']
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']
        if 'dataSecurityMode' in kwargs:
            data_security_mode = kwargs['dataSecurityMode']
        if 'dockerImage' in kwargs:
            docker_image = kwargs['dockerImage']
        if 'driverInstancePoolId' in kwargs:
            driver_instance_pool_id = kwargs['driverInstancePoolId']
        if 'driverNodeTypeId' in kwargs:
            driver_node_type_id = kwargs['driverNodeTypeId']
        if 'enableElasticDisk' in kwargs:
            enable_elastic_disk = kwargs['enableElasticDisk']
        if 'enableLocalDiskEncryption' in kwargs:
            enable_local_disk_encryption = kwargs['enableLocalDiskEncryption']
        if 'gcpAttributes' in kwargs:
            gcp_attributes = kwargs['gcpAttributes']
        if 'idempotencyToken' in kwargs:
            idempotency_token = kwargs['idempotencyToken']
        if 'initScripts' in kwargs:
            init_scripts = kwargs['initScripts']
        if 'instancePoolId' in kwargs:
            instance_pool_id = kwargs['instancePoolId']
        if 'nodeTypeId' in kwargs:
            node_type_id = kwargs['nodeTypeId']
        if 'numWorkers' in kwargs:
            num_workers = kwargs['numWorkers']
        if 'policyId' in kwargs:
            policy_id = kwargs['policyId']
        if 'runtimeEngine' in kwargs:
            runtime_engine = kwargs['runtimeEngine']
        if 'singleUserName' in kwargs:
            single_user_name = kwargs['singleUserName']
        if 'sparkConf' in kwargs:
            spark_conf = kwargs['sparkConf']
        if 'sparkEnvVars' in kwargs:
            spark_env_vars = kwargs['sparkEnvVars']
        if 'sshPublicKeys' in kwargs:
            ssh_public_keys = kwargs['sshPublicKeys']
        if 'workloadType' in kwargs:
            workload_type = kwargs['workloadType']

        _setter("spark_version", spark_version)
        if apply_policy_default_values is not None:
            _setter("apply_policy_default_values", apply_policy_default_values)
        if autoscale is not None:
            _setter("autoscale", autoscale)
        if autotermination_minutes is not None:
            _setter("autotermination_minutes", autotermination_minutes)
        if aws_attributes is not None:
            _setter("aws_attributes", aws_attributes)
        if azure_attributes is not None:
            _setter("azure_attributes", azure_attributes)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if cluster_log_conf is not None:
            _setter("cluster_log_conf", cluster_log_conf)
        if cluster_mount_infos is not None:
            _setter("cluster_mount_infos", cluster_mount_infos)
        if cluster_name is not None:
            _setter("cluster_name", cluster_name)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)
        if data_security_mode is not None:
            _setter("data_security_mode", data_security_mode)
        if docker_image is not None:
            _setter("docker_image", docker_image)
        if driver_instance_pool_id is not None:
            _setter("driver_instance_pool_id", driver_instance_pool_id)
        if driver_node_type_id is not None:
            _setter("driver_node_type_id", driver_node_type_id)
        if enable_elastic_disk is not None:
            _setter("enable_elastic_disk", enable_elastic_disk)
        if enable_local_disk_encryption is not None:
            _setter("enable_local_disk_encryption", enable_local_disk_encryption)
        if gcp_attributes is not None:
            _setter("gcp_attributes", gcp_attributes)
        if idempotency_token is not None:
            _setter("idempotency_token", idempotency_token)
        if init_scripts is not None:
            _setter("init_scripts", init_scripts)
        if instance_pool_id is not None:
            _setter("instance_pool_id", instance_pool_id)
        if node_type_id is not None:
            _setter("node_type_id", node_type_id)
        if num_workers is not None:
            _setter("num_workers", num_workers)
        if policy_id is not None:
            _setter("policy_id", policy_id)
        if runtime_engine is not None:
            _setter("runtime_engine", runtime_engine)
        if single_user_name is not None:
            _setter("single_user_name", single_user_name)
        if spark_conf is not None:
            _setter("spark_conf", spark_conf)
        if spark_env_vars is not None:
            _setter("spark_env_vars", spark_env_vars)
        if ssh_public_keys is not None:
            _setter("ssh_public_keys", ssh_public_keys)
        if workload_type is not None:
            _setter("workload_type", workload_type)

    @property
    @pulumi.getter(name="sparkVersion")
    def spark_version(self) -> str:
        return pulumi.get(self, "spark_version")

    @property
    @pulumi.getter(name="applyPolicyDefaultValues")
    def apply_policy_default_values(self) -> Optional[bool]:
        return pulumi.get(self, "apply_policy_default_values")

    @property
    @pulumi.getter
    def autoscale(self) -> Optional['outputs.JobTaskNewClusterAutoscale']:
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="autoterminationMinutes")
    def autotermination_minutes(self) -> Optional[int]:
        return pulumi.get(self, "autotermination_minutes")

    @property
    @pulumi.getter(name="awsAttributes")
    def aws_attributes(self) -> Optional['outputs.JobTaskNewClusterAwsAttributes']:
        return pulumi.get(self, "aws_attributes")

    @property
    @pulumi.getter(name="azureAttributes")
    def azure_attributes(self) -> Optional['outputs.JobTaskNewClusterAzureAttributes']:
        return pulumi.get(self, "azure_attributes")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterLogConf")
    def cluster_log_conf(self) -> Optional['outputs.JobTaskNewClusterClusterLogConf']:
        return pulumi.get(self, "cluster_log_conf")

    @property
    @pulumi.getter(name="clusterMountInfos")
    def cluster_mount_infos(self) -> Optional[Sequence['outputs.JobTaskNewClusterClusterMountInfo']]:
        return pulumi.get(self, "cluster_mount_infos")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_tags")

    @property
    @pulumi.getter(name="dataSecurityMode")
    def data_security_mode(self) -> Optional[str]:
        return pulumi.get(self, "data_security_mode")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional['outputs.JobTaskNewClusterDockerImage']:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter(name="driverInstancePoolId")
    def driver_instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "driver_instance_pool_id")

    @property
    @pulumi.getter(name="driverNodeTypeId")
    def driver_node_type_id(self) -> Optional[str]:
        return pulumi.get(self, "driver_node_type_id")

    @property
    @pulumi.getter(name="enableElasticDisk")
    def enable_elastic_disk(self) -> Optional[bool]:
        return pulumi.get(self, "enable_elastic_disk")

    @property
    @pulumi.getter(name="enableLocalDiskEncryption")
    def enable_local_disk_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_local_disk_encryption")

    @property
    @pulumi.getter(name="gcpAttributes")
    def gcp_attributes(self) -> Optional['outputs.JobTaskNewClusterGcpAttributes']:
        return pulumi.get(self, "gcp_attributes")

    @property
    @pulumi.getter(name="idempotencyToken")
    def idempotency_token(self) -> Optional[str]:
        return pulumi.get(self, "idempotency_token")

    @property
    @pulumi.getter(name="initScripts")
    def init_scripts(self) -> Optional[Sequence['outputs.JobTaskNewClusterInitScript']]:
        return pulumi.get(self, "init_scripts")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="nodeTypeId")
    def node_type_id(self) -> Optional[str]:
        return pulumi.get(self, "node_type_id")

    @property
    @pulumi.getter(name="numWorkers")
    def num_workers(self) -> Optional[int]:
        return pulumi.get(self, "num_workers")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="runtimeEngine")
    def runtime_engine(self) -> Optional[str]:
        return pulumi.get(self, "runtime_engine")

    @property
    @pulumi.getter(name="singleUserName")
    def single_user_name(self) -> Optional[str]:
        return pulumi.get(self, "single_user_name")

    @property
    @pulumi.getter(name="sparkConf")
    def spark_conf(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_conf")

    @property
    @pulumi.getter(name="sparkEnvVars")
    def spark_env_vars(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_env_vars")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional['outputs.JobTaskNewClusterWorkloadType']:
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class JobTaskNewClusterAutoscale(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxWorkers":
            suggest = "max_workers"
        elif key == "minWorkers":
            suggest = "min_workers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskNewClusterAutoscale. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskNewClusterAutoscale.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskNewClusterAutoscale.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_workers: Optional[int] = None,
                 min_workers: Optional[int] = None):
        JobTaskNewClusterAutoscale._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_workers=max_workers,
            min_workers=min_workers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_workers: Optional[int] = None,
             min_workers: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxWorkers' in kwargs:
            max_workers = kwargs['maxWorkers']
        if 'minWorkers' in kwargs:
            min_workers = kwargs['minWorkers']

        if max_workers is not None:
            _setter("max_workers", max_workers)
        if min_workers is not None:
            _setter("min_workers", min_workers)

    @property
    @pulumi.getter(name="maxWorkers")
    def max_workers(self) -> Optional[int]:
        return pulumi.get(self, "max_workers")

    @property
    @pulumi.getter(name="minWorkers")
    def min_workers(self) -> Optional[int]:
        return pulumi.get(self, "min_workers")


@pulumi.output_type
class JobTaskNewClusterAwsAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ebsVolumeCount":
            suggest = "ebs_volume_count"
        elif key == "ebsVolumeSize":
            suggest = "ebs_volume_size"
        elif key == "ebsVolumeType":
            suggest = "ebs_volume_type"
        elif key == "firstOnDemand":
            suggest = "first_on_demand"
        elif key == "instanceProfileArn":
            suggest = "instance_profile_arn"
        elif key == "spotBidPricePercent":
            suggest = "spot_bid_price_percent"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskNewClusterAwsAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskNewClusterAwsAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskNewClusterAwsAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 ebs_volume_count: Optional[int] = None,
                 ebs_volume_size: Optional[int] = None,
                 ebs_volume_type: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 instance_profile_arn: Optional[str] = None,
                 spot_bid_price_percent: Optional[int] = None,
                 zone_id: Optional[str] = None):
        JobTaskNewClusterAwsAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            ebs_volume_count=ebs_volume_count,
            ebs_volume_size=ebs_volume_size,
            ebs_volume_type=ebs_volume_type,
            first_on_demand=first_on_demand,
            instance_profile_arn=instance_profile_arn,
            spot_bid_price_percent=spot_bid_price_percent,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             ebs_volume_count: Optional[int] = None,
             ebs_volume_size: Optional[int] = None,
             ebs_volume_type: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             instance_profile_arn: Optional[str] = None,
             spot_bid_price_percent: Optional[int] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ebsVolumeCount' in kwargs:
            ebs_volume_count = kwargs['ebsVolumeCount']
        if 'ebsVolumeSize' in kwargs:
            ebs_volume_size = kwargs['ebsVolumeSize']
        if 'ebsVolumeType' in kwargs:
            ebs_volume_type = kwargs['ebsVolumeType']
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'instanceProfileArn' in kwargs:
            instance_profile_arn = kwargs['instanceProfileArn']
        if 'spotBidPricePercent' in kwargs:
            spot_bid_price_percent = kwargs['spotBidPricePercent']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if ebs_volume_count is not None:
            _setter("ebs_volume_count", ebs_volume_count)
        if ebs_volume_size is not None:
            _setter("ebs_volume_size", ebs_volume_size)
        if ebs_volume_type is not None:
            _setter("ebs_volume_type", ebs_volume_type)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if instance_profile_arn is not None:
            _setter("instance_profile_arn", instance_profile_arn)
        if spot_bid_price_percent is not None:
            _setter("spot_bid_price_percent", spot_bid_price_percent)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="ebsVolumeCount")
    def ebs_volume_count(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_count")

    @property
    @pulumi.getter(name="ebsVolumeSize")
    def ebs_volume_size(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_size")

    @property
    @pulumi.getter(name="ebsVolumeType")
    def ebs_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "ebs_volume_type")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[str]:
        return pulumi.get(self, "instance_profile_arn")

    @property
    @pulumi.getter(name="spotBidPricePercent")
    def spot_bid_price_percent(self) -> Optional[int]:
        return pulumi.get(self, "spot_bid_price_percent")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class JobTaskNewClusterAzureAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstOnDemand":
            suggest = "first_on_demand"
        elif key == "spotBidMaxPrice":
            suggest = "spot_bid_max_price"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskNewClusterAzureAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskNewClusterAzureAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskNewClusterAzureAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 spot_bid_max_price: Optional[float] = None):
        JobTaskNewClusterAzureAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            first_on_demand=first_on_demand,
            spot_bid_max_price=spot_bid_max_price,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             spot_bid_max_price: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'spotBidMaxPrice' in kwargs:
            spot_bid_max_price = kwargs['spotBidMaxPrice']

        if availability is not None:
            _setter("availability", availability)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if spot_bid_max_price is not None:
            _setter("spot_bid_max_price", spot_bid_max_price)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="spotBidMaxPrice")
    def spot_bid_max_price(self) -> Optional[float]:
        return pulumi.get(self, "spot_bid_max_price")


@pulumi.output_type
class JobTaskNewClusterClusterLogConf(dict):
    def __init__(__self__, *,
                 dbfs: Optional['outputs.JobTaskNewClusterClusterLogConfDbfs'] = None,
                 s3: Optional['outputs.JobTaskNewClusterClusterLogConfS3'] = None):
        JobTaskNewClusterClusterLogConf._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dbfs=dbfs,
            s3=s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dbfs: Optional['outputs.JobTaskNewClusterClusterLogConfDbfs'] = None,
             s3: Optional['outputs.JobTaskNewClusterClusterLogConfS3'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if dbfs is not None:
            _setter("dbfs", dbfs)
        if s3 is not None:
            _setter("s3", s3)

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.JobTaskNewClusterClusterLogConfDbfs']:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.JobTaskNewClusterClusterLogConfS3']:
        return pulumi.get(self, "s3")


@pulumi.output_type
class JobTaskNewClusterClusterLogConfDbfs(dict):
    def __init__(__self__, *,
                 destination: str):
        JobTaskNewClusterClusterLogConfDbfs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobTaskNewClusterClusterLogConfS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cannedAcl":
            suggest = "canned_acl"
        elif key == "enableEncryption":
            suggest = "enable_encryption"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskNewClusterClusterLogConfS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskNewClusterClusterLogConfS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskNewClusterClusterLogConfS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        JobTaskNewClusterClusterLogConfS3._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class JobTaskNewClusterClusterMountInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localMountDirPath":
            suggest = "local_mount_dir_path"
        elif key == "networkFilesystemInfo":
            suggest = "network_filesystem_info"
        elif key == "remoteMountDirPath":
            suggest = "remote_mount_dir_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskNewClusterClusterMountInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskNewClusterClusterMountInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskNewClusterClusterMountInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_mount_dir_path: str,
                 network_filesystem_info: 'outputs.JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo',
                 remote_mount_dir_path: Optional[str] = None):
        JobTaskNewClusterClusterMountInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            local_mount_dir_path=local_mount_dir_path,
            network_filesystem_info=network_filesystem_info,
            remote_mount_dir_path=remote_mount_dir_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             local_mount_dir_path: str,
             network_filesystem_info: 'outputs.JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo',
             remote_mount_dir_path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'localMountDirPath' in kwargs:
            local_mount_dir_path = kwargs['localMountDirPath']
        if 'networkFilesystemInfo' in kwargs:
            network_filesystem_info = kwargs['networkFilesystemInfo']
        if 'remoteMountDirPath' in kwargs:
            remote_mount_dir_path = kwargs['remoteMountDirPath']

        _setter("local_mount_dir_path", local_mount_dir_path)
        _setter("network_filesystem_info", network_filesystem_info)
        if remote_mount_dir_path is not None:
            _setter("remote_mount_dir_path", remote_mount_dir_path)

    @property
    @pulumi.getter(name="localMountDirPath")
    def local_mount_dir_path(self) -> str:
        return pulumi.get(self, "local_mount_dir_path")

    @property
    @pulumi.getter(name="networkFilesystemInfo")
    def network_filesystem_info(self) -> 'outputs.JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo':
        return pulumi.get(self, "network_filesystem_info")

    @property
    @pulumi.getter(name="remoteMountDirPath")
    def remote_mount_dir_path(self) -> Optional[str]:
        return pulumi.get(self, "remote_mount_dir_path")


@pulumi.output_type
class JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverAddress":
            suggest = "server_address"
        elif key == "mountOptions":
            suggest = "mount_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server_address: str,
                 mount_options: Optional[str] = None):
        JobTaskNewClusterClusterMountInfoNetworkFilesystemInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            server_address=server_address,
            mount_options=mount_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             server_address: str,
             mount_options: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serverAddress' in kwargs:
            server_address = kwargs['serverAddress']
        if 'mountOptions' in kwargs:
            mount_options = kwargs['mountOptions']

        _setter("server_address", server_address)
        if mount_options is not None:
            _setter("mount_options", mount_options)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> str:
        return pulumi.get(self, "server_address")

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[str]:
        return pulumi.get(self, "mount_options")


@pulumi.output_type
class JobTaskNewClusterDockerImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskNewClusterDockerImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskNewClusterDockerImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskNewClusterDockerImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 basic_auth: Optional['outputs.JobTaskNewClusterDockerImageBasicAuth'] = None):
        """
        :param str url: URL of the job on the given workspace
        """
        JobTaskNewClusterDockerImage._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            basic_auth=basic_auth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             basic_auth: Optional['outputs.JobTaskNewClusterDockerImageBasicAuth'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'basicAuth' in kwargs:
            basic_auth = kwargs['basicAuth']

        _setter("url", url)
        if basic_auth is not None:
            _setter("basic_auth", basic_auth)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of the job on the given workspace
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.JobTaskNewClusterDockerImageBasicAuth']:
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class JobTaskNewClusterDockerImageBasicAuth(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        JobTaskNewClusterDockerImageBasicAuth._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class JobTaskNewClusterGcpAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootDiskSize":
            suggest = "boot_disk_size"
        elif key == "googleServiceAccount":
            suggest = "google_service_account"
        elif key == "localSsdCount":
            suggest = "local_ssd_count"
        elif key == "usePreemptibleExecutors":
            suggest = "use_preemptible_executors"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskNewClusterGcpAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskNewClusterGcpAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskNewClusterGcpAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 boot_disk_size: Optional[int] = None,
                 google_service_account: Optional[str] = None,
                 local_ssd_count: Optional[int] = None,
                 use_preemptible_executors: Optional[bool] = None,
                 zone_id: Optional[str] = None):
        JobTaskNewClusterGcpAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            boot_disk_size=boot_disk_size,
            google_service_account=google_service_account,
            local_ssd_count=local_ssd_count,
            use_preemptible_executors=use_preemptible_executors,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             boot_disk_size: Optional[int] = None,
             google_service_account: Optional[str] = None,
             local_ssd_count: Optional[int] = None,
             use_preemptible_executors: Optional[bool] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bootDiskSize' in kwargs:
            boot_disk_size = kwargs['bootDiskSize']
        if 'googleServiceAccount' in kwargs:
            google_service_account = kwargs['googleServiceAccount']
        if 'localSsdCount' in kwargs:
            local_ssd_count = kwargs['localSsdCount']
        if 'usePreemptibleExecutors' in kwargs:
            use_preemptible_executors = kwargs['usePreemptibleExecutors']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if boot_disk_size is not None:
            _setter("boot_disk_size", boot_disk_size)
        if google_service_account is not None:
            _setter("google_service_account", google_service_account)
        if local_ssd_count is not None:
            _setter("local_ssd_count", local_ssd_count)
        if use_preemptible_executors is not None:
            _setter("use_preemptible_executors", use_preemptible_executors)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[int]:
        return pulumi.get(self, "boot_disk_size")

    @property
    @pulumi.getter(name="googleServiceAccount")
    def google_service_account(self) -> Optional[str]:
        return pulumi.get(self, "google_service_account")

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[int]:
        return pulumi.get(self, "local_ssd_count")

    @property
    @pulumi.getter(name="usePreemptibleExecutors")
    def use_preemptible_executors(self) -> Optional[bool]:
        return pulumi.get(self, "use_preemptible_executors")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class JobTaskNewClusterInitScript(dict):
    def __init__(__self__, *,
                 abfss: Optional['outputs.JobTaskNewClusterInitScriptAbfss'] = None,
                 dbfs: Optional['outputs.JobTaskNewClusterInitScriptDbfs'] = None,
                 file: Optional['outputs.JobTaskNewClusterInitScriptFile'] = None,
                 gcs: Optional['outputs.JobTaskNewClusterInitScriptGcs'] = None,
                 s3: Optional['outputs.JobTaskNewClusterInitScriptS3'] = None,
                 volumes: Optional['outputs.JobTaskNewClusterInitScriptVolumes'] = None,
                 workspace: Optional['outputs.JobTaskNewClusterInitScriptWorkspace'] = None):
        """
        :param 'JobTaskNewClusterInitScriptFileArgs' file: block consisting of single string field: `path` - a relative path to the file (inside the Git repository) with SQL commands to execute.  *Requires `git_source` configuration block*.
               
               Example
               
               ```python
               import pulumi
               import pulumi_databricks as databricks
               
               sql_aggregation_job = databricks.Job("sqlAggregationJob", tasks=[
                   databricks.JobTaskArgs(
                       task_key="run_agg_query",
                       sql_task=databricks.JobTaskSqlTaskArgs(
                           warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                           query=databricks.JobTaskSqlTaskQueryArgs(
                               query_id=databricks_sql_query["agg_query"]["id"],
                           ),
                       ),
                   ),
                   databricks.JobTaskArgs(
                       task_key="run_dashboard",
                       sql_task=databricks.JobTaskSqlTaskArgs(
                           warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                           dashboard=databricks.JobTaskSqlTaskDashboardArgs(
                               dashboard_id=databricks_sql_dashboard["dash"]["id"],
                               subscriptions=[databricks.JobTaskSqlTaskDashboardSubscriptionArgs(
                                   user_name="user@domain.com",
                               )],
                           ),
                       ),
                   ),
                   databricks.JobTaskArgs(
                       task_key="run_alert",
                       sql_task=databricks.JobTaskSqlTaskArgs(
                           warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                           alert=databricks.JobTaskSqlTaskAlertArgs(
                               alert_id=databricks_sql_alert["alert"]["id"],
                               subscriptions=[databricks.JobTaskSqlTaskAlertSubscriptionArgs(
                                   user_name="user@domain.com",
                               )],
                           ),
                       ),
                   ),
               ])
               ```
        """
        JobTaskNewClusterInitScript._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abfss=abfss,
            dbfs=dbfs,
            file=file,
            gcs=gcs,
            s3=s3,
            volumes=volumes,
            workspace=workspace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abfss: Optional['outputs.JobTaskNewClusterInitScriptAbfss'] = None,
             dbfs: Optional['outputs.JobTaskNewClusterInitScriptDbfs'] = None,
             file: Optional['outputs.JobTaskNewClusterInitScriptFile'] = None,
             gcs: Optional['outputs.JobTaskNewClusterInitScriptGcs'] = None,
             s3: Optional['outputs.JobTaskNewClusterInitScriptS3'] = None,
             volumes: Optional['outputs.JobTaskNewClusterInitScriptVolumes'] = None,
             workspace: Optional['outputs.JobTaskNewClusterInitScriptWorkspace'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if abfss is not None:
            _setter("abfss", abfss)
        if dbfs is not None:
            _setter("dbfs", dbfs)
        if file is not None:
            _setter("file", file)
        if gcs is not None:
            _setter("gcs", gcs)
        if s3 is not None:
            _setter("s3", s3)
        if volumes is not None:
            _setter("volumes", volumes)
        if workspace is not None:
            _setter("workspace", workspace)

    @property
    @pulumi.getter
    def abfss(self) -> Optional['outputs.JobTaskNewClusterInitScriptAbfss']:
        return pulumi.get(self, "abfss")

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.JobTaskNewClusterInitScriptDbfs']:
        warnings.warn("""For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.""", DeprecationWarning)
        pulumi.log.warn("""dbfs is deprecated: For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.""")

        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.JobTaskNewClusterInitScriptFile']:
        """
        block consisting of single string field: `path` - a relative path to the file (inside the Git repository) with SQL commands to execute.  *Requires `git_source` configuration block*.

        Example

        ```python
        import pulumi
        import pulumi_databricks as databricks

        sql_aggregation_job = databricks.Job("sqlAggregationJob", tasks=[
            databricks.JobTaskArgs(
                task_key="run_agg_query",
                sql_task=databricks.JobTaskSqlTaskArgs(
                    warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                    query=databricks.JobTaskSqlTaskQueryArgs(
                        query_id=databricks_sql_query["agg_query"]["id"],
                    ),
                ),
            ),
            databricks.JobTaskArgs(
                task_key="run_dashboard",
                sql_task=databricks.JobTaskSqlTaskArgs(
                    warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                    dashboard=databricks.JobTaskSqlTaskDashboardArgs(
                        dashboard_id=databricks_sql_dashboard["dash"]["id"],
                        subscriptions=[databricks.JobTaskSqlTaskDashboardSubscriptionArgs(
                            user_name="user@domain.com",
                        )],
                    ),
                ),
            ),
            databricks.JobTaskArgs(
                task_key="run_alert",
                sql_task=databricks.JobTaskSqlTaskArgs(
                    warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                    alert=databricks.JobTaskSqlTaskAlertArgs(
                        alert_id=databricks_sql_alert["alert"]["id"],
                        subscriptions=[databricks.JobTaskSqlTaskAlertSubscriptionArgs(
                            user_name="user@domain.com",
                        )],
                    ),
                ),
            ),
        ])
        ```
        """
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def gcs(self) -> Optional['outputs.JobTaskNewClusterInitScriptGcs']:
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.JobTaskNewClusterInitScriptS3']:
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter
    def volumes(self) -> Optional['outputs.JobTaskNewClusterInitScriptVolumes']:
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def workspace(self) -> Optional['outputs.JobTaskNewClusterInitScriptWorkspace']:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class JobTaskNewClusterInitScriptAbfss(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobTaskNewClusterInitScriptAbfss._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobTaskNewClusterInitScriptDbfs(dict):
    def __init__(__self__, *,
                 destination: str):
        JobTaskNewClusterInitScriptDbfs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobTaskNewClusterInitScriptFile(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobTaskNewClusterInitScriptFile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobTaskNewClusterInitScriptGcs(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobTaskNewClusterInitScriptGcs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobTaskNewClusterInitScriptS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cannedAcl":
            suggest = "canned_acl"
        elif key == "enableEncryption":
            suggest = "enable_encryption"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskNewClusterInitScriptS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskNewClusterInitScriptS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskNewClusterInitScriptS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        JobTaskNewClusterInitScriptS3._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class JobTaskNewClusterInitScriptVolumes(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobTaskNewClusterInitScriptVolumes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobTaskNewClusterInitScriptWorkspace(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        JobTaskNewClusterInitScriptWorkspace._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class JobTaskNewClusterWorkloadType(dict):
    def __init__(__self__, *,
                 clients: 'outputs.JobTaskNewClusterWorkloadTypeClients'):
        JobTaskNewClusterWorkloadType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            clients=clients,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             clients: 'outputs.JobTaskNewClusterWorkloadTypeClients',
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("clients", clients)

    @property
    @pulumi.getter
    def clients(self) -> 'outputs.JobTaskNewClusterWorkloadTypeClients':
        return pulumi.get(self, "clients")


@pulumi.output_type
class JobTaskNewClusterWorkloadTypeClients(dict):
    def __init__(__self__, *,
                 jobs: Optional[bool] = None,
                 notebooks: Optional[bool] = None):
        JobTaskNewClusterWorkloadTypeClients._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jobs=jobs,
            notebooks=notebooks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jobs: Optional[bool] = None,
             notebooks: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if jobs is not None:
            _setter("jobs", jobs)
        if notebooks is not None:
            _setter("notebooks", notebooks)

    @property
    @pulumi.getter
    def jobs(self) -> Optional[bool]:
        return pulumi.get(self, "jobs")

    @property
    @pulumi.getter
    def notebooks(self) -> Optional[bool]:
        return pulumi.get(self, "notebooks")


@pulumi.output_type
class JobTaskNotebookTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notebookPath":
            suggest = "notebook_path"
        elif key == "baseParameters":
            suggest = "base_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskNotebookTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskNotebookTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskNotebookTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notebook_path: str,
                 base_parameters: Optional[Mapping[str, Any]] = None,
                 source: Optional[str] = None):
        """
        :param str notebook_path: The path of the Notebook to be run in the Databricks workspace or remote repository. For notebooks stored in the Databricks workspace, the path must be absolute and begin with a slash. For notebooks stored in a remote repository, the path must be relative. This field is required.
        :param Mapping[str, Any] base_parameters: (Map) Base parameters to be used for each run of this job. If the run is initiated by a call to run-now with parameters specified, the two parameters maps will be merged. If the same key is specified in base_parameters and in run-now, the value from run-now will be used. If the notebook takes a parameter that is not specified in the job’s base_parameters or the run-now override parameters, the default value from the notebook will be used. Retrieve these parameters in a notebook using `dbutils.widgets.get`.
        :param str source: Location type of the notebook, can only be `WORKSPACE` or `GIT`. When set to `WORKSPACE`, the notebook will be retrieved from the local Databricks workspace. When set to `GIT`, the notebook will be retrieved from a Git repository defined in `git_source`. If the value is empty, the task will use `GIT` if `git_source` is defined and `WORKSPACE` otherwise.
        """
        JobTaskNotebookTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            notebook_path=notebook_path,
            base_parameters=base_parameters,
            source=source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             notebook_path: str,
             base_parameters: Optional[Mapping[str, Any]] = None,
             source: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'notebookPath' in kwargs:
            notebook_path = kwargs['notebookPath']
        if 'baseParameters' in kwargs:
            base_parameters = kwargs['baseParameters']

        _setter("notebook_path", notebook_path)
        if base_parameters is not None:
            _setter("base_parameters", base_parameters)
        if source is not None:
            _setter("source", source)

    @property
    @pulumi.getter(name="notebookPath")
    def notebook_path(self) -> str:
        """
        The path of the Notebook to be run in the Databricks workspace or remote repository. For notebooks stored in the Databricks workspace, the path must be absolute and begin with a slash. For notebooks stored in a remote repository, the path must be relative. This field is required.
        """
        return pulumi.get(self, "notebook_path")

    @property
    @pulumi.getter(name="baseParameters")
    def base_parameters(self) -> Optional[Mapping[str, Any]]:
        """
        (Map) Base parameters to be used for each run of this job. If the run is initiated by a call to run-now with parameters specified, the two parameters maps will be merged. If the same key is specified in base_parameters and in run-now, the value from run-now will be used. If the notebook takes a parameter that is not specified in the job’s base_parameters or the run-now override parameters, the default value from the notebook will be used. Retrieve these parameters in a notebook using `dbutils.widgets.get`.
        """
        return pulumi.get(self, "base_parameters")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Location type of the notebook, can only be `WORKSPACE` or `GIT`. When set to `WORKSPACE`, the notebook will be retrieved from the local Databricks workspace. When set to `GIT`, the notebook will be retrieved from a Git repository defined in `git_source`. If the value is empty, the task will use `GIT` if `git_source` is defined and `WORKSPACE` otherwise.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class JobTaskNotificationSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertOnLastAttempt":
            suggest = "alert_on_last_attempt"
        elif key == "noAlertForCanceledRuns":
            suggest = "no_alert_for_canceled_runs"
        elif key == "noAlertForSkippedRuns":
            suggest = "no_alert_for_skipped_runs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskNotificationSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskNotificationSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskNotificationSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_on_last_attempt: Optional[bool] = None,
                 no_alert_for_canceled_runs: Optional[bool] = None,
                 no_alert_for_skipped_runs: Optional[bool] = None):
        """
        :param bool alert_on_last_attempt: (Bool) do not send notifications to recipients specified in `on_start` for the retried runs and do not send notifications to recipients specified in `on_failure` until the last retry of the run.
        :param bool no_alert_for_canceled_runs: (Bool) don't send alert for cancelled runs.
        :param bool no_alert_for_skipped_runs: (Bool) don't send alert for skipped runs.
        """
        JobTaskNotificationSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert_on_last_attempt=alert_on_last_attempt,
            no_alert_for_canceled_runs=no_alert_for_canceled_runs,
            no_alert_for_skipped_runs=no_alert_for_skipped_runs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert_on_last_attempt: Optional[bool] = None,
             no_alert_for_canceled_runs: Optional[bool] = None,
             no_alert_for_skipped_runs: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'alertOnLastAttempt' in kwargs:
            alert_on_last_attempt = kwargs['alertOnLastAttempt']
        if 'noAlertForCanceledRuns' in kwargs:
            no_alert_for_canceled_runs = kwargs['noAlertForCanceledRuns']
        if 'noAlertForSkippedRuns' in kwargs:
            no_alert_for_skipped_runs = kwargs['noAlertForSkippedRuns']

        if alert_on_last_attempt is not None:
            _setter("alert_on_last_attempt", alert_on_last_attempt)
        if no_alert_for_canceled_runs is not None:
            _setter("no_alert_for_canceled_runs", no_alert_for_canceled_runs)
        if no_alert_for_skipped_runs is not None:
            _setter("no_alert_for_skipped_runs", no_alert_for_skipped_runs)

    @property
    @pulumi.getter(name="alertOnLastAttempt")
    def alert_on_last_attempt(self) -> Optional[bool]:
        """
        (Bool) do not send notifications to recipients specified in `on_start` for the retried runs and do not send notifications to recipients specified in `on_failure` until the last retry of the run.
        """
        return pulumi.get(self, "alert_on_last_attempt")

    @property
    @pulumi.getter(name="noAlertForCanceledRuns")
    def no_alert_for_canceled_runs(self) -> Optional[bool]:
        """
        (Bool) don't send alert for cancelled runs.
        """
        return pulumi.get(self, "no_alert_for_canceled_runs")

    @property
    @pulumi.getter(name="noAlertForSkippedRuns")
    def no_alert_for_skipped_runs(self) -> Optional[bool]:
        """
        (Bool) don't send alert for skipped runs.
        """
        return pulumi.get(self, "no_alert_for_skipped_runs")


@pulumi.output_type
class JobTaskPipelineTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pipelineId":
            suggest = "pipeline_id"
        elif key == "fullRefresh":
            suggest = "full_refresh"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskPipelineTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskPipelineTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskPipelineTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pipeline_id: str,
                 full_refresh: Optional[bool] = None):
        """
        :param str pipeline_id: The pipeline's unique ID.
        :param bool full_refresh: (Bool) Specifies if there should be full refresh of the pipeline.
               
               > **Note** The following configuration blocks are only supported inside a `task` block
        """
        JobTaskPipelineTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pipeline_id=pipeline_id,
            full_refresh=full_refresh,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pipeline_id: str,
             full_refresh: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'pipelineId' in kwargs:
            pipeline_id = kwargs['pipelineId']
        if 'fullRefresh' in kwargs:
            full_refresh = kwargs['fullRefresh']

        _setter("pipeline_id", pipeline_id)
        if full_refresh is not None:
            _setter("full_refresh", full_refresh)

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> str:
        """
        The pipeline's unique ID.
        """
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="fullRefresh")
    def full_refresh(self) -> Optional[bool]:
        """
        (Bool) Specifies if there should be full refresh of the pipeline.

        > **Note** The following configuration blocks are only supported inside a `task` block
        """
        return pulumi.get(self, "full_refresh")


@pulumi.output_type
class JobTaskPythonWheelTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entryPoint":
            suggest = "entry_point"
        elif key == "namedParameters":
            suggest = "named_parameters"
        elif key == "packageName":
            suggest = "package_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskPythonWheelTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskPythonWheelTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskPythonWheelTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entry_point: Optional[str] = None,
                 named_parameters: Optional[Mapping[str, Any]] = None,
                 package_name: Optional[str] = None,
                 parameters: Optional[Sequence[str]] = None):
        """
        :param str entry_point: Python function as entry point for the task
        :param Mapping[str, Any] named_parameters: Named parameters for the task
        :param str package_name: Name of Python package
        :param Sequence[str] parameters: Parameters for the task
        """
        JobTaskPythonWheelTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            entry_point=entry_point,
            named_parameters=named_parameters,
            package_name=package_name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             entry_point: Optional[str] = None,
             named_parameters: Optional[Mapping[str, Any]] = None,
             package_name: Optional[str] = None,
             parameters: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'entryPoint' in kwargs:
            entry_point = kwargs['entryPoint']
        if 'namedParameters' in kwargs:
            named_parameters = kwargs['namedParameters']
        if 'packageName' in kwargs:
            package_name = kwargs['packageName']

        if entry_point is not None:
            _setter("entry_point", entry_point)
        if named_parameters is not None:
            _setter("named_parameters", named_parameters)
        if package_name is not None:
            _setter("package_name", package_name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter(name="entryPoint")
    def entry_point(self) -> Optional[str]:
        """
        Python function as entry point for the task
        """
        return pulumi.get(self, "entry_point")

    @property
    @pulumi.getter(name="namedParameters")
    def named_parameters(self) -> Optional[Mapping[str, Any]]:
        """
        Named parameters for the task
        """
        return pulumi.get(self, "named_parameters")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[str]:
        """
        Name of Python package
        """
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        """
        Parameters for the task
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class JobTaskRunJobTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobId":
            suggest = "job_id"
        elif key == "jobParameters":
            suggest = "job_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskRunJobTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskRunJobTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskRunJobTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_id: int,
                 job_parameters: Optional[Mapping[str, Any]] = None):
        """
        :param int job_id: (String) ID of the job
        :param Mapping[str, Any] job_parameters: (Map) Job parameters for the task
        """
        JobTaskRunJobTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            job_id=job_id,
            job_parameters=job_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             job_id: int,
             job_parameters: Optional[Mapping[str, Any]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jobId' in kwargs:
            job_id = kwargs['jobId']
        if 'jobParameters' in kwargs:
            job_parameters = kwargs['jobParameters']

        _setter("job_id", job_id)
        if job_parameters is not None:
            _setter("job_parameters", job_parameters)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> int:
        """
        (String) ID of the job
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobParameters")
    def job_parameters(self) -> Optional[Mapping[str, Any]]:
        """
        (Map) Job parameters for the task
        """
        return pulumi.get(self, "job_parameters")


@pulumi.output_type
class JobTaskSparkJarTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jarUri":
            suggest = "jar_uri"
        elif key == "mainClassName":
            suggest = "main_class_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskSparkJarTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskSparkJarTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskSparkJarTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jar_uri: Optional[str] = None,
                 main_class_name: Optional[str] = None,
                 parameters: Optional[Sequence[str]] = None):
        """
        :param str main_class_name: The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. The code should use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs of the job will fail.
        :param Sequence[str] parameters: (List) Parameters passed to the main method.
        """
        JobTaskSparkJarTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jar_uri=jar_uri,
            main_class_name=main_class_name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jar_uri: Optional[str] = None,
             main_class_name: Optional[str] = None,
             parameters: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jarUri' in kwargs:
            jar_uri = kwargs['jarUri']
        if 'mainClassName' in kwargs:
            main_class_name = kwargs['mainClassName']

        if jar_uri is not None:
            _setter("jar_uri", jar_uri)
        if main_class_name is not None:
            _setter("main_class_name", main_class_name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter(name="jarUri")
    def jar_uri(self) -> Optional[str]:
        return pulumi.get(self, "jar_uri")

    @property
    @pulumi.getter(name="mainClassName")
    def main_class_name(self) -> Optional[str]:
        """
        The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. The code should use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs of the job will fail.
        """
        return pulumi.get(self, "main_class_name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        """
        (List) Parameters passed to the main method.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class JobTaskSparkPythonTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pythonFile":
            suggest = "python_file"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskSparkPythonTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskSparkPythonTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskSparkPythonTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 python_file: str,
                 parameters: Optional[Sequence[str]] = None,
                 source: Optional[str] = None):
        """
        :param str python_file: The URI of the Python file to be executed. databricks_dbfs_file, cloud file URIs (e.g. `s3:/`, `abfss:/`, `gs:/`), workspace paths and remote repository are supported. For Python files stored in the Databricks workspace, the path must be absolute and begin with `/Repos`. For files stored in a remote repository, the path must be relative. This field is required.
        :param Sequence[str] parameters: (List) Command line parameters passed to the Python file.
        :param str source: Location type of the Python file, can only be `GIT`. When set to `GIT`, the Python file will be retrieved from a Git repository defined in `git_source`.
        """
        JobTaskSparkPythonTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            python_file=python_file,
            parameters=parameters,
            source=source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             python_file: str,
             parameters: Optional[Sequence[str]] = None,
             source: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'pythonFile' in kwargs:
            python_file = kwargs['pythonFile']

        _setter("python_file", python_file)
        if parameters is not None:
            _setter("parameters", parameters)
        if source is not None:
            _setter("source", source)

    @property
    @pulumi.getter(name="pythonFile")
    def python_file(self) -> str:
        """
        The URI of the Python file to be executed. databricks_dbfs_file, cloud file URIs (e.g. `s3:/`, `abfss:/`, `gs:/`), workspace paths and remote repository are supported. For Python files stored in the Databricks workspace, the path must be absolute and begin with `/Repos`. For files stored in a remote repository, the path must be relative. This field is required.
        """
        return pulumi.get(self, "python_file")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        """
        (List) Command line parameters passed to the Python file.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Location type of the Python file, can only be `GIT`. When set to `GIT`, the Python file will be retrieved from a Git repository defined in `git_source`.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class JobTaskSparkSubmitTask(dict):
    def __init__(__self__, *,
                 parameters: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] parameters: (List) Command-line parameters passed to spark submit.
        """
        JobTaskSparkSubmitTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameters: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        """
        (List) Command-line parameters passed to spark submit.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class JobTaskSqlTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "warehouseId":
            suggest = "warehouse_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskSqlTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskSqlTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskSqlTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert: Optional['outputs.JobTaskSqlTaskAlert'] = None,
                 dashboard: Optional['outputs.JobTaskSqlTaskDashboard'] = None,
                 file: Optional['outputs.JobTaskSqlTaskFile'] = None,
                 parameters: Optional[Mapping[str, Any]] = None,
                 query: Optional['outputs.JobTaskSqlTaskQuery'] = None,
                 warehouse_id: Optional[str] = None):
        """
        :param 'JobTaskSqlTaskAlertArgs' alert: block consisting of following fields:
        :param 'JobTaskSqlTaskDashboardArgs' dashboard: block consisting of following fields:
        :param 'JobTaskSqlTaskFileArgs' file: block consisting of single string field: `path` - a relative path to the file (inside the Git repository) with SQL commands to execute.  *Requires `git_source` configuration block*.
               
               Example
               
               ```python
               import pulumi
               import pulumi_databricks as databricks
               
               sql_aggregation_job = databricks.Job("sqlAggregationJob", tasks=[
                   databricks.JobTaskArgs(
                       task_key="run_agg_query",
                       sql_task=databricks.JobTaskSqlTaskArgs(
                           warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                           query=databricks.JobTaskSqlTaskQueryArgs(
                               query_id=databricks_sql_query["agg_query"]["id"],
                           ),
                       ),
                   ),
                   databricks.JobTaskArgs(
                       task_key="run_dashboard",
                       sql_task=databricks.JobTaskSqlTaskArgs(
                           warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                           dashboard=databricks.JobTaskSqlTaskDashboardArgs(
                               dashboard_id=databricks_sql_dashboard["dash"]["id"],
                               subscriptions=[databricks.JobTaskSqlTaskDashboardSubscriptionArgs(
                                   user_name="user@domain.com",
                               )],
                           ),
                       ),
                   ),
                   databricks.JobTaskArgs(
                       task_key="run_alert",
                       sql_task=databricks.JobTaskSqlTaskArgs(
                           warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                           alert=databricks.JobTaskSqlTaskAlertArgs(
                               alert_id=databricks_sql_alert["alert"]["id"],
                               subscriptions=[databricks.JobTaskSqlTaskAlertSubscriptionArgs(
                                   user_name="user@domain.com",
                               )],
                           ),
                       ),
                   ),
               ])
               ```
        :param Mapping[str, Any] parameters: (Map) parameters to be used for each run of this task. The SQL alert task does not support custom parameters.
        :param 'JobTaskSqlTaskQueryArgs' query: block consisting of single string field: `query_id` - identifier of the Databricks SQL Query (databricks_sql_query).
        :param str warehouse_id: ID of the (the databricks_sql_endpoint) that will be used to execute the task.  Only Serverless & Pro warehouses are supported right now.
        """
        JobTaskSqlTask._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert=alert,
            dashboard=dashboard,
            file=file,
            parameters=parameters,
            query=query,
            warehouse_id=warehouse_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert: Optional['outputs.JobTaskSqlTaskAlert'] = None,
             dashboard: Optional['outputs.JobTaskSqlTaskDashboard'] = None,
             file: Optional['outputs.JobTaskSqlTaskFile'] = None,
             parameters: Optional[Mapping[str, Any]] = None,
             query: Optional['outputs.JobTaskSqlTaskQuery'] = None,
             warehouse_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'warehouseId' in kwargs:
            warehouse_id = kwargs['warehouseId']

        if alert is not None:
            _setter("alert", alert)
        if dashboard is not None:
            _setter("dashboard", dashboard)
        if file is not None:
            _setter("file", file)
        if parameters is not None:
            _setter("parameters", parameters)
        if query is not None:
            _setter("query", query)
        if warehouse_id is not None:
            _setter("warehouse_id", warehouse_id)

    @property
    @pulumi.getter
    def alert(self) -> Optional['outputs.JobTaskSqlTaskAlert']:
        """
        block consisting of following fields:
        """
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def dashboard(self) -> Optional['outputs.JobTaskSqlTaskDashboard']:
        """
        block consisting of following fields:
        """
        return pulumi.get(self, "dashboard")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.JobTaskSqlTaskFile']:
        """
        block consisting of single string field: `path` - a relative path to the file (inside the Git repository) with SQL commands to execute.  *Requires `git_source` configuration block*.

        Example

        ```python
        import pulumi
        import pulumi_databricks as databricks

        sql_aggregation_job = databricks.Job("sqlAggregationJob", tasks=[
            databricks.JobTaskArgs(
                task_key="run_agg_query",
                sql_task=databricks.JobTaskSqlTaskArgs(
                    warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                    query=databricks.JobTaskSqlTaskQueryArgs(
                        query_id=databricks_sql_query["agg_query"]["id"],
                    ),
                ),
            ),
            databricks.JobTaskArgs(
                task_key="run_dashboard",
                sql_task=databricks.JobTaskSqlTaskArgs(
                    warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                    dashboard=databricks.JobTaskSqlTaskDashboardArgs(
                        dashboard_id=databricks_sql_dashboard["dash"]["id"],
                        subscriptions=[databricks.JobTaskSqlTaskDashboardSubscriptionArgs(
                            user_name="user@domain.com",
                        )],
                    ),
                ),
            ),
            databricks.JobTaskArgs(
                task_key="run_alert",
                sql_task=databricks.JobTaskSqlTaskArgs(
                    warehouse_id=databricks_sql_endpoint["sql_job_warehouse"]["id"],
                    alert=databricks.JobTaskSqlTaskAlertArgs(
                        alert_id=databricks_sql_alert["alert"]["id"],
                        subscriptions=[databricks.JobTaskSqlTaskAlertSubscriptionArgs(
                            user_name="user@domain.com",
                        )],
                    ),
                ),
            ),
        ])
        ```
        """
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, Any]]:
        """
        (Map) parameters to be used for each run of this task. The SQL alert task does not support custom parameters.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def query(self) -> Optional['outputs.JobTaskSqlTaskQuery']:
        """
        block consisting of single string field: `query_id` - identifier of the Databricks SQL Query (databricks_sql_query).
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="warehouseId")
    def warehouse_id(self) -> Optional[str]:
        """
        ID of the (the databricks_sql_endpoint) that will be used to execute the task.  Only Serverless & Pro warehouses are supported right now.
        """
        return pulumi.get(self, "warehouse_id")


@pulumi.output_type
class JobTaskSqlTaskAlert(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertId":
            suggest = "alert_id"
        elif key == "pauseSubscriptions":
            suggest = "pause_subscriptions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskSqlTaskAlert. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskSqlTaskAlert.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskSqlTaskAlert.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_id: str,
                 subscriptions: Sequence['outputs.JobTaskSqlTaskAlertSubscription'],
                 pause_subscriptions: Optional[bool] = None):
        """
        :param str alert_id: (String) identifier of the Databricks SQL Alert.
        :param Sequence['JobTaskSqlTaskAlertSubscriptionArgs'] subscriptions: a list of subscription blocks consisting out of one of the required fields: `user_name` for user emails or `destination_id` - for Alert destination's identifier.
        :param bool pause_subscriptions: flag that specifies if subscriptions are paused or not.
        """
        JobTaskSqlTaskAlert._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert_id=alert_id,
            subscriptions=subscriptions,
            pause_subscriptions=pause_subscriptions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert_id: str,
             subscriptions: Sequence['outputs.JobTaskSqlTaskAlertSubscription'],
             pause_subscriptions: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'alertId' in kwargs:
            alert_id = kwargs['alertId']
        if 'pauseSubscriptions' in kwargs:
            pause_subscriptions = kwargs['pauseSubscriptions']

        _setter("alert_id", alert_id)
        _setter("subscriptions", subscriptions)
        if pause_subscriptions is not None:
            _setter("pause_subscriptions", pause_subscriptions)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> str:
        """
        (String) identifier of the Databricks SQL Alert.
        """
        return pulumi.get(self, "alert_id")

    @property
    @pulumi.getter
    def subscriptions(self) -> Sequence['outputs.JobTaskSqlTaskAlertSubscription']:
        """
        a list of subscription blocks consisting out of one of the required fields: `user_name` for user emails or `destination_id` - for Alert destination's identifier.
        """
        return pulumi.get(self, "subscriptions")

    @property
    @pulumi.getter(name="pauseSubscriptions")
    def pause_subscriptions(self) -> Optional[bool]:
        """
        flag that specifies if subscriptions are paused or not.
        """
        return pulumi.get(self, "pause_subscriptions")


@pulumi.output_type
class JobTaskSqlTaskAlertSubscription(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationId":
            suggest = "destination_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskSqlTaskAlertSubscription. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskSqlTaskAlertSubscription.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskSqlTaskAlertSubscription.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        :param str user_name: The email of an active workspace user. Non-admin users can only set this field to their own email.
        """
        JobTaskSqlTaskAlertSubscription._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_id=destination_id,
            user_name=user_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_id: Optional[str] = None,
             user_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'destinationId' in kwargs:
            destination_id = kwargs['destinationId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']

        if destination_id is not None:
            _setter("destination_id", destination_id)
        if user_name is not None:
            _setter("user_name", user_name)

    @property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        The email of an active workspace user. Non-admin users can only set this field to their own email.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class JobTaskSqlTaskDashboard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dashboardId":
            suggest = "dashboard_id"
        elif key == "customSubject":
            suggest = "custom_subject"
        elif key == "pauseSubscriptions":
            suggest = "pause_subscriptions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskSqlTaskDashboard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskSqlTaskDashboard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskSqlTaskDashboard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dashboard_id: str,
                 custom_subject: Optional[str] = None,
                 pause_subscriptions: Optional[bool] = None,
                 subscriptions: Optional[Sequence['outputs.JobTaskSqlTaskDashboardSubscription']] = None):
        """
        :param str dashboard_id: (String) identifier of the Databricks SQL Dashboard databricks_sql_dashboard.
        :param str custom_subject: string specifying a custom subject of email sent.
        :param bool pause_subscriptions: flag that specifies if subscriptions are paused or not.
        :param Sequence['JobTaskSqlTaskDashboardSubscriptionArgs'] subscriptions: a list of subscription blocks consisting out of one of the required fields: `user_name` for user emails or `destination_id` - for Alert destination's identifier.
        """
        JobTaskSqlTaskDashboard._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dashboard_id=dashboard_id,
            custom_subject=custom_subject,
            pause_subscriptions=pause_subscriptions,
            subscriptions=subscriptions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dashboard_id: str,
             custom_subject: Optional[str] = None,
             pause_subscriptions: Optional[bool] = None,
             subscriptions: Optional[Sequence['outputs.JobTaskSqlTaskDashboardSubscription']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dashboardId' in kwargs:
            dashboard_id = kwargs['dashboardId']
        if 'customSubject' in kwargs:
            custom_subject = kwargs['customSubject']
        if 'pauseSubscriptions' in kwargs:
            pause_subscriptions = kwargs['pauseSubscriptions']

        _setter("dashboard_id", dashboard_id)
        if custom_subject is not None:
            _setter("custom_subject", custom_subject)
        if pause_subscriptions is not None:
            _setter("pause_subscriptions", pause_subscriptions)
        if subscriptions is not None:
            _setter("subscriptions", subscriptions)

    @property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> str:
        """
        (String) identifier of the Databricks SQL Dashboard databricks_sql_dashboard.
        """
        return pulumi.get(self, "dashboard_id")

    @property
    @pulumi.getter(name="customSubject")
    def custom_subject(self) -> Optional[str]:
        """
        string specifying a custom subject of email sent.
        """
        return pulumi.get(self, "custom_subject")

    @property
    @pulumi.getter(name="pauseSubscriptions")
    def pause_subscriptions(self) -> Optional[bool]:
        """
        flag that specifies if subscriptions are paused or not.
        """
        return pulumi.get(self, "pause_subscriptions")

    @property
    @pulumi.getter
    def subscriptions(self) -> Optional[Sequence['outputs.JobTaskSqlTaskDashboardSubscription']]:
        """
        a list of subscription blocks consisting out of one of the required fields: `user_name` for user emails or `destination_id` - for Alert destination's identifier.
        """
        return pulumi.get(self, "subscriptions")


@pulumi.output_type
class JobTaskSqlTaskDashboardSubscription(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationId":
            suggest = "destination_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskSqlTaskDashboardSubscription. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskSqlTaskDashboardSubscription.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskSqlTaskDashboardSubscription.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        :param str user_name: The email of an active workspace user. Non-admin users can only set this field to their own email.
        """
        JobTaskSqlTaskDashboardSubscription._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_id=destination_id,
            user_name=user_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_id: Optional[str] = None,
             user_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'destinationId' in kwargs:
            destination_id = kwargs['destinationId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']

        if destination_id is not None:
            _setter("destination_id", destination_id)
        if user_name is not None:
            _setter("user_name", user_name)

    @property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        The email of an active workspace user. Non-admin users can only set this field to their own email.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class JobTaskSqlTaskFile(dict):
    def __init__(__self__, *,
                 path: str):
        JobTaskSqlTaskFile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")


@pulumi.output_type
class JobTaskSqlTaskQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryId":
            suggest = "query_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTaskSqlTaskQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTaskSqlTaskQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTaskSqlTaskQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query_id: str):
        JobTaskSqlTaskQuery._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            query_id=query_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             query_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'queryId' in kwargs:
            query_id = kwargs['queryId']

        _setter("query_id", query_id)

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> str:
        return pulumi.get(self, "query_id")


@pulumi.output_type
class JobTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileArrival":
            suggest = "file_arrival"
        elif key == "pauseStatus":
            suggest = "pause_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_arrival: 'outputs.JobTriggerFileArrival',
                 pause_status: Optional[str] = None):
        """
        :param 'JobTriggerFileArrivalArgs' file_arrival: configuration block to define a trigger for [File Arrival events](https://learn.microsoft.com/en-us/azure/databricks/workflows/jobs/file-arrival-triggers) consisting of following attributes:
        :param str pause_status: Indicate whether this trigger is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pause_status` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pause_status`.
        """
        JobTrigger._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            file_arrival=file_arrival,
            pause_status=pause_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             file_arrival: 'outputs.JobTriggerFileArrival',
             pause_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fileArrival' in kwargs:
            file_arrival = kwargs['fileArrival']
        if 'pauseStatus' in kwargs:
            pause_status = kwargs['pauseStatus']

        _setter("file_arrival", file_arrival)
        if pause_status is not None:
            _setter("pause_status", pause_status)

    @property
    @pulumi.getter(name="fileArrival")
    def file_arrival(self) -> 'outputs.JobTriggerFileArrival':
        """
        configuration block to define a trigger for [File Arrival events](https://learn.microsoft.com/en-us/azure/databricks/workflows/jobs/file-arrival-triggers) consisting of following attributes:
        """
        return pulumi.get(self, "file_arrival")

    @property
    @pulumi.getter(name="pauseStatus")
    def pause_status(self) -> Optional[str]:
        """
        Indicate whether this trigger is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pause_status` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pause_status`.
        """
        return pulumi.get(self, "pause_status")


@pulumi.output_type
class JobTriggerFileArrival(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minTimeBetweenTriggersSeconds":
            suggest = "min_time_between_triggers_seconds"
        elif key == "waitAfterLastChangeSeconds":
            suggest = "wait_after_last_change_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTriggerFileArrival. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTriggerFileArrival.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTriggerFileArrival.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 min_time_between_triggers_seconds: Optional[int] = None,
                 wait_after_last_change_seconds: Optional[int] = None):
        """
        :param str url: URL of the job on the given workspace
        :param int min_time_between_triggers_seconds: If set, the trigger starts a run only after the specified amount of time passed since the last time the trigger fired. The minimum allowed value is 60 seconds.
        :param int wait_after_last_change_seconds: If set, the trigger starts a run only after no file activity has occurred for the specified amount of time. This makes it possible to wait for a batch of incoming files to arrive before triggering a run. The minimum allowed value is 60 seconds.
        """
        JobTriggerFileArrival._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            min_time_between_triggers_seconds=min_time_between_triggers_seconds,
            wait_after_last_change_seconds=wait_after_last_change_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             min_time_between_triggers_seconds: Optional[int] = None,
             wait_after_last_change_seconds: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'minTimeBetweenTriggersSeconds' in kwargs:
            min_time_between_triggers_seconds = kwargs['minTimeBetweenTriggersSeconds']
        if 'waitAfterLastChangeSeconds' in kwargs:
            wait_after_last_change_seconds = kwargs['waitAfterLastChangeSeconds']

        _setter("url", url)
        if min_time_between_triggers_seconds is not None:
            _setter("min_time_between_triggers_seconds", min_time_between_triggers_seconds)
        if wait_after_last_change_seconds is not None:
            _setter("wait_after_last_change_seconds", wait_after_last_change_seconds)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of the job on the given workspace
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="minTimeBetweenTriggersSeconds")
    def min_time_between_triggers_seconds(self) -> Optional[int]:
        """
        If set, the trigger starts a run only after the specified amount of time passed since the last time the trigger fired. The minimum allowed value is 60 seconds.
        """
        return pulumi.get(self, "min_time_between_triggers_seconds")

    @property
    @pulumi.getter(name="waitAfterLastChangeSeconds")
    def wait_after_last_change_seconds(self) -> Optional[int]:
        """
        If set, the trigger starts a run only after no file activity has occurred for the specified amount of time. This makes it possible to wait for a batch of incoming files to arrive before triggering a run. The minimum allowed value is 60 seconds.
        """
        return pulumi.get(self, "wait_after_last_change_seconds")


@pulumi.output_type
class JobWebhookNotifications(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "onDurationWarningThresholdExceededs":
            suggest = "on_duration_warning_threshold_exceededs"
        elif key == "onFailures":
            suggest = "on_failures"
        elif key == "onStarts":
            suggest = "on_starts"
        elif key == "onSuccesses":
            suggest = "on_successes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobWebhookNotifications. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobWebhookNotifications.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobWebhookNotifications.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 on_duration_warning_threshold_exceededs: Optional[Sequence['outputs.JobWebhookNotificationsOnDurationWarningThresholdExceeded']] = None,
                 on_failures: Optional[Sequence['outputs.JobWebhookNotificationsOnFailure']] = None,
                 on_starts: Optional[Sequence['outputs.JobWebhookNotificationsOnStart']] = None,
                 on_successes: Optional[Sequence['outputs.JobWebhookNotificationsOnSuccess']] = None):
        """
        :param Sequence['JobWebhookNotificationsOnDurationWarningThresholdExceededArgs'] on_duration_warning_threshold_exceededs: (List) list of notification IDs to call when the duration of a run exceeds the threshold specified by the `RUN_DURATION_SECONDS` metric in the `health` block.
               
               Note that the `id` is not to be confused with the name of the alert destination. The `id` can be retrieved through the API or the URL of Databricks UI `https://<workspace host>/sql/destinations/<notification id>?o=<workspace id>`
               
               Example
               
               ```python
               import pulumi
               ```
        :param Sequence['JobWebhookNotificationsOnFailureArgs'] on_failures: (List) list of notification IDs to call when the run fails. A maximum of 3 destinations can be specified.
        :param Sequence['JobWebhookNotificationsOnStartArgs'] on_starts: (List) list of notification IDs to call when the run starts. A maximum of 3 destinations can be specified.
        :param Sequence['JobWebhookNotificationsOnSuccessArgs'] on_successes: (List) list of notification IDs to call when the run completes successfully. A maximum of 3 destinations can be specified.
        """
        JobWebhookNotifications._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            on_duration_warning_threshold_exceededs=on_duration_warning_threshold_exceededs,
            on_failures=on_failures,
            on_starts=on_starts,
            on_successes=on_successes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             on_duration_warning_threshold_exceededs: Optional[Sequence['outputs.JobWebhookNotificationsOnDurationWarningThresholdExceeded']] = None,
             on_failures: Optional[Sequence['outputs.JobWebhookNotificationsOnFailure']] = None,
             on_starts: Optional[Sequence['outputs.JobWebhookNotificationsOnStart']] = None,
             on_successes: Optional[Sequence['outputs.JobWebhookNotificationsOnSuccess']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'onDurationWarningThresholdExceededs' in kwargs:
            on_duration_warning_threshold_exceededs = kwargs['onDurationWarningThresholdExceededs']
        if 'onFailures' in kwargs:
            on_failures = kwargs['onFailures']
        if 'onStarts' in kwargs:
            on_starts = kwargs['onStarts']
        if 'onSuccesses' in kwargs:
            on_successes = kwargs['onSuccesses']

        if on_duration_warning_threshold_exceededs is not None:
            _setter("on_duration_warning_threshold_exceededs", on_duration_warning_threshold_exceededs)
        if on_failures is not None:
            _setter("on_failures", on_failures)
        if on_starts is not None:
            _setter("on_starts", on_starts)
        if on_successes is not None:
            _setter("on_successes", on_successes)

    @property
    @pulumi.getter(name="onDurationWarningThresholdExceededs")
    def on_duration_warning_threshold_exceededs(self) -> Optional[Sequence['outputs.JobWebhookNotificationsOnDurationWarningThresholdExceeded']]:
        """
        (List) list of notification IDs to call when the duration of a run exceeds the threshold specified by the `RUN_DURATION_SECONDS` metric in the `health` block.

        Note that the `id` is not to be confused with the name of the alert destination. The `id` can be retrieved through the API or the URL of Databricks UI `https://<workspace host>/sql/destinations/<notification id>?o=<workspace id>`

        Example

        ```python
        import pulumi
        ```
        """
        return pulumi.get(self, "on_duration_warning_threshold_exceededs")

    @property
    @pulumi.getter(name="onFailures")
    def on_failures(self) -> Optional[Sequence['outputs.JobWebhookNotificationsOnFailure']]:
        """
        (List) list of notification IDs to call when the run fails. A maximum of 3 destinations can be specified.
        """
        return pulumi.get(self, "on_failures")

    @property
    @pulumi.getter(name="onStarts")
    def on_starts(self) -> Optional[Sequence['outputs.JobWebhookNotificationsOnStart']]:
        """
        (List) list of notification IDs to call when the run starts. A maximum of 3 destinations can be specified.
        """
        return pulumi.get(self, "on_starts")

    @property
    @pulumi.getter(name="onSuccesses")
    def on_successes(self) -> Optional[Sequence['outputs.JobWebhookNotificationsOnSuccess']]:
        """
        (List) list of notification IDs to call when the run completes successfully. A maximum of 3 destinations can be specified.
        """
        return pulumi.get(self, "on_successes")


@pulumi.output_type
class JobWebhookNotificationsOnDurationWarningThresholdExceeded(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: ID of the job
        """
        JobWebhookNotificationsOnDurationWarningThresholdExceeded._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the job
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class JobWebhookNotificationsOnFailure(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: ID of the job
        """
        JobWebhookNotificationsOnFailure._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the job
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class JobWebhookNotificationsOnStart(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: ID of the job
        """
        JobWebhookNotificationsOnStart._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the job
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class JobWebhookNotificationsOnSuccess(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: ID of the job
        """
        JobWebhookNotificationsOnSuccess._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the job
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LibraryCran(dict):
    def __init__(__self__, *,
                 package: str,
                 repo: Optional[str] = None):
        LibraryCran._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            package=package,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             package: str,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("package", package)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def package(self) -> str:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class LibraryMaven(dict):
    def __init__(__self__, *,
                 coordinates: str,
                 exclusions: Optional[Sequence[str]] = None,
                 repo: Optional[str] = None):
        LibraryMaven._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            coordinates=coordinates,
            exclusions=exclusions,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             coordinates: str,
             exclusions: Optional[Sequence[str]] = None,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("coordinates", coordinates)
        if exclusions is not None:
            _setter("exclusions", exclusions)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def coordinates(self) -> str:
        return pulumi.get(self, "coordinates")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class LibraryPypi(dict):
    def __init__(__self__, *,
                 package: str,
                 repo: Optional[str] = None):
        LibraryPypi._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            package=package,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             package: str,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("package", package)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def package(self) -> str:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class MetastoreDataAccessAwsIamRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetastoreDataAccessAwsIamRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetastoreDataAccessAwsIamRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetastoreDataAccessAwsIamRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: str):
        """
        :param str role_arn: The Amazon Resource Name (ARN) of the AWS IAM role for S3 data access, of the form `arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF`
               
               `azure_managed_identity` optional configuration block for using managed identity as credential details for Azure (Recommended):
        """
        MetastoreDataAccessAwsIamRole._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role_arn: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']

        _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the AWS IAM role for S3 data access, of the form `arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF`

        `azure_managed_identity` optional configuration block for using managed identity as credential details for Azure (Recommended):
        """
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class MetastoreDataAccessAzureManagedIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessConnectorId":
            suggest = "access_connector_id"
        elif key == "credentialId":
            suggest = "credential_id"
        elif key == "managedIdentityId":
            suggest = "managed_identity_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetastoreDataAccessAzureManagedIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetastoreDataAccessAzureManagedIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetastoreDataAccessAzureManagedIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_connector_id: str,
                 credential_id: Optional[str] = None,
                 managed_identity_id: Optional[str] = None):
        """
        :param str access_connector_id: The Resource ID of the Azure Databricks Access Connector resource, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.Databricks/accessConnectors/connector-name`.
        :param str managed_identity_id: The Resource ID of the Azure User Assigned Managed Identity associated with Azure Databricks Access Connector, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/user-managed-identity-name`.
               
               `databricks_gcp_service_account` optional configuration block for creating a Databricks-managed GCP Service Account:
        """
        MetastoreDataAccessAzureManagedIdentity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_connector_id=access_connector_id,
            credential_id=credential_id,
            managed_identity_id=managed_identity_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_connector_id: str,
             credential_id: Optional[str] = None,
             managed_identity_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessConnectorId' in kwargs:
            access_connector_id = kwargs['accessConnectorId']
        if 'credentialId' in kwargs:
            credential_id = kwargs['credentialId']
        if 'managedIdentityId' in kwargs:
            managed_identity_id = kwargs['managedIdentityId']

        _setter("access_connector_id", access_connector_id)
        if credential_id is not None:
            _setter("credential_id", credential_id)
        if managed_identity_id is not None:
            _setter("managed_identity_id", managed_identity_id)

    @property
    @pulumi.getter(name="accessConnectorId")
    def access_connector_id(self) -> str:
        """
        The Resource ID of the Azure Databricks Access Connector resource, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.Databricks/accessConnectors/connector-name`.
        """
        return pulumi.get(self, "access_connector_id")

    @property
    @pulumi.getter(name="credentialId")
    def credential_id(self) -> Optional[str]:
        return pulumi.get(self, "credential_id")

    @property
    @pulumi.getter(name="managedIdentityId")
    def managed_identity_id(self) -> Optional[str]:
        """
        The Resource ID of the Azure User Assigned Managed Identity associated with Azure Databricks Access Connector, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/user-managed-identity-name`.

        `databricks_gcp_service_account` optional configuration block for creating a Databricks-managed GCP Service Account:
        """
        return pulumi.get(self, "managed_identity_id")


@pulumi.output_type
class MetastoreDataAccessAzureServicePrincipal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationId":
            suggest = "application_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "directoryId":
            suggest = "directory_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetastoreDataAccessAzureServicePrincipal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetastoreDataAccessAzureServicePrincipal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetastoreDataAccessAzureServicePrincipal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_id: str,
                 client_secret: str,
                 directory_id: str):
        """
        :param str application_id: The application ID of the application registration within the referenced AAD tenant
        :param str client_secret: The client secret generated for the above app ID in AAD. **This field is redacted on output**
        :param str directory_id: The directory ID corresponding to the Azure Active Directory (AAD) tenant of the application
        """
        MetastoreDataAccessAzureServicePrincipal._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            application_id=application_id,
            client_secret=client_secret,
            directory_id=directory_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             application_id: str,
             client_secret: str,
             directory_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applicationId' in kwargs:
            application_id = kwargs['applicationId']
        if 'clientSecret' in kwargs:
            client_secret = kwargs['clientSecret']
        if 'directoryId' in kwargs:
            directory_id = kwargs['directoryId']

        _setter("application_id", application_id)
        _setter("client_secret", client_secret)
        _setter("directory_id", directory_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        """
        The application ID of the application registration within the referenced AAD tenant
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        """
        The client secret generated for the above app ID in AAD. **This field is redacted on output**
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="directoryId")
    def directory_id(self) -> str:
        """
        The directory ID corresponding to the Azure Active Directory (AAD) tenant of the application
        """
        return pulumi.get(self, "directory_id")


@pulumi.output_type
class MetastoreDataAccessDatabricksGcpServiceAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialId":
            suggest = "credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetastoreDataAccessDatabricksGcpServiceAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetastoreDataAccessDatabricksGcpServiceAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetastoreDataAccessDatabricksGcpServiceAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_id: Optional[str] = None,
                 email: Optional[str] = None):
        """
        :param str email: The email of the GCP service account created, to be granted access to relevant buckets.
               
               `azure_service_principal` optional configuration block for credential details for Azure (Legacy):
        """
        MetastoreDataAccessDatabricksGcpServiceAccount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credential_id=credential_id,
            email=email,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credential_id: Optional[str] = None,
             email: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'credentialId' in kwargs:
            credential_id = kwargs['credentialId']

        if credential_id is not None:
            _setter("credential_id", credential_id)
        if email is not None:
            _setter("email", email)

    @property
    @pulumi.getter(name="credentialId")
    def credential_id(self) -> Optional[str]:
        return pulumi.get(self, "credential_id")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        The email of the GCP service account created, to be granted access to relevant buckets.

        `azure_service_principal` optional configuration block for credential details for Azure (Legacy):
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class MetastoreDataAccessGcpServiceAccountKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyId":
            suggest = "private_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetastoreDataAccessGcpServiceAccountKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetastoreDataAccessGcpServiceAccountKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetastoreDataAccessGcpServiceAccountKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 private_key: str,
                 private_key_id: str):
        """
        :param str email: The email of the GCP service account created, to be granted access to relevant buckets.
               
               `azure_service_principal` optional configuration block for credential details for Azure (Legacy):
        """
        MetastoreDataAccessGcpServiceAccountKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email=email,
            private_key=private_key,
            private_key_id=private_key_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email: str,
             private_key: str,
             private_key_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'privateKey' in kwargs:
            private_key = kwargs['privateKey']
        if 'privateKeyId' in kwargs:
            private_key_id = kwargs['privateKeyId']

        _setter("email", email)
        _setter("private_key", private_key)
        _setter("private_key_id", private_key_id)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email of the GCP service account created, to be granted access to relevant buckets.

        `azure_service_principal` optional configuration block for credential details for Azure (Legacy):
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> str:
        return pulumi.get(self, "private_key_id")


@pulumi.output_type
class MlflowModelTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        MlflowModelTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class MlflowWebhookHttpUrlSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableSslVerification":
            suggest = "enable_ssl_verification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MlflowWebhookHttpUrlSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MlflowWebhookHttpUrlSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MlflowWebhookHttpUrlSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 authorization: Optional[str] = None,
                 enable_ssl_verification: Optional[bool] = None,
                 secret: Optional[str] = None):
        """
        :param str url: External HTTPS URL called on event trigger (by using a POST request). Structure of payload depends on the event type, refer to [documentation](https://docs.databricks.com/applications/mlflow/model-registry-webhooks.html) for more details.
        :param str authorization: Value of the authorization header that should be sent in the request sent by the wehbook.  It should be of the form `<auth type> <credentials>`, e.g. `Bearer <access_token>`. If set to an empty string, no authorization header will be included in the request.
        :param bool enable_ssl_verification: Enable/disable SSL certificate validation. Default is `true`. For self-signed certificates, this field must be `false` AND the destination server must disable certificate validation as well. For security purposes, it is encouraged to perform secret validation with the HMAC-encoded portion of the payload and acknowledge the risk associated with disabling hostname validation whereby it becomes more likely that requests can be maliciously routed to an unintended host.
        :param str secret: Shared secret required for HMAC encoding payload. The HMAC-encoded payload will be sent in the header as `X-Databricks-Signature: encoded_payload`.
        """
        MlflowWebhookHttpUrlSpec._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            authorization=authorization,
            enable_ssl_verification=enable_ssl_verification,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             authorization: Optional[str] = None,
             enable_ssl_verification: Optional[bool] = None,
             secret: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enableSslVerification' in kwargs:
            enable_ssl_verification = kwargs['enableSslVerification']

        _setter("url", url)
        if authorization is not None:
            _setter("authorization", authorization)
        if enable_ssl_verification is not None:
            _setter("enable_ssl_verification", enable_ssl_verification)
        if secret is not None:
            _setter("secret", secret)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        External HTTPS URL called on event trigger (by using a POST request). Structure of payload depends on the event type, refer to [documentation](https://docs.databricks.com/applications/mlflow/model-registry-webhooks.html) for more details.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        """
        Value of the authorization header that should be sent in the request sent by the wehbook.  It should be of the form `<auth type> <credentials>`, e.g. `Bearer <access_token>`. If set to an empty string, no authorization header will be included in the request.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="enableSslVerification")
    def enable_ssl_verification(self) -> Optional[bool]:
        """
        Enable/disable SSL certificate validation. Default is `true`. For self-signed certificates, this field must be `false` AND the destination server must disable certificate validation as well. For security purposes, it is encouraged to perform secret validation with the HMAC-encoded portion of the payload and acknowledge the risk associated with disabling hostname validation whereby it becomes more likely that requests can be maliciously routed to an unintended host.
        """
        return pulumi.get(self, "enable_ssl_verification")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        Shared secret required for HMAC encoding payload. The HMAC-encoded payload will be sent in the header as `X-Databricks-Signature: encoded_payload`.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class MlflowWebhookJobSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "jobId":
            suggest = "job_id"
        elif key == "workspaceUrl":
            suggest = "workspace_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MlflowWebhookJobSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MlflowWebhookJobSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MlflowWebhookJobSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 job_id: str,
                 workspace_url: Optional[str] = None):
        """
        :param str access_token: The personal access token used to authorize webhook's job runs.
        :param str job_id: ID of the Databricks job that the webhook runs.
        :param str workspace_url: URL of the workspace containing the job that this webhook runs. If not specified, the job’s workspace URL is assumed to be the same as the workspace where the webhook is created.
        """
        MlflowWebhookJobSpec._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_token=access_token,
            job_id=job_id,
            workspace_url=workspace_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_token: str,
             job_id: str,
             workspace_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessToken' in kwargs:
            access_token = kwargs['accessToken']
        if 'jobId' in kwargs:
            job_id = kwargs['jobId']
        if 'workspaceUrl' in kwargs:
            workspace_url = kwargs['workspaceUrl']

        _setter("access_token", access_token)
        _setter("job_id", job_id)
        if workspace_url is not None:
            _setter("workspace_url", workspace_url)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        The personal access token used to authorize webhook's job runs.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        """
        ID of the Databricks job that the webhook runs.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="workspaceUrl")
    def workspace_url(self) -> Optional[str]:
        """
        URL of the workspace containing the job that this webhook runs. If not specified, the job’s workspace URL is assumed to be the same as the workspace where the webhook is created.
        """
        return pulumi.get(self, "workspace_url")


@pulumi.output_type
class ModelServingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "servedModels":
            suggest = "served_models"
        elif key == "trafficConfig":
            suggest = "traffic_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelServingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelServingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelServingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 served_models: Sequence['outputs.ModelServingConfigServedModel'],
                 traffic_config: Optional['outputs.ModelServingConfigTrafficConfig'] = None):
        """
        :param Sequence['ModelServingConfigServedModelArgs'] served_models: Each block represents a served model for the endpoint to serve. A model serving endpoint can have up to 10 served models.
        :param 'ModelServingConfigTrafficConfigArgs' traffic_config: A single block represents the traffic split configuration amongst the served models.
        """
        ModelServingConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            served_models=served_models,
            traffic_config=traffic_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             served_models: Sequence['outputs.ModelServingConfigServedModel'],
             traffic_config: Optional['outputs.ModelServingConfigTrafficConfig'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'servedModels' in kwargs:
            served_models = kwargs['servedModels']
        if 'trafficConfig' in kwargs:
            traffic_config = kwargs['trafficConfig']

        _setter("served_models", served_models)
        if traffic_config is not None:
            _setter("traffic_config", traffic_config)

    @property
    @pulumi.getter(name="servedModels")
    def served_models(self) -> Sequence['outputs.ModelServingConfigServedModel']:
        """
        Each block represents a served model for the endpoint to serve. A model serving endpoint can have up to 10 served models.
        """
        return pulumi.get(self, "served_models")

    @property
    @pulumi.getter(name="trafficConfig")
    def traffic_config(self) -> Optional['outputs.ModelServingConfigTrafficConfig']:
        """
        A single block represents the traffic split configuration amongst the served models.
        """
        return pulumi.get(self, "traffic_config")


@pulumi.output_type
class ModelServingConfigServedModel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelName":
            suggest = "model_name"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "workloadSize":
            suggest = "workload_size"
        elif key == "environmentVars":
            suggest = "environment_vars"
        elif key == "instanceProfileArn":
            suggest = "instance_profile_arn"
        elif key == "scaleToZeroEnabled":
            suggest = "scale_to_zero_enabled"
        elif key == "workloadType":
            suggest = "workload_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelServingConfigServedModel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelServingConfigServedModel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelServingConfigServedModel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model_name: str,
                 model_version: str,
                 workload_size: str,
                 environment_vars: Optional[Mapping[str, Any]] = None,
                 instance_profile_arn: Optional[str] = None,
                 name: Optional[str] = None,
                 scale_to_zero_enabled: Optional[bool] = None,
                 workload_type: Optional[str] = None):
        """
        :param str model_name: The name of the model in Databricks Model Registry to be served.
        :param str model_version: The version of the model in Databricks Model Registry to be served.
        :param str workload_size: The workload size of the served model. The workload size corresponds to a range of provisioned concurrency that the compute will autoscale between. A single unit of provisioned concurrency can process one request at a time. Valid workload sizes are "Small" (4 - 4 provisioned concurrency), "Medium" (8 - 16 provisioned concurrency), and "Large" (16 - 64 provisioned concurrency).
        :param Mapping[str, Any] environment_vars: a map of environment variable name/values that will be used for serving this model.  Environment variables may refer to Databricks secrets using the standard syntax: `{{secrets/secret_scope/secret_key}}`.
        :param str instance_profile_arn: ARN of the instance profile that the served model will use to access AWS resources.
        :param str name: The name of a served model. It must be unique across an endpoint. If not specified, this field will default to `modelname-modelversion`. A served model name can consist of alphanumeric characters, dashes, and underscores.
        :param bool scale_to_zero_enabled: Whether the compute resources for the served model should scale down to zero. If scale-to-zero is enabled, the lower bound of the provisioned concurrency for each workload size will be 0. The default value is `true`.
        :param str workload_type: The workload type of the served model. The workload type selects which type of compute to use in the endpoint. For deep learning workloads, GPU acceleration is available by selecting workload types like `GPU_SMALL` and others. See documentation for all options. The default value is `CPU`.
        """
        ModelServingConfigServedModel._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            model_name=model_name,
            model_version=model_version,
            workload_size=workload_size,
            environment_vars=environment_vars,
            instance_profile_arn=instance_profile_arn,
            name=name,
            scale_to_zero_enabled=scale_to_zero_enabled,
            workload_type=workload_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             model_name: str,
             model_version: str,
             workload_size: str,
             environment_vars: Optional[Mapping[str, Any]] = None,
             instance_profile_arn: Optional[str] = None,
             name: Optional[str] = None,
             scale_to_zero_enabled: Optional[bool] = None,
             workload_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'modelName' in kwargs:
            model_name = kwargs['modelName']
        if 'modelVersion' in kwargs:
            model_version = kwargs['modelVersion']
        if 'workloadSize' in kwargs:
            workload_size = kwargs['workloadSize']
        if 'environmentVars' in kwargs:
            environment_vars = kwargs['environmentVars']
        if 'instanceProfileArn' in kwargs:
            instance_profile_arn = kwargs['instanceProfileArn']
        if 'scaleToZeroEnabled' in kwargs:
            scale_to_zero_enabled = kwargs['scaleToZeroEnabled']
        if 'workloadType' in kwargs:
            workload_type = kwargs['workloadType']

        _setter("model_name", model_name)
        _setter("model_version", model_version)
        _setter("workload_size", workload_size)
        if environment_vars is not None:
            _setter("environment_vars", environment_vars)
        if instance_profile_arn is not None:
            _setter("instance_profile_arn", instance_profile_arn)
        if name is not None:
            _setter("name", name)
        if scale_to_zero_enabled is not None:
            _setter("scale_to_zero_enabled", scale_to_zero_enabled)
        if workload_type is not None:
            _setter("workload_type", workload_type)

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> str:
        """
        The name of the model in Databricks Model Registry to be served.
        """
        return pulumi.get(self, "model_name")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The version of the model in Databricks Model Registry to be served.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter(name="workloadSize")
    def workload_size(self) -> str:
        """
        The workload size of the served model. The workload size corresponds to a range of provisioned concurrency that the compute will autoscale between. A single unit of provisioned concurrency can process one request at a time. Valid workload sizes are "Small" (4 - 4 provisioned concurrency), "Medium" (8 - 16 provisioned concurrency), and "Large" (16 - 64 provisioned concurrency).
        """
        return pulumi.get(self, "workload_size")

    @property
    @pulumi.getter(name="environmentVars")
    def environment_vars(self) -> Optional[Mapping[str, Any]]:
        """
        a map of environment variable name/values that will be used for serving this model.  Environment variables may refer to Databricks secrets using the standard syntax: `{{secrets/secret_scope/secret_key}}`.
        """
        return pulumi.get(self, "environment_vars")

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[str]:
        """
        ARN of the instance profile that the served model will use to access AWS resources.
        """
        return pulumi.get(self, "instance_profile_arn")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of a served model. It must be unique across an endpoint. If not specified, this field will default to `modelname-modelversion`. A served model name can consist of alphanumeric characters, dashes, and underscores.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scaleToZeroEnabled")
    def scale_to_zero_enabled(self) -> Optional[bool]:
        """
        Whether the compute resources for the served model should scale down to zero. If scale-to-zero is enabled, the lower bound of the provisioned concurrency for each workload size will be 0. The default value is `true`.
        """
        return pulumi.get(self, "scale_to_zero_enabled")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[str]:
        """
        The workload type of the served model. The workload type selects which type of compute to use in the endpoint. For deep learning workloads, GPU acceleration is available by selecting workload types like `GPU_SMALL` and others. See documentation for all options. The default value is `CPU`.
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class ModelServingConfigTrafficConfig(dict):
    def __init__(__self__, *,
                 routes: Optional[Sequence['outputs.ModelServingConfigTrafficConfigRoute']] = None):
        """
        :param Sequence['ModelServingConfigTrafficConfigRouteArgs'] routes: Each block represents a route that defines traffic to each served model. Each `served_models` block needs to have a corresponding `routes` block
        """
        ModelServingConfigTrafficConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            routes=routes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             routes: Optional[Sequence['outputs.ModelServingConfigTrafficConfigRoute']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if routes is not None:
            _setter("routes", routes)

    @property
    @pulumi.getter
    def routes(self) -> Optional[Sequence['outputs.ModelServingConfigTrafficConfigRoute']]:
        """
        Each block represents a route that defines traffic to each served model. Each `served_models` block needs to have a corresponding `routes` block
        """
        return pulumi.get(self, "routes")


@pulumi.output_type
class ModelServingConfigTrafficConfigRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "servedModelName":
            suggest = "served_model_name"
        elif key == "trafficPercentage":
            suggest = "traffic_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelServingConfigTrafficConfigRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelServingConfigTrafficConfigRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelServingConfigTrafficConfigRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 served_model_name: str,
                 traffic_percentage: int):
        """
        :param str served_model_name: The name of the served model this route configures traffic for. This needs to match the name of a `served_models` block
        :param int traffic_percentage: The percentage of endpoint traffic to send to this route. It must be an integer between 0 and 100 inclusive.
        """
        ModelServingConfigTrafficConfigRoute._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            served_model_name=served_model_name,
            traffic_percentage=traffic_percentage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             served_model_name: str,
             traffic_percentage: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'servedModelName' in kwargs:
            served_model_name = kwargs['servedModelName']
        if 'trafficPercentage' in kwargs:
            traffic_percentage = kwargs['trafficPercentage']

        _setter("served_model_name", served_model_name)
        _setter("traffic_percentage", traffic_percentage)

    @property
    @pulumi.getter(name="servedModelName")
    def served_model_name(self) -> str:
        """
        The name of the served model this route configures traffic for. This needs to match the name of a `served_models` block
        """
        return pulumi.get(self, "served_model_name")

    @property
    @pulumi.getter(name="trafficPercentage")
    def traffic_percentage(self) -> int:
        """
        The percentage of endpoint traffic to send to this route. It must be an integer between 0 and 100 inclusive.
        """
        return pulumi.get(self, "traffic_percentage")


@pulumi.output_type
class ModelServingTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: Optional[str] = None):
        ModelServingTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class MountAbfs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecretKey":
            suggest = "client_secret_key"
        elif key == "clientSecretScope":
            suggest = "client_secret_scope"
        elif key == "initializeFileSystem":
            suggest = "initialize_file_system"
        elif key == "containerName":
            suggest = "container_name"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MountAbfs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MountAbfs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MountAbfs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret_key: str,
                 client_secret_scope: str,
                 initialize_file_system: bool,
                 container_name: Optional[str] = None,
                 directory: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        MountAbfs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_id=client_id,
            client_secret_key=client_secret_key,
            client_secret_scope=client_secret_scope,
            initialize_file_system=initialize_file_system,
            container_name=container_name,
            directory=directory,
            storage_account_name=storage_account_name,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_id: str,
             client_secret_key: str,
             client_secret_scope: str,
             initialize_file_system: bool,
             container_name: Optional[str] = None,
             directory: Optional[str] = None,
             storage_account_name: Optional[str] = None,
             tenant_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'clientSecretKey' in kwargs:
            client_secret_key = kwargs['clientSecretKey']
        if 'clientSecretScope' in kwargs:
            client_secret_scope = kwargs['clientSecretScope']
        if 'initializeFileSystem' in kwargs:
            initialize_file_system = kwargs['initializeFileSystem']
        if 'containerName' in kwargs:
            container_name = kwargs['containerName']
        if 'storageAccountName' in kwargs:
            storage_account_name = kwargs['storageAccountName']
        if 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']

        _setter("client_id", client_id)
        _setter("client_secret_key", client_secret_key)
        _setter("client_secret_scope", client_secret_scope)
        _setter("initialize_file_system", initialize_file_system)
        if container_name is not None:
            _setter("container_name", container_name)
        if directory is not None:
            _setter("directory", directory)
        if storage_account_name is not None:
            _setter("storage_account_name", storage_account_name)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretKey")
    def client_secret_key(self) -> str:
        return pulumi.get(self, "client_secret_key")

    @property
    @pulumi.getter(name="clientSecretScope")
    def client_secret_scope(self) -> str:
        return pulumi.get(self, "client_secret_scope")

    @property
    @pulumi.getter(name="initializeFileSystem")
    def initialize_file_system(self) -> bool:
        return pulumi.get(self, "initialize_file_system")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class MountAdl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecretKey":
            suggest = "client_secret_key"
        elif key == "clientSecretScope":
            suggest = "client_secret_scope"
        elif key == "sparkConfPrefix":
            suggest = "spark_conf_prefix"
        elif key == "storageResourceName":
            suggest = "storage_resource_name"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MountAdl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MountAdl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MountAdl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret_key: str,
                 client_secret_scope: str,
                 directory: Optional[str] = None,
                 spark_conf_prefix: Optional[str] = None,
                 storage_resource_name: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        MountAdl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_id=client_id,
            client_secret_key=client_secret_key,
            client_secret_scope=client_secret_scope,
            directory=directory,
            spark_conf_prefix=spark_conf_prefix,
            storage_resource_name=storage_resource_name,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_id: str,
             client_secret_key: str,
             client_secret_scope: str,
             directory: Optional[str] = None,
             spark_conf_prefix: Optional[str] = None,
             storage_resource_name: Optional[str] = None,
             tenant_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'clientSecretKey' in kwargs:
            client_secret_key = kwargs['clientSecretKey']
        if 'clientSecretScope' in kwargs:
            client_secret_scope = kwargs['clientSecretScope']
        if 'sparkConfPrefix' in kwargs:
            spark_conf_prefix = kwargs['sparkConfPrefix']
        if 'storageResourceName' in kwargs:
            storage_resource_name = kwargs['storageResourceName']
        if 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']

        _setter("client_id", client_id)
        _setter("client_secret_key", client_secret_key)
        _setter("client_secret_scope", client_secret_scope)
        if directory is not None:
            _setter("directory", directory)
        if spark_conf_prefix is not None:
            _setter("spark_conf_prefix", spark_conf_prefix)
        if storage_resource_name is not None:
            _setter("storage_resource_name", storage_resource_name)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretKey")
    def client_secret_key(self) -> str:
        return pulumi.get(self, "client_secret_key")

    @property
    @pulumi.getter(name="clientSecretScope")
    def client_secret_scope(self) -> str:
        return pulumi.get(self, "client_secret_scope")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter(name="sparkConfPrefix")
    def spark_conf_prefix(self) -> Optional[str]:
        return pulumi.get(self, "spark_conf_prefix")

    @property
    @pulumi.getter(name="storageResourceName")
    def storage_resource_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_resource_name")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class MountGs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "serviceAccount":
            suggest = "service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MountGs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MountGs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MountGs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 service_account: Optional[str] = None):
        MountGs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_name=bucket_name,
            service_account=service_account,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_name: str,
             service_account: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bucketName' in kwargs:
            bucket_name = kwargs['bucketName']
        if 'serviceAccount' in kwargs:
            service_account = kwargs['serviceAccount']

        _setter("bucket_name", bucket_name)
        if service_account is not None:
            _setter("service_account", service_account)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")


@pulumi.output_type
class MountS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "instanceProfile":
            suggest = "instance_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MountS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MountS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MountS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 instance_profile: Optional[str] = None):
        MountS3._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_name=bucket_name,
            instance_profile=instance_profile,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_name: str,
             instance_profile: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bucketName' in kwargs:
            bucket_name = kwargs['bucketName']
        if 'instanceProfile' in kwargs:
            instance_profile = kwargs['instanceProfile']

        _setter("bucket_name", bucket_name)
        if instance_profile is not None:
            _setter("instance_profile", instance_profile)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="instanceProfile")
    def instance_profile(self) -> Optional[str]:
        return pulumi.get(self, "instance_profile")


@pulumi.output_type
class MountWasb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "tokenSecretKey":
            suggest = "token_secret_key"
        elif key == "tokenSecretScope":
            suggest = "token_secret_scope"
        elif key == "containerName":
            suggest = "container_name"
        elif key == "storageAccountName":
            suggest = "storage_account_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MountWasb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MountWasb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MountWasb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 token_secret_key: str,
                 token_secret_scope: str,
                 container_name: Optional[str] = None,
                 directory: Optional[str] = None,
                 storage_account_name: Optional[str] = None):
        MountWasb._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_type=auth_type,
            token_secret_key=token_secret_key,
            token_secret_scope=token_secret_scope,
            container_name=container_name,
            directory=directory,
            storage_account_name=storage_account_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_type: str,
             token_secret_key: str,
             token_secret_scope: str,
             container_name: Optional[str] = None,
             directory: Optional[str] = None,
             storage_account_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authType' in kwargs:
            auth_type = kwargs['authType']
        if 'tokenSecretKey' in kwargs:
            token_secret_key = kwargs['tokenSecretKey']
        if 'tokenSecretScope' in kwargs:
            token_secret_scope = kwargs['tokenSecretScope']
        if 'containerName' in kwargs:
            container_name = kwargs['containerName']
        if 'storageAccountName' in kwargs:
            storage_account_name = kwargs['storageAccountName']

        _setter("auth_type", auth_type)
        _setter("token_secret_key", token_secret_key)
        _setter("token_secret_scope", token_secret_scope)
        if container_name is not None:
            _setter("container_name", container_name)
        if directory is not None:
            _setter("directory", directory)
        if storage_account_name is not None:
            _setter("storage_account_name", storage_account_name)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="tokenSecretKey")
    def token_secret_key(self) -> str:
        return pulumi.get(self, "token_secret_key")

    @property
    @pulumi.getter(name="tokenSecretScope")
    def token_secret_scope(self) -> str:
        return pulumi.get(self, "token_secret_scope")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")


@pulumi.output_type
class MwsCustomerManagedKeysAwsKeyInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyAlias":
            suggest = "key_alias"
        elif key == "keyArn":
            suggest = "key_arn"
        elif key == "keyRegion":
            suggest = "key_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MwsCustomerManagedKeysAwsKeyInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MwsCustomerManagedKeysAwsKeyInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MwsCustomerManagedKeysAwsKeyInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_alias: str,
                 key_arn: str,
                 key_region: Optional[str] = None):
        """
        :param str key_alias: The AWS KMS key alias.
        :param str key_arn: The AWS KMS key's Amazon Resource Name (ARN).
        :param str key_region: (Computed) The AWS region in which KMS key is deployed to. This is not required.
        """
        MwsCustomerManagedKeysAwsKeyInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_alias=key_alias,
            key_arn=key_arn,
            key_region=key_region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_alias: str,
             key_arn: str,
             key_region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'keyAlias' in kwargs:
            key_alias = kwargs['keyAlias']
        if 'keyArn' in kwargs:
            key_arn = kwargs['keyArn']
        if 'keyRegion' in kwargs:
            key_region = kwargs['keyRegion']

        _setter("key_alias", key_alias)
        _setter("key_arn", key_arn)
        if key_region is not None:
            _setter("key_region", key_region)

    @property
    @pulumi.getter(name="keyAlias")
    def key_alias(self) -> str:
        """
        The AWS KMS key alias.
        """
        return pulumi.get(self, "key_alias")

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> str:
        """
        The AWS KMS key's Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "key_arn")

    @property
    @pulumi.getter(name="keyRegion")
    def key_region(self) -> Optional[str]:
        """
        (Computed) The AWS region in which KMS key is deployed to. This is not required.
        """
        return pulumi.get(self, "key_region")


@pulumi.output_type
class MwsCustomerManagedKeysGcpKeyInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MwsCustomerManagedKeysGcpKeyInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MwsCustomerManagedKeysGcpKeyInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MwsCustomerManagedKeysGcpKeyInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_id: str):
        """
        :param str kms_key_id: The GCP KMS key's resource name.
        """
        MwsCustomerManagedKeysGcpKeyInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kms_key_id=kms_key_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kms_key_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'kmsKeyId' in kwargs:
            kms_key_id = kwargs['kmsKeyId']

        _setter("kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> str:
        """
        The GCP KMS key's resource name.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class MwsNetworksErrorMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorMessage":
            suggest = "error_message"
        elif key == "errorType":
            suggest = "error_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MwsNetworksErrorMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MwsNetworksErrorMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MwsNetworksErrorMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_message: Optional[str] = None,
                 error_type: Optional[str] = None):
        MwsNetworksErrorMessage._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            error_message=error_message,
            error_type=error_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             error_message: Optional[str] = None,
             error_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'errorMessage' in kwargs:
            error_message = kwargs['errorMessage']
        if 'errorType' in kwargs:
            error_type = kwargs['errorType']

        if error_message is not None:
            _setter("error_message", error_message)
        if error_type is not None:
            _setter("error_type", error_type)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[str]:
        return pulumi.get(self, "error_type")


@pulumi.output_type
class MwsNetworksGcpNetworkInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkProjectId":
            suggest = "network_project_id"
        elif key == "podIpRangeName":
            suggest = "pod_ip_range_name"
        elif key == "serviceIpRangeName":
            suggest = "service_ip_range_name"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "subnetRegion":
            suggest = "subnet_region"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MwsNetworksGcpNetworkInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MwsNetworksGcpNetworkInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MwsNetworksGcpNetworkInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_project_id: str,
                 pod_ip_range_name: str,
                 service_ip_range_name: str,
                 subnet_id: str,
                 subnet_region: str,
                 vpc_id: str):
        """
        :param str network_project_id: The Google Cloud project ID of the VPC network.
        :param str pod_ip_range_name: The name of the secondary IP range for pods. A Databricks-managed GKE cluster uses this IP range for its pods. This secondary IP range can only be used by one workspace.
        :param str service_ip_range_name: The name of the secondary IP range for services. A Databricks-managed GKE cluster uses this IP range for its services. This secondary IP range can only be used by one workspace.
        :param str subnet_id: The ID of the subnet associated with this network.
        :param str subnet_region: The Google Cloud region of the workspace data plane. For example, `us-east4`.
        :param str vpc_id: The ID of the VPC associated with this network. VPC IDs can be used in multiple network configurations.
        """
        MwsNetworksGcpNetworkInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            network_project_id=network_project_id,
            pod_ip_range_name=pod_ip_range_name,
            service_ip_range_name=service_ip_range_name,
            subnet_id=subnet_id,
            subnet_region=subnet_region,
            vpc_id=vpc_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             network_project_id: str,
             pod_ip_range_name: str,
             service_ip_range_name: str,
             subnet_id: str,
             subnet_region: str,
             vpc_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'networkProjectId' in kwargs:
            network_project_id = kwargs['networkProjectId']
        if 'podIpRangeName' in kwargs:
            pod_ip_range_name = kwargs['podIpRangeName']
        if 'serviceIpRangeName' in kwargs:
            service_ip_range_name = kwargs['serviceIpRangeName']
        if 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if 'subnetRegion' in kwargs:
            subnet_region = kwargs['subnetRegion']
        if 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']

        _setter("network_project_id", network_project_id)
        _setter("pod_ip_range_name", pod_ip_range_name)
        _setter("service_ip_range_name", service_ip_range_name)
        _setter("subnet_id", subnet_id)
        _setter("subnet_region", subnet_region)
        _setter("vpc_id", vpc_id)

    @property
    @pulumi.getter(name="networkProjectId")
    def network_project_id(self) -> str:
        """
        The Google Cloud project ID of the VPC network.
        """
        return pulumi.get(self, "network_project_id")

    @property
    @pulumi.getter(name="podIpRangeName")
    def pod_ip_range_name(self) -> str:
        """
        The name of the secondary IP range for pods. A Databricks-managed GKE cluster uses this IP range for its pods. This secondary IP range can only be used by one workspace.
        """
        return pulumi.get(self, "pod_ip_range_name")

    @property
    @pulumi.getter(name="serviceIpRangeName")
    def service_ip_range_name(self) -> str:
        """
        The name of the secondary IP range for services. A Databricks-managed GKE cluster uses this IP range for its services. This secondary IP range can only be used by one workspace.
        """
        return pulumi.get(self, "service_ip_range_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the subnet associated with this network.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subnetRegion")
    def subnet_region(self) -> str:
        """
        The Google Cloud region of the workspace data plane. For example, `us-east4`.
        """
        return pulumi.get(self, "subnet_region")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of the VPC associated with this network. VPC IDs can be used in multiple network configurations.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class MwsNetworksVpcEndpoints(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataplaneRelays":
            suggest = "dataplane_relays"
        elif key == "restApis":
            suggest = "rest_apis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MwsNetworksVpcEndpoints. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MwsNetworksVpcEndpoints.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MwsNetworksVpcEndpoints.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataplane_relays: Sequence[str],
                 rest_apis: Sequence[str]):
        MwsNetworksVpcEndpoints._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataplane_relays=dataplane_relays,
            rest_apis=rest_apis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataplane_relays: Sequence[str],
             rest_apis: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dataplaneRelays' in kwargs:
            dataplane_relays = kwargs['dataplaneRelays']
        if 'restApis' in kwargs:
            rest_apis = kwargs['restApis']

        _setter("dataplane_relays", dataplane_relays)
        _setter("rest_apis", rest_apis)

    @property
    @pulumi.getter(name="dataplaneRelays")
    def dataplane_relays(self) -> Sequence[str]:
        return pulumi.get(self, "dataplane_relays")

    @property
    @pulumi.getter(name="restApis")
    def rest_apis(self) -> Sequence[str]:
        return pulumi.get(self, "rest_apis")


@pulumi.output_type
class MwsVpcEndpointGcpVpcEndpointInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointRegion":
            suggest = "endpoint_region"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "pscEndpointName":
            suggest = "psc_endpoint_name"
        elif key == "pscConnectionId":
            suggest = "psc_connection_id"
        elif key == "serviceAttachmentId":
            suggest = "service_attachment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MwsVpcEndpointGcpVpcEndpointInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MwsVpcEndpointGcpVpcEndpointInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MwsVpcEndpointGcpVpcEndpointInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_region: str,
                 project_id: str,
                 psc_endpoint_name: str,
                 psc_connection_id: Optional[str] = None,
                 service_attachment_id: Optional[str] = None):
        """
        :param str endpoint_region: Region of the PSC endpoint.
        :param str project_id: The Google Cloud project ID of the VPC network where the PSC connection resides.
        :param str psc_endpoint_name: The name of the PSC endpoint in the Google Cloud project.
        :param str psc_connection_id: The unique ID of this PSC connection.
        :param str service_attachment_id: The service attachment this PSC connection connects to.
        """
        MwsVpcEndpointGcpVpcEndpointInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint_region=endpoint_region,
            project_id=project_id,
            psc_endpoint_name=psc_endpoint_name,
            psc_connection_id=psc_connection_id,
            service_attachment_id=service_attachment_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint_region: str,
             project_id: str,
             psc_endpoint_name: str,
             psc_connection_id: Optional[str] = None,
             service_attachment_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'endpointRegion' in kwargs:
            endpoint_region = kwargs['endpointRegion']
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if 'pscEndpointName' in kwargs:
            psc_endpoint_name = kwargs['pscEndpointName']
        if 'pscConnectionId' in kwargs:
            psc_connection_id = kwargs['pscConnectionId']
        if 'serviceAttachmentId' in kwargs:
            service_attachment_id = kwargs['serviceAttachmentId']

        _setter("endpoint_region", endpoint_region)
        _setter("project_id", project_id)
        _setter("psc_endpoint_name", psc_endpoint_name)
        if psc_connection_id is not None:
            _setter("psc_connection_id", psc_connection_id)
        if service_attachment_id is not None:
            _setter("service_attachment_id", service_attachment_id)

    @property
    @pulumi.getter(name="endpointRegion")
    def endpoint_region(self) -> str:
        """
        Region of the PSC endpoint.
        """
        return pulumi.get(self, "endpoint_region")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The Google Cloud project ID of the VPC network where the PSC connection resides.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="pscEndpointName")
    def psc_endpoint_name(self) -> str:
        """
        The name of the PSC endpoint in the Google Cloud project.
        """
        return pulumi.get(self, "psc_endpoint_name")

    @property
    @pulumi.getter(name="pscConnectionId")
    def psc_connection_id(self) -> Optional[str]:
        """
        The unique ID of this PSC connection.
        """
        return pulumi.get(self, "psc_connection_id")

    @property
    @pulumi.getter(name="serviceAttachmentId")
    def service_attachment_id(self) -> Optional[str]:
        """
        The service attachment this PSC connection connects to.
        """
        return pulumi.get(self, "service_attachment_id")


@pulumi.output_type
class MwsWorkspacesCloudResourceContainer(dict):
    def __init__(__self__, *,
                 gcp: 'outputs.MwsWorkspacesCloudResourceContainerGcp'):
        """
        :param 'MwsWorkspacesCloudResourceContainerGcpArgs' gcp: A block that consists of the following field:
        """
        MwsWorkspacesCloudResourceContainer._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gcp=gcp,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gcp: 'outputs.MwsWorkspacesCloudResourceContainerGcp',
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("gcp", gcp)

    @property
    @pulumi.getter
    def gcp(self) -> 'outputs.MwsWorkspacesCloudResourceContainerGcp':
        """
        A block that consists of the following field:
        """
        return pulumi.get(self, "gcp")


@pulumi.output_type
class MwsWorkspacesCloudResourceContainerGcp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MwsWorkspacesCloudResourceContainerGcp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MwsWorkspacesCloudResourceContainerGcp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MwsWorkspacesCloudResourceContainerGcp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_id: str):
        """
        :param str project_id: The Google Cloud project ID, which the workspace uses to instantiate cloud resources for your workspace.
        """
        MwsWorkspacesCloudResourceContainerGcp._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            project_id=project_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             project_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']

        _setter("project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The Google Cloud project ID, which the workspace uses to instantiate cloud resources for your workspace.
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class MwsWorkspacesExternalCustomerInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authoritativeUserEmail":
            suggest = "authoritative_user_email"
        elif key == "authoritativeUserFullName":
            suggest = "authoritative_user_full_name"
        elif key == "customerName":
            suggest = "customer_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MwsWorkspacesExternalCustomerInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MwsWorkspacesExternalCustomerInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MwsWorkspacesExternalCustomerInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authoritative_user_email: str,
                 authoritative_user_full_name: str,
                 customer_name: str):
        MwsWorkspacesExternalCustomerInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authoritative_user_email=authoritative_user_email,
            authoritative_user_full_name=authoritative_user_full_name,
            customer_name=customer_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authoritative_user_email: str,
             authoritative_user_full_name: str,
             customer_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authoritativeUserEmail' in kwargs:
            authoritative_user_email = kwargs['authoritativeUserEmail']
        if 'authoritativeUserFullName' in kwargs:
            authoritative_user_full_name = kwargs['authoritativeUserFullName']
        if 'customerName' in kwargs:
            customer_name = kwargs['customerName']

        _setter("authoritative_user_email", authoritative_user_email)
        _setter("authoritative_user_full_name", authoritative_user_full_name)
        _setter("customer_name", customer_name)

    @property
    @pulumi.getter(name="authoritativeUserEmail")
    def authoritative_user_email(self) -> str:
        return pulumi.get(self, "authoritative_user_email")

    @property
    @pulumi.getter(name="authoritativeUserFullName")
    def authoritative_user_full_name(self) -> str:
        return pulumi.get(self, "authoritative_user_full_name")

    @property
    @pulumi.getter(name="customerName")
    def customer_name(self) -> str:
        return pulumi.get(self, "customer_name")


@pulumi.output_type
class MwsWorkspacesGcpManagedNetworkConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gkeClusterPodIpRange":
            suggest = "gke_cluster_pod_ip_range"
        elif key == "gkeClusterServiceIpRange":
            suggest = "gke_cluster_service_ip_range"
        elif key == "subnetCidr":
            suggest = "subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MwsWorkspacesGcpManagedNetworkConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MwsWorkspacesGcpManagedNetworkConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MwsWorkspacesGcpManagedNetworkConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gke_cluster_pod_ip_range: str,
                 gke_cluster_service_ip_range: str,
                 subnet_cidr: str):
        MwsWorkspacesGcpManagedNetworkConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gke_cluster_pod_ip_range=gke_cluster_pod_ip_range,
            gke_cluster_service_ip_range=gke_cluster_service_ip_range,
            subnet_cidr=subnet_cidr,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gke_cluster_pod_ip_range: str,
             gke_cluster_service_ip_range: str,
             subnet_cidr: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'gkeClusterPodIpRange' in kwargs:
            gke_cluster_pod_ip_range = kwargs['gkeClusterPodIpRange']
        if 'gkeClusterServiceIpRange' in kwargs:
            gke_cluster_service_ip_range = kwargs['gkeClusterServiceIpRange']
        if 'subnetCidr' in kwargs:
            subnet_cidr = kwargs['subnetCidr']

        _setter("gke_cluster_pod_ip_range", gke_cluster_pod_ip_range)
        _setter("gke_cluster_service_ip_range", gke_cluster_service_ip_range)
        _setter("subnet_cidr", subnet_cidr)

    @property
    @pulumi.getter(name="gkeClusterPodIpRange")
    def gke_cluster_pod_ip_range(self) -> str:
        return pulumi.get(self, "gke_cluster_pod_ip_range")

    @property
    @pulumi.getter(name="gkeClusterServiceIpRange")
    def gke_cluster_service_ip_range(self) -> str:
        return pulumi.get(self, "gke_cluster_service_ip_range")

    @property
    @pulumi.getter(name="subnetCidr")
    def subnet_cidr(self) -> str:
        return pulumi.get(self, "subnet_cidr")


@pulumi.output_type
class MwsWorkspacesGkeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectivityType":
            suggest = "connectivity_type"
        elif key == "masterIpRange":
            suggest = "master_ip_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MwsWorkspacesGkeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MwsWorkspacesGkeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MwsWorkspacesGkeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connectivity_type: str,
                 master_ip_range: str):
        """
        :param str connectivity_type: Specifies the network connectivity types for the GKE nodes and the GKE master network. Possible values are: `PRIVATE_NODE_PUBLIC_MASTER`, `PUBLIC_NODE_PUBLIC_MASTER`.
        :param str master_ip_range: The IP range from which to allocate GKE cluster master resources. This field will be ignored if GKE private cluster is not enabled. It must be exactly as big as `/28`.
        """
        MwsWorkspacesGkeConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connectivity_type=connectivity_type,
            master_ip_range=master_ip_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connectivity_type: str,
             master_ip_range: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'connectivityType' in kwargs:
            connectivity_type = kwargs['connectivityType']
        if 'masterIpRange' in kwargs:
            master_ip_range = kwargs['masterIpRange']

        _setter("connectivity_type", connectivity_type)
        _setter("master_ip_range", master_ip_range)

    @property
    @pulumi.getter(name="connectivityType")
    def connectivity_type(self) -> str:
        """
        Specifies the network connectivity types for the GKE nodes and the GKE master network. Possible values are: `PRIVATE_NODE_PUBLIC_MASTER`, `PUBLIC_NODE_PUBLIC_MASTER`.
        """
        return pulumi.get(self, "connectivity_type")

    @property
    @pulumi.getter(name="masterIpRange")
    def master_ip_range(self) -> str:
        """
        The IP range from which to allocate GKE cluster master resources. This field will be ignored if GKE private cluster is not enabled. It must be exactly as big as `/28`.
        """
        return pulumi.get(self, "master_ip_range")


@pulumi.output_type
class MwsWorkspacesToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lifetimeSeconds":
            suggest = "lifetime_seconds"
        elif key == "tokenId":
            suggest = "token_id"
        elif key == "tokenValue":
            suggest = "token_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MwsWorkspacesToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MwsWorkspacesToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MwsWorkspacesToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 lifetime_seconds: Optional[int] = None,
                 token_id: Optional[str] = None,
                 token_value: Optional[str] = None):
        """
        :param int lifetime_seconds: Token expiry lifetime. By default its 2592000 (30 days).
        """
        MwsWorkspacesToken._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comment=comment,
            lifetime_seconds=lifetime_seconds,
            token_id=token_id,
            token_value=token_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comment: Optional[str] = None,
             lifetime_seconds: Optional[int] = None,
             token_id: Optional[str] = None,
             token_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'lifetimeSeconds' in kwargs:
            lifetime_seconds = kwargs['lifetimeSeconds']
        if 'tokenId' in kwargs:
            token_id = kwargs['tokenId']
        if 'tokenValue' in kwargs:
            token_value = kwargs['tokenValue']

        if comment is not None:
            _setter("comment", comment)
        if lifetime_seconds is not None:
            _setter("lifetime_seconds", lifetime_seconds)
        if token_id is not None:
            _setter("token_id", token_id)
        if token_value is not None:
            _setter("token_value", token_value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> Optional[int]:
        """
        Token expiry lifetime. By default its 2592000 (30 days).
        """
        return pulumi.get(self, "lifetime_seconds")

    @property
    @pulumi.getter(name="tokenId")
    def token_id(self) -> Optional[str]:
        return pulumi.get(self, "token_id")

    @property
    @pulumi.getter(name="tokenValue")
    def token_value(self) -> Optional[str]:
        return pulumi.get(self, "token_value")


@pulumi.output_type
class PermissionsAccessControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "permissionLevel":
            suggest = "permission_level"
        elif key == "groupName":
            suggest = "group_name"
        elif key == "servicePrincipalName":
            suggest = "service_principal_name"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PermissionsAccessControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PermissionsAccessControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PermissionsAccessControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permission_level: str,
                 group_name: Optional[str] = None,
                 service_principal_name: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        :param str permission_level: permission level according to specific resource. See examples above for the reference.
               
               Exactly one of the below arguments is required:
        :param str group_name: name of the group. We recommend setting permissions on groups.
        :param str service_principal_name: Application ID of the service_principal.
        :param str user_name: name of the user.
        """
        PermissionsAccessControl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            permission_level=permission_level,
            group_name=group_name,
            service_principal_name=service_principal_name,
            user_name=user_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             permission_level: str,
             group_name: Optional[str] = None,
             service_principal_name: Optional[str] = None,
             user_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'permissionLevel' in kwargs:
            permission_level = kwargs['permissionLevel']
        if 'groupName' in kwargs:
            group_name = kwargs['groupName']
        if 'servicePrincipalName' in kwargs:
            service_principal_name = kwargs['servicePrincipalName']
        if 'userName' in kwargs:
            user_name = kwargs['userName']

        _setter("permission_level", permission_level)
        if group_name is not None:
            _setter("group_name", group_name)
        if service_principal_name is not None:
            _setter("service_principal_name", service_principal_name)
        if user_name is not None:
            _setter("user_name", user_name)

    @property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> str:
        """
        permission level according to specific resource. See examples above for the reference.

        Exactly one of the below arguments is required:
        """
        return pulumi.get(self, "permission_level")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        """
        name of the group. We recommend setting permissions on groups.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="servicePrincipalName")
    def service_principal_name(self) -> Optional[str]:
        """
        Application ID of the service_principal.
        """
        return pulumi.get(self, "service_principal_name")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        name of the user.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class PipelineCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyPolicyDefaultValues":
            suggest = "apply_policy_default_values"
        elif key == "awsAttributes":
            suggest = "aws_attributes"
        elif key == "azureAttributes":
            suggest = "azure_attributes"
        elif key == "clusterLogConf":
            suggest = "cluster_log_conf"
        elif key == "customTags":
            suggest = "custom_tags"
        elif key == "driverInstancePoolId":
            suggest = "driver_instance_pool_id"
        elif key == "driverNodeTypeId":
            suggest = "driver_node_type_id"
        elif key == "enableLocalDiskEncryption":
            suggest = "enable_local_disk_encryption"
        elif key == "gcpAttributes":
            suggest = "gcp_attributes"
        elif key == "initScripts":
            suggest = "init_scripts"
        elif key == "instancePoolId":
            suggest = "instance_pool_id"
        elif key == "nodeTypeId":
            suggest = "node_type_id"
        elif key == "numWorkers":
            suggest = "num_workers"
        elif key == "policyId":
            suggest = "policy_id"
        elif key == "sparkConf":
            suggest = "spark_conf"
        elif key == "sparkEnvVars":
            suggest = "spark_env_vars"
        elif key == "sshPublicKeys":
            suggest = "ssh_public_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apply_policy_default_values: Optional[bool] = None,
                 autoscale: Optional['outputs.PipelineClusterAutoscale'] = None,
                 aws_attributes: Optional['outputs.PipelineClusterAwsAttributes'] = None,
                 azure_attributes: Optional['outputs.PipelineClusterAzureAttributes'] = None,
                 cluster_log_conf: Optional['outputs.PipelineClusterClusterLogConf'] = None,
                 custom_tags: Optional[Mapping[str, Any]] = None,
                 driver_instance_pool_id: Optional[str] = None,
                 driver_node_type_id: Optional[str] = None,
                 enable_local_disk_encryption: Optional[bool] = None,
                 gcp_attributes: Optional['outputs.PipelineClusterGcpAttributes'] = None,
                 init_scripts: Optional[Sequence['outputs.PipelineClusterInitScript']] = None,
                 instance_pool_id: Optional[str] = None,
                 label: Optional[str] = None,
                 node_type_id: Optional[str] = None,
                 num_workers: Optional[int] = None,
                 policy_id: Optional[str] = None,
                 spark_conf: Optional[Mapping[str, Any]] = None,
                 spark_env_vars: Optional[Mapping[str, Any]] = None,
                 ssh_public_keys: Optional[Sequence[str]] = None):
        PipelineCluster._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            apply_policy_default_values=apply_policy_default_values,
            autoscale=autoscale,
            aws_attributes=aws_attributes,
            azure_attributes=azure_attributes,
            cluster_log_conf=cluster_log_conf,
            custom_tags=custom_tags,
            driver_instance_pool_id=driver_instance_pool_id,
            driver_node_type_id=driver_node_type_id,
            enable_local_disk_encryption=enable_local_disk_encryption,
            gcp_attributes=gcp_attributes,
            init_scripts=init_scripts,
            instance_pool_id=instance_pool_id,
            label=label,
            node_type_id=node_type_id,
            num_workers=num_workers,
            policy_id=policy_id,
            spark_conf=spark_conf,
            spark_env_vars=spark_env_vars,
            ssh_public_keys=ssh_public_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             apply_policy_default_values: Optional[bool] = None,
             autoscale: Optional['outputs.PipelineClusterAutoscale'] = None,
             aws_attributes: Optional['outputs.PipelineClusterAwsAttributes'] = None,
             azure_attributes: Optional['outputs.PipelineClusterAzureAttributes'] = None,
             cluster_log_conf: Optional['outputs.PipelineClusterClusterLogConf'] = None,
             custom_tags: Optional[Mapping[str, Any]] = None,
             driver_instance_pool_id: Optional[str] = None,
             driver_node_type_id: Optional[str] = None,
             enable_local_disk_encryption: Optional[bool] = None,
             gcp_attributes: Optional['outputs.PipelineClusterGcpAttributes'] = None,
             init_scripts: Optional[Sequence['outputs.PipelineClusterInitScript']] = None,
             instance_pool_id: Optional[str] = None,
             label: Optional[str] = None,
             node_type_id: Optional[str] = None,
             num_workers: Optional[int] = None,
             policy_id: Optional[str] = None,
             spark_conf: Optional[Mapping[str, Any]] = None,
             spark_env_vars: Optional[Mapping[str, Any]] = None,
             ssh_public_keys: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applyPolicyDefaultValues' in kwargs:
            apply_policy_default_values = kwargs['applyPolicyDefaultValues']
        if 'awsAttributes' in kwargs:
            aws_attributes = kwargs['awsAttributes']
        if 'azureAttributes' in kwargs:
            azure_attributes = kwargs['azureAttributes']
        if 'clusterLogConf' in kwargs:
            cluster_log_conf = kwargs['clusterLogConf']
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']
        if 'driverInstancePoolId' in kwargs:
            driver_instance_pool_id = kwargs['driverInstancePoolId']
        if 'driverNodeTypeId' in kwargs:
            driver_node_type_id = kwargs['driverNodeTypeId']
        if 'enableLocalDiskEncryption' in kwargs:
            enable_local_disk_encryption = kwargs['enableLocalDiskEncryption']
        if 'gcpAttributes' in kwargs:
            gcp_attributes = kwargs['gcpAttributes']
        if 'initScripts' in kwargs:
            init_scripts = kwargs['initScripts']
        if 'instancePoolId' in kwargs:
            instance_pool_id = kwargs['instancePoolId']
        if 'nodeTypeId' in kwargs:
            node_type_id = kwargs['nodeTypeId']
        if 'numWorkers' in kwargs:
            num_workers = kwargs['numWorkers']
        if 'policyId' in kwargs:
            policy_id = kwargs['policyId']
        if 'sparkConf' in kwargs:
            spark_conf = kwargs['sparkConf']
        if 'sparkEnvVars' in kwargs:
            spark_env_vars = kwargs['sparkEnvVars']
        if 'sshPublicKeys' in kwargs:
            ssh_public_keys = kwargs['sshPublicKeys']

        if apply_policy_default_values is not None:
            _setter("apply_policy_default_values", apply_policy_default_values)
        if autoscale is not None:
            _setter("autoscale", autoscale)
        if aws_attributes is not None:
            _setter("aws_attributes", aws_attributes)
        if azure_attributes is not None:
            _setter("azure_attributes", azure_attributes)
        if cluster_log_conf is not None:
            _setter("cluster_log_conf", cluster_log_conf)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)
        if driver_instance_pool_id is not None:
            _setter("driver_instance_pool_id", driver_instance_pool_id)
        if driver_node_type_id is not None:
            _setter("driver_node_type_id", driver_node_type_id)
        if enable_local_disk_encryption is not None:
            _setter("enable_local_disk_encryption", enable_local_disk_encryption)
        if gcp_attributes is not None:
            _setter("gcp_attributes", gcp_attributes)
        if init_scripts is not None:
            _setter("init_scripts", init_scripts)
        if instance_pool_id is not None:
            _setter("instance_pool_id", instance_pool_id)
        if label is not None:
            _setter("label", label)
        if node_type_id is not None:
            _setter("node_type_id", node_type_id)
        if num_workers is not None:
            _setter("num_workers", num_workers)
        if policy_id is not None:
            _setter("policy_id", policy_id)
        if spark_conf is not None:
            _setter("spark_conf", spark_conf)
        if spark_env_vars is not None:
            _setter("spark_env_vars", spark_env_vars)
        if ssh_public_keys is not None:
            _setter("ssh_public_keys", ssh_public_keys)

    @property
    @pulumi.getter(name="applyPolicyDefaultValues")
    def apply_policy_default_values(self) -> Optional[bool]:
        return pulumi.get(self, "apply_policy_default_values")

    @property
    @pulumi.getter
    def autoscale(self) -> Optional['outputs.PipelineClusterAutoscale']:
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="awsAttributes")
    def aws_attributes(self) -> Optional['outputs.PipelineClusterAwsAttributes']:
        return pulumi.get(self, "aws_attributes")

    @property
    @pulumi.getter(name="azureAttributes")
    def azure_attributes(self) -> Optional['outputs.PipelineClusterAzureAttributes']:
        return pulumi.get(self, "azure_attributes")

    @property
    @pulumi.getter(name="clusterLogConf")
    def cluster_log_conf(self) -> Optional['outputs.PipelineClusterClusterLogConf']:
        return pulumi.get(self, "cluster_log_conf")

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_tags")

    @property
    @pulumi.getter(name="driverInstancePoolId")
    def driver_instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "driver_instance_pool_id")

    @property
    @pulumi.getter(name="driverNodeTypeId")
    def driver_node_type_id(self) -> Optional[str]:
        return pulumi.get(self, "driver_node_type_id")

    @property
    @pulumi.getter(name="enableLocalDiskEncryption")
    def enable_local_disk_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_local_disk_encryption")

    @property
    @pulumi.getter(name="gcpAttributes")
    def gcp_attributes(self) -> Optional['outputs.PipelineClusterGcpAttributes']:
        return pulumi.get(self, "gcp_attributes")

    @property
    @pulumi.getter(name="initScripts")
    def init_scripts(self) -> Optional[Sequence['outputs.PipelineClusterInitScript']]:
        return pulumi.get(self, "init_scripts")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="nodeTypeId")
    def node_type_id(self) -> Optional[str]:
        return pulumi.get(self, "node_type_id")

    @property
    @pulumi.getter(name="numWorkers")
    def num_workers(self) -> Optional[int]:
        return pulumi.get(self, "num_workers")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="sparkConf")
    def spark_conf(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_conf")

    @property
    @pulumi.getter(name="sparkEnvVars")
    def spark_env_vars(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_env_vars")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssh_public_keys")


@pulumi.output_type
class PipelineClusterAutoscale(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxWorkers":
            suggest = "max_workers"
        elif key == "minWorkers":
            suggest = "min_workers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineClusterAutoscale. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineClusterAutoscale.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineClusterAutoscale.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_workers: Optional[int] = None,
                 min_workers: Optional[int] = None,
                 mode: Optional[str] = None):
        PipelineClusterAutoscale._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_workers=max_workers,
            min_workers=min_workers,
            mode=mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_workers: Optional[int] = None,
             min_workers: Optional[int] = None,
             mode: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxWorkers' in kwargs:
            max_workers = kwargs['maxWorkers']
        if 'minWorkers' in kwargs:
            min_workers = kwargs['minWorkers']

        if max_workers is not None:
            _setter("max_workers", max_workers)
        if min_workers is not None:
            _setter("min_workers", min_workers)
        if mode is not None:
            _setter("mode", mode)

    @property
    @pulumi.getter(name="maxWorkers")
    def max_workers(self) -> Optional[int]:
        return pulumi.get(self, "max_workers")

    @property
    @pulumi.getter(name="minWorkers")
    def min_workers(self) -> Optional[int]:
        return pulumi.get(self, "min_workers")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class PipelineClusterAwsAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ebsVolumeCount":
            suggest = "ebs_volume_count"
        elif key == "ebsVolumeSize":
            suggest = "ebs_volume_size"
        elif key == "ebsVolumeType":
            suggest = "ebs_volume_type"
        elif key == "firstOnDemand":
            suggest = "first_on_demand"
        elif key == "instanceProfileArn":
            suggest = "instance_profile_arn"
        elif key == "spotBidPricePercent":
            suggest = "spot_bid_price_percent"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineClusterAwsAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineClusterAwsAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineClusterAwsAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 ebs_volume_count: Optional[int] = None,
                 ebs_volume_size: Optional[int] = None,
                 ebs_volume_type: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 instance_profile_arn: Optional[str] = None,
                 spot_bid_price_percent: Optional[int] = None,
                 zone_id: Optional[str] = None):
        PipelineClusterAwsAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            ebs_volume_count=ebs_volume_count,
            ebs_volume_size=ebs_volume_size,
            ebs_volume_type=ebs_volume_type,
            first_on_demand=first_on_demand,
            instance_profile_arn=instance_profile_arn,
            spot_bid_price_percent=spot_bid_price_percent,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             ebs_volume_count: Optional[int] = None,
             ebs_volume_size: Optional[int] = None,
             ebs_volume_type: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             instance_profile_arn: Optional[str] = None,
             spot_bid_price_percent: Optional[int] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ebsVolumeCount' in kwargs:
            ebs_volume_count = kwargs['ebsVolumeCount']
        if 'ebsVolumeSize' in kwargs:
            ebs_volume_size = kwargs['ebsVolumeSize']
        if 'ebsVolumeType' in kwargs:
            ebs_volume_type = kwargs['ebsVolumeType']
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'instanceProfileArn' in kwargs:
            instance_profile_arn = kwargs['instanceProfileArn']
        if 'spotBidPricePercent' in kwargs:
            spot_bid_price_percent = kwargs['spotBidPricePercent']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if ebs_volume_count is not None:
            _setter("ebs_volume_count", ebs_volume_count)
        if ebs_volume_size is not None:
            _setter("ebs_volume_size", ebs_volume_size)
        if ebs_volume_type is not None:
            _setter("ebs_volume_type", ebs_volume_type)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if instance_profile_arn is not None:
            _setter("instance_profile_arn", instance_profile_arn)
        if spot_bid_price_percent is not None:
            _setter("spot_bid_price_percent", spot_bid_price_percent)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="ebsVolumeCount")
    def ebs_volume_count(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_count")

    @property
    @pulumi.getter(name="ebsVolumeSize")
    def ebs_volume_size(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_size")

    @property
    @pulumi.getter(name="ebsVolumeType")
    def ebs_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "ebs_volume_type")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[str]:
        return pulumi.get(self, "instance_profile_arn")

    @property
    @pulumi.getter(name="spotBidPricePercent")
    def spot_bid_price_percent(self) -> Optional[int]:
        return pulumi.get(self, "spot_bid_price_percent")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class PipelineClusterAzureAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstOnDemand":
            suggest = "first_on_demand"
        elif key == "spotBidMaxPrice":
            suggest = "spot_bid_max_price"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineClusterAzureAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineClusterAzureAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineClusterAzureAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 spot_bid_max_price: Optional[float] = None):
        PipelineClusterAzureAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            first_on_demand=first_on_demand,
            spot_bid_max_price=spot_bid_max_price,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             spot_bid_max_price: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'spotBidMaxPrice' in kwargs:
            spot_bid_max_price = kwargs['spotBidMaxPrice']

        if availability is not None:
            _setter("availability", availability)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if spot_bid_max_price is not None:
            _setter("spot_bid_max_price", spot_bid_max_price)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="spotBidMaxPrice")
    def spot_bid_max_price(self) -> Optional[float]:
        return pulumi.get(self, "spot_bid_max_price")


@pulumi.output_type
class PipelineClusterClusterLogConf(dict):
    def __init__(__self__, *,
                 dbfs: Optional['outputs.PipelineClusterClusterLogConfDbfs'] = None,
                 s3: Optional['outputs.PipelineClusterClusterLogConfS3'] = None):
        PipelineClusterClusterLogConf._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dbfs=dbfs,
            s3=s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dbfs: Optional['outputs.PipelineClusterClusterLogConfDbfs'] = None,
             s3: Optional['outputs.PipelineClusterClusterLogConfS3'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if dbfs is not None:
            _setter("dbfs", dbfs)
        if s3 is not None:
            _setter("s3", s3)

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.PipelineClusterClusterLogConfDbfs']:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.PipelineClusterClusterLogConfS3']:
        return pulumi.get(self, "s3")


@pulumi.output_type
class PipelineClusterClusterLogConfDbfs(dict):
    def __init__(__self__, *,
                 destination: str):
        PipelineClusterClusterLogConfDbfs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class PipelineClusterClusterLogConfS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cannedAcl":
            suggest = "canned_acl"
        elif key == "enableEncryption":
            suggest = "enable_encryption"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineClusterClusterLogConfS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineClusterClusterLogConfS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineClusterClusterLogConfS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        PipelineClusterClusterLogConfS3._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class PipelineClusterGcpAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "googleServiceAccount":
            suggest = "google_service_account"
        elif key == "localSsdCount":
            suggest = "local_ssd_count"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineClusterGcpAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineClusterGcpAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineClusterGcpAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 google_service_account: Optional[str] = None,
                 local_ssd_count: Optional[int] = None,
                 zone_id: Optional[str] = None):
        PipelineClusterGcpAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            google_service_account=google_service_account,
            local_ssd_count=local_ssd_count,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             google_service_account: Optional[str] = None,
             local_ssd_count: Optional[int] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'googleServiceAccount' in kwargs:
            google_service_account = kwargs['googleServiceAccount']
        if 'localSsdCount' in kwargs:
            local_ssd_count = kwargs['localSsdCount']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if google_service_account is not None:
            _setter("google_service_account", google_service_account)
        if local_ssd_count is not None:
            _setter("local_ssd_count", local_ssd_count)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="googleServiceAccount")
    def google_service_account(self) -> Optional[str]:
        return pulumi.get(self, "google_service_account")

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[int]:
        return pulumi.get(self, "local_ssd_count")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class PipelineClusterInitScript(dict):
    def __init__(__self__, *,
                 abfss: Optional['outputs.PipelineClusterInitScriptAbfss'] = None,
                 dbfs: Optional['outputs.PipelineClusterInitScriptDbfs'] = None,
                 file: Optional['outputs.PipelineClusterInitScriptFile'] = None,
                 gcs: Optional['outputs.PipelineClusterInitScriptGcs'] = None,
                 s3: Optional['outputs.PipelineClusterInitScriptS3'] = None,
                 volumes: Optional['outputs.PipelineClusterInitScriptVolumes'] = None,
                 workspace: Optional['outputs.PipelineClusterInitScriptWorkspace'] = None):
        PipelineClusterInitScript._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abfss=abfss,
            dbfs=dbfs,
            file=file,
            gcs=gcs,
            s3=s3,
            volumes=volumes,
            workspace=workspace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abfss: Optional['outputs.PipelineClusterInitScriptAbfss'] = None,
             dbfs: Optional['outputs.PipelineClusterInitScriptDbfs'] = None,
             file: Optional['outputs.PipelineClusterInitScriptFile'] = None,
             gcs: Optional['outputs.PipelineClusterInitScriptGcs'] = None,
             s3: Optional['outputs.PipelineClusterInitScriptS3'] = None,
             volumes: Optional['outputs.PipelineClusterInitScriptVolumes'] = None,
             workspace: Optional['outputs.PipelineClusterInitScriptWorkspace'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if abfss is not None:
            _setter("abfss", abfss)
        if dbfs is not None:
            _setter("dbfs", dbfs)
        if file is not None:
            _setter("file", file)
        if gcs is not None:
            _setter("gcs", gcs)
        if s3 is not None:
            _setter("s3", s3)
        if volumes is not None:
            _setter("volumes", volumes)
        if workspace is not None:
            _setter("workspace", workspace)

    @property
    @pulumi.getter
    def abfss(self) -> Optional['outputs.PipelineClusterInitScriptAbfss']:
        return pulumi.get(self, "abfss")

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.PipelineClusterInitScriptDbfs']:
        warnings.warn("""For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.""", DeprecationWarning)
        pulumi.log.warn("""dbfs is deprecated: For init scripts use 'volumes', 'workspace' or cloud storage location instead of 'dbfs'.""")

        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.PipelineClusterInitScriptFile']:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def gcs(self) -> Optional['outputs.PipelineClusterInitScriptGcs']:
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.PipelineClusterInitScriptS3']:
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter
    def volumes(self) -> Optional['outputs.PipelineClusterInitScriptVolumes']:
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def workspace(self) -> Optional['outputs.PipelineClusterInitScriptWorkspace']:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class PipelineClusterInitScriptAbfss(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        PipelineClusterInitScriptAbfss._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class PipelineClusterInitScriptDbfs(dict):
    def __init__(__self__, *,
                 destination: str):
        PipelineClusterInitScriptDbfs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class PipelineClusterInitScriptFile(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        PipelineClusterInitScriptFile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class PipelineClusterInitScriptGcs(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        PipelineClusterInitScriptGcs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class PipelineClusterInitScriptS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cannedAcl":
            suggest = "canned_acl"
        elif key == "enableEncryption":
            suggest = "enable_encryption"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineClusterInitScriptS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineClusterInitScriptS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineClusterInitScriptS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        PipelineClusterInitScriptS3._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class PipelineClusterInitScriptVolumes(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        PipelineClusterInitScriptVolumes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class PipelineClusterInitScriptWorkspace(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        PipelineClusterInitScriptWorkspace._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class PipelineFilters(dict):
    def __init__(__self__, *,
                 excludes: Optional[Sequence[str]] = None,
                 includes: Optional[Sequence[str]] = None):
        PipelineFilters._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            excludes=excludes,
            includes=includes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             excludes: Optional[Sequence[str]] = None,
             includes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if excludes is not None:
            _setter("excludes", excludes)
        if includes is not None:
            _setter("includes", includes)

    @property
    @pulumi.getter
    def excludes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excludes")

    @property
    @pulumi.getter
    def includes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "includes")


@pulumi.output_type
class PipelineLibrary(dict):
    def __init__(__self__, *,
                 file: Optional['outputs.PipelineLibraryFile'] = None,
                 jar: Optional[str] = None,
                 maven: Optional['outputs.PipelineLibraryMaven'] = None,
                 notebook: Optional['outputs.PipelineLibraryNotebook'] = None,
                 whl: Optional[str] = None):
        PipelineLibrary._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            file=file,
            jar=jar,
            maven=maven,
            notebook=notebook,
            whl=whl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             file: Optional['outputs.PipelineLibraryFile'] = None,
             jar: Optional[str] = None,
             maven: Optional['outputs.PipelineLibraryMaven'] = None,
             notebook: Optional['outputs.PipelineLibraryNotebook'] = None,
             whl: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if file is not None:
            _setter("file", file)
        if jar is not None:
            _setter("jar", jar)
        if maven is not None:
            _setter("maven", maven)
        if notebook is not None:
            _setter("notebook", notebook)
        if whl is not None:
            _setter("whl", whl)

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.PipelineLibraryFile']:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def jar(self) -> Optional[str]:
        return pulumi.get(self, "jar")

    @property
    @pulumi.getter
    def maven(self) -> Optional['outputs.PipelineLibraryMaven']:
        return pulumi.get(self, "maven")

    @property
    @pulumi.getter
    def notebook(self) -> Optional['outputs.PipelineLibraryNotebook']:
        return pulumi.get(self, "notebook")

    @property
    @pulumi.getter
    def whl(self) -> Optional[str]:
        return pulumi.get(self, "whl")


@pulumi.output_type
class PipelineLibraryFile(dict):
    def __init__(__self__, *,
                 path: str):
        PipelineLibraryFile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")


@pulumi.output_type
class PipelineLibraryMaven(dict):
    def __init__(__self__, *,
                 coordinates: str,
                 exclusions: Optional[Sequence[str]] = None,
                 repo: Optional[str] = None):
        PipelineLibraryMaven._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            coordinates=coordinates,
            exclusions=exclusions,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             coordinates: str,
             exclusions: Optional[Sequence[str]] = None,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("coordinates", coordinates)
        if exclusions is not None:
            _setter("exclusions", exclusions)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def coordinates(self) -> str:
        return pulumi.get(self, "coordinates")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class PipelineLibraryNotebook(dict):
    def __init__(__self__, *,
                 path: str):
        PipelineLibraryNotebook._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")


@pulumi.output_type
class PipelineNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailRecipients":
            suggest = "email_recipients"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alerts: Sequence[str],
                 email_recipients: Sequence[str]):
        """
        :param Sequence[str] alerts: non-empty list of alert types. Right now following alert types are supported, consult documentation for actual list
               * `on-update-success` - a pipeline update completes successfully.
               * `on-update-failure` - a pipeline update fails with a retryable error.
               * `on-update-fatal-failure` - a pipeline update fails with a non-retryable (fatal) error.
               * `on-flow-failure` - a single data flow fails.
        :param Sequence[str] email_recipients: non-empty list of emails to notify.
        """
        PipelineNotification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alerts=alerts,
            email_recipients=email_recipients,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alerts: Sequence[str],
             email_recipients: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'emailRecipients' in kwargs:
            email_recipients = kwargs['emailRecipients']

        _setter("alerts", alerts)
        _setter("email_recipients", email_recipients)

    @property
    @pulumi.getter
    def alerts(self) -> Sequence[str]:
        """
        non-empty list of alert types. Right now following alert types are supported, consult documentation for actual list
        * `on-update-success` - a pipeline update completes successfully.
        * `on-update-failure` - a pipeline update fails with a retryable error.
        * `on-update-fatal-failure` - a pipeline update fails with a non-retryable (fatal) error.
        * `on-flow-failure` - a single data flow fails.
        """
        return pulumi.get(self, "alerts")

    @property
    @pulumi.getter(name="emailRecipients")
    def email_recipients(self) -> Sequence[str]:
        """
        non-empty list of emails to notify.
        """
        return pulumi.get(self, "email_recipients")


@pulumi.output_type
class RecipientIpAccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedIpAddresses":
            suggest = "allowed_ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecipientIpAccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecipientIpAccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecipientIpAccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_ip_addresses: Sequence[str]):
        """
        :param Sequence[str] allowed_ip_addresses: Allowed IP Addresses in CIDR notation. Limit of 100.
        """
        RecipientIpAccessList._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_ip_addresses=allowed_ip_addresses,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_ip_addresses: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedIpAddresses' in kwargs:
            allowed_ip_addresses = kwargs['allowedIpAddresses']

        _setter("allowed_ip_addresses", allowed_ip_addresses)

    @property
    @pulumi.getter(name="allowedIpAddresses")
    def allowed_ip_addresses(self) -> Sequence[str]:
        """
        Allowed IP Addresses in CIDR notation. Limit of 100.
        """
        return pulumi.get(self, "allowed_ip_addresses")


@pulumi.output_type
class RecipientToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activationUrl":
            suggest = "activation_url"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "expirationTime":
            suggest = "expiration_time"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "updatedBy":
            suggest = "updated_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RecipientToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RecipientToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RecipientToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activation_url: Optional[str] = None,
                 created_at: Optional[int] = None,
                 created_by: Optional[str] = None,
                 expiration_time: Optional[int] = None,
                 id: Optional[str] = None,
                 updated_at: Optional[int] = None,
                 updated_by: Optional[str] = None):
        """
        :param str activation_url: Full activation URL to retrieve the access token. It will be empty if the token is already retrieved.
        :param int created_at: Time at which this recipient Token was created, in epoch milliseconds.
        :param str created_by: Username of recipient token creator.
        :param int expiration_time: Expiration timestamp of the token in epoch milliseconds.
        :param str id: ID of this recipient - same as the `name`.
        :param int updated_at: Time at which this recipient Token was updated, in epoch milliseconds.
        :param str updated_by: Username of recipient Token updater.
        """
        RecipientToken._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            activation_url=activation_url,
            created_at=created_at,
            created_by=created_by,
            expiration_time=expiration_time,
            id=id,
            updated_at=updated_at,
            updated_by=updated_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             activation_url: Optional[str] = None,
             created_at: Optional[int] = None,
             created_by: Optional[str] = None,
             expiration_time: Optional[int] = None,
             id: Optional[str] = None,
             updated_at: Optional[int] = None,
             updated_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'activationUrl' in kwargs:
            activation_url = kwargs['activationUrl']
        if 'createdAt' in kwargs:
            created_at = kwargs['createdAt']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'expirationTime' in kwargs:
            expiration_time = kwargs['expirationTime']
        if 'updatedAt' in kwargs:
            updated_at = kwargs['updatedAt']
        if 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']

        if activation_url is not None:
            _setter("activation_url", activation_url)
        if created_at is not None:
            _setter("created_at", created_at)
        if created_by is not None:
            _setter("created_by", created_by)
        if expiration_time is not None:
            _setter("expiration_time", expiration_time)
        if id is not None:
            _setter("id", id)
        if updated_at is not None:
            _setter("updated_at", updated_at)
        if updated_by is not None:
            _setter("updated_by", updated_by)

    @property
    @pulumi.getter(name="activationUrl")
    def activation_url(self) -> Optional[str]:
        """
        Full activation URL to retrieve the access token. It will be empty if the token is already retrieved.
        """
        return pulumi.get(self, "activation_url")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[int]:
        """
        Time at which this recipient Token was created, in epoch milliseconds.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Username of recipient token creator.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[int]:
        """
        Expiration timestamp of the token in epoch milliseconds.
        """
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of this recipient - same as the `name`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[int]:
        """
        Time at which this recipient Token was updated, in epoch milliseconds.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        Username of recipient Token updater.
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class RepoSparseCheckout(dict):
    def __init__(__self__, *,
                 patterns: Sequence[str]):
        RepoSparseCheckout._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            patterns=patterns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             patterns: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("patterns", patterns)

    @property
    @pulumi.getter
    def patterns(self) -> Sequence[str]:
        return pulumi.get(self, "patterns")


@pulumi.output_type
class SecretScopeKeyvaultMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsName":
            suggest = "dns_name"
        elif key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretScopeKeyvaultMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretScopeKeyvaultMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretScopeKeyvaultMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_name: str,
                 resource_id: str):
        SecretScopeKeyvaultMetadata._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dns_name=dns_name,
            resource_id=resource_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dns_name: str,
             resource_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dnsName' in kwargs:
            dns_name = kwargs['dnsName']
        if 'resourceId' in kwargs:
            resource_id = kwargs['resourceId']

        _setter("dns_name", dns_name)
        _setter("resource_id", resource_id)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> str:
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class ShareObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataObjectType":
            suggest = "data_object_type"
        elif key == "addedAt":
            suggest = "added_at"
        elif key == "addedBy":
            suggest = "added_by"
        elif key == "cdfEnabled":
            suggest = "cdf_enabled"
        elif key == "historyDataSharingStatus":
            suggest = "history_data_sharing_status"
        elif key == "sharedAs":
            suggest = "shared_as"
        elif key == "startVersion":
            suggest = "start_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ShareObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ShareObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ShareObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_object_type: str,
                 name: str,
                 added_at: Optional[int] = None,
                 added_by: Optional[str] = None,
                 cdf_enabled: Optional[bool] = None,
                 comment: Optional[str] = None,
                 history_data_sharing_status: Optional[str] = None,
                 partitions: Optional[Sequence['outputs.ShareObjectPartition']] = None,
                 shared_as: Optional[str] = None,
                 start_version: Optional[int] = None,
                 status: Optional[str] = None):
        """
        :param str data_object_type: Type of the object, currently only `TABLE` is allowed.
        :param str name: Full name of the object, e.g. `catalog.schema.name` for a table.
        :param bool cdf_enabled: Whether to enable Change Data Feed (cdf) on the shared object. When this field is set, field `history_data_sharing_status` can not be set.
        :param str comment: Description about the object.
        :param str history_data_sharing_status: Whether to enable history sharing, one of: `ENABLED`, `DISABLED`. When a table has history sharing enabled, recipients can query table data by version, starting from the current table version. If not specified, clients can only query starting from the version of the object at the time it was added to the share. *NOTE*: The start_version should be less than or equal the current version of the object. When this field is set, field `cdf_enabled` can not be set.
               
               To share only part of a table when you add the table to a share, you can provide partition specifications. This is specified by a number of `partition` blocks. Each entry in `partition` block takes a list of `value` blocks. The field is documented below.
        :param str shared_as: A user-provided new name for the data object within the share. If this new name is not provided, the object's original name will be used as the `shared_as` name. The `shared_as` name must be unique within a Share. Change forces creation of a new resource.
        :param int start_version: The start version associated with the object for cdf. This allows data providers to control the lowest object version that is accessible by clients.
        :param str status: Status of the object, one of: `ACTIVE`, `PERMISSION_DENIED`.
        """
        ShareObject._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_object_type=data_object_type,
            name=name,
            added_at=added_at,
            added_by=added_by,
            cdf_enabled=cdf_enabled,
            comment=comment,
            history_data_sharing_status=history_data_sharing_status,
            partitions=partitions,
            shared_as=shared_as,
            start_version=start_version,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_object_type: str,
             name: str,
             added_at: Optional[int] = None,
             added_by: Optional[str] = None,
             cdf_enabled: Optional[bool] = None,
             comment: Optional[str] = None,
             history_data_sharing_status: Optional[str] = None,
             partitions: Optional[Sequence['outputs.ShareObjectPartition']] = None,
             shared_as: Optional[str] = None,
             start_version: Optional[int] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dataObjectType' in kwargs:
            data_object_type = kwargs['dataObjectType']
        if 'addedAt' in kwargs:
            added_at = kwargs['addedAt']
        if 'addedBy' in kwargs:
            added_by = kwargs['addedBy']
        if 'cdfEnabled' in kwargs:
            cdf_enabled = kwargs['cdfEnabled']
        if 'historyDataSharingStatus' in kwargs:
            history_data_sharing_status = kwargs['historyDataSharingStatus']
        if 'sharedAs' in kwargs:
            shared_as = kwargs['sharedAs']
        if 'startVersion' in kwargs:
            start_version = kwargs['startVersion']

        _setter("data_object_type", data_object_type)
        _setter("name", name)
        if added_at is not None:
            _setter("added_at", added_at)
        if added_by is not None:
            _setter("added_by", added_by)
        if cdf_enabled is not None:
            _setter("cdf_enabled", cdf_enabled)
        if comment is not None:
            _setter("comment", comment)
        if history_data_sharing_status is not None:
            _setter("history_data_sharing_status", history_data_sharing_status)
        if partitions is not None:
            _setter("partitions", partitions)
        if shared_as is not None:
            _setter("shared_as", shared_as)
        if start_version is not None:
            _setter("start_version", start_version)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="dataObjectType")
    def data_object_type(self) -> str:
        """
        Type of the object, currently only `TABLE` is allowed.
        """
        return pulumi.get(self, "data_object_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Full name of the object, e.g. `catalog.schema.name` for a table.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="addedAt")
    def added_at(self) -> Optional[int]:
        return pulumi.get(self, "added_at")

    @property
    @pulumi.getter(name="addedBy")
    def added_by(self) -> Optional[str]:
        return pulumi.get(self, "added_by")

    @property
    @pulumi.getter(name="cdfEnabled")
    def cdf_enabled(self) -> Optional[bool]:
        """
        Whether to enable Change Data Feed (cdf) on the shared object. When this field is set, field `history_data_sharing_status` can not be set.
        """
        return pulumi.get(self, "cdf_enabled")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Description about the object.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="historyDataSharingStatus")
    def history_data_sharing_status(self) -> Optional[str]:
        """
        Whether to enable history sharing, one of: `ENABLED`, `DISABLED`. When a table has history sharing enabled, recipients can query table data by version, starting from the current table version. If not specified, clients can only query starting from the version of the object at the time it was added to the share. *NOTE*: The start_version should be less than or equal the current version of the object. When this field is set, field `cdf_enabled` can not be set.

        To share only part of a table when you add the table to a share, you can provide partition specifications. This is specified by a number of `partition` blocks. Each entry in `partition` block takes a list of `value` blocks. The field is documented below.
        """
        return pulumi.get(self, "history_data_sharing_status")

    @property
    @pulumi.getter
    def partitions(self) -> Optional[Sequence['outputs.ShareObjectPartition']]:
        return pulumi.get(self, "partitions")

    @property
    @pulumi.getter(name="sharedAs")
    def shared_as(self) -> Optional[str]:
        """
        A user-provided new name for the data object within the share. If this new name is not provided, the object's original name will be used as the `shared_as` name. The `shared_as` name must be unique within a Share. Change forces creation of a new resource.
        """
        return pulumi.get(self, "shared_as")

    @property
    @pulumi.getter(name="startVersion")
    def start_version(self) -> Optional[int]:
        """
        The start version associated with the object for cdf. This allows data providers to control the lowest object version that is accessible by clients.
        """
        return pulumi.get(self, "start_version")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status of the object, one of: `ACTIVE`, `PERMISSION_DENIED`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ShareObjectPartition(dict):
    def __init__(__self__, *,
                 values: Sequence['outputs.ShareObjectPartitionValue']):
        """
        :param Sequence['ShareObjectPartitionValueArgs'] values: The value of the partition column. When this value is not set, it means null value. When this field is set, field `recipient_property_key` can not be set.
        """
        ShareObjectPartition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Sequence['outputs.ShareObjectPartitionValue'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.ShareObjectPartitionValue']:
        """
        The value of the partition column. When this value is not set, it means null value. When this field is set, field `recipient_property_key` can not be set.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ShareObjectPartitionValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recipientPropertyKey":
            suggest = "recipient_property_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ShareObjectPartitionValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ShareObjectPartitionValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ShareObjectPartitionValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 op: str,
                 recipient_property_key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name of the partition column.
        :param str op: The operator to apply for the value, one of: `EQUAL`, `LIKE`
        :param str recipient_property_key: The key of a Delta Sharing recipient's property. For example `databricks-account-id`. When this field is set, field `value` can not be set.
        :param str value: The value of the partition column. When this value is not set, it means null value. When this field is set, field `recipient_property_key` can not be set.
        """
        ShareObjectPartitionValue._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            op=op,
            recipient_property_key=recipient_property_key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             op: str,
             recipient_property_key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'recipientPropertyKey' in kwargs:
            recipient_property_key = kwargs['recipientPropertyKey']

        _setter("name", name)
        _setter("op", op)
        if recipient_property_key is not None:
            _setter("recipient_property_key", recipient_property_key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the partition column.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def op(self) -> str:
        """
        The operator to apply for the value, one of: `EQUAL`, `LIKE`
        """
        return pulumi.get(self, "op")

    @property
    @pulumi.getter(name="recipientPropertyKey")
    def recipient_property_key(self) -> Optional[str]:
        """
        The key of a Delta Sharing recipient's property. For example `databricks-account-id`. When this field is set, field `value` can not be set.
        """
        return pulumi.get(self, "recipient_property_key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the partition column. When this value is not set, it means null value. When this field is set, field `recipient_property_key` can not be set.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SqlAlertOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customBody":
            suggest = "custom_body"
        elif key == "customSubject":
            suggest = "custom_subject"
        elif key == "emptyResultState":
            suggest = "empty_result_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlAlertOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlAlertOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlAlertOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: str,
                 op: str,
                 value: str,
                 custom_body: Optional[str] = None,
                 custom_subject: Optional[str] = None,
                 empty_result_state: Optional[str] = None,
                 muted: Optional[bool] = None):
        """
        :param str column: Name of column in the query result to compare in alert evaluation.
        :param str op: Operator used to compare in alert evaluation. (Enum: `>`, `>=`, `<`, `<=`, `==`, `!=`)
        :param str value: Value used to compare in alert evaluation.
        :param str custom_body: Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/sql/user/alerts/index.html) for custom templating instructions.
        :param str custom_subject: Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/sql/user/alerts/index.html) for custom templating instructions.
        :param str empty_result_state: State that alert evaluates to when query result is empty.  Currently supported values are `unknown`, `triggered`, `ok` - check [API documentation](https://docs.databricks.com/api/workspace/alerts/create) for full list of supported values.
        :param bool muted: Whether or not the alert is muted. If an alert is muted, it will not notify users and alert destinations when triggered.
        """
        SqlAlertOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            op=op,
            value=value,
            custom_body=custom_body,
            custom_subject=custom_subject,
            empty_result_state=empty_result_state,
            muted=muted,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: str,
             op: str,
             value: str,
             custom_body: Optional[str] = None,
             custom_subject: Optional[str] = None,
             empty_result_state: Optional[str] = None,
             muted: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customBody' in kwargs:
            custom_body = kwargs['customBody']
        if 'customSubject' in kwargs:
            custom_subject = kwargs['customSubject']
        if 'emptyResultState' in kwargs:
            empty_result_state = kwargs['emptyResultState']

        _setter("column", column)
        _setter("op", op)
        _setter("value", value)
        if custom_body is not None:
            _setter("custom_body", custom_body)
        if custom_subject is not None:
            _setter("custom_subject", custom_subject)
        if empty_result_state is not None:
            _setter("empty_result_state", empty_result_state)
        if muted is not None:
            _setter("muted", muted)

    @property
    @pulumi.getter
    def column(self) -> str:
        """
        Name of column in the query result to compare in alert evaluation.
        """
        return pulumi.get(self, "column")

    @property
    @pulumi.getter
    def op(self) -> str:
        """
        Operator used to compare in alert evaluation. (Enum: `>`, `>=`, `<`, `<=`, `==`, `!=`)
        """
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value used to compare in alert evaluation.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customBody")
    def custom_body(self) -> Optional[str]:
        """
        Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/sql/user/alerts/index.html) for custom templating instructions.
        """
        return pulumi.get(self, "custom_body")

    @property
    @pulumi.getter(name="customSubject")
    def custom_subject(self) -> Optional[str]:
        """
        Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/sql/user/alerts/index.html) for custom templating instructions.
        """
        return pulumi.get(self, "custom_subject")

    @property
    @pulumi.getter(name="emptyResultState")
    def empty_result_state(self) -> Optional[str]:
        """
        State that alert evaluates to when query result is empty.  Currently supported values are `unknown`, `triggered`, `ok` - check [API documentation](https://docs.databricks.com/api/workspace/alerts/create) for full list of supported values.
        """
        return pulumi.get(self, "empty_result_state")

    @property
    @pulumi.getter
    def muted(self) -> Optional[bool]:
        """
        Whether or not the alert is muted. If an alert is muted, it will not notify users and alert destinations when triggered.
        """
        return pulumi.get(self, "muted")


@pulumi.output_type
class SqlEndpointChannel(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
        """
        SqlEndpointChannel._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SqlEndpointOdbcParams(dict):
    def __init__(__self__, *,
                 path: str,
                 port: int,
                 protocol: str,
                 host: Optional[str] = None,
                 hostname: Optional[str] = None):
        SqlEndpointOdbcParams._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            port=port,
            protocol=protocol,
            host=host,
            hostname=hostname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: str,
             port: int,
             protocol: str,
             host: Optional[str] = None,
             hostname: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("path", path)
        _setter("port", port)
        _setter("protocol", protocol)
        if host is not None:
            _setter("host", host)
        if hostname is not None:
            _setter("hostname", hostname)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class SqlEndpointTags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customTags":
            suggest = "custom_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlEndpointTags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlEndpointTags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlEndpointTags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_tags: Sequence['outputs.SqlEndpointTagsCustomTag']):
        SqlEndpointTags._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_tags=custom_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_tags: Sequence['outputs.SqlEndpointTagsCustomTag'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']

        _setter("custom_tags", custom_tags)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Sequence['outputs.SqlEndpointTagsCustomTag']:
        return pulumi.get(self, "custom_tags")


@pulumi.output_type
class SqlEndpointTagsCustomTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        SqlEndpointTagsCustomTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class SqlPermissionsPrivilegeAssignment(dict):
    def __init__(__self__, *,
                 principal: str,
                 privileges: Sequence[str]):
        """
        :param str principal: `display_name` for a Group or databricks_user, `application_id` for a databricks_service_principal.
        :param Sequence[str] privileges: set of available privilege names in upper case.
               
               [Available](https://docs.databricks.com/security/access-control/table-acls/object-privileges.html) privilege names are:
        """
        SqlPermissionsPrivilegeAssignment._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            principal=principal,
            privileges=privileges,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             principal: str,
             privileges: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("principal", principal)
        _setter("privileges", privileges)

    @property
    @pulumi.getter
    def principal(self) -> str:
        """
        `display_name` for a Group or databricks_user, `application_id` for a databricks_service_principal.
        """
        return pulumi.get(self, "principal")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        set of available privilege names in upper case.

        [Available](https://docs.databricks.com/security/access-control/table-acls/object-privileges.html) privilege names are:
        """
        return pulumi.get(self, "privileges")


@pulumi.output_type
class SqlQueryParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"
        elif key == "datetimeRange":
            suggest = "datetime_range"
        elif key == "datetimesecRange":
            suggest = "datetimesec_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlQueryParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlQueryParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlQueryParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 date: Optional['outputs.SqlQueryParameterDate'] = None,
                 date_range: Optional['outputs.SqlQueryParameterDateRange'] = None,
                 datetime: Optional['outputs.SqlQueryParameterDatetime'] = None,
                 datetime_range: Optional['outputs.SqlQueryParameterDatetimeRange'] = None,
                 datetimesec: Optional['outputs.SqlQueryParameterDatetimesec'] = None,
                 datetimesec_range: Optional['outputs.SqlQueryParameterDatetimesecRange'] = None,
                 enum: Optional['outputs.SqlQueryParameterEnum'] = None,
                 number: Optional['outputs.SqlQueryParameterNumber'] = None,
                 query: Optional['outputs.SqlQueryParameterQuery'] = None,
                 text: Optional['outputs.SqlQueryParameterText'] = None,
                 title: Optional[str] = None):
        """
        :param str name: The literal parameter marker that appears between double curly braces in the query text.
               Parameters can have several different types. Type is specified using one of the following configuration blocks: `text`, `number`, `enum`, `query`, `date`, `datetime`, `datetimesec`, `date_range`, `datetime_range`, `datetimesec_range`.
               
               For `text`, `number`, `date`, `datetime`, `datetimesec` block
        :param 'SqlQueryParameterQueryArgs' query: The text of the query to be run.
        :param str title: The text displayed in a parameter picking widget.
        """
        SqlQueryParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            date=date,
            date_range=date_range,
            datetime=datetime,
            datetime_range=datetime_range,
            datetimesec=datetimesec,
            datetimesec_range=datetimesec_range,
            enum=enum,
            number=number,
            query=query,
            text=text,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             date: Optional['outputs.SqlQueryParameterDate'] = None,
             date_range: Optional['outputs.SqlQueryParameterDateRange'] = None,
             datetime: Optional['outputs.SqlQueryParameterDatetime'] = None,
             datetime_range: Optional['outputs.SqlQueryParameterDatetimeRange'] = None,
             datetimesec: Optional['outputs.SqlQueryParameterDatetimesec'] = None,
             datetimesec_range: Optional['outputs.SqlQueryParameterDatetimesecRange'] = None,
             enum: Optional['outputs.SqlQueryParameterEnum'] = None,
             number: Optional['outputs.SqlQueryParameterNumber'] = None,
             query: Optional['outputs.SqlQueryParameterQuery'] = None,
             text: Optional['outputs.SqlQueryParameterText'] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dateRange' in kwargs:
            date_range = kwargs['dateRange']
        if 'datetimeRange' in kwargs:
            datetime_range = kwargs['datetimeRange']
        if 'datetimesecRange' in kwargs:
            datetimesec_range = kwargs['datetimesecRange']

        _setter("name", name)
        if date is not None:
            _setter("date", date)
        if date_range is not None:
            _setter("date_range", date_range)
        if datetime is not None:
            _setter("datetime", datetime)
        if datetime_range is not None:
            _setter("datetime_range", datetime_range)
        if datetimesec is not None:
            _setter("datetimesec", datetimesec)
        if datetimesec_range is not None:
            _setter("datetimesec_range", datetimesec_range)
        if enum is not None:
            _setter("enum", enum)
        if number is not None:
            _setter("number", number)
        if query is not None:
            _setter("query", query)
        if text is not None:
            _setter("text", text)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The literal parameter marker that appears between double curly braces in the query text.
        Parameters can have several different types. Type is specified using one of the following configuration blocks: `text`, `number`, `enum`, `query`, `date`, `datetime`, `datetimesec`, `date_range`, `datetime_range`, `datetimesec_range`.

        For `text`, `number`, `date`, `datetime`, `datetimesec` block
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def date(self) -> Optional['outputs.SqlQueryParameterDate']:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.SqlQueryParameterDateRange']:
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def datetime(self) -> Optional['outputs.SqlQueryParameterDatetime']:
        return pulumi.get(self, "datetime")

    @property
    @pulumi.getter(name="datetimeRange")
    def datetime_range(self) -> Optional['outputs.SqlQueryParameterDatetimeRange']:
        return pulumi.get(self, "datetime_range")

    @property
    @pulumi.getter
    def datetimesec(self) -> Optional['outputs.SqlQueryParameterDatetimesec']:
        return pulumi.get(self, "datetimesec")

    @property
    @pulumi.getter(name="datetimesecRange")
    def datetimesec_range(self) -> Optional['outputs.SqlQueryParameterDatetimesecRange']:
        return pulumi.get(self, "datetimesec_range")

    @property
    @pulumi.getter
    def enum(self) -> Optional['outputs.SqlQueryParameterEnum']:
        return pulumi.get(self, "enum")

    @property
    @pulumi.getter
    def number(self) -> Optional['outputs.SqlQueryParameterNumber']:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def query(self) -> Optional['outputs.SqlQueryParameterQuery']:
        """
        The text of the query to be run.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def text(self) -> Optional['outputs.SqlQueryParameterText']:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The text displayed in a parameter picking widget.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class SqlQueryParameterDate(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: The default value for this parameter.
        """
        SqlQueryParameterDate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The default value for this parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SqlQueryParameterDateRange(dict):
    def __init__(__self__, *,
                 range: Optional['outputs.SqlQueryParameterDateRangeRange'] = None,
                 value: Optional[str] = None):
        """
        :param str value: The default value for this parameter.
        """
        SqlQueryParameterDateRange._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            range=range,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             range: Optional['outputs.SqlQueryParameterDateRangeRange'] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if range is not None:
            _setter("range", range)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def range(self) -> Optional['outputs.SqlQueryParameterDateRangeRange']:
        return pulumi.get(self, "range")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The default value for this parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SqlQueryParameterDateRangeRange(dict):
    def __init__(__self__, *,
                 end: str,
                 start: str):
        SqlQueryParameterDateRangeRange._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: str,
             start: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("end", end)
        _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> str:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> str:
        return pulumi.get(self, "start")


@pulumi.output_type
class SqlQueryParameterDatetime(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: The default value for this parameter.
        """
        SqlQueryParameterDatetime._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The default value for this parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SqlQueryParameterDatetimeRange(dict):
    def __init__(__self__, *,
                 range: Optional['outputs.SqlQueryParameterDatetimeRangeRange'] = None,
                 value: Optional[str] = None):
        """
        :param str value: The default value for this parameter.
        """
        SqlQueryParameterDatetimeRange._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            range=range,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             range: Optional['outputs.SqlQueryParameterDatetimeRangeRange'] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if range is not None:
            _setter("range", range)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def range(self) -> Optional['outputs.SqlQueryParameterDatetimeRangeRange']:
        return pulumi.get(self, "range")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The default value for this parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SqlQueryParameterDatetimeRangeRange(dict):
    def __init__(__self__, *,
                 end: str,
                 start: str):
        SqlQueryParameterDatetimeRangeRange._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: str,
             start: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("end", end)
        _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> str:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> str:
        return pulumi.get(self, "start")


@pulumi.output_type
class SqlQueryParameterDatetimesec(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: The default value for this parameter.
        """
        SqlQueryParameterDatetimesec._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The default value for this parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SqlQueryParameterDatetimesecRange(dict):
    def __init__(__self__, *,
                 range: Optional['outputs.SqlQueryParameterDatetimesecRangeRange'] = None,
                 value: Optional[str] = None):
        """
        :param str value: The default value for this parameter.
        """
        SqlQueryParameterDatetimesecRange._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            range=range,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             range: Optional['outputs.SqlQueryParameterDatetimesecRangeRange'] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if range is not None:
            _setter("range", range)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def range(self) -> Optional['outputs.SqlQueryParameterDatetimesecRangeRange']:
        return pulumi.get(self, "range")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The default value for this parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SqlQueryParameterDatetimesecRangeRange(dict):
    def __init__(__self__, *,
                 end: str,
                 start: str):
        SqlQueryParameterDatetimesecRangeRange._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: str,
             start: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("end", end)
        _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> str:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> str:
        return pulumi.get(self, "start")


@pulumi.output_type
class SqlQueryParameterEnum(dict):
    def __init__(__self__, *,
                 options: Sequence[str],
                 multiple: Optional['outputs.SqlQueryParameterEnumMultiple'] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str value: The default value for this parameter.
        """
        SqlQueryParameterEnum._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            options=options,
            multiple=multiple,
            value=value,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             options: Sequence[str],
             multiple: Optional['outputs.SqlQueryParameterEnumMultiple'] = None,
             value: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("options", options)
        if multiple is not None:
            _setter("multiple", multiple)
        if value is not None:
            _setter("value", value)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def options(self) -> Sequence[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def multiple(self) -> Optional['outputs.SqlQueryParameterEnumMultiple']:
        return pulumi.get(self, "multiple")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The default value for this parameter.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class SqlQueryParameterEnumMultiple(dict):
    def __init__(__self__, *,
                 prefix: str,
                 separator: str,
                 suffix: str):
        SqlQueryParameterEnumMultiple._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prefix=prefix,
            separator=separator,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prefix: str,
             separator: str,
             suffix: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("prefix", prefix)
        _setter("separator", separator)
        _setter("suffix", suffix)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def separator(self) -> str:
        return pulumi.get(self, "separator")

    @property
    @pulumi.getter
    def suffix(self) -> str:
        return pulumi.get(self, "suffix")


@pulumi.output_type
class SqlQueryParameterNumber(dict):
    def __init__(__self__, *,
                 value: float):
        """
        :param float value: The default value for this parameter.
        """
        SqlQueryParameterNumber._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: float,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        The default value for this parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SqlQueryParameterQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryId":
            suggest = "query_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlQueryParameterQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlQueryParameterQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlQueryParameterQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query_id: str,
                 multiple: Optional['outputs.SqlQueryParameterQueryMultiple'] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str value: The default value for this parameter.
        """
        SqlQueryParameterQuery._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            query_id=query_id,
            multiple=multiple,
            value=value,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             query_id: str,
             multiple: Optional['outputs.SqlQueryParameterQueryMultiple'] = None,
             value: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'queryId' in kwargs:
            query_id = kwargs['queryId']

        _setter("query_id", query_id)
        if multiple is not None:
            _setter("multiple", multiple)
        if value is not None:
            _setter("value", value)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> str:
        return pulumi.get(self, "query_id")

    @property
    @pulumi.getter
    def multiple(self) -> Optional['outputs.SqlQueryParameterQueryMultiple']:
        return pulumi.get(self, "multiple")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The default value for this parameter.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class SqlQueryParameterQueryMultiple(dict):
    def __init__(__self__, *,
                 prefix: str,
                 separator: str,
                 suffix: str):
        SqlQueryParameterQueryMultiple._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prefix=prefix,
            separator=separator,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prefix: str,
             separator: str,
             suffix: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("prefix", prefix)
        _setter("separator", separator)
        _setter("suffix", suffix)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def separator(self) -> str:
        return pulumi.get(self, "separator")

    @property
    @pulumi.getter
    def suffix(self) -> str:
        return pulumi.get(self, "suffix")


@pulumi.output_type
class SqlQueryParameterText(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: The default value for this parameter.
        """
        SqlQueryParameterText._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The default value for this parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SqlQuerySchedule(dict):
    def __init__(__self__, *,
                 continuous: Optional['outputs.SqlQueryScheduleContinuous'] = None,
                 daily: Optional['outputs.SqlQueryScheduleDaily'] = None,
                 weekly: Optional['outputs.SqlQueryScheduleWeekly'] = None):
        SqlQuerySchedule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            continuous=continuous,
            daily=daily,
            weekly=weekly,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             continuous: Optional['outputs.SqlQueryScheduleContinuous'] = None,
             daily: Optional['outputs.SqlQueryScheduleDaily'] = None,
             weekly: Optional['outputs.SqlQueryScheduleWeekly'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if continuous is not None:
            _setter("continuous", continuous)
        if daily is not None:
            _setter("daily", daily)
        if weekly is not None:
            _setter("weekly", weekly)

    @property
    @pulumi.getter
    def continuous(self) -> Optional['outputs.SqlQueryScheduleContinuous']:
        return pulumi.get(self, "continuous")

    @property
    @pulumi.getter
    def daily(self) -> Optional['outputs.SqlQueryScheduleDaily']:
        return pulumi.get(self, "daily")

    @property
    @pulumi.getter
    def weekly(self) -> Optional['outputs.SqlQueryScheduleWeekly']:
        return pulumi.get(self, "weekly")


@pulumi.output_type
class SqlQueryScheduleContinuous(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intervalSeconds":
            suggest = "interval_seconds"
        elif key == "untilDate":
            suggest = "until_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlQueryScheduleContinuous. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlQueryScheduleContinuous.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlQueryScheduleContinuous.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval_seconds: int,
                 until_date: Optional[str] = None):
        SqlQueryScheduleContinuous._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            interval_seconds=interval_seconds,
            until_date=until_date,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             interval_seconds: int,
             until_date: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'intervalSeconds' in kwargs:
            interval_seconds = kwargs['intervalSeconds']
        if 'untilDate' in kwargs:
            until_date = kwargs['untilDate']

        _setter("interval_seconds", interval_seconds)
        if until_date is not None:
            _setter("until_date", until_date)

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> int:
        return pulumi.get(self, "interval_seconds")

    @property
    @pulumi.getter(name="untilDate")
    def until_date(self) -> Optional[str]:
        return pulumi.get(self, "until_date")


@pulumi.output_type
class SqlQueryScheduleDaily(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intervalDays":
            suggest = "interval_days"
        elif key == "timeOfDay":
            suggest = "time_of_day"
        elif key == "untilDate":
            suggest = "until_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlQueryScheduleDaily. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlQueryScheduleDaily.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlQueryScheduleDaily.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval_days: int,
                 time_of_day: str,
                 until_date: Optional[str] = None):
        SqlQueryScheduleDaily._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            interval_days=interval_days,
            time_of_day=time_of_day,
            until_date=until_date,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             interval_days: int,
             time_of_day: str,
             until_date: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'intervalDays' in kwargs:
            interval_days = kwargs['intervalDays']
        if 'timeOfDay' in kwargs:
            time_of_day = kwargs['timeOfDay']
        if 'untilDate' in kwargs:
            until_date = kwargs['untilDate']

        _setter("interval_days", interval_days)
        _setter("time_of_day", time_of_day)
        if until_date is not None:
            _setter("until_date", until_date)

    @property
    @pulumi.getter(name="intervalDays")
    def interval_days(self) -> int:
        return pulumi.get(self, "interval_days")

    @property
    @pulumi.getter(name="timeOfDay")
    def time_of_day(self) -> str:
        return pulumi.get(self, "time_of_day")

    @property
    @pulumi.getter(name="untilDate")
    def until_date(self) -> Optional[str]:
        return pulumi.get(self, "until_date")


@pulumi.output_type
class SqlQueryScheduleWeekly(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "intervalWeeks":
            suggest = "interval_weeks"
        elif key == "timeOfDay":
            suggest = "time_of_day"
        elif key == "untilDate":
            suggest = "until_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlQueryScheduleWeekly. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlQueryScheduleWeekly.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlQueryScheduleWeekly.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: str,
                 interval_weeks: int,
                 time_of_day: str,
                 until_date: Optional[str] = None):
        SqlQueryScheduleWeekly._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            day_of_week=day_of_week,
            interval_weeks=interval_weeks,
            time_of_day=time_of_day,
            until_date=until_date,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             day_of_week: str,
             interval_weeks: int,
             time_of_day: str,
             until_date: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dayOfWeek' in kwargs:
            day_of_week = kwargs['dayOfWeek']
        if 'intervalWeeks' in kwargs:
            interval_weeks = kwargs['intervalWeeks']
        if 'timeOfDay' in kwargs:
            time_of_day = kwargs['timeOfDay']
        if 'untilDate' in kwargs:
            until_date = kwargs['untilDate']

        _setter("day_of_week", day_of_week)
        _setter("interval_weeks", interval_weeks)
        _setter("time_of_day", time_of_day)
        if until_date is not None:
            _setter("until_date", until_date)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="intervalWeeks")
    def interval_weeks(self) -> int:
        return pulumi.get(self, "interval_weeks")

    @property
    @pulumi.getter(name="timeOfDay")
    def time_of_day(self) -> str:
        return pulumi.get(self, "time_of_day")

    @property
    @pulumi.getter(name="untilDate")
    def until_date(self) -> Optional[str]:
        return pulumi.get(self, "until_date")


@pulumi.output_type
class SqlTableColumn(dict):
    def __init__(__self__, *,
                 name: str,
                 comment: Optional[str] = None,
                 nullable: Optional[bool] = None,
                 type: Optional[str] = None):
        """
        :param str name: User-visible name of column
        :param str comment: User-supplied free-form text.
        :param bool nullable: Whether field is nullable (Default: `true`)
        :param str type: Column type spec (with metadata) as SQL text. Not supported for `VIEW` table_type.
        """
        SqlTableColumn._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            comment=comment,
            nullable=nullable,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             comment: Optional[str] = None,
             nullable: Optional[bool] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        if comment is not None:
            _setter("comment", comment)
        if nullable is not None:
            _setter("nullable", nullable)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User-visible name of column
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        User-supplied free-form text.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def nullable(self) -> Optional[bool]:
        """
        Whether field is nullable (Default: `true`)
        """
        return pulumi.get(self, "nullable")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Column type spec (with metadata) as SQL text. Not supported for `VIEW` table_type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SqlWidgetParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapTo":
            suggest = "map_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlWidgetParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlWidgetParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlWidgetParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 type: str,
                 map_to: Optional[str] = None,
                 title: Optional[str] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        SqlWidgetParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            type=type,
            map_to=map_to,
            title=title,
            value=value,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             type: str,
             map_to: Optional[str] = None,
             title: Optional[str] = None,
             value: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'mapTo' in kwargs:
            map_to = kwargs['mapTo']

        _setter("name", name)
        _setter("type", type)
        if map_to is not None:
            _setter("map_to", map_to)
        if title is not None:
            _setter("title", title)
        if value is not None:
            _setter("value", value)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="mapTo")
    def map_to(self) -> Optional[str]:
        return pulumi.get(self, "map_to")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class SqlWidgetPosition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sizeX":
            suggest = "size_x"
        elif key == "sizeY":
            suggest = "size_y"
        elif key == "autoHeight":
            suggest = "auto_height"
        elif key == "posX":
            suggest = "pos_x"
        elif key == "posY":
            suggest = "pos_y"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlWidgetPosition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlWidgetPosition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlWidgetPosition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size_x: int,
                 size_y: int,
                 auto_height: Optional[bool] = None,
                 pos_x: Optional[int] = None,
                 pos_y: Optional[int] = None):
        SqlWidgetPosition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            size_x=size_x,
            size_y=size_y,
            auto_height=auto_height,
            pos_x=pos_x,
            pos_y=pos_y,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             size_x: int,
             size_y: int,
             auto_height: Optional[bool] = None,
             pos_x: Optional[int] = None,
             pos_y: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sizeX' in kwargs:
            size_x = kwargs['sizeX']
        if 'sizeY' in kwargs:
            size_y = kwargs['sizeY']
        if 'autoHeight' in kwargs:
            auto_height = kwargs['autoHeight']
        if 'posX' in kwargs:
            pos_x = kwargs['posX']
        if 'posY' in kwargs:
            pos_y = kwargs['posY']

        _setter("size_x", size_x)
        _setter("size_y", size_y)
        if auto_height is not None:
            _setter("auto_height", auto_height)
        if pos_x is not None:
            _setter("pos_x", pos_x)
        if pos_y is not None:
            _setter("pos_y", pos_y)

    @property
    @pulumi.getter(name="sizeX")
    def size_x(self) -> int:
        return pulumi.get(self, "size_x")

    @property
    @pulumi.getter(name="sizeY")
    def size_y(self) -> int:
        return pulumi.get(self, "size_y")

    @property
    @pulumi.getter(name="autoHeight")
    def auto_height(self) -> Optional[bool]:
        return pulumi.get(self, "auto_height")

    @property
    @pulumi.getter(name="posX")
    def pos_x(self) -> Optional[int]:
        return pulumi.get(self, "pos_x")

    @property
    @pulumi.getter(name="posY")
    def pos_y(self) -> Optional[int]:
        return pulumi.get(self, "pos_y")


@pulumi.output_type
class StorageCredentialAwsIamRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageCredentialAwsIamRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageCredentialAwsIamRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageCredentialAwsIamRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: str):
        """
        :param str role_arn: The Amazon Resource Name (ARN) of the AWS IAM role for S3 data access, of the form `arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF`
               
               `azure_managed_identity` optional configuration block for using managed identity as credential details for Azure (recommended over service principal):
        """
        StorageCredentialAwsIamRole._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role_arn: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']

        _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the AWS IAM role for S3 data access, of the form `arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF`

        `azure_managed_identity` optional configuration block for using managed identity as credential details for Azure (recommended over service principal):
        """
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class StorageCredentialAzureManagedIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessConnectorId":
            suggest = "access_connector_id"
        elif key == "credentialId":
            suggest = "credential_id"
        elif key == "managedIdentityId":
            suggest = "managed_identity_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageCredentialAzureManagedIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageCredentialAzureManagedIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageCredentialAzureManagedIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_connector_id: str,
                 credential_id: Optional[str] = None,
                 managed_identity_id: Optional[str] = None):
        """
        :param str access_connector_id: The Resource ID of the Azure Databricks Access Connector resource, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.Databricks/accessConnectors/connector-name`.
        :param str managed_identity_id: The Resource ID of the Azure User Assigned Managed Identity associated with Azure Databricks Access Connector, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/user-managed-identity-name`.
               
               `databricks_gcp_service_account` optional configuration block for creating a Databricks-managed GCP Service Account:
        """
        StorageCredentialAzureManagedIdentity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_connector_id=access_connector_id,
            credential_id=credential_id,
            managed_identity_id=managed_identity_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_connector_id: str,
             credential_id: Optional[str] = None,
             managed_identity_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessConnectorId' in kwargs:
            access_connector_id = kwargs['accessConnectorId']
        if 'credentialId' in kwargs:
            credential_id = kwargs['credentialId']
        if 'managedIdentityId' in kwargs:
            managed_identity_id = kwargs['managedIdentityId']

        _setter("access_connector_id", access_connector_id)
        if credential_id is not None:
            _setter("credential_id", credential_id)
        if managed_identity_id is not None:
            _setter("managed_identity_id", managed_identity_id)

    @property
    @pulumi.getter(name="accessConnectorId")
    def access_connector_id(self) -> str:
        """
        The Resource ID of the Azure Databricks Access Connector resource, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.Databricks/accessConnectors/connector-name`.
        """
        return pulumi.get(self, "access_connector_id")

    @property
    @pulumi.getter(name="credentialId")
    def credential_id(self) -> Optional[str]:
        return pulumi.get(self, "credential_id")

    @property
    @pulumi.getter(name="managedIdentityId")
    def managed_identity_id(self) -> Optional[str]:
        """
        The Resource ID of the Azure User Assigned Managed Identity associated with Azure Databricks Access Connector, of the form `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/user-managed-identity-name`.

        `databricks_gcp_service_account` optional configuration block for creating a Databricks-managed GCP Service Account:
        """
        return pulumi.get(self, "managed_identity_id")


@pulumi.output_type
class StorageCredentialAzureServicePrincipal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationId":
            suggest = "application_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "directoryId":
            suggest = "directory_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageCredentialAzureServicePrincipal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageCredentialAzureServicePrincipal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageCredentialAzureServicePrincipal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_id: str,
                 client_secret: str,
                 directory_id: str):
        """
        :param str application_id: The application ID of the application registration within the referenced AAD tenant
        :param str client_secret: The client secret generated for the above app ID in AAD. **This field is redacted on output**
        :param str directory_id: The directory ID corresponding to the Azure Active Directory (AAD) tenant of the application
        """
        StorageCredentialAzureServicePrincipal._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            application_id=application_id,
            client_secret=client_secret,
            directory_id=directory_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             application_id: str,
             client_secret: str,
             directory_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applicationId' in kwargs:
            application_id = kwargs['applicationId']
        if 'clientSecret' in kwargs:
            client_secret = kwargs['clientSecret']
        if 'directoryId' in kwargs:
            directory_id = kwargs['directoryId']

        _setter("application_id", application_id)
        _setter("client_secret", client_secret)
        _setter("directory_id", directory_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        """
        The application ID of the application registration within the referenced AAD tenant
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        """
        The client secret generated for the above app ID in AAD. **This field is redacted on output**
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="directoryId")
    def directory_id(self) -> str:
        """
        The directory ID corresponding to the Azure Active Directory (AAD) tenant of the application
        """
        return pulumi.get(self, "directory_id")


@pulumi.output_type
class StorageCredentialDatabricksGcpServiceAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialId":
            suggest = "credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageCredentialDatabricksGcpServiceAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageCredentialDatabricksGcpServiceAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageCredentialDatabricksGcpServiceAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_id: Optional[str] = None,
                 email: Optional[str] = None):
        """
        :param str email: The email of the GCP service account created, to be granted access to relevant buckets.
        """
        StorageCredentialDatabricksGcpServiceAccount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credential_id=credential_id,
            email=email,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credential_id: Optional[str] = None,
             email: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'credentialId' in kwargs:
            credential_id = kwargs['credentialId']

        if credential_id is not None:
            _setter("credential_id", credential_id)
        if email is not None:
            _setter("email", email)

    @property
    @pulumi.getter(name="credentialId")
    def credential_id(self) -> Optional[str]:
        return pulumi.get(self, "credential_id")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        The email of the GCP service account created, to be granted access to relevant buckets.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class StorageCredentialGcpServiceAccountKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyId":
            suggest = "private_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageCredentialGcpServiceAccountKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageCredentialGcpServiceAccountKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageCredentialGcpServiceAccountKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 private_key: str,
                 private_key_id: str):
        """
        :param str email: The email of the GCP service account created, to be granted access to relevant buckets.
        """
        StorageCredentialGcpServiceAccountKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email=email,
            private_key=private_key,
            private_key_id=private_key_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email: str,
             private_key: str,
             private_key_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'privateKey' in kwargs:
            private_key = kwargs['privateKey']
        if 'privateKeyId' in kwargs:
            private_key_id = kwargs['privateKeyId']

        _setter("email", email)
        _setter("private_key", private_key)
        _setter("private_key_id", private_key_id)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email of the GCP service account created, to be granted access to relevant buckets.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> str:
        return pulumi.get(self, "private_key_id")


@pulumi.output_type
class TableColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "typeName":
            suggest = "type_name"
        elif key == "typeText":
            suggest = "type_text"
        elif key == "partitionIndex":
            suggest = "partition_index"
        elif key == "typeIntervalType":
            suggest = "type_interval_type"
        elif key == "typeJson":
            suggest = "type_json"
        elif key == "typePrecision":
            suggest = "type_precision"
        elif key == "typeScale":
            suggest = "type_scale"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 position: int,
                 type_name: str,
                 type_text: str,
                 comment: Optional[str] = None,
                 nullable: Optional[bool] = None,
                 partition_index: Optional[int] = None,
                 type_interval_type: Optional[str] = None,
                 type_json: Optional[str] = None,
                 type_precision: Optional[int] = None,
                 type_scale: Optional[int] = None):
        TableColumn._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            position=position,
            type_name=type_name,
            type_text=type_text,
            comment=comment,
            nullable=nullable,
            partition_index=partition_index,
            type_interval_type=type_interval_type,
            type_json=type_json,
            type_precision=type_precision,
            type_scale=type_scale,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             position: int,
             type_name: str,
             type_text: str,
             comment: Optional[str] = None,
             nullable: Optional[bool] = None,
             partition_index: Optional[int] = None,
             type_interval_type: Optional[str] = None,
             type_json: Optional[str] = None,
             type_precision: Optional[int] = None,
             type_scale: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'typeName' in kwargs:
            type_name = kwargs['typeName']
        if 'typeText' in kwargs:
            type_text = kwargs['typeText']
        if 'partitionIndex' in kwargs:
            partition_index = kwargs['partitionIndex']
        if 'typeIntervalType' in kwargs:
            type_interval_type = kwargs['typeIntervalType']
        if 'typeJson' in kwargs:
            type_json = kwargs['typeJson']
        if 'typePrecision' in kwargs:
            type_precision = kwargs['typePrecision']
        if 'typeScale' in kwargs:
            type_scale = kwargs['typeScale']

        _setter("name", name)
        _setter("position", position)
        _setter("type_name", type_name)
        _setter("type_text", type_text)
        if comment is not None:
            _setter("comment", comment)
        if nullable is not None:
            _setter("nullable", nullable)
        if partition_index is not None:
            _setter("partition_index", partition_index)
        if type_interval_type is not None:
            _setter("type_interval_type", type_interval_type)
        if type_json is not None:
            _setter("type_json", type_json)
        if type_precision is not None:
            _setter("type_precision", type_precision)
        if type_scale is not None:
            _setter("type_scale", type_scale)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> int:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="typeName")
    def type_name(self) -> str:
        return pulumi.get(self, "type_name")

    @property
    @pulumi.getter(name="typeText")
    def type_text(self) -> str:
        return pulumi.get(self, "type_text")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def nullable(self) -> Optional[bool]:
        return pulumi.get(self, "nullable")

    @property
    @pulumi.getter(name="partitionIndex")
    def partition_index(self) -> Optional[int]:
        return pulumi.get(self, "partition_index")

    @property
    @pulumi.getter(name="typeIntervalType")
    def type_interval_type(self) -> Optional[str]:
        return pulumi.get(self, "type_interval_type")

    @property
    @pulumi.getter(name="typeJson")
    def type_json(self) -> Optional[str]:
        return pulumi.get(self, "type_json")

    @property
    @pulumi.getter(name="typePrecision")
    def type_precision(self) -> Optional[int]:
        return pulumi.get(self, "type_precision")

    @property
    @pulumi.getter(name="typeScale")
    def type_scale(self) -> Optional[int]:
        return pulumi.get(self, "type_scale")


@pulumi.output_type
class GetClusterClusterInfoResult(dict):
    def __init__(__self__, *,
                 default_tags: Mapping[str, Any],
                 driver_instance_pool_id: str,
                 spark_version: str,
                 state: str,
                 autoscale: Optional['outputs.GetClusterClusterInfoAutoscaleResult'] = None,
                 autotermination_minutes: Optional[int] = None,
                 aws_attributes: Optional['outputs.GetClusterClusterInfoAwsAttributesResult'] = None,
                 azure_attributes: Optional['outputs.GetClusterClusterInfoAzureAttributesResult'] = None,
                 cluster_cores: Optional[float] = None,
                 cluster_id: Optional[str] = None,
                 cluster_log_conf: Optional['outputs.GetClusterClusterInfoClusterLogConfResult'] = None,
                 cluster_log_status: Optional['outputs.GetClusterClusterInfoClusterLogStatusResult'] = None,
                 cluster_memory_mb: Optional[int] = None,
                 cluster_name: Optional[str] = None,
                 cluster_source: Optional[str] = None,
                 creator_user_name: Optional[str] = None,
                 custom_tags: Optional[Mapping[str, Any]] = None,
                 data_security_mode: Optional[str] = None,
                 docker_image: Optional['outputs.GetClusterClusterInfoDockerImageResult'] = None,
                 driver: Optional['outputs.GetClusterClusterInfoDriverResult'] = None,
                 driver_node_type_id: Optional[str] = None,
                 enable_elastic_disk: Optional[bool] = None,
                 enable_local_disk_encryption: Optional[bool] = None,
                 executors: Optional[Sequence['outputs.GetClusterClusterInfoExecutorResult']] = None,
                 gcp_attributes: Optional['outputs.GetClusterClusterInfoGcpAttributesResult'] = None,
                 init_scripts: Optional[Sequence['outputs.GetClusterClusterInfoInitScriptResult']] = None,
                 instance_pool_id: Optional[str] = None,
                 jdbc_port: Optional[int] = None,
                 last_activity_time: Optional[int] = None,
                 last_state_loss_time: Optional[int] = None,
                 node_type_id: Optional[str] = None,
                 num_workers: Optional[int] = None,
                 policy_id: Optional[str] = None,
                 runtime_engine: Optional[str] = None,
                 single_user_name: Optional[str] = None,
                 spark_conf: Optional[Mapping[str, Any]] = None,
                 spark_context_id: Optional[int] = None,
                 spark_env_vars: Optional[Mapping[str, Any]] = None,
                 ssh_public_keys: Optional[Sequence[str]] = None,
                 start_time: Optional[int] = None,
                 state_message: Optional[str] = None,
                 terminate_time: Optional[int] = None,
                 termination_reason: Optional['outputs.GetClusterClusterInfoTerminationReasonResult'] = None):
        """
        :param str driver_instance_pool_id: similar to `instance_pool_id`, but for driver node.
        :param str spark_version: [Runtime version](https://docs.databricks.com/runtime/index.html) of the cluster.
        :param int autotermination_minutes: Automatically terminate the cluster after being inactive for this time in minutes. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination.
        :param str cluster_id: The id of the cluster
        :param str cluster_name: The exact name of the cluster to search
        :param Mapping[str, Any] custom_tags: Additional tags for cluster resources.
        :param str data_security_mode: Security features of the cluster. Unity Catalog requires `SINGLE_USER` or `USER_ISOLATION` mode. `LEGACY_PASSTHROUGH` for passthrough cluster and `LEGACY_TABLE_ACL` for Table ACL cluster. Default to `NONE`, i.e. no security feature enabled.
        :param str driver_node_type_id: The node type of the Spark driver.
        :param bool enable_elastic_disk: Use autoscaling local storage.
        :param bool enable_local_disk_encryption: Enable local disk encryption.
        :param str instance_pool_id: The pool of idle instances the cluster is attached to.
        :param str node_type_id: Any supported get_node_type id.
        :param str policy_id: Identifier of Cluster Policy to validate cluster and preset certain defaults.
        :param str runtime_engine: The type of runtime of the cluster
        :param str single_user_name: The optional user name of the user to assign to an interactive cluster. This field is required when using standard AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
        :param Mapping[str, Any] spark_conf: Map with key-value pairs to fine-tune Spark clusters.
        :param Mapping[str, Any] spark_env_vars: Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
        :param Sequence[str] ssh_public_keys: SSH public key contents that will be added to each Spark node in this cluster.
        """
        GetClusterClusterInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_tags=default_tags,
            driver_instance_pool_id=driver_instance_pool_id,
            spark_version=spark_version,
            state=state,
            autoscale=autoscale,
            autotermination_minutes=autotermination_minutes,
            aws_attributes=aws_attributes,
            azure_attributes=azure_attributes,
            cluster_cores=cluster_cores,
            cluster_id=cluster_id,
            cluster_log_conf=cluster_log_conf,
            cluster_log_status=cluster_log_status,
            cluster_memory_mb=cluster_memory_mb,
            cluster_name=cluster_name,
            cluster_source=cluster_source,
            creator_user_name=creator_user_name,
            custom_tags=custom_tags,
            data_security_mode=data_security_mode,
            docker_image=docker_image,
            driver=driver,
            driver_node_type_id=driver_node_type_id,
            enable_elastic_disk=enable_elastic_disk,
            enable_local_disk_encryption=enable_local_disk_encryption,
            executors=executors,
            gcp_attributes=gcp_attributes,
            init_scripts=init_scripts,
            instance_pool_id=instance_pool_id,
            jdbc_port=jdbc_port,
            last_activity_time=last_activity_time,
            last_state_loss_time=last_state_loss_time,
            node_type_id=node_type_id,
            num_workers=num_workers,
            policy_id=policy_id,
            runtime_engine=runtime_engine,
            single_user_name=single_user_name,
            spark_conf=spark_conf,
            spark_context_id=spark_context_id,
            spark_env_vars=spark_env_vars,
            ssh_public_keys=ssh_public_keys,
            start_time=start_time,
            state_message=state_message,
            terminate_time=terminate_time,
            termination_reason=termination_reason,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_tags: Mapping[str, Any],
             driver_instance_pool_id: str,
             spark_version: str,
             state: str,
             autoscale: Optional['outputs.GetClusterClusterInfoAutoscaleResult'] = None,
             autotermination_minutes: Optional[int] = None,
             aws_attributes: Optional['outputs.GetClusterClusterInfoAwsAttributesResult'] = None,
             azure_attributes: Optional['outputs.GetClusterClusterInfoAzureAttributesResult'] = None,
             cluster_cores: Optional[float] = None,
             cluster_id: Optional[str] = None,
             cluster_log_conf: Optional['outputs.GetClusterClusterInfoClusterLogConfResult'] = None,
             cluster_log_status: Optional['outputs.GetClusterClusterInfoClusterLogStatusResult'] = None,
             cluster_memory_mb: Optional[int] = None,
             cluster_name: Optional[str] = None,
             cluster_source: Optional[str] = None,
             creator_user_name: Optional[str] = None,
             custom_tags: Optional[Mapping[str, Any]] = None,
             data_security_mode: Optional[str] = None,
             docker_image: Optional['outputs.GetClusterClusterInfoDockerImageResult'] = None,
             driver: Optional['outputs.GetClusterClusterInfoDriverResult'] = None,
             driver_node_type_id: Optional[str] = None,
             enable_elastic_disk: Optional[bool] = None,
             enable_local_disk_encryption: Optional[bool] = None,
             executors: Optional[Sequence['outputs.GetClusterClusterInfoExecutorResult']] = None,
             gcp_attributes: Optional['outputs.GetClusterClusterInfoGcpAttributesResult'] = None,
             init_scripts: Optional[Sequence['outputs.GetClusterClusterInfoInitScriptResult']] = None,
             instance_pool_id: Optional[str] = None,
             jdbc_port: Optional[int] = None,
             last_activity_time: Optional[int] = None,
             last_state_loss_time: Optional[int] = None,
             node_type_id: Optional[str] = None,
             num_workers: Optional[int] = None,
             policy_id: Optional[str] = None,
             runtime_engine: Optional[str] = None,
             single_user_name: Optional[str] = None,
             spark_conf: Optional[Mapping[str, Any]] = None,
             spark_context_id: Optional[int] = None,
             spark_env_vars: Optional[Mapping[str, Any]] = None,
             ssh_public_keys: Optional[Sequence[str]] = None,
             start_time: Optional[int] = None,
             state_message: Optional[str] = None,
             terminate_time: Optional[int] = None,
             termination_reason: Optional['outputs.GetClusterClusterInfoTerminationReasonResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultTags' in kwargs:
            default_tags = kwargs['defaultTags']
        if 'driverInstancePoolId' in kwargs:
            driver_instance_pool_id = kwargs['driverInstancePoolId']
        if 'sparkVersion' in kwargs:
            spark_version = kwargs['sparkVersion']
        if 'autoterminationMinutes' in kwargs:
            autotermination_minutes = kwargs['autoterminationMinutes']
        if 'awsAttributes' in kwargs:
            aws_attributes = kwargs['awsAttributes']
        if 'azureAttributes' in kwargs:
            azure_attributes = kwargs['azureAttributes']
        if 'clusterCores' in kwargs:
            cluster_cores = kwargs['clusterCores']
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'clusterLogConf' in kwargs:
            cluster_log_conf = kwargs['clusterLogConf']
        if 'clusterLogStatus' in kwargs:
            cluster_log_status = kwargs['clusterLogStatus']
        if 'clusterMemoryMb' in kwargs:
            cluster_memory_mb = kwargs['clusterMemoryMb']
        if 'clusterName' in kwargs:
            cluster_name = kwargs['clusterName']
        if 'clusterSource' in kwargs:
            cluster_source = kwargs['clusterSource']
        if 'creatorUserName' in kwargs:
            creator_user_name = kwargs['creatorUserName']
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']
        if 'dataSecurityMode' in kwargs:
            data_security_mode = kwargs['dataSecurityMode']
        if 'dockerImage' in kwargs:
            docker_image = kwargs['dockerImage']
        if 'driverNodeTypeId' in kwargs:
            driver_node_type_id = kwargs['driverNodeTypeId']
        if 'enableElasticDisk' in kwargs:
            enable_elastic_disk = kwargs['enableElasticDisk']
        if 'enableLocalDiskEncryption' in kwargs:
            enable_local_disk_encryption = kwargs['enableLocalDiskEncryption']
        if 'gcpAttributes' in kwargs:
            gcp_attributes = kwargs['gcpAttributes']
        if 'initScripts' in kwargs:
            init_scripts = kwargs['initScripts']
        if 'instancePoolId' in kwargs:
            instance_pool_id = kwargs['instancePoolId']
        if 'jdbcPort' in kwargs:
            jdbc_port = kwargs['jdbcPort']
        if 'lastActivityTime' in kwargs:
            last_activity_time = kwargs['lastActivityTime']
        if 'lastStateLossTime' in kwargs:
            last_state_loss_time = kwargs['lastStateLossTime']
        if 'nodeTypeId' in kwargs:
            node_type_id = kwargs['nodeTypeId']
        if 'numWorkers' in kwargs:
            num_workers = kwargs['numWorkers']
        if 'policyId' in kwargs:
            policy_id = kwargs['policyId']
        if 'runtimeEngine' in kwargs:
            runtime_engine = kwargs['runtimeEngine']
        if 'singleUserName' in kwargs:
            single_user_name = kwargs['singleUserName']
        if 'sparkConf' in kwargs:
            spark_conf = kwargs['sparkConf']
        if 'sparkContextId' in kwargs:
            spark_context_id = kwargs['sparkContextId']
        if 'sparkEnvVars' in kwargs:
            spark_env_vars = kwargs['sparkEnvVars']
        if 'sshPublicKeys' in kwargs:
            ssh_public_keys = kwargs['sshPublicKeys']
        if 'startTime' in kwargs:
            start_time = kwargs['startTime']
        if 'stateMessage' in kwargs:
            state_message = kwargs['stateMessage']
        if 'terminateTime' in kwargs:
            terminate_time = kwargs['terminateTime']
        if 'terminationReason' in kwargs:
            termination_reason = kwargs['terminationReason']

        _setter("default_tags", default_tags)
        _setter("driver_instance_pool_id", driver_instance_pool_id)
        _setter("spark_version", spark_version)
        _setter("state", state)
        if autoscale is not None:
            _setter("autoscale", autoscale)
        if autotermination_minutes is not None:
            _setter("autotermination_minutes", autotermination_minutes)
        if aws_attributes is not None:
            _setter("aws_attributes", aws_attributes)
        if azure_attributes is not None:
            _setter("azure_attributes", azure_attributes)
        if cluster_cores is not None:
            _setter("cluster_cores", cluster_cores)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if cluster_log_conf is not None:
            _setter("cluster_log_conf", cluster_log_conf)
        if cluster_log_status is not None:
            _setter("cluster_log_status", cluster_log_status)
        if cluster_memory_mb is not None:
            _setter("cluster_memory_mb", cluster_memory_mb)
        if cluster_name is not None:
            _setter("cluster_name", cluster_name)
        if cluster_source is not None:
            _setter("cluster_source", cluster_source)
        if creator_user_name is not None:
            _setter("creator_user_name", creator_user_name)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)
        if data_security_mode is not None:
            _setter("data_security_mode", data_security_mode)
        if docker_image is not None:
            _setter("docker_image", docker_image)
        if driver is not None:
            _setter("driver", driver)
        if driver_node_type_id is not None:
            _setter("driver_node_type_id", driver_node_type_id)
        if enable_elastic_disk is not None:
            _setter("enable_elastic_disk", enable_elastic_disk)
        if enable_local_disk_encryption is not None:
            _setter("enable_local_disk_encryption", enable_local_disk_encryption)
        if executors is not None:
            _setter("executors", executors)
        if gcp_attributes is not None:
            _setter("gcp_attributes", gcp_attributes)
        if init_scripts is not None:
            _setter("init_scripts", init_scripts)
        if instance_pool_id is not None:
            _setter("instance_pool_id", instance_pool_id)
        if jdbc_port is not None:
            _setter("jdbc_port", jdbc_port)
        if last_activity_time is not None:
            _setter("last_activity_time", last_activity_time)
        if last_state_loss_time is not None:
            _setter("last_state_loss_time", last_state_loss_time)
        if node_type_id is not None:
            _setter("node_type_id", node_type_id)
        if num_workers is not None:
            _setter("num_workers", num_workers)
        if policy_id is not None:
            _setter("policy_id", policy_id)
        if runtime_engine is not None:
            _setter("runtime_engine", runtime_engine)
        if single_user_name is not None:
            _setter("single_user_name", single_user_name)
        if spark_conf is not None:
            _setter("spark_conf", spark_conf)
        if spark_context_id is not None:
            _setter("spark_context_id", spark_context_id)
        if spark_env_vars is not None:
            _setter("spark_env_vars", spark_env_vars)
        if ssh_public_keys is not None:
            _setter("ssh_public_keys", ssh_public_keys)
        if start_time is not None:
            _setter("start_time", start_time)
        if state_message is not None:
            _setter("state_message", state_message)
        if terminate_time is not None:
            _setter("terminate_time", terminate_time)
        if termination_reason is not None:
            _setter("termination_reason", termination_reason)

    @property
    @pulumi.getter(name="defaultTags")
    def default_tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "default_tags")

    @property
    @pulumi.getter(name="driverInstancePoolId")
    def driver_instance_pool_id(self) -> str:
        """
        similar to `instance_pool_id`, but for driver node.
        """
        return pulumi.get(self, "driver_instance_pool_id")

    @property
    @pulumi.getter(name="sparkVersion")
    def spark_version(self) -> str:
        """
        [Runtime version](https://docs.databricks.com/runtime/index.html) of the cluster.
        """
        return pulumi.get(self, "spark_version")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def autoscale(self) -> Optional['outputs.GetClusterClusterInfoAutoscaleResult']:
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="autoterminationMinutes")
    def autotermination_minutes(self) -> Optional[int]:
        """
        Automatically terminate the cluster after being inactive for this time in minutes. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination.
        """
        return pulumi.get(self, "autotermination_minutes")

    @property
    @pulumi.getter(name="awsAttributes")
    def aws_attributes(self) -> Optional['outputs.GetClusterClusterInfoAwsAttributesResult']:
        return pulumi.get(self, "aws_attributes")

    @property
    @pulumi.getter(name="azureAttributes")
    def azure_attributes(self) -> Optional['outputs.GetClusterClusterInfoAzureAttributesResult']:
        return pulumi.get(self, "azure_attributes")

    @property
    @pulumi.getter(name="clusterCores")
    def cluster_cores(self) -> Optional[float]:
        return pulumi.get(self, "cluster_cores")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        The id of the cluster
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterLogConf")
    def cluster_log_conf(self) -> Optional['outputs.GetClusterClusterInfoClusterLogConfResult']:
        return pulumi.get(self, "cluster_log_conf")

    @property
    @pulumi.getter(name="clusterLogStatus")
    def cluster_log_status(self) -> Optional['outputs.GetClusterClusterInfoClusterLogStatusResult']:
        return pulumi.get(self, "cluster_log_status")

    @property
    @pulumi.getter(name="clusterMemoryMb")
    def cluster_memory_mb(self) -> Optional[int]:
        return pulumi.get(self, "cluster_memory_mb")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        The exact name of the cluster to search
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterSource")
    def cluster_source(self) -> Optional[str]:
        return pulumi.get(self, "cluster_source")

    @property
    @pulumi.getter(name="creatorUserName")
    def creator_user_name(self) -> Optional[str]:
        return pulumi.get(self, "creator_user_name")

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, Any]]:
        """
        Additional tags for cluster resources.
        """
        return pulumi.get(self, "custom_tags")

    @property
    @pulumi.getter(name="dataSecurityMode")
    def data_security_mode(self) -> Optional[str]:
        """
        Security features of the cluster. Unity Catalog requires `SINGLE_USER` or `USER_ISOLATION` mode. `LEGACY_PASSTHROUGH` for passthrough cluster and `LEGACY_TABLE_ACL` for Table ACL cluster. Default to `NONE`, i.e. no security feature enabled.
        """
        return pulumi.get(self, "data_security_mode")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional['outputs.GetClusterClusterInfoDockerImageResult']:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter
    def driver(self) -> Optional['outputs.GetClusterClusterInfoDriverResult']:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="driverNodeTypeId")
    def driver_node_type_id(self) -> Optional[str]:
        """
        The node type of the Spark driver.
        """
        return pulumi.get(self, "driver_node_type_id")

    @property
    @pulumi.getter(name="enableElasticDisk")
    def enable_elastic_disk(self) -> Optional[bool]:
        """
        Use autoscaling local storage.
        """
        return pulumi.get(self, "enable_elastic_disk")

    @property
    @pulumi.getter(name="enableLocalDiskEncryption")
    def enable_local_disk_encryption(self) -> Optional[bool]:
        """
        Enable local disk encryption.
        """
        return pulumi.get(self, "enable_local_disk_encryption")

    @property
    @pulumi.getter
    def executors(self) -> Optional[Sequence['outputs.GetClusterClusterInfoExecutorResult']]:
        return pulumi.get(self, "executors")

    @property
    @pulumi.getter(name="gcpAttributes")
    def gcp_attributes(self) -> Optional['outputs.GetClusterClusterInfoGcpAttributesResult']:
        return pulumi.get(self, "gcp_attributes")

    @property
    @pulumi.getter(name="initScripts")
    def init_scripts(self) -> Optional[Sequence['outputs.GetClusterClusterInfoInitScriptResult']]:
        return pulumi.get(self, "init_scripts")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        """
        The pool of idle instances the cluster is attached to.
        """
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="jdbcPort")
    def jdbc_port(self) -> Optional[int]:
        return pulumi.get(self, "jdbc_port")

    @property
    @pulumi.getter(name="lastActivityTime")
    def last_activity_time(self) -> Optional[int]:
        return pulumi.get(self, "last_activity_time")

    @property
    @pulumi.getter(name="lastStateLossTime")
    def last_state_loss_time(self) -> Optional[int]:
        return pulumi.get(self, "last_state_loss_time")

    @property
    @pulumi.getter(name="nodeTypeId")
    def node_type_id(self) -> Optional[str]:
        """
        Any supported get_node_type id.
        """
        return pulumi.get(self, "node_type_id")

    @property
    @pulumi.getter(name="numWorkers")
    def num_workers(self) -> Optional[int]:
        return pulumi.get(self, "num_workers")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        """
        Identifier of Cluster Policy to validate cluster and preset certain defaults.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="runtimeEngine")
    def runtime_engine(self) -> Optional[str]:
        """
        The type of runtime of the cluster
        """
        return pulumi.get(self, "runtime_engine")

    @property
    @pulumi.getter(name="singleUserName")
    def single_user_name(self) -> Optional[str]:
        """
        The optional user name of the user to assign to an interactive cluster. This field is required when using standard AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
        """
        return pulumi.get(self, "single_user_name")

    @property
    @pulumi.getter(name="sparkConf")
    def spark_conf(self) -> Optional[Mapping[str, Any]]:
        """
        Map with key-value pairs to fine-tune Spark clusters.
        """
        return pulumi.get(self, "spark_conf")

    @property
    @pulumi.getter(name="sparkContextId")
    def spark_context_id(self) -> Optional[int]:
        return pulumi.get(self, "spark_context_id")

    @property
    @pulumi.getter(name="sparkEnvVars")
    def spark_env_vars(self) -> Optional[Mapping[str, Any]]:
        """
        Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
        """
        return pulumi.get(self, "spark_env_vars")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[Sequence[str]]:
        """
        SSH public key contents that will be added to each Spark node in this cluster.
        """
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> Optional[str]:
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="terminateTime")
    def terminate_time(self) -> Optional[int]:
        return pulumi.get(self, "terminate_time")

    @property
    @pulumi.getter(name="terminationReason")
    def termination_reason(self) -> Optional['outputs.GetClusterClusterInfoTerminationReasonResult']:
        return pulumi.get(self, "termination_reason")


@pulumi.output_type
class GetClusterClusterInfoAutoscaleResult(dict):
    def __init__(__self__, *,
                 max_workers: Optional[int] = None,
                 min_workers: Optional[int] = None):
        GetClusterClusterInfoAutoscaleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_workers=max_workers,
            min_workers=min_workers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_workers: Optional[int] = None,
             min_workers: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxWorkers' in kwargs:
            max_workers = kwargs['maxWorkers']
        if 'minWorkers' in kwargs:
            min_workers = kwargs['minWorkers']

        if max_workers is not None:
            _setter("max_workers", max_workers)
        if min_workers is not None:
            _setter("min_workers", min_workers)

    @property
    @pulumi.getter(name="maxWorkers")
    def max_workers(self) -> Optional[int]:
        return pulumi.get(self, "max_workers")

    @property
    @pulumi.getter(name="minWorkers")
    def min_workers(self) -> Optional[int]:
        return pulumi.get(self, "min_workers")


@pulumi.output_type
class GetClusterClusterInfoAwsAttributesResult(dict):
    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 ebs_volume_count: Optional[int] = None,
                 ebs_volume_size: Optional[int] = None,
                 ebs_volume_type: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 instance_profile_arn: Optional[str] = None,
                 spot_bid_price_percent: Optional[int] = None,
                 zone_id: Optional[str] = None):
        GetClusterClusterInfoAwsAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            ebs_volume_count=ebs_volume_count,
            ebs_volume_size=ebs_volume_size,
            ebs_volume_type=ebs_volume_type,
            first_on_demand=first_on_demand,
            instance_profile_arn=instance_profile_arn,
            spot_bid_price_percent=spot_bid_price_percent,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             ebs_volume_count: Optional[int] = None,
             ebs_volume_size: Optional[int] = None,
             ebs_volume_type: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             instance_profile_arn: Optional[str] = None,
             spot_bid_price_percent: Optional[int] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ebsVolumeCount' in kwargs:
            ebs_volume_count = kwargs['ebsVolumeCount']
        if 'ebsVolumeSize' in kwargs:
            ebs_volume_size = kwargs['ebsVolumeSize']
        if 'ebsVolumeType' in kwargs:
            ebs_volume_type = kwargs['ebsVolumeType']
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'instanceProfileArn' in kwargs:
            instance_profile_arn = kwargs['instanceProfileArn']
        if 'spotBidPricePercent' in kwargs:
            spot_bid_price_percent = kwargs['spotBidPricePercent']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if ebs_volume_count is not None:
            _setter("ebs_volume_count", ebs_volume_count)
        if ebs_volume_size is not None:
            _setter("ebs_volume_size", ebs_volume_size)
        if ebs_volume_type is not None:
            _setter("ebs_volume_type", ebs_volume_type)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if instance_profile_arn is not None:
            _setter("instance_profile_arn", instance_profile_arn)
        if spot_bid_price_percent is not None:
            _setter("spot_bid_price_percent", spot_bid_price_percent)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="ebsVolumeCount")
    def ebs_volume_count(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_count")

    @property
    @pulumi.getter(name="ebsVolumeSize")
    def ebs_volume_size(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_size")

    @property
    @pulumi.getter(name="ebsVolumeType")
    def ebs_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "ebs_volume_type")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[str]:
        return pulumi.get(self, "instance_profile_arn")

    @property
    @pulumi.getter(name="spotBidPricePercent")
    def spot_bid_price_percent(self) -> Optional[int]:
        return pulumi.get(self, "spot_bid_price_percent")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetClusterClusterInfoAzureAttributesResult(dict):
    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 spot_bid_max_price: Optional[float] = None):
        GetClusterClusterInfoAzureAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            first_on_demand=first_on_demand,
            spot_bid_max_price=spot_bid_max_price,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             spot_bid_max_price: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'spotBidMaxPrice' in kwargs:
            spot_bid_max_price = kwargs['spotBidMaxPrice']

        if availability is not None:
            _setter("availability", availability)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if spot_bid_max_price is not None:
            _setter("spot_bid_max_price", spot_bid_max_price)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="spotBidMaxPrice")
    def spot_bid_max_price(self) -> Optional[float]:
        return pulumi.get(self, "spot_bid_max_price")


@pulumi.output_type
class GetClusterClusterInfoClusterLogConfResult(dict):
    def __init__(__self__, *,
                 dbfs: Optional['outputs.GetClusterClusterInfoClusterLogConfDbfsResult'] = None,
                 s3: Optional['outputs.GetClusterClusterInfoClusterLogConfS3Result'] = None):
        GetClusterClusterInfoClusterLogConfResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dbfs=dbfs,
            s3=s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dbfs: Optional['outputs.GetClusterClusterInfoClusterLogConfDbfsResult'] = None,
             s3: Optional['outputs.GetClusterClusterInfoClusterLogConfS3Result'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if dbfs is not None:
            _setter("dbfs", dbfs)
        if s3 is not None:
            _setter("s3", s3)

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.GetClusterClusterInfoClusterLogConfDbfsResult']:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.GetClusterClusterInfoClusterLogConfS3Result']:
        return pulumi.get(self, "s3")


@pulumi.output_type
class GetClusterClusterInfoClusterLogConfDbfsResult(dict):
    def __init__(__self__, *,
                 destination: str):
        GetClusterClusterInfoClusterLogConfDbfsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetClusterClusterInfoClusterLogConfS3Result(dict):
    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        GetClusterClusterInfoClusterLogConfS3Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetClusterClusterInfoClusterLogStatusResult(dict):
    def __init__(__self__, *,
                 last_attempted: Optional[int] = None,
                 last_exception: Optional[str] = None):
        GetClusterClusterInfoClusterLogStatusResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            last_attempted=last_attempted,
            last_exception=last_exception,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             last_attempted: Optional[int] = None,
             last_exception: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'lastAttempted' in kwargs:
            last_attempted = kwargs['lastAttempted']
        if 'lastException' in kwargs:
            last_exception = kwargs['lastException']

        if last_attempted is not None:
            _setter("last_attempted", last_attempted)
        if last_exception is not None:
            _setter("last_exception", last_exception)

    @property
    @pulumi.getter(name="lastAttempted")
    def last_attempted(self) -> Optional[int]:
        return pulumi.get(self, "last_attempted")

    @property
    @pulumi.getter(name="lastException")
    def last_exception(self) -> Optional[str]:
        return pulumi.get(self, "last_exception")


@pulumi.output_type
class GetClusterClusterInfoDockerImageResult(dict):
    def __init__(__self__, *,
                 url: str,
                 basic_auth: Optional['outputs.GetClusterClusterInfoDockerImageBasicAuthResult'] = None):
        GetClusterClusterInfoDockerImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            basic_auth=basic_auth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             basic_auth: Optional['outputs.GetClusterClusterInfoDockerImageBasicAuthResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'basicAuth' in kwargs:
            basic_auth = kwargs['basicAuth']

        _setter("url", url)
        if basic_auth is not None:
            _setter("basic_auth", basic_auth)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.GetClusterClusterInfoDockerImageBasicAuthResult']:
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class GetClusterClusterInfoDockerImageBasicAuthResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        GetClusterClusterInfoDockerImageBasicAuthResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetClusterClusterInfoDriverResult(dict):
    def __init__(__self__, *,
                 host_private_ip: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 node_aws_attributes: Optional['outputs.GetClusterClusterInfoDriverNodeAwsAttributesResult'] = None,
                 node_id: Optional[str] = None,
                 private_ip: Optional[str] = None,
                 public_dns: Optional[str] = None,
                 start_timestamp: Optional[int] = None):
        GetClusterClusterInfoDriverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_private_ip=host_private_ip,
            instance_id=instance_id,
            node_aws_attributes=node_aws_attributes,
            node_id=node_id,
            private_ip=private_ip,
            public_dns=public_dns,
            start_timestamp=start_timestamp,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_private_ip: Optional[str] = None,
             instance_id: Optional[str] = None,
             node_aws_attributes: Optional['outputs.GetClusterClusterInfoDriverNodeAwsAttributesResult'] = None,
             node_id: Optional[str] = None,
             private_ip: Optional[str] = None,
             public_dns: Optional[str] = None,
             start_timestamp: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostPrivateIp' in kwargs:
            host_private_ip = kwargs['hostPrivateIp']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'nodeAwsAttributes' in kwargs:
            node_aws_attributes = kwargs['nodeAwsAttributes']
        if 'nodeId' in kwargs:
            node_id = kwargs['nodeId']
        if 'privateIp' in kwargs:
            private_ip = kwargs['privateIp']
        if 'publicDns' in kwargs:
            public_dns = kwargs['publicDns']
        if 'startTimestamp' in kwargs:
            start_timestamp = kwargs['startTimestamp']

        if host_private_ip is not None:
            _setter("host_private_ip", host_private_ip)
        if instance_id is not None:
            _setter("instance_id", instance_id)
        if node_aws_attributes is not None:
            _setter("node_aws_attributes", node_aws_attributes)
        if node_id is not None:
            _setter("node_id", node_id)
        if private_ip is not None:
            _setter("private_ip", private_ip)
        if public_dns is not None:
            _setter("public_dns", public_dns)
        if start_timestamp is not None:
            _setter("start_timestamp", start_timestamp)

    @property
    @pulumi.getter(name="hostPrivateIp")
    def host_private_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_private_ip")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="nodeAwsAttributes")
    def node_aws_attributes(self) -> Optional['outputs.GetClusterClusterInfoDriverNodeAwsAttributesResult']:
        return pulumi.get(self, "node_aws_attributes")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[str]:
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicDns")
    def public_dns(self) -> Optional[str]:
        return pulumi.get(self, "public_dns")

    @property
    @pulumi.getter(name="startTimestamp")
    def start_timestamp(self) -> Optional[int]:
        return pulumi.get(self, "start_timestamp")


@pulumi.output_type
class GetClusterClusterInfoDriverNodeAwsAttributesResult(dict):
    def __init__(__self__, *,
                 is_spot: Optional[bool] = None):
        GetClusterClusterInfoDriverNodeAwsAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_spot=is_spot,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_spot: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isSpot' in kwargs:
            is_spot = kwargs['isSpot']

        if is_spot is not None:
            _setter("is_spot", is_spot)

    @property
    @pulumi.getter(name="isSpot")
    def is_spot(self) -> Optional[bool]:
        return pulumi.get(self, "is_spot")


@pulumi.output_type
class GetClusterClusterInfoExecutorResult(dict):
    def __init__(__self__, *,
                 host_private_ip: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 node_aws_attributes: Optional['outputs.GetClusterClusterInfoExecutorNodeAwsAttributesResult'] = None,
                 node_id: Optional[str] = None,
                 private_ip: Optional[str] = None,
                 public_dns: Optional[str] = None,
                 start_timestamp: Optional[int] = None):
        GetClusterClusterInfoExecutorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_private_ip=host_private_ip,
            instance_id=instance_id,
            node_aws_attributes=node_aws_attributes,
            node_id=node_id,
            private_ip=private_ip,
            public_dns=public_dns,
            start_timestamp=start_timestamp,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_private_ip: Optional[str] = None,
             instance_id: Optional[str] = None,
             node_aws_attributes: Optional['outputs.GetClusterClusterInfoExecutorNodeAwsAttributesResult'] = None,
             node_id: Optional[str] = None,
             private_ip: Optional[str] = None,
             public_dns: Optional[str] = None,
             start_timestamp: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostPrivateIp' in kwargs:
            host_private_ip = kwargs['hostPrivateIp']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'nodeAwsAttributes' in kwargs:
            node_aws_attributes = kwargs['nodeAwsAttributes']
        if 'nodeId' in kwargs:
            node_id = kwargs['nodeId']
        if 'privateIp' in kwargs:
            private_ip = kwargs['privateIp']
        if 'publicDns' in kwargs:
            public_dns = kwargs['publicDns']
        if 'startTimestamp' in kwargs:
            start_timestamp = kwargs['startTimestamp']

        if host_private_ip is not None:
            _setter("host_private_ip", host_private_ip)
        if instance_id is not None:
            _setter("instance_id", instance_id)
        if node_aws_attributes is not None:
            _setter("node_aws_attributes", node_aws_attributes)
        if node_id is not None:
            _setter("node_id", node_id)
        if private_ip is not None:
            _setter("private_ip", private_ip)
        if public_dns is not None:
            _setter("public_dns", public_dns)
        if start_timestamp is not None:
            _setter("start_timestamp", start_timestamp)

    @property
    @pulumi.getter(name="hostPrivateIp")
    def host_private_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_private_ip")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="nodeAwsAttributes")
    def node_aws_attributes(self) -> Optional['outputs.GetClusterClusterInfoExecutorNodeAwsAttributesResult']:
        return pulumi.get(self, "node_aws_attributes")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[str]:
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicDns")
    def public_dns(self) -> Optional[str]:
        return pulumi.get(self, "public_dns")

    @property
    @pulumi.getter(name="startTimestamp")
    def start_timestamp(self) -> Optional[int]:
        return pulumi.get(self, "start_timestamp")


@pulumi.output_type
class GetClusterClusterInfoExecutorNodeAwsAttributesResult(dict):
    def __init__(__self__, *,
                 is_spot: Optional[bool] = None):
        GetClusterClusterInfoExecutorNodeAwsAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_spot=is_spot,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_spot: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isSpot' in kwargs:
            is_spot = kwargs['isSpot']

        if is_spot is not None:
            _setter("is_spot", is_spot)

    @property
    @pulumi.getter(name="isSpot")
    def is_spot(self) -> Optional[bool]:
        return pulumi.get(self, "is_spot")


@pulumi.output_type
class GetClusterClusterInfoGcpAttributesResult(dict):
    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 boot_disk_size: Optional[int] = None,
                 google_service_account: Optional[str] = None,
                 local_ssd_count: Optional[int] = None,
                 use_preemptible_executors: Optional[bool] = None,
                 zone_id: Optional[str] = None):
        GetClusterClusterInfoGcpAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            boot_disk_size=boot_disk_size,
            google_service_account=google_service_account,
            local_ssd_count=local_ssd_count,
            use_preemptible_executors=use_preemptible_executors,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             boot_disk_size: Optional[int] = None,
             google_service_account: Optional[str] = None,
             local_ssd_count: Optional[int] = None,
             use_preemptible_executors: Optional[bool] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bootDiskSize' in kwargs:
            boot_disk_size = kwargs['bootDiskSize']
        if 'googleServiceAccount' in kwargs:
            google_service_account = kwargs['googleServiceAccount']
        if 'localSsdCount' in kwargs:
            local_ssd_count = kwargs['localSsdCount']
        if 'usePreemptibleExecutors' in kwargs:
            use_preemptible_executors = kwargs['usePreemptibleExecutors']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if boot_disk_size is not None:
            _setter("boot_disk_size", boot_disk_size)
        if google_service_account is not None:
            _setter("google_service_account", google_service_account)
        if local_ssd_count is not None:
            _setter("local_ssd_count", local_ssd_count)
        if use_preemptible_executors is not None:
            _setter("use_preemptible_executors", use_preemptible_executors)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[int]:
        return pulumi.get(self, "boot_disk_size")

    @property
    @pulumi.getter(name="googleServiceAccount")
    def google_service_account(self) -> Optional[str]:
        return pulumi.get(self, "google_service_account")

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[int]:
        return pulumi.get(self, "local_ssd_count")

    @property
    @pulumi.getter(name="usePreemptibleExecutors")
    def use_preemptible_executors(self) -> Optional[bool]:
        return pulumi.get(self, "use_preemptible_executors")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetClusterClusterInfoInitScriptResult(dict):
    def __init__(__self__, *,
                 abfss: Optional['outputs.GetClusterClusterInfoInitScriptAbfssResult'] = None,
                 dbfs: Optional['outputs.GetClusterClusterInfoInitScriptDbfsResult'] = None,
                 file: Optional['outputs.GetClusterClusterInfoInitScriptFileResult'] = None,
                 gcs: Optional['outputs.GetClusterClusterInfoInitScriptGcsResult'] = None,
                 s3: Optional['outputs.GetClusterClusterInfoInitScriptS3Result'] = None,
                 volumes: Optional['outputs.GetClusterClusterInfoInitScriptVolumesResult'] = None,
                 workspace: Optional['outputs.GetClusterClusterInfoInitScriptWorkspaceResult'] = None):
        GetClusterClusterInfoInitScriptResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abfss=abfss,
            dbfs=dbfs,
            file=file,
            gcs=gcs,
            s3=s3,
            volumes=volumes,
            workspace=workspace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abfss: Optional['outputs.GetClusterClusterInfoInitScriptAbfssResult'] = None,
             dbfs: Optional['outputs.GetClusterClusterInfoInitScriptDbfsResult'] = None,
             file: Optional['outputs.GetClusterClusterInfoInitScriptFileResult'] = None,
             gcs: Optional['outputs.GetClusterClusterInfoInitScriptGcsResult'] = None,
             s3: Optional['outputs.GetClusterClusterInfoInitScriptS3Result'] = None,
             volumes: Optional['outputs.GetClusterClusterInfoInitScriptVolumesResult'] = None,
             workspace: Optional['outputs.GetClusterClusterInfoInitScriptWorkspaceResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if abfss is not None:
            _setter("abfss", abfss)
        if dbfs is not None:
            _setter("dbfs", dbfs)
        if file is not None:
            _setter("file", file)
        if gcs is not None:
            _setter("gcs", gcs)
        if s3 is not None:
            _setter("s3", s3)
        if volumes is not None:
            _setter("volumes", volumes)
        if workspace is not None:
            _setter("workspace", workspace)

    @property
    @pulumi.getter
    def abfss(self) -> Optional['outputs.GetClusterClusterInfoInitScriptAbfssResult']:
        return pulumi.get(self, "abfss")

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.GetClusterClusterInfoInitScriptDbfsResult']:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.GetClusterClusterInfoInitScriptFileResult']:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def gcs(self) -> Optional['outputs.GetClusterClusterInfoInitScriptGcsResult']:
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.GetClusterClusterInfoInitScriptS3Result']:
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter
    def volumes(self) -> Optional['outputs.GetClusterClusterInfoInitScriptVolumesResult']:
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def workspace(self) -> Optional['outputs.GetClusterClusterInfoInitScriptWorkspaceResult']:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class GetClusterClusterInfoInitScriptAbfssResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetClusterClusterInfoInitScriptAbfssResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetClusterClusterInfoInitScriptDbfsResult(dict):
    def __init__(__self__, *,
                 destination: str):
        GetClusterClusterInfoInitScriptDbfsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetClusterClusterInfoInitScriptFileResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetClusterClusterInfoInitScriptFileResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetClusterClusterInfoInitScriptGcsResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetClusterClusterInfoInitScriptGcsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetClusterClusterInfoInitScriptS3Result(dict):
    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        GetClusterClusterInfoInitScriptS3Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetClusterClusterInfoInitScriptVolumesResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetClusterClusterInfoInitScriptVolumesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetClusterClusterInfoInitScriptWorkspaceResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetClusterClusterInfoInitScriptWorkspaceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetClusterClusterInfoTerminationReasonResult(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 parameters: Optional[Mapping[str, Any]] = None,
                 type: Optional[str] = None):
        GetClusterClusterInfoTerminationReasonResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
            parameters=parameters,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[str] = None,
             parameters: Optional[Mapping[str, Any]] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if code is not None:
            _setter("code", code)
        if parameters is not None:
            _setter("parameters", parameters)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDbfsFilePathsPathListResult(dict):
    def __init__(__self__, *,
                 file_size: Optional[int] = None,
                 path: Optional[str] = None):
        """
        :param str path: Path on DBFS for the file to perform listing
        """
        GetDbfsFilePathsPathListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            file_size=file_size,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             file_size: Optional[int] = None,
             path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fileSize' in kwargs:
            file_size = kwargs['fileSize']

        if file_size is not None:
            _setter("file_size", file_size)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> Optional[int]:
        return pulumi.get(self, "file_size")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path on DBFS for the file to perform listing
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetInstancePoolPoolInfoResult(dict):
    def __init__(__self__, *,
                 default_tags: Mapping[str, Any],
                 idle_instance_autotermination_minutes: int,
                 instance_pool_id: str,
                 instance_pool_name: str,
                 aws_attributes: Optional['outputs.GetInstancePoolPoolInfoAwsAttributesResult'] = None,
                 azure_attributes: Optional['outputs.GetInstancePoolPoolInfoAzureAttributesResult'] = None,
                 custom_tags: Optional[Mapping[str, Any]] = None,
                 disk_spec: Optional['outputs.GetInstancePoolPoolInfoDiskSpecResult'] = None,
                 enable_elastic_disk: Optional[bool] = None,
                 gcp_attributes: Optional['outputs.GetInstancePoolPoolInfoGcpAttributesResult'] = None,
                 instance_pool_fleet_attributes: Optional[Sequence['outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeResult']] = None,
                 max_capacity: Optional[int] = None,
                 min_idle_instances: Optional[int] = None,
                 node_type_id: Optional[str] = None,
                 preloaded_docker_images: Optional[Sequence['outputs.GetInstancePoolPoolInfoPreloadedDockerImageResult']] = None,
                 preloaded_spark_versions: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 stats: Optional['outputs.GetInstancePoolPoolInfoStatsResult'] = None):
        GetInstancePoolPoolInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_tags=default_tags,
            idle_instance_autotermination_minutes=idle_instance_autotermination_minutes,
            instance_pool_id=instance_pool_id,
            instance_pool_name=instance_pool_name,
            aws_attributes=aws_attributes,
            azure_attributes=azure_attributes,
            custom_tags=custom_tags,
            disk_spec=disk_spec,
            enable_elastic_disk=enable_elastic_disk,
            gcp_attributes=gcp_attributes,
            instance_pool_fleet_attributes=instance_pool_fleet_attributes,
            max_capacity=max_capacity,
            min_idle_instances=min_idle_instances,
            node_type_id=node_type_id,
            preloaded_docker_images=preloaded_docker_images,
            preloaded_spark_versions=preloaded_spark_versions,
            state=state,
            stats=stats,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_tags: Mapping[str, Any],
             idle_instance_autotermination_minutes: int,
             instance_pool_id: str,
             instance_pool_name: str,
             aws_attributes: Optional['outputs.GetInstancePoolPoolInfoAwsAttributesResult'] = None,
             azure_attributes: Optional['outputs.GetInstancePoolPoolInfoAzureAttributesResult'] = None,
             custom_tags: Optional[Mapping[str, Any]] = None,
             disk_spec: Optional['outputs.GetInstancePoolPoolInfoDiskSpecResult'] = None,
             enable_elastic_disk: Optional[bool] = None,
             gcp_attributes: Optional['outputs.GetInstancePoolPoolInfoGcpAttributesResult'] = None,
             instance_pool_fleet_attributes: Optional[Sequence['outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeResult']] = None,
             max_capacity: Optional[int] = None,
             min_idle_instances: Optional[int] = None,
             node_type_id: Optional[str] = None,
             preloaded_docker_images: Optional[Sequence['outputs.GetInstancePoolPoolInfoPreloadedDockerImageResult']] = None,
             preloaded_spark_versions: Optional[Sequence[str]] = None,
             state: Optional[str] = None,
             stats: Optional['outputs.GetInstancePoolPoolInfoStatsResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultTags' in kwargs:
            default_tags = kwargs['defaultTags']
        if 'idleInstanceAutoterminationMinutes' in kwargs:
            idle_instance_autotermination_minutes = kwargs['idleInstanceAutoterminationMinutes']
        if 'instancePoolId' in kwargs:
            instance_pool_id = kwargs['instancePoolId']
        if 'instancePoolName' in kwargs:
            instance_pool_name = kwargs['instancePoolName']
        if 'awsAttributes' in kwargs:
            aws_attributes = kwargs['awsAttributes']
        if 'azureAttributes' in kwargs:
            azure_attributes = kwargs['azureAttributes']
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']
        if 'diskSpec' in kwargs:
            disk_spec = kwargs['diskSpec']
        if 'enableElasticDisk' in kwargs:
            enable_elastic_disk = kwargs['enableElasticDisk']
        if 'gcpAttributes' in kwargs:
            gcp_attributes = kwargs['gcpAttributes']
        if 'instancePoolFleetAttributes' in kwargs:
            instance_pool_fleet_attributes = kwargs['instancePoolFleetAttributes']
        if 'maxCapacity' in kwargs:
            max_capacity = kwargs['maxCapacity']
        if 'minIdleInstances' in kwargs:
            min_idle_instances = kwargs['minIdleInstances']
        if 'nodeTypeId' in kwargs:
            node_type_id = kwargs['nodeTypeId']
        if 'preloadedDockerImages' in kwargs:
            preloaded_docker_images = kwargs['preloadedDockerImages']
        if 'preloadedSparkVersions' in kwargs:
            preloaded_spark_versions = kwargs['preloadedSparkVersions']

        _setter("default_tags", default_tags)
        _setter("idle_instance_autotermination_minutes", idle_instance_autotermination_minutes)
        _setter("instance_pool_id", instance_pool_id)
        _setter("instance_pool_name", instance_pool_name)
        if aws_attributes is not None:
            _setter("aws_attributes", aws_attributes)
        if azure_attributes is not None:
            _setter("azure_attributes", azure_attributes)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)
        if disk_spec is not None:
            _setter("disk_spec", disk_spec)
        if enable_elastic_disk is not None:
            _setter("enable_elastic_disk", enable_elastic_disk)
        if gcp_attributes is not None:
            _setter("gcp_attributes", gcp_attributes)
        if instance_pool_fleet_attributes is not None:
            _setter("instance_pool_fleet_attributes", instance_pool_fleet_attributes)
        if max_capacity is not None:
            _setter("max_capacity", max_capacity)
        if min_idle_instances is not None:
            _setter("min_idle_instances", min_idle_instances)
        if node_type_id is not None:
            _setter("node_type_id", node_type_id)
        if preloaded_docker_images is not None:
            _setter("preloaded_docker_images", preloaded_docker_images)
        if preloaded_spark_versions is not None:
            _setter("preloaded_spark_versions", preloaded_spark_versions)
        if state is not None:
            _setter("state", state)
        if stats is not None:
            _setter("stats", stats)

    @property
    @pulumi.getter(name="defaultTags")
    def default_tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "default_tags")

    @property
    @pulumi.getter(name="idleInstanceAutoterminationMinutes")
    def idle_instance_autotermination_minutes(self) -> int:
        return pulumi.get(self, "idle_instance_autotermination_minutes")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> str:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="instancePoolName")
    def instance_pool_name(self) -> str:
        return pulumi.get(self, "instance_pool_name")

    @property
    @pulumi.getter(name="awsAttributes")
    def aws_attributes(self) -> Optional['outputs.GetInstancePoolPoolInfoAwsAttributesResult']:
        return pulumi.get(self, "aws_attributes")

    @property
    @pulumi.getter(name="azureAttributes")
    def azure_attributes(self) -> Optional['outputs.GetInstancePoolPoolInfoAzureAttributesResult']:
        return pulumi.get(self, "azure_attributes")

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_tags")

    @property
    @pulumi.getter(name="diskSpec")
    def disk_spec(self) -> Optional['outputs.GetInstancePoolPoolInfoDiskSpecResult']:
        return pulumi.get(self, "disk_spec")

    @property
    @pulumi.getter(name="enableElasticDisk")
    def enable_elastic_disk(self) -> Optional[bool]:
        return pulumi.get(self, "enable_elastic_disk")

    @property
    @pulumi.getter(name="gcpAttributes")
    def gcp_attributes(self) -> Optional['outputs.GetInstancePoolPoolInfoGcpAttributesResult']:
        return pulumi.get(self, "gcp_attributes")

    @property
    @pulumi.getter(name="instancePoolFleetAttributes")
    def instance_pool_fleet_attributes(self) -> Optional[Sequence['outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeResult']]:
        return pulumi.get(self, "instance_pool_fleet_attributes")

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> Optional[int]:
        return pulumi.get(self, "max_capacity")

    @property
    @pulumi.getter(name="minIdleInstances")
    def min_idle_instances(self) -> Optional[int]:
        return pulumi.get(self, "min_idle_instances")

    @property
    @pulumi.getter(name="nodeTypeId")
    def node_type_id(self) -> Optional[str]:
        return pulumi.get(self, "node_type_id")

    @property
    @pulumi.getter(name="preloadedDockerImages")
    def preloaded_docker_images(self) -> Optional[Sequence['outputs.GetInstancePoolPoolInfoPreloadedDockerImageResult']]:
        return pulumi.get(self, "preloaded_docker_images")

    @property
    @pulumi.getter(name="preloadedSparkVersions")
    def preloaded_spark_versions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "preloaded_spark_versions")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def stats(self) -> Optional['outputs.GetInstancePoolPoolInfoStatsResult']:
        return pulumi.get(self, "stats")


@pulumi.output_type
class GetInstancePoolPoolInfoAwsAttributesResult(dict):
    def __init__(__self__, *,
                 zone_id: str,
                 availability: Optional[str] = None,
                 spot_bid_price_percent: Optional[int] = None):
        GetInstancePoolPoolInfoAwsAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            zone_id=zone_id,
            availability=availability,
            spot_bid_price_percent=spot_bid_price_percent,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             zone_id: str,
             availability: Optional[str] = None,
             spot_bid_price_percent: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']
        if 'spotBidPricePercent' in kwargs:
            spot_bid_price_percent = kwargs['spotBidPricePercent']

        _setter("zone_id", zone_id)
        if availability is not None:
            _setter("availability", availability)
        if spot_bid_price_percent is not None:
            _setter("spot_bid_price_percent", spot_bid_price_percent)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="spotBidPricePercent")
    def spot_bid_price_percent(self) -> Optional[int]:
        return pulumi.get(self, "spot_bid_price_percent")


@pulumi.output_type
class GetInstancePoolPoolInfoAzureAttributesResult(dict):
    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 spot_bid_max_price: Optional[float] = None):
        GetInstancePoolPoolInfoAzureAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            spot_bid_max_price=spot_bid_max_price,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             spot_bid_max_price: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'spotBidMaxPrice' in kwargs:
            spot_bid_max_price = kwargs['spotBidMaxPrice']

        if availability is not None:
            _setter("availability", availability)
        if spot_bid_max_price is not None:
            _setter("spot_bid_max_price", spot_bid_max_price)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="spotBidMaxPrice")
    def spot_bid_max_price(self) -> Optional[float]:
        return pulumi.get(self, "spot_bid_max_price")


@pulumi.output_type
class GetInstancePoolPoolInfoDiskSpecResult(dict):
    def __init__(__self__, *,
                 disk_count: Optional[int] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional['outputs.GetInstancePoolPoolInfoDiskSpecDiskTypeResult'] = None):
        GetInstancePoolPoolInfoDiskSpecResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_count=disk_count,
            disk_size=disk_size,
            disk_type=disk_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_count: Optional[int] = None,
             disk_size: Optional[int] = None,
             disk_type: Optional['outputs.GetInstancePoolPoolInfoDiskSpecDiskTypeResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'diskCount' in kwargs:
            disk_count = kwargs['diskCount']
        if 'diskSize' in kwargs:
            disk_size = kwargs['diskSize']
        if 'diskType' in kwargs:
            disk_type = kwargs['diskType']

        if disk_count is not None:
            _setter("disk_count", disk_count)
        if disk_size is not None:
            _setter("disk_size", disk_size)
        if disk_type is not None:
            _setter("disk_type", disk_type)

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> Optional[int]:
        return pulumi.get(self, "disk_count")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional['outputs.GetInstancePoolPoolInfoDiskSpecDiskTypeResult']:
        return pulumi.get(self, "disk_type")


@pulumi.output_type
class GetInstancePoolPoolInfoDiskSpecDiskTypeResult(dict):
    def __init__(__self__, *,
                 azure_disk_volume_type: Optional[str] = None,
                 ebs_volume_type: Optional[str] = None):
        GetInstancePoolPoolInfoDiskSpecDiskTypeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            azure_disk_volume_type=azure_disk_volume_type,
            ebs_volume_type=ebs_volume_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             azure_disk_volume_type: Optional[str] = None,
             ebs_volume_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'azureDiskVolumeType' in kwargs:
            azure_disk_volume_type = kwargs['azureDiskVolumeType']
        if 'ebsVolumeType' in kwargs:
            ebs_volume_type = kwargs['ebsVolumeType']

        if azure_disk_volume_type is not None:
            _setter("azure_disk_volume_type", azure_disk_volume_type)
        if ebs_volume_type is not None:
            _setter("ebs_volume_type", ebs_volume_type)

    @property
    @pulumi.getter(name="azureDiskVolumeType")
    def azure_disk_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "azure_disk_volume_type")

    @property
    @pulumi.getter(name="ebsVolumeType")
    def ebs_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "ebs_volume_type")


@pulumi.output_type
class GetInstancePoolPoolInfoGcpAttributesResult(dict):
    def __init__(__self__, *,
                 gcp_availability: Optional[str] = None,
                 local_ssd_count: Optional[int] = None):
        GetInstancePoolPoolInfoGcpAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gcp_availability=gcp_availability,
            local_ssd_count=local_ssd_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gcp_availability: Optional[str] = None,
             local_ssd_count: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'gcpAvailability' in kwargs:
            gcp_availability = kwargs['gcpAvailability']
        if 'localSsdCount' in kwargs:
            local_ssd_count = kwargs['localSsdCount']

        if gcp_availability is not None:
            _setter("gcp_availability", gcp_availability)
        if local_ssd_count is not None:
            _setter("local_ssd_count", local_ssd_count)

    @property
    @pulumi.getter(name="gcpAvailability")
    def gcp_availability(self) -> Optional[str]:
        return pulumi.get(self, "gcp_availability")

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[int]:
        return pulumi.get(self, "local_ssd_count")


@pulumi.output_type
class GetInstancePoolPoolInfoInstancePoolFleetAttributeResult(dict):
    def __init__(__self__, *,
                 launch_template_overrides: Sequence['outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverrideResult'],
                 fleet_on_demand_option: Optional['outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOptionResult'] = None,
                 fleet_spot_option: Optional['outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOptionResult'] = None):
        GetInstancePoolPoolInfoInstancePoolFleetAttributeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            launch_template_overrides=launch_template_overrides,
            fleet_on_demand_option=fleet_on_demand_option,
            fleet_spot_option=fleet_spot_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             launch_template_overrides: Sequence['outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverrideResult'],
             fleet_on_demand_option: Optional['outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOptionResult'] = None,
             fleet_spot_option: Optional['outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOptionResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'launchTemplateOverrides' in kwargs:
            launch_template_overrides = kwargs['launchTemplateOverrides']
        if 'fleetOnDemandOption' in kwargs:
            fleet_on_demand_option = kwargs['fleetOnDemandOption']
        if 'fleetSpotOption' in kwargs:
            fleet_spot_option = kwargs['fleetSpotOption']

        _setter("launch_template_overrides", launch_template_overrides)
        if fleet_on_demand_option is not None:
            _setter("fleet_on_demand_option", fleet_on_demand_option)
        if fleet_spot_option is not None:
            _setter("fleet_spot_option", fleet_spot_option)

    @property
    @pulumi.getter(name="launchTemplateOverrides")
    def launch_template_overrides(self) -> Sequence['outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverrideResult']:
        return pulumi.get(self, "launch_template_overrides")

    @property
    @pulumi.getter(name="fleetOnDemandOption")
    def fleet_on_demand_option(self) -> Optional['outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOptionResult']:
        return pulumi.get(self, "fleet_on_demand_option")

    @property
    @pulumi.getter(name="fleetSpotOption")
    def fleet_spot_option(self) -> Optional['outputs.GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOptionResult']:
        return pulumi.get(self, "fleet_spot_option")


@pulumi.output_type
class GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOptionResult(dict):
    def __init__(__self__, *,
                 allocation_strategy: str,
                 instance_pools_to_use_count: Optional[int] = None):
        GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetOnDemandOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allocation_strategy=allocation_strategy,
            instance_pools_to_use_count=instance_pools_to_use_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allocation_strategy: str,
             instance_pools_to_use_count: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allocationStrategy' in kwargs:
            allocation_strategy = kwargs['allocationStrategy']
        if 'instancePoolsToUseCount' in kwargs:
            instance_pools_to_use_count = kwargs['instancePoolsToUseCount']

        _setter("allocation_strategy", allocation_strategy)
        if instance_pools_to_use_count is not None:
            _setter("instance_pools_to_use_count", instance_pools_to_use_count)

    @property
    @pulumi.getter(name="allocationStrategy")
    def allocation_strategy(self) -> str:
        return pulumi.get(self, "allocation_strategy")

    @property
    @pulumi.getter(name="instancePoolsToUseCount")
    def instance_pools_to_use_count(self) -> Optional[int]:
        return pulumi.get(self, "instance_pools_to_use_count")


@pulumi.output_type
class GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOptionResult(dict):
    def __init__(__self__, *,
                 allocation_strategy: str,
                 instance_pools_to_use_count: Optional[int] = None):
        GetInstancePoolPoolInfoInstancePoolFleetAttributeFleetSpotOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allocation_strategy=allocation_strategy,
            instance_pools_to_use_count=instance_pools_to_use_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allocation_strategy: str,
             instance_pools_to_use_count: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allocationStrategy' in kwargs:
            allocation_strategy = kwargs['allocationStrategy']
        if 'instancePoolsToUseCount' in kwargs:
            instance_pools_to_use_count = kwargs['instancePoolsToUseCount']

        _setter("allocation_strategy", allocation_strategy)
        if instance_pools_to_use_count is not None:
            _setter("instance_pools_to_use_count", instance_pools_to_use_count)

    @property
    @pulumi.getter(name="allocationStrategy")
    def allocation_strategy(self) -> str:
        return pulumi.get(self, "allocation_strategy")

    @property
    @pulumi.getter(name="instancePoolsToUseCount")
    def instance_pools_to_use_count(self) -> Optional[int]:
        return pulumi.get(self, "instance_pools_to_use_count")


@pulumi.output_type
class GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverrideResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 instance_type: str):
        GetInstancePoolPoolInfoInstancePoolFleetAttributeLaunchTemplateOverrideResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_zone=availability_zone,
            instance_type=instance_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_zone: str,
             instance_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'availabilityZone' in kwargs:
            availability_zone = kwargs['availabilityZone']
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']

        _setter("availability_zone", availability_zone)
        _setter("instance_type", instance_type)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")


@pulumi.output_type
class GetInstancePoolPoolInfoPreloadedDockerImageResult(dict):
    def __init__(__self__, *,
                 url: str,
                 basic_auth: Optional['outputs.GetInstancePoolPoolInfoPreloadedDockerImageBasicAuthResult'] = None):
        GetInstancePoolPoolInfoPreloadedDockerImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            basic_auth=basic_auth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             basic_auth: Optional['outputs.GetInstancePoolPoolInfoPreloadedDockerImageBasicAuthResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'basicAuth' in kwargs:
            basic_auth = kwargs['basicAuth']

        _setter("url", url)
        if basic_auth is not None:
            _setter("basic_auth", basic_auth)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.GetInstancePoolPoolInfoPreloadedDockerImageBasicAuthResult']:
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class GetInstancePoolPoolInfoPreloadedDockerImageBasicAuthResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        GetInstancePoolPoolInfoPreloadedDockerImageBasicAuthResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetInstancePoolPoolInfoStatsResult(dict):
    def __init__(__self__, *,
                 idle_count: Optional[int] = None,
                 pending_idle_count: Optional[int] = None,
                 pending_used_count: Optional[int] = None,
                 used_count: Optional[int] = None):
        GetInstancePoolPoolInfoStatsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            idle_count=idle_count,
            pending_idle_count=pending_idle_count,
            pending_used_count=pending_used_count,
            used_count=used_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             idle_count: Optional[int] = None,
             pending_idle_count: Optional[int] = None,
             pending_used_count: Optional[int] = None,
             used_count: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'idleCount' in kwargs:
            idle_count = kwargs['idleCount']
        if 'pendingIdleCount' in kwargs:
            pending_idle_count = kwargs['pendingIdleCount']
        if 'pendingUsedCount' in kwargs:
            pending_used_count = kwargs['pendingUsedCount']
        if 'usedCount' in kwargs:
            used_count = kwargs['usedCount']

        if idle_count is not None:
            _setter("idle_count", idle_count)
        if pending_idle_count is not None:
            _setter("pending_idle_count", pending_idle_count)
        if pending_used_count is not None:
            _setter("pending_used_count", pending_used_count)
        if used_count is not None:
            _setter("used_count", used_count)

    @property
    @pulumi.getter(name="idleCount")
    def idle_count(self) -> Optional[int]:
        return pulumi.get(self, "idle_count")

    @property
    @pulumi.getter(name="pendingIdleCount")
    def pending_idle_count(self) -> Optional[int]:
        return pulumi.get(self, "pending_idle_count")

    @property
    @pulumi.getter(name="pendingUsedCount")
    def pending_used_count(self) -> Optional[int]:
        return pulumi.get(self, "pending_used_count")

    @property
    @pulumi.getter(name="usedCount")
    def used_count(self) -> Optional[int]:
        return pulumi.get(self, "used_count")


@pulumi.output_type
class GetJobJobSettingsResult(dict):
    def __init__(__self__, *,
                 run_as_user_name: str,
                 created_time: Optional[int] = None,
                 creator_user_name: Optional[str] = None,
                 job_id: Optional[int] = None,
                 settings: Optional['outputs.GetJobJobSettingsSettingsResult'] = None):
        GetJobJobSettingsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            run_as_user_name=run_as_user_name,
            created_time=created_time,
            creator_user_name=creator_user_name,
            job_id=job_id,
            settings=settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             run_as_user_name: str,
             created_time: Optional[int] = None,
             creator_user_name: Optional[str] = None,
             job_id: Optional[int] = None,
             settings: Optional['outputs.GetJobJobSettingsSettingsResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'runAsUserName' in kwargs:
            run_as_user_name = kwargs['runAsUserName']
        if 'createdTime' in kwargs:
            created_time = kwargs['createdTime']
        if 'creatorUserName' in kwargs:
            creator_user_name = kwargs['creatorUserName']
        if 'jobId' in kwargs:
            job_id = kwargs['jobId']

        _setter("run_as_user_name", run_as_user_name)
        if created_time is not None:
            _setter("created_time", created_time)
        if creator_user_name is not None:
            _setter("creator_user_name", creator_user_name)
        if job_id is not None:
            _setter("job_id", job_id)
        if settings is not None:
            _setter("settings", settings)

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> str:
        return pulumi.get(self, "run_as_user_name")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[int]:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="creatorUserName")
    def creator_user_name(self) -> Optional[str]:
        return pulumi.get(self, "creator_user_name")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[int]:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter
    def settings(self) -> Optional['outputs.GetJobJobSettingsSettingsResult']:
        return pulumi.get(self, "settings")


@pulumi.output_type
class GetJobJobSettingsSettingsResult(dict):
    def __init__(__self__, *,
                 format: str,
                 computes: Optional[Sequence['outputs.GetJobJobSettingsSettingsComputeResult']] = None,
                 continuous: Optional['outputs.GetJobJobSettingsSettingsContinuousResult'] = None,
                 dbt_task: Optional['outputs.GetJobJobSettingsSettingsDbtTaskResult'] = None,
                 email_notifications: Optional['outputs.GetJobJobSettingsSettingsEmailNotificationsResult'] = None,
                 existing_cluster_id: Optional[str] = None,
                 git_source: Optional['outputs.GetJobJobSettingsSettingsGitSourceResult'] = None,
                 health: Optional['outputs.GetJobJobSettingsSettingsHealthResult'] = None,
                 job_clusters: Optional[Sequence['outputs.GetJobJobSettingsSettingsJobClusterResult']] = None,
                 libraries: Optional[Sequence['outputs.GetJobJobSettingsSettingsLibraryResult']] = None,
                 max_concurrent_runs: Optional[int] = None,
                 max_retries: Optional[int] = None,
                 min_retry_interval_millis: Optional[int] = None,
                 name: Optional[str] = None,
                 new_cluster: Optional['outputs.GetJobJobSettingsSettingsNewClusterResult'] = None,
                 notebook_task: Optional['outputs.GetJobJobSettingsSettingsNotebookTaskResult'] = None,
                 notification_settings: Optional['outputs.GetJobJobSettingsSettingsNotificationSettingsResult'] = None,
                 parameters: Optional[Sequence['outputs.GetJobJobSettingsSettingsParameterResult']] = None,
                 pipeline_task: Optional['outputs.GetJobJobSettingsSettingsPipelineTaskResult'] = None,
                 python_wheel_task: Optional['outputs.GetJobJobSettingsSettingsPythonWheelTaskResult'] = None,
                 queue: Optional['outputs.GetJobJobSettingsSettingsQueueResult'] = None,
                 retry_on_timeout: Optional[bool] = None,
                 run_as: Optional['outputs.GetJobJobSettingsSettingsRunAsResult'] = None,
                 run_job_task: Optional['outputs.GetJobJobSettingsSettingsRunJobTaskResult'] = None,
                 schedule: Optional['outputs.GetJobJobSettingsSettingsScheduleResult'] = None,
                 spark_jar_task: Optional['outputs.GetJobJobSettingsSettingsSparkJarTaskResult'] = None,
                 spark_python_task: Optional['outputs.GetJobJobSettingsSettingsSparkPythonTaskResult'] = None,
                 spark_submit_task: Optional['outputs.GetJobJobSettingsSettingsSparkSubmitTaskResult'] = None,
                 tags: Optional[Mapping[str, Any]] = None,
                 tasks: Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskResult']] = None,
                 timeout_seconds: Optional[int] = None,
                 trigger: Optional['outputs.GetJobJobSettingsSettingsTriggerResult'] = None,
                 webhook_notifications: Optional['outputs.GetJobJobSettingsSettingsWebhookNotificationsResult'] = None):
        """
        :param str name: the job name of Job if the resource was matched by id.
        """
        GetJobJobSettingsSettingsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format=format,
            computes=computes,
            continuous=continuous,
            dbt_task=dbt_task,
            email_notifications=email_notifications,
            existing_cluster_id=existing_cluster_id,
            git_source=git_source,
            health=health,
            job_clusters=job_clusters,
            libraries=libraries,
            max_concurrent_runs=max_concurrent_runs,
            max_retries=max_retries,
            min_retry_interval_millis=min_retry_interval_millis,
            name=name,
            new_cluster=new_cluster,
            notebook_task=notebook_task,
            notification_settings=notification_settings,
            parameters=parameters,
            pipeline_task=pipeline_task,
            python_wheel_task=python_wheel_task,
            queue=queue,
            retry_on_timeout=retry_on_timeout,
            run_as=run_as,
            run_job_task=run_job_task,
            schedule=schedule,
            spark_jar_task=spark_jar_task,
            spark_python_task=spark_python_task,
            spark_submit_task=spark_submit_task,
            tags=tags,
            tasks=tasks,
            timeout_seconds=timeout_seconds,
            trigger=trigger,
            webhook_notifications=webhook_notifications,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format: str,
             computes: Optional[Sequence['outputs.GetJobJobSettingsSettingsComputeResult']] = None,
             continuous: Optional['outputs.GetJobJobSettingsSettingsContinuousResult'] = None,
             dbt_task: Optional['outputs.GetJobJobSettingsSettingsDbtTaskResult'] = None,
             email_notifications: Optional['outputs.GetJobJobSettingsSettingsEmailNotificationsResult'] = None,
             existing_cluster_id: Optional[str] = None,
             git_source: Optional['outputs.GetJobJobSettingsSettingsGitSourceResult'] = None,
             health: Optional['outputs.GetJobJobSettingsSettingsHealthResult'] = None,
             job_clusters: Optional[Sequence['outputs.GetJobJobSettingsSettingsJobClusterResult']] = None,
             libraries: Optional[Sequence['outputs.GetJobJobSettingsSettingsLibraryResult']] = None,
             max_concurrent_runs: Optional[int] = None,
             max_retries: Optional[int] = None,
             min_retry_interval_millis: Optional[int] = None,
             name: Optional[str] = None,
             new_cluster: Optional['outputs.GetJobJobSettingsSettingsNewClusterResult'] = None,
             notebook_task: Optional['outputs.GetJobJobSettingsSettingsNotebookTaskResult'] = None,
             notification_settings: Optional['outputs.GetJobJobSettingsSettingsNotificationSettingsResult'] = None,
             parameters: Optional[Sequence['outputs.GetJobJobSettingsSettingsParameterResult']] = None,
             pipeline_task: Optional['outputs.GetJobJobSettingsSettingsPipelineTaskResult'] = None,
             python_wheel_task: Optional['outputs.GetJobJobSettingsSettingsPythonWheelTaskResult'] = None,
             queue: Optional['outputs.GetJobJobSettingsSettingsQueueResult'] = None,
             retry_on_timeout: Optional[bool] = None,
             run_as: Optional['outputs.GetJobJobSettingsSettingsRunAsResult'] = None,
             run_job_task: Optional['outputs.GetJobJobSettingsSettingsRunJobTaskResult'] = None,
             schedule: Optional['outputs.GetJobJobSettingsSettingsScheduleResult'] = None,
             spark_jar_task: Optional['outputs.GetJobJobSettingsSettingsSparkJarTaskResult'] = None,
             spark_python_task: Optional['outputs.GetJobJobSettingsSettingsSparkPythonTaskResult'] = None,
             spark_submit_task: Optional['outputs.GetJobJobSettingsSettingsSparkSubmitTaskResult'] = None,
             tags: Optional[Mapping[str, Any]] = None,
             tasks: Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskResult']] = None,
             timeout_seconds: Optional[int] = None,
             trigger: Optional['outputs.GetJobJobSettingsSettingsTriggerResult'] = None,
             webhook_notifications: Optional['outputs.GetJobJobSettingsSettingsWebhookNotificationsResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dbtTask' in kwargs:
            dbt_task = kwargs['dbtTask']
        if 'emailNotifications' in kwargs:
            email_notifications = kwargs['emailNotifications']
        if 'existingClusterId' in kwargs:
            existing_cluster_id = kwargs['existingClusterId']
        if 'gitSource' in kwargs:
            git_source = kwargs['gitSource']
        if 'jobClusters' in kwargs:
            job_clusters = kwargs['jobClusters']
        if 'maxConcurrentRuns' in kwargs:
            max_concurrent_runs = kwargs['maxConcurrentRuns']
        if 'maxRetries' in kwargs:
            max_retries = kwargs['maxRetries']
        if 'minRetryIntervalMillis' in kwargs:
            min_retry_interval_millis = kwargs['minRetryIntervalMillis']
        if 'newCluster' in kwargs:
            new_cluster = kwargs['newCluster']
        if 'notebookTask' in kwargs:
            notebook_task = kwargs['notebookTask']
        if 'notificationSettings' in kwargs:
            notification_settings = kwargs['notificationSettings']
        if 'pipelineTask' in kwargs:
            pipeline_task = kwargs['pipelineTask']
        if 'pythonWheelTask' in kwargs:
            python_wheel_task = kwargs['pythonWheelTask']
        if 'retryOnTimeout' in kwargs:
            retry_on_timeout = kwargs['retryOnTimeout']
        if 'runAs' in kwargs:
            run_as = kwargs['runAs']
        if 'runJobTask' in kwargs:
            run_job_task = kwargs['runJobTask']
        if 'sparkJarTask' in kwargs:
            spark_jar_task = kwargs['sparkJarTask']
        if 'sparkPythonTask' in kwargs:
            spark_python_task = kwargs['sparkPythonTask']
        if 'sparkSubmitTask' in kwargs:
            spark_submit_task = kwargs['sparkSubmitTask']
        if 'timeoutSeconds' in kwargs:
            timeout_seconds = kwargs['timeoutSeconds']
        if 'webhookNotifications' in kwargs:
            webhook_notifications = kwargs['webhookNotifications']

        _setter("format", format)
        if computes is not None:
            _setter("computes", computes)
        if continuous is not None:
            _setter("continuous", continuous)
        if dbt_task is not None:
            _setter("dbt_task", dbt_task)
        if email_notifications is not None:
            _setter("email_notifications", email_notifications)
        if existing_cluster_id is not None:
            _setter("existing_cluster_id", existing_cluster_id)
        if git_source is not None:
            _setter("git_source", git_source)
        if health is not None:
            _setter("health", health)
        if job_clusters is not None:
            _setter("job_clusters", job_clusters)
        if libraries is not None:
            _setter("libraries", libraries)
        if max_concurrent_runs is not None:
            _setter("max_concurrent_runs", max_concurrent_runs)
        if max_retries is not None:
            _setter("max_retries", max_retries)
        if min_retry_interval_millis is not None:
            _setter("min_retry_interval_millis", min_retry_interval_millis)
        if name is not None:
            _setter("name", name)
        if new_cluster is not None:
            _setter("new_cluster", new_cluster)
        if notebook_task is not None:
            _setter("notebook_task", notebook_task)
        if notification_settings is not None:
            _setter("notification_settings", notification_settings)
        if parameters is not None:
            _setter("parameters", parameters)
        if pipeline_task is not None:
            _setter("pipeline_task", pipeline_task)
        if python_wheel_task is not None:
            _setter("python_wheel_task", python_wheel_task)
        if queue is not None:
            _setter("queue", queue)
        if retry_on_timeout is not None:
            _setter("retry_on_timeout", retry_on_timeout)
        if run_as is not None:
            _setter("run_as", run_as)
        if run_job_task is not None:
            _setter("run_job_task", run_job_task)
        if schedule is not None:
            _setter("schedule", schedule)
        if spark_jar_task is not None:
            _setter("spark_jar_task", spark_jar_task)
        if spark_python_task is not None:
            _setter("spark_python_task", spark_python_task)
        if spark_submit_task is not None:
            _setter("spark_submit_task", spark_submit_task)
        if tags is not None:
            _setter("tags", tags)
        if tasks is not None:
            _setter("tasks", tasks)
        if timeout_seconds is not None:
            _setter("timeout_seconds", timeout_seconds)
        if trigger is not None:
            _setter("trigger", trigger)
        if webhook_notifications is not None:
            _setter("webhook_notifications", webhook_notifications)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def computes(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsComputeResult']]:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter
    def continuous(self) -> Optional['outputs.GetJobJobSettingsSettingsContinuousResult']:
        return pulumi.get(self, "continuous")

    @property
    @pulumi.getter(name="dbtTask")
    def dbt_task(self) -> Optional['outputs.GetJobJobSettingsSettingsDbtTaskResult']:
        return pulumi.get(self, "dbt_task")

    @property
    @pulumi.getter(name="emailNotifications")
    def email_notifications(self) -> Optional['outputs.GetJobJobSettingsSettingsEmailNotificationsResult']:
        return pulumi.get(self, "email_notifications")

    @property
    @pulumi.getter(name="existingClusterId")
    def existing_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "existing_cluster_id")

    @property
    @pulumi.getter(name="gitSource")
    def git_source(self) -> Optional['outputs.GetJobJobSettingsSettingsGitSourceResult']:
        return pulumi.get(self, "git_source")

    @property
    @pulumi.getter
    def health(self) -> Optional['outputs.GetJobJobSettingsSettingsHealthResult']:
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="jobClusters")
    def job_clusters(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsJobClusterResult']]:
        return pulumi.get(self, "job_clusters")

    @property
    @pulumi.getter
    def libraries(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsLibraryResult']]:
        return pulumi.get(self, "libraries")

    @property
    @pulumi.getter(name="maxConcurrentRuns")
    def max_concurrent_runs(self) -> Optional[int]:
        return pulumi.get(self, "max_concurrent_runs")

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[int]:
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter(name="minRetryIntervalMillis")
    def min_retry_interval_millis(self) -> Optional[int]:
        return pulumi.get(self, "min_retry_interval_millis")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        the job name of Job if the resource was matched by id.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="newCluster")
    def new_cluster(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterResult']:
        return pulumi.get(self, "new_cluster")

    @property
    @pulumi.getter(name="notebookTask")
    def notebook_task(self) -> Optional['outputs.GetJobJobSettingsSettingsNotebookTaskResult']:
        return pulumi.get(self, "notebook_task")

    @property
    @pulumi.getter(name="notificationSettings")
    def notification_settings(self) -> Optional['outputs.GetJobJobSettingsSettingsNotificationSettingsResult']:
        return pulumi.get(self, "notification_settings")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsParameterResult']]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="pipelineTask")
    def pipeline_task(self) -> Optional['outputs.GetJobJobSettingsSettingsPipelineTaskResult']:
        return pulumi.get(self, "pipeline_task")

    @property
    @pulumi.getter(name="pythonWheelTask")
    def python_wheel_task(self) -> Optional['outputs.GetJobJobSettingsSettingsPythonWheelTaskResult']:
        return pulumi.get(self, "python_wheel_task")

    @property
    @pulumi.getter
    def queue(self) -> Optional['outputs.GetJobJobSettingsSettingsQueueResult']:
        return pulumi.get(self, "queue")

    @property
    @pulumi.getter(name="retryOnTimeout")
    def retry_on_timeout(self) -> Optional[bool]:
        return pulumi.get(self, "retry_on_timeout")

    @property
    @pulumi.getter(name="runAs")
    def run_as(self) -> Optional['outputs.GetJobJobSettingsSettingsRunAsResult']:
        return pulumi.get(self, "run_as")

    @property
    @pulumi.getter(name="runJobTask")
    def run_job_task(self) -> Optional['outputs.GetJobJobSettingsSettingsRunJobTaskResult']:
        return pulumi.get(self, "run_job_task")

    @property
    @pulumi.getter
    def schedule(self) -> Optional['outputs.GetJobJobSettingsSettingsScheduleResult']:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="sparkJarTask")
    def spark_jar_task(self) -> Optional['outputs.GetJobJobSettingsSettingsSparkJarTaskResult']:
        return pulumi.get(self, "spark_jar_task")

    @property
    @pulumi.getter(name="sparkPythonTask")
    def spark_python_task(self) -> Optional['outputs.GetJobJobSettingsSettingsSparkPythonTaskResult']:
        return pulumi.get(self, "spark_python_task")

    @property
    @pulumi.getter(name="sparkSubmitTask")
    def spark_submit_task(self) -> Optional['outputs.GetJobJobSettingsSettingsSparkSubmitTaskResult']:
        return pulumi.get(self, "spark_submit_task")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def tasks(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskResult']]:
        return pulumi.get(self, "tasks")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")

    @property
    @pulumi.getter
    def trigger(self) -> Optional['outputs.GetJobJobSettingsSettingsTriggerResult']:
        return pulumi.get(self, "trigger")

    @property
    @pulumi.getter(name="webhookNotifications")
    def webhook_notifications(self) -> Optional['outputs.GetJobJobSettingsSettingsWebhookNotificationsResult']:
        return pulumi.get(self, "webhook_notifications")


@pulumi.output_type
class GetJobJobSettingsSettingsComputeResult(dict):
    def __init__(__self__, *,
                 compute_key: Optional[str] = None,
                 spec: Optional['outputs.GetJobJobSettingsSettingsComputeSpecResult'] = None):
        GetJobJobSettingsSettingsComputeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compute_key=compute_key,
            spec=spec,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compute_key: Optional[str] = None,
             spec: Optional['outputs.GetJobJobSettingsSettingsComputeSpecResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'computeKey' in kwargs:
            compute_key = kwargs['computeKey']

        if compute_key is not None:
            _setter("compute_key", compute_key)
        if spec is not None:
            _setter("spec", spec)

    @property
    @pulumi.getter(name="computeKey")
    def compute_key(self) -> Optional[str]:
        return pulumi.get(self, "compute_key")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.GetJobJobSettingsSettingsComputeSpecResult']:
        return pulumi.get(self, "spec")


@pulumi.output_type
class GetJobJobSettingsSettingsComputeSpecResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None):
        GetJobJobSettingsSettingsComputeSpecResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kind=kind,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kind: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if kind is not None:
            _setter("kind", kind)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetJobJobSettingsSettingsContinuousResult(dict):
    def __init__(__self__, *,
                 pause_status: Optional[str] = None):
        GetJobJobSettingsSettingsContinuousResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pause_status=pause_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pause_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'pauseStatus' in kwargs:
            pause_status = kwargs['pauseStatus']

        if pause_status is not None:
            _setter("pause_status", pause_status)

    @property
    @pulumi.getter(name="pauseStatus")
    def pause_status(self) -> Optional[str]:
        return pulumi.get(self, "pause_status")


@pulumi.output_type
class GetJobJobSettingsSettingsDbtTaskResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[str],
                 catalog: Optional[str] = None,
                 profiles_directory: Optional[str] = None,
                 project_directory: Optional[str] = None,
                 schema: Optional[str] = None,
                 warehouse_id: Optional[str] = None):
        GetJobJobSettingsSettingsDbtTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            commands=commands,
            catalog=catalog,
            profiles_directory=profiles_directory,
            project_directory=project_directory,
            schema=schema,
            warehouse_id=warehouse_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             commands: Sequence[str],
             catalog: Optional[str] = None,
             profiles_directory: Optional[str] = None,
             project_directory: Optional[str] = None,
             schema: Optional[str] = None,
             warehouse_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'profilesDirectory' in kwargs:
            profiles_directory = kwargs['profilesDirectory']
        if 'projectDirectory' in kwargs:
            project_directory = kwargs['projectDirectory']
        if 'warehouseId' in kwargs:
            warehouse_id = kwargs['warehouseId']

        _setter("commands", commands)
        if catalog is not None:
            _setter("catalog", catalog)
        if profiles_directory is not None:
            _setter("profiles_directory", profiles_directory)
        if project_directory is not None:
            _setter("project_directory", project_directory)
        if schema is not None:
            _setter("schema", schema)
        if warehouse_id is not None:
            _setter("warehouse_id", warehouse_id)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[str]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def catalog(self) -> Optional[str]:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="profilesDirectory")
    def profiles_directory(self) -> Optional[str]:
        return pulumi.get(self, "profiles_directory")

    @property
    @pulumi.getter(name="projectDirectory")
    def project_directory(self) -> Optional[str]:
        return pulumi.get(self, "project_directory")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="warehouseId")
    def warehouse_id(self) -> Optional[str]:
        return pulumi.get(self, "warehouse_id")


@pulumi.output_type
class GetJobJobSettingsSettingsEmailNotificationsResult(dict):
    def __init__(__self__, *,
                 alert_on_last_attempt: Optional[bool] = None,
                 no_alert_for_skipped_runs: Optional[bool] = None,
                 on_duration_warning_threshold_exceededs: Optional[Sequence[str]] = None,
                 on_failures: Optional[Sequence[str]] = None,
                 on_starts: Optional[Sequence[str]] = None,
                 on_successes: Optional[Sequence[str]] = None):
        GetJobJobSettingsSettingsEmailNotificationsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert_on_last_attempt=alert_on_last_attempt,
            no_alert_for_skipped_runs=no_alert_for_skipped_runs,
            on_duration_warning_threshold_exceededs=on_duration_warning_threshold_exceededs,
            on_failures=on_failures,
            on_starts=on_starts,
            on_successes=on_successes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert_on_last_attempt: Optional[bool] = None,
             no_alert_for_skipped_runs: Optional[bool] = None,
             on_duration_warning_threshold_exceededs: Optional[Sequence[str]] = None,
             on_failures: Optional[Sequence[str]] = None,
             on_starts: Optional[Sequence[str]] = None,
             on_successes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'alertOnLastAttempt' in kwargs:
            alert_on_last_attempt = kwargs['alertOnLastAttempt']
        if 'noAlertForSkippedRuns' in kwargs:
            no_alert_for_skipped_runs = kwargs['noAlertForSkippedRuns']
        if 'onDurationWarningThresholdExceededs' in kwargs:
            on_duration_warning_threshold_exceededs = kwargs['onDurationWarningThresholdExceededs']
        if 'onFailures' in kwargs:
            on_failures = kwargs['onFailures']
        if 'onStarts' in kwargs:
            on_starts = kwargs['onStarts']
        if 'onSuccesses' in kwargs:
            on_successes = kwargs['onSuccesses']

        if alert_on_last_attempt is not None:
            _setter("alert_on_last_attempt", alert_on_last_attempt)
        if no_alert_for_skipped_runs is not None:
            _setter("no_alert_for_skipped_runs", no_alert_for_skipped_runs)
        if on_duration_warning_threshold_exceededs is not None:
            _setter("on_duration_warning_threshold_exceededs", on_duration_warning_threshold_exceededs)
        if on_failures is not None:
            _setter("on_failures", on_failures)
        if on_starts is not None:
            _setter("on_starts", on_starts)
        if on_successes is not None:
            _setter("on_successes", on_successes)

    @property
    @pulumi.getter(name="alertOnLastAttempt")
    def alert_on_last_attempt(self) -> Optional[bool]:
        return pulumi.get(self, "alert_on_last_attempt")

    @property
    @pulumi.getter(name="noAlertForSkippedRuns")
    def no_alert_for_skipped_runs(self) -> Optional[bool]:
        return pulumi.get(self, "no_alert_for_skipped_runs")

    @property
    @pulumi.getter(name="onDurationWarningThresholdExceededs")
    def on_duration_warning_threshold_exceededs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "on_duration_warning_threshold_exceededs")

    @property
    @pulumi.getter(name="onFailures")
    def on_failures(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "on_failures")

    @property
    @pulumi.getter(name="onStarts")
    def on_starts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "on_starts")

    @property
    @pulumi.getter(name="onSuccesses")
    def on_successes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "on_successes")


@pulumi.output_type
class GetJobJobSettingsSettingsGitSourceResult(dict):
    def __init__(__self__, *,
                 url: str,
                 branch: Optional[str] = None,
                 commit: Optional[str] = None,
                 job_source: Optional['outputs.GetJobJobSettingsSettingsGitSourceJobSourceResult'] = None,
                 provider: Optional[str] = None,
                 tag: Optional[str] = None):
        GetJobJobSettingsSettingsGitSourceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            branch=branch,
            commit=commit,
            job_source=job_source,
            provider=provider,
            tag=tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             branch: Optional[str] = None,
             commit: Optional[str] = None,
             job_source: Optional['outputs.GetJobJobSettingsSettingsGitSourceJobSourceResult'] = None,
             provider: Optional[str] = None,
             tag: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jobSource' in kwargs:
            job_source = kwargs['jobSource']

        _setter("url", url)
        if branch is not None:
            _setter("branch", branch)
        if commit is not None:
            _setter("commit", commit)
        if job_source is not None:
            _setter("job_source", job_source)
        if provider is not None:
            _setter("provider", provider)
        if tag is not None:
            _setter("tag", tag)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def commit(self) -> Optional[str]:
        return pulumi.get(self, "commit")

    @property
    @pulumi.getter(name="jobSource")
    def job_source(self) -> Optional['outputs.GetJobJobSettingsSettingsGitSourceJobSourceResult']:
        return pulumi.get(self, "job_source")

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetJobJobSettingsSettingsGitSourceJobSourceResult(dict):
    def __init__(__self__, *,
                 import_from_git_branch: str,
                 job_config_path: str,
                 dirty_state: Optional[str] = None):
        GetJobJobSettingsSettingsGitSourceJobSourceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            import_from_git_branch=import_from_git_branch,
            job_config_path=job_config_path,
            dirty_state=dirty_state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             import_from_git_branch: str,
             job_config_path: str,
             dirty_state: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'importFromGitBranch' in kwargs:
            import_from_git_branch = kwargs['importFromGitBranch']
        if 'jobConfigPath' in kwargs:
            job_config_path = kwargs['jobConfigPath']
        if 'dirtyState' in kwargs:
            dirty_state = kwargs['dirtyState']

        _setter("import_from_git_branch", import_from_git_branch)
        _setter("job_config_path", job_config_path)
        if dirty_state is not None:
            _setter("dirty_state", dirty_state)

    @property
    @pulumi.getter(name="importFromGitBranch")
    def import_from_git_branch(self) -> str:
        return pulumi.get(self, "import_from_git_branch")

    @property
    @pulumi.getter(name="jobConfigPath")
    def job_config_path(self) -> str:
        return pulumi.get(self, "job_config_path")

    @property
    @pulumi.getter(name="dirtyState")
    def dirty_state(self) -> Optional[str]:
        return pulumi.get(self, "dirty_state")


@pulumi.output_type
class GetJobJobSettingsSettingsHealthResult(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.GetJobJobSettingsSettingsHealthRuleResult']):
        GetJobJobSettingsSettingsHealthResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rules: Sequence['outputs.GetJobJobSettingsSettingsHealthRuleResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetJobJobSettingsSettingsHealthRuleResult']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetJobJobSettingsSettingsHealthRuleResult(dict):
    def __init__(__self__, *,
                 metric: Optional[str] = None,
                 op: Optional[str] = None,
                 value: Optional[int] = None):
        GetJobJobSettingsSettingsHealthRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric=metric,
            op=op,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric: Optional[str] = None,
             op: Optional[str] = None,
             value: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if metric is not None:
            _setter("metric", metric)
        if op is not None:
            _setter("op", op)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def op(self) -> Optional[str]:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterResult(dict):
    def __init__(__self__, *,
                 job_cluster_key: Optional[str] = None,
                 new_cluster: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterResult'] = None):
        GetJobJobSettingsSettingsJobClusterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            job_cluster_key=job_cluster_key,
            new_cluster=new_cluster,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             job_cluster_key: Optional[str] = None,
             new_cluster: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jobClusterKey' in kwargs:
            job_cluster_key = kwargs['jobClusterKey']
        if 'newCluster' in kwargs:
            new_cluster = kwargs['newCluster']

        if job_cluster_key is not None:
            _setter("job_cluster_key", job_cluster_key)
        if new_cluster is not None:
            _setter("new_cluster", new_cluster)

    @property
    @pulumi.getter(name="jobClusterKey")
    def job_cluster_key(self) -> Optional[str]:
        return pulumi.get(self, "job_cluster_key")

    @property
    @pulumi.getter(name="newCluster")
    def new_cluster(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterResult']:
        return pulumi.get(self, "new_cluster")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterResult(dict):
    def __init__(__self__, *,
                 driver_instance_pool_id: str,
                 driver_node_type_id: str,
                 enable_elastic_disk: bool,
                 enable_local_disk_encryption: bool,
                 node_type_id: str,
                 num_workers: int,
                 spark_version: str,
                 apply_policy_default_values: Optional[bool] = None,
                 autoscale: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterAutoscaleResult'] = None,
                 autotermination_minutes: Optional[int] = None,
                 aws_attributes: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributesResult'] = None,
                 azure_attributes: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributesResult'] = None,
                 cluster_id: Optional[str] = None,
                 cluster_log_conf: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfResult'] = None,
                 cluster_mount_infos: Optional[Sequence['outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoResult']] = None,
                 cluster_name: Optional[str] = None,
                 custom_tags: Optional[Mapping[str, Any]] = None,
                 data_security_mode: Optional[str] = None,
                 docker_image: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImageResult'] = None,
                 gcp_attributes: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributesResult'] = None,
                 idempotency_token: Optional[str] = None,
                 init_scripts: Optional[Sequence['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptResult']] = None,
                 instance_pool_id: Optional[str] = None,
                 policy_id: Optional[str] = None,
                 runtime_engine: Optional[str] = None,
                 single_user_name: Optional[str] = None,
                 spark_conf: Optional[Mapping[str, Any]] = None,
                 spark_env_vars: Optional[Mapping[str, Any]] = None,
                 ssh_public_keys: Optional[Sequence[str]] = None,
                 workload_type: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeResult'] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            driver_instance_pool_id=driver_instance_pool_id,
            driver_node_type_id=driver_node_type_id,
            enable_elastic_disk=enable_elastic_disk,
            enable_local_disk_encryption=enable_local_disk_encryption,
            node_type_id=node_type_id,
            num_workers=num_workers,
            spark_version=spark_version,
            apply_policy_default_values=apply_policy_default_values,
            autoscale=autoscale,
            autotermination_minutes=autotermination_minutes,
            aws_attributes=aws_attributes,
            azure_attributes=azure_attributes,
            cluster_id=cluster_id,
            cluster_log_conf=cluster_log_conf,
            cluster_mount_infos=cluster_mount_infos,
            cluster_name=cluster_name,
            custom_tags=custom_tags,
            data_security_mode=data_security_mode,
            docker_image=docker_image,
            gcp_attributes=gcp_attributes,
            idempotency_token=idempotency_token,
            init_scripts=init_scripts,
            instance_pool_id=instance_pool_id,
            policy_id=policy_id,
            runtime_engine=runtime_engine,
            single_user_name=single_user_name,
            spark_conf=spark_conf,
            spark_env_vars=spark_env_vars,
            ssh_public_keys=ssh_public_keys,
            workload_type=workload_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             driver_instance_pool_id: str,
             driver_node_type_id: str,
             enable_elastic_disk: bool,
             enable_local_disk_encryption: bool,
             node_type_id: str,
             num_workers: int,
             spark_version: str,
             apply_policy_default_values: Optional[bool] = None,
             autoscale: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterAutoscaleResult'] = None,
             autotermination_minutes: Optional[int] = None,
             aws_attributes: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributesResult'] = None,
             azure_attributes: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributesResult'] = None,
             cluster_id: Optional[str] = None,
             cluster_log_conf: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfResult'] = None,
             cluster_mount_infos: Optional[Sequence['outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoResult']] = None,
             cluster_name: Optional[str] = None,
             custom_tags: Optional[Mapping[str, Any]] = None,
             data_security_mode: Optional[str] = None,
             docker_image: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImageResult'] = None,
             gcp_attributes: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributesResult'] = None,
             idempotency_token: Optional[str] = None,
             init_scripts: Optional[Sequence['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptResult']] = None,
             instance_pool_id: Optional[str] = None,
             policy_id: Optional[str] = None,
             runtime_engine: Optional[str] = None,
             single_user_name: Optional[str] = None,
             spark_conf: Optional[Mapping[str, Any]] = None,
             spark_env_vars: Optional[Mapping[str, Any]] = None,
             ssh_public_keys: Optional[Sequence[str]] = None,
             workload_type: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'driverInstancePoolId' in kwargs:
            driver_instance_pool_id = kwargs['driverInstancePoolId']
        if 'driverNodeTypeId' in kwargs:
            driver_node_type_id = kwargs['driverNodeTypeId']
        if 'enableElasticDisk' in kwargs:
            enable_elastic_disk = kwargs['enableElasticDisk']
        if 'enableLocalDiskEncryption' in kwargs:
            enable_local_disk_encryption = kwargs['enableLocalDiskEncryption']
        if 'nodeTypeId' in kwargs:
            node_type_id = kwargs['nodeTypeId']
        if 'numWorkers' in kwargs:
            num_workers = kwargs['numWorkers']
        if 'sparkVersion' in kwargs:
            spark_version = kwargs['sparkVersion']
        if 'applyPolicyDefaultValues' in kwargs:
            apply_policy_default_values = kwargs['applyPolicyDefaultValues']
        if 'autoterminationMinutes' in kwargs:
            autotermination_minutes = kwargs['autoterminationMinutes']
        if 'awsAttributes' in kwargs:
            aws_attributes = kwargs['awsAttributes']
        if 'azureAttributes' in kwargs:
            azure_attributes = kwargs['azureAttributes']
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'clusterLogConf' in kwargs:
            cluster_log_conf = kwargs['clusterLogConf']
        if 'clusterMountInfos' in kwargs:
            cluster_mount_infos = kwargs['clusterMountInfos']
        if 'clusterName' in kwargs:
            cluster_name = kwargs['clusterName']
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']
        if 'dataSecurityMode' in kwargs:
            data_security_mode = kwargs['dataSecurityMode']
        if 'dockerImage' in kwargs:
            docker_image = kwargs['dockerImage']
        if 'gcpAttributes' in kwargs:
            gcp_attributes = kwargs['gcpAttributes']
        if 'idempotencyToken' in kwargs:
            idempotency_token = kwargs['idempotencyToken']
        if 'initScripts' in kwargs:
            init_scripts = kwargs['initScripts']
        if 'instancePoolId' in kwargs:
            instance_pool_id = kwargs['instancePoolId']
        if 'policyId' in kwargs:
            policy_id = kwargs['policyId']
        if 'runtimeEngine' in kwargs:
            runtime_engine = kwargs['runtimeEngine']
        if 'singleUserName' in kwargs:
            single_user_name = kwargs['singleUserName']
        if 'sparkConf' in kwargs:
            spark_conf = kwargs['sparkConf']
        if 'sparkEnvVars' in kwargs:
            spark_env_vars = kwargs['sparkEnvVars']
        if 'sshPublicKeys' in kwargs:
            ssh_public_keys = kwargs['sshPublicKeys']
        if 'workloadType' in kwargs:
            workload_type = kwargs['workloadType']

        _setter("driver_instance_pool_id", driver_instance_pool_id)
        _setter("driver_node_type_id", driver_node_type_id)
        _setter("enable_elastic_disk", enable_elastic_disk)
        _setter("enable_local_disk_encryption", enable_local_disk_encryption)
        _setter("node_type_id", node_type_id)
        _setter("num_workers", num_workers)
        _setter("spark_version", spark_version)
        if apply_policy_default_values is not None:
            _setter("apply_policy_default_values", apply_policy_default_values)
        if autoscale is not None:
            _setter("autoscale", autoscale)
        if autotermination_minutes is not None:
            _setter("autotermination_minutes", autotermination_minutes)
        if aws_attributes is not None:
            _setter("aws_attributes", aws_attributes)
        if azure_attributes is not None:
            _setter("azure_attributes", azure_attributes)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if cluster_log_conf is not None:
            _setter("cluster_log_conf", cluster_log_conf)
        if cluster_mount_infos is not None:
            _setter("cluster_mount_infos", cluster_mount_infos)
        if cluster_name is not None:
            _setter("cluster_name", cluster_name)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)
        if data_security_mode is not None:
            _setter("data_security_mode", data_security_mode)
        if docker_image is not None:
            _setter("docker_image", docker_image)
        if gcp_attributes is not None:
            _setter("gcp_attributes", gcp_attributes)
        if idempotency_token is not None:
            _setter("idempotency_token", idempotency_token)
        if init_scripts is not None:
            _setter("init_scripts", init_scripts)
        if instance_pool_id is not None:
            _setter("instance_pool_id", instance_pool_id)
        if policy_id is not None:
            _setter("policy_id", policy_id)
        if runtime_engine is not None:
            _setter("runtime_engine", runtime_engine)
        if single_user_name is not None:
            _setter("single_user_name", single_user_name)
        if spark_conf is not None:
            _setter("spark_conf", spark_conf)
        if spark_env_vars is not None:
            _setter("spark_env_vars", spark_env_vars)
        if ssh_public_keys is not None:
            _setter("ssh_public_keys", ssh_public_keys)
        if workload_type is not None:
            _setter("workload_type", workload_type)

    @property
    @pulumi.getter(name="driverInstancePoolId")
    def driver_instance_pool_id(self) -> str:
        return pulumi.get(self, "driver_instance_pool_id")

    @property
    @pulumi.getter(name="driverNodeTypeId")
    def driver_node_type_id(self) -> str:
        return pulumi.get(self, "driver_node_type_id")

    @property
    @pulumi.getter(name="enableElasticDisk")
    def enable_elastic_disk(self) -> bool:
        return pulumi.get(self, "enable_elastic_disk")

    @property
    @pulumi.getter(name="enableLocalDiskEncryption")
    def enable_local_disk_encryption(self) -> bool:
        return pulumi.get(self, "enable_local_disk_encryption")

    @property
    @pulumi.getter(name="nodeTypeId")
    def node_type_id(self) -> str:
        return pulumi.get(self, "node_type_id")

    @property
    @pulumi.getter(name="numWorkers")
    def num_workers(self) -> int:
        return pulumi.get(self, "num_workers")

    @property
    @pulumi.getter(name="sparkVersion")
    def spark_version(self) -> str:
        return pulumi.get(self, "spark_version")

    @property
    @pulumi.getter(name="applyPolicyDefaultValues")
    def apply_policy_default_values(self) -> Optional[bool]:
        return pulumi.get(self, "apply_policy_default_values")

    @property
    @pulumi.getter
    def autoscale(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterAutoscaleResult']:
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="autoterminationMinutes")
    def autotermination_minutes(self) -> Optional[int]:
        return pulumi.get(self, "autotermination_minutes")

    @property
    @pulumi.getter(name="awsAttributes")
    def aws_attributes(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributesResult']:
        return pulumi.get(self, "aws_attributes")

    @property
    @pulumi.getter(name="azureAttributes")
    def azure_attributes(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributesResult']:
        return pulumi.get(self, "azure_attributes")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterLogConf")
    def cluster_log_conf(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfResult']:
        return pulumi.get(self, "cluster_log_conf")

    @property
    @pulumi.getter(name="clusterMountInfos")
    def cluster_mount_infos(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoResult']]:
        return pulumi.get(self, "cluster_mount_infos")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_tags")

    @property
    @pulumi.getter(name="dataSecurityMode")
    def data_security_mode(self) -> Optional[str]:
        return pulumi.get(self, "data_security_mode")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImageResult']:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter(name="gcpAttributes")
    def gcp_attributes(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributesResult']:
        return pulumi.get(self, "gcp_attributes")

    @property
    @pulumi.getter(name="idempotencyToken")
    def idempotency_token(self) -> Optional[str]:
        return pulumi.get(self, "idempotency_token")

    @property
    @pulumi.getter(name="initScripts")
    def init_scripts(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptResult']]:
        return pulumi.get(self, "init_scripts")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="runtimeEngine")
    def runtime_engine(self) -> Optional[str]:
        return pulumi.get(self, "runtime_engine")

    @property
    @pulumi.getter(name="singleUserName")
    def single_user_name(self) -> Optional[str]:
        return pulumi.get(self, "single_user_name")

    @property
    @pulumi.getter(name="sparkConf")
    def spark_conf(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_conf")

    @property
    @pulumi.getter(name="sparkEnvVars")
    def spark_env_vars(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_env_vars")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeResult']:
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterAutoscaleResult(dict):
    def __init__(__self__, *,
                 max_workers: Optional[int] = None,
                 min_workers: Optional[int] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterAutoscaleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_workers=max_workers,
            min_workers=min_workers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_workers: Optional[int] = None,
             min_workers: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxWorkers' in kwargs:
            max_workers = kwargs['maxWorkers']
        if 'minWorkers' in kwargs:
            min_workers = kwargs['minWorkers']

        if max_workers is not None:
            _setter("max_workers", max_workers)
        if min_workers is not None:
            _setter("min_workers", min_workers)

    @property
    @pulumi.getter(name="maxWorkers")
    def max_workers(self) -> Optional[int]:
        return pulumi.get(self, "max_workers")

    @property
    @pulumi.getter(name="minWorkers")
    def min_workers(self) -> Optional[int]:
        return pulumi.get(self, "min_workers")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributesResult(dict):
    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 ebs_volume_count: Optional[int] = None,
                 ebs_volume_size: Optional[int] = None,
                 ebs_volume_type: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 instance_profile_arn: Optional[str] = None,
                 spot_bid_price_percent: Optional[int] = None,
                 zone_id: Optional[str] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterAwsAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            ebs_volume_count=ebs_volume_count,
            ebs_volume_size=ebs_volume_size,
            ebs_volume_type=ebs_volume_type,
            first_on_demand=first_on_demand,
            instance_profile_arn=instance_profile_arn,
            spot_bid_price_percent=spot_bid_price_percent,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             ebs_volume_count: Optional[int] = None,
             ebs_volume_size: Optional[int] = None,
             ebs_volume_type: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             instance_profile_arn: Optional[str] = None,
             spot_bid_price_percent: Optional[int] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ebsVolumeCount' in kwargs:
            ebs_volume_count = kwargs['ebsVolumeCount']
        if 'ebsVolumeSize' in kwargs:
            ebs_volume_size = kwargs['ebsVolumeSize']
        if 'ebsVolumeType' in kwargs:
            ebs_volume_type = kwargs['ebsVolumeType']
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'instanceProfileArn' in kwargs:
            instance_profile_arn = kwargs['instanceProfileArn']
        if 'spotBidPricePercent' in kwargs:
            spot_bid_price_percent = kwargs['spotBidPricePercent']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if ebs_volume_count is not None:
            _setter("ebs_volume_count", ebs_volume_count)
        if ebs_volume_size is not None:
            _setter("ebs_volume_size", ebs_volume_size)
        if ebs_volume_type is not None:
            _setter("ebs_volume_type", ebs_volume_type)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if instance_profile_arn is not None:
            _setter("instance_profile_arn", instance_profile_arn)
        if spot_bid_price_percent is not None:
            _setter("spot_bid_price_percent", spot_bid_price_percent)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="ebsVolumeCount")
    def ebs_volume_count(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_count")

    @property
    @pulumi.getter(name="ebsVolumeSize")
    def ebs_volume_size(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_size")

    @property
    @pulumi.getter(name="ebsVolumeType")
    def ebs_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "ebs_volume_type")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[str]:
        return pulumi.get(self, "instance_profile_arn")

    @property
    @pulumi.getter(name="spotBidPricePercent")
    def spot_bid_price_percent(self) -> Optional[int]:
        return pulumi.get(self, "spot_bid_price_percent")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributesResult(dict):
    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 spot_bid_max_price: Optional[float] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterAzureAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            first_on_demand=first_on_demand,
            spot_bid_max_price=spot_bid_max_price,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             spot_bid_max_price: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'spotBidMaxPrice' in kwargs:
            spot_bid_max_price = kwargs['spotBidMaxPrice']

        if availability is not None:
            _setter("availability", availability)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if spot_bid_max_price is not None:
            _setter("spot_bid_max_price", spot_bid_max_price)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="spotBidMaxPrice")
    def spot_bid_max_price(self) -> Optional[float]:
        return pulumi.get(self, "spot_bid_max_price")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfResult(dict):
    def __init__(__self__, *,
                 dbfs: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfsResult'] = None,
                 s3: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3Result'] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dbfs=dbfs,
            s3=s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dbfs: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfsResult'] = None,
             s3: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3Result'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if dbfs is not None:
            _setter("dbfs", dbfs)
        if s3 is not None:
            _setter("s3", s3)

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfsResult']:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3Result']:
        return pulumi.get(self, "s3")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfsResult(dict):
    def __init__(__self__, *,
                 destination: str):
        GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfDbfsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3Result(dict):
    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterClusterLogConfS3Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoResult(dict):
    def __init__(__self__, *,
                 local_mount_dir_path: str,
                 network_filesystem_info: 'outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfoResult',
                 remote_mount_dir_path: Optional[str] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            local_mount_dir_path=local_mount_dir_path,
            network_filesystem_info=network_filesystem_info,
            remote_mount_dir_path=remote_mount_dir_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             local_mount_dir_path: str,
             network_filesystem_info: 'outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfoResult',
             remote_mount_dir_path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'localMountDirPath' in kwargs:
            local_mount_dir_path = kwargs['localMountDirPath']
        if 'networkFilesystemInfo' in kwargs:
            network_filesystem_info = kwargs['networkFilesystemInfo']
        if 'remoteMountDirPath' in kwargs:
            remote_mount_dir_path = kwargs['remoteMountDirPath']

        _setter("local_mount_dir_path", local_mount_dir_path)
        _setter("network_filesystem_info", network_filesystem_info)
        if remote_mount_dir_path is not None:
            _setter("remote_mount_dir_path", remote_mount_dir_path)

    @property
    @pulumi.getter(name="localMountDirPath")
    def local_mount_dir_path(self) -> str:
        return pulumi.get(self, "local_mount_dir_path")

    @property
    @pulumi.getter(name="networkFilesystemInfo")
    def network_filesystem_info(self) -> 'outputs.GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfoResult':
        return pulumi.get(self, "network_filesystem_info")

    @property
    @pulumi.getter(name="remoteMountDirPath")
    def remote_mount_dir_path(self) -> Optional[str]:
        return pulumi.get(self, "remote_mount_dir_path")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfoResult(dict):
    def __init__(__self__, *,
                 server_address: str,
                 mount_options: Optional[str] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterClusterMountInfoNetworkFilesystemInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            server_address=server_address,
            mount_options=mount_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             server_address: str,
             mount_options: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serverAddress' in kwargs:
            server_address = kwargs['serverAddress']
        if 'mountOptions' in kwargs:
            mount_options = kwargs['mountOptions']

        _setter("server_address", server_address)
        if mount_options is not None:
            _setter("mount_options", mount_options)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> str:
        return pulumi.get(self, "server_address")

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[str]:
        return pulumi.get(self, "mount_options")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterDockerImageResult(dict):
    def __init__(__self__, *,
                 url: str,
                 basic_auth: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuthResult'] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterDockerImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            basic_auth=basic_auth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             basic_auth: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuthResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'basicAuth' in kwargs:
            basic_auth = kwargs['basicAuth']

        _setter("url", url)
        if basic_auth is not None:
            _setter("basic_auth", basic_auth)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuthResult']:
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuthResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        GetJobJobSettingsSettingsJobClusterNewClusterDockerImageBasicAuthResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributesResult(dict):
    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 boot_disk_size: Optional[int] = None,
                 google_service_account: Optional[str] = None,
                 local_ssd_count: Optional[int] = None,
                 use_preemptible_executors: Optional[bool] = None,
                 zone_id: Optional[str] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterGcpAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            boot_disk_size=boot_disk_size,
            google_service_account=google_service_account,
            local_ssd_count=local_ssd_count,
            use_preemptible_executors=use_preemptible_executors,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             boot_disk_size: Optional[int] = None,
             google_service_account: Optional[str] = None,
             local_ssd_count: Optional[int] = None,
             use_preemptible_executors: Optional[bool] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bootDiskSize' in kwargs:
            boot_disk_size = kwargs['bootDiskSize']
        if 'googleServiceAccount' in kwargs:
            google_service_account = kwargs['googleServiceAccount']
        if 'localSsdCount' in kwargs:
            local_ssd_count = kwargs['localSsdCount']
        if 'usePreemptibleExecutors' in kwargs:
            use_preemptible_executors = kwargs['usePreemptibleExecutors']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if boot_disk_size is not None:
            _setter("boot_disk_size", boot_disk_size)
        if google_service_account is not None:
            _setter("google_service_account", google_service_account)
        if local_ssd_count is not None:
            _setter("local_ssd_count", local_ssd_count)
        if use_preemptible_executors is not None:
            _setter("use_preemptible_executors", use_preemptible_executors)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[int]:
        return pulumi.get(self, "boot_disk_size")

    @property
    @pulumi.getter(name="googleServiceAccount")
    def google_service_account(self) -> Optional[str]:
        return pulumi.get(self, "google_service_account")

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[int]:
        return pulumi.get(self, "local_ssd_count")

    @property
    @pulumi.getter(name="usePreemptibleExecutors")
    def use_preemptible_executors(self) -> Optional[bool]:
        return pulumi.get(self, "use_preemptible_executors")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterInitScriptResult(dict):
    def __init__(__self__, *,
                 abfss: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfssResult'] = None,
                 dbfs: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfsResult'] = None,
                 file: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFileResult'] = None,
                 gcs: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcsResult'] = None,
                 s3: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3Result'] = None,
                 volumes: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumesResult'] = None,
                 workspace: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspaceResult'] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterInitScriptResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abfss=abfss,
            dbfs=dbfs,
            file=file,
            gcs=gcs,
            s3=s3,
            volumes=volumes,
            workspace=workspace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abfss: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfssResult'] = None,
             dbfs: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfsResult'] = None,
             file: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFileResult'] = None,
             gcs: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcsResult'] = None,
             s3: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3Result'] = None,
             volumes: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumesResult'] = None,
             workspace: Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspaceResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if abfss is not None:
            _setter("abfss", abfss)
        if dbfs is not None:
            _setter("dbfs", dbfs)
        if file is not None:
            _setter("file", file)
        if gcs is not None:
            _setter("gcs", gcs)
        if s3 is not None:
            _setter("s3", s3)
        if volumes is not None:
            _setter("volumes", volumes)
        if workspace is not None:
            _setter("workspace", workspace)

    @property
    @pulumi.getter
    def abfss(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfssResult']:
        return pulumi.get(self, "abfss")

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfsResult']:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFileResult']:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def gcs(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcsResult']:
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3Result']:
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter
    def volumes(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumesResult']:
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def workspace(self) -> Optional['outputs.GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspaceResult']:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfssResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterInitScriptAbfssResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfsResult(dict):
    def __init__(__self__, *,
                 destination: str):
        GetJobJobSettingsSettingsJobClusterNewClusterInitScriptDbfsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFileResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterInitScriptFileResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcsResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterInitScriptGcsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3Result(dict):
    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterInitScriptS3Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumesResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterInitScriptVolumesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspaceResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterInitScriptWorkspaceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeResult(dict):
    def __init__(__self__, *,
                 clients: 'outputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClientsResult'):
        GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            clients=clients,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             clients: 'outputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClientsResult',
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("clients", clients)

    @property
    @pulumi.getter
    def clients(self) -> 'outputs.GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClientsResult':
        return pulumi.get(self, "clients")


@pulumi.output_type
class GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClientsResult(dict):
    def __init__(__self__, *,
                 jobs: Optional[bool] = None,
                 notebooks: Optional[bool] = None):
        GetJobJobSettingsSettingsJobClusterNewClusterWorkloadTypeClientsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jobs=jobs,
            notebooks=notebooks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jobs: Optional[bool] = None,
             notebooks: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if jobs is not None:
            _setter("jobs", jobs)
        if notebooks is not None:
            _setter("notebooks", notebooks)

    @property
    @pulumi.getter
    def jobs(self) -> Optional[bool]:
        return pulumi.get(self, "jobs")

    @property
    @pulumi.getter
    def notebooks(self) -> Optional[bool]:
        return pulumi.get(self, "notebooks")


@pulumi.output_type
class GetJobJobSettingsSettingsLibraryResult(dict):
    def __init__(__self__, *,
                 cran: Optional['outputs.GetJobJobSettingsSettingsLibraryCranResult'] = None,
                 egg: Optional[str] = None,
                 jar: Optional[str] = None,
                 maven: Optional['outputs.GetJobJobSettingsSettingsLibraryMavenResult'] = None,
                 pypi: Optional['outputs.GetJobJobSettingsSettingsLibraryPypiResult'] = None,
                 whl: Optional[str] = None):
        GetJobJobSettingsSettingsLibraryResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cran=cran,
            egg=egg,
            jar=jar,
            maven=maven,
            pypi=pypi,
            whl=whl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cran: Optional['outputs.GetJobJobSettingsSettingsLibraryCranResult'] = None,
             egg: Optional[str] = None,
             jar: Optional[str] = None,
             maven: Optional['outputs.GetJobJobSettingsSettingsLibraryMavenResult'] = None,
             pypi: Optional['outputs.GetJobJobSettingsSettingsLibraryPypiResult'] = None,
             whl: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if cran is not None:
            _setter("cran", cran)
        if egg is not None:
            _setter("egg", egg)
        if jar is not None:
            _setter("jar", jar)
        if maven is not None:
            _setter("maven", maven)
        if pypi is not None:
            _setter("pypi", pypi)
        if whl is not None:
            _setter("whl", whl)

    @property
    @pulumi.getter
    def cran(self) -> Optional['outputs.GetJobJobSettingsSettingsLibraryCranResult']:
        return pulumi.get(self, "cran")

    @property
    @pulumi.getter
    def egg(self) -> Optional[str]:
        return pulumi.get(self, "egg")

    @property
    @pulumi.getter
    def jar(self) -> Optional[str]:
        return pulumi.get(self, "jar")

    @property
    @pulumi.getter
    def maven(self) -> Optional['outputs.GetJobJobSettingsSettingsLibraryMavenResult']:
        return pulumi.get(self, "maven")

    @property
    @pulumi.getter
    def pypi(self) -> Optional['outputs.GetJobJobSettingsSettingsLibraryPypiResult']:
        return pulumi.get(self, "pypi")

    @property
    @pulumi.getter
    def whl(self) -> Optional[str]:
        return pulumi.get(self, "whl")


@pulumi.output_type
class GetJobJobSettingsSettingsLibraryCranResult(dict):
    def __init__(__self__, *,
                 package: str,
                 repo: Optional[str] = None):
        GetJobJobSettingsSettingsLibraryCranResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            package=package,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             package: str,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("package", package)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def package(self) -> str:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class GetJobJobSettingsSettingsLibraryMavenResult(dict):
    def __init__(__self__, *,
                 coordinates: str,
                 exclusions: Optional[Sequence[str]] = None,
                 repo: Optional[str] = None):
        GetJobJobSettingsSettingsLibraryMavenResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            coordinates=coordinates,
            exclusions=exclusions,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             coordinates: str,
             exclusions: Optional[Sequence[str]] = None,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("coordinates", coordinates)
        if exclusions is not None:
            _setter("exclusions", exclusions)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def coordinates(self) -> str:
        return pulumi.get(self, "coordinates")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class GetJobJobSettingsSettingsLibraryPypiResult(dict):
    def __init__(__self__, *,
                 package: str,
                 repo: Optional[str] = None):
        GetJobJobSettingsSettingsLibraryPypiResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            package=package,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             package: str,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("package", package)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def package(self) -> str:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterResult(dict):
    def __init__(__self__, *,
                 driver_instance_pool_id: str,
                 driver_node_type_id: str,
                 enable_elastic_disk: bool,
                 enable_local_disk_encryption: bool,
                 node_type_id: str,
                 num_workers: int,
                 spark_version: str,
                 apply_policy_default_values: Optional[bool] = None,
                 autoscale: Optional['outputs.GetJobJobSettingsSettingsNewClusterAutoscaleResult'] = None,
                 autotermination_minutes: Optional[int] = None,
                 aws_attributes: Optional['outputs.GetJobJobSettingsSettingsNewClusterAwsAttributesResult'] = None,
                 azure_attributes: Optional['outputs.GetJobJobSettingsSettingsNewClusterAzureAttributesResult'] = None,
                 cluster_id: Optional[str] = None,
                 cluster_log_conf: Optional['outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfResult'] = None,
                 cluster_mount_infos: Optional[Sequence['outputs.GetJobJobSettingsSettingsNewClusterClusterMountInfoResult']] = None,
                 cluster_name: Optional[str] = None,
                 custom_tags: Optional[Mapping[str, Any]] = None,
                 data_security_mode: Optional[str] = None,
                 docker_image: Optional['outputs.GetJobJobSettingsSettingsNewClusterDockerImageResult'] = None,
                 gcp_attributes: Optional['outputs.GetJobJobSettingsSettingsNewClusterGcpAttributesResult'] = None,
                 idempotency_token: Optional[str] = None,
                 init_scripts: Optional[Sequence['outputs.GetJobJobSettingsSettingsNewClusterInitScriptResult']] = None,
                 instance_pool_id: Optional[str] = None,
                 policy_id: Optional[str] = None,
                 runtime_engine: Optional[str] = None,
                 single_user_name: Optional[str] = None,
                 spark_conf: Optional[Mapping[str, Any]] = None,
                 spark_env_vars: Optional[Mapping[str, Any]] = None,
                 ssh_public_keys: Optional[Sequence[str]] = None,
                 workload_type: Optional['outputs.GetJobJobSettingsSettingsNewClusterWorkloadTypeResult'] = None):
        GetJobJobSettingsSettingsNewClusterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            driver_instance_pool_id=driver_instance_pool_id,
            driver_node_type_id=driver_node_type_id,
            enable_elastic_disk=enable_elastic_disk,
            enable_local_disk_encryption=enable_local_disk_encryption,
            node_type_id=node_type_id,
            num_workers=num_workers,
            spark_version=spark_version,
            apply_policy_default_values=apply_policy_default_values,
            autoscale=autoscale,
            autotermination_minutes=autotermination_minutes,
            aws_attributes=aws_attributes,
            azure_attributes=azure_attributes,
            cluster_id=cluster_id,
            cluster_log_conf=cluster_log_conf,
            cluster_mount_infos=cluster_mount_infos,
            cluster_name=cluster_name,
            custom_tags=custom_tags,
            data_security_mode=data_security_mode,
            docker_image=docker_image,
            gcp_attributes=gcp_attributes,
            idempotency_token=idempotency_token,
            init_scripts=init_scripts,
            instance_pool_id=instance_pool_id,
            policy_id=policy_id,
            runtime_engine=runtime_engine,
            single_user_name=single_user_name,
            spark_conf=spark_conf,
            spark_env_vars=spark_env_vars,
            ssh_public_keys=ssh_public_keys,
            workload_type=workload_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             driver_instance_pool_id: str,
             driver_node_type_id: str,
             enable_elastic_disk: bool,
             enable_local_disk_encryption: bool,
             node_type_id: str,
             num_workers: int,
             spark_version: str,
             apply_policy_default_values: Optional[bool] = None,
             autoscale: Optional['outputs.GetJobJobSettingsSettingsNewClusterAutoscaleResult'] = None,
             autotermination_minutes: Optional[int] = None,
             aws_attributes: Optional['outputs.GetJobJobSettingsSettingsNewClusterAwsAttributesResult'] = None,
             azure_attributes: Optional['outputs.GetJobJobSettingsSettingsNewClusterAzureAttributesResult'] = None,
             cluster_id: Optional[str] = None,
             cluster_log_conf: Optional['outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfResult'] = None,
             cluster_mount_infos: Optional[Sequence['outputs.GetJobJobSettingsSettingsNewClusterClusterMountInfoResult']] = None,
             cluster_name: Optional[str] = None,
             custom_tags: Optional[Mapping[str, Any]] = None,
             data_security_mode: Optional[str] = None,
             docker_image: Optional['outputs.GetJobJobSettingsSettingsNewClusterDockerImageResult'] = None,
             gcp_attributes: Optional['outputs.GetJobJobSettingsSettingsNewClusterGcpAttributesResult'] = None,
             idempotency_token: Optional[str] = None,
             init_scripts: Optional[Sequence['outputs.GetJobJobSettingsSettingsNewClusterInitScriptResult']] = None,
             instance_pool_id: Optional[str] = None,
             policy_id: Optional[str] = None,
             runtime_engine: Optional[str] = None,
             single_user_name: Optional[str] = None,
             spark_conf: Optional[Mapping[str, Any]] = None,
             spark_env_vars: Optional[Mapping[str, Any]] = None,
             ssh_public_keys: Optional[Sequence[str]] = None,
             workload_type: Optional['outputs.GetJobJobSettingsSettingsNewClusterWorkloadTypeResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'driverInstancePoolId' in kwargs:
            driver_instance_pool_id = kwargs['driverInstancePoolId']
        if 'driverNodeTypeId' in kwargs:
            driver_node_type_id = kwargs['driverNodeTypeId']
        if 'enableElasticDisk' in kwargs:
            enable_elastic_disk = kwargs['enableElasticDisk']
        if 'enableLocalDiskEncryption' in kwargs:
            enable_local_disk_encryption = kwargs['enableLocalDiskEncryption']
        if 'nodeTypeId' in kwargs:
            node_type_id = kwargs['nodeTypeId']
        if 'numWorkers' in kwargs:
            num_workers = kwargs['numWorkers']
        if 'sparkVersion' in kwargs:
            spark_version = kwargs['sparkVersion']
        if 'applyPolicyDefaultValues' in kwargs:
            apply_policy_default_values = kwargs['applyPolicyDefaultValues']
        if 'autoterminationMinutes' in kwargs:
            autotermination_minutes = kwargs['autoterminationMinutes']
        if 'awsAttributes' in kwargs:
            aws_attributes = kwargs['awsAttributes']
        if 'azureAttributes' in kwargs:
            azure_attributes = kwargs['azureAttributes']
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'clusterLogConf' in kwargs:
            cluster_log_conf = kwargs['clusterLogConf']
        if 'clusterMountInfos' in kwargs:
            cluster_mount_infos = kwargs['clusterMountInfos']
        if 'clusterName' in kwargs:
            cluster_name = kwargs['clusterName']
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']
        if 'dataSecurityMode' in kwargs:
            data_security_mode = kwargs['dataSecurityMode']
        if 'dockerImage' in kwargs:
            docker_image = kwargs['dockerImage']
        if 'gcpAttributes' in kwargs:
            gcp_attributes = kwargs['gcpAttributes']
        if 'idempotencyToken' in kwargs:
            idempotency_token = kwargs['idempotencyToken']
        if 'initScripts' in kwargs:
            init_scripts = kwargs['initScripts']
        if 'instancePoolId' in kwargs:
            instance_pool_id = kwargs['instancePoolId']
        if 'policyId' in kwargs:
            policy_id = kwargs['policyId']
        if 'runtimeEngine' in kwargs:
            runtime_engine = kwargs['runtimeEngine']
        if 'singleUserName' in kwargs:
            single_user_name = kwargs['singleUserName']
        if 'sparkConf' in kwargs:
            spark_conf = kwargs['sparkConf']
        if 'sparkEnvVars' in kwargs:
            spark_env_vars = kwargs['sparkEnvVars']
        if 'sshPublicKeys' in kwargs:
            ssh_public_keys = kwargs['sshPublicKeys']
        if 'workloadType' in kwargs:
            workload_type = kwargs['workloadType']

        _setter("driver_instance_pool_id", driver_instance_pool_id)
        _setter("driver_node_type_id", driver_node_type_id)
        _setter("enable_elastic_disk", enable_elastic_disk)
        _setter("enable_local_disk_encryption", enable_local_disk_encryption)
        _setter("node_type_id", node_type_id)
        _setter("num_workers", num_workers)
        _setter("spark_version", spark_version)
        if apply_policy_default_values is not None:
            _setter("apply_policy_default_values", apply_policy_default_values)
        if autoscale is not None:
            _setter("autoscale", autoscale)
        if autotermination_minutes is not None:
            _setter("autotermination_minutes", autotermination_minutes)
        if aws_attributes is not None:
            _setter("aws_attributes", aws_attributes)
        if azure_attributes is not None:
            _setter("azure_attributes", azure_attributes)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if cluster_log_conf is not None:
            _setter("cluster_log_conf", cluster_log_conf)
        if cluster_mount_infos is not None:
            _setter("cluster_mount_infos", cluster_mount_infos)
        if cluster_name is not None:
            _setter("cluster_name", cluster_name)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)
        if data_security_mode is not None:
            _setter("data_security_mode", data_security_mode)
        if docker_image is not None:
            _setter("docker_image", docker_image)
        if gcp_attributes is not None:
            _setter("gcp_attributes", gcp_attributes)
        if idempotency_token is not None:
            _setter("idempotency_token", idempotency_token)
        if init_scripts is not None:
            _setter("init_scripts", init_scripts)
        if instance_pool_id is not None:
            _setter("instance_pool_id", instance_pool_id)
        if policy_id is not None:
            _setter("policy_id", policy_id)
        if runtime_engine is not None:
            _setter("runtime_engine", runtime_engine)
        if single_user_name is not None:
            _setter("single_user_name", single_user_name)
        if spark_conf is not None:
            _setter("spark_conf", spark_conf)
        if spark_env_vars is not None:
            _setter("spark_env_vars", spark_env_vars)
        if ssh_public_keys is not None:
            _setter("ssh_public_keys", ssh_public_keys)
        if workload_type is not None:
            _setter("workload_type", workload_type)

    @property
    @pulumi.getter(name="driverInstancePoolId")
    def driver_instance_pool_id(self) -> str:
        return pulumi.get(self, "driver_instance_pool_id")

    @property
    @pulumi.getter(name="driverNodeTypeId")
    def driver_node_type_id(self) -> str:
        return pulumi.get(self, "driver_node_type_id")

    @property
    @pulumi.getter(name="enableElasticDisk")
    def enable_elastic_disk(self) -> bool:
        return pulumi.get(self, "enable_elastic_disk")

    @property
    @pulumi.getter(name="enableLocalDiskEncryption")
    def enable_local_disk_encryption(self) -> bool:
        return pulumi.get(self, "enable_local_disk_encryption")

    @property
    @pulumi.getter(name="nodeTypeId")
    def node_type_id(self) -> str:
        return pulumi.get(self, "node_type_id")

    @property
    @pulumi.getter(name="numWorkers")
    def num_workers(self) -> int:
        return pulumi.get(self, "num_workers")

    @property
    @pulumi.getter(name="sparkVersion")
    def spark_version(self) -> str:
        return pulumi.get(self, "spark_version")

    @property
    @pulumi.getter(name="applyPolicyDefaultValues")
    def apply_policy_default_values(self) -> Optional[bool]:
        return pulumi.get(self, "apply_policy_default_values")

    @property
    @pulumi.getter
    def autoscale(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterAutoscaleResult']:
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="autoterminationMinutes")
    def autotermination_minutes(self) -> Optional[int]:
        return pulumi.get(self, "autotermination_minutes")

    @property
    @pulumi.getter(name="awsAttributes")
    def aws_attributes(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterAwsAttributesResult']:
        return pulumi.get(self, "aws_attributes")

    @property
    @pulumi.getter(name="azureAttributes")
    def azure_attributes(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterAzureAttributesResult']:
        return pulumi.get(self, "azure_attributes")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterLogConf")
    def cluster_log_conf(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfResult']:
        return pulumi.get(self, "cluster_log_conf")

    @property
    @pulumi.getter(name="clusterMountInfos")
    def cluster_mount_infos(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsNewClusterClusterMountInfoResult']]:
        return pulumi.get(self, "cluster_mount_infos")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_tags")

    @property
    @pulumi.getter(name="dataSecurityMode")
    def data_security_mode(self) -> Optional[str]:
        return pulumi.get(self, "data_security_mode")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterDockerImageResult']:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter(name="gcpAttributes")
    def gcp_attributes(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterGcpAttributesResult']:
        return pulumi.get(self, "gcp_attributes")

    @property
    @pulumi.getter(name="idempotencyToken")
    def idempotency_token(self) -> Optional[str]:
        return pulumi.get(self, "idempotency_token")

    @property
    @pulumi.getter(name="initScripts")
    def init_scripts(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsNewClusterInitScriptResult']]:
        return pulumi.get(self, "init_scripts")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="runtimeEngine")
    def runtime_engine(self) -> Optional[str]:
        return pulumi.get(self, "runtime_engine")

    @property
    @pulumi.getter(name="singleUserName")
    def single_user_name(self) -> Optional[str]:
        return pulumi.get(self, "single_user_name")

    @property
    @pulumi.getter(name="sparkConf")
    def spark_conf(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_conf")

    @property
    @pulumi.getter(name="sparkEnvVars")
    def spark_env_vars(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_env_vars")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterWorkloadTypeResult']:
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterAutoscaleResult(dict):
    def __init__(__self__, *,
                 max_workers: Optional[int] = None,
                 min_workers: Optional[int] = None):
        GetJobJobSettingsSettingsNewClusterAutoscaleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_workers=max_workers,
            min_workers=min_workers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_workers: Optional[int] = None,
             min_workers: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxWorkers' in kwargs:
            max_workers = kwargs['maxWorkers']
        if 'minWorkers' in kwargs:
            min_workers = kwargs['minWorkers']

        if max_workers is not None:
            _setter("max_workers", max_workers)
        if min_workers is not None:
            _setter("min_workers", min_workers)

    @property
    @pulumi.getter(name="maxWorkers")
    def max_workers(self) -> Optional[int]:
        return pulumi.get(self, "max_workers")

    @property
    @pulumi.getter(name="minWorkers")
    def min_workers(self) -> Optional[int]:
        return pulumi.get(self, "min_workers")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterAwsAttributesResult(dict):
    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 ebs_volume_count: Optional[int] = None,
                 ebs_volume_size: Optional[int] = None,
                 ebs_volume_type: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 instance_profile_arn: Optional[str] = None,
                 spot_bid_price_percent: Optional[int] = None,
                 zone_id: Optional[str] = None):
        GetJobJobSettingsSettingsNewClusterAwsAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            ebs_volume_count=ebs_volume_count,
            ebs_volume_size=ebs_volume_size,
            ebs_volume_type=ebs_volume_type,
            first_on_demand=first_on_demand,
            instance_profile_arn=instance_profile_arn,
            spot_bid_price_percent=spot_bid_price_percent,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             ebs_volume_count: Optional[int] = None,
             ebs_volume_size: Optional[int] = None,
             ebs_volume_type: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             instance_profile_arn: Optional[str] = None,
             spot_bid_price_percent: Optional[int] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ebsVolumeCount' in kwargs:
            ebs_volume_count = kwargs['ebsVolumeCount']
        if 'ebsVolumeSize' in kwargs:
            ebs_volume_size = kwargs['ebsVolumeSize']
        if 'ebsVolumeType' in kwargs:
            ebs_volume_type = kwargs['ebsVolumeType']
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'instanceProfileArn' in kwargs:
            instance_profile_arn = kwargs['instanceProfileArn']
        if 'spotBidPricePercent' in kwargs:
            spot_bid_price_percent = kwargs['spotBidPricePercent']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if ebs_volume_count is not None:
            _setter("ebs_volume_count", ebs_volume_count)
        if ebs_volume_size is not None:
            _setter("ebs_volume_size", ebs_volume_size)
        if ebs_volume_type is not None:
            _setter("ebs_volume_type", ebs_volume_type)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if instance_profile_arn is not None:
            _setter("instance_profile_arn", instance_profile_arn)
        if spot_bid_price_percent is not None:
            _setter("spot_bid_price_percent", spot_bid_price_percent)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="ebsVolumeCount")
    def ebs_volume_count(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_count")

    @property
    @pulumi.getter(name="ebsVolumeSize")
    def ebs_volume_size(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_size")

    @property
    @pulumi.getter(name="ebsVolumeType")
    def ebs_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "ebs_volume_type")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[str]:
        return pulumi.get(self, "instance_profile_arn")

    @property
    @pulumi.getter(name="spotBidPricePercent")
    def spot_bid_price_percent(self) -> Optional[int]:
        return pulumi.get(self, "spot_bid_price_percent")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterAzureAttributesResult(dict):
    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 spot_bid_max_price: Optional[float] = None):
        GetJobJobSettingsSettingsNewClusterAzureAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            first_on_demand=first_on_demand,
            spot_bid_max_price=spot_bid_max_price,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             spot_bid_max_price: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'spotBidMaxPrice' in kwargs:
            spot_bid_max_price = kwargs['spotBidMaxPrice']

        if availability is not None:
            _setter("availability", availability)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if spot_bid_max_price is not None:
            _setter("spot_bid_max_price", spot_bid_max_price)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="spotBidMaxPrice")
    def spot_bid_max_price(self) -> Optional[float]:
        return pulumi.get(self, "spot_bid_max_price")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterClusterLogConfResult(dict):
    def __init__(__self__, *,
                 dbfs: Optional['outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfDbfsResult'] = None,
                 s3: Optional['outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfS3Result'] = None):
        GetJobJobSettingsSettingsNewClusterClusterLogConfResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dbfs=dbfs,
            s3=s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dbfs: Optional['outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfDbfsResult'] = None,
             s3: Optional['outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfS3Result'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if dbfs is not None:
            _setter("dbfs", dbfs)
        if s3 is not None:
            _setter("s3", s3)

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfDbfsResult']:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterClusterLogConfS3Result']:
        return pulumi.get(self, "s3")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterClusterLogConfDbfsResult(dict):
    def __init__(__self__, *,
                 destination: str):
        GetJobJobSettingsSettingsNewClusterClusterLogConfDbfsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterClusterLogConfS3Result(dict):
    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        GetJobJobSettingsSettingsNewClusterClusterLogConfS3Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterClusterMountInfoResult(dict):
    def __init__(__self__, *,
                 local_mount_dir_path: str,
                 network_filesystem_info: 'outputs.GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfoResult',
                 remote_mount_dir_path: Optional[str] = None):
        GetJobJobSettingsSettingsNewClusterClusterMountInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            local_mount_dir_path=local_mount_dir_path,
            network_filesystem_info=network_filesystem_info,
            remote_mount_dir_path=remote_mount_dir_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             local_mount_dir_path: str,
             network_filesystem_info: 'outputs.GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfoResult',
             remote_mount_dir_path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'localMountDirPath' in kwargs:
            local_mount_dir_path = kwargs['localMountDirPath']
        if 'networkFilesystemInfo' in kwargs:
            network_filesystem_info = kwargs['networkFilesystemInfo']
        if 'remoteMountDirPath' in kwargs:
            remote_mount_dir_path = kwargs['remoteMountDirPath']

        _setter("local_mount_dir_path", local_mount_dir_path)
        _setter("network_filesystem_info", network_filesystem_info)
        if remote_mount_dir_path is not None:
            _setter("remote_mount_dir_path", remote_mount_dir_path)

    @property
    @pulumi.getter(name="localMountDirPath")
    def local_mount_dir_path(self) -> str:
        return pulumi.get(self, "local_mount_dir_path")

    @property
    @pulumi.getter(name="networkFilesystemInfo")
    def network_filesystem_info(self) -> 'outputs.GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfoResult':
        return pulumi.get(self, "network_filesystem_info")

    @property
    @pulumi.getter(name="remoteMountDirPath")
    def remote_mount_dir_path(self) -> Optional[str]:
        return pulumi.get(self, "remote_mount_dir_path")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfoResult(dict):
    def __init__(__self__, *,
                 server_address: str,
                 mount_options: Optional[str] = None):
        GetJobJobSettingsSettingsNewClusterClusterMountInfoNetworkFilesystemInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            server_address=server_address,
            mount_options=mount_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             server_address: str,
             mount_options: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serverAddress' in kwargs:
            server_address = kwargs['serverAddress']
        if 'mountOptions' in kwargs:
            mount_options = kwargs['mountOptions']

        _setter("server_address", server_address)
        if mount_options is not None:
            _setter("mount_options", mount_options)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> str:
        return pulumi.get(self, "server_address")

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[str]:
        return pulumi.get(self, "mount_options")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterDockerImageResult(dict):
    def __init__(__self__, *,
                 url: str,
                 basic_auth: Optional['outputs.GetJobJobSettingsSettingsNewClusterDockerImageBasicAuthResult'] = None):
        GetJobJobSettingsSettingsNewClusterDockerImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            basic_auth=basic_auth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             basic_auth: Optional['outputs.GetJobJobSettingsSettingsNewClusterDockerImageBasicAuthResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'basicAuth' in kwargs:
            basic_auth = kwargs['basicAuth']

        _setter("url", url)
        if basic_auth is not None:
            _setter("basic_auth", basic_auth)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterDockerImageBasicAuthResult']:
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterDockerImageBasicAuthResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        GetJobJobSettingsSettingsNewClusterDockerImageBasicAuthResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterGcpAttributesResult(dict):
    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 boot_disk_size: Optional[int] = None,
                 google_service_account: Optional[str] = None,
                 local_ssd_count: Optional[int] = None,
                 use_preemptible_executors: Optional[bool] = None,
                 zone_id: Optional[str] = None):
        GetJobJobSettingsSettingsNewClusterGcpAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            boot_disk_size=boot_disk_size,
            google_service_account=google_service_account,
            local_ssd_count=local_ssd_count,
            use_preemptible_executors=use_preemptible_executors,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             boot_disk_size: Optional[int] = None,
             google_service_account: Optional[str] = None,
             local_ssd_count: Optional[int] = None,
             use_preemptible_executors: Optional[bool] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bootDiskSize' in kwargs:
            boot_disk_size = kwargs['bootDiskSize']
        if 'googleServiceAccount' in kwargs:
            google_service_account = kwargs['googleServiceAccount']
        if 'localSsdCount' in kwargs:
            local_ssd_count = kwargs['localSsdCount']
        if 'usePreemptibleExecutors' in kwargs:
            use_preemptible_executors = kwargs['usePreemptibleExecutors']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if boot_disk_size is not None:
            _setter("boot_disk_size", boot_disk_size)
        if google_service_account is not None:
            _setter("google_service_account", google_service_account)
        if local_ssd_count is not None:
            _setter("local_ssd_count", local_ssd_count)
        if use_preemptible_executors is not None:
            _setter("use_preemptible_executors", use_preemptible_executors)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[int]:
        return pulumi.get(self, "boot_disk_size")

    @property
    @pulumi.getter(name="googleServiceAccount")
    def google_service_account(self) -> Optional[str]:
        return pulumi.get(self, "google_service_account")

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[int]:
        return pulumi.get(self, "local_ssd_count")

    @property
    @pulumi.getter(name="usePreemptibleExecutors")
    def use_preemptible_executors(self) -> Optional[bool]:
        return pulumi.get(self, "use_preemptible_executors")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterInitScriptResult(dict):
    def __init__(__self__, *,
                 abfss: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptAbfssResult'] = None,
                 dbfs: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptDbfsResult'] = None,
                 file: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptFileResult'] = None,
                 gcs: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptGcsResult'] = None,
                 s3: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptS3Result'] = None,
                 volumes: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptVolumesResult'] = None,
                 workspace: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptWorkspaceResult'] = None):
        GetJobJobSettingsSettingsNewClusterInitScriptResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abfss=abfss,
            dbfs=dbfs,
            file=file,
            gcs=gcs,
            s3=s3,
            volumes=volumes,
            workspace=workspace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abfss: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptAbfssResult'] = None,
             dbfs: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptDbfsResult'] = None,
             file: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptFileResult'] = None,
             gcs: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptGcsResult'] = None,
             s3: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptS3Result'] = None,
             volumes: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptVolumesResult'] = None,
             workspace: Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptWorkspaceResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if abfss is not None:
            _setter("abfss", abfss)
        if dbfs is not None:
            _setter("dbfs", dbfs)
        if file is not None:
            _setter("file", file)
        if gcs is not None:
            _setter("gcs", gcs)
        if s3 is not None:
            _setter("s3", s3)
        if volumes is not None:
            _setter("volumes", volumes)
        if workspace is not None:
            _setter("workspace", workspace)

    @property
    @pulumi.getter
    def abfss(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptAbfssResult']:
        return pulumi.get(self, "abfss")

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptDbfsResult']:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptFileResult']:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def gcs(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptGcsResult']:
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptS3Result']:
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter
    def volumes(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptVolumesResult']:
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def workspace(self) -> Optional['outputs.GetJobJobSettingsSettingsNewClusterInitScriptWorkspaceResult']:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterInitScriptAbfssResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsNewClusterInitScriptAbfssResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterInitScriptDbfsResult(dict):
    def __init__(__self__, *,
                 destination: str):
        GetJobJobSettingsSettingsNewClusterInitScriptDbfsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterInitScriptFileResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsNewClusterInitScriptFileResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterInitScriptGcsResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsNewClusterInitScriptGcsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterInitScriptS3Result(dict):
    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        GetJobJobSettingsSettingsNewClusterInitScriptS3Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterInitScriptVolumesResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsNewClusterInitScriptVolumesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterInitScriptWorkspaceResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsNewClusterInitScriptWorkspaceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterWorkloadTypeResult(dict):
    def __init__(__self__, *,
                 clients: 'outputs.GetJobJobSettingsSettingsNewClusterWorkloadTypeClientsResult'):
        GetJobJobSettingsSettingsNewClusterWorkloadTypeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            clients=clients,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             clients: 'outputs.GetJobJobSettingsSettingsNewClusterWorkloadTypeClientsResult',
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("clients", clients)

    @property
    @pulumi.getter
    def clients(self) -> 'outputs.GetJobJobSettingsSettingsNewClusterWorkloadTypeClientsResult':
        return pulumi.get(self, "clients")


@pulumi.output_type
class GetJobJobSettingsSettingsNewClusterWorkloadTypeClientsResult(dict):
    def __init__(__self__, *,
                 jobs: Optional[bool] = None,
                 notebooks: Optional[bool] = None):
        GetJobJobSettingsSettingsNewClusterWorkloadTypeClientsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jobs=jobs,
            notebooks=notebooks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jobs: Optional[bool] = None,
             notebooks: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if jobs is not None:
            _setter("jobs", jobs)
        if notebooks is not None:
            _setter("notebooks", notebooks)

    @property
    @pulumi.getter
    def jobs(self) -> Optional[bool]:
        return pulumi.get(self, "jobs")

    @property
    @pulumi.getter
    def notebooks(self) -> Optional[bool]:
        return pulumi.get(self, "notebooks")


@pulumi.output_type
class GetJobJobSettingsSettingsNotebookTaskResult(dict):
    def __init__(__self__, *,
                 notebook_path: str,
                 base_parameters: Optional[Mapping[str, Any]] = None,
                 source: Optional[str] = None):
        GetJobJobSettingsSettingsNotebookTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            notebook_path=notebook_path,
            base_parameters=base_parameters,
            source=source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             notebook_path: str,
             base_parameters: Optional[Mapping[str, Any]] = None,
             source: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'notebookPath' in kwargs:
            notebook_path = kwargs['notebookPath']
        if 'baseParameters' in kwargs:
            base_parameters = kwargs['baseParameters']

        _setter("notebook_path", notebook_path)
        if base_parameters is not None:
            _setter("base_parameters", base_parameters)
        if source is not None:
            _setter("source", source)

    @property
    @pulumi.getter(name="notebookPath")
    def notebook_path(self) -> str:
        return pulumi.get(self, "notebook_path")

    @property
    @pulumi.getter(name="baseParameters")
    def base_parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "base_parameters")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetJobJobSettingsSettingsNotificationSettingsResult(dict):
    def __init__(__self__, *,
                 no_alert_for_canceled_runs: Optional[bool] = None,
                 no_alert_for_skipped_runs: Optional[bool] = None):
        GetJobJobSettingsSettingsNotificationSettingsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            no_alert_for_canceled_runs=no_alert_for_canceled_runs,
            no_alert_for_skipped_runs=no_alert_for_skipped_runs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             no_alert_for_canceled_runs: Optional[bool] = None,
             no_alert_for_skipped_runs: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'noAlertForCanceledRuns' in kwargs:
            no_alert_for_canceled_runs = kwargs['noAlertForCanceledRuns']
        if 'noAlertForSkippedRuns' in kwargs:
            no_alert_for_skipped_runs = kwargs['noAlertForSkippedRuns']

        if no_alert_for_canceled_runs is not None:
            _setter("no_alert_for_canceled_runs", no_alert_for_canceled_runs)
        if no_alert_for_skipped_runs is not None:
            _setter("no_alert_for_skipped_runs", no_alert_for_skipped_runs)

    @property
    @pulumi.getter(name="noAlertForCanceledRuns")
    def no_alert_for_canceled_runs(self) -> Optional[bool]:
        return pulumi.get(self, "no_alert_for_canceled_runs")

    @property
    @pulumi.getter(name="noAlertForSkippedRuns")
    def no_alert_for_skipped_runs(self) -> Optional[bool]:
        return pulumi.get(self, "no_alert_for_skipped_runs")


@pulumi.output_type
class GetJobJobSettingsSettingsParameterResult(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str name: the job name of Job if the resource was matched by id.
        """
        GetJobJobSettingsSettingsParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional[str] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if default is not None:
            _setter("default", default)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        the job name of Job if the resource was matched by id.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetJobJobSettingsSettingsPipelineTaskResult(dict):
    def __init__(__self__, *,
                 pipeline_id: str,
                 full_refresh: Optional[bool] = None):
        GetJobJobSettingsSettingsPipelineTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pipeline_id=pipeline_id,
            full_refresh=full_refresh,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pipeline_id: str,
             full_refresh: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'pipelineId' in kwargs:
            pipeline_id = kwargs['pipelineId']
        if 'fullRefresh' in kwargs:
            full_refresh = kwargs['fullRefresh']

        _setter("pipeline_id", pipeline_id)
        if full_refresh is not None:
            _setter("full_refresh", full_refresh)

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> str:
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="fullRefresh")
    def full_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "full_refresh")


@pulumi.output_type
class GetJobJobSettingsSettingsPythonWheelTaskResult(dict):
    def __init__(__self__, *,
                 entry_point: Optional[str] = None,
                 named_parameters: Optional[Mapping[str, Any]] = None,
                 package_name: Optional[str] = None,
                 parameters: Optional[Sequence[str]] = None):
        GetJobJobSettingsSettingsPythonWheelTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            entry_point=entry_point,
            named_parameters=named_parameters,
            package_name=package_name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             entry_point: Optional[str] = None,
             named_parameters: Optional[Mapping[str, Any]] = None,
             package_name: Optional[str] = None,
             parameters: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'entryPoint' in kwargs:
            entry_point = kwargs['entryPoint']
        if 'namedParameters' in kwargs:
            named_parameters = kwargs['namedParameters']
        if 'packageName' in kwargs:
            package_name = kwargs['packageName']

        if entry_point is not None:
            _setter("entry_point", entry_point)
        if named_parameters is not None:
            _setter("named_parameters", named_parameters)
        if package_name is not None:
            _setter("package_name", package_name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter(name="entryPoint")
    def entry_point(self) -> Optional[str]:
        return pulumi.get(self, "entry_point")

    @property
    @pulumi.getter(name="namedParameters")
    def named_parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "named_parameters")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[str]:
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetJobJobSettingsSettingsQueueResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        GetJobJobSettingsSettingsQueueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetJobJobSettingsSettingsRunAsResult(dict):
    def __init__(__self__, *,
                 service_principal_name: Optional[str] = None,
                 user_name: Optional[str] = None):
        GetJobJobSettingsSettingsRunAsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            service_principal_name=service_principal_name,
            user_name=user_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             service_principal_name: Optional[str] = None,
             user_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'servicePrincipalName' in kwargs:
            service_principal_name = kwargs['servicePrincipalName']
        if 'userName' in kwargs:
            user_name = kwargs['userName']

        if service_principal_name is not None:
            _setter("service_principal_name", service_principal_name)
        if user_name is not None:
            _setter("user_name", user_name)

    @property
    @pulumi.getter(name="servicePrincipalName")
    def service_principal_name(self) -> Optional[str]:
        return pulumi.get(self, "service_principal_name")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetJobJobSettingsSettingsRunJobTaskResult(dict):
    def __init__(__self__, *,
                 job_id: int,
                 job_parameters: Optional[Mapping[str, Any]] = None):
        GetJobJobSettingsSettingsRunJobTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            job_id=job_id,
            job_parameters=job_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             job_id: int,
             job_parameters: Optional[Mapping[str, Any]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jobId' in kwargs:
            job_id = kwargs['jobId']
        if 'jobParameters' in kwargs:
            job_parameters = kwargs['jobParameters']

        _setter("job_id", job_id)
        if job_parameters is not None:
            _setter("job_parameters", job_parameters)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> int:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobParameters")
    def job_parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "job_parameters")


@pulumi.output_type
class GetJobJobSettingsSettingsScheduleResult(dict):
    def __init__(__self__, *,
                 quartz_cron_expression: str,
                 timezone_id: str,
                 pause_status: Optional[str] = None):
        GetJobJobSettingsSettingsScheduleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            quartz_cron_expression=quartz_cron_expression,
            timezone_id=timezone_id,
            pause_status=pause_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             quartz_cron_expression: str,
             timezone_id: str,
             pause_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'quartzCronExpression' in kwargs:
            quartz_cron_expression = kwargs['quartzCronExpression']
        if 'timezoneId' in kwargs:
            timezone_id = kwargs['timezoneId']
        if 'pauseStatus' in kwargs:
            pause_status = kwargs['pauseStatus']

        _setter("quartz_cron_expression", quartz_cron_expression)
        _setter("timezone_id", timezone_id)
        if pause_status is not None:
            _setter("pause_status", pause_status)

    @property
    @pulumi.getter(name="quartzCronExpression")
    def quartz_cron_expression(self) -> str:
        return pulumi.get(self, "quartz_cron_expression")

    @property
    @pulumi.getter(name="timezoneId")
    def timezone_id(self) -> str:
        return pulumi.get(self, "timezone_id")

    @property
    @pulumi.getter(name="pauseStatus")
    def pause_status(self) -> Optional[str]:
        return pulumi.get(self, "pause_status")


@pulumi.output_type
class GetJobJobSettingsSettingsSparkJarTaskResult(dict):
    def __init__(__self__, *,
                 jar_uri: Optional[str] = None,
                 main_class_name: Optional[str] = None,
                 parameters: Optional[Sequence[str]] = None):
        GetJobJobSettingsSettingsSparkJarTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jar_uri=jar_uri,
            main_class_name=main_class_name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jar_uri: Optional[str] = None,
             main_class_name: Optional[str] = None,
             parameters: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jarUri' in kwargs:
            jar_uri = kwargs['jarUri']
        if 'mainClassName' in kwargs:
            main_class_name = kwargs['mainClassName']

        if jar_uri is not None:
            _setter("jar_uri", jar_uri)
        if main_class_name is not None:
            _setter("main_class_name", main_class_name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter(name="jarUri")
    def jar_uri(self) -> Optional[str]:
        return pulumi.get(self, "jar_uri")

    @property
    @pulumi.getter(name="mainClassName")
    def main_class_name(self) -> Optional[str]:
        return pulumi.get(self, "main_class_name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetJobJobSettingsSettingsSparkPythonTaskResult(dict):
    def __init__(__self__, *,
                 python_file: str,
                 parameters: Optional[Sequence[str]] = None,
                 source: Optional[str] = None):
        GetJobJobSettingsSettingsSparkPythonTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            python_file=python_file,
            parameters=parameters,
            source=source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             python_file: str,
             parameters: Optional[Sequence[str]] = None,
             source: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'pythonFile' in kwargs:
            python_file = kwargs['pythonFile']

        _setter("python_file", python_file)
        if parameters is not None:
            _setter("parameters", parameters)
        if source is not None:
            _setter("source", source)

    @property
    @pulumi.getter(name="pythonFile")
    def python_file(self) -> str:
        return pulumi.get(self, "python_file")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetJobJobSettingsSettingsSparkSubmitTaskResult(dict):
    def __init__(__self__, *,
                 parameters: Optional[Sequence[str]] = None):
        GetJobJobSettingsSettingsSparkSubmitTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameters: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskResult(dict):
    def __init__(__self__, *,
                 retry_on_timeout: bool,
                 compute_key: Optional[str] = None,
                 condition_task: Optional['outputs.GetJobJobSettingsSettingsTaskConditionTaskResult'] = None,
                 dbt_task: Optional['outputs.GetJobJobSettingsSettingsTaskDbtTaskResult'] = None,
                 depends_ons: Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskDependsOnResult']] = None,
                 description: Optional[str] = None,
                 email_notifications: Optional['outputs.GetJobJobSettingsSettingsTaskEmailNotificationsResult'] = None,
                 existing_cluster_id: Optional[str] = None,
                 health: Optional['outputs.GetJobJobSettingsSettingsTaskHealthResult'] = None,
                 job_cluster_key: Optional[str] = None,
                 libraries: Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskLibraryResult']] = None,
                 max_retries: Optional[int] = None,
                 min_retry_interval_millis: Optional[int] = None,
                 new_cluster: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterResult'] = None,
                 notebook_task: Optional['outputs.GetJobJobSettingsSettingsTaskNotebookTaskResult'] = None,
                 notification_settings: Optional['outputs.GetJobJobSettingsSettingsTaskNotificationSettingsResult'] = None,
                 pipeline_task: Optional['outputs.GetJobJobSettingsSettingsTaskPipelineTaskResult'] = None,
                 python_wheel_task: Optional['outputs.GetJobJobSettingsSettingsTaskPythonWheelTaskResult'] = None,
                 run_if: Optional[str] = None,
                 run_job_task: Optional['outputs.GetJobJobSettingsSettingsTaskRunJobTaskResult'] = None,
                 spark_jar_task: Optional['outputs.GetJobJobSettingsSettingsTaskSparkJarTaskResult'] = None,
                 spark_python_task: Optional['outputs.GetJobJobSettingsSettingsTaskSparkPythonTaskResult'] = None,
                 spark_submit_task: Optional['outputs.GetJobJobSettingsSettingsTaskSparkSubmitTaskResult'] = None,
                 sql_task: Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskResult'] = None,
                 task_key: Optional[str] = None,
                 timeout_seconds: Optional[int] = None):
        GetJobJobSettingsSettingsTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            retry_on_timeout=retry_on_timeout,
            compute_key=compute_key,
            condition_task=condition_task,
            dbt_task=dbt_task,
            depends_ons=depends_ons,
            description=description,
            email_notifications=email_notifications,
            existing_cluster_id=existing_cluster_id,
            health=health,
            job_cluster_key=job_cluster_key,
            libraries=libraries,
            max_retries=max_retries,
            min_retry_interval_millis=min_retry_interval_millis,
            new_cluster=new_cluster,
            notebook_task=notebook_task,
            notification_settings=notification_settings,
            pipeline_task=pipeline_task,
            python_wheel_task=python_wheel_task,
            run_if=run_if,
            run_job_task=run_job_task,
            spark_jar_task=spark_jar_task,
            spark_python_task=spark_python_task,
            spark_submit_task=spark_submit_task,
            sql_task=sql_task,
            task_key=task_key,
            timeout_seconds=timeout_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             retry_on_timeout: bool,
             compute_key: Optional[str] = None,
             condition_task: Optional['outputs.GetJobJobSettingsSettingsTaskConditionTaskResult'] = None,
             dbt_task: Optional['outputs.GetJobJobSettingsSettingsTaskDbtTaskResult'] = None,
             depends_ons: Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskDependsOnResult']] = None,
             description: Optional[str] = None,
             email_notifications: Optional['outputs.GetJobJobSettingsSettingsTaskEmailNotificationsResult'] = None,
             existing_cluster_id: Optional[str] = None,
             health: Optional['outputs.GetJobJobSettingsSettingsTaskHealthResult'] = None,
             job_cluster_key: Optional[str] = None,
             libraries: Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskLibraryResult']] = None,
             max_retries: Optional[int] = None,
             min_retry_interval_millis: Optional[int] = None,
             new_cluster: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterResult'] = None,
             notebook_task: Optional['outputs.GetJobJobSettingsSettingsTaskNotebookTaskResult'] = None,
             notification_settings: Optional['outputs.GetJobJobSettingsSettingsTaskNotificationSettingsResult'] = None,
             pipeline_task: Optional['outputs.GetJobJobSettingsSettingsTaskPipelineTaskResult'] = None,
             python_wheel_task: Optional['outputs.GetJobJobSettingsSettingsTaskPythonWheelTaskResult'] = None,
             run_if: Optional[str] = None,
             run_job_task: Optional['outputs.GetJobJobSettingsSettingsTaskRunJobTaskResult'] = None,
             spark_jar_task: Optional['outputs.GetJobJobSettingsSettingsTaskSparkJarTaskResult'] = None,
             spark_python_task: Optional['outputs.GetJobJobSettingsSettingsTaskSparkPythonTaskResult'] = None,
             spark_submit_task: Optional['outputs.GetJobJobSettingsSettingsTaskSparkSubmitTaskResult'] = None,
             sql_task: Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskResult'] = None,
             task_key: Optional[str] = None,
             timeout_seconds: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'retryOnTimeout' in kwargs:
            retry_on_timeout = kwargs['retryOnTimeout']
        if 'computeKey' in kwargs:
            compute_key = kwargs['computeKey']
        if 'conditionTask' in kwargs:
            condition_task = kwargs['conditionTask']
        if 'dbtTask' in kwargs:
            dbt_task = kwargs['dbtTask']
        if 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']
        if 'emailNotifications' in kwargs:
            email_notifications = kwargs['emailNotifications']
        if 'existingClusterId' in kwargs:
            existing_cluster_id = kwargs['existingClusterId']
        if 'jobClusterKey' in kwargs:
            job_cluster_key = kwargs['jobClusterKey']
        if 'maxRetries' in kwargs:
            max_retries = kwargs['maxRetries']
        if 'minRetryIntervalMillis' in kwargs:
            min_retry_interval_millis = kwargs['minRetryIntervalMillis']
        if 'newCluster' in kwargs:
            new_cluster = kwargs['newCluster']
        if 'notebookTask' in kwargs:
            notebook_task = kwargs['notebookTask']
        if 'notificationSettings' in kwargs:
            notification_settings = kwargs['notificationSettings']
        if 'pipelineTask' in kwargs:
            pipeline_task = kwargs['pipelineTask']
        if 'pythonWheelTask' in kwargs:
            python_wheel_task = kwargs['pythonWheelTask']
        if 'runIf' in kwargs:
            run_if = kwargs['runIf']
        if 'runJobTask' in kwargs:
            run_job_task = kwargs['runJobTask']
        if 'sparkJarTask' in kwargs:
            spark_jar_task = kwargs['sparkJarTask']
        if 'sparkPythonTask' in kwargs:
            spark_python_task = kwargs['sparkPythonTask']
        if 'sparkSubmitTask' in kwargs:
            spark_submit_task = kwargs['sparkSubmitTask']
        if 'sqlTask' in kwargs:
            sql_task = kwargs['sqlTask']
        if 'taskKey' in kwargs:
            task_key = kwargs['taskKey']
        if 'timeoutSeconds' in kwargs:
            timeout_seconds = kwargs['timeoutSeconds']

        _setter("retry_on_timeout", retry_on_timeout)
        if compute_key is not None:
            _setter("compute_key", compute_key)
        if condition_task is not None:
            _setter("condition_task", condition_task)
        if dbt_task is not None:
            _setter("dbt_task", dbt_task)
        if depends_ons is not None:
            _setter("depends_ons", depends_ons)
        if description is not None:
            _setter("description", description)
        if email_notifications is not None:
            _setter("email_notifications", email_notifications)
        if existing_cluster_id is not None:
            _setter("existing_cluster_id", existing_cluster_id)
        if health is not None:
            _setter("health", health)
        if job_cluster_key is not None:
            _setter("job_cluster_key", job_cluster_key)
        if libraries is not None:
            _setter("libraries", libraries)
        if max_retries is not None:
            _setter("max_retries", max_retries)
        if min_retry_interval_millis is not None:
            _setter("min_retry_interval_millis", min_retry_interval_millis)
        if new_cluster is not None:
            _setter("new_cluster", new_cluster)
        if notebook_task is not None:
            _setter("notebook_task", notebook_task)
        if notification_settings is not None:
            _setter("notification_settings", notification_settings)
        if pipeline_task is not None:
            _setter("pipeline_task", pipeline_task)
        if python_wheel_task is not None:
            _setter("python_wheel_task", python_wheel_task)
        if run_if is not None:
            _setter("run_if", run_if)
        if run_job_task is not None:
            _setter("run_job_task", run_job_task)
        if spark_jar_task is not None:
            _setter("spark_jar_task", spark_jar_task)
        if spark_python_task is not None:
            _setter("spark_python_task", spark_python_task)
        if spark_submit_task is not None:
            _setter("spark_submit_task", spark_submit_task)
        if sql_task is not None:
            _setter("sql_task", sql_task)
        if task_key is not None:
            _setter("task_key", task_key)
        if timeout_seconds is not None:
            _setter("timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="retryOnTimeout")
    def retry_on_timeout(self) -> bool:
        return pulumi.get(self, "retry_on_timeout")

    @property
    @pulumi.getter(name="computeKey")
    def compute_key(self) -> Optional[str]:
        return pulumi.get(self, "compute_key")

    @property
    @pulumi.getter(name="conditionTask")
    def condition_task(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskConditionTaskResult']:
        return pulumi.get(self, "condition_task")

    @property
    @pulumi.getter(name="dbtTask")
    def dbt_task(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskDbtTaskResult']:
        return pulumi.get(self, "dbt_task")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskDependsOnResult']]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="emailNotifications")
    def email_notifications(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskEmailNotificationsResult']:
        return pulumi.get(self, "email_notifications")

    @property
    @pulumi.getter(name="existingClusterId")
    def existing_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "existing_cluster_id")

    @property
    @pulumi.getter
    def health(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskHealthResult']:
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="jobClusterKey")
    def job_cluster_key(self) -> Optional[str]:
        return pulumi.get(self, "job_cluster_key")

    @property
    @pulumi.getter
    def libraries(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskLibraryResult']]:
        return pulumi.get(self, "libraries")

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[int]:
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter(name="minRetryIntervalMillis")
    def min_retry_interval_millis(self) -> Optional[int]:
        return pulumi.get(self, "min_retry_interval_millis")

    @property
    @pulumi.getter(name="newCluster")
    def new_cluster(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterResult']:
        return pulumi.get(self, "new_cluster")

    @property
    @pulumi.getter(name="notebookTask")
    def notebook_task(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNotebookTaskResult']:
        return pulumi.get(self, "notebook_task")

    @property
    @pulumi.getter(name="notificationSettings")
    def notification_settings(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNotificationSettingsResult']:
        return pulumi.get(self, "notification_settings")

    @property
    @pulumi.getter(name="pipelineTask")
    def pipeline_task(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskPipelineTaskResult']:
        return pulumi.get(self, "pipeline_task")

    @property
    @pulumi.getter(name="pythonWheelTask")
    def python_wheel_task(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskPythonWheelTaskResult']:
        return pulumi.get(self, "python_wheel_task")

    @property
    @pulumi.getter(name="runIf")
    def run_if(self) -> Optional[str]:
        return pulumi.get(self, "run_if")

    @property
    @pulumi.getter(name="runJobTask")
    def run_job_task(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskRunJobTaskResult']:
        return pulumi.get(self, "run_job_task")

    @property
    @pulumi.getter(name="sparkJarTask")
    def spark_jar_task(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskSparkJarTaskResult']:
        return pulumi.get(self, "spark_jar_task")

    @property
    @pulumi.getter(name="sparkPythonTask")
    def spark_python_task(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskSparkPythonTaskResult']:
        return pulumi.get(self, "spark_python_task")

    @property
    @pulumi.getter(name="sparkSubmitTask")
    def spark_submit_task(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskSparkSubmitTaskResult']:
        return pulumi.get(self, "spark_submit_task")

    @property
    @pulumi.getter(name="sqlTask")
    def sql_task(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskResult']:
        return pulumi.get(self, "sql_task")

    @property
    @pulumi.getter(name="taskKey")
    def task_key(self) -> Optional[str]:
        return pulumi.get(self, "task_key")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskConditionTaskResult(dict):
    def __init__(__self__, *,
                 left: Optional[str] = None,
                 op: Optional[str] = None,
                 right: Optional[str] = None):
        GetJobJobSettingsSettingsTaskConditionTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            left=left,
            op=op,
            right=right,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             left: Optional[str] = None,
             op: Optional[str] = None,
             right: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if left is not None:
            _setter("left", left)
        if op is not None:
            _setter("op", op)
        if right is not None:
            _setter("right", right)

    @property
    @pulumi.getter
    def left(self) -> Optional[str]:
        return pulumi.get(self, "left")

    @property
    @pulumi.getter
    def op(self) -> Optional[str]:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def right(self) -> Optional[str]:
        return pulumi.get(self, "right")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskDbtTaskResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[str],
                 catalog: Optional[str] = None,
                 profiles_directory: Optional[str] = None,
                 project_directory: Optional[str] = None,
                 schema: Optional[str] = None,
                 warehouse_id: Optional[str] = None):
        GetJobJobSettingsSettingsTaskDbtTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            commands=commands,
            catalog=catalog,
            profiles_directory=profiles_directory,
            project_directory=project_directory,
            schema=schema,
            warehouse_id=warehouse_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             commands: Sequence[str],
             catalog: Optional[str] = None,
             profiles_directory: Optional[str] = None,
             project_directory: Optional[str] = None,
             schema: Optional[str] = None,
             warehouse_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'profilesDirectory' in kwargs:
            profiles_directory = kwargs['profilesDirectory']
        if 'projectDirectory' in kwargs:
            project_directory = kwargs['projectDirectory']
        if 'warehouseId' in kwargs:
            warehouse_id = kwargs['warehouseId']

        _setter("commands", commands)
        if catalog is not None:
            _setter("catalog", catalog)
        if profiles_directory is not None:
            _setter("profiles_directory", profiles_directory)
        if project_directory is not None:
            _setter("project_directory", project_directory)
        if schema is not None:
            _setter("schema", schema)
        if warehouse_id is not None:
            _setter("warehouse_id", warehouse_id)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[str]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def catalog(self) -> Optional[str]:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="profilesDirectory")
    def profiles_directory(self) -> Optional[str]:
        return pulumi.get(self, "profiles_directory")

    @property
    @pulumi.getter(name="projectDirectory")
    def project_directory(self) -> Optional[str]:
        return pulumi.get(self, "project_directory")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="warehouseId")
    def warehouse_id(self) -> Optional[str]:
        return pulumi.get(self, "warehouse_id")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskDependsOnResult(dict):
    def __init__(__self__, *,
                 task_key: str,
                 outcome: Optional[str] = None):
        GetJobJobSettingsSettingsTaskDependsOnResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            task_key=task_key,
            outcome=outcome,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             task_key: str,
             outcome: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'taskKey' in kwargs:
            task_key = kwargs['taskKey']

        _setter("task_key", task_key)
        if outcome is not None:
            _setter("outcome", outcome)

    @property
    @pulumi.getter(name="taskKey")
    def task_key(self) -> str:
        return pulumi.get(self, "task_key")

    @property
    @pulumi.getter
    def outcome(self) -> Optional[str]:
        return pulumi.get(self, "outcome")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskEmailNotificationsResult(dict):
    def __init__(__self__, *,
                 alert_on_last_attempt: Optional[bool] = None,
                 no_alert_for_skipped_runs: Optional[bool] = None,
                 on_duration_warning_threshold_exceededs: Optional[Sequence[str]] = None,
                 on_failures: Optional[Sequence[str]] = None,
                 on_starts: Optional[Sequence[str]] = None,
                 on_successes: Optional[Sequence[str]] = None):
        GetJobJobSettingsSettingsTaskEmailNotificationsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert_on_last_attempt=alert_on_last_attempt,
            no_alert_for_skipped_runs=no_alert_for_skipped_runs,
            on_duration_warning_threshold_exceededs=on_duration_warning_threshold_exceededs,
            on_failures=on_failures,
            on_starts=on_starts,
            on_successes=on_successes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert_on_last_attempt: Optional[bool] = None,
             no_alert_for_skipped_runs: Optional[bool] = None,
             on_duration_warning_threshold_exceededs: Optional[Sequence[str]] = None,
             on_failures: Optional[Sequence[str]] = None,
             on_starts: Optional[Sequence[str]] = None,
             on_successes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'alertOnLastAttempt' in kwargs:
            alert_on_last_attempt = kwargs['alertOnLastAttempt']
        if 'noAlertForSkippedRuns' in kwargs:
            no_alert_for_skipped_runs = kwargs['noAlertForSkippedRuns']
        if 'onDurationWarningThresholdExceededs' in kwargs:
            on_duration_warning_threshold_exceededs = kwargs['onDurationWarningThresholdExceededs']
        if 'onFailures' in kwargs:
            on_failures = kwargs['onFailures']
        if 'onStarts' in kwargs:
            on_starts = kwargs['onStarts']
        if 'onSuccesses' in kwargs:
            on_successes = kwargs['onSuccesses']

        if alert_on_last_attempt is not None:
            _setter("alert_on_last_attempt", alert_on_last_attempt)
        if no_alert_for_skipped_runs is not None:
            _setter("no_alert_for_skipped_runs", no_alert_for_skipped_runs)
        if on_duration_warning_threshold_exceededs is not None:
            _setter("on_duration_warning_threshold_exceededs", on_duration_warning_threshold_exceededs)
        if on_failures is not None:
            _setter("on_failures", on_failures)
        if on_starts is not None:
            _setter("on_starts", on_starts)
        if on_successes is not None:
            _setter("on_successes", on_successes)

    @property
    @pulumi.getter(name="alertOnLastAttempt")
    def alert_on_last_attempt(self) -> Optional[bool]:
        return pulumi.get(self, "alert_on_last_attempt")

    @property
    @pulumi.getter(name="noAlertForSkippedRuns")
    def no_alert_for_skipped_runs(self) -> Optional[bool]:
        return pulumi.get(self, "no_alert_for_skipped_runs")

    @property
    @pulumi.getter(name="onDurationWarningThresholdExceededs")
    def on_duration_warning_threshold_exceededs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "on_duration_warning_threshold_exceededs")

    @property
    @pulumi.getter(name="onFailures")
    def on_failures(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "on_failures")

    @property
    @pulumi.getter(name="onStarts")
    def on_starts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "on_starts")

    @property
    @pulumi.getter(name="onSuccesses")
    def on_successes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "on_successes")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskHealthResult(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.GetJobJobSettingsSettingsTaskHealthRuleResult']):
        GetJobJobSettingsSettingsTaskHealthResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rules: Sequence['outputs.GetJobJobSettingsSettingsTaskHealthRuleResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetJobJobSettingsSettingsTaskHealthRuleResult']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskHealthRuleResult(dict):
    def __init__(__self__, *,
                 metric: Optional[str] = None,
                 op: Optional[str] = None,
                 value: Optional[int] = None):
        GetJobJobSettingsSettingsTaskHealthRuleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric=metric,
            op=op,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric: Optional[str] = None,
             op: Optional[str] = None,
             value: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if metric is not None:
            _setter("metric", metric)
        if op is not None:
            _setter("op", op)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def op(self) -> Optional[str]:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskLibraryResult(dict):
    def __init__(__self__, *,
                 cran: Optional['outputs.GetJobJobSettingsSettingsTaskLibraryCranResult'] = None,
                 egg: Optional[str] = None,
                 jar: Optional[str] = None,
                 maven: Optional['outputs.GetJobJobSettingsSettingsTaskLibraryMavenResult'] = None,
                 pypi: Optional['outputs.GetJobJobSettingsSettingsTaskLibraryPypiResult'] = None,
                 whl: Optional[str] = None):
        GetJobJobSettingsSettingsTaskLibraryResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cran=cran,
            egg=egg,
            jar=jar,
            maven=maven,
            pypi=pypi,
            whl=whl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cran: Optional['outputs.GetJobJobSettingsSettingsTaskLibraryCranResult'] = None,
             egg: Optional[str] = None,
             jar: Optional[str] = None,
             maven: Optional['outputs.GetJobJobSettingsSettingsTaskLibraryMavenResult'] = None,
             pypi: Optional['outputs.GetJobJobSettingsSettingsTaskLibraryPypiResult'] = None,
             whl: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if cran is not None:
            _setter("cran", cran)
        if egg is not None:
            _setter("egg", egg)
        if jar is not None:
            _setter("jar", jar)
        if maven is not None:
            _setter("maven", maven)
        if pypi is not None:
            _setter("pypi", pypi)
        if whl is not None:
            _setter("whl", whl)

    @property
    @pulumi.getter
    def cran(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskLibraryCranResult']:
        return pulumi.get(self, "cran")

    @property
    @pulumi.getter
    def egg(self) -> Optional[str]:
        return pulumi.get(self, "egg")

    @property
    @pulumi.getter
    def jar(self) -> Optional[str]:
        return pulumi.get(self, "jar")

    @property
    @pulumi.getter
    def maven(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskLibraryMavenResult']:
        return pulumi.get(self, "maven")

    @property
    @pulumi.getter
    def pypi(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskLibraryPypiResult']:
        return pulumi.get(self, "pypi")

    @property
    @pulumi.getter
    def whl(self) -> Optional[str]:
        return pulumi.get(self, "whl")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskLibraryCranResult(dict):
    def __init__(__self__, *,
                 package: str,
                 repo: Optional[str] = None):
        GetJobJobSettingsSettingsTaskLibraryCranResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            package=package,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             package: str,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("package", package)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def package(self) -> str:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskLibraryMavenResult(dict):
    def __init__(__self__, *,
                 coordinates: str,
                 exclusions: Optional[Sequence[str]] = None,
                 repo: Optional[str] = None):
        GetJobJobSettingsSettingsTaskLibraryMavenResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            coordinates=coordinates,
            exclusions=exclusions,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             coordinates: str,
             exclusions: Optional[Sequence[str]] = None,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("coordinates", coordinates)
        if exclusions is not None:
            _setter("exclusions", exclusions)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def coordinates(self) -> str:
        return pulumi.get(self, "coordinates")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskLibraryPypiResult(dict):
    def __init__(__self__, *,
                 package: str,
                 repo: Optional[str] = None):
        GetJobJobSettingsSettingsTaskLibraryPypiResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            package=package,
            repo=repo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             package: str,
             repo: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("package", package)
        if repo is not None:
            _setter("repo", repo)

    @property
    @pulumi.getter
    def package(self) -> str:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        return pulumi.get(self, "repo")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterResult(dict):
    def __init__(__self__, *,
                 driver_instance_pool_id: str,
                 driver_node_type_id: str,
                 enable_elastic_disk: bool,
                 enable_local_disk_encryption: bool,
                 node_type_id: str,
                 num_workers: int,
                 spark_version: str,
                 apply_policy_default_values: Optional[bool] = None,
                 autoscale: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterAutoscaleResult'] = None,
                 autotermination_minutes: Optional[int] = None,
                 aws_attributes: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterAwsAttributesResult'] = None,
                 azure_attributes: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterAzureAttributesResult'] = None,
                 cluster_id: Optional[str] = None,
                 cluster_log_conf: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfResult'] = None,
                 cluster_mount_infos: Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoResult']] = None,
                 cluster_name: Optional[str] = None,
                 custom_tags: Optional[Mapping[str, Any]] = None,
                 data_security_mode: Optional[str] = None,
                 docker_image: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterDockerImageResult'] = None,
                 gcp_attributes: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterGcpAttributesResult'] = None,
                 idempotency_token: Optional[str] = None,
                 init_scripts: Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptResult']] = None,
                 instance_pool_id: Optional[str] = None,
                 policy_id: Optional[str] = None,
                 runtime_engine: Optional[str] = None,
                 single_user_name: Optional[str] = None,
                 spark_conf: Optional[Mapping[str, Any]] = None,
                 spark_env_vars: Optional[Mapping[str, Any]] = None,
                 ssh_public_keys: Optional[Sequence[str]] = None,
                 workload_type: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeResult'] = None):
        GetJobJobSettingsSettingsTaskNewClusterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            driver_instance_pool_id=driver_instance_pool_id,
            driver_node_type_id=driver_node_type_id,
            enable_elastic_disk=enable_elastic_disk,
            enable_local_disk_encryption=enable_local_disk_encryption,
            node_type_id=node_type_id,
            num_workers=num_workers,
            spark_version=spark_version,
            apply_policy_default_values=apply_policy_default_values,
            autoscale=autoscale,
            autotermination_minutes=autotermination_minutes,
            aws_attributes=aws_attributes,
            azure_attributes=azure_attributes,
            cluster_id=cluster_id,
            cluster_log_conf=cluster_log_conf,
            cluster_mount_infos=cluster_mount_infos,
            cluster_name=cluster_name,
            custom_tags=custom_tags,
            data_security_mode=data_security_mode,
            docker_image=docker_image,
            gcp_attributes=gcp_attributes,
            idempotency_token=idempotency_token,
            init_scripts=init_scripts,
            instance_pool_id=instance_pool_id,
            policy_id=policy_id,
            runtime_engine=runtime_engine,
            single_user_name=single_user_name,
            spark_conf=spark_conf,
            spark_env_vars=spark_env_vars,
            ssh_public_keys=ssh_public_keys,
            workload_type=workload_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             driver_instance_pool_id: str,
             driver_node_type_id: str,
             enable_elastic_disk: bool,
             enable_local_disk_encryption: bool,
             node_type_id: str,
             num_workers: int,
             spark_version: str,
             apply_policy_default_values: Optional[bool] = None,
             autoscale: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterAutoscaleResult'] = None,
             autotermination_minutes: Optional[int] = None,
             aws_attributes: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterAwsAttributesResult'] = None,
             azure_attributes: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterAzureAttributesResult'] = None,
             cluster_id: Optional[str] = None,
             cluster_log_conf: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfResult'] = None,
             cluster_mount_infos: Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoResult']] = None,
             cluster_name: Optional[str] = None,
             custom_tags: Optional[Mapping[str, Any]] = None,
             data_security_mode: Optional[str] = None,
             docker_image: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterDockerImageResult'] = None,
             gcp_attributes: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterGcpAttributesResult'] = None,
             idempotency_token: Optional[str] = None,
             init_scripts: Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptResult']] = None,
             instance_pool_id: Optional[str] = None,
             policy_id: Optional[str] = None,
             runtime_engine: Optional[str] = None,
             single_user_name: Optional[str] = None,
             spark_conf: Optional[Mapping[str, Any]] = None,
             spark_env_vars: Optional[Mapping[str, Any]] = None,
             ssh_public_keys: Optional[Sequence[str]] = None,
             workload_type: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'driverInstancePoolId' in kwargs:
            driver_instance_pool_id = kwargs['driverInstancePoolId']
        if 'driverNodeTypeId' in kwargs:
            driver_node_type_id = kwargs['driverNodeTypeId']
        if 'enableElasticDisk' in kwargs:
            enable_elastic_disk = kwargs['enableElasticDisk']
        if 'enableLocalDiskEncryption' in kwargs:
            enable_local_disk_encryption = kwargs['enableLocalDiskEncryption']
        if 'nodeTypeId' in kwargs:
            node_type_id = kwargs['nodeTypeId']
        if 'numWorkers' in kwargs:
            num_workers = kwargs['numWorkers']
        if 'sparkVersion' in kwargs:
            spark_version = kwargs['sparkVersion']
        if 'applyPolicyDefaultValues' in kwargs:
            apply_policy_default_values = kwargs['applyPolicyDefaultValues']
        if 'autoterminationMinutes' in kwargs:
            autotermination_minutes = kwargs['autoterminationMinutes']
        if 'awsAttributes' in kwargs:
            aws_attributes = kwargs['awsAttributes']
        if 'azureAttributes' in kwargs:
            azure_attributes = kwargs['azureAttributes']
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'clusterLogConf' in kwargs:
            cluster_log_conf = kwargs['clusterLogConf']
        if 'clusterMountInfos' in kwargs:
            cluster_mount_infos = kwargs['clusterMountInfos']
        if 'clusterName' in kwargs:
            cluster_name = kwargs['clusterName']
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']
        if 'dataSecurityMode' in kwargs:
            data_security_mode = kwargs['dataSecurityMode']
        if 'dockerImage' in kwargs:
            docker_image = kwargs['dockerImage']
        if 'gcpAttributes' in kwargs:
            gcp_attributes = kwargs['gcpAttributes']
        if 'idempotencyToken' in kwargs:
            idempotency_token = kwargs['idempotencyToken']
        if 'initScripts' in kwargs:
            init_scripts = kwargs['initScripts']
        if 'instancePoolId' in kwargs:
            instance_pool_id = kwargs['instancePoolId']
        if 'policyId' in kwargs:
            policy_id = kwargs['policyId']
        if 'runtimeEngine' in kwargs:
            runtime_engine = kwargs['runtimeEngine']
        if 'singleUserName' in kwargs:
            single_user_name = kwargs['singleUserName']
        if 'sparkConf' in kwargs:
            spark_conf = kwargs['sparkConf']
        if 'sparkEnvVars' in kwargs:
            spark_env_vars = kwargs['sparkEnvVars']
        if 'sshPublicKeys' in kwargs:
            ssh_public_keys = kwargs['sshPublicKeys']
        if 'workloadType' in kwargs:
            workload_type = kwargs['workloadType']

        _setter("driver_instance_pool_id", driver_instance_pool_id)
        _setter("driver_node_type_id", driver_node_type_id)
        _setter("enable_elastic_disk", enable_elastic_disk)
        _setter("enable_local_disk_encryption", enable_local_disk_encryption)
        _setter("node_type_id", node_type_id)
        _setter("num_workers", num_workers)
        _setter("spark_version", spark_version)
        if apply_policy_default_values is not None:
            _setter("apply_policy_default_values", apply_policy_default_values)
        if autoscale is not None:
            _setter("autoscale", autoscale)
        if autotermination_minutes is not None:
            _setter("autotermination_minutes", autotermination_minutes)
        if aws_attributes is not None:
            _setter("aws_attributes", aws_attributes)
        if azure_attributes is not None:
            _setter("azure_attributes", azure_attributes)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if cluster_log_conf is not None:
            _setter("cluster_log_conf", cluster_log_conf)
        if cluster_mount_infos is not None:
            _setter("cluster_mount_infos", cluster_mount_infos)
        if cluster_name is not None:
            _setter("cluster_name", cluster_name)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)
        if data_security_mode is not None:
            _setter("data_security_mode", data_security_mode)
        if docker_image is not None:
            _setter("docker_image", docker_image)
        if gcp_attributes is not None:
            _setter("gcp_attributes", gcp_attributes)
        if idempotency_token is not None:
            _setter("idempotency_token", idempotency_token)
        if init_scripts is not None:
            _setter("init_scripts", init_scripts)
        if instance_pool_id is not None:
            _setter("instance_pool_id", instance_pool_id)
        if policy_id is not None:
            _setter("policy_id", policy_id)
        if runtime_engine is not None:
            _setter("runtime_engine", runtime_engine)
        if single_user_name is not None:
            _setter("single_user_name", single_user_name)
        if spark_conf is not None:
            _setter("spark_conf", spark_conf)
        if spark_env_vars is not None:
            _setter("spark_env_vars", spark_env_vars)
        if ssh_public_keys is not None:
            _setter("ssh_public_keys", ssh_public_keys)
        if workload_type is not None:
            _setter("workload_type", workload_type)

    @property
    @pulumi.getter(name="driverInstancePoolId")
    def driver_instance_pool_id(self) -> str:
        return pulumi.get(self, "driver_instance_pool_id")

    @property
    @pulumi.getter(name="driverNodeTypeId")
    def driver_node_type_id(self) -> str:
        return pulumi.get(self, "driver_node_type_id")

    @property
    @pulumi.getter(name="enableElasticDisk")
    def enable_elastic_disk(self) -> bool:
        return pulumi.get(self, "enable_elastic_disk")

    @property
    @pulumi.getter(name="enableLocalDiskEncryption")
    def enable_local_disk_encryption(self) -> bool:
        return pulumi.get(self, "enable_local_disk_encryption")

    @property
    @pulumi.getter(name="nodeTypeId")
    def node_type_id(self) -> str:
        return pulumi.get(self, "node_type_id")

    @property
    @pulumi.getter(name="numWorkers")
    def num_workers(self) -> int:
        return pulumi.get(self, "num_workers")

    @property
    @pulumi.getter(name="sparkVersion")
    def spark_version(self) -> str:
        return pulumi.get(self, "spark_version")

    @property
    @pulumi.getter(name="applyPolicyDefaultValues")
    def apply_policy_default_values(self) -> Optional[bool]:
        return pulumi.get(self, "apply_policy_default_values")

    @property
    @pulumi.getter
    def autoscale(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterAutoscaleResult']:
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="autoterminationMinutes")
    def autotermination_minutes(self) -> Optional[int]:
        return pulumi.get(self, "autotermination_minutes")

    @property
    @pulumi.getter(name="awsAttributes")
    def aws_attributes(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterAwsAttributesResult']:
        return pulumi.get(self, "aws_attributes")

    @property
    @pulumi.getter(name="azureAttributes")
    def azure_attributes(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterAzureAttributesResult']:
        return pulumi.get(self, "azure_attributes")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterLogConf")
    def cluster_log_conf(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfResult']:
        return pulumi.get(self, "cluster_log_conf")

    @property
    @pulumi.getter(name="clusterMountInfos")
    def cluster_mount_infos(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoResult']]:
        return pulumi.get(self, "cluster_mount_infos")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_tags")

    @property
    @pulumi.getter(name="dataSecurityMode")
    def data_security_mode(self) -> Optional[str]:
        return pulumi.get(self, "data_security_mode")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterDockerImageResult']:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter(name="gcpAttributes")
    def gcp_attributes(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterGcpAttributesResult']:
        return pulumi.get(self, "gcp_attributes")

    @property
    @pulumi.getter(name="idempotencyToken")
    def idempotency_token(self) -> Optional[str]:
        return pulumi.get(self, "idempotency_token")

    @property
    @pulumi.getter(name="initScripts")
    def init_scripts(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptResult']]:
        return pulumi.get(self, "init_scripts")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="runtimeEngine")
    def runtime_engine(self) -> Optional[str]:
        return pulumi.get(self, "runtime_engine")

    @property
    @pulumi.getter(name="singleUserName")
    def single_user_name(self) -> Optional[str]:
        return pulumi.get(self, "single_user_name")

    @property
    @pulumi.getter(name="sparkConf")
    def spark_conf(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_conf")

    @property
    @pulumi.getter(name="sparkEnvVars")
    def spark_env_vars(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "spark_env_vars")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeResult']:
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterAutoscaleResult(dict):
    def __init__(__self__, *,
                 max_workers: Optional[int] = None,
                 min_workers: Optional[int] = None):
        GetJobJobSettingsSettingsTaskNewClusterAutoscaleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_workers=max_workers,
            min_workers=min_workers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_workers: Optional[int] = None,
             min_workers: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxWorkers' in kwargs:
            max_workers = kwargs['maxWorkers']
        if 'minWorkers' in kwargs:
            min_workers = kwargs['minWorkers']

        if max_workers is not None:
            _setter("max_workers", max_workers)
        if min_workers is not None:
            _setter("min_workers", min_workers)

    @property
    @pulumi.getter(name="maxWorkers")
    def max_workers(self) -> Optional[int]:
        return pulumi.get(self, "max_workers")

    @property
    @pulumi.getter(name="minWorkers")
    def min_workers(self) -> Optional[int]:
        return pulumi.get(self, "min_workers")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterAwsAttributesResult(dict):
    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 ebs_volume_count: Optional[int] = None,
                 ebs_volume_size: Optional[int] = None,
                 ebs_volume_type: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 instance_profile_arn: Optional[str] = None,
                 spot_bid_price_percent: Optional[int] = None,
                 zone_id: Optional[str] = None):
        GetJobJobSettingsSettingsTaskNewClusterAwsAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            ebs_volume_count=ebs_volume_count,
            ebs_volume_size=ebs_volume_size,
            ebs_volume_type=ebs_volume_type,
            first_on_demand=first_on_demand,
            instance_profile_arn=instance_profile_arn,
            spot_bid_price_percent=spot_bid_price_percent,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             ebs_volume_count: Optional[int] = None,
             ebs_volume_size: Optional[int] = None,
             ebs_volume_type: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             instance_profile_arn: Optional[str] = None,
             spot_bid_price_percent: Optional[int] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ebsVolumeCount' in kwargs:
            ebs_volume_count = kwargs['ebsVolumeCount']
        if 'ebsVolumeSize' in kwargs:
            ebs_volume_size = kwargs['ebsVolumeSize']
        if 'ebsVolumeType' in kwargs:
            ebs_volume_type = kwargs['ebsVolumeType']
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'instanceProfileArn' in kwargs:
            instance_profile_arn = kwargs['instanceProfileArn']
        if 'spotBidPricePercent' in kwargs:
            spot_bid_price_percent = kwargs['spotBidPricePercent']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if ebs_volume_count is not None:
            _setter("ebs_volume_count", ebs_volume_count)
        if ebs_volume_size is not None:
            _setter("ebs_volume_size", ebs_volume_size)
        if ebs_volume_type is not None:
            _setter("ebs_volume_type", ebs_volume_type)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if instance_profile_arn is not None:
            _setter("instance_profile_arn", instance_profile_arn)
        if spot_bid_price_percent is not None:
            _setter("spot_bid_price_percent", spot_bid_price_percent)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="ebsVolumeCount")
    def ebs_volume_count(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_count")

    @property
    @pulumi.getter(name="ebsVolumeSize")
    def ebs_volume_size(self) -> Optional[int]:
        return pulumi.get(self, "ebs_volume_size")

    @property
    @pulumi.getter(name="ebsVolumeType")
    def ebs_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "ebs_volume_type")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[str]:
        return pulumi.get(self, "instance_profile_arn")

    @property
    @pulumi.getter(name="spotBidPricePercent")
    def spot_bid_price_percent(self) -> Optional[int]:
        return pulumi.get(self, "spot_bid_price_percent")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterAzureAttributesResult(dict):
    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 first_on_demand: Optional[int] = None,
                 spot_bid_max_price: Optional[float] = None):
        GetJobJobSettingsSettingsTaskNewClusterAzureAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            first_on_demand=first_on_demand,
            spot_bid_max_price=spot_bid_max_price,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             first_on_demand: Optional[int] = None,
             spot_bid_max_price: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'firstOnDemand' in kwargs:
            first_on_demand = kwargs['firstOnDemand']
        if 'spotBidMaxPrice' in kwargs:
            spot_bid_max_price = kwargs['spotBidMaxPrice']

        if availability is not None:
            _setter("availability", availability)
        if first_on_demand is not None:
            _setter("first_on_demand", first_on_demand)
        if spot_bid_max_price is not None:
            _setter("spot_bid_max_price", spot_bid_max_price)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="firstOnDemand")
    def first_on_demand(self) -> Optional[int]:
        return pulumi.get(self, "first_on_demand")

    @property
    @pulumi.getter(name="spotBidMaxPrice")
    def spot_bid_max_price(self) -> Optional[float]:
        return pulumi.get(self, "spot_bid_max_price")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterClusterLogConfResult(dict):
    def __init__(__self__, *,
                 dbfs: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfsResult'] = None,
                 s3: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3Result'] = None):
        GetJobJobSettingsSettingsTaskNewClusterClusterLogConfResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dbfs=dbfs,
            s3=s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dbfs: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfsResult'] = None,
             s3: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3Result'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if dbfs is not None:
            _setter("dbfs", dbfs)
        if s3 is not None:
            _setter("s3", s3)

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfsResult']:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3Result']:
        return pulumi.get(self, "s3")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfsResult(dict):
    def __init__(__self__, *,
                 destination: str):
        GetJobJobSettingsSettingsTaskNewClusterClusterLogConfDbfsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3Result(dict):
    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        GetJobJobSettingsSettingsTaskNewClusterClusterLogConfS3Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoResult(dict):
    def __init__(__self__, *,
                 local_mount_dir_path: str,
                 network_filesystem_info: 'outputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfoResult',
                 remote_mount_dir_path: Optional[str] = None):
        GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            local_mount_dir_path=local_mount_dir_path,
            network_filesystem_info=network_filesystem_info,
            remote_mount_dir_path=remote_mount_dir_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             local_mount_dir_path: str,
             network_filesystem_info: 'outputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfoResult',
             remote_mount_dir_path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'localMountDirPath' in kwargs:
            local_mount_dir_path = kwargs['localMountDirPath']
        if 'networkFilesystemInfo' in kwargs:
            network_filesystem_info = kwargs['networkFilesystemInfo']
        if 'remoteMountDirPath' in kwargs:
            remote_mount_dir_path = kwargs['remoteMountDirPath']

        _setter("local_mount_dir_path", local_mount_dir_path)
        _setter("network_filesystem_info", network_filesystem_info)
        if remote_mount_dir_path is not None:
            _setter("remote_mount_dir_path", remote_mount_dir_path)

    @property
    @pulumi.getter(name="localMountDirPath")
    def local_mount_dir_path(self) -> str:
        return pulumi.get(self, "local_mount_dir_path")

    @property
    @pulumi.getter(name="networkFilesystemInfo")
    def network_filesystem_info(self) -> 'outputs.GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfoResult':
        return pulumi.get(self, "network_filesystem_info")

    @property
    @pulumi.getter(name="remoteMountDirPath")
    def remote_mount_dir_path(self) -> Optional[str]:
        return pulumi.get(self, "remote_mount_dir_path")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfoResult(dict):
    def __init__(__self__, *,
                 server_address: str,
                 mount_options: Optional[str] = None):
        GetJobJobSettingsSettingsTaskNewClusterClusterMountInfoNetworkFilesystemInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            server_address=server_address,
            mount_options=mount_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             server_address: str,
             mount_options: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serverAddress' in kwargs:
            server_address = kwargs['serverAddress']
        if 'mountOptions' in kwargs:
            mount_options = kwargs['mountOptions']

        _setter("server_address", server_address)
        if mount_options is not None:
            _setter("mount_options", mount_options)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> str:
        return pulumi.get(self, "server_address")

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[str]:
        return pulumi.get(self, "mount_options")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterDockerImageResult(dict):
    def __init__(__self__, *,
                 url: str,
                 basic_auth: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuthResult'] = None):
        GetJobJobSettingsSettingsTaskNewClusterDockerImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            basic_auth=basic_auth,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             basic_auth: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuthResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'basicAuth' in kwargs:
            basic_auth = kwargs['basicAuth']

        _setter("url", url)
        if basic_auth is not None:
            _setter("basic_auth", basic_auth)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuthResult']:
        return pulumi.get(self, "basic_auth")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuthResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        GetJobJobSettingsSettingsTaskNewClusterDockerImageBasicAuthResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterGcpAttributesResult(dict):
    def __init__(__self__, *,
                 availability: Optional[str] = None,
                 boot_disk_size: Optional[int] = None,
                 google_service_account: Optional[str] = None,
                 local_ssd_count: Optional[int] = None,
                 use_preemptible_executors: Optional[bool] = None,
                 zone_id: Optional[str] = None):
        GetJobJobSettingsSettingsTaskNewClusterGcpAttributesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
            boot_disk_size=boot_disk_size,
            google_service_account=google_service_account,
            local_ssd_count=local_ssd_count,
            use_preemptible_executors=use_preemptible_executors,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional[str] = None,
             boot_disk_size: Optional[int] = None,
             google_service_account: Optional[str] = None,
             local_ssd_count: Optional[int] = None,
             use_preemptible_executors: Optional[bool] = None,
             zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bootDiskSize' in kwargs:
            boot_disk_size = kwargs['bootDiskSize']
        if 'googleServiceAccount' in kwargs:
            google_service_account = kwargs['googleServiceAccount']
        if 'localSsdCount' in kwargs:
            local_ssd_count = kwargs['localSsdCount']
        if 'usePreemptibleExecutors' in kwargs:
            use_preemptible_executors = kwargs['usePreemptibleExecutors']
        if 'zoneId' in kwargs:
            zone_id = kwargs['zoneId']

        if availability is not None:
            _setter("availability", availability)
        if boot_disk_size is not None:
            _setter("boot_disk_size", boot_disk_size)
        if google_service_account is not None:
            _setter("google_service_account", google_service_account)
        if local_ssd_count is not None:
            _setter("local_ssd_count", local_ssd_count)
        if use_preemptible_executors is not None:
            _setter("use_preemptible_executors", use_preemptible_executors)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[int]:
        return pulumi.get(self, "boot_disk_size")

    @property
    @pulumi.getter(name="googleServiceAccount")
    def google_service_account(self) -> Optional[str]:
        return pulumi.get(self, "google_service_account")

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[int]:
        return pulumi.get(self, "local_ssd_count")

    @property
    @pulumi.getter(name="usePreemptibleExecutors")
    def use_preemptible_executors(self) -> Optional[bool]:
        return pulumi.get(self, "use_preemptible_executors")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterInitScriptResult(dict):
    def __init__(__self__, *,
                 abfss: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfssResult'] = None,
                 dbfs: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfsResult'] = None,
                 file: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptFileResult'] = None,
                 gcs: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptGcsResult'] = None,
                 s3: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptS3Result'] = None,
                 volumes: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumesResult'] = None,
                 workspace: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspaceResult'] = None):
        GetJobJobSettingsSettingsTaskNewClusterInitScriptResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abfss=abfss,
            dbfs=dbfs,
            file=file,
            gcs=gcs,
            s3=s3,
            volumes=volumes,
            workspace=workspace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abfss: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfssResult'] = None,
             dbfs: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfsResult'] = None,
             file: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptFileResult'] = None,
             gcs: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptGcsResult'] = None,
             s3: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptS3Result'] = None,
             volumes: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumesResult'] = None,
             workspace: Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspaceResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if abfss is not None:
            _setter("abfss", abfss)
        if dbfs is not None:
            _setter("dbfs", dbfs)
        if file is not None:
            _setter("file", file)
        if gcs is not None:
            _setter("gcs", gcs)
        if s3 is not None:
            _setter("s3", s3)
        if volumes is not None:
            _setter("volumes", volumes)
        if workspace is not None:
            _setter("workspace", workspace)

    @property
    @pulumi.getter
    def abfss(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfssResult']:
        return pulumi.get(self, "abfss")

    @property
    @pulumi.getter
    def dbfs(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfsResult']:
        return pulumi.get(self, "dbfs")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptFileResult']:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def gcs(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptGcsResult']:
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptS3Result']:
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter
    def volumes(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumesResult']:
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def workspace(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspaceResult']:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfssResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsTaskNewClusterInitScriptAbfssResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfsResult(dict):
    def __init__(__self__, *,
                 destination: str):
        GetJobJobSettingsSettingsTaskNewClusterInitScriptDbfsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterInitScriptFileResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsTaskNewClusterInitScriptFileResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterInitScriptGcsResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsTaskNewClusterInitScriptGcsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterInitScriptS3Result(dict):
    def __init__(__self__, *,
                 destination: str,
                 canned_acl: Optional[str] = None,
                 enable_encryption: Optional[bool] = None,
                 encryption_type: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 kms_key: Optional[str] = None,
                 region: Optional[str] = None):
        GetJobJobSettingsSettingsTaskNewClusterInitScriptS3Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            canned_acl=canned_acl,
            enable_encryption=enable_encryption,
            encryption_type=encryption_type,
            endpoint=endpoint,
            kms_key=kms_key,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: str,
             canned_acl: Optional[str] = None,
             enable_encryption: Optional[bool] = None,
             encryption_type: Optional[str] = None,
             endpoint: Optional[str] = None,
             kms_key: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cannedAcl' in kwargs:
            canned_acl = kwargs['cannedAcl']
        if 'enableEncryption' in kwargs:
            enable_encryption = kwargs['enableEncryption']
        if 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        _setter("destination", destination)
        if canned_acl is not None:
            _setter("canned_acl", canned_acl)
        if enable_encryption is not None:
            _setter("enable_encryption", enable_encryption)
        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="cannedAcl")
    def canned_acl(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumesResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsTaskNewClusterInitScriptVolumesResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspaceResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None):
        GetJobJobSettingsSettingsTaskNewClusterInitScriptWorkspaceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if destination is not None:
            _setter("destination", destination)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeResult(dict):
    def __init__(__self__, *,
                 clients: 'outputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClientsResult'):
        GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            clients=clients,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             clients: 'outputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClientsResult',
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("clients", clients)

    @property
    @pulumi.getter
    def clients(self) -> 'outputs.GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClientsResult':
        return pulumi.get(self, "clients")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClientsResult(dict):
    def __init__(__self__, *,
                 jobs: Optional[bool] = None,
                 notebooks: Optional[bool] = None):
        GetJobJobSettingsSettingsTaskNewClusterWorkloadTypeClientsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jobs=jobs,
            notebooks=notebooks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jobs: Optional[bool] = None,
             notebooks: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if jobs is not None:
            _setter("jobs", jobs)
        if notebooks is not None:
            _setter("notebooks", notebooks)

    @property
    @pulumi.getter
    def jobs(self) -> Optional[bool]:
        return pulumi.get(self, "jobs")

    @property
    @pulumi.getter
    def notebooks(self) -> Optional[bool]:
        return pulumi.get(self, "notebooks")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNotebookTaskResult(dict):
    def __init__(__self__, *,
                 notebook_path: str,
                 base_parameters: Optional[Mapping[str, Any]] = None,
                 source: Optional[str] = None):
        GetJobJobSettingsSettingsTaskNotebookTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            notebook_path=notebook_path,
            base_parameters=base_parameters,
            source=source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             notebook_path: str,
             base_parameters: Optional[Mapping[str, Any]] = None,
             source: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'notebookPath' in kwargs:
            notebook_path = kwargs['notebookPath']
        if 'baseParameters' in kwargs:
            base_parameters = kwargs['baseParameters']

        _setter("notebook_path", notebook_path)
        if base_parameters is not None:
            _setter("base_parameters", base_parameters)
        if source is not None:
            _setter("source", source)

    @property
    @pulumi.getter(name="notebookPath")
    def notebook_path(self) -> str:
        return pulumi.get(self, "notebook_path")

    @property
    @pulumi.getter(name="baseParameters")
    def base_parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "base_parameters")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskNotificationSettingsResult(dict):
    def __init__(__self__, *,
                 alert_on_last_attempt: Optional[bool] = None,
                 no_alert_for_canceled_runs: Optional[bool] = None,
                 no_alert_for_skipped_runs: Optional[bool] = None):
        GetJobJobSettingsSettingsTaskNotificationSettingsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert_on_last_attempt=alert_on_last_attempt,
            no_alert_for_canceled_runs=no_alert_for_canceled_runs,
            no_alert_for_skipped_runs=no_alert_for_skipped_runs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert_on_last_attempt: Optional[bool] = None,
             no_alert_for_canceled_runs: Optional[bool] = None,
             no_alert_for_skipped_runs: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'alertOnLastAttempt' in kwargs:
            alert_on_last_attempt = kwargs['alertOnLastAttempt']
        if 'noAlertForCanceledRuns' in kwargs:
            no_alert_for_canceled_runs = kwargs['noAlertForCanceledRuns']
        if 'noAlertForSkippedRuns' in kwargs:
            no_alert_for_skipped_runs = kwargs['noAlertForSkippedRuns']

        if alert_on_last_attempt is not None:
            _setter("alert_on_last_attempt", alert_on_last_attempt)
        if no_alert_for_canceled_runs is not None:
            _setter("no_alert_for_canceled_runs", no_alert_for_canceled_runs)
        if no_alert_for_skipped_runs is not None:
            _setter("no_alert_for_skipped_runs", no_alert_for_skipped_runs)

    @property
    @pulumi.getter(name="alertOnLastAttempt")
    def alert_on_last_attempt(self) -> Optional[bool]:
        return pulumi.get(self, "alert_on_last_attempt")

    @property
    @pulumi.getter(name="noAlertForCanceledRuns")
    def no_alert_for_canceled_runs(self) -> Optional[bool]:
        return pulumi.get(self, "no_alert_for_canceled_runs")

    @property
    @pulumi.getter(name="noAlertForSkippedRuns")
    def no_alert_for_skipped_runs(self) -> Optional[bool]:
        return pulumi.get(self, "no_alert_for_skipped_runs")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskPipelineTaskResult(dict):
    def __init__(__self__, *,
                 pipeline_id: str,
                 full_refresh: Optional[bool] = None):
        GetJobJobSettingsSettingsTaskPipelineTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pipeline_id=pipeline_id,
            full_refresh=full_refresh,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pipeline_id: str,
             full_refresh: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'pipelineId' in kwargs:
            pipeline_id = kwargs['pipelineId']
        if 'fullRefresh' in kwargs:
            full_refresh = kwargs['fullRefresh']

        _setter("pipeline_id", pipeline_id)
        if full_refresh is not None:
            _setter("full_refresh", full_refresh)

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> str:
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="fullRefresh")
    def full_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "full_refresh")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskPythonWheelTaskResult(dict):
    def __init__(__self__, *,
                 entry_point: Optional[str] = None,
                 named_parameters: Optional[Mapping[str, Any]] = None,
                 package_name: Optional[str] = None,
                 parameters: Optional[Sequence[str]] = None):
        GetJobJobSettingsSettingsTaskPythonWheelTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            entry_point=entry_point,
            named_parameters=named_parameters,
            package_name=package_name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             entry_point: Optional[str] = None,
             named_parameters: Optional[Mapping[str, Any]] = None,
             package_name: Optional[str] = None,
             parameters: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'entryPoint' in kwargs:
            entry_point = kwargs['entryPoint']
        if 'namedParameters' in kwargs:
            named_parameters = kwargs['namedParameters']
        if 'packageName' in kwargs:
            package_name = kwargs['packageName']

        if entry_point is not None:
            _setter("entry_point", entry_point)
        if named_parameters is not None:
            _setter("named_parameters", named_parameters)
        if package_name is not None:
            _setter("package_name", package_name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter(name="entryPoint")
    def entry_point(self) -> Optional[str]:
        return pulumi.get(self, "entry_point")

    @property
    @pulumi.getter(name="namedParameters")
    def named_parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "named_parameters")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[str]:
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskRunJobTaskResult(dict):
    def __init__(__self__, *,
                 job_id: int,
                 job_parameters: Optional[Mapping[str, Any]] = None):
        GetJobJobSettingsSettingsTaskRunJobTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            job_id=job_id,
            job_parameters=job_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             job_id: int,
             job_parameters: Optional[Mapping[str, Any]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jobId' in kwargs:
            job_id = kwargs['jobId']
        if 'jobParameters' in kwargs:
            job_parameters = kwargs['jobParameters']

        _setter("job_id", job_id)
        if job_parameters is not None:
            _setter("job_parameters", job_parameters)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> int:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobParameters")
    def job_parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "job_parameters")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskSparkJarTaskResult(dict):
    def __init__(__self__, *,
                 jar_uri: Optional[str] = None,
                 main_class_name: Optional[str] = None,
                 parameters: Optional[Sequence[str]] = None):
        GetJobJobSettingsSettingsTaskSparkJarTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jar_uri=jar_uri,
            main_class_name=main_class_name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jar_uri: Optional[str] = None,
             main_class_name: Optional[str] = None,
             parameters: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jarUri' in kwargs:
            jar_uri = kwargs['jarUri']
        if 'mainClassName' in kwargs:
            main_class_name = kwargs['mainClassName']

        if jar_uri is not None:
            _setter("jar_uri", jar_uri)
        if main_class_name is not None:
            _setter("main_class_name", main_class_name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter(name="jarUri")
    def jar_uri(self) -> Optional[str]:
        return pulumi.get(self, "jar_uri")

    @property
    @pulumi.getter(name="mainClassName")
    def main_class_name(self) -> Optional[str]:
        return pulumi.get(self, "main_class_name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskSparkPythonTaskResult(dict):
    def __init__(__self__, *,
                 python_file: str,
                 parameters: Optional[Sequence[str]] = None,
                 source: Optional[str] = None):
        GetJobJobSettingsSettingsTaskSparkPythonTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            python_file=python_file,
            parameters=parameters,
            source=source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             python_file: str,
             parameters: Optional[Sequence[str]] = None,
             source: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'pythonFile' in kwargs:
            python_file = kwargs['pythonFile']

        _setter("python_file", python_file)
        if parameters is not None:
            _setter("parameters", parameters)
        if source is not None:
            _setter("source", source)

    @property
    @pulumi.getter(name="pythonFile")
    def python_file(self) -> str:
        return pulumi.get(self, "python_file")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskSparkSubmitTaskResult(dict):
    def __init__(__self__, *,
                 parameters: Optional[Sequence[str]] = None):
        GetJobJobSettingsSettingsTaskSparkSubmitTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameters: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskSqlTaskResult(dict):
    def __init__(__self__, *,
                 alert: Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskAlertResult'] = None,
                 dashboard: Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskDashboardResult'] = None,
                 file: Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskFileResult'] = None,
                 parameters: Optional[Mapping[str, Any]] = None,
                 query: Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskQueryResult'] = None,
                 warehouse_id: Optional[str] = None):
        GetJobJobSettingsSettingsTaskSqlTaskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert=alert,
            dashboard=dashboard,
            file=file,
            parameters=parameters,
            query=query,
            warehouse_id=warehouse_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert: Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskAlertResult'] = None,
             dashboard: Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskDashboardResult'] = None,
             file: Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskFileResult'] = None,
             parameters: Optional[Mapping[str, Any]] = None,
             query: Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskQueryResult'] = None,
             warehouse_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'warehouseId' in kwargs:
            warehouse_id = kwargs['warehouseId']

        if alert is not None:
            _setter("alert", alert)
        if dashboard is not None:
            _setter("dashboard", dashboard)
        if file is not None:
            _setter("file", file)
        if parameters is not None:
            _setter("parameters", parameters)
        if query is not None:
            _setter("query", query)
        if warehouse_id is not None:
            _setter("warehouse_id", warehouse_id)

    @property
    @pulumi.getter
    def alert(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskAlertResult']:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def dashboard(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskDashboardResult']:
        return pulumi.get(self, "dashboard")

    @property
    @pulumi.getter
    def file(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskFileResult']:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def query(self) -> Optional['outputs.GetJobJobSettingsSettingsTaskSqlTaskQueryResult']:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="warehouseId")
    def warehouse_id(self) -> Optional[str]:
        return pulumi.get(self, "warehouse_id")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskSqlTaskAlertResult(dict):
    def __init__(__self__, *,
                 alert_id: str,
                 subscriptions: Sequence['outputs.GetJobJobSettingsSettingsTaskSqlTaskAlertSubscriptionResult'],
                 pause_subscriptions: Optional[bool] = None):
        GetJobJobSettingsSettingsTaskSqlTaskAlertResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alert_id=alert_id,
            subscriptions=subscriptions,
            pause_subscriptions=pause_subscriptions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alert_id: str,
             subscriptions: Sequence['outputs.GetJobJobSettingsSettingsTaskSqlTaskAlertSubscriptionResult'],
             pause_subscriptions: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'alertId' in kwargs:
            alert_id = kwargs['alertId']
        if 'pauseSubscriptions' in kwargs:
            pause_subscriptions = kwargs['pauseSubscriptions']

        _setter("alert_id", alert_id)
        _setter("subscriptions", subscriptions)
        if pause_subscriptions is not None:
            _setter("pause_subscriptions", pause_subscriptions)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> str:
        return pulumi.get(self, "alert_id")

    @property
    @pulumi.getter
    def subscriptions(self) -> Sequence['outputs.GetJobJobSettingsSettingsTaskSqlTaskAlertSubscriptionResult']:
        return pulumi.get(self, "subscriptions")

    @property
    @pulumi.getter(name="pauseSubscriptions")
    def pause_subscriptions(self) -> Optional[bool]:
        return pulumi.get(self, "pause_subscriptions")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskSqlTaskAlertSubscriptionResult(dict):
    def __init__(__self__, *,
                 destination_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        GetJobJobSettingsSettingsTaskSqlTaskAlertSubscriptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_id=destination_id,
            user_name=user_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_id: Optional[str] = None,
             user_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'destinationId' in kwargs:
            destination_id = kwargs['destinationId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']

        if destination_id is not None:
            _setter("destination_id", destination_id)
        if user_name is not None:
            _setter("user_name", user_name)

    @property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskSqlTaskDashboardResult(dict):
    def __init__(__self__, *,
                 dashboard_id: str,
                 custom_subject: Optional[str] = None,
                 pause_subscriptions: Optional[bool] = None,
                 subscriptions: Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscriptionResult']] = None):
        GetJobJobSettingsSettingsTaskSqlTaskDashboardResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dashboard_id=dashboard_id,
            custom_subject=custom_subject,
            pause_subscriptions=pause_subscriptions,
            subscriptions=subscriptions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dashboard_id: str,
             custom_subject: Optional[str] = None,
             pause_subscriptions: Optional[bool] = None,
             subscriptions: Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscriptionResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dashboardId' in kwargs:
            dashboard_id = kwargs['dashboardId']
        if 'customSubject' in kwargs:
            custom_subject = kwargs['customSubject']
        if 'pauseSubscriptions' in kwargs:
            pause_subscriptions = kwargs['pauseSubscriptions']

        _setter("dashboard_id", dashboard_id)
        if custom_subject is not None:
            _setter("custom_subject", custom_subject)
        if pause_subscriptions is not None:
            _setter("pause_subscriptions", pause_subscriptions)
        if subscriptions is not None:
            _setter("subscriptions", subscriptions)

    @property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> str:
        return pulumi.get(self, "dashboard_id")

    @property
    @pulumi.getter(name="customSubject")
    def custom_subject(self) -> Optional[str]:
        return pulumi.get(self, "custom_subject")

    @property
    @pulumi.getter(name="pauseSubscriptions")
    def pause_subscriptions(self) -> Optional[bool]:
        return pulumi.get(self, "pause_subscriptions")

    @property
    @pulumi.getter
    def subscriptions(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscriptionResult']]:
        return pulumi.get(self, "subscriptions")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscriptionResult(dict):
    def __init__(__self__, *,
                 destination_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        GetJobJobSettingsSettingsTaskSqlTaskDashboardSubscriptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_id=destination_id,
            user_name=user_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_id: Optional[str] = None,
             user_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'destinationId' in kwargs:
            destination_id = kwargs['destinationId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']

        if destination_id is not None:
            _setter("destination_id", destination_id)
        if user_name is not None:
            _setter("user_name", user_name)

    @property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskSqlTaskFileResult(dict):
    def __init__(__self__, *,
                 path: str):
        GetJobJobSettingsSettingsTaskSqlTaskFileResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetJobJobSettingsSettingsTaskSqlTaskQueryResult(dict):
    def __init__(__self__, *,
                 query_id: str):
        GetJobJobSettingsSettingsTaskSqlTaskQueryResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            query_id=query_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             query_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'queryId' in kwargs:
            query_id = kwargs['queryId']

        _setter("query_id", query_id)

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> str:
        return pulumi.get(self, "query_id")


@pulumi.output_type
class GetJobJobSettingsSettingsTriggerResult(dict):
    def __init__(__self__, *,
                 file_arrival: 'outputs.GetJobJobSettingsSettingsTriggerFileArrivalResult',
                 pause_status: Optional[str] = None):
        GetJobJobSettingsSettingsTriggerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            file_arrival=file_arrival,
            pause_status=pause_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             file_arrival: 'outputs.GetJobJobSettingsSettingsTriggerFileArrivalResult',
             pause_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fileArrival' in kwargs:
            file_arrival = kwargs['fileArrival']
        if 'pauseStatus' in kwargs:
            pause_status = kwargs['pauseStatus']

        _setter("file_arrival", file_arrival)
        if pause_status is not None:
            _setter("pause_status", pause_status)

    @property
    @pulumi.getter(name="fileArrival")
    def file_arrival(self) -> 'outputs.GetJobJobSettingsSettingsTriggerFileArrivalResult':
        return pulumi.get(self, "file_arrival")

    @property
    @pulumi.getter(name="pauseStatus")
    def pause_status(self) -> Optional[str]:
        return pulumi.get(self, "pause_status")


@pulumi.output_type
class GetJobJobSettingsSettingsTriggerFileArrivalResult(dict):
    def __init__(__self__, *,
                 url: str,
                 min_time_between_triggers_seconds: Optional[int] = None,
                 wait_after_last_change_seconds: Optional[int] = None):
        GetJobJobSettingsSettingsTriggerFileArrivalResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            min_time_between_triggers_seconds=min_time_between_triggers_seconds,
            wait_after_last_change_seconds=wait_after_last_change_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             min_time_between_triggers_seconds: Optional[int] = None,
             wait_after_last_change_seconds: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'minTimeBetweenTriggersSeconds' in kwargs:
            min_time_between_triggers_seconds = kwargs['minTimeBetweenTriggersSeconds']
        if 'waitAfterLastChangeSeconds' in kwargs:
            wait_after_last_change_seconds = kwargs['waitAfterLastChangeSeconds']

        _setter("url", url)
        if min_time_between_triggers_seconds is not None:
            _setter("min_time_between_triggers_seconds", min_time_between_triggers_seconds)
        if wait_after_last_change_seconds is not None:
            _setter("wait_after_last_change_seconds", wait_after_last_change_seconds)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="minTimeBetweenTriggersSeconds")
    def min_time_between_triggers_seconds(self) -> Optional[int]:
        return pulumi.get(self, "min_time_between_triggers_seconds")

    @property
    @pulumi.getter(name="waitAfterLastChangeSeconds")
    def wait_after_last_change_seconds(self) -> Optional[int]:
        return pulumi.get(self, "wait_after_last_change_seconds")


@pulumi.output_type
class GetJobJobSettingsSettingsWebhookNotificationsResult(dict):
    def __init__(__self__, *,
                 on_duration_warning_threshold_exceededs: Optional[Sequence['outputs.GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceededResult']] = None,
                 on_failures: Optional[Sequence['outputs.GetJobJobSettingsSettingsWebhookNotificationsOnFailureResult']] = None,
                 on_starts: Optional[Sequence['outputs.GetJobJobSettingsSettingsWebhookNotificationsOnStartResult']] = None,
                 on_successes: Optional[Sequence['outputs.GetJobJobSettingsSettingsWebhookNotificationsOnSuccessResult']] = None):
        GetJobJobSettingsSettingsWebhookNotificationsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            on_duration_warning_threshold_exceededs=on_duration_warning_threshold_exceededs,
            on_failures=on_failures,
            on_starts=on_starts,
            on_successes=on_successes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             on_duration_warning_threshold_exceededs: Optional[Sequence['outputs.GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceededResult']] = None,
             on_failures: Optional[Sequence['outputs.GetJobJobSettingsSettingsWebhookNotificationsOnFailureResult']] = None,
             on_starts: Optional[Sequence['outputs.GetJobJobSettingsSettingsWebhookNotificationsOnStartResult']] = None,
             on_successes: Optional[Sequence['outputs.GetJobJobSettingsSettingsWebhookNotificationsOnSuccessResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'onDurationWarningThresholdExceededs' in kwargs:
            on_duration_warning_threshold_exceededs = kwargs['onDurationWarningThresholdExceededs']
        if 'onFailures' in kwargs:
            on_failures = kwargs['onFailures']
        if 'onStarts' in kwargs:
            on_starts = kwargs['onStarts']
        if 'onSuccesses' in kwargs:
            on_successes = kwargs['onSuccesses']

        if on_duration_warning_threshold_exceededs is not None:
            _setter("on_duration_warning_threshold_exceededs", on_duration_warning_threshold_exceededs)
        if on_failures is not None:
            _setter("on_failures", on_failures)
        if on_starts is not None:
            _setter("on_starts", on_starts)
        if on_successes is not None:
            _setter("on_successes", on_successes)

    @property
    @pulumi.getter(name="onDurationWarningThresholdExceededs")
    def on_duration_warning_threshold_exceededs(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceededResult']]:
        return pulumi.get(self, "on_duration_warning_threshold_exceededs")

    @property
    @pulumi.getter(name="onFailures")
    def on_failures(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsWebhookNotificationsOnFailureResult']]:
        return pulumi.get(self, "on_failures")

    @property
    @pulumi.getter(name="onStarts")
    def on_starts(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsWebhookNotificationsOnStartResult']]:
        return pulumi.get(self, "on_starts")

    @property
    @pulumi.getter(name="onSuccesses")
    def on_successes(self) -> Optional[Sequence['outputs.GetJobJobSettingsSettingsWebhookNotificationsOnSuccessResult']]:
        return pulumi.get(self, "on_successes")


@pulumi.output_type
class GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceededResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: the id of Job if the resource was matched by name.
        """
        GetJobJobSettingsSettingsWebhookNotificationsOnDurationWarningThresholdExceededResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        the id of Job if the resource was matched by name.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetJobJobSettingsSettingsWebhookNotificationsOnFailureResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: the id of Job if the resource was matched by name.
        """
        GetJobJobSettingsSettingsWebhookNotificationsOnFailureResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        the id of Job if the resource was matched by name.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetJobJobSettingsSettingsWebhookNotificationsOnStartResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: the id of Job if the resource was matched by name.
        """
        GetJobJobSettingsSettingsWebhookNotificationsOnStartResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        the id of Job if the resource was matched by name.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetJobJobSettingsSettingsWebhookNotificationsOnSuccessResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: the id of Job if the resource was matched by name.
        """
        GetJobJobSettingsSettingsWebhookNotificationsOnSuccessResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        the id of Job if the resource was matched by name.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetMetastoreMetastoreInfoResult(dict):
    def __init__(__self__, *,
                 cloud: Optional[str] = None,
                 created_at: Optional[int] = None,
                 created_by: Optional[str] = None,
                 default_data_access_config_id: Optional[str] = None,
                 delta_sharing_organization_name: Optional[str] = None,
                 delta_sharing_recipient_token_lifetime_in_seconds: Optional[int] = None,
                 delta_sharing_scope: Optional[str] = None,
                 global_metastore_id: Optional[str] = None,
                 metastore_id: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 privilege_model_version: Optional[str] = None,
                 region: Optional[str] = None,
                 storage_root: Optional[str] = None,
                 storage_root_credential_id: Optional[str] = None,
                 storage_root_credential_name: Optional[str] = None,
                 updated_at: Optional[int] = None,
                 updated_by: Optional[str] = None):
        """
        :param str delta_sharing_organization_name: The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing.
        :param int delta_sharing_recipient_token_lifetime_in_seconds: Used to set expiration duration in seconds on recipient data access tokens.
        :param str delta_sharing_scope: Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL.
        :param str metastore_id: Id of the metastore to be fetched
        :param str name: Name of metastore.
        :param str owner: Username/groupname/sp application_id of the metastore owner.
        :param str storage_root: Path on cloud storage account, where managed `Table` are stored. Change forces creation of a new resource.
        """
        GetMetastoreMetastoreInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud=cloud,
            created_at=created_at,
            created_by=created_by,
            default_data_access_config_id=default_data_access_config_id,
            delta_sharing_organization_name=delta_sharing_organization_name,
            delta_sharing_recipient_token_lifetime_in_seconds=delta_sharing_recipient_token_lifetime_in_seconds,
            delta_sharing_scope=delta_sharing_scope,
            global_metastore_id=global_metastore_id,
            metastore_id=metastore_id,
            name=name,
            owner=owner,
            privilege_model_version=privilege_model_version,
            region=region,
            storage_root=storage_root,
            storage_root_credential_id=storage_root_credential_id,
            storage_root_credential_name=storage_root_credential_name,
            updated_at=updated_at,
            updated_by=updated_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud: Optional[str] = None,
             created_at: Optional[int] = None,
             created_by: Optional[str] = None,
             default_data_access_config_id: Optional[str] = None,
             delta_sharing_organization_name: Optional[str] = None,
             delta_sharing_recipient_token_lifetime_in_seconds: Optional[int] = None,
             delta_sharing_scope: Optional[str] = None,
             global_metastore_id: Optional[str] = None,
             metastore_id: Optional[str] = None,
             name: Optional[str] = None,
             owner: Optional[str] = None,
             privilege_model_version: Optional[str] = None,
             region: Optional[str] = None,
             storage_root: Optional[str] = None,
             storage_root_credential_id: Optional[str] = None,
             storage_root_credential_name: Optional[str] = None,
             updated_at: Optional[int] = None,
             updated_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createdAt' in kwargs:
            created_at = kwargs['createdAt']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'defaultDataAccessConfigId' in kwargs:
            default_data_access_config_id = kwargs['defaultDataAccessConfigId']
        if 'deltaSharingOrganizationName' in kwargs:
            delta_sharing_organization_name = kwargs['deltaSharingOrganizationName']
        if 'deltaSharingRecipientTokenLifetimeInSeconds' in kwargs:
            delta_sharing_recipient_token_lifetime_in_seconds = kwargs['deltaSharingRecipientTokenLifetimeInSeconds']
        if 'deltaSharingScope' in kwargs:
            delta_sharing_scope = kwargs['deltaSharingScope']
        if 'globalMetastoreId' in kwargs:
            global_metastore_id = kwargs['globalMetastoreId']
        if 'metastoreId' in kwargs:
            metastore_id = kwargs['metastoreId']
        if 'privilegeModelVersion' in kwargs:
            privilege_model_version = kwargs['privilegeModelVersion']
        if 'storageRoot' in kwargs:
            storage_root = kwargs['storageRoot']
        if 'storageRootCredentialId' in kwargs:
            storage_root_credential_id = kwargs['storageRootCredentialId']
        if 'storageRootCredentialName' in kwargs:
            storage_root_credential_name = kwargs['storageRootCredentialName']
        if 'updatedAt' in kwargs:
            updated_at = kwargs['updatedAt']
        if 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']

        if cloud is not None:
            _setter("cloud", cloud)
        if created_at is not None:
            _setter("created_at", created_at)
        if created_by is not None:
            _setter("created_by", created_by)
        if default_data_access_config_id is not None:
            _setter("default_data_access_config_id", default_data_access_config_id)
        if delta_sharing_organization_name is not None:
            _setter("delta_sharing_organization_name", delta_sharing_organization_name)
        if delta_sharing_recipient_token_lifetime_in_seconds is not None:
            _setter("delta_sharing_recipient_token_lifetime_in_seconds", delta_sharing_recipient_token_lifetime_in_seconds)
        if delta_sharing_scope is not None:
            _setter("delta_sharing_scope", delta_sharing_scope)
        if global_metastore_id is not None:
            _setter("global_metastore_id", global_metastore_id)
        if metastore_id is not None:
            _setter("metastore_id", metastore_id)
        if name is not None:
            _setter("name", name)
        if owner is not None:
            _setter("owner", owner)
        if privilege_model_version is not None:
            _setter("privilege_model_version", privilege_model_version)
        if region is not None:
            _setter("region", region)
        if storage_root is not None:
            _setter("storage_root", storage_root)
        if storage_root_credential_id is not None:
            _setter("storage_root_credential_id", storage_root_credential_id)
        if storage_root_credential_name is not None:
            _setter("storage_root_credential_name", storage_root_credential_name)
        if updated_at is not None:
            _setter("updated_at", updated_at)
        if updated_by is not None:
            _setter("updated_by", updated_by)

    @property
    @pulumi.getter
    def cloud(self) -> Optional[str]:
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[int]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="defaultDataAccessConfigId")
    def default_data_access_config_id(self) -> Optional[str]:
        return pulumi.get(self, "default_data_access_config_id")

    @property
    @pulumi.getter(name="deltaSharingOrganizationName")
    def delta_sharing_organization_name(self) -> Optional[str]:
        """
        The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing.
        """
        return pulumi.get(self, "delta_sharing_organization_name")

    @property
    @pulumi.getter(name="deltaSharingRecipientTokenLifetimeInSeconds")
    def delta_sharing_recipient_token_lifetime_in_seconds(self) -> Optional[int]:
        """
        Used to set expiration duration in seconds on recipient data access tokens.
        """
        return pulumi.get(self, "delta_sharing_recipient_token_lifetime_in_seconds")

    @property
    @pulumi.getter(name="deltaSharingScope")
    def delta_sharing_scope(self) -> Optional[str]:
        """
        Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL.
        """
        return pulumi.get(self, "delta_sharing_scope")

    @property
    @pulumi.getter(name="globalMetastoreId")
    def global_metastore_id(self) -> Optional[str]:
        return pulumi.get(self, "global_metastore_id")

    @property
    @pulumi.getter(name="metastoreId")
    def metastore_id(self) -> Optional[str]:
        """
        Id of the metastore to be fetched
        """
        return pulumi.get(self, "metastore_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of metastore.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        """
        Username/groupname/sp application_id of the metastore owner.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="privilegeModelVersion")
    def privilege_model_version(self) -> Optional[str]:
        return pulumi.get(self, "privilege_model_version")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="storageRoot")
    def storage_root(self) -> Optional[str]:
        """
        Path on cloud storage account, where managed `Table` are stored. Change forces creation of a new resource.
        """
        return pulumi.get(self, "storage_root")

    @property
    @pulumi.getter(name="storageRootCredentialId")
    def storage_root_credential_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_root_credential_id")

    @property
    @pulumi.getter(name="storageRootCredentialName")
    def storage_root_credential_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_root_credential_name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[int]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetNotebookPathsNotebookPathListResult(dict):
    def __init__(__self__, *,
                 language: Optional[str] = None,
                 path: Optional[str] = None):
        """
        :param str path: Path to workspace directory
        """
        GetNotebookPathsNotebookPathListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            language=language,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             language: Optional[str] = None,
             path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if language is not None:
            _setter("language", language)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter
    def language(self) -> Optional[str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to workspace directory
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetShareObjectResult(dict):
    def __init__(__self__, *,
                 added_at: int,
                 added_by: str,
                 data_object_type: str,
                 name: str,
                 status: str,
                 cdf_enabled: Optional[bool] = None,
                 comment: Optional[str] = None,
                 history_data_sharing_status: Optional[str] = None,
                 partitions: Optional[Sequence['outputs.GetShareObjectPartitionResult']] = None,
                 shared_as: Optional[str] = None,
                 start_version: Optional[int] = None):
        """
        :param str data_object_type: Type of the object.
        :param str name: The name of the share
        :param str comment: Description about the object.
        """
        GetShareObjectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            added_at=added_at,
            added_by=added_by,
            data_object_type=data_object_type,
            name=name,
            status=status,
            cdf_enabled=cdf_enabled,
            comment=comment,
            history_data_sharing_status=history_data_sharing_status,
            partitions=partitions,
            shared_as=shared_as,
            start_version=start_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             added_at: int,
             added_by: str,
             data_object_type: str,
             name: str,
             status: str,
             cdf_enabled: Optional[bool] = None,
             comment: Optional[str] = None,
             history_data_sharing_status: Optional[str] = None,
             partitions: Optional[Sequence['outputs.GetShareObjectPartitionResult']] = None,
             shared_as: Optional[str] = None,
             start_version: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addedAt' in kwargs:
            added_at = kwargs['addedAt']
        if 'addedBy' in kwargs:
            added_by = kwargs['addedBy']
        if 'dataObjectType' in kwargs:
            data_object_type = kwargs['dataObjectType']
        if 'cdfEnabled' in kwargs:
            cdf_enabled = kwargs['cdfEnabled']
        if 'historyDataSharingStatus' in kwargs:
            history_data_sharing_status = kwargs['historyDataSharingStatus']
        if 'sharedAs' in kwargs:
            shared_as = kwargs['sharedAs']
        if 'startVersion' in kwargs:
            start_version = kwargs['startVersion']

        _setter("added_at", added_at)
        _setter("added_by", added_by)
        _setter("data_object_type", data_object_type)
        _setter("name", name)
        _setter("status", status)
        if cdf_enabled is not None:
            _setter("cdf_enabled", cdf_enabled)
        if comment is not None:
            _setter("comment", comment)
        if history_data_sharing_status is not None:
            _setter("history_data_sharing_status", history_data_sharing_status)
        if partitions is not None:
            _setter("partitions", partitions)
        if shared_as is not None:
            _setter("shared_as", shared_as)
        if start_version is not None:
            _setter("start_version", start_version)

    @property
    @pulumi.getter(name="addedAt")
    def added_at(self) -> int:
        return pulumi.get(self, "added_at")

    @property
    @pulumi.getter(name="addedBy")
    def added_by(self) -> str:
        return pulumi.get(self, "added_by")

    @property
    @pulumi.getter(name="dataObjectType")
    def data_object_type(self) -> str:
        """
        Type of the object.
        """
        return pulumi.get(self, "data_object_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the share
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="cdfEnabled")
    def cdf_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "cdf_enabled")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Description about the object.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="historyDataSharingStatus")
    def history_data_sharing_status(self) -> Optional[str]:
        return pulumi.get(self, "history_data_sharing_status")

    @property
    @pulumi.getter
    def partitions(self) -> Optional[Sequence['outputs.GetShareObjectPartitionResult']]:
        return pulumi.get(self, "partitions")

    @property
    @pulumi.getter(name="sharedAs")
    def shared_as(self) -> Optional[str]:
        return pulumi.get(self, "shared_as")

    @property
    @pulumi.getter(name="startVersion")
    def start_version(self) -> Optional[int]:
        return pulumi.get(self, "start_version")


@pulumi.output_type
class GetShareObjectPartitionResult(dict):
    def __init__(__self__, *,
                 values: Sequence['outputs.GetShareObjectPartitionValueResult']):
        GetShareObjectPartitionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Sequence['outputs.GetShareObjectPartitionValueResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetShareObjectPartitionValueResult']:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetShareObjectPartitionValueResult(dict):
    def __init__(__self__, *,
                 name: str,
                 op: str,
                 recipient_property_key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name of the share
        """
        GetShareObjectPartitionValueResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            op=op,
            recipient_property_key=recipient_property_key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             op: str,
             recipient_property_key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'recipientPropertyKey' in kwargs:
            recipient_property_key = kwargs['recipientPropertyKey']

        _setter("name", name)
        _setter("op", op)
        if recipient_property_key is not None:
            _setter("recipient_property_key", recipient_property_key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the share
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def op(self) -> str:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter(name="recipientPropertyKey")
    def recipient_property_key(self) -> Optional[str]:
        return pulumi.get(self, "recipient_property_key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSqlWarehouseChannelResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Name of the SQL warehouse to search (case-sensitive).
        """
        GetSqlWarehouseChannelResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the SQL warehouse to search (case-sensitive).
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSqlWarehouseOdbcParamsResult(dict):
    def __init__(__self__, *,
                 path: str,
                 port: int,
                 protocol: str,
                 host: Optional[str] = None,
                 hostname: Optional[str] = None):
        GetSqlWarehouseOdbcParamsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            port=port,
            protocol=protocol,
            host=host,
            hostname=hostname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: str,
             port: int,
             protocol: str,
             host: Optional[str] = None,
             hostname: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("path", path)
        _setter("port", port)
        _setter("protocol", protocol)
        if host is not None:
            _setter("host", host)
        if hostname is not None:
            _setter("hostname", hostname)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class GetSqlWarehouseTagsResult(dict):
    def __init__(__self__, *,
                 custom_tags: Sequence['outputs.GetSqlWarehouseTagsCustomTagResult']):
        GetSqlWarehouseTagsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_tags=custom_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_tags: Sequence['outputs.GetSqlWarehouseTagsCustomTagResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']

        _setter("custom_tags", custom_tags)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Sequence['outputs.GetSqlWarehouseTagsCustomTagResult']:
        return pulumi.get(self, "custom_tags")


@pulumi.output_type
class GetSqlWarehouseTagsCustomTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        GetSqlWarehouseTagsCustomTagResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


