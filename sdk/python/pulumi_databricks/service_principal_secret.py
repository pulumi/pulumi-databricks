# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ServicePrincipalSecretArgs', 'ServicePrincipalSecret']

@pulumi.input_type
class ServicePrincipalSecretArgs:
    def __init__(__self__, *,
                 service_principal_id: pulumi.Input[builtins.str],
                 create_time: Optional[pulumi.Input[builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[builtins.str]] = None,
                 lifetime: Optional[pulumi.Input[builtins.str]] = None,
                 secret: Optional[pulumi.Input[builtins.str]] = None,
                 secret_hash: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 update_time: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ServicePrincipalSecret resource.
        :param pulumi.Input[builtins.str] service_principal_id: SCIM ID of the ServicePrincipal (not application ID).
        :param pulumi.Input[builtins.str] create_time: UTC time when the secret was created.
        :param pulumi.Input[builtins.str] expire_time: UTC time when the secret will expire. If the field is not present, the secret does not expire.
        :param pulumi.Input[builtins.str] lifetime: The lifetime of the secret in seconds formatted as `NNNNs`. If this parameter is not provided, the secret will have a default lifetime of 730 days (`63072000s`).  Expiration of secret will lead to generation of new secret.
        :param pulumi.Input[builtins.str] secret: Generated secret for the service principal.
        :param pulumi.Input[builtins.str] secret_hash: Secret Hash.
        :param pulumi.Input[builtins.str] status: Status of the secret (i.e., `ACTIVE` - see [REST API docs for full list](https://docs.databricks.com/api/account/serviceprincipalsecrets/list#secrets-status)).
        :param pulumi.Input[builtins.str] update_time: UTC time when the secret was updated.
        """
        pulumi.set(__self__, "service_principal_id", service_principal_id)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if lifetime is not None:
            pulumi.set(__self__, "lifetime", lifetime)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if secret_hash is not None:
            pulumi.set(__self__, "secret_hash", secret_hash)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="servicePrincipalId")
    def service_principal_id(self) -> pulumi.Input[builtins.str]:
        """
        SCIM ID of the ServicePrincipal (not application ID).
        """
        return pulumi.get(self, "service_principal_id")

    @service_principal_id.setter
    def service_principal_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "service_principal_id", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        UTC time when the secret was created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        UTC time when the secret will expire. If the field is not present, the secret does not expire.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter
    def lifetime(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The lifetime of the secret in seconds formatted as `NNNNs`. If this parameter is not provided, the secret will have a default lifetime of 730 days (`63072000s`).  Expiration of secret will lead to generation of new secret.
        """
        return pulumi.get(self, "lifetime")

    @lifetime.setter
    def lifetime(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lifetime", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Generated secret for the service principal.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="secretHash")
    def secret_hash(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Secret Hash.
        """
        return pulumi.get(self, "secret_hash")

    @secret_hash.setter
    def secret_hash(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_hash", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Status of the secret (i.e., `ACTIVE` - see [REST API docs for full list](https://docs.databricks.com/api/account/serviceprincipalsecrets/list#secrets-status)).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        UTC time when the secret was updated.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class _ServicePrincipalSecretState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[builtins.str]] = None,
                 lifetime: Optional[pulumi.Input[builtins.str]] = None,
                 secret: Optional[pulumi.Input[builtins.str]] = None,
                 secret_hash: Optional[pulumi.Input[builtins.str]] = None,
                 service_principal_id: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 update_time: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering ServicePrincipalSecret resources.
        :param pulumi.Input[builtins.str] create_time: UTC time when the secret was created.
        :param pulumi.Input[builtins.str] expire_time: UTC time when the secret will expire. If the field is not present, the secret does not expire.
        :param pulumi.Input[builtins.str] lifetime: The lifetime of the secret in seconds formatted as `NNNNs`. If this parameter is not provided, the secret will have a default lifetime of 730 days (`63072000s`).  Expiration of secret will lead to generation of new secret.
        :param pulumi.Input[builtins.str] secret: Generated secret for the service principal.
        :param pulumi.Input[builtins.str] secret_hash: Secret Hash.
        :param pulumi.Input[builtins.str] service_principal_id: SCIM ID of the ServicePrincipal (not application ID).
        :param pulumi.Input[builtins.str] status: Status of the secret (i.e., `ACTIVE` - see [REST API docs for full list](https://docs.databricks.com/api/account/serviceprincipalsecrets/list#secrets-status)).
        :param pulumi.Input[builtins.str] update_time: UTC time when the secret was updated.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if lifetime is not None:
            pulumi.set(__self__, "lifetime", lifetime)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if secret_hash is not None:
            pulumi.set(__self__, "secret_hash", secret_hash)
        if service_principal_id is not None:
            pulumi.set(__self__, "service_principal_id", service_principal_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        UTC time when the secret was created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        UTC time when the secret will expire. If the field is not present, the secret does not expire.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter
    def lifetime(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The lifetime of the secret in seconds formatted as `NNNNs`. If this parameter is not provided, the secret will have a default lifetime of 730 days (`63072000s`).  Expiration of secret will lead to generation of new secret.
        """
        return pulumi.get(self, "lifetime")

    @lifetime.setter
    def lifetime(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lifetime", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Generated secret for the service principal.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="secretHash")
    def secret_hash(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Secret Hash.
        """
        return pulumi.get(self, "secret_hash")

    @secret_hash.setter
    def secret_hash(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_hash", value)

    @property
    @pulumi.getter(name="servicePrincipalId")
    def service_principal_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        SCIM ID of the ServicePrincipal (not application ID).
        """
        return pulumi.get(self, "service_principal_id")

    @service_principal_id.setter
    def service_principal_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_principal_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Status of the secret (i.e., `ACTIVE` - see [REST API docs for full list](https://docs.databricks.com/api/account/serviceprincipalsecrets/list#secrets-status)).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        UTC time when the secret was updated.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update_time", value)


class ServicePrincipalSecret(pulumi.CustomResource):

    pulumi_type = "databricks:index/servicePrincipalSecret:ServicePrincipalSecret"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 create_time: Optional[pulumi.Input[builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[builtins.str]] = None,
                 lifetime: Optional[pulumi.Input[builtins.str]] = None,
                 secret: Optional[pulumi.Input[builtins.str]] = None,
                 secret_hash: Optional[pulumi.Input[builtins.str]] = None,
                 service_principal_id: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 update_time: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        > This resource can only be used with an account-level provider.

        With this resource you can create a secret for a given [Service Principals](https://docs.databricks.com/administration-guide/users-groups/service-principals.html).

        This secret can be used to configure the Databricks Pulumi Provider to authenticate with the service principal. See Authenticating with service principal.

        Additionally, the secret can be used to request OAuth tokens for the service principal, which can be used to authenticate to Databricks REST APIs. See [Authentication using OAuth tokens for service principals](https://docs.databricks.com/dev-tools/authentication-oauth.html).

        ## Example Usage

        Create service principal secret

        ```python
        import pulumi
        import pulumi_databricks as databricks

        terraform_sp = databricks.ServicePrincipalSecret("terraform_sp", service_principal_id=this["id"])
        ```

        ## Related Resources

        The following resources are often used in the same context:

        * ServicePrincipal to manage [Service Principals](https://docs.databricks.com/administration-guide/users-groups/service-principals.html) in Databricks

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] create_time: UTC time when the secret was created.
        :param pulumi.Input[builtins.str] expire_time: UTC time when the secret will expire. If the field is not present, the secret does not expire.
        :param pulumi.Input[builtins.str] lifetime: The lifetime of the secret in seconds formatted as `NNNNs`. If this parameter is not provided, the secret will have a default lifetime of 730 days (`63072000s`).  Expiration of secret will lead to generation of new secret.
        :param pulumi.Input[builtins.str] secret: Generated secret for the service principal.
        :param pulumi.Input[builtins.str] secret_hash: Secret Hash.
        :param pulumi.Input[builtins.str] service_principal_id: SCIM ID of the ServicePrincipal (not application ID).
        :param pulumi.Input[builtins.str] status: Status of the secret (i.e., `ACTIVE` - see [REST API docs for full list](https://docs.databricks.com/api/account/serviceprincipalsecrets/list#secrets-status)).
        :param pulumi.Input[builtins.str] update_time: UTC time when the secret was updated.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServicePrincipalSecretArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        > This resource can only be used with an account-level provider.

        With this resource you can create a secret for a given [Service Principals](https://docs.databricks.com/administration-guide/users-groups/service-principals.html).

        This secret can be used to configure the Databricks Pulumi Provider to authenticate with the service principal. See Authenticating with service principal.

        Additionally, the secret can be used to request OAuth tokens for the service principal, which can be used to authenticate to Databricks REST APIs. See [Authentication using OAuth tokens for service principals](https://docs.databricks.com/dev-tools/authentication-oauth.html).

        ## Example Usage

        Create service principal secret

        ```python
        import pulumi
        import pulumi_databricks as databricks

        terraform_sp = databricks.ServicePrincipalSecret("terraform_sp", service_principal_id=this["id"])
        ```

        ## Related Resources

        The following resources are often used in the same context:

        * ServicePrincipal to manage [Service Principals](https://docs.databricks.com/administration-guide/users-groups/service-principals.html) in Databricks

        :param str resource_name: The name of the resource.
        :param ServicePrincipalSecretArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServicePrincipalSecretArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 create_time: Optional[pulumi.Input[builtins.str]] = None,
                 expire_time: Optional[pulumi.Input[builtins.str]] = None,
                 lifetime: Optional[pulumi.Input[builtins.str]] = None,
                 secret: Optional[pulumi.Input[builtins.str]] = None,
                 secret_hash: Optional[pulumi.Input[builtins.str]] = None,
                 service_principal_id: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 update_time: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServicePrincipalSecretArgs.__new__(ServicePrincipalSecretArgs)

            __props__.__dict__["create_time"] = create_time
            __props__.__dict__["expire_time"] = expire_time
            __props__.__dict__["lifetime"] = lifetime
            __props__.__dict__["secret"] = None if secret is None else pulumi.Output.secret(secret)
            __props__.__dict__["secret_hash"] = secret_hash
            if service_principal_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_principal_id'")
            __props__.__dict__["service_principal_id"] = service_principal_id
            __props__.__dict__["status"] = status
            __props__.__dict__["update_time"] = update_time
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ServicePrincipalSecret, __self__).__init__(
            'databricks:index/servicePrincipalSecret:ServicePrincipalSecret',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[builtins.str]] = None,
            expire_time: Optional[pulumi.Input[builtins.str]] = None,
            lifetime: Optional[pulumi.Input[builtins.str]] = None,
            secret: Optional[pulumi.Input[builtins.str]] = None,
            secret_hash: Optional[pulumi.Input[builtins.str]] = None,
            service_principal_id: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            update_time: Optional[pulumi.Input[builtins.str]] = None) -> 'ServicePrincipalSecret':
        """
        Get an existing ServicePrincipalSecret resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] create_time: UTC time when the secret was created.
        :param pulumi.Input[builtins.str] expire_time: UTC time when the secret will expire. If the field is not present, the secret does not expire.
        :param pulumi.Input[builtins.str] lifetime: The lifetime of the secret in seconds formatted as `NNNNs`. If this parameter is not provided, the secret will have a default lifetime of 730 days (`63072000s`).  Expiration of secret will lead to generation of new secret.
        :param pulumi.Input[builtins.str] secret: Generated secret for the service principal.
        :param pulumi.Input[builtins.str] secret_hash: Secret Hash.
        :param pulumi.Input[builtins.str] service_principal_id: SCIM ID of the ServicePrincipal (not application ID).
        :param pulumi.Input[builtins.str] status: Status of the secret (i.e., `ACTIVE` - see [REST API docs for full list](https://docs.databricks.com/api/account/serviceprincipalsecrets/list#secrets-status)).
        :param pulumi.Input[builtins.str] update_time: UTC time when the secret was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServicePrincipalSecretState.__new__(_ServicePrincipalSecretState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["expire_time"] = expire_time
        __props__.__dict__["lifetime"] = lifetime
        __props__.__dict__["secret"] = secret
        __props__.__dict__["secret_hash"] = secret_hash
        __props__.__dict__["service_principal_id"] = service_principal_id
        __props__.__dict__["status"] = status
        __props__.__dict__["update_time"] = update_time
        return ServicePrincipalSecret(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[builtins.str]:
        """
        UTC time when the secret was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Output[builtins.str]:
        """
        UTC time when the secret will expire. If the field is not present, the secret does not expire.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def lifetime(self) -> pulumi.Output[builtins.str]:
        """
        The lifetime of the secret in seconds formatted as `NNNNs`. If this parameter is not provided, the secret will have a default lifetime of 730 days (`63072000s`).  Expiration of secret will lead to generation of new secret.
        """
        return pulumi.get(self, "lifetime")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[builtins.str]:
        """
        Generated secret for the service principal.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="secretHash")
    def secret_hash(self) -> pulumi.Output[builtins.str]:
        """
        Secret Hash.
        """
        return pulumi.get(self, "secret_hash")

    @property
    @pulumi.getter(name="servicePrincipalId")
    def service_principal_id(self) -> pulumi.Output[builtins.str]:
        """
        SCIM ID of the ServicePrincipal (not application ID).
        """
        return pulumi.get(self, "service_principal_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        Status of the secret (i.e., `ACTIVE` - see [REST API docs for full list](https://docs.databricks.com/api/account/serviceprincipalsecrets/list#secrets-status)).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[builtins.str]:
        """
        UTC time when the secret was updated.
        """
        return pulumi.get(self, "update_time")

