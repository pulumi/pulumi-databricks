# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTagPolicyResult',
    'AwaitableGetTagPolicyResult',
    'get_tag_policy',
    'get_tag_policy_output',
]

@pulumi.output_type
class GetTagPolicyResult:
    """
    A collection of values returned by getTagPolicy.
    """
    def __init__(__self__, description=None, id=None, tag_key=None, values=None, workspace_id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tag_key and not isinstance(tag_key, str):
            raise TypeError("Expected argument 'tag_key' to be a str")
        pulumi.set(__self__, "tag_key", tag_key)
        if values and not isinstance(values, list):
            raise TypeError("Expected argument 'values' to be a list")
        pulumi.set(__self__, "values", values)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        (string)
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        (string)
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> _builtins.str:
        """
        (string)
        """
        return pulumi.get(self, "tag_key")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetTagPolicyValueResult']]:
        """
        (list of Value)
        """
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "workspace_id")


class AwaitableGetTagPolicyResult(GetTagPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTagPolicyResult(
            description=self.description,
            id=self.id,
            tag_key=self.tag_key,
            values=self.values,
            workspace_id=self.workspace_id)


def get_tag_policy(description: Optional[_builtins.str] = None,
                   tag_key: Optional[_builtins.str] = None,
                   values: Optional[Sequence[Union['GetTagPolicyValueArgs', 'GetTagPolicyValueArgsDict']]] = None,
                   workspace_id: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTagPolicyResult:
    """
    This data source can be used to get a single tag policy by its tag key.

    > **Note** This resource can only be used with an account-level provider!


    :param _builtins.str description: (string)
    :param Sequence[Union['GetTagPolicyValueArgs', 'GetTagPolicyValueArgsDict']] values: (list of Value)
    :param _builtins.str workspace_id: Workspace ID of the resource
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['tagKey'] = tag_key
    __args__['values'] = values
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('databricks:index/getTagPolicy:getTagPolicy', __args__, opts=opts, typ=GetTagPolicyResult).value

    return AwaitableGetTagPolicyResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        tag_key=pulumi.get(__ret__, 'tag_key'),
        values=pulumi.get(__ret__, 'values'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_tag_policy_output(description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          tag_key: Optional[pulumi.Input[_builtins.str]] = None,
                          values: Optional[pulumi.Input[Optional[Sequence[Union['GetTagPolicyValueArgs', 'GetTagPolicyValueArgsDict']]]]] = None,
                          workspace_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTagPolicyResult]:
    """
    This data source can be used to get a single tag policy by its tag key.

    > **Note** This resource can only be used with an account-level provider!


    :param _builtins.str description: (string)
    :param Sequence[Union['GetTagPolicyValueArgs', 'GetTagPolicyValueArgsDict']] values: (list of Value)
    :param _builtins.str workspace_id: Workspace ID of the resource
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['tagKey'] = tag_key
    __args__['values'] = values
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('databricks:index/getTagPolicy:getTagPolicy', __args__, opts=opts, typ=GetTagPolicyResult)
    return __ret__.apply(lambda __response__: GetTagPolicyResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        tag_key=pulumi.get(__response__, 'tag_key'),
        values=pulumi.get(__response__, 'values'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
