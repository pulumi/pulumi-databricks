# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMaterializedFeaturesFeatureTagResult',
    'AwaitableGetMaterializedFeaturesFeatureTagResult',
    'get_materialized_features_feature_tag',
    'get_materialized_features_feature_tag_output',
]

@pulumi.output_type
class GetMaterializedFeaturesFeatureTagResult:
    """
    A collection of values returned by getMaterializedFeaturesFeatureTag.
    """
    def __init__(__self__, id=None, key=None, value=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if value and not isinstance(value, str):
            raise TypeError("Expected argument 'value' to be a str")
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        (string)
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        (string)
        """
        return pulumi.get(self, "value")


class AwaitableGetMaterializedFeaturesFeatureTagResult(GetMaterializedFeaturesFeatureTagResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMaterializedFeaturesFeatureTagResult(
            id=self.id,
            key=self.key,
            value=self.value)


def get_materialized_features_feature_tag(key: Optional[_builtins.str] = None,
                                          value: Optional[_builtins.str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMaterializedFeaturesFeatureTagResult:
    """
    Use this data source to access information about an existing resource.

    :param _builtins.str value: (string)
    """
    __args__ = dict()
    __args__['key'] = key
    __args__['value'] = value
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('databricks:index/getMaterializedFeaturesFeatureTag:getMaterializedFeaturesFeatureTag', __args__, opts=opts, typ=GetMaterializedFeaturesFeatureTagResult).value

    return AwaitableGetMaterializedFeaturesFeatureTagResult(
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        value=pulumi.get(__ret__, 'value'))
def get_materialized_features_feature_tag_output(key: Optional[pulumi.Input[_builtins.str]] = None,
                                                 value: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMaterializedFeaturesFeatureTagResult]:
    """
    Use this data source to access information about an existing resource.

    :param _builtins.str value: (string)
    """
    __args__ = dict()
    __args__['key'] = key
    __args__['value'] = value
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('databricks:index/getMaterializedFeaturesFeatureTag:getMaterializedFeaturesFeatureTag', __args__, opts=opts, typ=GetMaterializedFeaturesFeatureTagResult)
    return __ret__.apply(lambda __response__: GetMaterializedFeaturesFeatureTagResult(
        id=pulumi.get(__response__, 'id'),
        key=pulumi.get(__response__, 'key'),
        value=pulumi.get(__response__, 'value')))
