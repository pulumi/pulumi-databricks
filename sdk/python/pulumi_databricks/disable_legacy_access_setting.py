# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DisableLegacyAccessSettingArgs', 'DisableLegacyAccessSetting']

@pulumi.input_type
class DisableLegacyAccessSettingArgs:
    def __init__(__self__, *,
                 disable_legacy_access: pulumi.Input['DisableLegacyAccessSettingDisableLegacyAccessArgs'],
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 setting_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DisableLegacyAccessSetting resource.
        :param pulumi.Input['DisableLegacyAccessSettingDisableLegacyAccessArgs'] disable_legacy_access: The configuration details.
        """
        pulumi.set(__self__, "disable_legacy_access", disable_legacy_access)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if setting_name is not None:
            pulumi.set(__self__, "setting_name", setting_name)

    @_builtins.property
    @pulumi.getter(name="disableLegacyAccess")
    def disable_legacy_access(self) -> pulumi.Input['DisableLegacyAccessSettingDisableLegacyAccessArgs']:
        """
        The configuration details.
        """
        return pulumi.get(self, "disable_legacy_access")

    @disable_legacy_access.setter
    def disable_legacy_access(self, value: pulumi.Input['DisableLegacyAccessSettingDisableLegacyAccessArgs']):
        pulumi.set(self, "disable_legacy_access", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter(name="settingName")
    def setting_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "setting_name")

    @setting_name.setter
    def setting_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "setting_name", value)


@pulumi.input_type
class _DisableLegacyAccessSettingState:
    def __init__(__self__, *,
                 disable_legacy_access: Optional[pulumi.Input['DisableLegacyAccessSettingDisableLegacyAccessArgs']] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 setting_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DisableLegacyAccessSetting resources.
        :param pulumi.Input['DisableLegacyAccessSettingDisableLegacyAccessArgs'] disable_legacy_access: The configuration details.
        """
        if disable_legacy_access is not None:
            pulumi.set(__self__, "disable_legacy_access", disable_legacy_access)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if setting_name is not None:
            pulumi.set(__self__, "setting_name", setting_name)

    @_builtins.property
    @pulumi.getter(name="disableLegacyAccess")
    def disable_legacy_access(self) -> Optional[pulumi.Input['DisableLegacyAccessSettingDisableLegacyAccessArgs']]:
        """
        The configuration details.
        """
        return pulumi.get(self, "disable_legacy_access")

    @disable_legacy_access.setter
    def disable_legacy_access(self, value: Optional[pulumi.Input['DisableLegacyAccessSettingDisableLegacyAccessArgs']]):
        pulumi.set(self, "disable_legacy_access", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter(name="settingName")
    def setting_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "setting_name")

    @setting_name.setter
    def setting_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "setting_name", value)


@pulumi.type_token("databricks:index/disableLegacyAccessSetting:DisableLegacyAccessSetting")
class DisableLegacyAccessSetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disable_legacy_access: Optional[pulumi.Input[Union['DisableLegacyAccessSettingDisableLegacyAccessArgs', 'DisableLegacyAccessSettingDisableLegacyAccessArgsDict']]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 setting_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        The `DisableLegacyAccessSetting` resource allows you to disable legacy access. It has the following impact:

        1. Disables direct access to Hive Metastores from the workspace. However, you can still access a Hive Metastore through Hive Metastore federation.
        2. Disables Fallback Mode on any External Location access from the workspace.
        3. Disables Databricks Runtime versions prior to 13.3LTS.

        > This resource can only be used with a workspace-level provider!

        > It may take 5 minutes to take effect and requires a restart of clusters and SQL warehouses.

        > Please also set the default namespace using DefaultNamespaceSetting to any value other than `hive_metastore` to avoid potential issues.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_databricks as databricks

        this = databricks.DisableLegacyAccessSetting("this", disable_legacy_access={
            "value": True,
        })
        ```

        ## Import

        This resource can be imported by predefined name `global`:

        bash

        ```sh
        $ pulumi import databricks:index/disableLegacyAccessSetting:DisableLegacyAccessSetting this global
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DisableLegacyAccessSettingDisableLegacyAccessArgs', 'DisableLegacyAccessSettingDisableLegacyAccessArgsDict']] disable_legacy_access: The configuration details.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DisableLegacyAccessSettingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The `DisableLegacyAccessSetting` resource allows you to disable legacy access. It has the following impact:

        1. Disables direct access to Hive Metastores from the workspace. However, you can still access a Hive Metastore through Hive Metastore federation.
        2. Disables Fallback Mode on any External Location access from the workspace.
        3. Disables Databricks Runtime versions prior to 13.3LTS.

        > This resource can only be used with a workspace-level provider!

        > It may take 5 minutes to take effect and requires a restart of clusters and SQL warehouses.

        > Please also set the default namespace using DefaultNamespaceSetting to any value other than `hive_metastore` to avoid potential issues.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_databricks as databricks

        this = databricks.DisableLegacyAccessSetting("this", disable_legacy_access={
            "value": True,
        })
        ```

        ## Import

        This resource can be imported by predefined name `global`:

        bash

        ```sh
        $ pulumi import databricks:index/disableLegacyAccessSetting:DisableLegacyAccessSetting this global
        ```

        :param str resource_name: The name of the resource.
        :param DisableLegacyAccessSettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DisableLegacyAccessSettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disable_legacy_access: Optional[pulumi.Input[Union['DisableLegacyAccessSettingDisableLegacyAccessArgs', 'DisableLegacyAccessSettingDisableLegacyAccessArgsDict']]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 setting_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DisableLegacyAccessSettingArgs.__new__(DisableLegacyAccessSettingArgs)

            if disable_legacy_access is None and not opts.urn:
                raise TypeError("Missing required property 'disable_legacy_access'")
            __props__.__dict__["disable_legacy_access"] = disable_legacy_access
            __props__.__dict__["etag"] = etag
            __props__.__dict__["setting_name"] = setting_name
        super(DisableLegacyAccessSetting, __self__).__init__(
            'databricks:index/disableLegacyAccessSetting:DisableLegacyAccessSetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            disable_legacy_access: Optional[pulumi.Input[Union['DisableLegacyAccessSettingDisableLegacyAccessArgs', 'DisableLegacyAccessSettingDisableLegacyAccessArgsDict']]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            setting_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'DisableLegacyAccessSetting':
        """
        Get an existing DisableLegacyAccessSetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DisableLegacyAccessSettingDisableLegacyAccessArgs', 'DisableLegacyAccessSettingDisableLegacyAccessArgsDict']] disable_legacy_access: The configuration details.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DisableLegacyAccessSettingState.__new__(_DisableLegacyAccessSettingState)

        __props__.__dict__["disable_legacy_access"] = disable_legacy_access
        __props__.__dict__["etag"] = etag
        __props__.__dict__["setting_name"] = setting_name
        return DisableLegacyAccessSetting(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="disableLegacyAccess")
    def disable_legacy_access(self) -> pulumi.Output['outputs.DisableLegacyAccessSettingDisableLegacyAccess']:
        """
        The configuration details.
        """
        return pulumi.get(self, "disable_legacy_access")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter(name="settingName")
    def setting_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "setting_name")

