# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AutomaticClusterUpdateWorkspaceSettingArgs', 'AutomaticClusterUpdateWorkspaceSetting']

@pulumi.input_type
class AutomaticClusterUpdateWorkspaceSettingArgs:
    def __init__(__self__, *,
                 automatic_cluster_update_workspace: pulumi.Input['AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceArgs'],
                 etag: Optional[pulumi.Input[str]] = None,
                 setting_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AutomaticClusterUpdateWorkspaceSetting resource.
        """
        pulumi.set(__self__, "automatic_cluster_update_workspace", automatic_cluster_update_workspace)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if setting_name is not None:
            pulumi.set(__self__, "setting_name", setting_name)

    @property
    @pulumi.getter(name="automaticClusterUpdateWorkspace")
    def automatic_cluster_update_workspace(self) -> pulumi.Input['AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceArgs']:
        return pulumi.get(self, "automatic_cluster_update_workspace")

    @automatic_cluster_update_workspace.setter
    def automatic_cluster_update_workspace(self, value: pulumi.Input['AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceArgs']):
        pulumi.set(self, "automatic_cluster_update_workspace", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="settingName")
    def setting_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "setting_name")

    @setting_name.setter
    def setting_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "setting_name", value)


@pulumi.input_type
class _AutomaticClusterUpdateWorkspaceSettingState:
    def __init__(__self__, *,
                 automatic_cluster_update_workspace: Optional[pulumi.Input['AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceArgs']] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 setting_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AutomaticClusterUpdateWorkspaceSetting resources.
        """
        if automatic_cluster_update_workspace is not None:
            pulumi.set(__self__, "automatic_cluster_update_workspace", automatic_cluster_update_workspace)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if setting_name is not None:
            pulumi.set(__self__, "setting_name", setting_name)

    @property
    @pulumi.getter(name="automaticClusterUpdateWorkspace")
    def automatic_cluster_update_workspace(self) -> Optional[pulumi.Input['AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceArgs']]:
        return pulumi.get(self, "automatic_cluster_update_workspace")

    @automatic_cluster_update_workspace.setter
    def automatic_cluster_update_workspace(self, value: Optional[pulumi.Input['AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceArgs']]):
        pulumi.set(self, "automatic_cluster_update_workspace", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="settingName")
    def setting_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "setting_name")

    @setting_name.setter
    def setting_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "setting_name", value)


class AutomaticClusterUpdateWorkspaceSetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automatic_cluster_update_workspace: Optional[pulumi.Input[pulumi.InputType['AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceArgs']]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 setting_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a AutomaticClusterUpdateWorkspaceSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AutomaticClusterUpdateWorkspaceSettingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AutomaticClusterUpdateWorkspaceSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AutomaticClusterUpdateWorkspaceSettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutomaticClusterUpdateWorkspaceSettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automatic_cluster_update_workspace: Optional[pulumi.Input[pulumi.InputType['AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceArgs']]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 setting_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutomaticClusterUpdateWorkspaceSettingArgs.__new__(AutomaticClusterUpdateWorkspaceSettingArgs)

            if automatic_cluster_update_workspace is None and not opts.urn:
                raise TypeError("Missing required property 'automatic_cluster_update_workspace'")
            __props__.__dict__["automatic_cluster_update_workspace"] = automatic_cluster_update_workspace
            __props__.__dict__["etag"] = etag
            __props__.__dict__["setting_name"] = setting_name
        super(AutomaticClusterUpdateWorkspaceSetting, __self__).__init__(
            'databricks:index/automaticClusterUpdateWorkspaceSetting:AutomaticClusterUpdateWorkspaceSetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            automatic_cluster_update_workspace: Optional[pulumi.Input[pulumi.InputType['AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspaceArgs']]] = None,
            etag: Optional[pulumi.Input[str]] = None,
            setting_name: Optional[pulumi.Input[str]] = None) -> 'AutomaticClusterUpdateWorkspaceSetting':
        """
        Get an existing AutomaticClusterUpdateWorkspaceSetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AutomaticClusterUpdateWorkspaceSettingState.__new__(_AutomaticClusterUpdateWorkspaceSettingState)

        __props__.__dict__["automatic_cluster_update_workspace"] = automatic_cluster_update_workspace
        __props__.__dict__["etag"] = etag
        __props__.__dict__["setting_name"] = setting_name
        return AutomaticClusterUpdateWorkspaceSetting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="automaticClusterUpdateWorkspace")
    def automatic_cluster_update_workspace(self) -> pulumi.Output['outputs.AutomaticClusterUpdateWorkspaceSettingAutomaticClusterUpdateWorkspace']:
        return pulumi.get(self, "automatic_cluster_update_workspace")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="settingName")
    def setting_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "setting_name")

