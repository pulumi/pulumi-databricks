# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MetastoreDataAccessArgs', 'MetastoreDataAccess']

@pulumi.input_type
class MetastoreDataAccessArgs:
    def __init__(__self__, *,
                 metastore_id: pulumi.Input[str],
                 aws_iam_role: Optional[pulumi.Input['MetastoreDataAccessAwsIamRoleArgs']] = None,
                 azure_managed_identity: Optional[pulumi.Input['MetastoreDataAccessAzureManagedIdentityArgs']] = None,
                 azure_service_principal: Optional[pulumi.Input['MetastoreDataAccessAzureServicePrincipalArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 databricks_gcp_service_account: Optional[pulumi.Input['MetastoreDataAccessDatabricksGcpServiceAccountArgs']] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gcp_service_account_key: Optional[pulumi.Input['MetastoreDataAccessGcpServiceAccountKeyArgs']] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a MetastoreDataAccess resource.
        :param pulumi.Input[str] metastore_id: Unique identifier of the parent Metastore
        :param pulumi.Input[bool] force_destroy: Delete the data access configuration regardless of its dependencies.
               
               `aws_iam_role` optional configuration block for credential details for AWS:
        :param pulumi.Input[str] name: Name of Data Access Configuration, which must be unique within the databricks_metastore. Change forces creation of a new resource.
        :param pulumi.Input[str] owner: Username/groupname/sp application_id of the data access configuration owner.
        """
        MetastoreDataAccessArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metastore_id=metastore_id,
            aws_iam_role=aws_iam_role,
            azure_managed_identity=azure_managed_identity,
            azure_service_principal=azure_service_principal,
            comment=comment,
            databricks_gcp_service_account=databricks_gcp_service_account,
            force_destroy=force_destroy,
            gcp_service_account_key=gcp_service_account_key,
            is_default=is_default,
            name=name,
            owner=owner,
            read_only=read_only,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metastore_id: pulumi.Input[str],
             aws_iam_role: Optional[pulumi.Input['MetastoreDataAccessAwsIamRoleArgs']] = None,
             azure_managed_identity: Optional[pulumi.Input['MetastoreDataAccessAzureManagedIdentityArgs']] = None,
             azure_service_principal: Optional[pulumi.Input['MetastoreDataAccessAzureServicePrincipalArgs']] = None,
             comment: Optional[pulumi.Input[str]] = None,
             databricks_gcp_service_account: Optional[pulumi.Input['MetastoreDataAccessDatabricksGcpServiceAccountArgs']] = None,
             force_destroy: Optional[pulumi.Input[bool]] = None,
             gcp_service_account_key: Optional[pulumi.Input['MetastoreDataAccessGcpServiceAccountKeyArgs']] = None,
             is_default: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             owner: Optional[pulumi.Input[str]] = None,
             read_only: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'metastoreId' in kwargs:
            metastore_id = kwargs['metastoreId']
        if 'awsIamRole' in kwargs:
            aws_iam_role = kwargs['awsIamRole']
        if 'azureManagedIdentity' in kwargs:
            azure_managed_identity = kwargs['azureManagedIdentity']
        if 'azureServicePrincipal' in kwargs:
            azure_service_principal = kwargs['azureServicePrincipal']
        if 'databricksGcpServiceAccount' in kwargs:
            databricks_gcp_service_account = kwargs['databricksGcpServiceAccount']
        if 'forceDestroy' in kwargs:
            force_destroy = kwargs['forceDestroy']
        if 'gcpServiceAccountKey' in kwargs:
            gcp_service_account_key = kwargs['gcpServiceAccountKey']
        if 'isDefault' in kwargs:
            is_default = kwargs['isDefault']
        if 'readOnly' in kwargs:
            read_only = kwargs['readOnly']

        _setter("metastore_id", metastore_id)
        if aws_iam_role is not None:
            _setter("aws_iam_role", aws_iam_role)
        if azure_managed_identity is not None:
            _setter("azure_managed_identity", azure_managed_identity)
        if azure_service_principal is not None:
            _setter("azure_service_principal", azure_service_principal)
        if comment is not None:
            _setter("comment", comment)
        if databricks_gcp_service_account is not None:
            _setter("databricks_gcp_service_account", databricks_gcp_service_account)
        if force_destroy is not None:
            _setter("force_destroy", force_destroy)
        if gcp_service_account_key is not None:
            _setter("gcp_service_account_key", gcp_service_account_key)
        if is_default is not None:
            _setter("is_default", is_default)
        if name is not None:
            _setter("name", name)
        if owner is not None:
            _setter("owner", owner)
        if read_only is not None:
            _setter("read_only", read_only)

    @property
    @pulumi.getter(name="metastoreId")
    def metastore_id(self) -> pulumi.Input[str]:
        """
        Unique identifier of the parent Metastore
        """
        return pulumi.get(self, "metastore_id")

    @metastore_id.setter
    def metastore_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "metastore_id", value)

    @property
    @pulumi.getter(name="awsIamRole")
    def aws_iam_role(self) -> Optional[pulumi.Input['MetastoreDataAccessAwsIamRoleArgs']]:
        return pulumi.get(self, "aws_iam_role")

    @aws_iam_role.setter
    def aws_iam_role(self, value: Optional[pulumi.Input['MetastoreDataAccessAwsIamRoleArgs']]):
        pulumi.set(self, "aws_iam_role", value)

    @property
    @pulumi.getter(name="azureManagedIdentity")
    def azure_managed_identity(self) -> Optional[pulumi.Input['MetastoreDataAccessAzureManagedIdentityArgs']]:
        return pulumi.get(self, "azure_managed_identity")

    @azure_managed_identity.setter
    def azure_managed_identity(self, value: Optional[pulumi.Input['MetastoreDataAccessAzureManagedIdentityArgs']]):
        pulumi.set(self, "azure_managed_identity", value)

    @property
    @pulumi.getter(name="azureServicePrincipal")
    def azure_service_principal(self) -> Optional[pulumi.Input['MetastoreDataAccessAzureServicePrincipalArgs']]:
        return pulumi.get(self, "azure_service_principal")

    @azure_service_principal.setter
    def azure_service_principal(self, value: Optional[pulumi.Input['MetastoreDataAccessAzureServicePrincipalArgs']]):
        pulumi.set(self, "azure_service_principal", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="databricksGcpServiceAccount")
    def databricks_gcp_service_account(self) -> Optional[pulumi.Input['MetastoreDataAccessDatabricksGcpServiceAccountArgs']]:
        return pulumi.get(self, "databricks_gcp_service_account")

    @databricks_gcp_service_account.setter
    def databricks_gcp_service_account(self, value: Optional[pulumi.Input['MetastoreDataAccessDatabricksGcpServiceAccountArgs']]):
        pulumi.set(self, "databricks_gcp_service_account", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        Delete the data access configuration regardless of its dependencies.

        `aws_iam_role` optional configuration block for credential details for AWS:
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter(name="gcpServiceAccountKey")
    def gcp_service_account_key(self) -> Optional[pulumi.Input['MetastoreDataAccessGcpServiceAccountKeyArgs']]:
        return pulumi.get(self, "gcp_service_account_key")

    @gcp_service_account_key.setter
    def gcp_service_account_key(self, value: Optional[pulumi.Input['MetastoreDataAccessGcpServiceAccountKeyArgs']]):
        pulumi.set(self, "gcp_service_account_key", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Data Access Configuration, which must be unique within the databricks_metastore. Change forces creation of a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Username/groupname/sp application_id of the data access configuration owner.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class _MetastoreDataAccessState:
    def __init__(__self__, *,
                 aws_iam_role: Optional[pulumi.Input['MetastoreDataAccessAwsIamRoleArgs']] = None,
                 azure_managed_identity: Optional[pulumi.Input['MetastoreDataAccessAzureManagedIdentityArgs']] = None,
                 azure_service_principal: Optional[pulumi.Input['MetastoreDataAccessAzureServicePrincipalArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 databricks_gcp_service_account: Optional[pulumi.Input['MetastoreDataAccessDatabricksGcpServiceAccountArgs']] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gcp_service_account_key: Optional[pulumi.Input['MetastoreDataAccessGcpServiceAccountKeyArgs']] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 metastore_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering MetastoreDataAccess resources.
        :param pulumi.Input[bool] force_destroy: Delete the data access configuration regardless of its dependencies.
               
               `aws_iam_role` optional configuration block for credential details for AWS:
        :param pulumi.Input[str] metastore_id: Unique identifier of the parent Metastore
        :param pulumi.Input[str] name: Name of Data Access Configuration, which must be unique within the databricks_metastore. Change forces creation of a new resource.
        :param pulumi.Input[str] owner: Username/groupname/sp application_id of the data access configuration owner.
        """
        _MetastoreDataAccessState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_iam_role=aws_iam_role,
            azure_managed_identity=azure_managed_identity,
            azure_service_principal=azure_service_principal,
            comment=comment,
            databricks_gcp_service_account=databricks_gcp_service_account,
            force_destroy=force_destroy,
            gcp_service_account_key=gcp_service_account_key,
            is_default=is_default,
            metastore_id=metastore_id,
            name=name,
            owner=owner,
            read_only=read_only,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_iam_role: Optional[pulumi.Input['MetastoreDataAccessAwsIamRoleArgs']] = None,
             azure_managed_identity: Optional[pulumi.Input['MetastoreDataAccessAzureManagedIdentityArgs']] = None,
             azure_service_principal: Optional[pulumi.Input['MetastoreDataAccessAzureServicePrincipalArgs']] = None,
             comment: Optional[pulumi.Input[str]] = None,
             databricks_gcp_service_account: Optional[pulumi.Input['MetastoreDataAccessDatabricksGcpServiceAccountArgs']] = None,
             force_destroy: Optional[pulumi.Input[bool]] = None,
             gcp_service_account_key: Optional[pulumi.Input['MetastoreDataAccessGcpServiceAccountKeyArgs']] = None,
             is_default: Optional[pulumi.Input[bool]] = None,
             metastore_id: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             owner: Optional[pulumi.Input[str]] = None,
             read_only: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'awsIamRole' in kwargs:
            aws_iam_role = kwargs['awsIamRole']
        if 'azureManagedIdentity' in kwargs:
            azure_managed_identity = kwargs['azureManagedIdentity']
        if 'azureServicePrincipal' in kwargs:
            azure_service_principal = kwargs['azureServicePrincipal']
        if 'databricksGcpServiceAccount' in kwargs:
            databricks_gcp_service_account = kwargs['databricksGcpServiceAccount']
        if 'forceDestroy' in kwargs:
            force_destroy = kwargs['forceDestroy']
        if 'gcpServiceAccountKey' in kwargs:
            gcp_service_account_key = kwargs['gcpServiceAccountKey']
        if 'isDefault' in kwargs:
            is_default = kwargs['isDefault']
        if 'metastoreId' in kwargs:
            metastore_id = kwargs['metastoreId']
        if 'readOnly' in kwargs:
            read_only = kwargs['readOnly']

        if aws_iam_role is not None:
            _setter("aws_iam_role", aws_iam_role)
        if azure_managed_identity is not None:
            _setter("azure_managed_identity", azure_managed_identity)
        if azure_service_principal is not None:
            _setter("azure_service_principal", azure_service_principal)
        if comment is not None:
            _setter("comment", comment)
        if databricks_gcp_service_account is not None:
            _setter("databricks_gcp_service_account", databricks_gcp_service_account)
        if force_destroy is not None:
            _setter("force_destroy", force_destroy)
        if gcp_service_account_key is not None:
            _setter("gcp_service_account_key", gcp_service_account_key)
        if is_default is not None:
            _setter("is_default", is_default)
        if metastore_id is not None:
            _setter("metastore_id", metastore_id)
        if name is not None:
            _setter("name", name)
        if owner is not None:
            _setter("owner", owner)
        if read_only is not None:
            _setter("read_only", read_only)

    @property
    @pulumi.getter(name="awsIamRole")
    def aws_iam_role(self) -> Optional[pulumi.Input['MetastoreDataAccessAwsIamRoleArgs']]:
        return pulumi.get(self, "aws_iam_role")

    @aws_iam_role.setter
    def aws_iam_role(self, value: Optional[pulumi.Input['MetastoreDataAccessAwsIamRoleArgs']]):
        pulumi.set(self, "aws_iam_role", value)

    @property
    @pulumi.getter(name="azureManagedIdentity")
    def azure_managed_identity(self) -> Optional[pulumi.Input['MetastoreDataAccessAzureManagedIdentityArgs']]:
        return pulumi.get(self, "azure_managed_identity")

    @azure_managed_identity.setter
    def azure_managed_identity(self, value: Optional[pulumi.Input['MetastoreDataAccessAzureManagedIdentityArgs']]):
        pulumi.set(self, "azure_managed_identity", value)

    @property
    @pulumi.getter(name="azureServicePrincipal")
    def azure_service_principal(self) -> Optional[pulumi.Input['MetastoreDataAccessAzureServicePrincipalArgs']]:
        return pulumi.get(self, "azure_service_principal")

    @azure_service_principal.setter
    def azure_service_principal(self, value: Optional[pulumi.Input['MetastoreDataAccessAzureServicePrincipalArgs']]):
        pulumi.set(self, "azure_service_principal", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="databricksGcpServiceAccount")
    def databricks_gcp_service_account(self) -> Optional[pulumi.Input['MetastoreDataAccessDatabricksGcpServiceAccountArgs']]:
        return pulumi.get(self, "databricks_gcp_service_account")

    @databricks_gcp_service_account.setter
    def databricks_gcp_service_account(self, value: Optional[pulumi.Input['MetastoreDataAccessDatabricksGcpServiceAccountArgs']]):
        pulumi.set(self, "databricks_gcp_service_account", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        Delete the data access configuration regardless of its dependencies.

        `aws_iam_role` optional configuration block for credential details for AWS:
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter(name="gcpServiceAccountKey")
    def gcp_service_account_key(self) -> Optional[pulumi.Input['MetastoreDataAccessGcpServiceAccountKeyArgs']]:
        return pulumi.get(self, "gcp_service_account_key")

    @gcp_service_account_key.setter
    def gcp_service_account_key(self, value: Optional[pulumi.Input['MetastoreDataAccessGcpServiceAccountKeyArgs']]):
        pulumi.set(self, "gcp_service_account_key", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="metastoreId")
    def metastore_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the parent Metastore
        """
        return pulumi.get(self, "metastore_id")

    @metastore_id.setter
    def metastore_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metastore_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Data Access Configuration, which must be unique within the databricks_metastore. Change forces creation of a new resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Username/groupname/sp application_id of the data access configuration owner.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


class MetastoreDataAccess(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_iam_role: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessAwsIamRoleArgs']]] = None,
                 azure_managed_identity: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessAzureManagedIdentityArgs']]] = None,
                 azure_service_principal: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessAzureServicePrincipalArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 databricks_gcp_service_account: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessDatabricksGcpServiceAccountArgs']]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gcp_service_account_key: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessGcpServiceAccountKeyArgs']]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 metastore_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Each Metastore requires an IAM role that will be assumed by Unity Catalog to access data. `MetastoreDataAccess` defines this

        ## Import

        This resource can be imported by combination of metastore id and the data access name. bash

        ```sh
         $ pulumi import databricks:index/metastoreDataAccess:MetastoreDataAccess this '<metastore_id>|<name>'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] force_destroy: Delete the data access configuration regardless of its dependencies.
               
               `aws_iam_role` optional configuration block for credential details for AWS:
        :param pulumi.Input[str] metastore_id: Unique identifier of the parent Metastore
        :param pulumi.Input[str] name: Name of Data Access Configuration, which must be unique within the databricks_metastore. Change forces creation of a new resource.
        :param pulumi.Input[str] owner: Username/groupname/sp application_id of the data access configuration owner.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MetastoreDataAccessArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Each Metastore requires an IAM role that will be assumed by Unity Catalog to access data. `MetastoreDataAccess` defines this

        ## Import

        This resource can be imported by combination of metastore id and the data access name. bash

        ```sh
         $ pulumi import databricks:index/metastoreDataAccess:MetastoreDataAccess this '<metastore_id>|<name>'
        ```

        :param str resource_name: The name of the resource.
        :param MetastoreDataAccessArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MetastoreDataAccessArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            MetastoreDataAccessArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_iam_role: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessAwsIamRoleArgs']]] = None,
                 azure_managed_identity: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessAzureManagedIdentityArgs']]] = None,
                 azure_service_principal: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessAzureServicePrincipalArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 databricks_gcp_service_account: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessDatabricksGcpServiceAccountArgs']]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gcp_service_account_key: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessGcpServiceAccountKeyArgs']]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 metastore_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MetastoreDataAccessArgs.__new__(MetastoreDataAccessArgs)

            if aws_iam_role is not None and not isinstance(aws_iam_role, MetastoreDataAccessAwsIamRoleArgs):
                aws_iam_role = aws_iam_role or {}
                def _setter(key, value):
                    aws_iam_role[key] = value
                MetastoreDataAccessAwsIamRoleArgs._configure(_setter, **aws_iam_role)
            __props__.__dict__["aws_iam_role"] = aws_iam_role
            if azure_managed_identity is not None and not isinstance(azure_managed_identity, MetastoreDataAccessAzureManagedIdentityArgs):
                azure_managed_identity = azure_managed_identity or {}
                def _setter(key, value):
                    azure_managed_identity[key] = value
                MetastoreDataAccessAzureManagedIdentityArgs._configure(_setter, **azure_managed_identity)
            __props__.__dict__["azure_managed_identity"] = azure_managed_identity
            if azure_service_principal is not None and not isinstance(azure_service_principal, MetastoreDataAccessAzureServicePrincipalArgs):
                azure_service_principal = azure_service_principal or {}
                def _setter(key, value):
                    azure_service_principal[key] = value
                MetastoreDataAccessAzureServicePrincipalArgs._configure(_setter, **azure_service_principal)
            __props__.__dict__["azure_service_principal"] = azure_service_principal
            __props__.__dict__["comment"] = comment
            if databricks_gcp_service_account is not None and not isinstance(databricks_gcp_service_account, MetastoreDataAccessDatabricksGcpServiceAccountArgs):
                databricks_gcp_service_account = databricks_gcp_service_account or {}
                def _setter(key, value):
                    databricks_gcp_service_account[key] = value
                MetastoreDataAccessDatabricksGcpServiceAccountArgs._configure(_setter, **databricks_gcp_service_account)
            __props__.__dict__["databricks_gcp_service_account"] = databricks_gcp_service_account
            __props__.__dict__["force_destroy"] = force_destroy
            if gcp_service_account_key is not None and not isinstance(gcp_service_account_key, MetastoreDataAccessGcpServiceAccountKeyArgs):
                gcp_service_account_key = gcp_service_account_key or {}
                def _setter(key, value):
                    gcp_service_account_key[key] = value
                MetastoreDataAccessGcpServiceAccountKeyArgs._configure(_setter, **gcp_service_account_key)
            __props__.__dict__["gcp_service_account_key"] = gcp_service_account_key
            __props__.__dict__["is_default"] = is_default
            if metastore_id is None and not opts.urn:
                raise TypeError("Missing required property 'metastore_id'")
            __props__.__dict__["metastore_id"] = metastore_id
            __props__.__dict__["name"] = name
            __props__.__dict__["owner"] = owner
            __props__.__dict__["read_only"] = read_only
        super(MetastoreDataAccess, __self__).__init__(
            'databricks:index/metastoreDataAccess:MetastoreDataAccess',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aws_iam_role: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessAwsIamRoleArgs']]] = None,
            azure_managed_identity: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessAzureManagedIdentityArgs']]] = None,
            azure_service_principal: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessAzureServicePrincipalArgs']]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            databricks_gcp_service_account: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessDatabricksGcpServiceAccountArgs']]] = None,
            force_destroy: Optional[pulumi.Input[bool]] = None,
            gcp_service_account_key: Optional[pulumi.Input[pulumi.InputType['MetastoreDataAccessGcpServiceAccountKeyArgs']]] = None,
            is_default: Optional[pulumi.Input[bool]] = None,
            metastore_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            read_only: Optional[pulumi.Input[bool]] = None) -> 'MetastoreDataAccess':
        """
        Get an existing MetastoreDataAccess resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] force_destroy: Delete the data access configuration regardless of its dependencies.
               
               `aws_iam_role` optional configuration block for credential details for AWS:
        :param pulumi.Input[str] metastore_id: Unique identifier of the parent Metastore
        :param pulumi.Input[str] name: Name of Data Access Configuration, which must be unique within the databricks_metastore. Change forces creation of a new resource.
        :param pulumi.Input[str] owner: Username/groupname/sp application_id of the data access configuration owner.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MetastoreDataAccessState.__new__(_MetastoreDataAccessState)

        __props__.__dict__["aws_iam_role"] = aws_iam_role
        __props__.__dict__["azure_managed_identity"] = azure_managed_identity
        __props__.__dict__["azure_service_principal"] = azure_service_principal
        __props__.__dict__["comment"] = comment
        __props__.__dict__["databricks_gcp_service_account"] = databricks_gcp_service_account
        __props__.__dict__["force_destroy"] = force_destroy
        __props__.__dict__["gcp_service_account_key"] = gcp_service_account_key
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["metastore_id"] = metastore_id
        __props__.__dict__["name"] = name
        __props__.__dict__["owner"] = owner
        __props__.__dict__["read_only"] = read_only
        return MetastoreDataAccess(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="awsIamRole")
    def aws_iam_role(self) -> pulumi.Output[Optional['outputs.MetastoreDataAccessAwsIamRole']]:
        return pulumi.get(self, "aws_iam_role")

    @property
    @pulumi.getter(name="azureManagedIdentity")
    def azure_managed_identity(self) -> pulumi.Output[Optional['outputs.MetastoreDataAccessAzureManagedIdentity']]:
        return pulumi.get(self, "azure_managed_identity")

    @property
    @pulumi.getter(name="azureServicePrincipal")
    def azure_service_principal(self) -> pulumi.Output[Optional['outputs.MetastoreDataAccessAzureServicePrincipal']]:
        return pulumi.get(self, "azure_service_principal")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="databricksGcpServiceAccount")
    def databricks_gcp_service_account(self) -> pulumi.Output['outputs.MetastoreDataAccessDatabricksGcpServiceAccount']:
        return pulumi.get(self, "databricks_gcp_service_account")

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> pulumi.Output[Optional[bool]]:
        """
        Delete the data access configuration regardless of its dependencies.

        `aws_iam_role` optional configuration block for credential details for AWS:
        """
        return pulumi.get(self, "force_destroy")

    @property
    @pulumi.getter(name="gcpServiceAccountKey")
    def gcp_service_account_key(self) -> pulumi.Output[Optional['outputs.MetastoreDataAccessGcpServiceAccountKey']]:
        return pulumi.get(self, "gcp_service_account_key")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="metastoreId")
    def metastore_id(self) -> pulumi.Output[str]:
        """
        Unique identifier of the parent Metastore
        """
        return pulumi.get(self, "metastore_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of Data Access Configuration, which must be unique within the databricks_metastore. Change forces creation of a new resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        Username/groupname/sp application_id of the data access configuration owner.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "read_only")

