# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDatabaseDatabaseCatalogResult',
    'AwaitableGetDatabaseDatabaseCatalogResult',
    'get_database_database_catalog',
    'get_database_database_catalog_output',
]

@pulumi.output_type
class GetDatabaseDatabaseCatalogResult:
    """
    A collection of values returned by getDatabaseDatabaseCatalog.
    """
    def __init__(__self__, create_database_if_not_exists=None, database_instance_name=None, database_name=None, id=None, name=None, uid=None):
        if create_database_if_not_exists and not isinstance(create_database_if_not_exists, bool):
            raise TypeError("Expected argument 'create_database_if_not_exists' to be a bool")
        pulumi.set(__self__, "create_database_if_not_exists", create_database_if_not_exists)
        if database_instance_name and not isinstance(database_instance_name, str):
            raise TypeError("Expected argument 'database_instance_name' to be a str")
        pulumi.set(__self__, "database_instance_name", database_instance_name)
        if database_name and not isinstance(database_name, str):
            raise TypeError("Expected argument 'database_name' to be a str")
        pulumi.set(__self__, "database_name", database_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter(name="createDatabaseIfNotExists")
    def create_database_if_not_exists(self) -> _builtins.bool:
        """
        (boolean)
        """
        return pulumi.get(self, "create_database_if_not_exists")

    @_builtins.property
    @pulumi.getter(name="databaseInstanceName")
    def database_instance_name(self) -> _builtins.str:
        """
        (string) - The name of the DatabaseInstance housing the database
        """
        return pulumi.get(self, "database_instance_name")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> _builtins.str:
        """
        (string) - The name of the database (in a instance) associated with the catalog
        """
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        (string) - The name of the catalog in UC
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        """
        (string)
        """
        return pulumi.get(self, "uid")


class AwaitableGetDatabaseDatabaseCatalogResult(GetDatabaseDatabaseCatalogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseDatabaseCatalogResult(
            create_database_if_not_exists=self.create_database_if_not_exists,
            database_instance_name=self.database_instance_name,
            database_name=self.database_name,
            id=self.id,
            name=self.name,
            uid=self.uid)


def get_database_database_catalog(create_database_if_not_exists: Optional[_builtins.bool] = None,
                                  database_instance_name: Optional[_builtins.str] = None,
                                  database_name: Optional[_builtins.str] = None,
                                  name: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseDatabaseCatalogResult:
    """
    This data source can be used to get a single Database Catalog.

    ## Example Usage

    Referring to a Database Catalog by name:

    ```python
    import pulumi
    import pulumi_databricks as databricks

    this = databricks.get_database_database_catalog(name="my-database-catalog")
    ```


    :param _builtins.bool create_database_if_not_exists: (boolean)
    :param _builtins.str database_instance_name: (string) - The name of the DatabaseInstance housing the database
    :param _builtins.str database_name: (string) - The name of the database (in a instance) associated with the catalog
    :param _builtins.str name: The name of the catalog in UC
    """
    __args__ = dict()
    __args__['createDatabaseIfNotExists'] = create_database_if_not_exists
    __args__['databaseInstanceName'] = database_instance_name
    __args__['databaseName'] = database_name
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('databricks:index/getDatabaseDatabaseCatalog:getDatabaseDatabaseCatalog', __args__, opts=opts, typ=GetDatabaseDatabaseCatalogResult).value

    return AwaitableGetDatabaseDatabaseCatalogResult(
        create_database_if_not_exists=pulumi.get(__ret__, 'create_database_if_not_exists'),
        database_instance_name=pulumi.get(__ret__, 'database_instance_name'),
        database_name=pulumi.get(__ret__, 'database_name'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        uid=pulumi.get(__ret__, 'uid'))
def get_database_database_catalog_output(create_database_if_not_exists: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                         database_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                                         database_name: Optional[pulumi.Input[_builtins.str]] = None,
                                         name: Optional[pulumi.Input[_builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabaseDatabaseCatalogResult]:
    """
    This data source can be used to get a single Database Catalog.

    ## Example Usage

    Referring to a Database Catalog by name:

    ```python
    import pulumi
    import pulumi_databricks as databricks

    this = databricks.get_database_database_catalog(name="my-database-catalog")
    ```


    :param _builtins.bool create_database_if_not_exists: (boolean)
    :param _builtins.str database_instance_name: (string) - The name of the DatabaseInstance housing the database
    :param _builtins.str database_name: (string) - The name of the database (in a instance) associated with the catalog
    :param _builtins.str name: The name of the catalog in UC
    """
    __args__ = dict()
    __args__['createDatabaseIfNotExists'] = create_database_if_not_exists
    __args__['databaseInstanceName'] = database_instance_name
    __args__['databaseName'] = database_name
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('databricks:index/getDatabaseDatabaseCatalog:getDatabaseDatabaseCatalog', __args__, opts=opts, typ=GetDatabaseDatabaseCatalogResult)
    return __ret__.apply(lambda __response__: GetDatabaseDatabaseCatalogResult(
        create_database_if_not_exists=pulumi.get(__response__, 'create_database_if_not_exists'),
        database_instance_name=pulumi.get(__response__, 'database_instance_name'),
        database_name=pulumi.get(__response__, 'database_name'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        uid=pulumi.get(__response__, 'uid')))
