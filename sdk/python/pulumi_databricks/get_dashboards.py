# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDashboardsResult',
    'AwaitableGetDashboardsResult',
    'get_dashboards',
    'get_dashboards_output',
]

@pulumi.output_type
class GetDashboardsResult:
    """
    A collection of values returned by getDashboards.
    """
    def __init__(__self__, dashboard_name_contains=None, dashboards=None, id=None):
        if dashboard_name_contains and not isinstance(dashboard_name_contains, str):
            raise TypeError("Expected argument 'dashboard_name_contains' to be a str")
        pulumi.set(__self__, "dashboard_name_contains", dashboard_name_contains)
        if dashboards and not isinstance(dashboards, list):
            raise TypeError("Expected argument 'dashboards' to be a list")
        pulumi.set(__self__, "dashboards", dashboards)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="dashboardNameContains")
    def dashboard_name_contains(self) -> Optional[str]:
        return pulumi.get(self, "dashboard_name_contains")

    @property
    @pulumi.getter
    def dashboards(self) -> Sequence['outputs.GetDashboardsDashboardResult']:
        """
        A list of dashboards matching the specified criteria. Each element contains the following attributes:
        """
        return pulumi.get(self, "dashboards")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetDashboardsResult(GetDashboardsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDashboardsResult(
            dashboard_name_contains=self.dashboard_name_contains,
            dashboards=self.dashboards,
            id=self.id)


def get_dashboards(dashboard_name_contains: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDashboardsResult:
    """
    This data source allows you to retrieve information about Databricks [Dashboards](https://docs.databricks.com/en/dashboards/index.html).


    :param str dashboard_name_contains: A **case-insensitive** substring to filter Dashboards by their name.
    """
    __args__ = dict()
    __args__['dashboardNameContains'] = dashboard_name_contains
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('databricks:index/getDashboards:getDashboards', __args__, opts=opts, typ=GetDashboardsResult).value

    return AwaitableGetDashboardsResult(
        dashboard_name_contains=pulumi.get(__ret__, 'dashboard_name_contains'),
        dashboards=pulumi.get(__ret__, 'dashboards'),
        id=pulumi.get(__ret__, 'id'))
def get_dashboards_output(dashboard_name_contains: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDashboardsResult]:
    """
    This data source allows you to retrieve information about Databricks [Dashboards](https://docs.databricks.com/en/dashboards/index.html).


    :param str dashboard_name_contains: A **case-insensitive** substring to filter Dashboards by their name.
    """
    __args__ = dict()
    __args__['dashboardNameContains'] = dashboard_name_contains
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('databricks:index/getDashboards:getDashboards', __args__, opts=opts, typ=GetDashboardsResult)
    return __ret__.apply(lambda __response__: GetDashboardsResult(
        dashboard_name_contains=pulumi.get(__response__, 'dashboard_name_contains'),
        dashboards=pulumi.get(__response__, 'dashboards'),
        id=pulumi.get(__response__, 'id')))
