# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MwsWorkspacesArgs', 'MwsWorkspaces']

@pulumi.input_type
class MwsWorkspacesArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 workspace_name: pulumi.Input[str],
                 aws_region: Optional[pulumi.Input[str]] = None,
                 cloud: Optional[pulumi.Input[str]] = None,
                 cloud_resource_container: Optional[pulumi.Input['MwsWorkspacesCloudResourceContainerArgs']] = None,
                 creation_time: Optional[pulumi.Input[int]] = None,
                 credentials_id: Optional[pulumi.Input[str]] = None,
                 custom_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 customer_managed_key_id: Optional[pulumi.Input[str]] = None,
                 deployment_name: Optional[pulumi.Input[str]] = None,
                 external_customer_info: Optional[pulumi.Input['MwsWorkspacesExternalCustomerInfoArgs']] = None,
                 gcp_managed_network_config: Optional[pulumi.Input['MwsWorkspacesGcpManagedNetworkConfigArgs']] = None,
                 gke_config: Optional[pulumi.Input['MwsWorkspacesGkeConfigArgs']] = None,
                 is_no_public_ip_enabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_services_customer_managed_key_id: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 pricing_tier: Optional[pulumi.Input[str]] = None,
                 private_access_settings_id: Optional[pulumi.Input[str]] = None,
                 storage_configuration_id: Optional[pulumi.Input[str]] = None,
                 storage_customer_managed_key_id: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input['MwsWorkspacesTokenArgs']] = None,
                 workspace_id: Optional[pulumi.Input[int]] = None,
                 workspace_status: Optional[pulumi.Input[str]] = None,
                 workspace_status_message: Optional[pulumi.Input[str]] = None,
                 workspace_url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MwsWorkspaces resource.
        :param pulumi.Input[str] account_id: Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/).
        :param pulumi.Input[str] workspace_name: name of the workspace, will appear on UI.
        :param pulumi.Input[str] aws_region: region of VPC.
        :param pulumi.Input['MwsWorkspacesCloudResourceContainerArgs'] cloud_resource_container: A block that specifies GCP workspace configurations, consisting of following blocks:
        :param pulumi.Input[int] creation_time: (Integer) time when workspace was created
        :param pulumi.Input[Mapping[str, Any]] custom_tags: The custom tags key-value pairing that is attached to this workspace. These tags will be applied to clusters automatically in addition to any `default_tags` or `custom_tags` on a cluster level. Please note it can take up to an hour for custom_tags to be set due to scheduling on Control Plane. After custom tags are applied, they can be modified however they can never be completely removed.
        :param pulumi.Input[str] deployment_name: part of URL as in `https://<prefix>-<deployment-name>.cloud.databricks.com`. Deployment name cannot be used until a deployment name prefix is defined. Please contact your Databricks representative. Once a new deployment prefix is added/updated, it only will affect the new workspaces created.
        :param pulumi.Input['MwsWorkspacesGkeConfigArgs'] gke_config: A block that specifies GKE configuration for the Databricks workspace:
        :param pulumi.Input[str] location: region of the subnet.
        :param pulumi.Input[str] managed_services_customer_managed_key_id: `customer_managed_key_id` from customer managed keys with `use_cases` set to `MANAGED_SERVICES`. This is used to encrypt the workspace's notebook and secret data in the control plane.
        :param pulumi.Input[str] network_id: `network_id` from networks.
        :param pulumi.Input[str] private_access_settings_id: Canonical unique identifier of MwsPrivateAccessSettings in Databricks Account.
        :param pulumi.Input[str] storage_configuration_id: `storage_configuration_id` from storage configuration.
        :param pulumi.Input[str] storage_customer_managed_key_id: `customer_managed_key_id` from customer managed keys with `use_cases` set to `STORAGE`. This is used to encrypt the DBFS Storage & Cluster Volumes.
        :param pulumi.Input[int] workspace_id: (String) workspace id
        :param pulumi.Input[str] workspace_status: (String) workspace status
        :param pulumi.Input[str] workspace_status_message: (String) updates on workspace status
        :param pulumi.Input[str] workspace_url: (String) URL of the workspace
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "workspace_name", workspace_name)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if cloud_resource_container is not None:
            pulumi.set(__self__, "cloud_resource_container", cloud_resource_container)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if credentials_id is not None:
            pulumi.set(__self__, "credentials_id", credentials_id)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)
        if customer_managed_key_id is not None:
            warnings.warn("""Use managed_services_customer_managed_key_id instead""", DeprecationWarning)
            pulumi.log.warn("""customer_managed_key_id is deprecated: Use managed_services_customer_managed_key_id instead""")
        if customer_managed_key_id is not None:
            pulumi.set(__self__, "customer_managed_key_id", customer_managed_key_id)
        if deployment_name is not None:
            pulumi.set(__self__, "deployment_name", deployment_name)
        if external_customer_info is not None:
            pulumi.set(__self__, "external_customer_info", external_customer_info)
        if gcp_managed_network_config is not None:
            pulumi.set(__self__, "gcp_managed_network_config", gcp_managed_network_config)
        if gke_config is not None:
            pulumi.set(__self__, "gke_config", gke_config)
        if is_no_public_ip_enabled is not None:
            pulumi.set(__self__, "is_no_public_ip_enabled", is_no_public_ip_enabled)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if managed_services_customer_managed_key_id is not None:
            pulumi.set(__self__, "managed_services_customer_managed_key_id", managed_services_customer_managed_key_id)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if pricing_tier is not None:
            pulumi.set(__self__, "pricing_tier", pricing_tier)
        if private_access_settings_id is not None:
            pulumi.set(__self__, "private_access_settings_id", private_access_settings_id)
        if storage_configuration_id is not None:
            pulumi.set(__self__, "storage_configuration_id", storage_configuration_id)
        if storage_customer_managed_key_id is not None:
            pulumi.set(__self__, "storage_customer_managed_key_id", storage_customer_managed_key_id)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)
        if workspace_status is not None:
            pulumi.set(__self__, "workspace_status", workspace_status)
        if workspace_status_message is not None:
            pulumi.set(__self__, "workspace_status_message", workspace_status_message)
        if workspace_url is not None:
            pulumi.set(__self__, "workspace_url", workspace_url)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/).
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> pulumi.Input[str]:
        """
        name of the workspace, will appear on UI.
        """
        return pulumi.get(self, "workspace_name")

    @workspace_name.setter
    def workspace_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_name", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[pulumi.Input[str]]:
        """
        region of VPC.
        """
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_region", value)

    @property
    @pulumi.getter
    def cloud(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter(name="cloudResourceContainer")
    def cloud_resource_container(self) -> Optional[pulumi.Input['MwsWorkspacesCloudResourceContainerArgs']]:
        """
        A block that specifies GCP workspace configurations, consisting of following blocks:
        """
        return pulumi.get(self, "cloud_resource_container")

    @cloud_resource_container.setter
    def cloud_resource_container(self, value: Optional[pulumi.Input['MwsWorkspacesCloudResourceContainerArgs']]):
        pulumi.set(self, "cloud_resource_container", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[int]]:
        """
        (Integer) time when workspace was created
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_id", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The custom tags key-value pairing that is attached to this workspace. These tags will be applied to clusters automatically in addition to any `default_tags` or `custom_tags` on a cluster level. Please note it can take up to an hour for custom_tags to be set due to scheduling on Control Plane. After custom tags are applied, they can be modified however they can never be completely removed.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_tags", value)

    @property
    @pulumi.getter(name="customerManagedKeyId")
    def customer_managed_key_id(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""Use managed_services_customer_managed_key_id instead""", DeprecationWarning)
        pulumi.log.warn("""customer_managed_key_id is deprecated: Use managed_services_customer_managed_key_id instead""")

        return pulumi.get(self, "customer_managed_key_id")

    @customer_managed_key_id.setter
    def customer_managed_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_managed_key_id", value)

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> Optional[pulumi.Input[str]]:
        """
        part of URL as in `https://<prefix>-<deployment-name>.cloud.databricks.com`. Deployment name cannot be used until a deployment name prefix is defined. Please contact your Databricks representative. Once a new deployment prefix is added/updated, it only will affect the new workspaces created.
        """
        return pulumi.get(self, "deployment_name")

    @deployment_name.setter
    def deployment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_name", value)

    @property
    @pulumi.getter(name="externalCustomerInfo")
    def external_customer_info(self) -> Optional[pulumi.Input['MwsWorkspacesExternalCustomerInfoArgs']]:
        return pulumi.get(self, "external_customer_info")

    @external_customer_info.setter
    def external_customer_info(self, value: Optional[pulumi.Input['MwsWorkspacesExternalCustomerInfoArgs']]):
        pulumi.set(self, "external_customer_info", value)

    @property
    @pulumi.getter(name="gcpManagedNetworkConfig")
    def gcp_managed_network_config(self) -> Optional[pulumi.Input['MwsWorkspacesGcpManagedNetworkConfigArgs']]:
        return pulumi.get(self, "gcp_managed_network_config")

    @gcp_managed_network_config.setter
    def gcp_managed_network_config(self, value: Optional[pulumi.Input['MwsWorkspacesGcpManagedNetworkConfigArgs']]):
        pulumi.set(self, "gcp_managed_network_config", value)

    @property
    @pulumi.getter(name="gkeConfig")
    def gke_config(self) -> Optional[pulumi.Input['MwsWorkspacesGkeConfigArgs']]:
        """
        A block that specifies GKE configuration for the Databricks workspace:
        """
        return pulumi.get(self, "gke_config")

    @gke_config.setter
    def gke_config(self, value: Optional[pulumi.Input['MwsWorkspacesGkeConfigArgs']]):
        pulumi.set(self, "gke_config", value)

    @property
    @pulumi.getter(name="isNoPublicIpEnabled")
    def is_no_public_ip_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_no_public_ip_enabled")

    @is_no_public_ip_enabled.setter
    def is_no_public_ip_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_no_public_ip_enabled", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        region of the subnet.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="managedServicesCustomerManagedKeyId")
    def managed_services_customer_managed_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        `customer_managed_key_id` from customer managed keys with `use_cases` set to `MANAGED_SERVICES`. This is used to encrypt the workspace's notebook and secret data in the control plane.
        """
        return pulumi.get(self, "managed_services_customer_managed_key_id")

    @managed_services_customer_managed_key_id.setter
    def managed_services_customer_managed_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_services_customer_managed_key_id", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        `network_id` from networks.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="pricingTier")
    def pricing_tier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pricing_tier")

    @pricing_tier.setter
    def pricing_tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pricing_tier", value)

    @property
    @pulumi.getter(name="privateAccessSettingsId")
    def private_access_settings_id(self) -> Optional[pulumi.Input[str]]:
        """
        Canonical unique identifier of MwsPrivateAccessSettings in Databricks Account.
        """
        return pulumi.get(self, "private_access_settings_id")

    @private_access_settings_id.setter
    def private_access_settings_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_access_settings_id", value)

    @property
    @pulumi.getter(name="storageConfigurationId")
    def storage_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        `storage_configuration_id` from storage configuration.
        """
        return pulumi.get(self, "storage_configuration_id")

    @storage_configuration_id.setter
    def storage_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_configuration_id", value)

    @property
    @pulumi.getter(name="storageCustomerManagedKeyId")
    def storage_customer_managed_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        `customer_managed_key_id` from customer managed keys with `use_cases` set to `STORAGE`. This is used to encrypt the DBFS Storage & Cluster Volumes.
        """
        return pulumi.get(self, "storage_customer_managed_key_id")

    @storage_customer_managed_key_id.setter
    def storage_customer_managed_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_customer_managed_key_id", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input['MwsWorkspacesTokenArgs']]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input['MwsWorkspacesTokenArgs']]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[int]]:
        """
        (String) workspace id
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "workspace_id", value)

    @property
    @pulumi.getter(name="workspaceStatus")
    def workspace_status(self) -> Optional[pulumi.Input[str]]:
        """
        (String) workspace status
        """
        return pulumi.get(self, "workspace_status")

    @workspace_status.setter
    def workspace_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_status", value)

    @property
    @pulumi.getter(name="workspaceStatusMessage")
    def workspace_status_message(self) -> Optional[pulumi.Input[str]]:
        """
        (String) updates on workspace status
        """
        return pulumi.get(self, "workspace_status_message")

    @workspace_status_message.setter
    def workspace_status_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_status_message", value)

    @property
    @pulumi.getter(name="workspaceUrl")
    def workspace_url(self) -> Optional[pulumi.Input[str]]:
        """
        (String) URL of the workspace
        """
        return pulumi.get(self, "workspace_url")

    @workspace_url.setter
    def workspace_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_url", value)


@pulumi.input_type
class _MwsWorkspacesState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 cloud: Optional[pulumi.Input[str]] = None,
                 cloud_resource_container: Optional[pulumi.Input['MwsWorkspacesCloudResourceContainerArgs']] = None,
                 creation_time: Optional[pulumi.Input[int]] = None,
                 credentials_id: Optional[pulumi.Input[str]] = None,
                 custom_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 customer_managed_key_id: Optional[pulumi.Input[str]] = None,
                 deployment_name: Optional[pulumi.Input[str]] = None,
                 external_customer_info: Optional[pulumi.Input['MwsWorkspacesExternalCustomerInfoArgs']] = None,
                 gcp_managed_network_config: Optional[pulumi.Input['MwsWorkspacesGcpManagedNetworkConfigArgs']] = None,
                 gke_config: Optional[pulumi.Input['MwsWorkspacesGkeConfigArgs']] = None,
                 is_no_public_ip_enabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_services_customer_managed_key_id: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 pricing_tier: Optional[pulumi.Input[str]] = None,
                 private_access_settings_id: Optional[pulumi.Input[str]] = None,
                 storage_configuration_id: Optional[pulumi.Input[str]] = None,
                 storage_customer_managed_key_id: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input['MwsWorkspacesTokenArgs']] = None,
                 workspace_id: Optional[pulumi.Input[int]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 workspace_status: Optional[pulumi.Input[str]] = None,
                 workspace_status_message: Optional[pulumi.Input[str]] = None,
                 workspace_url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MwsWorkspaces resources.
        :param pulumi.Input[str] account_id: Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/).
        :param pulumi.Input[str] aws_region: region of VPC.
        :param pulumi.Input['MwsWorkspacesCloudResourceContainerArgs'] cloud_resource_container: A block that specifies GCP workspace configurations, consisting of following blocks:
        :param pulumi.Input[int] creation_time: (Integer) time when workspace was created
        :param pulumi.Input[Mapping[str, Any]] custom_tags: The custom tags key-value pairing that is attached to this workspace. These tags will be applied to clusters automatically in addition to any `default_tags` or `custom_tags` on a cluster level. Please note it can take up to an hour for custom_tags to be set due to scheduling on Control Plane. After custom tags are applied, they can be modified however they can never be completely removed.
        :param pulumi.Input[str] deployment_name: part of URL as in `https://<prefix>-<deployment-name>.cloud.databricks.com`. Deployment name cannot be used until a deployment name prefix is defined. Please contact your Databricks representative. Once a new deployment prefix is added/updated, it only will affect the new workspaces created.
        :param pulumi.Input['MwsWorkspacesGkeConfigArgs'] gke_config: A block that specifies GKE configuration for the Databricks workspace:
        :param pulumi.Input[str] location: region of the subnet.
        :param pulumi.Input[str] managed_services_customer_managed_key_id: `customer_managed_key_id` from customer managed keys with `use_cases` set to `MANAGED_SERVICES`. This is used to encrypt the workspace's notebook and secret data in the control plane.
        :param pulumi.Input[str] network_id: `network_id` from networks.
        :param pulumi.Input[str] private_access_settings_id: Canonical unique identifier of MwsPrivateAccessSettings in Databricks Account.
        :param pulumi.Input[str] storage_configuration_id: `storage_configuration_id` from storage configuration.
        :param pulumi.Input[str] storage_customer_managed_key_id: `customer_managed_key_id` from customer managed keys with `use_cases` set to `STORAGE`. This is used to encrypt the DBFS Storage & Cluster Volumes.
        :param pulumi.Input[int] workspace_id: (String) workspace id
        :param pulumi.Input[str] workspace_name: name of the workspace, will appear on UI.
        :param pulumi.Input[str] workspace_status: (String) workspace status
        :param pulumi.Input[str] workspace_status_message: (String) updates on workspace status
        :param pulumi.Input[str] workspace_url: (String) URL of the workspace
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if cloud_resource_container is not None:
            pulumi.set(__self__, "cloud_resource_container", cloud_resource_container)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if credentials_id is not None:
            pulumi.set(__self__, "credentials_id", credentials_id)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)
        if customer_managed_key_id is not None:
            warnings.warn("""Use managed_services_customer_managed_key_id instead""", DeprecationWarning)
            pulumi.log.warn("""customer_managed_key_id is deprecated: Use managed_services_customer_managed_key_id instead""")
        if customer_managed_key_id is not None:
            pulumi.set(__self__, "customer_managed_key_id", customer_managed_key_id)
        if deployment_name is not None:
            pulumi.set(__self__, "deployment_name", deployment_name)
        if external_customer_info is not None:
            pulumi.set(__self__, "external_customer_info", external_customer_info)
        if gcp_managed_network_config is not None:
            pulumi.set(__self__, "gcp_managed_network_config", gcp_managed_network_config)
        if gke_config is not None:
            pulumi.set(__self__, "gke_config", gke_config)
        if is_no_public_ip_enabled is not None:
            pulumi.set(__self__, "is_no_public_ip_enabled", is_no_public_ip_enabled)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if managed_services_customer_managed_key_id is not None:
            pulumi.set(__self__, "managed_services_customer_managed_key_id", managed_services_customer_managed_key_id)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if pricing_tier is not None:
            pulumi.set(__self__, "pricing_tier", pricing_tier)
        if private_access_settings_id is not None:
            pulumi.set(__self__, "private_access_settings_id", private_access_settings_id)
        if storage_configuration_id is not None:
            pulumi.set(__self__, "storage_configuration_id", storage_configuration_id)
        if storage_customer_managed_key_id is not None:
            pulumi.set(__self__, "storage_customer_managed_key_id", storage_customer_managed_key_id)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)
        if workspace_name is not None:
            pulumi.set(__self__, "workspace_name", workspace_name)
        if workspace_status is not None:
            pulumi.set(__self__, "workspace_status", workspace_status)
        if workspace_status_message is not None:
            pulumi.set(__self__, "workspace_status_message", workspace_status_message)
        if workspace_url is not None:
            pulumi.set(__self__, "workspace_url", workspace_url)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/).
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[pulumi.Input[str]]:
        """
        region of VPC.
        """
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_region", value)

    @property
    @pulumi.getter
    def cloud(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter(name="cloudResourceContainer")
    def cloud_resource_container(self) -> Optional[pulumi.Input['MwsWorkspacesCloudResourceContainerArgs']]:
        """
        A block that specifies GCP workspace configurations, consisting of following blocks:
        """
        return pulumi.get(self, "cloud_resource_container")

    @cloud_resource_container.setter
    def cloud_resource_container(self, value: Optional[pulumi.Input['MwsWorkspacesCloudResourceContainerArgs']]):
        pulumi.set(self, "cloud_resource_container", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[int]]:
        """
        (Integer) time when workspace was created
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_id", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The custom tags key-value pairing that is attached to this workspace. These tags will be applied to clusters automatically in addition to any `default_tags` or `custom_tags` on a cluster level. Please note it can take up to an hour for custom_tags to be set due to scheduling on Control Plane. After custom tags are applied, they can be modified however they can never be completely removed.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_tags", value)

    @property
    @pulumi.getter(name="customerManagedKeyId")
    def customer_managed_key_id(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""Use managed_services_customer_managed_key_id instead""", DeprecationWarning)
        pulumi.log.warn("""customer_managed_key_id is deprecated: Use managed_services_customer_managed_key_id instead""")

        return pulumi.get(self, "customer_managed_key_id")

    @customer_managed_key_id.setter
    def customer_managed_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_managed_key_id", value)

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> Optional[pulumi.Input[str]]:
        """
        part of URL as in `https://<prefix>-<deployment-name>.cloud.databricks.com`. Deployment name cannot be used until a deployment name prefix is defined. Please contact your Databricks representative. Once a new deployment prefix is added/updated, it only will affect the new workspaces created.
        """
        return pulumi.get(self, "deployment_name")

    @deployment_name.setter
    def deployment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_name", value)

    @property
    @pulumi.getter(name="externalCustomerInfo")
    def external_customer_info(self) -> Optional[pulumi.Input['MwsWorkspacesExternalCustomerInfoArgs']]:
        return pulumi.get(self, "external_customer_info")

    @external_customer_info.setter
    def external_customer_info(self, value: Optional[pulumi.Input['MwsWorkspacesExternalCustomerInfoArgs']]):
        pulumi.set(self, "external_customer_info", value)

    @property
    @pulumi.getter(name="gcpManagedNetworkConfig")
    def gcp_managed_network_config(self) -> Optional[pulumi.Input['MwsWorkspacesGcpManagedNetworkConfigArgs']]:
        return pulumi.get(self, "gcp_managed_network_config")

    @gcp_managed_network_config.setter
    def gcp_managed_network_config(self, value: Optional[pulumi.Input['MwsWorkspacesGcpManagedNetworkConfigArgs']]):
        pulumi.set(self, "gcp_managed_network_config", value)

    @property
    @pulumi.getter(name="gkeConfig")
    def gke_config(self) -> Optional[pulumi.Input['MwsWorkspacesGkeConfigArgs']]:
        """
        A block that specifies GKE configuration for the Databricks workspace:
        """
        return pulumi.get(self, "gke_config")

    @gke_config.setter
    def gke_config(self, value: Optional[pulumi.Input['MwsWorkspacesGkeConfigArgs']]):
        pulumi.set(self, "gke_config", value)

    @property
    @pulumi.getter(name="isNoPublicIpEnabled")
    def is_no_public_ip_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_no_public_ip_enabled")

    @is_no_public_ip_enabled.setter
    def is_no_public_ip_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_no_public_ip_enabled", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        region of the subnet.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="managedServicesCustomerManagedKeyId")
    def managed_services_customer_managed_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        `customer_managed_key_id` from customer managed keys with `use_cases` set to `MANAGED_SERVICES`. This is used to encrypt the workspace's notebook and secret data in the control plane.
        """
        return pulumi.get(self, "managed_services_customer_managed_key_id")

    @managed_services_customer_managed_key_id.setter
    def managed_services_customer_managed_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_services_customer_managed_key_id", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        `network_id` from networks.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="pricingTier")
    def pricing_tier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pricing_tier")

    @pricing_tier.setter
    def pricing_tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pricing_tier", value)

    @property
    @pulumi.getter(name="privateAccessSettingsId")
    def private_access_settings_id(self) -> Optional[pulumi.Input[str]]:
        """
        Canonical unique identifier of MwsPrivateAccessSettings in Databricks Account.
        """
        return pulumi.get(self, "private_access_settings_id")

    @private_access_settings_id.setter
    def private_access_settings_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_access_settings_id", value)

    @property
    @pulumi.getter(name="storageConfigurationId")
    def storage_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        `storage_configuration_id` from storage configuration.
        """
        return pulumi.get(self, "storage_configuration_id")

    @storage_configuration_id.setter
    def storage_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_configuration_id", value)

    @property
    @pulumi.getter(name="storageCustomerManagedKeyId")
    def storage_customer_managed_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        `customer_managed_key_id` from customer managed keys with `use_cases` set to `STORAGE`. This is used to encrypt the DBFS Storage & Cluster Volumes.
        """
        return pulumi.get(self, "storage_customer_managed_key_id")

    @storage_customer_managed_key_id.setter
    def storage_customer_managed_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_customer_managed_key_id", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input['MwsWorkspacesTokenArgs']]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input['MwsWorkspacesTokenArgs']]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[int]]:
        """
        (String) workspace id
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "workspace_id", value)

    @property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the workspace, will appear on UI.
        """
        return pulumi.get(self, "workspace_name")

    @workspace_name.setter
    def workspace_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_name", value)

    @property
    @pulumi.getter(name="workspaceStatus")
    def workspace_status(self) -> Optional[pulumi.Input[str]]:
        """
        (String) workspace status
        """
        return pulumi.get(self, "workspace_status")

    @workspace_status.setter
    def workspace_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_status", value)

    @property
    @pulumi.getter(name="workspaceStatusMessage")
    def workspace_status_message(self) -> Optional[pulumi.Input[str]]:
        """
        (String) updates on workspace status
        """
        return pulumi.get(self, "workspace_status_message")

    @workspace_status_message.setter
    def workspace_status_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_status_message", value)

    @property
    @pulumi.getter(name="workspaceUrl")
    def workspace_url(self) -> Optional[pulumi.Input[str]]:
        """
        (String) URL of the workspace
        """
        return pulumi.get(self, "workspace_url")

    @workspace_url.setter
    def workspace_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_url", value)


class MwsWorkspaces(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 cloud: Optional[pulumi.Input[str]] = None,
                 cloud_resource_container: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesCloudResourceContainerArgs']]] = None,
                 creation_time: Optional[pulumi.Input[int]] = None,
                 credentials_id: Optional[pulumi.Input[str]] = None,
                 custom_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 customer_managed_key_id: Optional[pulumi.Input[str]] = None,
                 deployment_name: Optional[pulumi.Input[str]] = None,
                 external_customer_info: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesExternalCustomerInfoArgs']]] = None,
                 gcp_managed_network_config: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesGcpManagedNetworkConfigArgs']]] = None,
                 gke_config: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesGkeConfigArgs']]] = None,
                 is_no_public_ip_enabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_services_customer_managed_key_id: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 pricing_tier: Optional[pulumi.Input[str]] = None,
                 private_access_settings_id: Optional[pulumi.Input[str]] = None,
                 storage_configuration_id: Optional[pulumi.Input[str]] = None,
                 storage_customer_managed_key_id: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesTokenArgs']]] = None,
                 workspace_id: Optional[pulumi.Input[int]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 workspace_status: Optional[pulumi.Input[str]] = None,
                 workspace_status_message: Optional[pulumi.Input[str]] = None,
                 workspace_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage
        ### Creating a Databricks on AWS workspace

        !Simplest multiworkspace

        To get workspace running, you have to configure a couple of things:

        * MwsCredentials - You can share a credentials (cross-account IAM role) configuration ID with multiple workspaces. It is not required to create a new one for each workspace.
        * MwsStorageConfigurations - You can share a root S3 bucket with multiple workspaces in a single account. You do not have to create new ones for each workspace. If you share a root S3 bucket for multiple workspaces in an account, data on the root S3 bucket is partitioned into separate directories by workspace.
        * MwsNetworks - (optional, but recommended) You can share one [customer-managed VPC](https://docs.databricks.com/administration-guide/cloud-configurations/aws/customer-managed-vpc.html) with multiple workspaces in a single account. You do not have to create a new VPC for each workspace. However, you cannot reuse subnets or security groups with other resources, including other workspaces or non-Databricks resources. If you plan to share one VPC with multiple workspaces, be sure to size your VPC and subnets accordingly. Because a Databricks MwsNetworks encapsulates this information, you cannot reuse it across workspaces.
        * MwsCustomerManagedKeys - You can share a customer-managed key across workspaces.

        ```python
        import pulumi
        import pulumi_databricks as databricks

        config = pulumi.Config()
        databricks_account_id = config.require_object("databricksAccountId")
        mws = databricks.Provider("mws", host="https://accounts.cloud.databricks.com")
        # register cross-account ARN
        this_mws_credentials = databricks.MwsCredentials("thisMwsCredentials",
            account_id=databricks_account_id,
            credentials_name=f"{var['prefix']}-creds",
            role_arn=var["crossaccount_arn"],
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        # register root bucket
        this_mws_storage_configurations = databricks.MwsStorageConfigurations("thisMwsStorageConfigurations",
            account_id=databricks_account_id,
            storage_configuration_name=f"{var['prefix']}-storage",
            bucket_name=var["root_bucket"],
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        # register VPC
        this_mws_networks = databricks.MwsNetworks("thisMwsNetworks",
            account_id=databricks_account_id,
            network_name=f"{var['prefix']}-network",
            vpc_id=var["vpc_id"],
            subnet_ids=var["subnets_private"],
            security_group_ids=[var["security_group"]],
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        # create workspace in given VPC with DBFS on root bucket
        this_mws_workspaces = databricks.MwsWorkspaces("thisMwsWorkspaces",
            account_id=databricks_account_id,
            workspace_name=var["prefix"],
            aws_region=var["region"],
            credentials_id=this_mws_credentials.credentials_id,
            storage_configuration_id=this_mws_storage_configurations.storage_configuration_id,
            network_id=this_mws_networks.network_id,
            token=databricks.MwsWorkspacesTokenArgs(),
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        pulumi.export("databricksToken", this_mws_workspaces.token.token_value)
        ```
        ### Creating a Databricks on AWS workspace with Databricks-Managed VPC

        ![VPCs](https://docs.databricks.com/_images/customer-managed-vpc.png)

        By default, Databricks creates a VPC in your AWS account for each workspace. Databricks uses it for running clusters in the workspace. Optionally, you can use your VPC for the workspace, using the feature customer-managed VPC. Databricks recommends that you provide your VPC with MwsNetworks so that you can configure it according to your organization’s enterprise cloud standards while still conforming to Databricks requirements. You cannot migrate an existing workspace to your VPC. Please see the difference described through IAM policy actions [on this page](https://docs.databricks.com/administration-guide/account-api/iam-role.html).

        ```python
        import pulumi
        import pulumi_aws as aws
        import pulumi_databricks as databricks
        import pulumi_random as random

        config = pulumi.Config()
        databricks_account_id = config.require_object("databricksAccountId")
        naming = random.RandomString("naming",
            special=False,
            upper=False,
            length=6)
        prefix = naming.result.apply(lambda result: f"dltp{result}")
        this_aws_assume_role_policy = databricks.get_aws_assume_role_policy(external_id=databricks_account_id)
        cross_account_role = aws.iam.Role("crossAccountRole",
            assume_role_policy=this_aws_assume_role_policy.json,
            tags=var["tags"])
        this_aws_cross_account_policy = databricks.get_aws_cross_account_policy()
        this_role_policy = aws.iam.RolePolicy("thisRolePolicy",
            role=cross_account_role.id,
            policy=this_aws_cross_account_policy.json)
        this_mws_credentials = databricks.MwsCredentials("thisMwsCredentials",
            account_id=databricks_account_id,
            credentials_name=f"{prefix}-creds",
            role_arn=cross_account_role.arn,
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        root_storage_bucket_bucket_v2 = aws.s3.BucketV2("rootStorageBucketBucketV2",
            acl="private",
            force_destroy=True,
            tags=var["tags"])
        root_versioning = aws.s3.BucketVersioningV2("rootVersioning",
            bucket=root_storage_bucket_bucket_v2.id,
            versioning_configuration=aws.s3.BucketVersioningV2VersioningConfigurationArgs(
                status="Disabled",
            ))
        root_storage_bucket_bucket_server_side_encryption_configuration_v2 = aws.s3.BucketServerSideEncryptionConfigurationV2("rootStorageBucketBucketServerSideEncryptionConfigurationV2",
            bucket=root_storage_bucket_bucket_v2.bucket,
            rules=[aws.s3.BucketServerSideEncryptionConfigurationV2RuleArgs(
                apply_server_side_encryption_by_default=aws.s3.BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultArgs(
                    sse_algorithm="AES256",
                ),
            )])
        root_storage_bucket_bucket_public_access_block = aws.s3.BucketPublicAccessBlock("rootStorageBucketBucketPublicAccessBlock",
            bucket=root_storage_bucket_bucket_v2.id,
            block_public_acls=True,
            block_public_policy=True,
            ignore_public_acls=True,
            restrict_public_buckets=True,
            opts=pulumi.ResourceOptions(depends_on=[root_storage_bucket_bucket_v2]))
        this_aws_bucket_policy = databricks.get_aws_bucket_policy_output(bucket=root_storage_bucket_bucket_v2.bucket)
        root_bucket_policy = aws.s3.BucketPolicy("rootBucketPolicy",
            bucket=root_storage_bucket_bucket_v2.id,
            policy=this_aws_bucket_policy.json,
            opts=pulumi.ResourceOptions(depends_on=[root_storage_bucket_bucket_public_access_block]))
        this_mws_storage_configurations = databricks.MwsStorageConfigurations("thisMwsStorageConfigurations",
            account_id=databricks_account_id,
            storage_configuration_name=f"{prefix}-storage",
            bucket_name=root_storage_bucket_bucket_v2.bucket,
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        this_mws_workspaces = databricks.MwsWorkspaces("thisMwsWorkspaces",
            account_id=databricks_account_id,
            workspace_name=prefix,
            aws_region="us-east-1",
            credentials_id=this_mws_credentials.credentials_id,
            storage_configuration_id=this_mws_storage_configurations.storage_configuration_id,
            token=databricks.MwsWorkspacesTokenArgs(),
            custom_tags={
                "SoldToCode": "1234",
            },
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        pulumi.export("databricksToken", this_mws_workspaces.token.token_value)
        ```

        In order to create a [Databricks Workspace that leverages AWS PrivateLink](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html) please ensure that you have read and understood the [Enable Private Link](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html) documentation and then customise the example above with the relevant examples from mws_vpc_endpoint, mws_private_access_settings and mws_networks.
        ### Creating a Databricks on GCP workspace

        To get workspace running, you have to configure a network object:

        * MwsNetworks - (optional, but recommended) You can share one [customer-managed VPC](https://docs.gcp.databricks.com/administration-guide/cloud-configurations/gcp/customer-managed-vpc.html) with multiple workspaces in a single account. You do not have to create a new VPC for each workspace. However, you cannot reuse subnets with other resources, including other workspaces or non-Databricks resources. If you plan to share one VPC with multiple workspaces, be sure to size your VPC and subnets accordingly. Because a Databricks MwsNetworks encapsulates this information, you cannot reuse it across workspaces.

        ```python
        import pulumi
        import pulumi_databricks as databricks

        config = pulumi.Config()
        databricks_account_id = config.require_object("databricksAccountId")
        databricks_google_service_account = config.require_object("databricksGoogleServiceAccount")
        google_project = config.require_object("googleProject")
        mws = databricks.Provider("mws", host="https://accounts.gcp.databricks.com")
        # register VPC
        this_mws_networks = databricks.MwsNetworks("thisMwsNetworks",
            account_id=databricks_account_id,
            network_name=f"{var['prefix']}-network",
            gcp_network_info=databricks.MwsNetworksGcpNetworkInfoArgs(
                network_project_id=google_project,
                vpc_id=var["vpc_id"],
                subnet_id=var["subnet_id"],
                subnet_region=var["subnet_region"],
                pod_ip_range_name="pods",
                service_ip_range_name="svc",
            ))
        # create workspace in given VPC
        this_mws_workspaces = databricks.MwsWorkspaces("thisMwsWorkspaces",
            account_id=databricks_account_id,
            workspace_name=var["prefix"],
            location=var["subnet_region"],
            cloud_resource_container=databricks.MwsWorkspacesCloudResourceContainerArgs(
                gcp=databricks.MwsWorkspacesCloudResourceContainerGcpArgs(
                    project_id=google_project,
                ),
            ),
            network_id=this_mws_networks.network_id,
            gke_config=databricks.MwsWorkspacesGkeConfigArgs(
                connectivity_type="PRIVATE_NODE_PUBLIC_MASTER",
                master_ip_range="10.3.0.0/28",
            ),
            token=databricks.MwsWorkspacesTokenArgs())
        pulumi.export("databricksToken", this_mws_workspaces.token.token_value)
        ```

        In order to create a [Databricks Workspace that leverages GCP Private Service Connect](https://docs.gcp.databricks.com/administration-guide/cloud-configurations/gcp/private-service-connect.html) please ensure that you have read and understood the [Enable Private Service Connect](https://docs.gcp.databricks.com/administration-guide/cloud-configurations/gcp/private-service-connect.html) documentation and then customise the example above with the relevant examples from mws_vpc_endpoint, mws_private_access_settings and mws_networks.
        ## Related Resources

        The following resources are used in the same context:

        * Provisioning Databricks on AWS guide.
        * Provisioning Databricks on AWS with PrivateLink guide.
        * Provisioning AWS Databricks E2 with a Hub & Spoke firewall for data exfiltration protection guide.
        * Provisioning Databricks on GCP guide.
        * Provisioning Databricks workspaces on GCP with Private Service Connect guide.
        * MwsCredentials to configure the cross-account role for creation of new workspaces within AWS.
        * MwsCustomerManagedKeys to configure KMS keys for new workspaces within AWS.
        * MwsLogDelivery to configure delivery of [billable usage logs](https://docs.databricks.com/administration-guide/account-settings/billable-usage-delivery.html) and [audit logs](https://docs.databricks.com/administration-guide/account-settings/audit-logs.html).
        * MwsNetworks to [configure VPC](https://docs.databricks.com/administration-guide/cloud-configurations/aws/customer-managed-vpc.html) & subnets for new workspaces within AWS.
        * MwsStorageConfigurations to configure root bucket new workspaces within AWS.
        * MwsPrivateAccessSettings to create a [Private Access Setting](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html#step-5-create-a-private-access-settings-configuration-using-the-databricks-account-api) that can be used as part of a MwsWorkspaces resource to create a [Databricks Workspace that leverages AWS PrivateLink](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html).

        ## Import

        -> **Note** Importing this resource is not currently supported.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/).
        :param pulumi.Input[str] aws_region: region of VPC.
        :param pulumi.Input[pulumi.InputType['MwsWorkspacesCloudResourceContainerArgs']] cloud_resource_container: A block that specifies GCP workspace configurations, consisting of following blocks:
        :param pulumi.Input[int] creation_time: (Integer) time when workspace was created
        :param pulumi.Input[Mapping[str, Any]] custom_tags: The custom tags key-value pairing that is attached to this workspace. These tags will be applied to clusters automatically in addition to any `default_tags` or `custom_tags` on a cluster level. Please note it can take up to an hour for custom_tags to be set due to scheduling on Control Plane. After custom tags are applied, they can be modified however they can never be completely removed.
        :param pulumi.Input[str] deployment_name: part of URL as in `https://<prefix>-<deployment-name>.cloud.databricks.com`. Deployment name cannot be used until a deployment name prefix is defined. Please contact your Databricks representative. Once a new deployment prefix is added/updated, it only will affect the new workspaces created.
        :param pulumi.Input[pulumi.InputType['MwsWorkspacesGkeConfigArgs']] gke_config: A block that specifies GKE configuration for the Databricks workspace:
        :param pulumi.Input[str] location: region of the subnet.
        :param pulumi.Input[str] managed_services_customer_managed_key_id: `customer_managed_key_id` from customer managed keys with `use_cases` set to `MANAGED_SERVICES`. This is used to encrypt the workspace's notebook and secret data in the control plane.
        :param pulumi.Input[str] network_id: `network_id` from networks.
        :param pulumi.Input[str] private_access_settings_id: Canonical unique identifier of MwsPrivateAccessSettings in Databricks Account.
        :param pulumi.Input[str] storage_configuration_id: `storage_configuration_id` from storage configuration.
        :param pulumi.Input[str] storage_customer_managed_key_id: `customer_managed_key_id` from customer managed keys with `use_cases` set to `STORAGE`. This is used to encrypt the DBFS Storage & Cluster Volumes.
        :param pulumi.Input[int] workspace_id: (String) workspace id
        :param pulumi.Input[str] workspace_name: name of the workspace, will appear on UI.
        :param pulumi.Input[str] workspace_status: (String) workspace status
        :param pulumi.Input[str] workspace_status_message: (String) updates on workspace status
        :param pulumi.Input[str] workspace_url: (String) URL of the workspace
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MwsWorkspacesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage
        ### Creating a Databricks on AWS workspace

        !Simplest multiworkspace

        To get workspace running, you have to configure a couple of things:

        * MwsCredentials - You can share a credentials (cross-account IAM role) configuration ID with multiple workspaces. It is not required to create a new one for each workspace.
        * MwsStorageConfigurations - You can share a root S3 bucket with multiple workspaces in a single account. You do not have to create new ones for each workspace. If you share a root S3 bucket for multiple workspaces in an account, data on the root S3 bucket is partitioned into separate directories by workspace.
        * MwsNetworks - (optional, but recommended) You can share one [customer-managed VPC](https://docs.databricks.com/administration-guide/cloud-configurations/aws/customer-managed-vpc.html) with multiple workspaces in a single account. You do not have to create a new VPC for each workspace. However, you cannot reuse subnets or security groups with other resources, including other workspaces or non-Databricks resources. If you plan to share one VPC with multiple workspaces, be sure to size your VPC and subnets accordingly. Because a Databricks MwsNetworks encapsulates this information, you cannot reuse it across workspaces.
        * MwsCustomerManagedKeys - You can share a customer-managed key across workspaces.

        ```python
        import pulumi
        import pulumi_databricks as databricks

        config = pulumi.Config()
        databricks_account_id = config.require_object("databricksAccountId")
        mws = databricks.Provider("mws", host="https://accounts.cloud.databricks.com")
        # register cross-account ARN
        this_mws_credentials = databricks.MwsCredentials("thisMwsCredentials",
            account_id=databricks_account_id,
            credentials_name=f"{var['prefix']}-creds",
            role_arn=var["crossaccount_arn"],
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        # register root bucket
        this_mws_storage_configurations = databricks.MwsStorageConfigurations("thisMwsStorageConfigurations",
            account_id=databricks_account_id,
            storage_configuration_name=f"{var['prefix']}-storage",
            bucket_name=var["root_bucket"],
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        # register VPC
        this_mws_networks = databricks.MwsNetworks("thisMwsNetworks",
            account_id=databricks_account_id,
            network_name=f"{var['prefix']}-network",
            vpc_id=var["vpc_id"],
            subnet_ids=var["subnets_private"],
            security_group_ids=[var["security_group"]],
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        # create workspace in given VPC with DBFS on root bucket
        this_mws_workspaces = databricks.MwsWorkspaces("thisMwsWorkspaces",
            account_id=databricks_account_id,
            workspace_name=var["prefix"],
            aws_region=var["region"],
            credentials_id=this_mws_credentials.credentials_id,
            storage_configuration_id=this_mws_storage_configurations.storage_configuration_id,
            network_id=this_mws_networks.network_id,
            token=databricks.MwsWorkspacesTokenArgs(),
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        pulumi.export("databricksToken", this_mws_workspaces.token.token_value)
        ```
        ### Creating a Databricks on AWS workspace with Databricks-Managed VPC

        ![VPCs](https://docs.databricks.com/_images/customer-managed-vpc.png)

        By default, Databricks creates a VPC in your AWS account for each workspace. Databricks uses it for running clusters in the workspace. Optionally, you can use your VPC for the workspace, using the feature customer-managed VPC. Databricks recommends that you provide your VPC with MwsNetworks so that you can configure it according to your organization’s enterprise cloud standards while still conforming to Databricks requirements. You cannot migrate an existing workspace to your VPC. Please see the difference described through IAM policy actions [on this page](https://docs.databricks.com/administration-guide/account-api/iam-role.html).

        ```python
        import pulumi
        import pulumi_aws as aws
        import pulumi_databricks as databricks
        import pulumi_random as random

        config = pulumi.Config()
        databricks_account_id = config.require_object("databricksAccountId")
        naming = random.RandomString("naming",
            special=False,
            upper=False,
            length=6)
        prefix = naming.result.apply(lambda result: f"dltp{result}")
        this_aws_assume_role_policy = databricks.get_aws_assume_role_policy(external_id=databricks_account_id)
        cross_account_role = aws.iam.Role("crossAccountRole",
            assume_role_policy=this_aws_assume_role_policy.json,
            tags=var["tags"])
        this_aws_cross_account_policy = databricks.get_aws_cross_account_policy()
        this_role_policy = aws.iam.RolePolicy("thisRolePolicy",
            role=cross_account_role.id,
            policy=this_aws_cross_account_policy.json)
        this_mws_credentials = databricks.MwsCredentials("thisMwsCredentials",
            account_id=databricks_account_id,
            credentials_name=f"{prefix}-creds",
            role_arn=cross_account_role.arn,
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        root_storage_bucket_bucket_v2 = aws.s3.BucketV2("rootStorageBucketBucketV2",
            acl="private",
            force_destroy=True,
            tags=var["tags"])
        root_versioning = aws.s3.BucketVersioningV2("rootVersioning",
            bucket=root_storage_bucket_bucket_v2.id,
            versioning_configuration=aws.s3.BucketVersioningV2VersioningConfigurationArgs(
                status="Disabled",
            ))
        root_storage_bucket_bucket_server_side_encryption_configuration_v2 = aws.s3.BucketServerSideEncryptionConfigurationV2("rootStorageBucketBucketServerSideEncryptionConfigurationV2",
            bucket=root_storage_bucket_bucket_v2.bucket,
            rules=[aws.s3.BucketServerSideEncryptionConfigurationV2RuleArgs(
                apply_server_side_encryption_by_default=aws.s3.BucketServerSideEncryptionConfigurationV2RuleApplyServerSideEncryptionByDefaultArgs(
                    sse_algorithm="AES256",
                ),
            )])
        root_storage_bucket_bucket_public_access_block = aws.s3.BucketPublicAccessBlock("rootStorageBucketBucketPublicAccessBlock",
            bucket=root_storage_bucket_bucket_v2.id,
            block_public_acls=True,
            block_public_policy=True,
            ignore_public_acls=True,
            restrict_public_buckets=True,
            opts=pulumi.ResourceOptions(depends_on=[root_storage_bucket_bucket_v2]))
        this_aws_bucket_policy = databricks.get_aws_bucket_policy_output(bucket=root_storage_bucket_bucket_v2.bucket)
        root_bucket_policy = aws.s3.BucketPolicy("rootBucketPolicy",
            bucket=root_storage_bucket_bucket_v2.id,
            policy=this_aws_bucket_policy.json,
            opts=pulumi.ResourceOptions(depends_on=[root_storage_bucket_bucket_public_access_block]))
        this_mws_storage_configurations = databricks.MwsStorageConfigurations("thisMwsStorageConfigurations",
            account_id=databricks_account_id,
            storage_configuration_name=f"{prefix}-storage",
            bucket_name=root_storage_bucket_bucket_v2.bucket,
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        this_mws_workspaces = databricks.MwsWorkspaces("thisMwsWorkspaces",
            account_id=databricks_account_id,
            workspace_name=prefix,
            aws_region="us-east-1",
            credentials_id=this_mws_credentials.credentials_id,
            storage_configuration_id=this_mws_storage_configurations.storage_configuration_id,
            token=databricks.MwsWorkspacesTokenArgs(),
            custom_tags={
                "SoldToCode": "1234",
            },
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        pulumi.export("databricksToken", this_mws_workspaces.token.token_value)
        ```

        In order to create a [Databricks Workspace that leverages AWS PrivateLink](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html) please ensure that you have read and understood the [Enable Private Link](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html) documentation and then customise the example above with the relevant examples from mws_vpc_endpoint, mws_private_access_settings and mws_networks.
        ### Creating a Databricks on GCP workspace

        To get workspace running, you have to configure a network object:

        * MwsNetworks - (optional, but recommended) You can share one [customer-managed VPC](https://docs.gcp.databricks.com/administration-guide/cloud-configurations/gcp/customer-managed-vpc.html) with multiple workspaces in a single account. You do not have to create a new VPC for each workspace. However, you cannot reuse subnets with other resources, including other workspaces or non-Databricks resources. If you plan to share one VPC with multiple workspaces, be sure to size your VPC and subnets accordingly. Because a Databricks MwsNetworks encapsulates this information, you cannot reuse it across workspaces.

        ```python
        import pulumi
        import pulumi_databricks as databricks

        config = pulumi.Config()
        databricks_account_id = config.require_object("databricksAccountId")
        databricks_google_service_account = config.require_object("databricksGoogleServiceAccount")
        google_project = config.require_object("googleProject")
        mws = databricks.Provider("mws", host="https://accounts.gcp.databricks.com")
        # register VPC
        this_mws_networks = databricks.MwsNetworks("thisMwsNetworks",
            account_id=databricks_account_id,
            network_name=f"{var['prefix']}-network",
            gcp_network_info=databricks.MwsNetworksGcpNetworkInfoArgs(
                network_project_id=google_project,
                vpc_id=var["vpc_id"],
                subnet_id=var["subnet_id"],
                subnet_region=var["subnet_region"],
                pod_ip_range_name="pods",
                service_ip_range_name="svc",
            ))
        # create workspace in given VPC
        this_mws_workspaces = databricks.MwsWorkspaces("thisMwsWorkspaces",
            account_id=databricks_account_id,
            workspace_name=var["prefix"],
            location=var["subnet_region"],
            cloud_resource_container=databricks.MwsWorkspacesCloudResourceContainerArgs(
                gcp=databricks.MwsWorkspacesCloudResourceContainerGcpArgs(
                    project_id=google_project,
                ),
            ),
            network_id=this_mws_networks.network_id,
            gke_config=databricks.MwsWorkspacesGkeConfigArgs(
                connectivity_type="PRIVATE_NODE_PUBLIC_MASTER",
                master_ip_range="10.3.0.0/28",
            ),
            token=databricks.MwsWorkspacesTokenArgs())
        pulumi.export("databricksToken", this_mws_workspaces.token.token_value)
        ```

        In order to create a [Databricks Workspace that leverages GCP Private Service Connect](https://docs.gcp.databricks.com/administration-guide/cloud-configurations/gcp/private-service-connect.html) please ensure that you have read and understood the [Enable Private Service Connect](https://docs.gcp.databricks.com/administration-guide/cloud-configurations/gcp/private-service-connect.html) documentation and then customise the example above with the relevant examples from mws_vpc_endpoint, mws_private_access_settings and mws_networks.
        ## Related Resources

        The following resources are used in the same context:

        * Provisioning Databricks on AWS guide.
        * Provisioning Databricks on AWS with PrivateLink guide.
        * Provisioning AWS Databricks E2 with a Hub & Spoke firewall for data exfiltration protection guide.
        * Provisioning Databricks on GCP guide.
        * Provisioning Databricks workspaces on GCP with Private Service Connect guide.
        * MwsCredentials to configure the cross-account role for creation of new workspaces within AWS.
        * MwsCustomerManagedKeys to configure KMS keys for new workspaces within AWS.
        * MwsLogDelivery to configure delivery of [billable usage logs](https://docs.databricks.com/administration-guide/account-settings/billable-usage-delivery.html) and [audit logs](https://docs.databricks.com/administration-guide/account-settings/audit-logs.html).
        * MwsNetworks to [configure VPC](https://docs.databricks.com/administration-guide/cloud-configurations/aws/customer-managed-vpc.html) & subnets for new workspaces within AWS.
        * MwsStorageConfigurations to configure root bucket new workspaces within AWS.
        * MwsPrivateAccessSettings to create a [Private Access Setting](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html#step-5-create-a-private-access-settings-configuration-using-the-databricks-account-api) that can be used as part of a MwsWorkspaces resource to create a [Databricks Workspace that leverages AWS PrivateLink](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html).

        ## Import

        -> **Note** Importing this resource is not currently supported.

        :param str resource_name: The name of the resource.
        :param MwsWorkspacesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MwsWorkspacesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 cloud: Optional[pulumi.Input[str]] = None,
                 cloud_resource_container: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesCloudResourceContainerArgs']]] = None,
                 creation_time: Optional[pulumi.Input[int]] = None,
                 credentials_id: Optional[pulumi.Input[str]] = None,
                 custom_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 customer_managed_key_id: Optional[pulumi.Input[str]] = None,
                 deployment_name: Optional[pulumi.Input[str]] = None,
                 external_customer_info: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesExternalCustomerInfoArgs']]] = None,
                 gcp_managed_network_config: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesGcpManagedNetworkConfigArgs']]] = None,
                 gke_config: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesGkeConfigArgs']]] = None,
                 is_no_public_ip_enabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_services_customer_managed_key_id: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 pricing_tier: Optional[pulumi.Input[str]] = None,
                 private_access_settings_id: Optional[pulumi.Input[str]] = None,
                 storage_configuration_id: Optional[pulumi.Input[str]] = None,
                 storage_customer_managed_key_id: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesTokenArgs']]] = None,
                 workspace_id: Optional[pulumi.Input[int]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 workspace_status: Optional[pulumi.Input[str]] = None,
                 workspace_status_message: Optional[pulumi.Input[str]] = None,
                 workspace_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MwsWorkspacesArgs.__new__(MwsWorkspacesArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = None if account_id is None else pulumi.Output.secret(account_id)
            __props__.__dict__["aws_region"] = aws_region
            __props__.__dict__["cloud"] = cloud
            __props__.__dict__["cloud_resource_container"] = cloud_resource_container
            __props__.__dict__["creation_time"] = creation_time
            __props__.__dict__["credentials_id"] = credentials_id
            __props__.__dict__["custom_tags"] = custom_tags
            __props__.__dict__["customer_managed_key_id"] = customer_managed_key_id
            __props__.__dict__["deployment_name"] = deployment_name
            __props__.__dict__["external_customer_info"] = external_customer_info
            __props__.__dict__["gcp_managed_network_config"] = gcp_managed_network_config
            __props__.__dict__["gke_config"] = gke_config
            __props__.__dict__["is_no_public_ip_enabled"] = is_no_public_ip_enabled
            __props__.__dict__["location"] = location
            __props__.__dict__["managed_services_customer_managed_key_id"] = managed_services_customer_managed_key_id
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["pricing_tier"] = pricing_tier
            __props__.__dict__["private_access_settings_id"] = private_access_settings_id
            __props__.__dict__["storage_configuration_id"] = storage_configuration_id
            __props__.__dict__["storage_customer_managed_key_id"] = storage_customer_managed_key_id
            __props__.__dict__["token"] = token
            __props__.__dict__["workspace_id"] = workspace_id
            if workspace_name is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_name'")
            __props__.__dict__["workspace_name"] = workspace_name
            __props__.__dict__["workspace_status"] = workspace_status
            __props__.__dict__["workspace_status_message"] = workspace_status_message
            __props__.__dict__["workspace_url"] = workspace_url
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accountId"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(MwsWorkspaces, __self__).__init__(
            'databricks:index/mwsWorkspaces:MwsWorkspaces',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            aws_region: Optional[pulumi.Input[str]] = None,
            cloud: Optional[pulumi.Input[str]] = None,
            cloud_resource_container: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesCloudResourceContainerArgs']]] = None,
            creation_time: Optional[pulumi.Input[int]] = None,
            credentials_id: Optional[pulumi.Input[str]] = None,
            custom_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            customer_managed_key_id: Optional[pulumi.Input[str]] = None,
            deployment_name: Optional[pulumi.Input[str]] = None,
            external_customer_info: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesExternalCustomerInfoArgs']]] = None,
            gcp_managed_network_config: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesGcpManagedNetworkConfigArgs']]] = None,
            gke_config: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesGkeConfigArgs']]] = None,
            is_no_public_ip_enabled: Optional[pulumi.Input[bool]] = None,
            location: Optional[pulumi.Input[str]] = None,
            managed_services_customer_managed_key_id: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[str]] = None,
            pricing_tier: Optional[pulumi.Input[str]] = None,
            private_access_settings_id: Optional[pulumi.Input[str]] = None,
            storage_configuration_id: Optional[pulumi.Input[str]] = None,
            storage_customer_managed_key_id: Optional[pulumi.Input[str]] = None,
            token: Optional[pulumi.Input[pulumi.InputType['MwsWorkspacesTokenArgs']]] = None,
            workspace_id: Optional[pulumi.Input[int]] = None,
            workspace_name: Optional[pulumi.Input[str]] = None,
            workspace_status: Optional[pulumi.Input[str]] = None,
            workspace_status_message: Optional[pulumi.Input[str]] = None,
            workspace_url: Optional[pulumi.Input[str]] = None) -> 'MwsWorkspaces':
        """
        Get an existing MwsWorkspaces resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/).
        :param pulumi.Input[str] aws_region: region of VPC.
        :param pulumi.Input[pulumi.InputType['MwsWorkspacesCloudResourceContainerArgs']] cloud_resource_container: A block that specifies GCP workspace configurations, consisting of following blocks:
        :param pulumi.Input[int] creation_time: (Integer) time when workspace was created
        :param pulumi.Input[Mapping[str, Any]] custom_tags: The custom tags key-value pairing that is attached to this workspace. These tags will be applied to clusters automatically in addition to any `default_tags` or `custom_tags` on a cluster level. Please note it can take up to an hour for custom_tags to be set due to scheduling on Control Plane. After custom tags are applied, they can be modified however they can never be completely removed.
        :param pulumi.Input[str] deployment_name: part of URL as in `https://<prefix>-<deployment-name>.cloud.databricks.com`. Deployment name cannot be used until a deployment name prefix is defined. Please contact your Databricks representative. Once a new deployment prefix is added/updated, it only will affect the new workspaces created.
        :param pulumi.Input[pulumi.InputType['MwsWorkspacesGkeConfigArgs']] gke_config: A block that specifies GKE configuration for the Databricks workspace:
        :param pulumi.Input[str] location: region of the subnet.
        :param pulumi.Input[str] managed_services_customer_managed_key_id: `customer_managed_key_id` from customer managed keys with `use_cases` set to `MANAGED_SERVICES`. This is used to encrypt the workspace's notebook and secret data in the control plane.
        :param pulumi.Input[str] network_id: `network_id` from networks.
        :param pulumi.Input[str] private_access_settings_id: Canonical unique identifier of MwsPrivateAccessSettings in Databricks Account.
        :param pulumi.Input[str] storage_configuration_id: `storage_configuration_id` from storage configuration.
        :param pulumi.Input[str] storage_customer_managed_key_id: `customer_managed_key_id` from customer managed keys with `use_cases` set to `STORAGE`. This is used to encrypt the DBFS Storage & Cluster Volumes.
        :param pulumi.Input[int] workspace_id: (String) workspace id
        :param pulumi.Input[str] workspace_name: name of the workspace, will appear on UI.
        :param pulumi.Input[str] workspace_status: (String) workspace status
        :param pulumi.Input[str] workspace_status_message: (String) updates on workspace status
        :param pulumi.Input[str] workspace_url: (String) URL of the workspace
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MwsWorkspacesState.__new__(_MwsWorkspacesState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["aws_region"] = aws_region
        __props__.__dict__["cloud"] = cloud
        __props__.__dict__["cloud_resource_container"] = cloud_resource_container
        __props__.__dict__["creation_time"] = creation_time
        __props__.__dict__["credentials_id"] = credentials_id
        __props__.__dict__["custom_tags"] = custom_tags
        __props__.__dict__["customer_managed_key_id"] = customer_managed_key_id
        __props__.__dict__["deployment_name"] = deployment_name
        __props__.__dict__["external_customer_info"] = external_customer_info
        __props__.__dict__["gcp_managed_network_config"] = gcp_managed_network_config
        __props__.__dict__["gke_config"] = gke_config
        __props__.__dict__["is_no_public_ip_enabled"] = is_no_public_ip_enabled
        __props__.__dict__["location"] = location
        __props__.__dict__["managed_services_customer_managed_key_id"] = managed_services_customer_managed_key_id
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["pricing_tier"] = pricing_tier
        __props__.__dict__["private_access_settings_id"] = private_access_settings_id
        __props__.__dict__["storage_configuration_id"] = storage_configuration_id
        __props__.__dict__["storage_customer_managed_key_id"] = storage_customer_managed_key_id
        __props__.__dict__["token"] = token
        __props__.__dict__["workspace_id"] = workspace_id
        __props__.__dict__["workspace_name"] = workspace_name
        __props__.__dict__["workspace_status"] = workspace_status
        __props__.__dict__["workspace_status_message"] = workspace_status_message
        __props__.__dict__["workspace_url"] = workspace_url
        return MwsWorkspaces(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        Account Id that could be found in the top right corner of [Accounts Console](https://accounts.cloud.databricks.com/).
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> pulumi.Output[Optional[str]]:
        """
        region of VPC.
        """
        return pulumi.get(self, "aws_region")

    @property
    @pulumi.getter
    def cloud(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter(name="cloudResourceContainer")
    def cloud_resource_container(self) -> pulumi.Output[Optional['outputs.MwsWorkspacesCloudResourceContainer']]:
        """
        A block that specifies GCP workspace configurations, consisting of following blocks:
        """
        return pulumi.get(self, "cloud_resource_container")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[int]:
        """
        (Integer) time when workspace was created
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "credentials_id")

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The custom tags key-value pairing that is attached to this workspace. These tags will be applied to clusters automatically in addition to any `default_tags` or `custom_tags` on a cluster level. Please note it can take up to an hour for custom_tags to be set due to scheduling on Control Plane. After custom tags are applied, they can be modified however they can never be completely removed.
        """
        return pulumi.get(self, "custom_tags")

    @property
    @pulumi.getter(name="customerManagedKeyId")
    def customer_managed_key_id(self) -> pulumi.Output[Optional[str]]:
        warnings.warn("""Use managed_services_customer_managed_key_id instead""", DeprecationWarning)
        pulumi.log.warn("""customer_managed_key_id is deprecated: Use managed_services_customer_managed_key_id instead""")

        return pulumi.get(self, "customer_managed_key_id")

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> pulumi.Output[Optional[str]]:
        """
        part of URL as in `https://<prefix>-<deployment-name>.cloud.databricks.com`. Deployment name cannot be used until a deployment name prefix is defined. Please contact your Databricks representative. Once a new deployment prefix is added/updated, it only will affect the new workspaces created.
        """
        return pulumi.get(self, "deployment_name")

    @property
    @pulumi.getter(name="externalCustomerInfo")
    def external_customer_info(self) -> pulumi.Output[Optional['outputs.MwsWorkspacesExternalCustomerInfo']]:
        return pulumi.get(self, "external_customer_info")

    @property
    @pulumi.getter(name="gcpManagedNetworkConfig")
    def gcp_managed_network_config(self) -> pulumi.Output[Optional['outputs.MwsWorkspacesGcpManagedNetworkConfig']]:
        return pulumi.get(self, "gcp_managed_network_config")

    @property
    @pulumi.getter(name="gkeConfig")
    def gke_config(self) -> pulumi.Output[Optional['outputs.MwsWorkspacesGkeConfig']]:
        """
        A block that specifies GKE configuration for the Databricks workspace:
        """
        return pulumi.get(self, "gke_config")

    @property
    @pulumi.getter(name="isNoPublicIpEnabled")
    def is_no_public_ip_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_no_public_ip_enabled")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        region of the subnet.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managedServicesCustomerManagedKeyId")
    def managed_services_customer_managed_key_id(self) -> pulumi.Output[Optional[str]]:
        """
        `customer_managed_key_id` from customer managed keys with `use_cases` set to `MANAGED_SERVICES`. This is used to encrypt the workspace's notebook and secret data in the control plane.
        """
        return pulumi.get(self, "managed_services_customer_managed_key_id")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[Optional[str]]:
        """
        `network_id` from networks.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="pricingTier")
    def pricing_tier(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pricing_tier")

    @property
    @pulumi.getter(name="privateAccessSettingsId")
    def private_access_settings_id(self) -> pulumi.Output[Optional[str]]:
        """
        Canonical unique identifier of MwsPrivateAccessSettings in Databricks Account.
        """
        return pulumi.get(self, "private_access_settings_id")

    @property
    @pulumi.getter(name="storageConfigurationId")
    def storage_configuration_id(self) -> pulumi.Output[Optional[str]]:
        """
        `storage_configuration_id` from storage configuration.
        """
        return pulumi.get(self, "storage_configuration_id")

    @property
    @pulumi.getter(name="storageCustomerManagedKeyId")
    def storage_customer_managed_key_id(self) -> pulumi.Output[Optional[str]]:
        """
        `customer_managed_key_id` from customer managed keys with `use_cases` set to `STORAGE`. This is used to encrypt the DBFS Storage & Cluster Volumes.
        """
        return pulumi.get(self, "storage_customer_managed_key_id")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[Optional['outputs.MwsWorkspacesToken']]:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[int]:
        """
        (String) workspace id
        """
        return pulumi.get(self, "workspace_id")

    @property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> pulumi.Output[str]:
        """
        name of the workspace, will appear on UI.
        """
        return pulumi.get(self, "workspace_name")

    @property
    @pulumi.getter(name="workspaceStatus")
    def workspace_status(self) -> pulumi.Output[str]:
        """
        (String) workspace status
        """
        return pulumi.get(self, "workspace_status")

    @property
    @pulumi.getter(name="workspaceStatusMessage")
    def workspace_status_message(self) -> pulumi.Output[str]:
        """
        (String) updates on workspace status
        """
        return pulumi.get(self, "workspace_status_message")

    @property
    @pulumi.getter(name="workspaceUrl")
    def workspace_url(self) -> pulumi.Output[str]:
        """
        (String) URL of the workspace
        """
        return pulumi.get(self, "workspace_url")

