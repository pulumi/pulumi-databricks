# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['MwsLogDeliveryArgs', 'MwsLogDelivery']

@pulumi.input_type
class MwsLogDeliveryArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 credentials_id: pulumi.Input[str],
                 log_type: pulumi.Input[str],
                 output_format: pulumi.Input[str],
                 storage_configuration_id: pulumi.Input[str],
                 config_id: Optional[pulumi.Input[str]] = None,
                 config_name: Optional[pulumi.Input[str]] = None,
                 delivery_path_prefix: Optional[pulumi.Input[str]] = None,
                 delivery_start_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 workspace_ids_filters: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a MwsLogDelivery resource.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "credentials_id", credentials_id)
        pulumi.set(__self__, "log_type", log_type)
        pulumi.set(__self__, "output_format", output_format)
        pulumi.set(__self__, "storage_configuration_id", storage_configuration_id)
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if config_name is not None:
            pulumi.set(__self__, "config_name", config_name)
        if delivery_path_prefix is not None:
            pulumi.set(__self__, "delivery_path_prefix", delivery_path_prefix)
        if delivery_start_time is not None:
            pulumi.set(__self__, "delivery_start_time", delivery_start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if workspace_ids_filters is not None:
            pulumi.set(__self__, "workspace_ids_filters", workspace_ids_filters)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_id", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "output_format")

    @output_format.setter
    def output_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "output_format", value)

    @property
    @pulumi.getter(name="storageConfigurationId")
    def storage_configuration_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_configuration_id")

    @storage_configuration_id.setter
    def storage_configuration_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_configuration_id", value)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_name")

    @config_name.setter
    def config_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_name", value)

    @property
    @pulumi.getter(name="deliveryPathPrefix")
    def delivery_path_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delivery_path_prefix")

    @delivery_path_prefix.setter
    def delivery_path_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_path_prefix", value)

    @property
    @pulumi.getter(name="deliveryStartTime")
    def delivery_start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delivery_start_time")

    @delivery_start_time.setter
    def delivery_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="workspaceIdsFilters")
    def workspace_ids_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "workspace_ids_filters")

    @workspace_ids_filters.setter
    def workspace_ids_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "workspace_ids_filters", value)


@pulumi.input_type
class _MwsLogDeliveryState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 config_id: Optional[pulumi.Input[str]] = None,
                 config_name: Optional[pulumi.Input[str]] = None,
                 credentials_id: Optional[pulumi.Input[str]] = None,
                 delivery_path_prefix: Optional[pulumi.Input[str]] = None,
                 delivery_start_time: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 output_format: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 storage_configuration_id: Optional[pulumi.Input[str]] = None,
                 workspace_ids_filters: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering MwsLogDelivery resources.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if config_name is not None:
            pulumi.set(__self__, "config_name", config_name)
        if credentials_id is not None:
            pulumi.set(__self__, "credentials_id", credentials_id)
        if delivery_path_prefix is not None:
            pulumi.set(__self__, "delivery_path_prefix", delivery_path_prefix)
        if delivery_start_time is not None:
            pulumi.set(__self__, "delivery_start_time", delivery_start_time)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if output_format is not None:
            pulumi.set(__self__, "output_format", output_format)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage_configuration_id is not None:
            pulumi.set(__self__, "storage_configuration_id", storage_configuration_id)
        if workspace_ids_filters is not None:
            pulumi.set(__self__, "workspace_ids_filters", workspace_ids_filters)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_name")

    @config_name.setter
    def config_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_name", value)

    @property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_id", value)

    @property
    @pulumi.getter(name="deliveryPathPrefix")
    def delivery_path_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delivery_path_prefix")

    @delivery_path_prefix.setter
    def delivery_path_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_path_prefix", value)

    @property
    @pulumi.getter(name="deliveryStartTime")
    def delivery_start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delivery_start_time")

    @delivery_start_time.setter
    def delivery_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_start_time", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_format")

    @output_format.setter
    def output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_format", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="storageConfigurationId")
    def storage_configuration_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_configuration_id")

    @storage_configuration_id.setter
    def storage_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_configuration_id", value)

    @property
    @pulumi.getter(name="workspaceIdsFilters")
    def workspace_ids_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "workspace_ids_filters")

    @workspace_ids_filters.setter
    def workspace_ids_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "workspace_ids_filters", value)


class MwsLogDelivery(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 config_id: Optional[pulumi.Input[str]] = None,
                 config_name: Optional[pulumi.Input[str]] = None,
                 credentials_id: Optional[pulumi.Input[str]] = None,
                 delivery_path_prefix: Optional[pulumi.Input[str]] = None,
                 delivery_start_time: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 output_format: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 storage_configuration_id: Optional[pulumi.Input[str]] = None,
                 workspace_ids_filters: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        Create a MwsLogDelivery resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MwsLogDeliveryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MwsLogDelivery resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MwsLogDeliveryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MwsLogDeliveryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 config_id: Optional[pulumi.Input[str]] = None,
                 config_name: Optional[pulumi.Input[str]] = None,
                 credentials_id: Optional[pulumi.Input[str]] = None,
                 delivery_path_prefix: Optional[pulumi.Input[str]] = None,
                 delivery_start_time: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 output_format: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 storage_configuration_id: Optional[pulumi.Input[str]] = None,
                 workspace_ids_filters: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MwsLogDeliveryArgs.__new__(MwsLogDeliveryArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["config_id"] = config_id
            __props__.__dict__["config_name"] = config_name
            if credentials_id is None and not opts.urn:
                raise TypeError("Missing required property 'credentials_id'")
            __props__.__dict__["credentials_id"] = credentials_id
            __props__.__dict__["delivery_path_prefix"] = delivery_path_prefix
            __props__.__dict__["delivery_start_time"] = delivery_start_time
            if log_type is None and not opts.urn:
                raise TypeError("Missing required property 'log_type'")
            __props__.__dict__["log_type"] = log_type
            if output_format is None and not opts.urn:
                raise TypeError("Missing required property 'output_format'")
            __props__.__dict__["output_format"] = output_format
            __props__.__dict__["status"] = status
            if storage_configuration_id is None and not opts.urn:
                raise TypeError("Missing required property 'storage_configuration_id'")
            __props__.__dict__["storage_configuration_id"] = storage_configuration_id
            __props__.__dict__["workspace_ids_filters"] = workspace_ids_filters
        super(MwsLogDelivery, __self__).__init__(
            'databricks:index/mwsLogDelivery:MwsLogDelivery',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            config_id: Optional[pulumi.Input[str]] = None,
            config_name: Optional[pulumi.Input[str]] = None,
            credentials_id: Optional[pulumi.Input[str]] = None,
            delivery_path_prefix: Optional[pulumi.Input[str]] = None,
            delivery_start_time: Optional[pulumi.Input[str]] = None,
            log_type: Optional[pulumi.Input[str]] = None,
            output_format: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            storage_configuration_id: Optional[pulumi.Input[str]] = None,
            workspace_ids_filters: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'MwsLogDelivery':
        """
        Get an existing MwsLogDelivery resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MwsLogDeliveryState.__new__(_MwsLogDeliveryState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["config_id"] = config_id
        __props__.__dict__["config_name"] = config_name
        __props__.__dict__["credentials_id"] = credentials_id
        __props__.__dict__["delivery_path_prefix"] = delivery_path_prefix
        __props__.__dict__["delivery_start_time"] = delivery_start_time
        __props__.__dict__["log_type"] = log_type
        __props__.__dict__["output_format"] = output_format
        __props__.__dict__["status"] = status
        __props__.__dict__["storage_configuration_id"] = storage_configuration_id
        __props__.__dict__["workspace_ids_filters"] = workspace_ids_filters
        return MwsLogDelivery(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "config_name")

    @property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "credentials_id")

    @property
    @pulumi.getter(name="deliveryPathPrefix")
    def delivery_path_prefix(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "delivery_path_prefix")

    @property
    @pulumi.getter(name="deliveryStartTime")
    def delivery_start_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "delivery_start_time")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> pulumi.Output[str]:
        return pulumi.get(self, "output_format")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageConfigurationId")
    def storage_configuration_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "storage_configuration_id")

    @property
    @pulumi.getter(name="workspaceIdsFilters")
    def workspace_ids_filters(self) -> pulumi.Output[Optional[Sequence[int]]]:
        return pulumi.get(self, "workspace_ids_filters")

