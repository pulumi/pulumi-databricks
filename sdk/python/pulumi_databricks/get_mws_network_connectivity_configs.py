# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMwsNetworkConnectivityConfigsResult',
    'AwaitableGetMwsNetworkConnectivityConfigsResult',
    'get_mws_network_connectivity_configs',
    'get_mws_network_connectivity_configs_output',
]

@pulumi.output_type
class GetMwsNetworkConnectivityConfigsResult:
    """
    A collection of values returned by getMwsNetworkConnectivityConfigs.
    """
    def __init__(__self__, id=None, names=None, region=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def names(self) -> Sequence[str]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


class AwaitableGetMwsNetworkConnectivityConfigsResult(GetMwsNetworkConnectivityConfigsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMwsNetworkConnectivityConfigsResult(
            id=self.id,
            names=self.names,
            region=self.region)


def get_mws_network_connectivity_configs(names: Optional[Sequence[str]] = None,
                                         region: Optional[str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMwsNetworkConnectivityConfigsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['names'] = names
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('databricks:index/getMwsNetworkConnectivityConfigs:getMwsNetworkConnectivityConfigs', __args__, opts=opts, typ=GetMwsNetworkConnectivityConfigsResult).value

    return AwaitableGetMwsNetworkConnectivityConfigsResult(
        id=pulumi.get(__ret__, 'id'),
        names=pulumi.get(__ret__, 'names'),
        region=pulumi.get(__ret__, 'region'))
def get_mws_network_connectivity_configs_output(names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                                region: Optional[pulumi.Input[Optional[str]]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMwsNetworkConnectivityConfigsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['names'] = names
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('databricks:index/getMwsNetworkConnectivityConfigs:getMwsNetworkConnectivityConfigs', __args__, opts=opts, typ=GetMwsNetworkConnectivityConfigsResult)
    return __ret__.apply(lambda __response__: GetMwsNetworkConnectivityConfigsResult(
        id=pulumi.get(__response__, 'id'),
        names=pulumi.get(__response__, 'names'),
        region=pulumi.get(__response__, 'region')))
