# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MwsNetworkConnectivityConfigArgs', 'MwsNetworkConnectivityConfig']

@pulumi.input_type
class MwsNetworkConnectivityConfigArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 creation_time: Optional[pulumi.Input[int]] = None,
                 egress_config: Optional[pulumi.Input['MwsNetworkConnectivityConfigEgressConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_connectivity_config_id: Optional[pulumi.Input[str]] = None,
                 updated_time: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a MwsNetworkConnectivityConfig resource.
        """
        pulumi.set(__self__, "region", region)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if egress_config is not None:
            pulumi.set(__self__, "egress_config", egress_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_connectivity_config_id is not None:
            pulumi.set(__self__, "network_connectivity_config_id", network_connectivity_config_id)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter(name="egressConfig")
    def egress_config(self) -> Optional[pulumi.Input['MwsNetworkConnectivityConfigEgressConfigArgs']]:
        return pulumi.get(self, "egress_config")

    @egress_config.setter
    def egress_config(self, value: Optional[pulumi.Input['MwsNetworkConnectivityConfigEgressConfigArgs']]):
        pulumi.set(self, "egress_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkConnectivityConfigId")
    def network_connectivity_config_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_connectivity_config_id")

    @network_connectivity_config_id.setter
    def network_connectivity_config_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_connectivity_config_id", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "updated_time", value)


@pulumi.input_type
class _MwsNetworkConnectivityConfigState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 creation_time: Optional[pulumi.Input[int]] = None,
                 egress_config: Optional[pulumi.Input['MwsNetworkConnectivityConfigEgressConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_connectivity_config_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 updated_time: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering MwsNetworkConnectivityConfig resources.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if egress_config is not None:
            pulumi.set(__self__, "egress_config", egress_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_connectivity_config_id is not None:
            pulumi.set(__self__, "network_connectivity_config_id", network_connectivity_config_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter(name="egressConfig")
    def egress_config(self) -> Optional[pulumi.Input['MwsNetworkConnectivityConfigEgressConfigArgs']]:
        return pulumi.get(self, "egress_config")

    @egress_config.setter
    def egress_config(self, value: Optional[pulumi.Input['MwsNetworkConnectivityConfigEgressConfigArgs']]):
        pulumi.set(self, "egress_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkConnectivityConfigId")
    def network_connectivity_config_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_connectivity_config_id")

    @network_connectivity_config_id.setter
    def network_connectivity_config_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_connectivity_config_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "updated_time", value)


class MwsNetworkConnectivityConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 creation_time: Optional[pulumi.Input[int]] = None,
                 egress_config: Optional[pulumi.Input[Union['MwsNetworkConnectivityConfigEgressConfigArgs', 'MwsNetworkConnectivityConfigEgressConfigArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_connectivity_config_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 updated_time: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a MwsNetworkConnectivityConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MwsNetworkConnectivityConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MwsNetworkConnectivityConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MwsNetworkConnectivityConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MwsNetworkConnectivityConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 creation_time: Optional[pulumi.Input[int]] = None,
                 egress_config: Optional[pulumi.Input[Union['MwsNetworkConnectivityConfigEgressConfigArgs', 'MwsNetworkConnectivityConfigEgressConfigArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_connectivity_config_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 updated_time: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MwsNetworkConnectivityConfigArgs.__new__(MwsNetworkConnectivityConfigArgs)

            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["creation_time"] = creation_time
            __props__.__dict__["egress_config"] = egress_config
            __props__.__dict__["name"] = name
            __props__.__dict__["network_connectivity_config_id"] = network_connectivity_config_id
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["updated_time"] = updated_time
        super(MwsNetworkConnectivityConfig, __self__).__init__(
            'databricks:index/mwsNetworkConnectivityConfig:MwsNetworkConnectivityConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            creation_time: Optional[pulumi.Input[int]] = None,
            egress_config: Optional[pulumi.Input[Union['MwsNetworkConnectivityConfigEgressConfigArgs', 'MwsNetworkConnectivityConfigEgressConfigArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_connectivity_config_id: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            updated_time: Optional[pulumi.Input[int]] = None) -> 'MwsNetworkConnectivityConfig':
        """
        Get an existing MwsNetworkConnectivityConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MwsNetworkConnectivityConfigState.__new__(_MwsNetworkConnectivityConfigState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["creation_time"] = creation_time
        __props__.__dict__["egress_config"] = egress_config
        __props__.__dict__["name"] = name
        __props__.__dict__["network_connectivity_config_id"] = network_connectivity_config_id
        __props__.__dict__["region"] = region
        __props__.__dict__["updated_time"] = updated_time
        return MwsNetworkConnectivityConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[int]:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="egressConfig")
    def egress_config(self) -> pulumi.Output['outputs.MwsNetworkConnectivityConfigEgressConfig']:
        return pulumi.get(self, "egress_config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkConnectivityConfigId")
    def network_connectivity_config_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "network_connectivity_config_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[int]:
        return pulumi.get(self, "updated_time")

