# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDatabaseDatabaseCatalogsResult',
    'AwaitableGetDatabaseDatabaseCatalogsResult',
    'get_database_database_catalogs',
    'get_database_database_catalogs_output',
]

@pulumi.output_type
class GetDatabaseDatabaseCatalogsResult:
    """
    A collection of values returned by getDatabaseDatabaseCatalogs.
    """
    def __init__(__self__, database_catalogs=None, id=None):
        if database_catalogs and not isinstance(database_catalogs, list):
            raise TypeError("Expected argument 'database_catalogs' to be a list")
        pulumi.set(__self__, "database_catalogs", database_catalogs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="databaseCatalogs")
    def database_catalogs(self) -> Sequence['outputs.GetDatabaseDatabaseCatalogsDatabaseCatalogResult']:
        return pulumi.get(self, "database_catalogs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetDatabaseDatabaseCatalogsResult(GetDatabaseDatabaseCatalogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseDatabaseCatalogsResult(
            database_catalogs=self.database_catalogs,
            id=self.id)


def get_database_database_catalogs(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseDatabaseCatalogsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('databricks:index/getDatabaseDatabaseCatalogs:getDatabaseDatabaseCatalogs', __args__, opts=opts, typ=GetDatabaseDatabaseCatalogsResult).value

    return AwaitableGetDatabaseDatabaseCatalogsResult(
        database_catalogs=pulumi.get(__ret__, 'database_catalogs'),
        id=pulumi.get(__ret__, 'id'))
def get_database_database_catalogs_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabaseDatabaseCatalogsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('databricks:index/getDatabaseDatabaseCatalogs:getDatabaseDatabaseCatalogs', __args__, opts=opts, typ=GetDatabaseDatabaseCatalogsResult)
    return __ret__.apply(lambda __response__: GetDatabaseDatabaseCatalogsResult(
        database_catalogs=pulumi.get(__response__, 'database_catalogs'),
        id=pulumi.get(__response__, 'id')))
