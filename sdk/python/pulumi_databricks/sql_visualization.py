# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SqlVisualizationArgs', 'SqlVisualization']

@pulumi.input_type
class SqlVisualizationArgs:
    def __init__(__self__, *,
                 options: pulumi.Input[str],
                 query_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_plan: Optional[pulumi.Input[str]] = None,
                 visualization_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SqlVisualization resource.
        """
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "query_id", query_id)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_plan is not None:
            pulumi.set(__self__, "query_plan", query_plan)
        if visualization_id is not None:
            pulumi.set(__self__, "visualization_id", visualization_id)

    @property
    @pulumi.getter
    def options(self) -> pulumi.Input[str]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: pulumi.Input[str]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_id")

    @query_id.setter
    def query_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryPlan")
    def query_plan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_plan")

    @query_plan.setter
    def query_plan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_plan", value)

    @property
    @pulumi.getter(name="visualizationId")
    def visualization_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visualization_id")

    @visualization_id.setter
    def visualization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visualization_id", value)


@pulumi.input_type
class _SqlVisualizationState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 query_id: Optional[pulumi.Input[str]] = None,
                 query_plan: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 visualization_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SqlVisualization resources.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if query_id is not None:
            pulumi.set(__self__, "query_id", query_id)
        if query_plan is not None:
            pulumi.set(__self__, "query_plan", query_plan)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if visualization_id is not None:
            pulumi.set(__self__, "visualization_id", visualization_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_id")

    @query_id.setter
    def query_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_id", value)

    @property
    @pulumi.getter(name="queryPlan")
    def query_plan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_plan")

    @query_plan.setter
    def query_plan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_plan", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="visualizationId")
    def visualization_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visualization_id")

    @visualization_id.setter
    def visualization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visualization_id", value)


class SqlVisualization(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 query_id: Optional[pulumi.Input[str]] = None,
                 query_plan: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 visualization_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        You can import a `databricks_sql_visualization` resource with ID like the followingbash

        ```sh
         $ pulumi import databricks:index/sqlVisualization:SqlVisualization this <query-id>/<visualization-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SqlVisualizationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        You can import a `databricks_sql_visualization` resource with ID like the followingbash

        ```sh
         $ pulumi import databricks:index/sqlVisualization:SqlVisualization this <query-id>/<visualization-id>
        ```

        :param str resource_name: The name of the resource.
        :param SqlVisualizationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SqlVisualizationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 query_id: Optional[pulumi.Input[str]] = None,
                 query_plan: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 visualization_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SqlVisualizationArgs.__new__(SqlVisualizationArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if options is None and not opts.urn:
                raise TypeError("Missing required property 'options'")
            __props__.__dict__["options"] = options
            if query_id is None and not opts.urn:
                raise TypeError("Missing required property 'query_id'")
            __props__.__dict__["query_id"] = query_id
            __props__.__dict__["query_plan"] = query_plan
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["visualization_id"] = visualization_id
        super(SqlVisualization, __self__).__init__(
            'databricks:index/sqlVisualization:SqlVisualization',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            options: Optional[pulumi.Input[str]] = None,
            query_id: Optional[pulumi.Input[str]] = None,
            query_plan: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            visualization_id: Optional[pulumi.Input[str]] = None) -> 'SqlVisualization':
        """
        Get an existing SqlVisualization resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SqlVisualizationState.__new__(_SqlVisualizationState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["options"] = options
        __props__.__dict__["query_id"] = query_id
        __props__.__dict__["query_plan"] = query_plan
        __props__.__dict__["type"] = type
        __props__.__dict__["visualization_id"] = visualization_id
        return SqlVisualization(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "query_id")

    @property
    @pulumi.getter(name="queryPlan")
    def query_plan(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "query_plan")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="visualizationId")
    def visualization_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "visualization_id")

