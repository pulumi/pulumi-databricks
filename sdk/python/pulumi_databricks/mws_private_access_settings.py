# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['MwsPrivateAccessSettingsArgs', 'MwsPrivateAccessSettings']

@pulumi.input_type
class MwsPrivateAccessSettingsArgs:
    def __init__(__self__, *,
                 private_access_settings_name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 allowed_vpc_endpoint_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_access_level: Optional[pulumi.Input[str]] = None,
                 private_access_settings_id: Optional[pulumi.Input[str]] = None,
                 public_access_enabled: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MwsPrivateAccessSettings resource.
        :param pulumi.Input[str] private_access_settings_name: Name of Private Access Settings in Databricks Account
        :param pulumi.Input[str] region: Region of AWS VPC or the Google Cloud VPC network
        :param pulumi.Input[str] account_id: Account Id that could be found in the Accounts Console for [AWS](https://accounts.cloud.databricks.com/) or [GCP](https://accounts.gcp.databricks.com/)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_vpc_endpoint_ids: An array of MwsVpcEndpoint `vpc_endpoint_id` (not `id`). Only used when `private_access_level` is set to `ENDPOINT`. This is an allow list of MwsVpcEndpoint that in your account that can connect to your MwsWorkspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting `public_access_enabled` to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
        :param pulumi.Input[str] private_access_level: The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. `ACCOUNT` level access _(default)_ lets only MwsVpcEndpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. `ENDPOINT` level access lets only specified MwsVpcEndpoint connect to your workspace. Please see the `allowed_vpc_endpoint_ids` documentation for more details.
        :param pulumi.Input[str] private_access_settings_id: Canonical unique identifier of Private Access Settings in Databricks Account
        :param pulumi.Input[bool] public_access_enabled: If `true`, the MwsWorkspaces can be accessed over the MwsVpcEndpoint as well as over the public network. In such a case, you could also configure an IpAccessList for the workspace, to restrict the source networks that could be used to access it over the public network. If `false`, the workspace can be accessed only over VPC endpoints, and not over the public network.
        :param pulumi.Input[str] status: (AWS only) Status of Private Access Settings
        """
        pulumi.set(__self__, "private_access_settings_name", private_access_settings_name)
        pulumi.set(__self__, "region", region)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if allowed_vpc_endpoint_ids is not None:
            pulumi.set(__self__, "allowed_vpc_endpoint_ids", allowed_vpc_endpoint_ids)
        if private_access_level is not None:
            pulumi.set(__self__, "private_access_level", private_access_level)
        if private_access_settings_id is not None:
            pulumi.set(__self__, "private_access_settings_id", private_access_settings_id)
        if public_access_enabled is not None:
            pulumi.set(__self__, "public_access_enabled", public_access_enabled)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="privateAccessSettingsName")
    def private_access_settings_name(self) -> pulumi.Input[str]:
        """
        Name of Private Access Settings in Databricks Account
        """
        return pulumi.get(self, "private_access_settings_name")

    @private_access_settings_name.setter
    def private_access_settings_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_access_settings_name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region of AWS VPC or the Google Cloud VPC network
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account Id that could be found in the Accounts Console for [AWS](https://accounts.cloud.databricks.com/) or [GCP](https://accounts.gcp.databricks.com/)
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="allowedVpcEndpointIds")
    def allowed_vpc_endpoint_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of MwsVpcEndpoint `vpc_endpoint_id` (not `id`). Only used when `private_access_level` is set to `ENDPOINT`. This is an allow list of MwsVpcEndpoint that in your account that can connect to your MwsWorkspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting `public_access_enabled` to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
        """
        return pulumi.get(self, "allowed_vpc_endpoint_ids")

    @allowed_vpc_endpoint_ids.setter
    def allowed_vpc_endpoint_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_vpc_endpoint_ids", value)

    @property
    @pulumi.getter(name="privateAccessLevel")
    def private_access_level(self) -> Optional[pulumi.Input[str]]:
        """
        The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. `ACCOUNT` level access _(default)_ lets only MwsVpcEndpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. `ENDPOINT` level access lets only specified MwsVpcEndpoint connect to your workspace. Please see the `allowed_vpc_endpoint_ids` documentation for more details.
        """
        return pulumi.get(self, "private_access_level")

    @private_access_level.setter
    def private_access_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_access_level", value)

    @property
    @pulumi.getter(name="privateAccessSettingsId")
    def private_access_settings_id(self) -> Optional[pulumi.Input[str]]:
        """
        Canonical unique identifier of Private Access Settings in Databricks Account
        """
        return pulumi.get(self, "private_access_settings_id")

    @private_access_settings_id.setter
    def private_access_settings_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_access_settings_id", value)

    @property
    @pulumi.getter(name="publicAccessEnabled")
    def public_access_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, the MwsWorkspaces can be accessed over the MwsVpcEndpoint as well as over the public network. In such a case, you could also configure an IpAccessList for the workspace, to restrict the source networks that could be used to access it over the public network. If `false`, the workspace can be accessed only over VPC endpoints, and not over the public network.
        """
        return pulumi.get(self, "public_access_enabled")

    @public_access_enabled.setter
    def public_access_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_access_enabled", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        (AWS only) Status of Private Access Settings
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _MwsPrivateAccessSettingsState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 allowed_vpc_endpoint_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_access_level: Optional[pulumi.Input[str]] = None,
                 private_access_settings_id: Optional[pulumi.Input[str]] = None,
                 private_access_settings_name: Optional[pulumi.Input[str]] = None,
                 public_access_enabled: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MwsPrivateAccessSettings resources.
        :param pulumi.Input[str] account_id: Account Id that could be found in the Accounts Console for [AWS](https://accounts.cloud.databricks.com/) or [GCP](https://accounts.gcp.databricks.com/)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_vpc_endpoint_ids: An array of MwsVpcEndpoint `vpc_endpoint_id` (not `id`). Only used when `private_access_level` is set to `ENDPOINT`. This is an allow list of MwsVpcEndpoint that in your account that can connect to your MwsWorkspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting `public_access_enabled` to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
        :param pulumi.Input[str] private_access_level: The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. `ACCOUNT` level access _(default)_ lets only MwsVpcEndpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. `ENDPOINT` level access lets only specified MwsVpcEndpoint connect to your workspace. Please see the `allowed_vpc_endpoint_ids` documentation for more details.
        :param pulumi.Input[str] private_access_settings_id: Canonical unique identifier of Private Access Settings in Databricks Account
        :param pulumi.Input[str] private_access_settings_name: Name of Private Access Settings in Databricks Account
        :param pulumi.Input[bool] public_access_enabled: If `true`, the MwsWorkspaces can be accessed over the MwsVpcEndpoint as well as over the public network. In such a case, you could also configure an IpAccessList for the workspace, to restrict the source networks that could be used to access it over the public network. If `false`, the workspace can be accessed only over VPC endpoints, and not over the public network.
        :param pulumi.Input[str] region: Region of AWS VPC or the Google Cloud VPC network
        :param pulumi.Input[str] status: (AWS only) Status of Private Access Settings
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if allowed_vpc_endpoint_ids is not None:
            pulumi.set(__self__, "allowed_vpc_endpoint_ids", allowed_vpc_endpoint_ids)
        if private_access_level is not None:
            pulumi.set(__self__, "private_access_level", private_access_level)
        if private_access_settings_id is not None:
            pulumi.set(__self__, "private_access_settings_id", private_access_settings_id)
        if private_access_settings_name is not None:
            pulumi.set(__self__, "private_access_settings_name", private_access_settings_name)
        if public_access_enabled is not None:
            pulumi.set(__self__, "public_access_enabled", public_access_enabled)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account Id that could be found in the Accounts Console for [AWS](https://accounts.cloud.databricks.com/) or [GCP](https://accounts.gcp.databricks.com/)
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="allowedVpcEndpointIds")
    def allowed_vpc_endpoint_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of MwsVpcEndpoint `vpc_endpoint_id` (not `id`). Only used when `private_access_level` is set to `ENDPOINT`. This is an allow list of MwsVpcEndpoint that in your account that can connect to your MwsWorkspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting `public_access_enabled` to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
        """
        return pulumi.get(self, "allowed_vpc_endpoint_ids")

    @allowed_vpc_endpoint_ids.setter
    def allowed_vpc_endpoint_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_vpc_endpoint_ids", value)

    @property
    @pulumi.getter(name="privateAccessLevel")
    def private_access_level(self) -> Optional[pulumi.Input[str]]:
        """
        The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. `ACCOUNT` level access _(default)_ lets only MwsVpcEndpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. `ENDPOINT` level access lets only specified MwsVpcEndpoint connect to your workspace. Please see the `allowed_vpc_endpoint_ids` documentation for more details.
        """
        return pulumi.get(self, "private_access_level")

    @private_access_level.setter
    def private_access_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_access_level", value)

    @property
    @pulumi.getter(name="privateAccessSettingsId")
    def private_access_settings_id(self) -> Optional[pulumi.Input[str]]:
        """
        Canonical unique identifier of Private Access Settings in Databricks Account
        """
        return pulumi.get(self, "private_access_settings_id")

    @private_access_settings_id.setter
    def private_access_settings_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_access_settings_id", value)

    @property
    @pulumi.getter(name="privateAccessSettingsName")
    def private_access_settings_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Private Access Settings in Databricks Account
        """
        return pulumi.get(self, "private_access_settings_name")

    @private_access_settings_name.setter
    def private_access_settings_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_access_settings_name", value)

    @property
    @pulumi.getter(name="publicAccessEnabled")
    def public_access_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, the MwsWorkspaces can be accessed over the MwsVpcEndpoint as well as over the public network. In such a case, you could also configure an IpAccessList for the workspace, to restrict the source networks that could be used to access it over the public network. If `false`, the workspace can be accessed only over VPC endpoints, and not over the public network.
        """
        return pulumi.get(self, "public_access_enabled")

    @public_access_enabled.setter
    def public_access_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_access_enabled", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region of AWS VPC or the Google Cloud VPC network
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        (AWS only) Status of Private Access Settings
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class MwsPrivateAccessSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 allowed_vpc_endpoint_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_access_level: Optional[pulumi.Input[str]] = None,
                 private_access_settings_id: Optional[pulumi.Input[str]] = None,
                 private_access_settings_name: Optional[pulumi.Input[str]] = None,
                 public_access_enabled: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        > **Note** Initialize provider with `alias = "mws"`, `host  = "https://accounts.cloud.databricks.com"` and use `provider = databricks.mws` for all `databricks_mws_*` resources.

        > **Note** This resource has an evolving API, which will change in the upcoming versions of the provider in order to simplify user experience.

        Allows you to create a [Private Access Setting]that can be used as part of a MwsWorkspaces resource to create a [Databricks Workspace that leverages AWS PrivateLink](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html) or [GCP Private Service Connect](https://docs.gcp.databricks.com/administration-guide/cloud-configurations/gcp/private-service-connect.html)

        It is strongly recommended that customers read the [Enable AWS Private Link](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html) [Enable GCP Private Service Connect](https://docs.gcp.databricks.com/administration-guide/cloud-configurations/gcp/private-service-connect.html) documentation before trying to leverage this resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_databricks as databricks

        pas = databricks.MwsPrivateAccessSettings("pas",
            account_id=var["databricks_account_id"],
            private_access_settings_name=f"Private Access Settings for {local['prefix']}",
            region=var["region"],
            public_access_enabled=True,
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        ```

        The `databricks_mws_private_access_settings.pas.private_access_settings_id` can then be used as part of a MwsWorkspaces resource:

        ```python
        import pulumi
        import pulumi_databricks as databricks

        this = databricks.MwsWorkspaces("this",
            account_id=var["databricks_account_id"],
            aws_region=var["region"],
            workspace_name=local["prefix"],
            credentials_id=databricks_mws_credentials["this"]["credentials_id"],
            storage_configuration_id=databricks_mws_storage_configurations["this"]["storage_configuration_id"],
            network_id=databricks_mws_networks["this"]["network_id"],
            private_access_settings_id=databricks_mws_private_access_settings["pas"]["private_access_settings_id"],
            pricing_tier="ENTERPRISE",
            opts=pulumi.ResourceOptions(provider=databricks["mws"],
                depends_on=[databricks_mws_networks["this"]]))
        ```
        or
        ```python
        import pulumi
        import pulumi_databricks as databricks

        this = databricks.MwsWorkspaces("this",
            account_id=var["databricks_account_id"],
            workspace_name="gcp-workspace",
            location=var["subnet_region"],
            cloud_resource_container=databricks.MwsWorkspacesCloudResourceContainerArgs(
                gcp=databricks.MwsWorkspacesCloudResourceContainerGcpArgs(
                    project_id=var["google_project"],
                ),
            ),
            gke_config=databricks.MwsWorkspacesGkeConfigArgs(
                connectivity_type="PRIVATE_NODE_PUBLIC_MASTER",
                master_ip_range="10.3.0.0/28",
            ),
            network_id=databricks_mws_networks["this"]["network_id"],
            private_access_settings_id=databricks_mws_private_access_settings["pas"]["private_access_settings_id"],
            pricing_tier="PREMIUM",
            opts=pulumi.ResourceOptions(provider=databricks["mws"],
                depends_on=[databricks_mws_networks["this"]]))
        ```
        ## Related Resources

        The following resources are used in the same context:

        * Provisioning Databricks on AWS guide.
        * Provisioning Databricks on AWS with PrivateLink guide.
        * Provisioning AWS Databricks E2 with a Hub & Spoke firewall for data exfiltration protection guide.
        * Provisioning Databricks workspaces on GCP with Private Service Connect guide.
        * MwsVpcEndpoint resources with Databricks such that they can be used as part of a MwsNetworks configuration.
        * MwsNetworks to [configure VPC](https://docs.databricks.com/administration-guide/cloud-configurations/aws/customer-managed-vpc.html) & subnets for new workspaces within AWS.
        * MwsWorkspaces to set up [workspaces in E2 architecture on AWS](https://docs.databricks.com/getting-started/overview.html#e2-architecture-1).

        ## Import

        -> **Note** Importing this resource is not currently supported.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account Id that could be found in the Accounts Console for [AWS](https://accounts.cloud.databricks.com/) or [GCP](https://accounts.gcp.databricks.com/)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_vpc_endpoint_ids: An array of MwsVpcEndpoint `vpc_endpoint_id` (not `id`). Only used when `private_access_level` is set to `ENDPOINT`. This is an allow list of MwsVpcEndpoint that in your account that can connect to your MwsWorkspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting `public_access_enabled` to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
        :param pulumi.Input[str] private_access_level: The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. `ACCOUNT` level access _(default)_ lets only MwsVpcEndpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. `ENDPOINT` level access lets only specified MwsVpcEndpoint connect to your workspace. Please see the `allowed_vpc_endpoint_ids` documentation for more details.
        :param pulumi.Input[str] private_access_settings_id: Canonical unique identifier of Private Access Settings in Databricks Account
        :param pulumi.Input[str] private_access_settings_name: Name of Private Access Settings in Databricks Account
        :param pulumi.Input[bool] public_access_enabled: If `true`, the MwsWorkspaces can be accessed over the MwsVpcEndpoint as well as over the public network. In such a case, you could also configure an IpAccessList for the workspace, to restrict the source networks that could be used to access it over the public network. If `false`, the workspace can be accessed only over VPC endpoints, and not over the public network.
        :param pulumi.Input[str] region: Region of AWS VPC or the Google Cloud VPC network
        :param pulumi.Input[str] status: (AWS only) Status of Private Access Settings
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MwsPrivateAccessSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        > **Note** Initialize provider with `alias = "mws"`, `host  = "https://accounts.cloud.databricks.com"` and use `provider = databricks.mws` for all `databricks_mws_*` resources.

        > **Note** This resource has an evolving API, which will change in the upcoming versions of the provider in order to simplify user experience.

        Allows you to create a [Private Access Setting]that can be used as part of a MwsWorkspaces resource to create a [Databricks Workspace that leverages AWS PrivateLink](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html) or [GCP Private Service Connect](https://docs.gcp.databricks.com/administration-guide/cloud-configurations/gcp/private-service-connect.html)

        It is strongly recommended that customers read the [Enable AWS Private Link](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html) [Enable GCP Private Service Connect](https://docs.gcp.databricks.com/administration-guide/cloud-configurations/gcp/private-service-connect.html) documentation before trying to leverage this resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_databricks as databricks

        pas = databricks.MwsPrivateAccessSettings("pas",
            account_id=var["databricks_account_id"],
            private_access_settings_name=f"Private Access Settings for {local['prefix']}",
            region=var["region"],
            public_access_enabled=True,
            opts=pulumi.ResourceOptions(provider=databricks["mws"]))
        ```

        The `databricks_mws_private_access_settings.pas.private_access_settings_id` can then be used as part of a MwsWorkspaces resource:

        ```python
        import pulumi
        import pulumi_databricks as databricks

        this = databricks.MwsWorkspaces("this",
            account_id=var["databricks_account_id"],
            aws_region=var["region"],
            workspace_name=local["prefix"],
            credentials_id=databricks_mws_credentials["this"]["credentials_id"],
            storage_configuration_id=databricks_mws_storage_configurations["this"]["storage_configuration_id"],
            network_id=databricks_mws_networks["this"]["network_id"],
            private_access_settings_id=databricks_mws_private_access_settings["pas"]["private_access_settings_id"],
            pricing_tier="ENTERPRISE",
            opts=pulumi.ResourceOptions(provider=databricks["mws"],
                depends_on=[databricks_mws_networks["this"]]))
        ```
        or
        ```python
        import pulumi
        import pulumi_databricks as databricks

        this = databricks.MwsWorkspaces("this",
            account_id=var["databricks_account_id"],
            workspace_name="gcp-workspace",
            location=var["subnet_region"],
            cloud_resource_container=databricks.MwsWorkspacesCloudResourceContainerArgs(
                gcp=databricks.MwsWorkspacesCloudResourceContainerGcpArgs(
                    project_id=var["google_project"],
                ),
            ),
            gke_config=databricks.MwsWorkspacesGkeConfigArgs(
                connectivity_type="PRIVATE_NODE_PUBLIC_MASTER",
                master_ip_range="10.3.0.0/28",
            ),
            network_id=databricks_mws_networks["this"]["network_id"],
            private_access_settings_id=databricks_mws_private_access_settings["pas"]["private_access_settings_id"],
            pricing_tier="PREMIUM",
            opts=pulumi.ResourceOptions(provider=databricks["mws"],
                depends_on=[databricks_mws_networks["this"]]))
        ```
        ## Related Resources

        The following resources are used in the same context:

        * Provisioning Databricks on AWS guide.
        * Provisioning Databricks on AWS with PrivateLink guide.
        * Provisioning AWS Databricks E2 with a Hub & Spoke firewall for data exfiltration protection guide.
        * Provisioning Databricks workspaces on GCP with Private Service Connect guide.
        * MwsVpcEndpoint resources with Databricks such that they can be used as part of a MwsNetworks configuration.
        * MwsNetworks to [configure VPC](https://docs.databricks.com/administration-guide/cloud-configurations/aws/customer-managed-vpc.html) & subnets for new workspaces within AWS.
        * MwsWorkspaces to set up [workspaces in E2 architecture on AWS](https://docs.databricks.com/getting-started/overview.html#e2-architecture-1).

        ## Import

        -> **Note** Importing this resource is not currently supported.

        :param str resource_name: The name of the resource.
        :param MwsPrivateAccessSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MwsPrivateAccessSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 allowed_vpc_endpoint_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_access_level: Optional[pulumi.Input[str]] = None,
                 private_access_settings_id: Optional[pulumi.Input[str]] = None,
                 private_access_settings_name: Optional[pulumi.Input[str]] = None,
                 public_access_enabled: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MwsPrivateAccessSettingsArgs.__new__(MwsPrivateAccessSettingsArgs)

            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["allowed_vpc_endpoint_ids"] = allowed_vpc_endpoint_ids
            __props__.__dict__["private_access_level"] = private_access_level
            __props__.__dict__["private_access_settings_id"] = private_access_settings_id
            if private_access_settings_name is None and not opts.urn:
                raise TypeError("Missing required property 'private_access_settings_name'")
            __props__.__dict__["private_access_settings_name"] = private_access_settings_name
            __props__.__dict__["public_access_enabled"] = public_access_enabled
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["status"] = status
        super(MwsPrivateAccessSettings, __self__).__init__(
            'databricks:index/mwsPrivateAccessSettings:MwsPrivateAccessSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            allowed_vpc_endpoint_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            private_access_level: Optional[pulumi.Input[str]] = None,
            private_access_settings_id: Optional[pulumi.Input[str]] = None,
            private_access_settings_name: Optional[pulumi.Input[str]] = None,
            public_access_enabled: Optional[pulumi.Input[bool]] = None,
            region: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'MwsPrivateAccessSettings':
        """
        Get an existing MwsPrivateAccessSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account Id that could be found in the Accounts Console for [AWS](https://accounts.cloud.databricks.com/) or [GCP](https://accounts.gcp.databricks.com/)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_vpc_endpoint_ids: An array of MwsVpcEndpoint `vpc_endpoint_id` (not `id`). Only used when `private_access_level` is set to `ENDPOINT`. This is an allow list of MwsVpcEndpoint that in your account that can connect to your MwsWorkspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting `public_access_enabled` to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
        :param pulumi.Input[str] private_access_level: The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. `ACCOUNT` level access _(default)_ lets only MwsVpcEndpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. `ENDPOINT` level access lets only specified MwsVpcEndpoint connect to your workspace. Please see the `allowed_vpc_endpoint_ids` documentation for more details.
        :param pulumi.Input[str] private_access_settings_id: Canonical unique identifier of Private Access Settings in Databricks Account
        :param pulumi.Input[str] private_access_settings_name: Name of Private Access Settings in Databricks Account
        :param pulumi.Input[bool] public_access_enabled: If `true`, the MwsWorkspaces can be accessed over the MwsVpcEndpoint as well as over the public network. In such a case, you could also configure an IpAccessList for the workspace, to restrict the source networks that could be used to access it over the public network. If `false`, the workspace can be accessed only over VPC endpoints, and not over the public network.
        :param pulumi.Input[str] region: Region of AWS VPC or the Google Cloud VPC network
        :param pulumi.Input[str] status: (AWS only) Status of Private Access Settings
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MwsPrivateAccessSettingsState.__new__(_MwsPrivateAccessSettingsState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["allowed_vpc_endpoint_ids"] = allowed_vpc_endpoint_ids
        __props__.__dict__["private_access_level"] = private_access_level
        __props__.__dict__["private_access_settings_id"] = private_access_settings_id
        __props__.__dict__["private_access_settings_name"] = private_access_settings_name
        __props__.__dict__["public_access_enabled"] = public_access_enabled
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        return MwsPrivateAccessSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[Optional[str]]:
        """
        Account Id that could be found in the Accounts Console for [AWS](https://accounts.cloud.databricks.com/) or [GCP](https://accounts.gcp.databricks.com/)
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="allowedVpcEndpointIds")
    def allowed_vpc_endpoint_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        An array of MwsVpcEndpoint `vpc_endpoint_id` (not `id`). Only used when `private_access_level` is set to `ENDPOINT`. This is an allow list of MwsVpcEndpoint that in your account that can connect to your MwsWorkspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting `public_access_enabled` to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
        """
        return pulumi.get(self, "allowed_vpc_endpoint_ids")

    @property
    @pulumi.getter(name="privateAccessLevel")
    def private_access_level(self) -> pulumi.Output[Optional[str]]:
        """
        The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. `ACCOUNT` level access _(default)_ lets only MwsVpcEndpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. `ENDPOINT` level access lets only specified MwsVpcEndpoint connect to your workspace. Please see the `allowed_vpc_endpoint_ids` documentation for more details.
        """
        return pulumi.get(self, "private_access_level")

    @property
    @pulumi.getter(name="privateAccessSettingsId")
    def private_access_settings_id(self) -> pulumi.Output[str]:
        """
        Canonical unique identifier of Private Access Settings in Databricks Account
        """
        return pulumi.get(self, "private_access_settings_id")

    @property
    @pulumi.getter(name="privateAccessSettingsName")
    def private_access_settings_name(self) -> pulumi.Output[str]:
        """
        Name of Private Access Settings in Databricks Account
        """
        return pulumi.get(self, "private_access_settings_name")

    @property
    @pulumi.getter(name="publicAccessEnabled")
    def public_access_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        If `true`, the MwsWorkspaces can be accessed over the MwsVpcEndpoint as well as over the public network. In such a case, you could also configure an IpAccessList for the workspace, to restrict the source networks that could be used to access it over the public network. If `false`, the workspace can be accessed only over VPC endpoints, and not over the public network.
        """
        return pulumi.get(self, "public_access_enabled")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Region of AWS VPC or the Google Cloud VPC network
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        (AWS only) Status of Private Access Settings
        """
        return pulumi.get(self, "status")

