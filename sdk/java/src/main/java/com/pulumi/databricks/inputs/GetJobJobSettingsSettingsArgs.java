// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsContinuousArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsDbtTaskArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsDeploymentArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsEmailNotificationsArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsEnvironmentArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsGitSourceArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsHealthArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsJobClusterArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsLibraryArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsNewClusterArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsNotebookTaskArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsNotificationSettingsArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsParameterArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsPipelineTaskArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsPythonWheelTaskArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsQueueArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsRunAsArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsRunJobTaskArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsScheduleArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsSparkJarTaskArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsSparkPythonTaskArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsSparkSubmitTaskArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsTaskArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsTriggerArgs;
import com.pulumi.databricks.inputs.GetJobJobSettingsSettingsWebhookNotificationsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetJobJobSettingsSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetJobJobSettingsSettingsArgs Empty = new GetJobJobSettingsSettingsArgs();

    @Import(name="continuous")
    private @Nullable Output<GetJobJobSettingsSettingsContinuousArgs> continuous;

    public Optional<Output<GetJobJobSettingsSettingsContinuousArgs>> continuous() {
        return Optional.ofNullable(this.continuous);
    }

    @Import(name="dbtTask")
    private @Nullable Output<GetJobJobSettingsSettingsDbtTaskArgs> dbtTask;

    public Optional<Output<GetJobJobSettingsSettingsDbtTaskArgs>> dbtTask() {
        return Optional.ofNullable(this.dbtTask);
    }

    @Import(name="deployment")
    private @Nullable Output<GetJobJobSettingsSettingsDeploymentArgs> deployment;

    public Optional<Output<GetJobJobSettingsSettingsDeploymentArgs>> deployment() {
        return Optional.ofNullable(this.deployment);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="editMode")
    private @Nullable Output<String> editMode;

    public Optional<Output<String>> editMode() {
        return Optional.ofNullable(this.editMode);
    }

    @Import(name="emailNotifications")
    private @Nullable Output<GetJobJobSettingsSettingsEmailNotificationsArgs> emailNotifications;

    public Optional<Output<GetJobJobSettingsSettingsEmailNotificationsArgs>> emailNotifications() {
        return Optional.ofNullable(this.emailNotifications);
    }

    @Import(name="environments")
    private @Nullable Output<List<GetJobJobSettingsSettingsEnvironmentArgs>> environments;

    public Optional<Output<List<GetJobJobSettingsSettingsEnvironmentArgs>>> environments() {
        return Optional.ofNullable(this.environments);
    }

    @Import(name="existingClusterId")
    private @Nullable Output<String> existingClusterId;

    public Optional<Output<String>> existingClusterId() {
        return Optional.ofNullable(this.existingClusterId);
    }

    @Import(name="format", required=true)
    private Output<String> format;

    public Output<String> format() {
        return this.format;
    }

    @Import(name="gitSource")
    private @Nullable Output<GetJobJobSettingsSettingsGitSourceArgs> gitSource;

    public Optional<Output<GetJobJobSettingsSettingsGitSourceArgs>> gitSource() {
        return Optional.ofNullable(this.gitSource);
    }

    @Import(name="health")
    private @Nullable Output<GetJobJobSettingsSettingsHealthArgs> health;

    public Optional<Output<GetJobJobSettingsSettingsHealthArgs>> health() {
        return Optional.ofNullable(this.health);
    }

    @Import(name="jobClusters")
    private @Nullable Output<List<GetJobJobSettingsSettingsJobClusterArgs>> jobClusters;

    public Optional<Output<List<GetJobJobSettingsSettingsJobClusterArgs>>> jobClusters() {
        return Optional.ofNullable(this.jobClusters);
    }

    @Import(name="libraries")
    private @Nullable Output<List<GetJobJobSettingsSettingsLibraryArgs>> libraries;

    public Optional<Output<List<GetJobJobSettingsSettingsLibraryArgs>>> libraries() {
        return Optional.ofNullable(this.libraries);
    }

    @Import(name="maxConcurrentRuns")
    private @Nullable Output<Integer> maxConcurrentRuns;

    public Optional<Output<Integer>> maxConcurrentRuns() {
        return Optional.ofNullable(this.maxConcurrentRuns);
    }

    @Import(name="maxRetries")
    private @Nullable Output<Integer> maxRetries;

    public Optional<Output<Integer>> maxRetries() {
        return Optional.ofNullable(this.maxRetries);
    }

    @Import(name="minRetryIntervalMillis")
    private @Nullable Output<Integer> minRetryIntervalMillis;

    public Optional<Output<Integer>> minRetryIntervalMillis() {
        return Optional.ofNullable(this.minRetryIntervalMillis);
    }

    /**
     * the job name of databricks.Job if the resource was matched by id.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return the job name of databricks.Job if the resource was matched by id.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="newCluster")
    private @Nullable Output<GetJobJobSettingsSettingsNewClusterArgs> newCluster;

    public Optional<Output<GetJobJobSettingsSettingsNewClusterArgs>> newCluster() {
        return Optional.ofNullable(this.newCluster);
    }

    @Import(name="notebookTask")
    private @Nullable Output<GetJobJobSettingsSettingsNotebookTaskArgs> notebookTask;

    public Optional<Output<GetJobJobSettingsSettingsNotebookTaskArgs>> notebookTask() {
        return Optional.ofNullable(this.notebookTask);
    }

    @Import(name="notificationSettings")
    private @Nullable Output<GetJobJobSettingsSettingsNotificationSettingsArgs> notificationSettings;

    public Optional<Output<GetJobJobSettingsSettingsNotificationSettingsArgs>> notificationSettings() {
        return Optional.ofNullable(this.notificationSettings);
    }

    @Import(name="parameters")
    private @Nullable Output<List<GetJobJobSettingsSettingsParameterArgs>> parameters;

    public Optional<Output<List<GetJobJobSettingsSettingsParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    @Import(name="pipelineTask")
    private @Nullable Output<GetJobJobSettingsSettingsPipelineTaskArgs> pipelineTask;

    public Optional<Output<GetJobJobSettingsSettingsPipelineTaskArgs>> pipelineTask() {
        return Optional.ofNullable(this.pipelineTask);
    }

    @Import(name="pythonWheelTask")
    private @Nullable Output<GetJobJobSettingsSettingsPythonWheelTaskArgs> pythonWheelTask;

    public Optional<Output<GetJobJobSettingsSettingsPythonWheelTaskArgs>> pythonWheelTask() {
        return Optional.ofNullable(this.pythonWheelTask);
    }

    @Import(name="queue")
    private @Nullable Output<GetJobJobSettingsSettingsQueueArgs> queue;

    public Optional<Output<GetJobJobSettingsSettingsQueueArgs>> queue() {
        return Optional.ofNullable(this.queue);
    }

    @Import(name="retryOnTimeout")
    private @Nullable Output<Boolean> retryOnTimeout;

    public Optional<Output<Boolean>> retryOnTimeout() {
        return Optional.ofNullable(this.retryOnTimeout);
    }

    @Import(name="runAs", required=true)
    private Output<GetJobJobSettingsSettingsRunAsArgs> runAs;

    public Output<GetJobJobSettingsSettingsRunAsArgs> runAs() {
        return this.runAs;
    }

    @Import(name="runJobTask")
    private @Nullable Output<GetJobJobSettingsSettingsRunJobTaskArgs> runJobTask;

    public Optional<Output<GetJobJobSettingsSettingsRunJobTaskArgs>> runJobTask() {
        return Optional.ofNullable(this.runJobTask);
    }

    @Import(name="schedule")
    private @Nullable Output<GetJobJobSettingsSettingsScheduleArgs> schedule;

    public Optional<Output<GetJobJobSettingsSettingsScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    @Import(name="sparkJarTask")
    private @Nullable Output<GetJobJobSettingsSettingsSparkJarTaskArgs> sparkJarTask;

    public Optional<Output<GetJobJobSettingsSettingsSparkJarTaskArgs>> sparkJarTask() {
        return Optional.ofNullable(this.sparkJarTask);
    }

    @Import(name="sparkPythonTask")
    private @Nullable Output<GetJobJobSettingsSettingsSparkPythonTaskArgs> sparkPythonTask;

    public Optional<Output<GetJobJobSettingsSettingsSparkPythonTaskArgs>> sparkPythonTask() {
        return Optional.ofNullable(this.sparkPythonTask);
    }

    @Import(name="sparkSubmitTask")
    private @Nullable Output<GetJobJobSettingsSettingsSparkSubmitTaskArgs> sparkSubmitTask;

    public Optional<Output<GetJobJobSettingsSettingsSparkSubmitTaskArgs>> sparkSubmitTask() {
        return Optional.ofNullable(this.sparkSubmitTask);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tasks")
    private @Nullable Output<List<GetJobJobSettingsSettingsTaskArgs>> tasks;

    public Optional<Output<List<GetJobJobSettingsSettingsTaskArgs>>> tasks() {
        return Optional.ofNullable(this.tasks);
    }

    @Import(name="timeoutSeconds")
    private @Nullable Output<Integer> timeoutSeconds;

    public Optional<Output<Integer>> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    @Import(name="trigger")
    private @Nullable Output<GetJobJobSettingsSettingsTriggerArgs> trigger;

    public Optional<Output<GetJobJobSettingsSettingsTriggerArgs>> trigger() {
        return Optional.ofNullable(this.trigger);
    }

    @Import(name="webhookNotifications")
    private @Nullable Output<GetJobJobSettingsSettingsWebhookNotificationsArgs> webhookNotifications;

    public Optional<Output<GetJobJobSettingsSettingsWebhookNotificationsArgs>> webhookNotifications() {
        return Optional.ofNullable(this.webhookNotifications);
    }

    private GetJobJobSettingsSettingsArgs() {}

    private GetJobJobSettingsSettingsArgs(GetJobJobSettingsSettingsArgs $) {
        this.continuous = $.continuous;
        this.dbtTask = $.dbtTask;
        this.deployment = $.deployment;
        this.description = $.description;
        this.editMode = $.editMode;
        this.emailNotifications = $.emailNotifications;
        this.environments = $.environments;
        this.existingClusterId = $.existingClusterId;
        this.format = $.format;
        this.gitSource = $.gitSource;
        this.health = $.health;
        this.jobClusters = $.jobClusters;
        this.libraries = $.libraries;
        this.maxConcurrentRuns = $.maxConcurrentRuns;
        this.maxRetries = $.maxRetries;
        this.minRetryIntervalMillis = $.minRetryIntervalMillis;
        this.name = $.name;
        this.newCluster = $.newCluster;
        this.notebookTask = $.notebookTask;
        this.notificationSettings = $.notificationSettings;
        this.parameters = $.parameters;
        this.pipelineTask = $.pipelineTask;
        this.pythonWheelTask = $.pythonWheelTask;
        this.queue = $.queue;
        this.retryOnTimeout = $.retryOnTimeout;
        this.runAs = $.runAs;
        this.runJobTask = $.runJobTask;
        this.schedule = $.schedule;
        this.sparkJarTask = $.sparkJarTask;
        this.sparkPythonTask = $.sparkPythonTask;
        this.sparkSubmitTask = $.sparkSubmitTask;
        this.tags = $.tags;
        this.tasks = $.tasks;
        this.timeoutSeconds = $.timeoutSeconds;
        this.trigger = $.trigger;
        this.webhookNotifications = $.webhookNotifications;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetJobJobSettingsSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetJobJobSettingsSettingsArgs $;

        public Builder() {
            $ = new GetJobJobSettingsSettingsArgs();
        }

        public Builder(GetJobJobSettingsSettingsArgs defaults) {
            $ = new GetJobJobSettingsSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder continuous(@Nullable Output<GetJobJobSettingsSettingsContinuousArgs> continuous) {
            $.continuous = continuous;
            return this;
        }

        public Builder continuous(GetJobJobSettingsSettingsContinuousArgs continuous) {
            return continuous(Output.of(continuous));
        }

        public Builder dbtTask(@Nullable Output<GetJobJobSettingsSettingsDbtTaskArgs> dbtTask) {
            $.dbtTask = dbtTask;
            return this;
        }

        public Builder dbtTask(GetJobJobSettingsSettingsDbtTaskArgs dbtTask) {
            return dbtTask(Output.of(dbtTask));
        }

        public Builder deployment(@Nullable Output<GetJobJobSettingsSettingsDeploymentArgs> deployment) {
            $.deployment = deployment;
            return this;
        }

        public Builder deployment(GetJobJobSettingsSettingsDeploymentArgs deployment) {
            return deployment(Output.of(deployment));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder editMode(@Nullable Output<String> editMode) {
            $.editMode = editMode;
            return this;
        }

        public Builder editMode(String editMode) {
            return editMode(Output.of(editMode));
        }

        public Builder emailNotifications(@Nullable Output<GetJobJobSettingsSettingsEmailNotificationsArgs> emailNotifications) {
            $.emailNotifications = emailNotifications;
            return this;
        }

        public Builder emailNotifications(GetJobJobSettingsSettingsEmailNotificationsArgs emailNotifications) {
            return emailNotifications(Output.of(emailNotifications));
        }

        public Builder environments(@Nullable Output<List<GetJobJobSettingsSettingsEnvironmentArgs>> environments) {
            $.environments = environments;
            return this;
        }

        public Builder environments(List<GetJobJobSettingsSettingsEnvironmentArgs> environments) {
            return environments(Output.of(environments));
        }

        public Builder environments(GetJobJobSettingsSettingsEnvironmentArgs... environments) {
            return environments(List.of(environments));
        }

        public Builder existingClusterId(@Nullable Output<String> existingClusterId) {
            $.existingClusterId = existingClusterId;
            return this;
        }

        public Builder existingClusterId(String existingClusterId) {
            return existingClusterId(Output.of(existingClusterId));
        }

        public Builder format(Output<String> format) {
            $.format = format;
            return this;
        }

        public Builder format(String format) {
            return format(Output.of(format));
        }

        public Builder gitSource(@Nullable Output<GetJobJobSettingsSettingsGitSourceArgs> gitSource) {
            $.gitSource = gitSource;
            return this;
        }

        public Builder gitSource(GetJobJobSettingsSettingsGitSourceArgs gitSource) {
            return gitSource(Output.of(gitSource));
        }

        public Builder health(@Nullable Output<GetJobJobSettingsSettingsHealthArgs> health) {
            $.health = health;
            return this;
        }

        public Builder health(GetJobJobSettingsSettingsHealthArgs health) {
            return health(Output.of(health));
        }

        public Builder jobClusters(@Nullable Output<List<GetJobJobSettingsSettingsJobClusterArgs>> jobClusters) {
            $.jobClusters = jobClusters;
            return this;
        }

        public Builder jobClusters(List<GetJobJobSettingsSettingsJobClusterArgs> jobClusters) {
            return jobClusters(Output.of(jobClusters));
        }

        public Builder jobClusters(GetJobJobSettingsSettingsJobClusterArgs... jobClusters) {
            return jobClusters(List.of(jobClusters));
        }

        public Builder libraries(@Nullable Output<List<GetJobJobSettingsSettingsLibraryArgs>> libraries) {
            $.libraries = libraries;
            return this;
        }

        public Builder libraries(List<GetJobJobSettingsSettingsLibraryArgs> libraries) {
            return libraries(Output.of(libraries));
        }

        public Builder libraries(GetJobJobSettingsSettingsLibraryArgs... libraries) {
            return libraries(List.of(libraries));
        }

        public Builder maxConcurrentRuns(@Nullable Output<Integer> maxConcurrentRuns) {
            $.maxConcurrentRuns = maxConcurrentRuns;
            return this;
        }

        public Builder maxConcurrentRuns(Integer maxConcurrentRuns) {
            return maxConcurrentRuns(Output.of(maxConcurrentRuns));
        }

        public Builder maxRetries(@Nullable Output<Integer> maxRetries) {
            $.maxRetries = maxRetries;
            return this;
        }

        public Builder maxRetries(Integer maxRetries) {
            return maxRetries(Output.of(maxRetries));
        }

        public Builder minRetryIntervalMillis(@Nullable Output<Integer> minRetryIntervalMillis) {
            $.minRetryIntervalMillis = minRetryIntervalMillis;
            return this;
        }

        public Builder minRetryIntervalMillis(Integer minRetryIntervalMillis) {
            return minRetryIntervalMillis(Output.of(minRetryIntervalMillis));
        }

        /**
         * @param name the job name of databricks.Job if the resource was matched by id.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name the job name of databricks.Job if the resource was matched by id.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder newCluster(@Nullable Output<GetJobJobSettingsSettingsNewClusterArgs> newCluster) {
            $.newCluster = newCluster;
            return this;
        }

        public Builder newCluster(GetJobJobSettingsSettingsNewClusterArgs newCluster) {
            return newCluster(Output.of(newCluster));
        }

        public Builder notebookTask(@Nullable Output<GetJobJobSettingsSettingsNotebookTaskArgs> notebookTask) {
            $.notebookTask = notebookTask;
            return this;
        }

        public Builder notebookTask(GetJobJobSettingsSettingsNotebookTaskArgs notebookTask) {
            return notebookTask(Output.of(notebookTask));
        }

        public Builder notificationSettings(@Nullable Output<GetJobJobSettingsSettingsNotificationSettingsArgs> notificationSettings) {
            $.notificationSettings = notificationSettings;
            return this;
        }

        public Builder notificationSettings(GetJobJobSettingsSettingsNotificationSettingsArgs notificationSettings) {
            return notificationSettings(Output.of(notificationSettings));
        }

        public Builder parameters(@Nullable Output<List<GetJobJobSettingsSettingsParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(List<GetJobJobSettingsSettingsParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder parameters(GetJobJobSettingsSettingsParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        public Builder pipelineTask(@Nullable Output<GetJobJobSettingsSettingsPipelineTaskArgs> pipelineTask) {
            $.pipelineTask = pipelineTask;
            return this;
        }

        public Builder pipelineTask(GetJobJobSettingsSettingsPipelineTaskArgs pipelineTask) {
            return pipelineTask(Output.of(pipelineTask));
        }

        public Builder pythonWheelTask(@Nullable Output<GetJobJobSettingsSettingsPythonWheelTaskArgs> pythonWheelTask) {
            $.pythonWheelTask = pythonWheelTask;
            return this;
        }

        public Builder pythonWheelTask(GetJobJobSettingsSettingsPythonWheelTaskArgs pythonWheelTask) {
            return pythonWheelTask(Output.of(pythonWheelTask));
        }

        public Builder queue(@Nullable Output<GetJobJobSettingsSettingsQueueArgs> queue) {
            $.queue = queue;
            return this;
        }

        public Builder queue(GetJobJobSettingsSettingsQueueArgs queue) {
            return queue(Output.of(queue));
        }

        public Builder retryOnTimeout(@Nullable Output<Boolean> retryOnTimeout) {
            $.retryOnTimeout = retryOnTimeout;
            return this;
        }

        public Builder retryOnTimeout(Boolean retryOnTimeout) {
            return retryOnTimeout(Output.of(retryOnTimeout));
        }

        public Builder runAs(Output<GetJobJobSettingsSettingsRunAsArgs> runAs) {
            $.runAs = runAs;
            return this;
        }

        public Builder runAs(GetJobJobSettingsSettingsRunAsArgs runAs) {
            return runAs(Output.of(runAs));
        }

        public Builder runJobTask(@Nullable Output<GetJobJobSettingsSettingsRunJobTaskArgs> runJobTask) {
            $.runJobTask = runJobTask;
            return this;
        }

        public Builder runJobTask(GetJobJobSettingsSettingsRunJobTaskArgs runJobTask) {
            return runJobTask(Output.of(runJobTask));
        }

        public Builder schedule(@Nullable Output<GetJobJobSettingsSettingsScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        public Builder schedule(GetJobJobSettingsSettingsScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        public Builder sparkJarTask(@Nullable Output<GetJobJobSettingsSettingsSparkJarTaskArgs> sparkJarTask) {
            $.sparkJarTask = sparkJarTask;
            return this;
        }

        public Builder sparkJarTask(GetJobJobSettingsSettingsSparkJarTaskArgs sparkJarTask) {
            return sparkJarTask(Output.of(sparkJarTask));
        }

        public Builder sparkPythonTask(@Nullable Output<GetJobJobSettingsSettingsSparkPythonTaskArgs> sparkPythonTask) {
            $.sparkPythonTask = sparkPythonTask;
            return this;
        }

        public Builder sparkPythonTask(GetJobJobSettingsSettingsSparkPythonTaskArgs sparkPythonTask) {
            return sparkPythonTask(Output.of(sparkPythonTask));
        }

        public Builder sparkSubmitTask(@Nullable Output<GetJobJobSettingsSettingsSparkSubmitTaskArgs> sparkSubmitTask) {
            $.sparkSubmitTask = sparkSubmitTask;
            return this;
        }

        public Builder sparkSubmitTask(GetJobJobSettingsSettingsSparkSubmitTaskArgs sparkSubmitTask) {
            return sparkSubmitTask(Output.of(sparkSubmitTask));
        }

        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        public Builder tasks(@Nullable Output<List<GetJobJobSettingsSettingsTaskArgs>> tasks) {
            $.tasks = tasks;
            return this;
        }

        public Builder tasks(List<GetJobJobSettingsSettingsTaskArgs> tasks) {
            return tasks(Output.of(tasks));
        }

        public Builder tasks(GetJobJobSettingsSettingsTaskArgs... tasks) {
            return tasks(List.of(tasks));
        }

        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder timeoutSeconds(Integer timeoutSeconds) {
            return timeoutSeconds(Output.of(timeoutSeconds));
        }

        public Builder trigger(@Nullable Output<GetJobJobSettingsSettingsTriggerArgs> trigger) {
            $.trigger = trigger;
            return this;
        }

        public Builder trigger(GetJobJobSettingsSettingsTriggerArgs trigger) {
            return trigger(Output.of(trigger));
        }

        public Builder webhookNotifications(@Nullable Output<GetJobJobSettingsSettingsWebhookNotificationsArgs> webhookNotifications) {
            $.webhookNotifications = webhookNotifications;
            return this;
        }

        public Builder webhookNotifications(GetJobJobSettingsSettingsWebhookNotificationsArgs webhookNotifications) {
            return webhookNotifications(Output.of(webhookNotifications));
        }

        public GetJobJobSettingsSettingsArgs build() {
            if ($.format == null) {
                throw new MissingRequiredPropertyException("GetJobJobSettingsSettingsArgs", "format");
            }
            if ($.runAs == null) {
                throw new MissingRequiredPropertyException("GetJobJobSettingsSettingsArgs", "runAs");
            }
            return $;
        }
    }

}
