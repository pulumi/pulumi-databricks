// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatus;
import com.pulumi.databricks.outputs.GetDatabaseSyncedDatabaseTablesSyncedTableSpec;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseSyncedDatabaseTablesSyncedTable {
    /**
     * @return (SyncedTableStatus) - Synced Table data synchronization status
     * 
     */
    private GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatus dataSynchronizationStatus;
    /**
     * @return (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
     * This is optional when creating synced database tables in registered catalogs. If this field is specified
     * when creating synced database tables in registered catalogs, the database instance name MUST
     * match that of the registered catalog (or the request will be rejected)
     * 
     */
    private String databaseInstanceName;
    /**
     * @return (string) - The name of the database instance that this table is registered to. This field is always returned, and for
     * tables inside database catalogs is inferred database instance associated with the catalog
     * 
     */
    private String effectiveDatabaseInstanceName;
    /**
     * @return (string) - The name of the logical database that this table is registered to
     * 
     */
    private String effectiveLogicalDatabaseName;
    /**
     * @return (string) - Target Postgres database object (logical database) name for this table.
     * 
     */
    private String logicalDatabaseName;
    /**
     * @return (string) - Full three-part (catalog, schema, table) name of the table
     * 
     */
    private String name;
    /**
     * @return (SyncedTableSpec)
     * 
     */
    private @Nullable GetDatabaseSyncedDatabaseTablesSyncedTableSpec spec;
    /**
     * @return (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
     * state of the data synchronization pipeline (i.e. the table may be in &#34;ACTIVE&#34; but the pipeline
     * may be in &#34;PROVISIONING&#34; as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
     * 
     */
    private String unityCatalogProvisioningState;

    private GetDatabaseSyncedDatabaseTablesSyncedTable() {}
    /**
     * @return (SyncedTableStatus) - Synced Table data synchronization status
     * 
     */
    public GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatus dataSynchronizationStatus() {
        return this.dataSynchronizationStatus;
    }
    /**
     * @return (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
     * This is optional when creating synced database tables in registered catalogs. If this field is specified
     * when creating synced database tables in registered catalogs, the database instance name MUST
     * match that of the registered catalog (or the request will be rejected)
     * 
     */
    public String databaseInstanceName() {
        return this.databaseInstanceName;
    }
    /**
     * @return (string) - The name of the database instance that this table is registered to. This field is always returned, and for
     * tables inside database catalogs is inferred database instance associated with the catalog
     * 
     */
    public String effectiveDatabaseInstanceName() {
        return this.effectiveDatabaseInstanceName;
    }
    /**
     * @return (string) - The name of the logical database that this table is registered to
     * 
     */
    public String effectiveLogicalDatabaseName() {
        return this.effectiveLogicalDatabaseName;
    }
    /**
     * @return (string) - Target Postgres database object (logical database) name for this table.
     * 
     */
    public String logicalDatabaseName() {
        return this.logicalDatabaseName;
    }
    /**
     * @return (string) - Full three-part (catalog, schema, table) name of the table
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (SyncedTableSpec)
     * 
     */
    public Optional<GetDatabaseSyncedDatabaseTablesSyncedTableSpec> spec() {
        return Optional.ofNullable(this.spec);
    }
    /**
     * @return (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
     * state of the data synchronization pipeline (i.e. the table may be in &#34;ACTIVE&#34; but the pipeline
     * may be in &#34;PROVISIONING&#34; as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
     * 
     */
    public String unityCatalogProvisioningState() {
        return this.unityCatalogProvisioningState;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseSyncedDatabaseTablesSyncedTable defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatus dataSynchronizationStatus;
        private String databaseInstanceName;
        private String effectiveDatabaseInstanceName;
        private String effectiveLogicalDatabaseName;
        private String logicalDatabaseName;
        private String name;
        private @Nullable GetDatabaseSyncedDatabaseTablesSyncedTableSpec spec;
        private String unityCatalogProvisioningState;
        public Builder() {}
        public Builder(GetDatabaseSyncedDatabaseTablesSyncedTable defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataSynchronizationStatus = defaults.dataSynchronizationStatus;
    	      this.databaseInstanceName = defaults.databaseInstanceName;
    	      this.effectiveDatabaseInstanceName = defaults.effectiveDatabaseInstanceName;
    	      this.effectiveLogicalDatabaseName = defaults.effectiveLogicalDatabaseName;
    	      this.logicalDatabaseName = defaults.logicalDatabaseName;
    	      this.name = defaults.name;
    	      this.spec = defaults.spec;
    	      this.unityCatalogProvisioningState = defaults.unityCatalogProvisioningState;
        }

        @CustomType.Setter
        public Builder dataSynchronizationStatus(GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatus dataSynchronizationStatus) {
            if (dataSynchronizationStatus == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTablesSyncedTable", "dataSynchronizationStatus");
            }
            this.dataSynchronizationStatus = dataSynchronizationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder databaseInstanceName(String databaseInstanceName) {
            if (databaseInstanceName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTablesSyncedTable", "databaseInstanceName");
            }
            this.databaseInstanceName = databaseInstanceName;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveDatabaseInstanceName(String effectiveDatabaseInstanceName) {
            if (effectiveDatabaseInstanceName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTablesSyncedTable", "effectiveDatabaseInstanceName");
            }
            this.effectiveDatabaseInstanceName = effectiveDatabaseInstanceName;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLogicalDatabaseName(String effectiveLogicalDatabaseName) {
            if (effectiveLogicalDatabaseName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTablesSyncedTable", "effectiveLogicalDatabaseName");
            }
            this.effectiveLogicalDatabaseName = effectiveLogicalDatabaseName;
            return this;
        }
        @CustomType.Setter
        public Builder logicalDatabaseName(String logicalDatabaseName) {
            if (logicalDatabaseName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTablesSyncedTable", "logicalDatabaseName");
            }
            this.logicalDatabaseName = logicalDatabaseName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTablesSyncedTable", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder spec(@Nullable GetDatabaseSyncedDatabaseTablesSyncedTableSpec spec) {

            this.spec = spec;
            return this;
        }
        @CustomType.Setter
        public Builder unityCatalogProvisioningState(String unityCatalogProvisioningState) {
            if (unityCatalogProvisioningState == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTablesSyncedTable", "unityCatalogProvisioningState");
            }
            this.unityCatalogProvisioningState = unityCatalogProvisioningState;
            return this;
        }
        public GetDatabaseSyncedDatabaseTablesSyncedTable build() {
            final var _resultValue = new GetDatabaseSyncedDatabaseTablesSyncedTable();
            _resultValue.dataSynchronizationStatus = dataSynchronizationStatus;
            _resultValue.databaseInstanceName = databaseInstanceName;
            _resultValue.effectiveDatabaseInstanceName = effectiveDatabaseInstanceName;
            _resultValue.effectiveLogicalDatabaseName = effectiveLogicalDatabaseName;
            _resultValue.logicalDatabaseName = logicalDatabaseName;
            _resultValue.name = name;
            _resultValue.spec = spec;
            _resultValue.unityCatalogProvisioningState = unityCatalogProvisioningState;
            return _resultValue;
        }
    }
}
