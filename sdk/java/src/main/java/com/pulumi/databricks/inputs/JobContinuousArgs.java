// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobContinuousArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobContinuousArgs Empty = new JobContinuousArgs();

    /**
     * Indicate whether this continuous job is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pause_status` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pause_status`.
     * 
     */
    @Import(name="pauseStatus")
    private @Nullable Output<String> pauseStatus;

    /**
     * @return Indicate whether this continuous job is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pause_status` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pause_status`.
     * 
     */
    public Optional<Output<String>> pauseStatus() {
        return Optional.ofNullable(this.pauseStatus);
    }

    /**
     * Controls task level retry behaviour. Allowed values are:
     * * `NEVER` (default): The failed task will not be retried.
     * * `ON_FAILURE`: Retry a failed task if at least one other task in the job is still running its first attempt. When this condition is no longer met or the retry limit is reached, the job run is cancelled and a new run is started.
     * 
     */
    @Import(name="taskRetryMode")
    private @Nullable Output<String> taskRetryMode;

    /**
     * @return Controls task level retry behaviour. Allowed values are:
     * * `NEVER` (default): The failed task will not be retried.
     * * `ON_FAILURE`: Retry a failed task if at least one other task in the job is still running its first attempt. When this condition is no longer met or the retry limit is reached, the job run is cancelled and a new run is started.
     * 
     */
    public Optional<Output<String>> taskRetryMode() {
        return Optional.ofNullable(this.taskRetryMode);
    }

    private JobContinuousArgs() {}

    private JobContinuousArgs(JobContinuousArgs $) {
        this.pauseStatus = $.pauseStatus;
        this.taskRetryMode = $.taskRetryMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobContinuousArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobContinuousArgs $;

        public Builder() {
            $ = new JobContinuousArgs();
        }

        public Builder(JobContinuousArgs defaults) {
            $ = new JobContinuousArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param pauseStatus Indicate whether this continuous job is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pause_status` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pause_status`.
         * 
         * @return builder
         * 
         */
        public Builder pauseStatus(@Nullable Output<String> pauseStatus) {
            $.pauseStatus = pauseStatus;
            return this;
        }

        /**
         * @param pauseStatus Indicate whether this continuous job is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pause_status` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pause_status`.
         * 
         * @return builder
         * 
         */
        public Builder pauseStatus(String pauseStatus) {
            return pauseStatus(Output.of(pauseStatus));
        }

        /**
         * @param taskRetryMode Controls task level retry behaviour. Allowed values are:
         * * `NEVER` (default): The failed task will not be retried.
         * * `ON_FAILURE`: Retry a failed task if at least one other task in the job is still running its first attempt. When this condition is no longer met or the retry limit is reached, the job run is cancelled and a new run is started.
         * 
         * @return builder
         * 
         */
        public Builder taskRetryMode(@Nullable Output<String> taskRetryMode) {
            $.taskRetryMode = taskRetryMode;
            return this;
        }

        /**
         * @param taskRetryMode Controls task level retry behaviour. Allowed values are:
         * * `NEVER` (default): The failed task will not be retried.
         * * `ON_FAILURE`: Retry a failed task if at least one other task in the job is still running its first attempt. When this condition is no longer met or the retry limit is reached, the job run is cancelled and a new run is started.
         * 
         * @return builder
         * 
         */
        public Builder taskRetryMode(String taskRetryMode) {
            return taskRetryMode(Output.of(taskRetryMode));
        }

        public JobContinuousArgs build() {
            return $;
        }
    }

}
