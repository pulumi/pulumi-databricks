// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.CatalogArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.CatalogState;
import com.pulumi.databricks.outputs.CatalogEffectivePredictiveOptimizationFlag;
import com.pulumi.databricks.outputs.CatalogProvisioningInfo;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Within a metastore, Unity Catalog provides a 3-level namespace for organizing data: Catalogs, Databases (also called Schemas), and Tables / Views.
 * 
 * A `databricks.Catalog` is contained within databricks.Metastore and can contain databricks_schema. By default, Databricks creates `default` schema for every new catalog, but Pulumi plugin is removing this auto-created schema, so that resource destruction could be done in a clean way.
 * 
 * &gt; This resource can only be used with a workspace-level provider!
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.Catalog;
 * import com.pulumi.databricks.CatalogArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sandbox = new Catalog("sandbox", CatalogArgs.builder()
 *             .name("sandbox")
 *             .comment("this catalog is managed by terraform")
 *             .properties(Map.of("purpose", "testing"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Related Resources
 * 
 * The following resources are used in the same context:
 * 
 * * databricks.getTables data to list tables within Unity Catalog.
 * * databricks.getSchemas data to list schemas within Unity Catalog.
 * * databricks.getCatalogs data to list catalogs within Unity Catalog.
 * 
 * ## Import
 * 
 * This resource can be imported by name:
 * 
 * hcl
 * 
 * import {
 * 
 *   to = databricks_catalog.this
 * 
 *   id = &#34;&lt;name&gt;&#34;
 * 
 * }
 * 
 * Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import databricks:index/catalog:Catalog this &lt;name&gt;
 * ```
 * 
 */
@ResourceType(type="databricks:index/catalog:Catalog")
public class Catalog extends com.pulumi.resources.CustomResource {
    @Export(name="browseOnly", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> browseOnly;

    public Output<Optional<Boolean>> browseOnly() {
        return Codegen.optional(this.browseOnly);
    }
    @Export(name="catalogType", refs={String.class}, tree="[0]")
    private Output<String> catalogType;

    public Output<String> catalogType() {
        return this.catalogType;
    }
    /**
     * User-supplied free-form text.
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return User-supplied free-form text.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * For Foreign Catalogs: the name of the connection to an external data source. Changes forces creation of a new resource.
     * 
     */
    @Export(name="connectionName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> connectionName;

    /**
     * @return For Foreign Catalogs: the name of the connection to an external data source. Changes forces creation of a new resource.
     * 
     */
    public Output<Optional<String>> connectionName() {
        return Codegen.optional(this.connectionName);
    }
    @Export(name="createdAt", refs={Integer.class}, tree="[0]")
    private Output<Integer> createdAt;

    public Output<Integer> createdAt() {
        return this.createdAt;
    }
    @Export(name="createdBy", refs={String.class}, tree="[0]")
    private Output<String> createdBy;

    public Output<String> createdBy() {
        return this.createdBy;
    }
    @Export(name="effectivePredictiveOptimizationFlag", refs={CatalogEffectivePredictiveOptimizationFlag.class}, tree="[0]")
    private Output<CatalogEffectivePredictiveOptimizationFlag> effectivePredictiveOptimizationFlag;

    public Output<CatalogEffectivePredictiveOptimizationFlag> effectivePredictiveOptimizationFlag() {
        return this.effectivePredictiveOptimizationFlag;
    }
    /**
     * Whether predictive optimization should be enabled for this object and objects under it. Can be `ENABLE`, `DISABLE` or `INHERIT`
     * 
     */
    @Export(name="enablePredictiveOptimization", refs={String.class}, tree="[0]")
    private Output<String> enablePredictiveOptimization;

    /**
     * @return Whether predictive optimization should be enabled for this object and objects under it. Can be `ENABLE`, `DISABLE` or `INHERIT`
     * 
     */
    public Output<String> enablePredictiveOptimization() {
        return this.enablePredictiveOptimization;
    }
    /**
     * Delete catalog regardless of its contents.
     * 
     */
    @Export(name="forceDestroy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceDestroy;

    /**
     * @return Delete catalog regardless of its contents.
     * 
     */
    public Output<Optional<Boolean>> forceDestroy() {
        return Codegen.optional(this.forceDestroy);
    }
    @Export(name="fullName", refs={String.class}, tree="[0]")
    private Output<String> fullName;

    public Output<String> fullName() {
        return this.fullName;
    }
    /**
     * Whether the catalog is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATED` or `OPEN`. Setting the catalog to `ISOLATED` will automatically allow access from the current workspace.
     * 
     */
    @Export(name="isolationMode", refs={String.class}, tree="[0]")
    private Output<String> isolationMode;

    /**
     * @return Whether the catalog is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATED` or `OPEN`. Setting the catalog to `ISOLATED` will automatically allow access from the current workspace.
     * 
     */
    public Output<String> isolationMode() {
        return this.isolationMode;
    }
    /**
     * ID of the parent metastore.
     * 
     */
    @Export(name="metastoreId", refs={String.class}, tree="[0]")
    private Output<String> metastoreId;

    /**
     * @return ID of the parent metastore.
     * 
     */
    public Output<String> metastoreId() {
        return this.metastoreId;
    }
    /**
     * Name of Catalog relative to parent metastore.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of Catalog relative to parent metastore.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * For Foreign Catalogs: the name of the entity from an external data source that maps to a catalog. For example, the database name in a PostgreSQL server.
     * 
     */
    @Export(name="options", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> options;

    /**
     * @return For Foreign Catalogs: the name of the entity from an external data source that maps to a catalog. For example, the database name in a PostgreSQL server.
     * 
     */
    public Output<Optional<Map<String,String>>> options() {
        return Codegen.optional(this.options);
    }
    /**
     * Username/groupname/sp applicationId of the catalog owner.
     * 
     */
    @Export(name="owner", refs={String.class}, tree="[0]")
    private Output<String> owner;

    /**
     * @return Username/groupname/sp applicationId of the catalog owner.
     * 
     */
    public Output<String> owner() {
        return this.owner;
    }
    /**
     * Extensible Catalog properties.
     * 
     */
    @Export(name="properties", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> properties;

    /**
     * @return Extensible Catalog properties.
     * 
     */
    public Output<Optional<Map<String,String>>> properties() {
        return Codegen.optional(this.properties);
    }
    /**
     * For Delta Sharing Catalogs: the name of the delta sharing provider. Change forces creation of a new resource.
     * 
     */
    @Export(name="providerName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> providerName;

    /**
     * @return For Delta Sharing Catalogs: the name of the delta sharing provider. Change forces creation of a new resource.
     * 
     */
    public Output<Optional<String>> providerName() {
        return Codegen.optional(this.providerName);
    }
    @Export(name="provisioningInfo", refs={CatalogProvisioningInfo.class}, tree="[0]")
    private Output</* @Nullable */ CatalogProvisioningInfo> provisioningInfo;

    public Output<Optional<CatalogProvisioningInfo>> provisioningInfo() {
        return Codegen.optional(this.provisioningInfo);
    }
    @Export(name="securableType", refs={String.class}, tree="[0]")
    private Output<String> securableType;

    public Output<String> securableType() {
        return this.securableType;
    }
    /**
     * For Delta Sharing Catalogs: the name of the share under the share provider. Change forces creation of a new resource.
     * 
     */
    @Export(name="shareName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> shareName;

    /**
     * @return For Delta Sharing Catalogs: the name of the share under the share provider. Change forces creation of a new resource.
     * 
     */
    public Output<Optional<String>> shareName() {
        return Codegen.optional(this.shareName);
    }
    @Export(name="storageLocation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> storageLocation;

    public Output<Optional<String>> storageLocation() {
        return Codegen.optional(this.storageLocation);
    }
    /**
     * Managed location of the catalog. Location in cloud storage where data for managed tables will be stored. If not specified, the location will default to the metastore root location. Change forces creation of a new resource.
     * 
     */
    @Export(name="storageRoot", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> storageRoot;

    /**
     * @return Managed location of the catalog. Location in cloud storage where data for managed tables will be stored. If not specified, the location will default to the metastore root location. Change forces creation of a new resource.
     * 
     */
    public Output<Optional<String>> storageRoot() {
        return Codegen.optional(this.storageRoot);
    }
    @Export(name="updatedAt", refs={Integer.class}, tree="[0]")
    private Output<Integer> updatedAt;

    public Output<Integer> updatedAt() {
        return this.updatedAt;
    }
    @Export(name="updatedBy", refs={String.class}, tree="[0]")
    private Output<String> updatedBy;

    public Output<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Catalog(java.lang.String name) {
        this(name, CatalogArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Catalog(java.lang.String name, @Nullable CatalogArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Catalog(java.lang.String name, @Nullable CatalogArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/catalog:Catalog", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Catalog(java.lang.String name, Output<java.lang.String> id, @Nullable CatalogState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/catalog:Catalog", name, state, makeResourceOptions(options, id), false);
    }

    private static CatalogArgs makeArgs(@Nullable CatalogArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CatalogArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Catalog get(java.lang.String name, Output<java.lang.String> id, @Nullable CatalogState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Catalog(name, id, state, options);
    }
}
