// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.PermissionAssignmentArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.PermissionAssignmentState;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * This resource is used to assign account-level users, service principals and groups to a Databricks workspace. To configure additional entitlements such as cluster creation, please use databricks.Entitlements
 * 
 * &gt; This resource can only be used with a workspace-level provider!
 * 
 * ## Example Usage
 * 
 * In workspace context, adding account-level user to a workspace:
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.DatabricksFunctions;
 * import com.pulumi.databricks.inputs.GetUserArgs;
 * import com.pulumi.databricks.PermissionAssignment;
 * import com.pulumi.databricks.PermissionAssignmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         // Use the account provider
 *         final var me = DatabricksFunctions.getUser(GetUserArgs.builder()
 *             .userName("me}{@literal @}{@code example.com")
 *             .build());
 * 
 *         var addUser = new PermissionAssignment("addUser", PermissionAssignmentArgs.builder()
 *             .principalId(me.id())
 *             .permissions("USER")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * In workspace context, adding account-level service principal to a workspace:
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.DatabricksFunctions;
 * import com.pulumi.databricks.inputs.GetServicePrincipalArgs;
 * import com.pulumi.databricks.PermissionAssignment;
 * import com.pulumi.databricks.PermissionAssignmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Use the account provider
 *         final var sp = DatabricksFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
 *             .displayName("Automation-only SP")
 *             .build());
 * 
 *         var addAdminSpn = new PermissionAssignment("addAdminSpn", PermissionAssignmentArgs.builder()
 *             .principalId(sp.id())
 *             .permissions("ADMIN")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * In workspace context, adding account-level group to a workspace:
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.DatabricksFunctions;
 * import com.pulumi.databricks.inputs.GetGroupArgs;
 * import com.pulumi.databricks.PermissionAssignment;
 * import com.pulumi.databricks.PermissionAssignmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Use the account provider
 *         final var accountLevel = DatabricksFunctions.getGroup(GetGroupArgs.builder()
 *             .displayName("example-group")
 *             .build());
 * 
 *         // Use the workspace provider
 *         var this_ = new PermissionAssignment("this", PermissionAssignmentArgs.builder()
 *             .principalId(accountLevel.id())
 *             .permissions("USER")
 *             .build());
 * 
 *         final var workspaceLevel = DatabricksFunctions.getGroup(GetGroupArgs.builder()
 *             .displayName("example-group")
 *             .build());
 * 
 *         ctx.export("databricksGroupId", workspaceLevel.id());
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Related Resources
 * 
 * The following resources are used in the same context:
 * 
 * * databricks.Group to manage [Account-level](https://docs.databricks.com/aws/en/admin/users-groups/groups) or [Workspace-level](https://docs.databricks.com/aws/en/admin/users-groups/workspace-local-groups) groups.
 * * databricks.Group data to retrieve information about databricks.Group members, entitlements and instance profiles.
 * * databricks.GroupMember to attach users and groups as group members.
 * * databricks.MwsPermissionAssignment to manage permission assignment from an account context
 * 
 * ## Import
 * 
 * The resource `databricks_permission_assignment` can be imported using the principal id:
 * 
 * hcl
 * 
 * import {
 * 
 *   to = databricks_permission_assignment.this
 * 
 *   id = &#34;&lt;principal_id&gt;&#34;
 * 
 * }
 * 
 * Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import databricks:index/permissionAssignment:PermissionAssignment this &#34;&lt;principal_id&gt;&#34;
 * ```
 * 
 */
@ResourceType(type="databricks:index/permissionAssignment:PermissionAssignment")
public class PermissionAssignment extends com.pulumi.resources.CustomResource {
    /**
     * The list of workspace permissions to assign to the principal:
     * * `&#34;USER&#34;` - Adds principal to the workspace `users` group. This gives basic workspace access.
     * * `&#34;ADMIN&#34;` - Adds principal to the workspace `admins` group. This gives workspace admin privileges to manage users and groups, workspace configurations, and more.
     * 
     */
    @Export(name="permissions", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> permissions;

    /**
     * @return The list of workspace permissions to assign to the principal:
     * * `&#34;USER&#34;` - Adds principal to the workspace `users` group. This gives basic workspace access.
     * * `&#34;ADMIN&#34;` - Adds principal to the workspace `admins` group. This gives workspace admin privileges to manage users and groups, workspace configurations, and more.
     * 
     */
    public Output<List<String>> permissions() {
        return this.permissions;
    }
    /**
     * Databricks ID of the user, service principal, or group. The principal ID can be retrieved using the account-level SCIM API, or using databricks_user, databricks.ServicePrincipal or databricks.Group data sources with account API (and has to be an account admin). A more sensible approach is to retrieve the list of `principal_id` as outputs from another Pulumi stack.
     * 
     */
    @Export(name="principalId", refs={String.class}, tree="[0]")
    private Output<String> principalId;

    /**
     * @return Databricks ID of the user, service principal, or group. The principal ID can be retrieved using the account-level SCIM API, or using databricks_user, databricks.ServicePrincipal or databricks.Group data sources with account API (and has to be an account admin). A more sensible approach is to retrieve the list of `principal_id` as outputs from another Pulumi stack.
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PermissionAssignment(java.lang.String name) {
        this(name, PermissionAssignmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PermissionAssignment(java.lang.String name, PermissionAssignmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PermissionAssignment(java.lang.String name, PermissionAssignmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/permissionAssignment:PermissionAssignment", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private PermissionAssignment(java.lang.String name, Output<java.lang.String> id, @Nullable PermissionAssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/permissionAssignment:PermissionAssignment", name, state, makeResourceOptions(options, id), false);
    }

    private static PermissionAssignmentArgs makeArgs(PermissionAssignmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PermissionAssignmentArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PermissionAssignment get(java.lang.String name, Output<java.lang.String> id, @Nullable PermissionAssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PermissionAssignment(name, id, state, options);
    }
}
