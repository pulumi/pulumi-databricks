// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseDatabaseCatalogArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseDatabaseCatalogArgs Empty = new DatabaseDatabaseCatalogArgs();

    @Import(name="createDatabaseIfNotExists")
    private @Nullable Output<Boolean> createDatabaseIfNotExists;

    public Optional<Output<Boolean>> createDatabaseIfNotExists() {
        return Optional.ofNullable(this.createDatabaseIfNotExists);
    }

    /**
     * The name of the DatabaseInstance housing the database
     * 
     */
    @Import(name="databaseInstanceName", required=true)
    private Output<String> databaseInstanceName;

    /**
     * @return The name of the DatabaseInstance housing the database
     * 
     */
    public Output<String> databaseInstanceName() {
        return this.databaseInstanceName;
    }

    /**
     * The name of the database (in a instance) associated with the catalog
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return The name of the database (in a instance) associated with the catalog
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The name of the catalog in UC
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the catalog in UC
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Workspace ID of the resource
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private DatabaseDatabaseCatalogArgs() {}

    private DatabaseDatabaseCatalogArgs(DatabaseDatabaseCatalogArgs $) {
        this.createDatabaseIfNotExists = $.createDatabaseIfNotExists;
        this.databaseInstanceName = $.databaseInstanceName;
        this.databaseName = $.databaseName;
        this.name = $.name;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseDatabaseCatalogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseDatabaseCatalogArgs $;

        public Builder() {
            $ = new DatabaseDatabaseCatalogArgs();
        }

        public Builder(DatabaseDatabaseCatalogArgs defaults) {
            $ = new DatabaseDatabaseCatalogArgs(Objects.requireNonNull(defaults));
        }

        public Builder createDatabaseIfNotExists(@Nullable Output<Boolean> createDatabaseIfNotExists) {
            $.createDatabaseIfNotExists = createDatabaseIfNotExists;
            return this;
        }

        public Builder createDatabaseIfNotExists(Boolean createDatabaseIfNotExists) {
            return createDatabaseIfNotExists(Output.of(createDatabaseIfNotExists));
        }

        /**
         * @param databaseInstanceName The name of the DatabaseInstance housing the database
         * 
         * @return builder
         * 
         */
        public Builder databaseInstanceName(Output<String> databaseInstanceName) {
            $.databaseInstanceName = databaseInstanceName;
            return this;
        }

        /**
         * @param databaseInstanceName The name of the DatabaseInstance housing the database
         * 
         * @return builder
         * 
         */
        public Builder databaseInstanceName(String databaseInstanceName) {
            return databaseInstanceName(Output.of(databaseInstanceName));
        }

        /**
         * @param databaseName The name of the database (in a instance) associated with the catalog
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of the database (in a instance) associated with the catalog
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param name The name of the catalog in UC
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the catalog in UC
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public DatabaseDatabaseCatalogArgs build() {
            if ($.databaseInstanceName == null) {
                throw new MissingRequiredPropertyException("DatabaseDatabaseCatalogArgs", "databaseInstanceName");
            }
            if ($.databaseName == null) {
                throw new MissingRequiredPropertyException("DatabaseDatabaseCatalogArgs", "databaseName");
            }
            return $;
        }
    }

}
