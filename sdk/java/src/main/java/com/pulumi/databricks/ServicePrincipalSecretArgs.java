// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServicePrincipalSecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServicePrincipalSecretArgs Empty = new ServicePrincipalSecretArgs();

    /**
     * Generated secret for the service principal
     * 
     */
    @Import(name="secret")
    private @Nullable Output<String> secret;

    /**
     * @return Generated secret for the service principal
     * 
     */
    public Optional<Output<String>> secret() {
        return Optional.ofNullable(this.secret);
    }

    /**
     * ID of the databricks.ServicePrincipal (not application ID).
     * 
     */
    @Import(name="servicePrincipalId", required=true)
    private Output<String> servicePrincipalId;

    /**
     * @return ID of the databricks.ServicePrincipal (not application ID).
     * 
     */
    public Output<String> servicePrincipalId() {
        return this.servicePrincipalId;
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ServicePrincipalSecretArgs() {}

    private ServicePrincipalSecretArgs(ServicePrincipalSecretArgs $) {
        this.secret = $.secret;
        this.servicePrincipalId = $.servicePrincipalId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServicePrincipalSecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServicePrincipalSecretArgs $;

        public Builder() {
            $ = new ServicePrincipalSecretArgs();
        }

        public Builder(ServicePrincipalSecretArgs defaults) {
            $ = new ServicePrincipalSecretArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param secret Generated secret for the service principal
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret Generated secret for the service principal
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        /**
         * @param servicePrincipalId ID of the databricks.ServicePrincipal (not application ID).
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalId(Output<String> servicePrincipalId) {
            $.servicePrincipalId = servicePrincipalId;
            return this;
        }

        /**
         * @param servicePrincipalId ID of the databricks.ServicePrincipal (not application ID).
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalId(String servicePrincipalId) {
            return servicePrincipalId(Output.of(servicePrincipalId));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ServicePrincipalSecretArgs build() {
            if ($.servicePrincipalId == null) {
                throw new MissingRequiredPropertyException("ServicePrincipalSecretArgs", "servicePrincipalId");
            }
            return $;
        }
    }

}
