// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SqlAlertOptions {
    /**
     * @return Name of column in the query result to compare in alert evaluation.
     * 
     */
    private String column;
    /**
     * @return Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/sql/user/alerts/index.html) for custom templating instructions.
     * 
     */
    private @Nullable String customBody;
    /**
     * @return Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/sql/user/alerts/index.html) for custom templating instructions.
     * 
     */
    private @Nullable String customSubject;
    /**
     * @return State that alert evaluates to when query result is empty.  Currently supported values are `unknown`, `triggered`, `ok` - check [API documentation](https://docs.databricks.com/api/workspace/alerts/create) for full list of supported values.
     * 
     */
    private @Nullable String emptyResultState;
    /**
     * @return Whether or not the alert is muted. If an alert is muted, it will not notify users and alert destinations when triggered.
     * 
     */
    private @Nullable Boolean muted;
    /**
     * @return Operator used to compare in alert evaluation. (Enum: `&gt;`, `&gt;=`, `&lt;`, `&lt;=`, `==`, `!=`)
     * 
     */
    private String op;
    /**
     * @return Value used to compare in alert evaluation.
     * 
     */
    private String value;

    private SqlAlertOptions() {}
    /**
     * @return Name of column in the query result to compare in alert evaluation.
     * 
     */
    public String column() {
        return this.column;
    }
    /**
     * @return Custom body of alert notification, if it exists. See [Alerts API reference](https://docs.databricks.com/sql/user/alerts/index.html) for custom templating instructions.
     * 
     */
    public Optional<String> customBody() {
        return Optional.ofNullable(this.customBody);
    }
    /**
     * @return Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See [Alerts API reference](https://docs.databricks.com/sql/user/alerts/index.html) for custom templating instructions.
     * 
     */
    public Optional<String> customSubject() {
        return Optional.ofNullable(this.customSubject);
    }
    /**
     * @return State that alert evaluates to when query result is empty.  Currently supported values are `unknown`, `triggered`, `ok` - check [API documentation](https://docs.databricks.com/api/workspace/alerts/create) for full list of supported values.
     * 
     */
    public Optional<String> emptyResultState() {
        return Optional.ofNullable(this.emptyResultState);
    }
    /**
     * @return Whether or not the alert is muted. If an alert is muted, it will not notify users and alert destinations when triggered.
     * 
     */
    public Optional<Boolean> muted() {
        return Optional.ofNullable(this.muted);
    }
    /**
     * @return Operator used to compare in alert evaluation. (Enum: `&gt;`, `&gt;=`, `&lt;`, `&lt;=`, `==`, `!=`)
     * 
     */
    public String op() {
        return this.op;
    }
    /**
     * @return Value used to compare in alert evaluation.
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlAlertOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String column;
        private @Nullable String customBody;
        private @Nullable String customSubject;
        private @Nullable String emptyResultState;
        private @Nullable Boolean muted;
        private String op;
        private String value;
        public Builder() {}
        public Builder(SqlAlertOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.column = defaults.column;
    	      this.customBody = defaults.customBody;
    	      this.customSubject = defaults.customSubject;
    	      this.emptyResultState = defaults.emptyResultState;
    	      this.muted = defaults.muted;
    	      this.op = defaults.op;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder column(String column) {
            this.column = Objects.requireNonNull(column);
            return this;
        }
        @CustomType.Setter
        public Builder customBody(@Nullable String customBody) {
            this.customBody = customBody;
            return this;
        }
        @CustomType.Setter
        public Builder customSubject(@Nullable String customSubject) {
            this.customSubject = customSubject;
            return this;
        }
        @CustomType.Setter
        public Builder emptyResultState(@Nullable String emptyResultState) {
            this.emptyResultState = emptyResultState;
            return this;
        }
        @CustomType.Setter
        public Builder muted(@Nullable Boolean muted) {
            this.muted = muted;
            return this;
        }
        @CustomType.Setter
        public Builder op(String op) {
            this.op = Objects.requireNonNull(op);
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }
        public SqlAlertOptions build() {
            final var o = new SqlAlertOptions();
            o.column = column;
            o.customBody = customBody;
            o.customSubject = customSubject;
            o.emptyResultState = emptyResultState;
            o.muted = muted;
            o.op = op;
            o.value = value;
            return o;
        }
    }
}
