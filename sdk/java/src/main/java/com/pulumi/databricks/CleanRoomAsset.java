// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.CleanRoomAssetArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.CleanRoomAssetState;
import com.pulumi.databricks.outputs.CleanRoomAssetForeignTable;
import com.pulumi.databricks.outputs.CleanRoomAssetForeignTableLocalDetails;
import com.pulumi.databricks.outputs.CleanRoomAssetNotebook;
import com.pulumi.databricks.outputs.CleanRoomAssetTable;
import com.pulumi.databricks.outputs.CleanRoomAssetTableLocalDetails;
import com.pulumi.databricks.outputs.CleanRoomAssetView;
import com.pulumi.databricks.outputs.CleanRoomAssetViewLocalDetails;
import com.pulumi.databricks.outputs.CleanRoomAssetVolumeLocalDetails;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Clean room assets are data and code objects -- tables, volumes, and notebooks that are shared with the clean room.
 * 
 * ## Example Usage
 * 
 * # Example: Clean Room Asset Resource
 * 
 * ### Example for sharing a table
 * This is an example for sharing an asset (table) in a clean room:
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.cleanRoomsAsset;
 * import com.pulumi.databricks.cleanRoomsAssetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var this_ = new CleanRoomsAsset("this", CleanRoomsAssetArgs.builder()
 *             .cleanRoomName("existing_clean_room")
 *             .name("creator.default.myasset")
 *             .assetType("TABLE")
 *             .tableLocalDetails(Map.of("localName", "some_creator.default.myasset"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * As of Pulumi v1.5, resources can be imported through configuration.
 * 
 * hcl
 * 
 * import {
 * 
 *   id = &#34;clean_room_name,name,asset_type&#34;
 * 
 *   to = databricks_clean_room_asset.this
 * 
 * }
 * 
 * If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
 * 
 * ```sh
 * $ pulumi import databricks:index/cleanRoomAsset:CleanRoomAsset databricks_clean_room_asset &#34;clean_room_name,name,asset_type&#34;
 * ```
 * 
 */
@ResourceType(type="databricks:index/cleanRoomAsset:CleanRoomAsset")
public class CleanRoomAsset extends com.pulumi.resources.CustomResource {
    /**
     * (integer) - When the asset is added to the clean room, in epoch milliseconds
     * 
     */
    @Export(name="addedAt", refs={Integer.class}, tree="[0]")
    private Output<Integer> addedAt;

    /**
     * @return (integer) - When the asset is added to the clean room, in epoch milliseconds
     * 
     */
    public Output<Integer> addedAt() {
        return this.addedAt;
    }
    /**
     * The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
     * 
     */
    @Export(name="assetType", refs={String.class}, tree="[0]")
    private Output<String> assetType;

    /**
     * @return The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
     * 
     */
    public Output<String> assetType() {
        return this.assetType;
    }
    /**
     * The name of the clean room this asset belongs to.
     * This field is required for create operations and populated by the server for responses
     * 
     */
    @Export(name="cleanRoomName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cleanRoomName;

    /**
     * @return The name of the clean room this asset belongs to.
     * This field is required for create operations and populated by the server for responses
     * 
     */
    public Output<Optional<String>> cleanRoomName() {
        return Codegen.optional(this.cleanRoomName);
    }
    /**
     * Foreign table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    @Export(name="foreignTable", refs={CleanRoomAssetForeignTable.class}, tree="[0]")
    private Output</* @Nullable */ CleanRoomAssetForeignTable> foreignTable;

    /**
     * @return Foreign table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    public Output<Optional<CleanRoomAssetForeignTable>> foreignTable() {
        return Codegen.optional(this.foreignTable);
    }
    /**
     * Local details for a foreign that are only available to its owner.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    @Export(name="foreignTableLocalDetails", refs={CleanRoomAssetForeignTableLocalDetails.class}, tree="[0]")
    private Output</* @Nullable */ CleanRoomAssetForeignTableLocalDetails> foreignTableLocalDetails;

    /**
     * @return Local details for a foreign that are only available to its owner.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    public Output<Optional<CleanRoomAssetForeignTableLocalDetails>> foreignTableLocalDetails() {
        return Codegen.optional(this.foreignTableLocalDetails);
    }
    /**
     * A fully qualified name that uniquely identifies the asset within the clean room.
     * This is also the name displayed in the clean room UI.
     * 
     * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
     * 
     * For notebooks, the name is the notebook file name.
     * For jar analyses, the name is the jar analysis name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return A fully qualified name that uniquely identifies the asset within the clean room.
     * This is also the name displayed in the clean room UI.
     * 
     * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
     * 
     * For notebooks, the name is the notebook file name.
     * For jar analyses, the name is the jar analysis name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Notebook details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **NOTEBOOK_FILE**
     * 
     */
    @Export(name="notebook", refs={CleanRoomAssetNotebook.class}, tree="[0]")
    private Output</* @Nullable */ CleanRoomAssetNotebook> notebook;

    /**
     * @return Notebook details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **NOTEBOOK_FILE**
     * 
     */
    public Output<Optional<CleanRoomAssetNotebook>> notebook() {
        return Codegen.optional(this.notebook);
    }
    /**
     * (string) - The alias of the collaborator who owns this asset
     * 
     */
    @Export(name="ownerCollaboratorAlias", refs={String.class}, tree="[0]")
    private Output<String> ownerCollaboratorAlias;

    /**
     * @return (string) - The alias of the collaborator who owns this asset
     * 
     */
    public Output<String> ownerCollaboratorAlias() {
        return this.ownerCollaboratorAlias;
    }
    /**
     * (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    @Export(name="table", refs={CleanRoomAssetTable.class}, tree="[0]")
    private Output</* @Nullable */ CleanRoomAssetTable> table;

    /**
     * @return Table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    public Output<Optional<CleanRoomAssetTable>> table() {
        return Codegen.optional(this.table);
    }
    /**
     * Local details for a table that are only available to its owner.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    @Export(name="tableLocalDetails", refs={CleanRoomAssetTableLocalDetails.class}, tree="[0]")
    private Output</* @Nullable */ CleanRoomAssetTableLocalDetails> tableLocalDetails;

    /**
     * @return Local details for a table that are only available to its owner.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    public Output<Optional<CleanRoomAssetTableLocalDetails>> tableLocalDetails() {
        return Codegen.optional(this.tableLocalDetails);
    }
    /**
     * View details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    @Export(name="view", refs={CleanRoomAssetView.class}, tree="[0]")
    private Output</* @Nullable */ CleanRoomAssetView> view;

    /**
     * @return View details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    public Output<Optional<CleanRoomAssetView>> view() {
        return Codegen.optional(this.view);
    }
    /**
     * Local details for a view that are only available to its owner.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    @Export(name="viewLocalDetails", refs={CleanRoomAssetViewLocalDetails.class}, tree="[0]")
    private Output</* @Nullable */ CleanRoomAssetViewLocalDetails> viewLocalDetails;

    /**
     * @return Local details for a view that are only available to its owner.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    public Output<Optional<CleanRoomAssetViewLocalDetails>> viewLocalDetails() {
        return Codegen.optional(this.viewLocalDetails);
    }
    /**
     * Local details for a volume that are only available to its owner.
     * Present if and only if **asset_type** is **VOLUME**
     * 
     */
    @Export(name="volumeLocalDetails", refs={CleanRoomAssetVolumeLocalDetails.class}, tree="[0]")
    private Output</* @Nullable */ CleanRoomAssetVolumeLocalDetails> volumeLocalDetails;

    /**
     * @return Local details for a volume that are only available to its owner.
     * Present if and only if **asset_type** is **VOLUME**
     * 
     */
    public Output<Optional<CleanRoomAssetVolumeLocalDetails>> volumeLocalDetails() {
        return Codegen.optional(this.volumeLocalDetails);
    }
    /**
     * Workspace ID of the resource
     * 
     */
    @Export(name="workspaceId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Output<Optional<String>> workspaceId() {
        return Codegen.optional(this.workspaceId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CleanRoomAsset(java.lang.String name) {
        this(name, CleanRoomAssetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CleanRoomAsset(java.lang.String name, CleanRoomAssetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CleanRoomAsset(java.lang.String name, CleanRoomAssetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/cleanRoomAsset:CleanRoomAsset", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CleanRoomAsset(java.lang.String name, Output<java.lang.String> id, @Nullable CleanRoomAssetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/cleanRoomAsset:CleanRoomAsset", name, state, makeResourceOptions(options, id), false);
    }

    private static CleanRoomAssetArgs makeArgs(CleanRoomAssetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CleanRoomAssetArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CleanRoomAsset get(java.lang.String name, Output<java.lang.String> id, @Nullable CleanRoomAssetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CleanRoomAsset(name, id, state, options);
    }
}
