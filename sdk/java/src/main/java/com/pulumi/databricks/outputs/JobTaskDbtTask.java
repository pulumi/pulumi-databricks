// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class JobTaskDbtTask {
    /**
     * @return The name of the catalog to use inside Unity Catalog.
     * 
     */
    private @Nullable String catalog;
    /**
     * @return (Array) Series of dbt commands to execute in sequence. Every command must start with &#34;dbt&#34;.
     * 
     */
    private List<String> commands;
    /**
     * @return The relative path to the directory in the repository specified by `git_source` where dbt should look in for the `profiles.yml` file. If not specified, defaults to the repository&#39;s root directory. Equivalent to passing `--profile-dir` to a dbt command.
     * 
     */
    private @Nullable String profilesDirectory;
    /**
     * @return The relative path to the directory in the repository specified in `git_source` where dbt should look in for the `dbt_project.yml` file. If not specified, defaults to the repository&#39;s root directory. Equivalent to passing `--project-dir` to a dbt command.
     * 
     */
    private @Nullable String projectDirectory;
    /**
     * @return The name of the schema dbt should run in. Defaults to `default`.
     * 
     */
    private @Nullable String schema;
    /**
     * @return The ID of the SQL warehouse that dbt should execute against.
     * 
     * You also need to include a `git_source` block to configure the repository that contains the dbt project.
     * 
     */
    private @Nullable String warehouseId;

    private JobTaskDbtTask() {}
    /**
     * @return The name of the catalog to use inside Unity Catalog.
     * 
     */
    public Optional<String> catalog() {
        return Optional.ofNullable(this.catalog);
    }
    /**
     * @return (Array) Series of dbt commands to execute in sequence. Every command must start with &#34;dbt&#34;.
     * 
     */
    public List<String> commands() {
        return this.commands;
    }
    /**
     * @return The relative path to the directory in the repository specified by `git_source` where dbt should look in for the `profiles.yml` file. If not specified, defaults to the repository&#39;s root directory. Equivalent to passing `--profile-dir` to a dbt command.
     * 
     */
    public Optional<String> profilesDirectory() {
        return Optional.ofNullable(this.profilesDirectory);
    }
    /**
     * @return The relative path to the directory in the repository specified in `git_source` where dbt should look in for the `dbt_project.yml` file. If not specified, defaults to the repository&#39;s root directory. Equivalent to passing `--project-dir` to a dbt command.
     * 
     */
    public Optional<String> projectDirectory() {
        return Optional.ofNullable(this.projectDirectory);
    }
    /**
     * @return The name of the schema dbt should run in. Defaults to `default`.
     * 
     */
    public Optional<String> schema() {
        return Optional.ofNullable(this.schema);
    }
    /**
     * @return The ID of the SQL warehouse that dbt should execute against.
     * 
     * You also need to include a `git_source` block to configure the repository that contains the dbt project.
     * 
     */
    public Optional<String> warehouseId() {
        return Optional.ofNullable(this.warehouseId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobTaskDbtTask defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String catalog;
        private List<String> commands;
        private @Nullable String profilesDirectory;
        private @Nullable String projectDirectory;
        private @Nullable String schema;
        private @Nullable String warehouseId;
        public Builder() {}
        public Builder(JobTaskDbtTask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalog = defaults.catalog;
    	      this.commands = defaults.commands;
    	      this.profilesDirectory = defaults.profilesDirectory;
    	      this.projectDirectory = defaults.projectDirectory;
    	      this.schema = defaults.schema;
    	      this.warehouseId = defaults.warehouseId;
        }

        @CustomType.Setter
        public Builder catalog(@Nullable String catalog) {
            this.catalog = catalog;
            return this;
        }
        @CustomType.Setter
        public Builder commands(List<String> commands) {
            this.commands = Objects.requireNonNull(commands);
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder profilesDirectory(@Nullable String profilesDirectory) {
            this.profilesDirectory = profilesDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder projectDirectory(@Nullable String projectDirectory) {
            this.projectDirectory = projectDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder schema(@Nullable String schema) {
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder warehouseId(@Nullable String warehouseId) {
            this.warehouseId = warehouseId;
            return this;
        }
        public JobTaskDbtTask build() {
            final var o = new JobTaskDbtTask();
            o.catalog = catalog;
            o.commands = commands;
            o.profilesDirectory = profilesDirectory;
            o.projectDirectory = projectDirectory;
            o.schema = schema;
            o.warehouseId = warehouseId;
            return o;
        }
    }
}
