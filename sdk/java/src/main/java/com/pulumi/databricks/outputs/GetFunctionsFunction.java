// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetFunctionsFunctionInputParam;
import com.pulumi.databricks.outputs.GetFunctionsFunctionReturnParam;
import com.pulumi.databricks.outputs.GetFunctionsFunctionRoutineDependency;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFunctionsFunction {
    private @Nullable Boolean browseOnly;
    private @Nullable String catalogName;
    private @Nullable String comment;
    private @Nullable Integer createdAt;
    private @Nullable String createdBy;
    private @Nullable String dataType;
    private @Nullable String externalLanguage;
    private @Nullable String externalName;
    private @Nullable String fullDataType;
    private @Nullable String fullName;
    private @Nullable String functionId;
    private @Nullable List<GetFunctionsFunctionInputParam> inputParams;
    private @Nullable Boolean isDeterministic;
    private @Nullable Boolean isNullCall;
    private @Nullable String metastoreId;
    private @Nullable String name;
    private @Nullable String owner;
    private @Nullable String parameterStyle;
    private @Nullable String properties;
    private @Nullable List<GetFunctionsFunctionReturnParam> returnParams;
    private @Nullable String routineBody;
    private @Nullable String routineDefinition;
    private @Nullable List<GetFunctionsFunctionRoutineDependency> routineDependencies;
    private @Nullable String schemaName;
    private @Nullable String securityType;
    private @Nullable String specificName;
    private @Nullable String sqlDataAccess;
    private @Nullable String sqlPath;
    private @Nullable Integer updatedAt;
    private @Nullable String updatedBy;

    private GetFunctionsFunction() {}
    public Optional<Boolean> browseOnly() {
        return Optional.ofNullable(this.browseOnly);
    }
    public Optional<String> catalogName() {
        return Optional.ofNullable(this.catalogName);
    }
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    public Optional<Integer> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }
    public Optional<String> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }
    public Optional<String> dataType() {
        return Optional.ofNullable(this.dataType);
    }
    public Optional<String> externalLanguage() {
        return Optional.ofNullable(this.externalLanguage);
    }
    public Optional<String> externalName() {
        return Optional.ofNullable(this.externalName);
    }
    public Optional<String> fullDataType() {
        return Optional.ofNullable(this.fullDataType);
    }
    public Optional<String> fullName() {
        return Optional.ofNullable(this.fullName);
    }
    public Optional<String> functionId() {
        return Optional.ofNullable(this.functionId);
    }
    public List<GetFunctionsFunctionInputParam> inputParams() {
        return this.inputParams == null ? List.of() : this.inputParams;
    }
    public Optional<Boolean> isDeterministic() {
        return Optional.ofNullable(this.isDeterministic);
    }
    public Optional<Boolean> isNullCall() {
        return Optional.ofNullable(this.isNullCall);
    }
    public Optional<String> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }
    public Optional<String> parameterStyle() {
        return Optional.ofNullable(this.parameterStyle);
    }
    public Optional<String> properties() {
        return Optional.ofNullable(this.properties);
    }
    public List<GetFunctionsFunctionReturnParam> returnParams() {
        return this.returnParams == null ? List.of() : this.returnParams;
    }
    public Optional<String> routineBody() {
        return Optional.ofNullable(this.routineBody);
    }
    public Optional<String> routineDefinition() {
        return Optional.ofNullable(this.routineDefinition);
    }
    public List<GetFunctionsFunctionRoutineDependency> routineDependencies() {
        return this.routineDependencies == null ? List.of() : this.routineDependencies;
    }
    public Optional<String> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }
    public Optional<String> securityType() {
        return Optional.ofNullable(this.securityType);
    }
    public Optional<String> specificName() {
        return Optional.ofNullable(this.specificName);
    }
    public Optional<String> sqlDataAccess() {
        return Optional.ofNullable(this.sqlDataAccess);
    }
    public Optional<String> sqlPath() {
        return Optional.ofNullable(this.sqlPath);
    }
    public Optional<Integer> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }
    public Optional<String> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionsFunction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean browseOnly;
        private @Nullable String catalogName;
        private @Nullable String comment;
        private @Nullable Integer createdAt;
        private @Nullable String createdBy;
        private @Nullable String dataType;
        private @Nullable String externalLanguage;
        private @Nullable String externalName;
        private @Nullable String fullDataType;
        private @Nullable String fullName;
        private @Nullable String functionId;
        private @Nullable List<GetFunctionsFunctionInputParam> inputParams;
        private @Nullable Boolean isDeterministic;
        private @Nullable Boolean isNullCall;
        private @Nullable String metastoreId;
        private @Nullable String name;
        private @Nullable String owner;
        private @Nullable String parameterStyle;
        private @Nullable String properties;
        private @Nullable List<GetFunctionsFunctionReturnParam> returnParams;
        private @Nullable String routineBody;
        private @Nullable String routineDefinition;
        private @Nullable List<GetFunctionsFunctionRoutineDependency> routineDependencies;
        private @Nullable String schemaName;
        private @Nullable String securityType;
        private @Nullable String specificName;
        private @Nullable String sqlDataAccess;
        private @Nullable String sqlPath;
        private @Nullable Integer updatedAt;
        private @Nullable String updatedBy;
        public Builder() {}
        public Builder(GetFunctionsFunction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.browseOnly = defaults.browseOnly;
    	      this.catalogName = defaults.catalogName;
    	      this.comment = defaults.comment;
    	      this.createdAt = defaults.createdAt;
    	      this.createdBy = defaults.createdBy;
    	      this.dataType = defaults.dataType;
    	      this.externalLanguage = defaults.externalLanguage;
    	      this.externalName = defaults.externalName;
    	      this.fullDataType = defaults.fullDataType;
    	      this.fullName = defaults.fullName;
    	      this.functionId = defaults.functionId;
    	      this.inputParams = defaults.inputParams;
    	      this.isDeterministic = defaults.isDeterministic;
    	      this.isNullCall = defaults.isNullCall;
    	      this.metastoreId = defaults.metastoreId;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.parameterStyle = defaults.parameterStyle;
    	      this.properties = defaults.properties;
    	      this.returnParams = defaults.returnParams;
    	      this.routineBody = defaults.routineBody;
    	      this.routineDefinition = defaults.routineDefinition;
    	      this.routineDependencies = defaults.routineDependencies;
    	      this.schemaName = defaults.schemaName;
    	      this.securityType = defaults.securityType;
    	      this.specificName = defaults.specificName;
    	      this.sqlDataAccess = defaults.sqlDataAccess;
    	      this.sqlPath = defaults.sqlPath;
    	      this.updatedAt = defaults.updatedAt;
    	      this.updatedBy = defaults.updatedBy;
        }

        @CustomType.Setter
        public Builder browseOnly(@Nullable Boolean browseOnly) {

            this.browseOnly = browseOnly;
            return this;
        }
        @CustomType.Setter
        public Builder catalogName(@Nullable String catalogName) {

            this.catalogName = catalogName;
            return this;
        }
        @CustomType.Setter
        public Builder comment(@Nullable String comment) {

            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(@Nullable Integer createdAt) {

            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(@Nullable String createdBy) {

            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder dataType(@Nullable String dataType) {

            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder externalLanguage(@Nullable String externalLanguage) {

            this.externalLanguage = externalLanguage;
            return this;
        }
        @CustomType.Setter
        public Builder externalName(@Nullable String externalName) {

            this.externalName = externalName;
            return this;
        }
        @CustomType.Setter
        public Builder fullDataType(@Nullable String fullDataType) {

            this.fullDataType = fullDataType;
            return this;
        }
        @CustomType.Setter
        public Builder fullName(@Nullable String fullName) {

            this.fullName = fullName;
            return this;
        }
        @CustomType.Setter
        public Builder functionId(@Nullable String functionId) {

            this.functionId = functionId;
            return this;
        }
        @CustomType.Setter
        public Builder inputParams(@Nullable List<GetFunctionsFunctionInputParam> inputParams) {

            this.inputParams = inputParams;
            return this;
        }
        public Builder inputParams(GetFunctionsFunctionInputParam... inputParams) {
            return inputParams(List.of(inputParams));
        }
        @CustomType.Setter
        public Builder isDeterministic(@Nullable Boolean isDeterministic) {

            this.isDeterministic = isDeterministic;
            return this;
        }
        @CustomType.Setter
        public Builder isNullCall(@Nullable Boolean isNullCall) {

            this.isNullCall = isNullCall;
            return this;
        }
        @CustomType.Setter
        public Builder metastoreId(@Nullable String metastoreId) {

            this.metastoreId = metastoreId;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(@Nullable String owner) {

            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder parameterStyle(@Nullable String parameterStyle) {

            this.parameterStyle = parameterStyle;
            return this;
        }
        @CustomType.Setter
        public Builder properties(@Nullable String properties) {

            this.properties = properties;
            return this;
        }
        @CustomType.Setter
        public Builder returnParams(@Nullable List<GetFunctionsFunctionReturnParam> returnParams) {

            this.returnParams = returnParams;
            return this;
        }
        public Builder returnParams(GetFunctionsFunctionReturnParam... returnParams) {
            return returnParams(List.of(returnParams));
        }
        @CustomType.Setter
        public Builder routineBody(@Nullable String routineBody) {

            this.routineBody = routineBody;
            return this;
        }
        @CustomType.Setter
        public Builder routineDefinition(@Nullable String routineDefinition) {

            this.routineDefinition = routineDefinition;
            return this;
        }
        @CustomType.Setter
        public Builder routineDependencies(@Nullable List<GetFunctionsFunctionRoutineDependency> routineDependencies) {

            this.routineDependencies = routineDependencies;
            return this;
        }
        public Builder routineDependencies(GetFunctionsFunctionRoutineDependency... routineDependencies) {
            return routineDependencies(List.of(routineDependencies));
        }
        @CustomType.Setter
        public Builder schemaName(@Nullable String schemaName) {

            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder securityType(@Nullable String securityType) {

            this.securityType = securityType;
            return this;
        }
        @CustomType.Setter
        public Builder specificName(@Nullable String specificName) {

            this.specificName = specificName;
            return this;
        }
        @CustomType.Setter
        public Builder sqlDataAccess(@Nullable String sqlDataAccess) {

            this.sqlDataAccess = sqlDataAccess;
            return this;
        }
        @CustomType.Setter
        public Builder sqlPath(@Nullable String sqlPath) {

            this.sqlPath = sqlPath;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(@Nullable Integer updatedAt) {

            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBy(@Nullable String updatedBy) {

            this.updatedBy = updatedBy;
            return this;
        }
        public GetFunctionsFunction build() {
            final var _resultValue = new GetFunctionsFunction();
            _resultValue.browseOnly = browseOnly;
            _resultValue.catalogName = catalogName;
            _resultValue.comment = comment;
            _resultValue.createdAt = createdAt;
            _resultValue.createdBy = createdBy;
            _resultValue.dataType = dataType;
            _resultValue.externalLanguage = externalLanguage;
            _resultValue.externalName = externalName;
            _resultValue.fullDataType = fullDataType;
            _resultValue.fullName = fullName;
            _resultValue.functionId = functionId;
            _resultValue.inputParams = inputParams;
            _resultValue.isDeterministic = isDeterministic;
            _resultValue.isNullCall = isNullCall;
            _resultValue.metastoreId = metastoreId;
            _resultValue.name = name;
            _resultValue.owner = owner;
            _resultValue.parameterStyle = parameterStyle;
            _resultValue.properties = properties;
            _resultValue.returnParams = returnParams;
            _resultValue.routineBody = routineBody;
            _resultValue.routineDefinition = routineDefinition;
            _resultValue.routineDependencies = routineDependencies;
            _resultValue.schemaName = schemaName;
            _resultValue.securityType = securityType;
            _resultValue.specificName = specificName;
            _resultValue.sqlDataAccess = sqlDataAccess;
            _resultValue.sqlPath = sqlPath;
            _resultValue.updatedAt = updatedAt;
            _resultValue.updatedBy = updatedBy;
            return _resultValue;
        }
    }
}
