// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusContinuousUpdateStatusInitialPipelineSyncProgress {
    /**
     * @return (number) - The estimated time remaining to complete this update in seconds
     * 
     */
    private Double estimatedCompletionTimeSeconds;
    /**
     * @return (integer) - The source table Delta version that was last processed by the pipeline. The pipeline may not
     * have completely processed this version yet
     * 
     */
    private Integer latestVersionCurrentlyProcessing;
    /**
     * @return (string) - The current phase of the data synchronization pipeline. Possible values are: `PROVISIONING_PHASE_INDEX_SCAN`, `PROVISIONING_PHASE_INDEX_SORT`, `PROVISIONING_PHASE_MAIN`
     * 
     */
    private String provisioningPhase;
    /**
     * @return (number) - The completion ratio of this update. This is a number between 0 and 1
     * 
     */
    private Double syncProgressCompletion;
    /**
     * @return (integer) - The number of rows that have been synced in this update
     * 
     */
    private Integer syncedRowCount;
    /**
     * @return (integer) - The total number of rows that need to be synced in this update. This number may be an estimate
     * 
     */
    private Integer totalRowCount;

    private GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusContinuousUpdateStatusInitialPipelineSyncProgress() {}
    /**
     * @return (number) - The estimated time remaining to complete this update in seconds
     * 
     */
    public Double estimatedCompletionTimeSeconds() {
        return this.estimatedCompletionTimeSeconds;
    }
    /**
     * @return (integer) - The source table Delta version that was last processed by the pipeline. The pipeline may not
     * have completely processed this version yet
     * 
     */
    public Integer latestVersionCurrentlyProcessing() {
        return this.latestVersionCurrentlyProcessing;
    }
    /**
     * @return (string) - The current phase of the data synchronization pipeline. Possible values are: `PROVISIONING_PHASE_INDEX_SCAN`, `PROVISIONING_PHASE_INDEX_SORT`, `PROVISIONING_PHASE_MAIN`
     * 
     */
    public String provisioningPhase() {
        return this.provisioningPhase;
    }
    /**
     * @return (number) - The completion ratio of this update. This is a number between 0 and 1
     * 
     */
    public Double syncProgressCompletion() {
        return this.syncProgressCompletion;
    }
    /**
     * @return (integer) - The number of rows that have been synced in this update
     * 
     */
    public Integer syncedRowCount() {
        return this.syncedRowCount;
    }
    /**
     * @return (integer) - The total number of rows that need to be synced in this update. This number may be an estimate
     * 
     */
    public Integer totalRowCount() {
        return this.totalRowCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusContinuousUpdateStatusInitialPipelineSyncProgress defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double estimatedCompletionTimeSeconds;
        private Integer latestVersionCurrentlyProcessing;
        private String provisioningPhase;
        private Double syncProgressCompletion;
        private Integer syncedRowCount;
        private Integer totalRowCount;
        public Builder() {}
        public Builder(GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusContinuousUpdateStatusInitialPipelineSyncProgress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.estimatedCompletionTimeSeconds = defaults.estimatedCompletionTimeSeconds;
    	      this.latestVersionCurrentlyProcessing = defaults.latestVersionCurrentlyProcessing;
    	      this.provisioningPhase = defaults.provisioningPhase;
    	      this.syncProgressCompletion = defaults.syncProgressCompletion;
    	      this.syncedRowCount = defaults.syncedRowCount;
    	      this.totalRowCount = defaults.totalRowCount;
        }

        @CustomType.Setter
        public Builder estimatedCompletionTimeSeconds(Double estimatedCompletionTimeSeconds) {
            if (estimatedCompletionTimeSeconds == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusContinuousUpdateStatusInitialPipelineSyncProgress", "estimatedCompletionTimeSeconds");
            }
            this.estimatedCompletionTimeSeconds = estimatedCompletionTimeSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder latestVersionCurrentlyProcessing(Integer latestVersionCurrentlyProcessing) {
            if (latestVersionCurrentlyProcessing == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusContinuousUpdateStatusInitialPipelineSyncProgress", "latestVersionCurrentlyProcessing");
            }
            this.latestVersionCurrentlyProcessing = latestVersionCurrentlyProcessing;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningPhase(String provisioningPhase) {
            if (provisioningPhase == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusContinuousUpdateStatusInitialPipelineSyncProgress", "provisioningPhase");
            }
            this.provisioningPhase = provisioningPhase;
            return this;
        }
        @CustomType.Setter
        public Builder syncProgressCompletion(Double syncProgressCompletion) {
            if (syncProgressCompletion == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusContinuousUpdateStatusInitialPipelineSyncProgress", "syncProgressCompletion");
            }
            this.syncProgressCompletion = syncProgressCompletion;
            return this;
        }
        @CustomType.Setter
        public Builder syncedRowCount(Integer syncedRowCount) {
            if (syncedRowCount == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusContinuousUpdateStatusInitialPipelineSyncProgress", "syncedRowCount");
            }
            this.syncedRowCount = syncedRowCount;
            return this;
        }
        @CustomType.Setter
        public Builder totalRowCount(Integer totalRowCount) {
            if (totalRowCount == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusContinuousUpdateStatusInitialPipelineSyncProgress", "totalRowCount");
            }
            this.totalRowCount = totalRowCount;
            return this;
        }
        public GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusContinuousUpdateStatusInitialPipelineSyncProgress build() {
            final var _resultValue = new GetDatabaseSyncedDatabaseTablesSyncedTableDataSynchronizationStatusContinuousUpdateStatusInitialPipelineSyncProgress();
            _resultValue.estimatedCompletionTimeSeconds = estimatedCompletionTimeSeconds;
            _resultValue.latestVersionCurrentlyProcessing = latestVersionCurrentlyProcessing;
            _resultValue.provisioningPhase = provisioningPhase;
            _resultValue.syncProgressCompletion = syncProgressCompletion;
            _resultValue.syncedRowCount = syncedRowCount;
            _resultValue.totalRowCount = totalRowCount;
            return _resultValue;
        }
    }
}
