// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.AlertConditionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertState extends com.pulumi.resources.ResourceArgs {

    public static final AlertState Empty = new AlertState();

    @Import(name="condition")
    private @Nullable Output<AlertConditionArgs> condition;

    public Optional<Output<AlertConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    @Import(name="customBody")
    private @Nullable Output<String> customBody;

    public Optional<Output<String>> customBody() {
        return Optional.ofNullable(this.customBody);
    }

    @Import(name="customSubject")
    private @Nullable Output<String> customSubject;

    public Optional<Output<String>> customSubject() {
        return Optional.ofNullable(this.customSubject);
    }

    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="lifecycleState")
    private @Nullable Output<String> lifecycleState;

    public Optional<Output<String>> lifecycleState() {
        return Optional.ofNullable(this.lifecycleState);
    }

    @Import(name="notifyOnOk")
    private @Nullable Output<Boolean> notifyOnOk;

    public Optional<Output<Boolean>> notifyOnOk() {
        return Optional.ofNullable(this.notifyOnOk);
    }

    @Import(name="ownerUserName")
    private @Nullable Output<String> ownerUserName;

    public Optional<Output<String>> ownerUserName() {
        return Optional.ofNullable(this.ownerUserName);
    }

    @Import(name="parentPath")
    private @Nullable Output<String> parentPath;

    public Optional<Output<String>> parentPath() {
        return Optional.ofNullable(this.parentPath);
    }

    @Import(name="queryId")
    private @Nullable Output<String> queryId;

    public Optional<Output<String>> queryId() {
        return Optional.ofNullable(this.queryId);
    }

    @Import(name="secondsToRetrigger")
    private @Nullable Output<Integer> secondsToRetrigger;

    public Optional<Output<Integer>> secondsToRetrigger() {
        return Optional.ofNullable(this.secondsToRetrigger);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="triggerTime")
    private @Nullable Output<String> triggerTime;

    public Optional<Output<String>> triggerTime() {
        return Optional.ofNullable(this.triggerTime);
    }

    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private AlertState() {}

    private AlertState(AlertState $) {
        this.condition = $.condition;
        this.createTime = $.createTime;
        this.customBody = $.customBody;
        this.customSubject = $.customSubject;
        this.displayName = $.displayName;
        this.lifecycleState = $.lifecycleState;
        this.notifyOnOk = $.notifyOnOk;
        this.ownerUserName = $.ownerUserName;
        this.parentPath = $.parentPath;
        this.queryId = $.queryId;
        this.secondsToRetrigger = $.secondsToRetrigger;
        this.state = $.state;
        this.triggerTime = $.triggerTime;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertState $;

        public Builder() {
            $ = new AlertState();
        }

        public Builder(AlertState defaults) {
            $ = new AlertState(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<AlertConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(AlertConditionArgs condition) {
            return condition(Output.of(condition));
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder customBody(@Nullable Output<String> customBody) {
            $.customBody = customBody;
            return this;
        }

        public Builder customBody(String customBody) {
            return customBody(Output.of(customBody));
        }

        public Builder customSubject(@Nullable Output<String> customSubject) {
            $.customSubject = customSubject;
            return this;
        }

        public Builder customSubject(String customSubject) {
            return customSubject(Output.of(customSubject));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder lifecycleState(@Nullable Output<String> lifecycleState) {
            $.lifecycleState = lifecycleState;
            return this;
        }

        public Builder lifecycleState(String lifecycleState) {
            return lifecycleState(Output.of(lifecycleState));
        }

        public Builder notifyOnOk(@Nullable Output<Boolean> notifyOnOk) {
            $.notifyOnOk = notifyOnOk;
            return this;
        }

        public Builder notifyOnOk(Boolean notifyOnOk) {
            return notifyOnOk(Output.of(notifyOnOk));
        }

        public Builder ownerUserName(@Nullable Output<String> ownerUserName) {
            $.ownerUserName = ownerUserName;
            return this;
        }

        public Builder ownerUserName(String ownerUserName) {
            return ownerUserName(Output.of(ownerUserName));
        }

        public Builder parentPath(@Nullable Output<String> parentPath) {
            $.parentPath = parentPath;
            return this;
        }

        public Builder parentPath(String parentPath) {
            return parentPath(Output.of(parentPath));
        }

        public Builder queryId(@Nullable Output<String> queryId) {
            $.queryId = queryId;
            return this;
        }

        public Builder queryId(String queryId) {
            return queryId(Output.of(queryId));
        }

        public Builder secondsToRetrigger(@Nullable Output<Integer> secondsToRetrigger) {
            $.secondsToRetrigger = secondsToRetrigger;
            return this;
        }

        public Builder secondsToRetrigger(Integer secondsToRetrigger) {
            return secondsToRetrigger(Output.of(secondsToRetrigger));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder triggerTime(@Nullable Output<String> triggerTime) {
            $.triggerTime = triggerTime;
            return this;
        }

        public Builder triggerTime(String triggerTime) {
            return triggerTime(Output.of(triggerTime));
        }

        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public AlertState build() {
            return $;
        }
    }

}
