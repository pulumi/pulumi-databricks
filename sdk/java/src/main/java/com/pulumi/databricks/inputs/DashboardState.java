// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardState extends com.pulumi.resources.ResourceArgs {

    public static final DashboardState Empty = new DashboardState();

    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    @Import(name="dashboardChangeDetected")
    private @Nullable Output<Boolean> dashboardChangeDetected;

    public Optional<Output<Boolean>> dashboardChangeDetected() {
        return Optional.ofNullable(this.dashboardChangeDetected);
    }

    @Import(name="dashboardId")
    private @Nullable Output<String> dashboardId;

    public Optional<Output<String>> dashboardId() {
        return Optional.ofNullable(this.dashboardId);
    }

    /**
     * The display name of the dashboard.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the dashboard.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Whether to embed credentials in the dashboard. Default is `true`.
     * 
     */
    @Import(name="embedCredentials")
    private @Nullable Output<Boolean> embedCredentials;

    /**
     * @return Whether to embed credentials in the dashboard. Default is `true`.
     * 
     */
    public Optional<Output<Boolean>> embedCredentials() {
        return Optional.ofNullable(this.embedCredentials);
    }

    @Import(name="etag")
    private @Nullable Output<String> etag;

    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * The path to the dashboard JSON file. Conflicts with `serialized_dashboard`.
     * 
     */
    @Import(name="filePath")
    private @Nullable Output<String> filePath;

    /**
     * @return The path to the dashboard JSON file. Conflicts with `serialized_dashboard`.
     * 
     */
    public Optional<Output<String>> filePath() {
        return Optional.ofNullable(this.filePath);
    }

    @Import(name="lifecycleState")
    private @Nullable Output<String> lifecycleState;

    public Optional<Output<String>> lifecycleState() {
        return Optional.ofNullable(this.lifecycleState);
    }

    @Import(name="md5")
    private @Nullable Output<String> md5;

    public Optional<Output<String>> md5() {
        return Optional.ofNullable(this.md5);
    }

    /**
     * The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.
     * 
     */
    @Import(name="parentPath")
    private @Nullable Output<String> parentPath;

    /**
     * @return The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.
     * 
     */
    public Optional<Output<String>> parentPath() {
        return Optional.ofNullable(this.parentPath);
    }

    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The contents of the dashboard in serialized string form. Conflicts with `file_path`.
     * 
     */
    @Import(name="serializedDashboard")
    private @Nullable Output<String> serializedDashboard;

    /**
     * @return The contents of the dashboard in serialized string form. Conflicts with `file_path`.
     * 
     */
    public Optional<Output<String>> serializedDashboard() {
        return Optional.ofNullable(this.serializedDashboard);
    }

    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * The warehouse ID used to run the dashboard.
     * 
     */
    @Import(name="warehouseId")
    private @Nullable Output<String> warehouseId;

    /**
     * @return The warehouse ID used to run the dashboard.
     * 
     */
    public Optional<Output<String>> warehouseId() {
        return Optional.ofNullable(this.warehouseId);
    }

    private DashboardState() {}

    private DashboardState(DashboardState $) {
        this.createTime = $.createTime;
        this.dashboardChangeDetected = $.dashboardChangeDetected;
        this.dashboardId = $.dashboardId;
        this.displayName = $.displayName;
        this.embedCredentials = $.embedCredentials;
        this.etag = $.etag;
        this.filePath = $.filePath;
        this.lifecycleState = $.lifecycleState;
        this.md5 = $.md5;
        this.parentPath = $.parentPath;
        this.path = $.path;
        this.serializedDashboard = $.serializedDashboard;
        this.updateTime = $.updateTime;
        this.warehouseId = $.warehouseId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardState $;

        public Builder() {
            $ = new DashboardState();
        }

        public Builder(DashboardState defaults) {
            $ = new DashboardState(Objects.requireNonNull(defaults));
        }

        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder dashboardChangeDetected(@Nullable Output<Boolean> dashboardChangeDetected) {
            $.dashboardChangeDetected = dashboardChangeDetected;
            return this;
        }

        public Builder dashboardChangeDetected(Boolean dashboardChangeDetected) {
            return dashboardChangeDetected(Output.of(dashboardChangeDetected));
        }

        public Builder dashboardId(@Nullable Output<String> dashboardId) {
            $.dashboardId = dashboardId;
            return this;
        }

        public Builder dashboardId(String dashboardId) {
            return dashboardId(Output.of(dashboardId));
        }

        /**
         * @param displayName The display name of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param embedCredentials Whether to embed credentials in the dashboard. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder embedCredentials(@Nullable Output<Boolean> embedCredentials) {
            $.embedCredentials = embedCredentials;
            return this;
        }

        /**
         * @param embedCredentials Whether to embed credentials in the dashboard. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder embedCredentials(Boolean embedCredentials) {
            return embedCredentials(Output.of(embedCredentials));
        }

        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param filePath The path to the dashboard JSON file. Conflicts with `serialized_dashboard`.
         * 
         * @return builder
         * 
         */
        public Builder filePath(@Nullable Output<String> filePath) {
            $.filePath = filePath;
            return this;
        }

        /**
         * @param filePath The path to the dashboard JSON file. Conflicts with `serialized_dashboard`.
         * 
         * @return builder
         * 
         */
        public Builder filePath(String filePath) {
            return filePath(Output.of(filePath));
        }

        public Builder lifecycleState(@Nullable Output<String> lifecycleState) {
            $.lifecycleState = lifecycleState;
            return this;
        }

        public Builder lifecycleState(String lifecycleState) {
            return lifecycleState(Output.of(lifecycleState));
        }

        public Builder md5(@Nullable Output<String> md5) {
            $.md5 = md5;
            return this;
        }

        public Builder md5(String md5) {
            return md5(Output.of(md5));
        }

        /**
         * @param parentPath The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.
         * 
         * @return builder
         * 
         */
        public Builder parentPath(@Nullable Output<String> parentPath) {
            $.parentPath = parentPath;
            return this;
        }

        /**
         * @param parentPath The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.
         * 
         * @return builder
         * 
         */
        public Builder parentPath(String parentPath) {
            return parentPath(Output.of(parentPath));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param serializedDashboard The contents of the dashboard in serialized string form. Conflicts with `file_path`.
         * 
         * @return builder
         * 
         */
        public Builder serializedDashboard(@Nullable Output<String> serializedDashboard) {
            $.serializedDashboard = serializedDashboard;
            return this;
        }

        /**
         * @param serializedDashboard The contents of the dashboard in serialized string form. Conflicts with `file_path`.
         * 
         * @return builder
         * 
         */
        public Builder serializedDashboard(String serializedDashboard) {
            return serializedDashboard(Output.of(serializedDashboard));
        }

        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        /**
         * @param warehouseId The warehouse ID used to run the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder warehouseId(@Nullable Output<String> warehouseId) {
            $.warehouseId = warehouseId;
            return this;
        }

        /**
         * @param warehouseId The warehouse ID used to run the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder warehouseId(String warehouseId) {
            return warehouseId(Output.of(warehouseId));
        }

        public DashboardState build() {
            return $;
        }
    }

}
