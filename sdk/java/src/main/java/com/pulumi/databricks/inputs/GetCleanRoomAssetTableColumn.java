// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetCleanRoomAssetTableColumnMask;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCleanRoomAssetTableColumn extends com.pulumi.resources.InvokeArgs {

    public static final GetCleanRoomAssetTableColumn Empty = new GetCleanRoomAssetTableColumn();

    /**
     * (string) - User-provided free-form text description
     * 
     */
    @Import(name="comment")
    private @Nullable String comment;

    /**
     * @return (string) - User-provided free-form text description
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * (ColumnMask)
     * 
     */
    @Import(name="mask")
    private @Nullable GetCleanRoomAssetTableColumnMask mask;

    /**
     * @return (ColumnMask)
     * 
     */
    public Optional<GetCleanRoomAssetTableColumnMask> mask() {
        return Optional.ofNullable(this.mask);
    }

    /**
     * A fully qualified name that uniquely identifies the asset within the clean room.
     * This is also the name displayed in the clean room UI.
     * 
     * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
     * 
     * For notebooks, the name is the notebook file name.
     * For jar analyses, the name is the jar analysis name
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return A fully qualified name that uniquely identifies the asset within the clean room.
     * This is also the name displayed in the clean room UI.
     * 
     * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
     * 
     * For notebooks, the name is the notebook file name.
     * For jar analyses, the name is the jar analysis name
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (boolean) - Whether field may be Null (default: true)
     * 
     */
    @Import(name="nullable")
    private @Nullable Boolean nullable;

    /**
     * @return (boolean) - Whether field may be Null (default: true)
     * 
     */
    public Optional<Boolean> nullable() {
        return Optional.ofNullable(this.nullable);
    }

    /**
     * (integer) - Partition index for column
     * 
     */
    @Import(name="partitionIndex")
    private @Nullable Integer partitionIndex;

    /**
     * @return (integer) - Partition index for column
     * 
     */
    public Optional<Integer> partitionIndex() {
        return Optional.ofNullable(this.partitionIndex);
    }

    /**
     * (integer) - Ordinal position of column (starting at position 0)
     * 
     */
    @Import(name="position")
    private @Nullable Integer position;

    /**
     * @return (integer) - Ordinal position of column (starting at position 0)
     * 
     */
    public Optional<Integer> position() {
        return Optional.ofNullable(this.position);
    }

    /**
     * (string) - Format of IntervalType
     * 
     */
    @Import(name="typeIntervalType")
    private @Nullable String typeIntervalType;

    /**
     * @return (string) - Format of IntervalType
     * 
     */
    public Optional<String> typeIntervalType() {
        return Optional.ofNullable(this.typeIntervalType);
    }

    /**
     * (string) - Full data type specification, JSON-serialized
     * 
     */
    @Import(name="typeJson")
    private @Nullable String typeJson;

    /**
     * @return (string) - Full data type specification, JSON-serialized
     * 
     */
    public Optional<String> typeJson() {
        return Optional.ofNullable(this.typeJson);
    }

    /**
     * (string) - . Possible values are: `ARRAY`, `BINARY`, `BOOLEAN`, `BYTE`, `CHAR`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `GEOGRAPHY`, `GEOMETRY`, `INT`, `INTERVAL`, `LONG`, `MAP`, `NULL`, `SHORT`, `STRING`, `STRUCT`, `TABLE_TYPE`, `TIMESTAMP`, `TIMESTAMP_NTZ`, `USER_DEFINED_TYPE`, `VARIANT`
     * 
     */
    @Import(name="typeName")
    private @Nullable String typeName;

    /**
     * @return (string) - . Possible values are: `ARRAY`, `BINARY`, `BOOLEAN`, `BYTE`, `CHAR`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `GEOGRAPHY`, `GEOMETRY`, `INT`, `INTERVAL`, `LONG`, `MAP`, `NULL`, `SHORT`, `STRING`, `STRUCT`, `TABLE_TYPE`, `TIMESTAMP`, `TIMESTAMP_NTZ`, `USER_DEFINED_TYPE`, `VARIANT`
     * 
     */
    public Optional<String> typeName() {
        return Optional.ofNullable(this.typeName);
    }

    /**
     * (integer) - Digits of precision; required for DecimalTypes
     * 
     */
    @Import(name="typePrecision")
    private @Nullable Integer typePrecision;

    /**
     * @return (integer) - Digits of precision; required for DecimalTypes
     * 
     */
    public Optional<Integer> typePrecision() {
        return Optional.ofNullable(this.typePrecision);
    }

    /**
     * (integer) - Digits to right of decimal; Required for DecimalTypes
     * 
     */
    @Import(name="typeScale")
    private @Nullable Integer typeScale;

    /**
     * @return (integer) - Digits to right of decimal; Required for DecimalTypes
     * 
     */
    public Optional<Integer> typeScale() {
        return Optional.ofNullable(this.typeScale);
    }

    /**
     * (string) - Full data type specification as SQL/catalogString text
     * 
     */
    @Import(name="typeText")
    private @Nullable String typeText;

    /**
     * @return (string) - Full data type specification as SQL/catalogString text
     * 
     */
    public Optional<String> typeText() {
        return Optional.ofNullable(this.typeText);
    }

    private GetCleanRoomAssetTableColumn() {}

    private GetCleanRoomAssetTableColumn(GetCleanRoomAssetTableColumn $) {
        this.comment = $.comment;
        this.mask = $.mask;
        this.name = $.name;
        this.nullable = $.nullable;
        this.partitionIndex = $.partitionIndex;
        this.position = $.position;
        this.typeIntervalType = $.typeIntervalType;
        this.typeJson = $.typeJson;
        this.typeName = $.typeName;
        this.typePrecision = $.typePrecision;
        this.typeScale = $.typeScale;
        this.typeText = $.typeText;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCleanRoomAssetTableColumn defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCleanRoomAssetTableColumn $;

        public Builder() {
            $ = new GetCleanRoomAssetTableColumn();
        }

        public Builder(GetCleanRoomAssetTableColumn defaults) {
            $ = new GetCleanRoomAssetTableColumn(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment (string) - User-provided free-form text description
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable String comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param mask (ColumnMask)
         * 
         * @return builder
         * 
         */
        public Builder mask(@Nullable GetCleanRoomAssetTableColumnMask mask) {
            $.mask = mask;
            return this;
        }

        /**
         * @param name A fully qualified name that uniquely identifies the asset within the clean room.
         * This is also the name displayed in the clean room UI.
         * 
         * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
         * 
         * For notebooks, the name is the notebook file name.
         * For jar analyses, the name is the jar analysis name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param nullable (boolean) - Whether field may be Null (default: true)
         * 
         * @return builder
         * 
         */
        public Builder nullable(@Nullable Boolean nullable) {
            $.nullable = nullable;
            return this;
        }

        /**
         * @param partitionIndex (integer) - Partition index for column
         * 
         * @return builder
         * 
         */
        public Builder partitionIndex(@Nullable Integer partitionIndex) {
            $.partitionIndex = partitionIndex;
            return this;
        }

        /**
         * @param position (integer) - Ordinal position of column (starting at position 0)
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Integer position) {
            $.position = position;
            return this;
        }

        /**
         * @param typeIntervalType (string) - Format of IntervalType
         * 
         * @return builder
         * 
         */
        public Builder typeIntervalType(@Nullable String typeIntervalType) {
            $.typeIntervalType = typeIntervalType;
            return this;
        }

        /**
         * @param typeJson (string) - Full data type specification, JSON-serialized
         * 
         * @return builder
         * 
         */
        public Builder typeJson(@Nullable String typeJson) {
            $.typeJson = typeJson;
            return this;
        }

        /**
         * @param typeName (string) - . Possible values are: `ARRAY`, `BINARY`, `BOOLEAN`, `BYTE`, `CHAR`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `GEOGRAPHY`, `GEOMETRY`, `INT`, `INTERVAL`, `LONG`, `MAP`, `NULL`, `SHORT`, `STRING`, `STRUCT`, `TABLE_TYPE`, `TIMESTAMP`, `TIMESTAMP_NTZ`, `USER_DEFINED_TYPE`, `VARIANT`
         * 
         * @return builder
         * 
         */
        public Builder typeName(@Nullable String typeName) {
            $.typeName = typeName;
            return this;
        }

        /**
         * @param typePrecision (integer) - Digits of precision; required for DecimalTypes
         * 
         * @return builder
         * 
         */
        public Builder typePrecision(@Nullable Integer typePrecision) {
            $.typePrecision = typePrecision;
            return this;
        }

        /**
         * @param typeScale (integer) - Digits to right of decimal; Required for DecimalTypes
         * 
         * @return builder
         * 
         */
        public Builder typeScale(@Nullable Integer typeScale) {
            $.typeScale = typeScale;
            return this;
        }

        /**
         * @param typeText (string) - Full data type specification as SQL/catalogString text
         * 
         * @return builder
         * 
         */
        public Builder typeText(@Nullable String typeText) {
            $.typeText = typeText;
            return this;
        }

        public GetCleanRoomAssetTableColumn build() {
            return $;
        }
    }

}
