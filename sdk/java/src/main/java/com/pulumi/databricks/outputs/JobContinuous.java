// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class JobContinuous {
    /**
     * @return Indicate whether this continuous job is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pause_status` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pause_status`.
     * 
     */
    private @Nullable String pauseStatus;
    /**
     * @return Controls task level retry behaviour. Allowed values are:
     * * `NEVER` (default): The failed task will not be retried.
     * * `ON_FAILURE`: Retry a failed task if at least one other task in the job is still running its first attempt. When this condition is no longer met or the retry limit is reached, the job run is cancelled and a new run is started.
     * 
     */
    private @Nullable String taskRetryMode;

    private JobContinuous() {}
    /**
     * @return Indicate whether this continuous job is paused or not. Either `PAUSED` or `UNPAUSED`. When the `pause_status` field is omitted in the block, the server will default to using `UNPAUSED` as a value for `pause_status`.
     * 
     */
    public Optional<String> pauseStatus() {
        return Optional.ofNullable(this.pauseStatus);
    }
    /**
     * @return Controls task level retry behaviour. Allowed values are:
     * * `NEVER` (default): The failed task will not be retried.
     * * `ON_FAILURE`: Retry a failed task if at least one other task in the job is still running its first attempt. When this condition is no longer met or the retry limit is reached, the job run is cancelled and a new run is started.
     * 
     */
    public Optional<String> taskRetryMode() {
        return Optional.ofNullable(this.taskRetryMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobContinuous defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String pauseStatus;
        private @Nullable String taskRetryMode;
        public Builder() {}
        public Builder(JobContinuous defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.pauseStatus = defaults.pauseStatus;
    	      this.taskRetryMode = defaults.taskRetryMode;
        }

        @CustomType.Setter
        public Builder pauseStatus(@Nullable String pauseStatus) {

            this.pauseStatus = pauseStatus;
            return this;
        }
        @CustomType.Setter
        public Builder taskRetryMode(@Nullable String taskRetryMode) {

            this.taskRetryMode = taskRetryMode;
            return this;
        }
        public JobContinuous build() {
            final var _resultValue = new JobContinuous();
            _resultValue.pauseStatus = pauseStatus;
            _resultValue.taskRetryMode = taskRetryMode;
            return _resultValue;
        }
    }
}
