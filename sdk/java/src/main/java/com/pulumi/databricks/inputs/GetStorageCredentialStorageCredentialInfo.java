// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetStorageCredentialStorageCredentialInfoAwsIamRole;
import com.pulumi.databricks.inputs.GetStorageCredentialStorageCredentialInfoAzureManagedIdentity;
import com.pulumi.databricks.inputs.GetStorageCredentialStorageCredentialInfoAzureServicePrincipal;
import com.pulumi.databricks.inputs.GetStorageCredentialStorageCredentialInfoCloudflareApiToken;
import com.pulumi.databricks.inputs.GetStorageCredentialStorageCredentialInfoDatabricksGcpServiceAccount;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStorageCredentialStorageCredentialInfo extends com.pulumi.resources.InvokeArgs {

    public static final GetStorageCredentialStorageCredentialInfo Empty = new GetStorageCredentialStorageCredentialInfo();

    @Import(name="awsIamRole")
    private @Nullable GetStorageCredentialStorageCredentialInfoAwsIamRole awsIamRole;

    public Optional<GetStorageCredentialStorageCredentialInfoAwsIamRole> awsIamRole() {
        return Optional.ofNullable(this.awsIamRole);
    }

    @Import(name="azureManagedIdentity")
    private @Nullable GetStorageCredentialStorageCredentialInfoAzureManagedIdentity azureManagedIdentity;

    public Optional<GetStorageCredentialStorageCredentialInfoAzureManagedIdentity> azureManagedIdentity() {
        return Optional.ofNullable(this.azureManagedIdentity);
    }

    @Import(name="azureServicePrincipal")
    private @Nullable GetStorageCredentialStorageCredentialInfoAzureServicePrincipal azureServicePrincipal;

    public Optional<GetStorageCredentialStorageCredentialInfoAzureServicePrincipal> azureServicePrincipal() {
        return Optional.ofNullable(this.azureServicePrincipal);
    }

    @Import(name="cloudflareApiToken")
    private @Nullable GetStorageCredentialStorageCredentialInfoCloudflareApiToken cloudflareApiToken;

    public Optional<GetStorageCredentialStorageCredentialInfoCloudflareApiToken> cloudflareApiToken() {
        return Optional.ofNullable(this.cloudflareApiToken);
    }

    @Import(name="comment")
    private @Nullable String comment;

    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="createdAt")
    private @Nullable Integer createdAt;

    public Optional<Integer> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="createdBy")
    private @Nullable String createdBy;

    public Optional<String> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    @Import(name="databricksGcpServiceAccount")
    private @Nullable GetStorageCredentialStorageCredentialInfoDatabricksGcpServiceAccount databricksGcpServiceAccount;

    public Optional<GetStorageCredentialStorageCredentialInfoDatabricksGcpServiceAccount> databricksGcpServiceAccount() {
        return Optional.ofNullable(this.databricksGcpServiceAccount);
    }

    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Unique identifier of the parent Metastore.
     * 
     */
    @Import(name="metastoreId")
    private @Nullable String metastoreId;

    /**
     * @return Unique identifier of the parent Metastore.
     * 
     */
    public Optional<String> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }

    /**
     * The name of the storage credential
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the storage credential
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Username/groupname/sp application_id of the storage credential owner.
     * 
     */
    @Import(name="owner")
    private @Nullable String owner;

    /**
     * @return Username/groupname/sp application_id of the storage credential owner.
     * 
     */
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * Indicates whether the storage credential is only usable for read operations.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Boolean readOnly;

    /**
     * @return Indicates whether the storage credential is only usable for read operations.
     * 
     */
    public Optional<Boolean> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    @Import(name="updatedAt")
    private @Nullable Integer updatedAt;

    public Optional<Integer> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    @Import(name="updatedBy")
    private @Nullable String updatedBy;

    public Optional<String> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    @Import(name="usedForManagedStorage")
    private @Nullable Boolean usedForManagedStorage;

    public Optional<Boolean> usedForManagedStorage() {
        return Optional.ofNullable(this.usedForManagedStorage);
    }

    private GetStorageCredentialStorageCredentialInfo() {}

    private GetStorageCredentialStorageCredentialInfo(GetStorageCredentialStorageCredentialInfo $) {
        this.awsIamRole = $.awsIamRole;
        this.azureManagedIdentity = $.azureManagedIdentity;
        this.azureServicePrincipal = $.azureServicePrincipal;
        this.cloudflareApiToken = $.cloudflareApiToken;
        this.comment = $.comment;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.databricksGcpServiceAccount = $.databricksGcpServiceAccount;
        this.id = $.id;
        this.metastoreId = $.metastoreId;
        this.name = $.name;
        this.owner = $.owner;
        this.readOnly = $.readOnly;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
        this.usedForManagedStorage = $.usedForManagedStorage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStorageCredentialStorageCredentialInfo defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStorageCredentialStorageCredentialInfo $;

        public Builder() {
            $ = new GetStorageCredentialStorageCredentialInfo();
        }

        public Builder(GetStorageCredentialStorageCredentialInfo defaults) {
            $ = new GetStorageCredentialStorageCredentialInfo(Objects.requireNonNull(defaults));
        }

        public Builder awsIamRole(@Nullable GetStorageCredentialStorageCredentialInfoAwsIamRole awsIamRole) {
            $.awsIamRole = awsIamRole;
            return this;
        }

        public Builder azureManagedIdentity(@Nullable GetStorageCredentialStorageCredentialInfoAzureManagedIdentity azureManagedIdentity) {
            $.azureManagedIdentity = azureManagedIdentity;
            return this;
        }

        public Builder azureServicePrincipal(@Nullable GetStorageCredentialStorageCredentialInfoAzureServicePrincipal azureServicePrincipal) {
            $.azureServicePrincipal = azureServicePrincipal;
            return this;
        }

        public Builder cloudflareApiToken(@Nullable GetStorageCredentialStorageCredentialInfoCloudflareApiToken cloudflareApiToken) {
            $.cloudflareApiToken = cloudflareApiToken;
            return this;
        }

        public Builder comment(@Nullable String comment) {
            $.comment = comment;
            return this;
        }

        public Builder createdAt(@Nullable Integer createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdBy(@Nullable String createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        public Builder databricksGcpServiceAccount(@Nullable GetStorageCredentialStorageCredentialInfoDatabricksGcpServiceAccount databricksGcpServiceAccount) {
            $.databricksGcpServiceAccount = databricksGcpServiceAccount;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param metastoreId Unique identifier of the parent Metastore.
         * 
         * @return builder
         * 
         */
        public Builder metastoreId(@Nullable String metastoreId) {
            $.metastoreId = metastoreId;
            return this;
        }

        /**
         * @param name The name of the storage credential
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param owner Username/groupname/sp application_id of the storage credential owner.
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable String owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param readOnly Indicates whether the storage credential is only usable for read operations.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(@Nullable Boolean readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder updatedAt(@Nullable Integer updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedBy(@Nullable String updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        public Builder usedForManagedStorage(@Nullable Boolean usedForManagedStorage) {
            $.usedForManagedStorage = usedForManagedStorage;
            return this;
        }

        public GetStorageCredentialStorageCredentialInfo build() {
            return $;
        }
    }

}
