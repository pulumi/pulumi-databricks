// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusTriggeredUpdateProgressArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusTriggeredUpdateProgressArgs Empty = new DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusTriggeredUpdateProgressArgs();

    /**
     * (number) - The estimated time remaining to complete this update in seconds
     * 
     */
    @Import(name="estimatedCompletionTimeSeconds")
    private @Nullable Output<Double> estimatedCompletionTimeSeconds;

    /**
     * @return (number) - The estimated time remaining to complete this update in seconds
     * 
     */
    public Optional<Output<Double>> estimatedCompletionTimeSeconds() {
        return Optional.ofNullable(this.estimatedCompletionTimeSeconds);
    }

    /**
     * (integer) - The source table Delta version that was last processed by the pipeline. The pipeline may not
     * have completely processed this version yet
     * 
     */
    @Import(name="latestVersionCurrentlyProcessing")
    private @Nullable Output<Integer> latestVersionCurrentlyProcessing;

    /**
     * @return (integer) - The source table Delta version that was last processed by the pipeline. The pipeline may not
     * have completely processed this version yet
     * 
     */
    public Optional<Output<Integer>> latestVersionCurrentlyProcessing() {
        return Optional.ofNullable(this.latestVersionCurrentlyProcessing);
    }

    /**
     * (string) - The current phase of the data synchronization pipeline. Possible values are: `PROVISIONING_PHASE_INDEX_SCAN`, `PROVISIONING_PHASE_INDEX_SORT`, `PROVISIONING_PHASE_MAIN`
     * 
     */
    @Import(name="provisioningPhase")
    private @Nullable Output<String> provisioningPhase;

    /**
     * @return (string) - The current phase of the data synchronization pipeline. Possible values are: `PROVISIONING_PHASE_INDEX_SCAN`, `PROVISIONING_PHASE_INDEX_SORT`, `PROVISIONING_PHASE_MAIN`
     * 
     */
    public Optional<Output<String>> provisioningPhase() {
        return Optional.ofNullable(this.provisioningPhase);
    }

    /**
     * (number) - The completion ratio of this update. This is a number between 0 and 1
     * 
     */
    @Import(name="syncProgressCompletion")
    private @Nullable Output<Double> syncProgressCompletion;

    /**
     * @return (number) - The completion ratio of this update. This is a number between 0 and 1
     * 
     */
    public Optional<Output<Double>> syncProgressCompletion() {
        return Optional.ofNullable(this.syncProgressCompletion);
    }

    /**
     * (integer) - The number of rows that have been synced in this update
     * 
     */
    @Import(name="syncedRowCount")
    private @Nullable Output<Integer> syncedRowCount;

    /**
     * @return (integer) - The number of rows that have been synced in this update
     * 
     */
    public Optional<Output<Integer>> syncedRowCount() {
        return Optional.ofNullable(this.syncedRowCount);
    }

    /**
     * (integer) - The total number of rows that need to be synced in this update. This number may be an estimate
     * 
     */
    @Import(name="totalRowCount")
    private @Nullable Output<Integer> totalRowCount;

    /**
     * @return (integer) - The total number of rows that need to be synced in this update. This number may be an estimate
     * 
     */
    public Optional<Output<Integer>> totalRowCount() {
        return Optional.ofNullable(this.totalRowCount);
    }

    private DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusTriggeredUpdateProgressArgs() {}

    private DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusTriggeredUpdateProgressArgs(DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusTriggeredUpdateProgressArgs $) {
        this.estimatedCompletionTimeSeconds = $.estimatedCompletionTimeSeconds;
        this.latestVersionCurrentlyProcessing = $.latestVersionCurrentlyProcessing;
        this.provisioningPhase = $.provisioningPhase;
        this.syncProgressCompletion = $.syncProgressCompletion;
        this.syncedRowCount = $.syncedRowCount;
        this.totalRowCount = $.totalRowCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusTriggeredUpdateProgressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusTriggeredUpdateProgressArgs $;

        public Builder() {
            $ = new DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusTriggeredUpdateProgressArgs();
        }

        public Builder(DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusTriggeredUpdateProgressArgs defaults) {
            $ = new DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusTriggeredUpdateProgressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param estimatedCompletionTimeSeconds (number) - The estimated time remaining to complete this update in seconds
         * 
         * @return builder
         * 
         */
        public Builder estimatedCompletionTimeSeconds(@Nullable Output<Double> estimatedCompletionTimeSeconds) {
            $.estimatedCompletionTimeSeconds = estimatedCompletionTimeSeconds;
            return this;
        }

        /**
         * @param estimatedCompletionTimeSeconds (number) - The estimated time remaining to complete this update in seconds
         * 
         * @return builder
         * 
         */
        public Builder estimatedCompletionTimeSeconds(Double estimatedCompletionTimeSeconds) {
            return estimatedCompletionTimeSeconds(Output.of(estimatedCompletionTimeSeconds));
        }

        /**
         * @param latestVersionCurrentlyProcessing (integer) - The source table Delta version that was last processed by the pipeline. The pipeline may not
         * have completely processed this version yet
         * 
         * @return builder
         * 
         */
        public Builder latestVersionCurrentlyProcessing(@Nullable Output<Integer> latestVersionCurrentlyProcessing) {
            $.latestVersionCurrentlyProcessing = latestVersionCurrentlyProcessing;
            return this;
        }

        /**
         * @param latestVersionCurrentlyProcessing (integer) - The source table Delta version that was last processed by the pipeline. The pipeline may not
         * have completely processed this version yet
         * 
         * @return builder
         * 
         */
        public Builder latestVersionCurrentlyProcessing(Integer latestVersionCurrentlyProcessing) {
            return latestVersionCurrentlyProcessing(Output.of(latestVersionCurrentlyProcessing));
        }

        /**
         * @param provisioningPhase (string) - The current phase of the data synchronization pipeline. Possible values are: `PROVISIONING_PHASE_INDEX_SCAN`, `PROVISIONING_PHASE_INDEX_SORT`, `PROVISIONING_PHASE_MAIN`
         * 
         * @return builder
         * 
         */
        public Builder provisioningPhase(@Nullable Output<String> provisioningPhase) {
            $.provisioningPhase = provisioningPhase;
            return this;
        }

        /**
         * @param provisioningPhase (string) - The current phase of the data synchronization pipeline. Possible values are: `PROVISIONING_PHASE_INDEX_SCAN`, `PROVISIONING_PHASE_INDEX_SORT`, `PROVISIONING_PHASE_MAIN`
         * 
         * @return builder
         * 
         */
        public Builder provisioningPhase(String provisioningPhase) {
            return provisioningPhase(Output.of(provisioningPhase));
        }

        /**
         * @param syncProgressCompletion (number) - The completion ratio of this update. This is a number between 0 and 1
         * 
         * @return builder
         * 
         */
        public Builder syncProgressCompletion(@Nullable Output<Double> syncProgressCompletion) {
            $.syncProgressCompletion = syncProgressCompletion;
            return this;
        }

        /**
         * @param syncProgressCompletion (number) - The completion ratio of this update. This is a number between 0 and 1
         * 
         * @return builder
         * 
         */
        public Builder syncProgressCompletion(Double syncProgressCompletion) {
            return syncProgressCompletion(Output.of(syncProgressCompletion));
        }

        /**
         * @param syncedRowCount (integer) - The number of rows that have been synced in this update
         * 
         * @return builder
         * 
         */
        public Builder syncedRowCount(@Nullable Output<Integer> syncedRowCount) {
            $.syncedRowCount = syncedRowCount;
            return this;
        }

        /**
         * @param syncedRowCount (integer) - The number of rows that have been synced in this update
         * 
         * @return builder
         * 
         */
        public Builder syncedRowCount(Integer syncedRowCount) {
            return syncedRowCount(Output.of(syncedRowCount));
        }

        /**
         * @param totalRowCount (integer) - The total number of rows that need to be synced in this update. This number may be an estimate
         * 
         * @return builder
         * 
         */
        public Builder totalRowCount(@Nullable Output<Integer> totalRowCount) {
            $.totalRowCount = totalRowCount;
            return this;
        }

        /**
         * @param totalRowCount (integer) - The total number of rows that need to be synced in this update. This number may be an estimate
         * 
         * @return builder
         * 
         */
        public Builder totalRowCount(Integer totalRowCount) {
            return totalRowCount(Output.of(totalRowCount));
        }

        public DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusTriggeredUpdateProgressArgs build() {
            return $;
        }
    }

}
