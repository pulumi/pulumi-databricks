// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.JobContinuousArgs;
import com.pulumi.databricks.inputs.JobDbtTaskArgs;
import com.pulumi.databricks.inputs.JobDeploymentArgs;
import com.pulumi.databricks.inputs.JobEmailNotificationsArgs;
import com.pulumi.databricks.inputs.JobEnvironmentArgs;
import com.pulumi.databricks.inputs.JobGitSourceArgs;
import com.pulumi.databricks.inputs.JobHealthArgs;
import com.pulumi.databricks.inputs.JobJobClusterArgs;
import com.pulumi.databricks.inputs.JobLibraryArgs;
import com.pulumi.databricks.inputs.JobNewClusterArgs;
import com.pulumi.databricks.inputs.JobNotebookTaskArgs;
import com.pulumi.databricks.inputs.JobNotificationSettingsArgs;
import com.pulumi.databricks.inputs.JobParameterArgs;
import com.pulumi.databricks.inputs.JobPipelineTaskArgs;
import com.pulumi.databricks.inputs.JobPythonWheelTaskArgs;
import com.pulumi.databricks.inputs.JobQueueArgs;
import com.pulumi.databricks.inputs.JobRunAsArgs;
import com.pulumi.databricks.inputs.JobRunJobTaskArgs;
import com.pulumi.databricks.inputs.JobScheduleArgs;
import com.pulumi.databricks.inputs.JobSparkJarTaskArgs;
import com.pulumi.databricks.inputs.JobSparkPythonTaskArgs;
import com.pulumi.databricks.inputs.JobSparkSubmitTaskArgs;
import com.pulumi.databricks.inputs.JobTaskArgs;
import com.pulumi.databricks.inputs.JobTriggerArgs;
import com.pulumi.databricks.inputs.JobWebhookNotificationsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobState extends com.pulumi.resources.ResourceArgs {

    public static final JobState Empty = new JobState();

    /**
     * (Bool) Whenever the job is always running, like a Spark Streaming application, on every update restart the current active run or start it again, if nothing it is not running. False by default. Any job runs are started with `parameters` specified in `spark_jar_task` or `spark_submit_task` or `spark_python_task` or `notebook_task` blocks.
     * 
     * @deprecated
     * always_running will be replaced by control_run_state in the next major release.
     * 
     */
    @Deprecated /* always_running will be replaced by control_run_state in the next major release. */
    @Import(name="alwaysRunning")
    private @Nullable Output<Boolean> alwaysRunning;

    /**
     * @return (Bool) Whenever the job is always running, like a Spark Streaming application, on every update restart the current active run or start it again, if nothing it is not running. False by default. Any job runs are started with `parameters` specified in `spark_jar_task` or `spark_submit_task` or `spark_python_task` or `notebook_task` blocks.
     * 
     * @deprecated
     * always_running will be replaced by control_run_state in the next major release.
     * 
     */
    @Deprecated /* always_running will be replaced by control_run_state in the next major release. */
    public Optional<Output<Boolean>> alwaysRunning() {
        return Optional.ofNullable(this.alwaysRunning);
    }

    @Import(name="continuous")
    private @Nullable Output<JobContinuousArgs> continuous;

    public Optional<Output<JobContinuousArgs>> continuous() {
        return Optional.ofNullable(this.continuous);
    }

    /**
     * (Bool) If true, the Databricks provider will stop and start the job as needed to ensure that the active run for the job reflects the deployed configuration. For continuous jobs, the provider respects the `pause_status` by stopping the current active run. This flag cannot be set for non-continuous jobs.
     * 
     * When migrating from `always_running` to `control_run_state`, set `continuous` as follows:
     * 
     */
    @Import(name="controlRunState")
    private @Nullable Output<Boolean> controlRunState;

    /**
     * @return (Bool) If true, the Databricks provider will stop and start the job as needed to ensure that the active run for the job reflects the deployed configuration. For continuous jobs, the provider respects the `pause_status` by stopping the current active run. This flag cannot be set for non-continuous jobs.
     * 
     * When migrating from `always_running` to `control_run_state`, set `continuous` as follows:
     * 
     */
    public Optional<Output<Boolean>> controlRunState() {
        return Optional.ofNullable(this.controlRunState);
    }

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    @Import(name="dbtTask")
    private @Nullable Output<JobDbtTaskArgs> dbtTask;

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    public Optional<Output<JobDbtTaskArgs>> dbtTask() {
        return Optional.ofNullable(this.dbtTask);
    }

    @Import(name="deployment")
    private @Nullable Output<JobDeploymentArgs> deployment;

    public Optional<Output<JobDeploymentArgs>> deployment() {
        return Optional.ofNullable(this.deployment);
    }

    /**
     * An optional description for the job. The maximum length is 1024 characters in UTF-8 encoding.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description for the job. The maximum length is 1024 characters in UTF-8 encoding.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="editMode")
    private @Nullable Output<String> editMode;

    public Optional<Output<String>> editMode() {
        return Optional.ofNullable(this.editMode);
    }

    /**
     * (List) An optional set of email addresses notified when runs of this job begins, completes or fails. The default behavior is to not send any emails. This field is a block and is documented below.
     * 
     */
    @Import(name="emailNotifications")
    private @Nullable Output<JobEmailNotificationsArgs> emailNotifications;

    /**
     * @return (List) An optional set of email addresses notified when runs of this job begins, completes or fails. The default behavior is to not send any emails. This field is a block and is documented below.
     * 
     */
    public Optional<Output<JobEmailNotificationsArgs>> emailNotifications() {
        return Optional.ofNullable(this.emailNotifications);
    }

    @Import(name="environments")
    private @Nullable Output<List<JobEnvironmentArgs>> environments;

    public Optional<Output<List<JobEnvironmentArgs>>> environments() {
        return Optional.ofNullable(this.environments);
    }

    @Import(name="existingClusterId")
    private @Nullable Output<String> existingClusterId;

    public Optional<Output<String>> existingClusterId() {
        return Optional.ofNullable(this.existingClusterId);
    }

    @Import(name="format")
    private @Nullable Output<String> format;

    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * Specifices the a Git repository for task source code. See git_source Configuration Block below.
     * 
     */
    @Import(name="gitSource")
    private @Nullable Output<JobGitSourceArgs> gitSource;

    /**
     * @return Specifices the a Git repository for task source code. See git_source Configuration Block below.
     * 
     */
    public Optional<Output<JobGitSourceArgs>> gitSource() {
        return Optional.ofNullable(this.gitSource);
    }

    /**
     * An optional block that specifies the health conditions for the job (described below).
     * 
     */
    @Import(name="health")
    private @Nullable Output<JobHealthArgs> health;

    /**
     * @return An optional block that specifies the health conditions for the job (described below).
     * 
     */
    public Optional<Output<JobHealthArgs>> health() {
        return Optional.ofNullable(this.health);
    }

    /**
     * A list of job databricks.Cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings. *Multi-task syntax*
     * 
     */
    @Import(name="jobClusters")
    private @Nullable Output<List<JobJobClusterArgs>> jobClusters;

    /**
     * @return A list of job databricks.Cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings. *Multi-task syntax*
     * 
     */
    public Optional<Output<List<JobJobClusterArgs>>> jobClusters() {
        return Optional.ofNullable(this.jobClusters);
    }

    /**
     * (List) An optional list of libraries to be installed on the cluster that will execute the job. Please consult libraries section of the databricks.Cluster resource for more information.
     * 
     */
    @Import(name="libraries")
    private @Nullable Output<List<JobLibraryArgs>> libraries;

    /**
     * @return (List) An optional list of libraries to be installed on the cluster that will execute the job. Please consult libraries section of the databricks.Cluster resource for more information.
     * 
     */
    public Optional<Output<List<JobLibraryArgs>>> libraries() {
        return Optional.ofNullable(this.libraries);
    }

    /**
     * (Integer) An optional maximum allowed number of concurrent runs of the job. Defaults to *1*.
     * 
     */
    @Import(name="maxConcurrentRuns")
    private @Nullable Output<Integer> maxConcurrentRuns;

    /**
     * @return (Integer) An optional maximum allowed number of concurrent runs of the job. Defaults to *1*.
     * 
     */
    public Optional<Output<Integer>> maxConcurrentRuns() {
        return Optional.ofNullable(this.maxConcurrentRuns);
    }

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    @Import(name="maxRetries")
    private @Nullable Output<Integer> maxRetries;

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    public Optional<Output<Integer>> maxRetries() {
        return Optional.ofNullable(this.maxRetries);
    }

    /**
     * (Integer) An optional minimal interval in milliseconds between the start of the failed run and the subsequent retry run. The default behavior is that unsuccessful runs are immediately retried.
     * 
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    @Import(name="minRetryIntervalMillis")
    private @Nullable Output<Integer> minRetryIntervalMillis;

    /**
     * @return (Integer) An optional minimal interval in milliseconds between the start of the failed run and the subsequent retry run. The default behavior is that unsuccessful runs are immediately retried.
     * 
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    public Optional<Output<Integer>> minRetryIntervalMillis() {
        return Optional.ofNullable(this.minRetryIntervalMillis);
    }

    /**
     * An optional name for the job. The default value is Untitled.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return An optional name for the job. The default value is Untitled.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="newCluster")
    private @Nullable Output<JobNewClusterArgs> newCluster;

    public Optional<Output<JobNewClusterArgs>> newCluster() {
        return Optional.ofNullable(this.newCluster);
    }

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    @Import(name="notebookTask")
    private @Nullable Output<JobNotebookTaskArgs> notebookTask;

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    public Optional<Output<JobNotebookTaskArgs>> notebookTask() {
        return Optional.ofNullable(this.notebookTask);
    }

    /**
     * An optional block controlling the notification settings on the job level documented below.
     * 
     */
    @Import(name="notificationSettings")
    private @Nullable Output<JobNotificationSettingsArgs> notificationSettings;

    /**
     * @return An optional block controlling the notification settings on the job level documented below.
     * 
     */
    public Optional<Output<JobNotificationSettingsArgs>> notificationSettings() {
        return Optional.ofNullable(this.notificationSettings);
    }

    @Import(name="parameters")
    private @Nullable Output<List<JobParameterArgs>> parameters;

    public Optional<Output<List<JobParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    @Import(name="pipelineTask")
    private @Nullable Output<JobPipelineTaskArgs> pipelineTask;

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    public Optional<Output<JobPipelineTaskArgs>> pipelineTask() {
        return Optional.ofNullable(this.pipelineTask);
    }

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    @Import(name="pythonWheelTask")
    private @Nullable Output<JobPythonWheelTaskArgs> pythonWheelTask;

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    public Optional<Output<JobPythonWheelTaskArgs>> pythonWheelTask() {
        return Optional.ofNullable(this.pythonWheelTask);
    }

    @Import(name="queue")
    private @Nullable Output<JobQueueArgs> queue;

    public Optional<Output<JobQueueArgs>> queue() {
        return Optional.ofNullable(this.queue);
    }

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    @Import(name="retryOnTimeout")
    private @Nullable Output<Boolean> retryOnTimeout;

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    public Optional<Output<Boolean>> retryOnTimeout() {
        return Optional.ofNullable(this.retryOnTimeout);
    }

    /**
     * The user or the service prinicipal the job runs as. See run_as Configuration Block below.
     * 
     */
    @Import(name="runAs")
    private @Nullable Output<JobRunAsArgs> runAs;

    /**
     * @return The user or the service prinicipal the job runs as. See run_as Configuration Block below.
     * 
     */
    public Optional<Output<JobRunAsArgs>> runAs() {
        return Optional.ofNullable(this.runAs);
    }

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    @Import(name="runJobTask")
    private @Nullable Output<JobRunJobTaskArgs> runJobTask;

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    public Optional<Output<JobRunJobTaskArgs>> runJobTask() {
        return Optional.ofNullable(this.runJobTask);
    }

    /**
     * (List) An optional periodic schedule for this job. The default behavior is that the job runs when triggered by clicking Run Now in the Jobs UI or sending an API request to runNow. This field is a block and is documented below.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<JobScheduleArgs> schedule;

    /**
     * @return (List) An optional periodic schedule for this job. The default behavior is that the job runs when triggered by clicking Run Now in the Jobs UI or sending an API request to runNow. This field is a block and is documented below.
     * 
     */
    public Optional<Output<JobScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    @Import(name="sparkJarTask")
    private @Nullable Output<JobSparkJarTaskArgs> sparkJarTask;

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    public Optional<Output<JobSparkJarTaskArgs>> sparkJarTask() {
        return Optional.ofNullable(this.sparkJarTask);
    }

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    @Import(name="sparkPythonTask")
    private @Nullable Output<JobSparkPythonTaskArgs> sparkPythonTask;

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    public Optional<Output<JobSparkPythonTaskArgs>> sparkPythonTask() {
        return Optional.ofNullable(this.sparkPythonTask);
    }

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    @Import(name="sparkSubmitTask")
    private @Nullable Output<JobSparkSubmitTaskArgs> sparkSubmitTask;

    /**
     * @deprecated
     * should be used inside a task block and not inside a job block
     * 
     */
    @Deprecated /* should be used inside a task block and not inside a job block */
    public Optional<Output<JobSparkSubmitTaskArgs>> sparkSubmitTask() {
        return Optional.ofNullable(this.sparkSubmitTask);
    }

    /**
     * An optional map of the tags associated with the job. See tags Configuration Map
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return An optional map of the tags associated with the job. See tags Configuration Map
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A list of task specification that the job will execute. See task Configuration Block below.
     * 
     */
    @Import(name="tasks")
    private @Nullable Output<List<JobTaskArgs>> tasks;

    /**
     * @return A list of task specification that the job will execute. See task Configuration Block below.
     * 
     */
    public Optional<Output<List<JobTaskArgs>>> tasks() {
        return Optional.ofNullable(this.tasks);
    }

    /**
     * (Integer) An optional timeout applied to each run of this job. The default behavior is to have no timeout.
     * 
     */
    @Import(name="timeoutSeconds")
    private @Nullable Output<Integer> timeoutSeconds;

    /**
     * @return (Integer) An optional timeout applied to each run of this job. The default behavior is to have no timeout.
     * 
     */
    public Optional<Output<Integer>> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    /**
     * The conditions that triggers the job to start. See trigger Configuration Block below.
     * 
     */
    @Import(name="trigger")
    private @Nullable Output<JobTriggerArgs> trigger;

    /**
     * @return The conditions that triggers the job to start. See trigger Configuration Block below.
     * 
     */
    public Optional<Output<JobTriggerArgs>> trigger() {
        return Optional.ofNullable(this.trigger);
    }

    /**
     * URL of the job on the given workspace
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return URL of the job on the given workspace
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * (List) An optional set of system destinations (for example, webhook destinations or Slack) to be notified when runs of this job begins, completes or fails. The default behavior is to not send any notifications. This field is a block and is documented below.
     * 
     */
    @Import(name="webhookNotifications")
    private @Nullable Output<JobWebhookNotificationsArgs> webhookNotifications;

    /**
     * @return (List) An optional set of system destinations (for example, webhook destinations or Slack) to be notified when runs of this job begins, completes or fails. The default behavior is to not send any notifications. This field is a block and is documented below.
     * 
     */
    public Optional<Output<JobWebhookNotificationsArgs>> webhookNotifications() {
        return Optional.ofNullable(this.webhookNotifications);
    }

    private JobState() {}

    private JobState(JobState $) {
        this.alwaysRunning = $.alwaysRunning;
        this.continuous = $.continuous;
        this.controlRunState = $.controlRunState;
        this.dbtTask = $.dbtTask;
        this.deployment = $.deployment;
        this.description = $.description;
        this.editMode = $.editMode;
        this.emailNotifications = $.emailNotifications;
        this.environments = $.environments;
        this.existingClusterId = $.existingClusterId;
        this.format = $.format;
        this.gitSource = $.gitSource;
        this.health = $.health;
        this.jobClusters = $.jobClusters;
        this.libraries = $.libraries;
        this.maxConcurrentRuns = $.maxConcurrentRuns;
        this.maxRetries = $.maxRetries;
        this.minRetryIntervalMillis = $.minRetryIntervalMillis;
        this.name = $.name;
        this.newCluster = $.newCluster;
        this.notebookTask = $.notebookTask;
        this.notificationSettings = $.notificationSettings;
        this.parameters = $.parameters;
        this.pipelineTask = $.pipelineTask;
        this.pythonWheelTask = $.pythonWheelTask;
        this.queue = $.queue;
        this.retryOnTimeout = $.retryOnTimeout;
        this.runAs = $.runAs;
        this.runJobTask = $.runJobTask;
        this.schedule = $.schedule;
        this.sparkJarTask = $.sparkJarTask;
        this.sparkPythonTask = $.sparkPythonTask;
        this.sparkSubmitTask = $.sparkSubmitTask;
        this.tags = $.tags;
        this.tasks = $.tasks;
        this.timeoutSeconds = $.timeoutSeconds;
        this.trigger = $.trigger;
        this.url = $.url;
        this.webhookNotifications = $.webhookNotifications;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobState $;

        public Builder() {
            $ = new JobState();
        }

        public Builder(JobState defaults) {
            $ = new JobState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alwaysRunning (Bool) Whenever the job is always running, like a Spark Streaming application, on every update restart the current active run or start it again, if nothing it is not running. False by default. Any job runs are started with `parameters` specified in `spark_jar_task` or `spark_submit_task` or `spark_python_task` or `notebook_task` blocks.
         * 
         * @return builder
         * 
         * @deprecated
         * always_running will be replaced by control_run_state in the next major release.
         * 
         */
        @Deprecated /* always_running will be replaced by control_run_state in the next major release. */
        public Builder alwaysRunning(@Nullable Output<Boolean> alwaysRunning) {
            $.alwaysRunning = alwaysRunning;
            return this;
        }

        /**
         * @param alwaysRunning (Bool) Whenever the job is always running, like a Spark Streaming application, on every update restart the current active run or start it again, if nothing it is not running. False by default. Any job runs are started with `parameters` specified in `spark_jar_task` or `spark_submit_task` or `spark_python_task` or `notebook_task` blocks.
         * 
         * @return builder
         * 
         * @deprecated
         * always_running will be replaced by control_run_state in the next major release.
         * 
         */
        @Deprecated /* always_running will be replaced by control_run_state in the next major release. */
        public Builder alwaysRunning(Boolean alwaysRunning) {
            return alwaysRunning(Output.of(alwaysRunning));
        }

        public Builder continuous(@Nullable Output<JobContinuousArgs> continuous) {
            $.continuous = continuous;
            return this;
        }

        public Builder continuous(JobContinuousArgs continuous) {
            return continuous(Output.of(continuous));
        }

        /**
         * @param controlRunState (Bool) If true, the Databricks provider will stop and start the job as needed to ensure that the active run for the job reflects the deployed configuration. For continuous jobs, the provider respects the `pause_status` by stopping the current active run. This flag cannot be set for non-continuous jobs.
         * 
         * When migrating from `always_running` to `control_run_state`, set `continuous` as follows:
         * 
         * @return builder
         * 
         */
        public Builder controlRunState(@Nullable Output<Boolean> controlRunState) {
            $.controlRunState = controlRunState;
            return this;
        }

        /**
         * @param controlRunState (Bool) If true, the Databricks provider will stop and start the job as needed to ensure that the active run for the job reflects the deployed configuration. For continuous jobs, the provider respects the `pause_status` by stopping the current active run. This flag cannot be set for non-continuous jobs.
         * 
         * When migrating from `always_running` to `control_run_state`, set `continuous` as follows:
         * 
         * @return builder
         * 
         */
        public Builder controlRunState(Boolean controlRunState) {
            return controlRunState(Output.of(controlRunState));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder dbtTask(@Nullable Output<JobDbtTaskArgs> dbtTask) {
            $.dbtTask = dbtTask;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder dbtTask(JobDbtTaskArgs dbtTask) {
            return dbtTask(Output.of(dbtTask));
        }

        public Builder deployment(@Nullable Output<JobDeploymentArgs> deployment) {
            $.deployment = deployment;
            return this;
        }

        public Builder deployment(JobDeploymentArgs deployment) {
            return deployment(Output.of(deployment));
        }

        /**
         * @param description An optional description for the job. The maximum length is 1024 characters in UTF-8 encoding.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description for the job. The maximum length is 1024 characters in UTF-8 encoding.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder editMode(@Nullable Output<String> editMode) {
            $.editMode = editMode;
            return this;
        }

        public Builder editMode(String editMode) {
            return editMode(Output.of(editMode));
        }

        /**
         * @param emailNotifications (List) An optional set of email addresses notified when runs of this job begins, completes or fails. The default behavior is to not send any emails. This field is a block and is documented below.
         * 
         * @return builder
         * 
         */
        public Builder emailNotifications(@Nullable Output<JobEmailNotificationsArgs> emailNotifications) {
            $.emailNotifications = emailNotifications;
            return this;
        }

        /**
         * @param emailNotifications (List) An optional set of email addresses notified when runs of this job begins, completes or fails. The default behavior is to not send any emails. This field is a block and is documented below.
         * 
         * @return builder
         * 
         */
        public Builder emailNotifications(JobEmailNotificationsArgs emailNotifications) {
            return emailNotifications(Output.of(emailNotifications));
        }

        public Builder environments(@Nullable Output<List<JobEnvironmentArgs>> environments) {
            $.environments = environments;
            return this;
        }

        public Builder environments(List<JobEnvironmentArgs> environments) {
            return environments(Output.of(environments));
        }

        public Builder environments(JobEnvironmentArgs... environments) {
            return environments(List.of(environments));
        }

        public Builder existingClusterId(@Nullable Output<String> existingClusterId) {
            $.existingClusterId = existingClusterId;
            return this;
        }

        public Builder existingClusterId(String existingClusterId) {
            return existingClusterId(Output.of(existingClusterId));
        }

        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param gitSource Specifices the a Git repository for task source code. See git_source Configuration Block below.
         * 
         * @return builder
         * 
         */
        public Builder gitSource(@Nullable Output<JobGitSourceArgs> gitSource) {
            $.gitSource = gitSource;
            return this;
        }

        /**
         * @param gitSource Specifices the a Git repository for task source code. See git_source Configuration Block below.
         * 
         * @return builder
         * 
         */
        public Builder gitSource(JobGitSourceArgs gitSource) {
            return gitSource(Output.of(gitSource));
        }

        /**
         * @param health An optional block that specifies the health conditions for the job (described below).
         * 
         * @return builder
         * 
         */
        public Builder health(@Nullable Output<JobHealthArgs> health) {
            $.health = health;
            return this;
        }

        /**
         * @param health An optional block that specifies the health conditions for the job (described below).
         * 
         * @return builder
         * 
         */
        public Builder health(JobHealthArgs health) {
            return health(Output.of(health));
        }

        /**
         * @param jobClusters A list of job databricks.Cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings. *Multi-task syntax*
         * 
         * @return builder
         * 
         */
        public Builder jobClusters(@Nullable Output<List<JobJobClusterArgs>> jobClusters) {
            $.jobClusters = jobClusters;
            return this;
        }

        /**
         * @param jobClusters A list of job databricks.Cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings. *Multi-task syntax*
         * 
         * @return builder
         * 
         */
        public Builder jobClusters(List<JobJobClusterArgs> jobClusters) {
            return jobClusters(Output.of(jobClusters));
        }

        /**
         * @param jobClusters A list of job databricks.Cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings. *Multi-task syntax*
         * 
         * @return builder
         * 
         */
        public Builder jobClusters(JobJobClusterArgs... jobClusters) {
            return jobClusters(List.of(jobClusters));
        }

        /**
         * @param libraries (List) An optional list of libraries to be installed on the cluster that will execute the job. Please consult libraries section of the databricks.Cluster resource for more information.
         * 
         * @return builder
         * 
         */
        public Builder libraries(@Nullable Output<List<JobLibraryArgs>> libraries) {
            $.libraries = libraries;
            return this;
        }

        /**
         * @param libraries (List) An optional list of libraries to be installed on the cluster that will execute the job. Please consult libraries section of the databricks.Cluster resource for more information.
         * 
         * @return builder
         * 
         */
        public Builder libraries(List<JobLibraryArgs> libraries) {
            return libraries(Output.of(libraries));
        }

        /**
         * @param libraries (List) An optional list of libraries to be installed on the cluster that will execute the job. Please consult libraries section of the databricks.Cluster resource for more information.
         * 
         * @return builder
         * 
         */
        public Builder libraries(JobLibraryArgs... libraries) {
            return libraries(List.of(libraries));
        }

        /**
         * @param maxConcurrentRuns (Integer) An optional maximum allowed number of concurrent runs of the job. Defaults to *1*.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentRuns(@Nullable Output<Integer> maxConcurrentRuns) {
            $.maxConcurrentRuns = maxConcurrentRuns;
            return this;
        }

        /**
         * @param maxConcurrentRuns (Integer) An optional maximum allowed number of concurrent runs of the job. Defaults to *1*.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentRuns(Integer maxConcurrentRuns) {
            return maxConcurrentRuns(Output.of(maxConcurrentRuns));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder maxRetries(@Nullable Output<Integer> maxRetries) {
            $.maxRetries = maxRetries;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder maxRetries(Integer maxRetries) {
            return maxRetries(Output.of(maxRetries));
        }

        /**
         * @param minRetryIntervalMillis (Integer) An optional minimal interval in milliseconds between the start of the failed run and the subsequent retry run. The default behavior is that unsuccessful runs are immediately retried.
         * 
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder minRetryIntervalMillis(@Nullable Output<Integer> minRetryIntervalMillis) {
            $.minRetryIntervalMillis = minRetryIntervalMillis;
            return this;
        }

        /**
         * @param minRetryIntervalMillis (Integer) An optional minimal interval in milliseconds between the start of the failed run and the subsequent retry run. The default behavior is that unsuccessful runs are immediately retried.
         * 
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder minRetryIntervalMillis(Integer minRetryIntervalMillis) {
            return minRetryIntervalMillis(Output.of(minRetryIntervalMillis));
        }

        /**
         * @param name An optional name for the job. The default value is Untitled.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name An optional name for the job. The default value is Untitled.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder newCluster(@Nullable Output<JobNewClusterArgs> newCluster) {
            $.newCluster = newCluster;
            return this;
        }

        public Builder newCluster(JobNewClusterArgs newCluster) {
            return newCluster(Output.of(newCluster));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder notebookTask(@Nullable Output<JobNotebookTaskArgs> notebookTask) {
            $.notebookTask = notebookTask;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder notebookTask(JobNotebookTaskArgs notebookTask) {
            return notebookTask(Output.of(notebookTask));
        }

        /**
         * @param notificationSettings An optional block controlling the notification settings on the job level documented below.
         * 
         * @return builder
         * 
         */
        public Builder notificationSettings(@Nullable Output<JobNotificationSettingsArgs> notificationSettings) {
            $.notificationSettings = notificationSettings;
            return this;
        }

        /**
         * @param notificationSettings An optional block controlling the notification settings on the job level documented below.
         * 
         * @return builder
         * 
         */
        public Builder notificationSettings(JobNotificationSettingsArgs notificationSettings) {
            return notificationSettings(Output.of(notificationSettings));
        }

        public Builder parameters(@Nullable Output<List<JobParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(List<JobParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder parameters(JobParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder pipelineTask(@Nullable Output<JobPipelineTaskArgs> pipelineTask) {
            $.pipelineTask = pipelineTask;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder pipelineTask(JobPipelineTaskArgs pipelineTask) {
            return pipelineTask(Output.of(pipelineTask));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder pythonWheelTask(@Nullable Output<JobPythonWheelTaskArgs> pythonWheelTask) {
            $.pythonWheelTask = pythonWheelTask;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder pythonWheelTask(JobPythonWheelTaskArgs pythonWheelTask) {
            return pythonWheelTask(Output.of(pythonWheelTask));
        }

        public Builder queue(@Nullable Output<JobQueueArgs> queue) {
            $.queue = queue;
            return this;
        }

        public Builder queue(JobQueueArgs queue) {
            return queue(Output.of(queue));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder retryOnTimeout(@Nullable Output<Boolean> retryOnTimeout) {
            $.retryOnTimeout = retryOnTimeout;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder retryOnTimeout(Boolean retryOnTimeout) {
            return retryOnTimeout(Output.of(retryOnTimeout));
        }

        /**
         * @param runAs The user or the service prinicipal the job runs as. See run_as Configuration Block below.
         * 
         * @return builder
         * 
         */
        public Builder runAs(@Nullable Output<JobRunAsArgs> runAs) {
            $.runAs = runAs;
            return this;
        }

        /**
         * @param runAs The user or the service prinicipal the job runs as. See run_as Configuration Block below.
         * 
         * @return builder
         * 
         */
        public Builder runAs(JobRunAsArgs runAs) {
            return runAs(Output.of(runAs));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder runJobTask(@Nullable Output<JobRunJobTaskArgs> runJobTask) {
            $.runJobTask = runJobTask;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder runJobTask(JobRunJobTaskArgs runJobTask) {
            return runJobTask(Output.of(runJobTask));
        }

        /**
         * @param schedule (List) An optional periodic schedule for this job. The default behavior is that the job runs when triggered by clicking Run Now in the Jobs UI or sending an API request to runNow. This field is a block and is documented below.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<JobScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule (List) An optional periodic schedule for this job. The default behavior is that the job runs when triggered by clicking Run Now in the Jobs UI or sending an API request to runNow. This field is a block and is documented below.
         * 
         * @return builder
         * 
         */
        public Builder schedule(JobScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder sparkJarTask(@Nullable Output<JobSparkJarTaskArgs> sparkJarTask) {
            $.sparkJarTask = sparkJarTask;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder sparkJarTask(JobSparkJarTaskArgs sparkJarTask) {
            return sparkJarTask(Output.of(sparkJarTask));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder sparkPythonTask(@Nullable Output<JobSparkPythonTaskArgs> sparkPythonTask) {
            $.sparkPythonTask = sparkPythonTask;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder sparkPythonTask(JobSparkPythonTaskArgs sparkPythonTask) {
            return sparkPythonTask(Output.of(sparkPythonTask));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder sparkSubmitTask(@Nullable Output<JobSparkSubmitTaskArgs> sparkSubmitTask) {
            $.sparkSubmitTask = sparkSubmitTask;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * should be used inside a task block and not inside a job block
         * 
         */
        @Deprecated /* should be used inside a task block and not inside a job block */
        public Builder sparkSubmitTask(JobSparkSubmitTaskArgs sparkSubmitTask) {
            return sparkSubmitTask(Output.of(sparkSubmitTask));
        }

        /**
         * @param tags An optional map of the tags associated with the job. See tags Configuration Map
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An optional map of the tags associated with the job. See tags Configuration Map
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tasks A list of task specification that the job will execute. See task Configuration Block below.
         * 
         * @return builder
         * 
         */
        public Builder tasks(@Nullable Output<List<JobTaskArgs>> tasks) {
            $.tasks = tasks;
            return this;
        }

        /**
         * @param tasks A list of task specification that the job will execute. See task Configuration Block below.
         * 
         * @return builder
         * 
         */
        public Builder tasks(List<JobTaskArgs> tasks) {
            return tasks(Output.of(tasks));
        }

        /**
         * @param tasks A list of task specification that the job will execute. See task Configuration Block below.
         * 
         * @return builder
         * 
         */
        public Builder tasks(JobTaskArgs... tasks) {
            return tasks(List.of(tasks));
        }

        /**
         * @param timeoutSeconds (Integer) An optional timeout applied to each run of this job. The default behavior is to have no timeout.
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * @param timeoutSeconds (Integer) An optional timeout applied to each run of this job. The default behavior is to have no timeout.
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            return timeoutSeconds(Output.of(timeoutSeconds));
        }

        /**
         * @param trigger The conditions that triggers the job to start. See trigger Configuration Block below.
         * 
         * @return builder
         * 
         */
        public Builder trigger(@Nullable Output<JobTriggerArgs> trigger) {
            $.trigger = trigger;
            return this;
        }

        /**
         * @param trigger The conditions that triggers the job to start. See trigger Configuration Block below.
         * 
         * @return builder
         * 
         */
        public Builder trigger(JobTriggerArgs trigger) {
            return trigger(Output.of(trigger));
        }

        /**
         * @param url URL of the job on the given workspace
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL of the job on the given workspace
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param webhookNotifications (List) An optional set of system destinations (for example, webhook destinations or Slack) to be notified when runs of this job begins, completes or fails. The default behavior is to not send any notifications. This field is a block and is documented below.
         * 
         * @return builder
         * 
         */
        public Builder webhookNotifications(@Nullable Output<JobWebhookNotificationsArgs> webhookNotifications) {
            $.webhookNotifications = webhookNotifications;
            return this;
        }

        /**
         * @param webhookNotifications (List) An optional set of system destinations (for example, webhook destinations or Slack) to be notified when runs of this job begins, completes or fails. The default behavior is to not send any notifications. This field is a block and is documented below.
         * 
         * @return builder
         * 
         */
        public Builder webhookNotifications(JobWebhookNotificationsArgs webhookNotifications) {
            return webhookNotifications(Output.of(webhookNotifications));
        }

        public JobState build() {
            return $;
        }
    }

}
