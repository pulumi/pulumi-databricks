// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.ExternalLocationEncryptionDetailsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalLocationArgs Empty = new ExternalLocationArgs();

    @Import(name="accessPoint")
    private @Nullable Output<String> accessPoint;

    public Optional<Output<String>> accessPoint() {
        return Optional.ofNullable(this.accessPoint);
    }

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="credentialName", required=true)
    private Output<String> credentialName;

    public Output<String> credentialName() {
        return this.credentialName;
    }

    @Import(name="encryptionDetails")
    private @Nullable Output<ExternalLocationEncryptionDetailsArgs> encryptionDetails;

    public Optional<Output<ExternalLocationEncryptionDetailsArgs>> encryptionDetails() {
        return Optional.ofNullable(this.encryptionDetails);
    }

    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    @Import(name="forceUpdate")
    private @Nullable Output<Boolean> forceUpdate;

    public Optional<Output<Boolean>> forceUpdate() {
        return Optional.ofNullable(this.forceUpdate);
    }

    @Import(name="isolationMode")
    private @Nullable Output<String> isolationMode;

    public Optional<Output<String>> isolationMode() {
        return Optional.ofNullable(this.isolationMode);
    }

    @Import(name="metastoreId")
    private @Nullable Output<String> metastoreId;

    public Optional<Output<String>> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    @Import(name="skipValidation")
    private @Nullable Output<Boolean> skipValidation;

    public Optional<Output<Boolean>> skipValidation() {
        return Optional.ofNullable(this.skipValidation);
    }

    @Import(name="url", required=true)
    private Output<String> url;

    public Output<String> url() {
        return this.url;
    }

    private ExternalLocationArgs() {}

    private ExternalLocationArgs(ExternalLocationArgs $) {
        this.accessPoint = $.accessPoint;
        this.comment = $.comment;
        this.credentialName = $.credentialName;
        this.encryptionDetails = $.encryptionDetails;
        this.forceDestroy = $.forceDestroy;
        this.forceUpdate = $.forceUpdate;
        this.isolationMode = $.isolationMode;
        this.metastoreId = $.metastoreId;
        this.name = $.name;
        this.owner = $.owner;
        this.readOnly = $.readOnly;
        this.skipValidation = $.skipValidation;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalLocationArgs $;

        public Builder() {
            $ = new ExternalLocationArgs();
        }

        public Builder(ExternalLocationArgs defaults) {
            $ = new ExternalLocationArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessPoint(@Nullable Output<String> accessPoint) {
            $.accessPoint = accessPoint;
            return this;
        }

        public Builder accessPoint(String accessPoint) {
            return accessPoint(Output.of(accessPoint));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder credentialName(Output<String> credentialName) {
            $.credentialName = credentialName;
            return this;
        }

        public Builder credentialName(String credentialName) {
            return credentialName(Output.of(credentialName));
        }

        public Builder encryptionDetails(@Nullable Output<ExternalLocationEncryptionDetailsArgs> encryptionDetails) {
            $.encryptionDetails = encryptionDetails;
            return this;
        }

        public Builder encryptionDetails(ExternalLocationEncryptionDetailsArgs encryptionDetails) {
            return encryptionDetails(Output.of(encryptionDetails));
        }

        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        public Builder forceUpdate(@Nullable Output<Boolean> forceUpdate) {
            $.forceUpdate = forceUpdate;
            return this;
        }

        public Builder forceUpdate(Boolean forceUpdate) {
            return forceUpdate(Output.of(forceUpdate));
        }

        public Builder isolationMode(@Nullable Output<String> isolationMode) {
            $.isolationMode = isolationMode;
            return this;
        }

        public Builder isolationMode(String isolationMode) {
            return isolationMode(Output.of(isolationMode));
        }

        public Builder metastoreId(@Nullable Output<String> metastoreId) {
            $.metastoreId = metastoreId;
            return this;
        }

        public Builder metastoreId(String metastoreId) {
            return metastoreId(Output.of(metastoreId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        public Builder skipValidation(@Nullable Output<Boolean> skipValidation) {
            $.skipValidation = skipValidation;
            return this;
        }

        public Builder skipValidation(Boolean skipValidation) {
            return skipValidation(Output.of(skipValidation));
        }

        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ExternalLocationArgs build() {
            if ($.credentialName == null) {
                throw new MissingRequiredPropertyException("ExternalLocationArgs", "credentialName");
            }
            if ($.url == null) {
                throw new MissingRequiredPropertyException("ExternalLocationArgs", "url");
            }
            return $;
        }
    }

}
