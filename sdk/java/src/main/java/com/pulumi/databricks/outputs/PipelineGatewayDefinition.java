// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipelineGatewayDefinition {
    /**
     * @return Immutable. The Unity Catalog connection this gateway pipeline uses to communicate with the source.
     * 
     */
    private @Nullable String connectionId;
    /**
     * @return Required, Immutable. The name of the catalog for the gateway pipeline&#39;s storage location.
     * 
     */
    private @Nullable String gatewayStorageCatalog;
    /**
     * @return Required. The Unity Catalog-compatible naming for the gateway storage location. This is the destination to use for the data that is extracted by the gateway. Delta Live Tables system will automatically create the storage location under the catalog and schema.
     * 
     */
    private @Nullable String gatewayStorageName;
    /**
     * @return Required, Immutable. The name of the schema for the gateway pipelines&#39;s storage location.
     * 
     */
    private @Nullable String gatewayStorageSchema;

    private PipelineGatewayDefinition() {}
    /**
     * @return Immutable. The Unity Catalog connection this gateway pipeline uses to communicate with the source.
     * 
     */
    public Optional<String> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }
    /**
     * @return Required, Immutable. The name of the catalog for the gateway pipeline&#39;s storage location.
     * 
     */
    public Optional<String> gatewayStorageCatalog() {
        return Optional.ofNullable(this.gatewayStorageCatalog);
    }
    /**
     * @return Required. The Unity Catalog-compatible naming for the gateway storage location. This is the destination to use for the data that is extracted by the gateway. Delta Live Tables system will automatically create the storage location under the catalog and schema.
     * 
     */
    public Optional<String> gatewayStorageName() {
        return Optional.ofNullable(this.gatewayStorageName);
    }
    /**
     * @return Required, Immutable. The name of the schema for the gateway pipelines&#39;s storage location.
     * 
     */
    public Optional<String> gatewayStorageSchema() {
        return Optional.ofNullable(this.gatewayStorageSchema);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineGatewayDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String connectionId;
        private @Nullable String gatewayStorageCatalog;
        private @Nullable String gatewayStorageName;
        private @Nullable String gatewayStorageSchema;
        public Builder() {}
        public Builder(PipelineGatewayDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionId = defaults.connectionId;
    	      this.gatewayStorageCatalog = defaults.gatewayStorageCatalog;
    	      this.gatewayStorageName = defaults.gatewayStorageName;
    	      this.gatewayStorageSchema = defaults.gatewayStorageSchema;
        }

        @CustomType.Setter
        public Builder connectionId(@Nullable String connectionId) {

            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayStorageCatalog(@Nullable String gatewayStorageCatalog) {

            this.gatewayStorageCatalog = gatewayStorageCatalog;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayStorageName(@Nullable String gatewayStorageName) {

            this.gatewayStorageName = gatewayStorageName;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayStorageSchema(@Nullable String gatewayStorageSchema) {

            this.gatewayStorageSchema = gatewayStorageSchema;
            return this;
        }
        public PipelineGatewayDefinition build() {
            final var _resultValue = new PipelineGatewayDefinition();
            _resultValue.connectionId = connectionId;
            _resultValue.gatewayStorageCatalog = gatewayStorageCatalog;
            _resultValue.gatewayStorageName = gatewayStorageName;
            _resultValue.gatewayStorageSchema = gatewayStorageSchema;
            return _resultValue;
        }
    }
}
