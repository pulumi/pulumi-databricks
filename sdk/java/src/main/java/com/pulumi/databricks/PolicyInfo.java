// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.PolicyInfoArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.PolicyInfoState;
import com.pulumi.databricks.outputs.PolicyInfoColumnMask;
import com.pulumi.databricks.outputs.PolicyInfoMatchColumn;
import com.pulumi.databricks.outputs.PolicyInfoRowFilter;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * As of Pulumi v1.5, resources can be imported through configuration.
 * 
 * hcl
 * 
 * import {
 * 
 *   id = &#34;on_securable_type,on_securable_fullname,name&#34;
 * 
 *   to = databricks_policy_info.this
 * 
 * }
 * 
 * If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
 * 
 * ```sh
 * $ pulumi import databricks:index/policyInfo:PolicyInfo databricks_policy_info &#34;on_securable_type,on_securable_fullname,name&#34;
 * ```
 * 
 */
@ResourceType(type="databricks:index/policyInfo:PolicyInfo")
public class PolicyInfo extends com.pulumi.resources.CustomResource {
    /**
     * Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    @Export(name="columnMask", refs={PolicyInfoColumnMask.class}, tree="[0]")
    private Output</* @Nullable */ PolicyInfoColumnMask> columnMask;

    /**
     * @return Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    public Output<Optional<PolicyInfoColumnMask>> columnMask() {
        return Codegen.optional(this.columnMask);
    }
    /**
     * Optional description of the policy
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return Optional description of the policy
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * (integer) - Time at which the policy was created, in epoch milliseconds. Output only
     * 
     */
    @Export(name="createdAt", refs={Integer.class}, tree="[0]")
    private Output<Integer> createdAt;

    /**
     * @return (integer) - Time at which the policy was created, in epoch milliseconds. Output only
     * 
     */
    public Output<Integer> createdAt() {
        return this.createdAt;
    }
    /**
     * (string) - Username of the user who created the policy. Output only
     * 
     */
    @Export(name="createdBy", refs={String.class}, tree="[0]")
    private Output<String> createdBy;

    /**
     * @return (string) - Username of the user who created the policy. Output only
     * 
     */
    public Output<String> createdBy() {
        return this.createdBy;
    }
    /**
     * Optional list of user or group names that should be excluded from the policy
     * 
     */
    @Export(name="exceptPrincipals", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> exceptPrincipals;

    /**
     * @return Optional list of user or group names that should be excluded from the policy
     * 
     */
    public Output<Optional<List<String>>> exceptPrincipals() {
        return Codegen.optional(this.exceptPrincipals);
    }
    /**
     * Type of securables that the policy should take effect on.
     * Only `TABLE` is supported at this moment.
     * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    @Export(name="forSecurableType", refs={String.class}, tree="[0]")
    private Output<String> forSecurableType;

    /**
     * @return Type of securables that the policy should take effect on.
     * Only `TABLE` is supported at this moment.
     * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    public Output<String> forSecurableType() {
        return this.forSecurableType;
    }
    /**
     * Optional list of condition expressions used to match table columns.
     * Only valid when `for_securable_type` is `TABLE`.
     * When specified, the policy only applies to tables whose columns satisfy all match conditions
     * 
     */
    @Export(name="matchColumns", refs={List.class,PolicyInfoMatchColumn.class}, tree="[0,1]")
    private Output</* @Nullable */ List<PolicyInfoMatchColumn>> matchColumns;

    /**
     * @return Optional list of condition expressions used to match table columns.
     * Only valid when `for_securable_type` is `TABLE`.
     * When specified, the policy only applies to tables whose columns satisfy all match conditions
     * 
     */
    public Output<Optional<List<PolicyInfoMatchColumn>>> matchColumns() {
        return Codegen.optional(this.matchColumns);
    }
    /**
     * Name of the policy. Required on create and optional on update.
     * To rename the policy, set `name` to a different value on update
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the policy. Required on create and optional on update.
     * To rename the policy, set `name` to a different value on update
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Full name of the securable on which the policy is defined.
     * Required on create and ignored on update
     * 
     */
    @Export(name="onSecurableFullname", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> onSecurableFullname;

    /**
     * @return Full name of the securable on which the policy is defined.
     * Required on create and ignored on update
     * 
     */
    public Output<Optional<String>> onSecurableFullname() {
        return Codegen.optional(this.onSecurableFullname);
    }
    /**
     * Type of the securable on which the policy is defined.
     * Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
     * Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    @Export(name="onSecurableType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> onSecurableType;

    /**
     * @return Type of the securable on which the policy is defined.
     * Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
     * Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    public Output<Optional<String>> onSecurableType() {
        return Codegen.optional(this.onSecurableType);
    }
    /**
     * Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
     * 
     */
    @Export(name="policyType", refs={String.class}, tree="[0]")
    private Output<String> policyType;

    /**
     * @return Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
     * 
     */
    public Output<String> policyType() {
        return this.policyType;
    }
    /**
     * Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    @Export(name="rowFilter", refs={PolicyInfoRowFilter.class}, tree="[0]")
    private Output</* @Nullable */ PolicyInfoRowFilter> rowFilter;

    /**
     * @return Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    public Output<Optional<PolicyInfoRowFilter>> rowFilter() {
        return Codegen.optional(this.rowFilter);
    }
    /**
     * List of user or group names that the policy applies to.
     * Required on create and optional on update
     * 
     */
    @Export(name="toPrincipals", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> toPrincipals;

    /**
     * @return List of user or group names that the policy applies to.
     * Required on create and optional on update
     * 
     */
    public Output<List<String>> toPrincipals() {
        return this.toPrincipals;
    }
    /**
     * (integer) - Time at which the policy was last modified, in epoch milliseconds. Output only
     * 
     */
    @Export(name="updatedAt", refs={Integer.class}, tree="[0]")
    private Output<Integer> updatedAt;

    /**
     * @return (integer) - Time at which the policy was last modified, in epoch milliseconds. Output only
     * 
     */
    public Output<Integer> updatedAt() {
        return this.updatedAt;
    }
    /**
     * (string) - Username of the user who last modified the policy. Output only
     * 
     */
    @Export(name="updatedBy", refs={String.class}, tree="[0]")
    private Output<String> updatedBy;

    /**
     * @return (string) - Username of the user who last modified the policy. Output only
     * 
     */
    public Output<String> updatedBy() {
        return this.updatedBy;
    }
    /**
     * Optional condition when the policy should take effect
     * 
     */
    @Export(name="whenCondition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> whenCondition;

    /**
     * @return Optional condition when the policy should take effect
     * 
     */
    public Output<Optional<String>> whenCondition() {
        return Codegen.optional(this.whenCondition);
    }
    /**
     * Workspace ID of the resource
     * 
     */
    @Export(name="workspaceId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Output<Optional<String>> workspaceId() {
        return Codegen.optional(this.workspaceId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PolicyInfo(java.lang.String name) {
        this(name, PolicyInfoArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PolicyInfo(java.lang.String name, PolicyInfoArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PolicyInfo(java.lang.String name, PolicyInfoArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/policyInfo:PolicyInfo", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private PolicyInfo(java.lang.String name, Output<java.lang.String> id, @Nullable PolicyInfoState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/policyInfo:PolicyInfo", name, state, makeResourceOptions(options, id), false);
    }

    private static PolicyInfoArgs makeArgs(PolicyInfoArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PolicyInfoArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PolicyInfo get(java.lang.String name, Output<java.lang.String> id, @Nullable PolicyInfoState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PolicyInfo(name, id, state, options);
    }
}
