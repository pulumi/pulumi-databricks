// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.ModelServingConfigAutoCaptureConfigArgs;
import com.pulumi.databricks.inputs.ModelServingConfigServedEntityArgs;
import com.pulumi.databricks.inputs.ModelServingConfigServedModelArgs;
import com.pulumi.databricks.inputs.ModelServingConfigTrafficConfigArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelServingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelServingConfigArgs Empty = new ModelServingConfigArgs();

    /**
     * Configuration for Inference Tables which automatically logs requests and responses to Unity Catalog.
     * 
     */
    @Import(name="autoCaptureConfig")
    private @Nullable Output<ModelServingConfigAutoCaptureConfigArgs> autoCaptureConfig;

    /**
     * @return Configuration for Inference Tables which automatically logs requests and responses to Unity Catalog.
     * 
     */
    public Optional<Output<ModelServingConfigAutoCaptureConfigArgs>> autoCaptureConfig() {
        return Optional.ofNullable(this.autoCaptureConfig);
    }

    /**
     * A list of served entities for the endpoint to serve. A serving endpoint can have up to 10 served entities.
     * 
     */
    @Import(name="servedEntities")
    private @Nullable Output<List<ModelServingConfigServedEntityArgs>> servedEntities;

    /**
     * @return A list of served entities for the endpoint to serve. A serving endpoint can have up to 10 served entities.
     * 
     */
    public Optional<Output<List<ModelServingConfigServedEntityArgs>>> servedEntities() {
        return Optional.ofNullable(this.servedEntities);
    }

    /**
     * Each block represents a served model for the endpoint to serve. A model serving endpoint can have up to 10 served models.
     * 
     * @deprecated
     * Please use &#39;config.served_entities&#39; instead of &#39;config.served_models&#39;.
     * 
     */
    @Deprecated /* Please use 'config.served_entities' instead of 'config.served_models'. */
    @Import(name="servedModels")
    private @Nullable Output<List<ModelServingConfigServedModelArgs>> servedModels;

    /**
     * @return Each block represents a served model for the endpoint to serve. A model serving endpoint can have up to 10 served models.
     * 
     * @deprecated
     * Please use &#39;config.served_entities&#39; instead of &#39;config.served_models&#39;.
     * 
     */
    @Deprecated /* Please use 'config.served_entities' instead of 'config.served_models'. */
    public Optional<Output<List<ModelServingConfigServedModelArgs>>> servedModels() {
        return Optional.ofNullable(this.servedModels);
    }

    /**
     * A single block represents the traffic split configuration amongst the served models.
     * 
     */
    @Import(name="trafficConfig")
    private @Nullable Output<ModelServingConfigTrafficConfigArgs> trafficConfig;

    /**
     * @return A single block represents the traffic split configuration amongst the served models.
     * 
     */
    public Optional<Output<ModelServingConfigTrafficConfigArgs>> trafficConfig() {
        return Optional.ofNullable(this.trafficConfig);
    }

    private ModelServingConfigArgs() {}

    private ModelServingConfigArgs(ModelServingConfigArgs $) {
        this.autoCaptureConfig = $.autoCaptureConfig;
        this.servedEntities = $.servedEntities;
        this.servedModels = $.servedModels;
        this.trafficConfig = $.trafficConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelServingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelServingConfigArgs $;

        public Builder() {
            $ = new ModelServingConfigArgs();
        }

        public Builder(ModelServingConfigArgs defaults) {
            $ = new ModelServingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoCaptureConfig Configuration for Inference Tables which automatically logs requests and responses to Unity Catalog.
         * 
         * @return builder
         * 
         */
        public Builder autoCaptureConfig(@Nullable Output<ModelServingConfigAutoCaptureConfigArgs> autoCaptureConfig) {
            $.autoCaptureConfig = autoCaptureConfig;
            return this;
        }

        /**
         * @param autoCaptureConfig Configuration for Inference Tables which automatically logs requests and responses to Unity Catalog.
         * 
         * @return builder
         * 
         */
        public Builder autoCaptureConfig(ModelServingConfigAutoCaptureConfigArgs autoCaptureConfig) {
            return autoCaptureConfig(Output.of(autoCaptureConfig));
        }

        /**
         * @param servedEntities A list of served entities for the endpoint to serve. A serving endpoint can have up to 10 served entities.
         * 
         * @return builder
         * 
         */
        public Builder servedEntities(@Nullable Output<List<ModelServingConfigServedEntityArgs>> servedEntities) {
            $.servedEntities = servedEntities;
            return this;
        }

        /**
         * @param servedEntities A list of served entities for the endpoint to serve. A serving endpoint can have up to 10 served entities.
         * 
         * @return builder
         * 
         */
        public Builder servedEntities(List<ModelServingConfigServedEntityArgs> servedEntities) {
            return servedEntities(Output.of(servedEntities));
        }

        /**
         * @param servedEntities A list of served entities for the endpoint to serve. A serving endpoint can have up to 10 served entities.
         * 
         * @return builder
         * 
         */
        public Builder servedEntities(ModelServingConfigServedEntityArgs... servedEntities) {
            return servedEntities(List.of(servedEntities));
        }

        /**
         * @param servedModels Each block represents a served model for the endpoint to serve. A model serving endpoint can have up to 10 served models.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use &#39;config.served_entities&#39; instead of &#39;config.served_models&#39;.
         * 
         */
        @Deprecated /* Please use 'config.served_entities' instead of 'config.served_models'. */
        public Builder servedModels(@Nullable Output<List<ModelServingConfigServedModelArgs>> servedModels) {
            $.servedModels = servedModels;
            return this;
        }

        /**
         * @param servedModels Each block represents a served model for the endpoint to serve. A model serving endpoint can have up to 10 served models.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use &#39;config.served_entities&#39; instead of &#39;config.served_models&#39;.
         * 
         */
        @Deprecated /* Please use 'config.served_entities' instead of 'config.served_models'. */
        public Builder servedModels(List<ModelServingConfigServedModelArgs> servedModels) {
            return servedModels(Output.of(servedModels));
        }

        /**
         * @param servedModels Each block represents a served model for the endpoint to serve. A model serving endpoint can have up to 10 served models.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use &#39;config.served_entities&#39; instead of &#39;config.served_models&#39;.
         * 
         */
        @Deprecated /* Please use 'config.served_entities' instead of 'config.served_models'. */
        public Builder servedModels(ModelServingConfigServedModelArgs... servedModels) {
            return servedModels(List.of(servedModels));
        }

        /**
         * @param trafficConfig A single block represents the traffic split configuration amongst the served models.
         * 
         * @return builder
         * 
         */
        public Builder trafficConfig(@Nullable Output<ModelServingConfigTrafficConfigArgs> trafficConfig) {
            $.trafficConfig = trafficConfig;
            return this;
        }

        /**
         * @param trafficConfig A single block represents the traffic split configuration amongst the served models.
         * 
         * @return builder
         * 
         */
        public Builder trafficConfig(ModelServingConfigTrafficConfigArgs trafficConfig) {
            return trafficConfig(Output.of(trafficConfig));
        }

        public ModelServingConfigArgs build() {
            return $;
        }
    }

}
