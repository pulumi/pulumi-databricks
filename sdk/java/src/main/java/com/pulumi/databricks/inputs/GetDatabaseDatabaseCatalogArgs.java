// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDatabaseDatabaseCatalogArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDatabaseDatabaseCatalogArgs Empty = new GetDatabaseDatabaseCatalogArgs();

    /**
     * (boolean)
     * 
     */
    @Import(name="createDatabaseIfNotExists")
    private @Nullable Output<Boolean> createDatabaseIfNotExists;

    /**
     * @return (boolean)
     * 
     */
    public Optional<Output<Boolean>> createDatabaseIfNotExists() {
        return Optional.ofNullable(this.createDatabaseIfNotExists);
    }

    /**
     * (string) - The name of the DatabaseInstance housing the database
     * 
     */
    @Import(name="databaseInstanceName", required=true)
    private Output<String> databaseInstanceName;

    /**
     * @return (string) - The name of the DatabaseInstance housing the database
     * 
     */
    public Output<String> databaseInstanceName() {
        return this.databaseInstanceName;
    }

    /**
     * (string) - The name of the database (in a instance) associated with the catalog
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return (string) - The name of the database (in a instance) associated with the catalog
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The name of the catalog in UC
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the catalog in UC
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private GetDatabaseDatabaseCatalogArgs() {}

    private GetDatabaseDatabaseCatalogArgs(GetDatabaseDatabaseCatalogArgs $) {
        this.createDatabaseIfNotExists = $.createDatabaseIfNotExists;
        this.databaseInstanceName = $.databaseInstanceName;
        this.databaseName = $.databaseName;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatabaseDatabaseCatalogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatabaseDatabaseCatalogArgs $;

        public Builder() {
            $ = new GetDatabaseDatabaseCatalogArgs();
        }

        public Builder(GetDatabaseDatabaseCatalogArgs defaults) {
            $ = new GetDatabaseDatabaseCatalogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createDatabaseIfNotExists (boolean)
         * 
         * @return builder
         * 
         */
        public Builder createDatabaseIfNotExists(@Nullable Output<Boolean> createDatabaseIfNotExists) {
            $.createDatabaseIfNotExists = createDatabaseIfNotExists;
            return this;
        }

        /**
         * @param createDatabaseIfNotExists (boolean)
         * 
         * @return builder
         * 
         */
        public Builder createDatabaseIfNotExists(Boolean createDatabaseIfNotExists) {
            return createDatabaseIfNotExists(Output.of(createDatabaseIfNotExists));
        }

        /**
         * @param databaseInstanceName (string) - The name of the DatabaseInstance housing the database
         * 
         * @return builder
         * 
         */
        public Builder databaseInstanceName(Output<String> databaseInstanceName) {
            $.databaseInstanceName = databaseInstanceName;
            return this;
        }

        /**
         * @param databaseInstanceName (string) - The name of the DatabaseInstance housing the database
         * 
         * @return builder
         * 
         */
        public Builder databaseInstanceName(String databaseInstanceName) {
            return databaseInstanceName(Output.of(databaseInstanceName));
        }

        /**
         * @param databaseName (string) - The name of the database (in a instance) associated with the catalog
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName (string) - The name of the database (in a instance) associated with the catalog
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param name The name of the catalog in UC
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the catalog in UC
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GetDatabaseDatabaseCatalogArgs build() {
            if ($.databaseInstanceName == null) {
                throw new MissingRequiredPropertyException("GetDatabaseDatabaseCatalogArgs", "databaseInstanceName");
            }
            if ($.databaseName == null) {
                throw new MissingRequiredPropertyException("GetDatabaseDatabaseCatalogArgs", "databaseName");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetDatabaseDatabaseCatalogArgs", "name");
            }
            return $;
        }
    }

}
