// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExternalMetadatasExternalMetadata {
    /**
     * @return (list of string) - List of columns associated with the external metadata object
     * 
     */
    private @Nullable List<String> columns;
    /**
     * @return (string) - Time at which this external metadata object was created
     * 
     */
    private String createTime;
    /**
     * @return (string) - Username of external metadata object creator
     * 
     */
    private String createdBy;
    /**
     * @return (string) - User-provided free-form text description
     * 
     */
    private @Nullable String description;
    /**
     * @return (string) - Type of entity within the external system
     * 
     */
    private String entityType;
    /**
     * @return (string) - Unique identifier of the external metadata object
     * 
     */
    private String id;
    /**
     * @return (string) - Unique identifier of parent metastore
     * 
     */
    private String metastoreId;
    /**
     * @return (string) - Name of the external metadata object
     * 
     */
    private String name;
    /**
     * @return (string) - Owner of the external metadata object
     * 
     */
    private @Nullable String owner;
    /**
     * @return (object) - A map of key-value properties attached to the external metadata object
     * 
     */
    private @Nullable Map<String,String> properties;
    /**
     * @return (string) - Type of external system. Possible values are: `AMAZON_REDSHIFT`, `AZURE_SYNAPSE`, `CONFLUENT`, `DATABRICKS`, `GOOGLE_BIGQUERY`, `KAFKA`, `LOOKER`, `MICROSOFT_FABRIC`, `MICROSOFT_SQL_SERVER`, `MONGODB`, `MYSQL`, `ORACLE`, `OTHER`, `POSTGRESQL`, `POWER_BI`, `SALESFORCE`, `SAP`, `SERVICENOW`, `SNOWFLAKE`, `TABLEAU`, `TERADATA`, `WORKDAY`
     * 
     */
    private String systemType;
    /**
     * @return (string) - Time at which this external metadata object was last modified
     * 
     */
    private String updateTime;
    /**
     * @return (string) - Username of user who last modified external metadata object
     * 
     */
    private String updatedBy;
    /**
     * @return (string) - URL associated with the external metadata object
     * 
     */
    private @Nullable String url;

    private GetExternalMetadatasExternalMetadata() {}
    /**
     * @return (list of string) - List of columns associated with the external metadata object
     * 
     */
    public List<String> columns() {
        return this.columns == null ? List.of() : this.columns;
    }
    /**
     * @return (string) - Time at which this external metadata object was created
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return (string) - Username of external metadata object creator
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return (string) - User-provided free-form text description
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return (string) - Type of entity within the external system
     * 
     */
    public String entityType() {
        return this.entityType;
    }
    /**
     * @return (string) - Unique identifier of the external metadata object
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (string) - Unique identifier of parent metastore
     * 
     */
    public String metastoreId() {
        return this.metastoreId;
    }
    /**
     * @return (string) - Name of the external metadata object
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (string) - Owner of the external metadata object
     * 
     */
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }
    /**
     * @return (object) - A map of key-value properties attached to the external metadata object
     * 
     */
    public Map<String,String> properties() {
        return this.properties == null ? Map.of() : this.properties;
    }
    /**
     * @return (string) - Type of external system. Possible values are: `AMAZON_REDSHIFT`, `AZURE_SYNAPSE`, `CONFLUENT`, `DATABRICKS`, `GOOGLE_BIGQUERY`, `KAFKA`, `LOOKER`, `MICROSOFT_FABRIC`, `MICROSOFT_SQL_SERVER`, `MONGODB`, `MYSQL`, `ORACLE`, `OTHER`, `POSTGRESQL`, `POWER_BI`, `SALESFORCE`, `SAP`, `SERVICENOW`, `SNOWFLAKE`, `TABLEAU`, `TERADATA`, `WORKDAY`
     * 
     */
    public String systemType() {
        return this.systemType;
    }
    /**
     * @return (string) - Time at which this external metadata object was last modified
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return (string) - Username of user who last modified external metadata object
     * 
     */
    public String updatedBy() {
        return this.updatedBy;
    }
    /**
     * @return (string) - URL associated with the external metadata object
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalMetadatasExternalMetadata defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> columns;
        private String createTime;
        private String createdBy;
        private @Nullable String description;
        private String entityType;
        private String id;
        private String metastoreId;
        private String name;
        private @Nullable String owner;
        private @Nullable Map<String,String> properties;
        private String systemType;
        private String updateTime;
        private String updatedBy;
        private @Nullable String url;
        public Builder() {}
        public Builder(GetExternalMetadatasExternalMetadata defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columns = defaults.columns;
    	      this.createTime = defaults.createTime;
    	      this.createdBy = defaults.createdBy;
    	      this.description = defaults.description;
    	      this.entityType = defaults.entityType;
    	      this.id = defaults.id;
    	      this.metastoreId = defaults.metastoreId;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.properties = defaults.properties;
    	      this.systemType = defaults.systemType;
    	      this.updateTime = defaults.updateTime;
    	      this.updatedBy = defaults.updatedBy;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder columns(@Nullable List<String> columns) {

            this.columns = columns;
            return this;
        }
        public Builder columns(String... columns) {
            return columns(List.of(columns));
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetExternalMetadatasExternalMetadata", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetExternalMetadatasExternalMetadata", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder entityType(String entityType) {
            if (entityType == null) {
              throw new MissingRequiredPropertyException("GetExternalMetadatasExternalMetadata", "entityType");
            }
            this.entityType = entityType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExternalMetadatasExternalMetadata", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder metastoreId(String metastoreId) {
            if (metastoreId == null) {
              throw new MissingRequiredPropertyException("GetExternalMetadatasExternalMetadata", "metastoreId");
            }
            this.metastoreId = metastoreId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetExternalMetadatasExternalMetadata", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(@Nullable String owner) {

            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder properties(@Nullable Map<String,String> properties) {

            this.properties = properties;
            return this;
        }
        @CustomType.Setter
        public Builder systemType(String systemType) {
            if (systemType == null) {
              throw new MissingRequiredPropertyException("GetExternalMetadatasExternalMetadata", "systemType");
            }
            this.systemType = systemType;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetExternalMetadatasExternalMetadata", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBy(String updatedBy) {
            if (updatedBy == null) {
              throw new MissingRequiredPropertyException("GetExternalMetadatasExternalMetadata", "updatedBy");
            }
            this.updatedBy = updatedBy;
            return this;
        }
        @CustomType.Setter
        public Builder url(@Nullable String url) {

            this.url = url;
            return this;
        }
        public GetExternalMetadatasExternalMetadata build() {
            final var _resultValue = new GetExternalMetadatasExternalMetadata();
            _resultValue.columns = columns;
            _resultValue.createTime = createTime;
            _resultValue.createdBy = createdBy;
            _resultValue.description = description;
            _resultValue.entityType = entityType;
            _resultValue.id = id;
            _resultValue.metastoreId = metastoreId;
            _resultValue.name = name;
            _resultValue.owner = owner;
            _resultValue.properties = properties;
            _resultValue.systemType = systemType;
            _resultValue.updateTime = updateTime;
            _resultValue.updatedBy = updatedBy;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
