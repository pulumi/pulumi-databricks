// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SqlQueryScheduleDailyArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlQueryScheduleDailyArgs Empty = new SqlQueryScheduleDailyArgs();

    @Import(name="intervalDays", required=true)
    private Output<Integer> intervalDays;

    public Output<Integer> intervalDays() {
        return this.intervalDays;
    }

    @Import(name="timeOfDay", required=true)
    private Output<String> timeOfDay;

    public Output<String> timeOfDay() {
        return this.timeOfDay;
    }

    @Import(name="untilDate")
    private @Nullable Output<String> untilDate;

    public Optional<Output<String>> untilDate() {
        return Optional.ofNullable(this.untilDate);
    }

    private SqlQueryScheduleDailyArgs() {}

    private SqlQueryScheduleDailyArgs(SqlQueryScheduleDailyArgs $) {
        this.intervalDays = $.intervalDays;
        this.timeOfDay = $.timeOfDay;
        this.untilDate = $.untilDate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlQueryScheduleDailyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlQueryScheduleDailyArgs $;

        public Builder() {
            $ = new SqlQueryScheduleDailyArgs();
        }

        public Builder(SqlQueryScheduleDailyArgs defaults) {
            $ = new SqlQueryScheduleDailyArgs(Objects.requireNonNull(defaults));
        }

        public Builder intervalDays(Output<Integer> intervalDays) {
            $.intervalDays = intervalDays;
            return this;
        }

        public Builder intervalDays(Integer intervalDays) {
            return intervalDays(Output.of(intervalDays));
        }

        public Builder timeOfDay(Output<String> timeOfDay) {
            $.timeOfDay = timeOfDay;
            return this;
        }

        public Builder timeOfDay(String timeOfDay) {
            return timeOfDay(Output.of(timeOfDay));
        }

        public Builder untilDate(@Nullable Output<String> untilDate) {
            $.untilDate = untilDate;
            return this;
        }

        public Builder untilDate(String untilDate) {
            return untilDate(Output.of(untilDate));
        }

        public SqlQueryScheduleDailyArgs build() {
            if ($.intervalDays == null) {
                throw new MissingRequiredPropertyException("SqlQueryScheduleDailyArgs", "intervalDays");
            }
            if ($.timeOfDay == null) {
                throw new MissingRequiredPropertyException("SqlQueryScheduleDailyArgs", "timeOfDay");
            }
            return $;
        }
    }

}
