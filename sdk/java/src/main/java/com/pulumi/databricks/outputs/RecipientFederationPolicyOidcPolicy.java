// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class RecipientFederationPolicyOidcPolicy {
    /**
     * @return The allowed token audiences, as specified in the &#39;aud&#39; claim of federated tokens.
     * The audience identifier is intended to represent the recipient of the token.
     * Can be any non-empty string value. As long as the audience in the token matches at least one audience in the policy,
     * 
     */
    private @Nullable List<String> audiences;
    /**
     * @return The required token issuer, as specified in the &#39;iss&#39; claim of federated tokens
     * 
     */
    private String issuer;
    /**
     * @return The required token subject, as specified in the subject claim of federated tokens.
     * The subject claim identifies the identity of the user or machine accessing the resource.
     * Examples for Entra ID (AAD):
     * - U2M flow (group access): If the subject claim is `groups`, this must be the Object ID of the group in Entra ID.
     * - U2M flow (user access): If the subject claim is `oid`, this must be the Object ID of the user in Entra ID.
     * - M2M flow (OAuth App access): If the subject claim is `azp`, this must be the client ID of the OAuth app registered in Entra ID
     * 
     */
    private String subject;
    /**
     * @return The claim that contains the subject of the token.
     * Depending on the identity provider and the use case (U2M or M2M), this can vary:
     * - For Entra ID (AAD):
     * * U2M flow (group access): Use `groups`.
     * * U2M flow (user access): Use `oid`.
     * * M2M flow (OAuth App access): Use `azp`.
     * - For other IdPs, refer to the specific IdP documentation.
     * 
     * Supported `subject_claim` values are:
     * 
     */
    private String subjectClaim;

    private RecipientFederationPolicyOidcPolicy() {}
    /**
     * @return The allowed token audiences, as specified in the &#39;aud&#39; claim of federated tokens.
     * The audience identifier is intended to represent the recipient of the token.
     * Can be any non-empty string value. As long as the audience in the token matches at least one audience in the policy,
     * 
     */
    public List<String> audiences() {
        return this.audiences == null ? List.of() : this.audiences;
    }
    /**
     * @return The required token issuer, as specified in the &#39;iss&#39; claim of federated tokens
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return The required token subject, as specified in the subject claim of federated tokens.
     * The subject claim identifies the identity of the user or machine accessing the resource.
     * Examples for Entra ID (AAD):
     * - U2M flow (group access): If the subject claim is `groups`, this must be the Object ID of the group in Entra ID.
     * - U2M flow (user access): If the subject claim is `oid`, this must be the Object ID of the user in Entra ID.
     * - M2M flow (OAuth App access): If the subject claim is `azp`, this must be the client ID of the OAuth app registered in Entra ID
     * 
     */
    public String subject() {
        return this.subject;
    }
    /**
     * @return The claim that contains the subject of the token.
     * Depending on the identity provider and the use case (U2M or M2M), this can vary:
     * - For Entra ID (AAD):
     * * U2M flow (group access): Use `groups`.
     * * U2M flow (user access): Use `oid`.
     * * M2M flow (OAuth App access): Use `azp`.
     * - For other IdPs, refer to the specific IdP documentation.
     * 
     * Supported `subject_claim` values are:
     * 
     */
    public String subjectClaim() {
        return this.subjectClaim;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecipientFederationPolicyOidcPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> audiences;
        private String issuer;
        private String subject;
        private String subjectClaim;
        public Builder() {}
        public Builder(RecipientFederationPolicyOidcPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audiences = defaults.audiences;
    	      this.issuer = defaults.issuer;
    	      this.subject = defaults.subject;
    	      this.subjectClaim = defaults.subjectClaim;
        }

        @CustomType.Setter
        public Builder audiences(@Nullable List<String> audiences) {

            this.audiences = audiences;
            return this;
        }
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            if (issuer == null) {
              throw new MissingRequiredPropertyException("RecipientFederationPolicyOidcPolicy", "issuer");
            }
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder subject(String subject) {
            if (subject == null) {
              throw new MissingRequiredPropertyException("RecipientFederationPolicyOidcPolicy", "subject");
            }
            this.subject = subject;
            return this;
        }
        @CustomType.Setter
        public Builder subjectClaim(String subjectClaim) {
            if (subjectClaim == null) {
              throw new MissingRequiredPropertyException("RecipientFederationPolicyOidcPolicy", "subjectClaim");
            }
            this.subjectClaim = subjectClaim;
            return this;
        }
        public RecipientFederationPolicyOidcPolicy build() {
            final var _resultValue = new RecipientFederationPolicyOidcPolicy();
            _resultValue.audiences = audiences;
            _resultValue.issuer = issuer;
            _resultValue.subject = subject;
            _resultValue.subjectClaim = subjectClaim;
            return _resultValue;
        }
    }
}
