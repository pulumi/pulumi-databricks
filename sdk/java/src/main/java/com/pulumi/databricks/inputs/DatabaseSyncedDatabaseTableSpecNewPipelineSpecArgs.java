// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseSyncedDatabaseTableSpecNewPipelineSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseSyncedDatabaseTableSpecNewPipelineSpecArgs Empty = new DatabaseSyncedDatabaseTableSpecNewPipelineSpecArgs();

    /**
     * This field needs to be specified if the destination catalog is a managed postgres catalog.
     * 
     * UC catalog for the pipeline to store intermediate files (checkpoints, event logs etc).
     * This needs to be a standard catalog where the user has permissions to create Delta tables
     * 
     */
    @Import(name="storageCatalog")
    private @Nullable Output<String> storageCatalog;

    /**
     * @return This field needs to be specified if the destination catalog is a managed postgres catalog.
     * 
     * UC catalog for the pipeline to store intermediate files (checkpoints, event logs etc).
     * This needs to be a standard catalog where the user has permissions to create Delta tables
     * 
     */
    public Optional<Output<String>> storageCatalog() {
        return Optional.ofNullable(this.storageCatalog);
    }

    /**
     * This field needs to be specified if the destination catalog is a managed postgres catalog.
     * 
     * UC schema for the pipeline to store intermediate files (checkpoints, event logs etc).
     * This needs to be in the standard catalog where the user has permissions to create Delta tables
     * 
     */
    @Import(name="storageSchema")
    private @Nullable Output<String> storageSchema;

    /**
     * @return This field needs to be specified if the destination catalog is a managed postgres catalog.
     * 
     * UC schema for the pipeline to store intermediate files (checkpoints, event logs etc).
     * This needs to be in the standard catalog where the user has permissions to create Delta tables
     * 
     */
    public Optional<Output<String>> storageSchema() {
        return Optional.ofNullable(this.storageSchema);
    }

    private DatabaseSyncedDatabaseTableSpecNewPipelineSpecArgs() {}

    private DatabaseSyncedDatabaseTableSpecNewPipelineSpecArgs(DatabaseSyncedDatabaseTableSpecNewPipelineSpecArgs $) {
        this.storageCatalog = $.storageCatalog;
        this.storageSchema = $.storageSchema;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseSyncedDatabaseTableSpecNewPipelineSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseSyncedDatabaseTableSpecNewPipelineSpecArgs $;

        public Builder() {
            $ = new DatabaseSyncedDatabaseTableSpecNewPipelineSpecArgs();
        }

        public Builder(DatabaseSyncedDatabaseTableSpecNewPipelineSpecArgs defaults) {
            $ = new DatabaseSyncedDatabaseTableSpecNewPipelineSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param storageCatalog This field needs to be specified if the destination catalog is a managed postgres catalog.
         * 
         * UC catalog for the pipeline to store intermediate files (checkpoints, event logs etc).
         * This needs to be a standard catalog where the user has permissions to create Delta tables
         * 
         * @return builder
         * 
         */
        public Builder storageCatalog(@Nullable Output<String> storageCatalog) {
            $.storageCatalog = storageCatalog;
            return this;
        }

        /**
         * @param storageCatalog This field needs to be specified if the destination catalog is a managed postgres catalog.
         * 
         * UC catalog for the pipeline to store intermediate files (checkpoints, event logs etc).
         * This needs to be a standard catalog where the user has permissions to create Delta tables
         * 
         * @return builder
         * 
         */
        public Builder storageCatalog(String storageCatalog) {
            return storageCatalog(Output.of(storageCatalog));
        }

        /**
         * @param storageSchema This field needs to be specified if the destination catalog is a managed postgres catalog.
         * 
         * UC schema for the pipeline to store intermediate files (checkpoints, event logs etc).
         * This needs to be in the standard catalog where the user has permissions to create Delta tables
         * 
         * @return builder
         * 
         */
        public Builder storageSchema(@Nullable Output<String> storageSchema) {
            $.storageSchema = storageSchema;
            return this;
        }

        /**
         * @param storageSchema This field needs to be specified if the destination catalog is a managed postgres catalog.
         * 
         * UC schema for the pipeline to store intermediate files (checkpoints, event logs etc).
         * This needs to be in the standard catalog where the user has permissions to create Delta tables
         * 
         * @return builder
         * 
         */
        public Builder storageSchema(String storageSchema) {
            return storageSchema(Output.of(storageSchema));
        }

        public DatabaseSyncedDatabaseTableSpecNewPipelineSpecArgs build() {
            return $;
        }
    }

}
