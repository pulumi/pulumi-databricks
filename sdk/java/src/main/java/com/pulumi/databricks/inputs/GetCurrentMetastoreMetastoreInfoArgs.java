// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCurrentMetastoreMetastoreInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCurrentMetastoreMetastoreInfoArgs Empty = new GetCurrentMetastoreMetastoreInfoArgs();

    @Import(name="cloud")
    private @Nullable Output<String> cloud;

    public Optional<Output<String>> cloud() {
        return Optional.ofNullable(this.cloud);
    }

    /**
     * Timestamp (in milliseconds) when the current metastore was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<Integer> createdAt;

    /**
     * @return Timestamp (in milliseconds) when the current metastore was created.
     * 
     */
    public Optional<Output<Integer>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * the ID of the identity that created the current metastore.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return the ID of the identity that created the current metastore.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * the ID of the default data access configuration.
     * 
     */
    @Import(name="defaultDataAccessConfigId")
    private @Nullable Output<String> defaultDataAccessConfigId;

    /**
     * @return the ID of the default data access configuration.
     * 
     */
    public Optional<Output<String>> defaultDataAccessConfigId() {
        return Optional.ofNullable(this.defaultDataAccessConfigId);
    }

    /**
     * The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing.
     * 
     */
    @Import(name="deltaSharingOrganizationName")
    private @Nullable Output<String> deltaSharingOrganizationName;

    /**
     * @return The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing.
     * 
     */
    public Optional<Output<String>> deltaSharingOrganizationName() {
        return Optional.ofNullable(this.deltaSharingOrganizationName);
    }

    /**
     * the expiration duration in seconds on recipient data access tokens.
     * 
     */
    @Import(name="deltaSharingRecipientTokenLifetimeInSeconds")
    private @Nullable Output<Integer> deltaSharingRecipientTokenLifetimeInSeconds;

    /**
     * @return the expiration duration in seconds on recipient data access tokens.
     * 
     */
    public Optional<Output<Integer>> deltaSharingRecipientTokenLifetimeInSeconds() {
        return Optional.ofNullable(this.deltaSharingRecipientTokenLifetimeInSeconds);
    }

    /**
     * Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL.
     * 
     */
    @Import(name="deltaSharingScope")
    private @Nullable Output<String> deltaSharingScope;

    /**
     * @return Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL.
     * 
     */
    public Optional<Output<String>> deltaSharingScope() {
        return Optional.ofNullable(this.deltaSharingScope);
    }

    /**
     * Identifier in form of `&lt;cloud&gt;:&lt;region&gt;:&lt;metastore_id&gt;` for use in Databricks to Databricks Delta Sharing.
     * 
     */
    @Import(name="globalMetastoreId")
    private @Nullable Output<String> globalMetastoreId;

    /**
     * @return Identifier in form of `&lt;cloud&gt;:&lt;region&gt;:&lt;metastore_id&gt;` for use in Databricks to Databricks Delta Sharing.
     * 
     */
    public Optional<Output<String>> globalMetastoreId() {
        return Optional.ofNullable(this.globalMetastoreId);
    }

    /**
     * Metastore ID.
     * 
     */
    @Import(name="metastoreId")
    private @Nullable Output<String> metastoreId;

    /**
     * @return Metastore ID.
     * 
     */
    public Optional<Output<String>> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }

    /**
     * Name of metastore.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of metastore.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Username/group name/sp application_id of the metastore owner.
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return Username/group name/sp application_id of the metastore owner.
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * the version of the privilege model used by the metastore.
     * 
     */
    @Import(name="privilegeModelVersion")
    private @Nullable Output<String> privilegeModelVersion;

    /**
     * @return the version of the privilege model used by the metastore.
     * 
     */
    public Optional<Output<String>> privilegeModelVersion() {
        return Optional.ofNullable(this.privilegeModelVersion);
    }

    /**
     * (Mandatory for account-level) The region of the metastore.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return (Mandatory for account-level) The region of the metastore.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Path on cloud storage account, where managed `databricks.Table` are stored.
     * 
     */
    @Import(name="storageRoot")
    private @Nullable Output<String> storageRoot;

    /**
     * @return Path on cloud storage account, where managed `databricks.Table` are stored.
     * 
     */
    public Optional<Output<String>> storageRoot() {
        return Optional.ofNullable(this.storageRoot);
    }

    /**
     * ID of a storage credential used for the `storage_root`.
     * 
     */
    @Import(name="storageRootCredentialId")
    private @Nullable Output<String> storageRootCredentialId;

    /**
     * @return ID of a storage credential used for the `storage_root`.
     * 
     */
    public Optional<Output<String>> storageRootCredentialId() {
        return Optional.ofNullable(this.storageRootCredentialId);
    }

    /**
     * Name of a storage credential used for the `storage_root`.
     * 
     */
    @Import(name="storageRootCredentialName")
    private @Nullable Output<String> storageRootCredentialName;

    /**
     * @return Name of a storage credential used for the `storage_root`.
     * 
     */
    public Optional<Output<String>> storageRootCredentialName() {
        return Optional.ofNullable(this.storageRootCredentialName);
    }

    /**
     * Timestamp (in milliseconds) when the current metastore was updated.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<Integer> updatedAt;

    /**
     * @return Timestamp (in milliseconds) when the current metastore was updated.
     * 
     */
    public Optional<Output<Integer>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * the ID of the identity that updated the current metastore.
     * 
     */
    @Import(name="updatedBy")
    private @Nullable Output<String> updatedBy;

    /**
     * @return the ID of the identity that updated the current metastore.
     * 
     */
    public Optional<Output<String>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    private GetCurrentMetastoreMetastoreInfoArgs() {}

    private GetCurrentMetastoreMetastoreInfoArgs(GetCurrentMetastoreMetastoreInfoArgs $) {
        this.cloud = $.cloud;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.defaultDataAccessConfigId = $.defaultDataAccessConfigId;
        this.deltaSharingOrganizationName = $.deltaSharingOrganizationName;
        this.deltaSharingRecipientTokenLifetimeInSeconds = $.deltaSharingRecipientTokenLifetimeInSeconds;
        this.deltaSharingScope = $.deltaSharingScope;
        this.globalMetastoreId = $.globalMetastoreId;
        this.metastoreId = $.metastoreId;
        this.name = $.name;
        this.owner = $.owner;
        this.privilegeModelVersion = $.privilegeModelVersion;
        this.region = $.region;
        this.storageRoot = $.storageRoot;
        this.storageRootCredentialId = $.storageRootCredentialId;
        this.storageRootCredentialName = $.storageRootCredentialName;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCurrentMetastoreMetastoreInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCurrentMetastoreMetastoreInfoArgs $;

        public Builder() {
            $ = new GetCurrentMetastoreMetastoreInfoArgs();
        }

        public Builder(GetCurrentMetastoreMetastoreInfoArgs defaults) {
            $ = new GetCurrentMetastoreMetastoreInfoArgs(Objects.requireNonNull(defaults));
        }

        public Builder cloud(@Nullable Output<String> cloud) {
            $.cloud = cloud;
            return this;
        }

        public Builder cloud(String cloud) {
            return cloud(Output.of(cloud));
        }

        /**
         * @param createdAt Timestamp (in milliseconds) when the current metastore was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<Integer> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Timestamp (in milliseconds) when the current metastore was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(Integer createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy the ID of the identity that created the current metastore.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy the ID of the identity that created the current metastore.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param defaultDataAccessConfigId the ID of the default data access configuration.
         * 
         * @return builder
         * 
         */
        public Builder defaultDataAccessConfigId(@Nullable Output<String> defaultDataAccessConfigId) {
            $.defaultDataAccessConfigId = defaultDataAccessConfigId;
            return this;
        }

        /**
         * @param defaultDataAccessConfigId the ID of the default data access configuration.
         * 
         * @return builder
         * 
         */
        public Builder defaultDataAccessConfigId(String defaultDataAccessConfigId) {
            return defaultDataAccessConfigId(Output.of(defaultDataAccessConfigId));
        }

        /**
         * @param deltaSharingOrganizationName The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing.
         * 
         * @return builder
         * 
         */
        public Builder deltaSharingOrganizationName(@Nullable Output<String> deltaSharingOrganizationName) {
            $.deltaSharingOrganizationName = deltaSharingOrganizationName;
            return this;
        }

        /**
         * @param deltaSharingOrganizationName The organization name of a Delta Sharing entity. This field is used for Databricks to Databricks sharing.
         * 
         * @return builder
         * 
         */
        public Builder deltaSharingOrganizationName(String deltaSharingOrganizationName) {
            return deltaSharingOrganizationName(Output.of(deltaSharingOrganizationName));
        }

        /**
         * @param deltaSharingRecipientTokenLifetimeInSeconds the expiration duration in seconds on recipient data access tokens.
         * 
         * @return builder
         * 
         */
        public Builder deltaSharingRecipientTokenLifetimeInSeconds(@Nullable Output<Integer> deltaSharingRecipientTokenLifetimeInSeconds) {
            $.deltaSharingRecipientTokenLifetimeInSeconds = deltaSharingRecipientTokenLifetimeInSeconds;
            return this;
        }

        /**
         * @param deltaSharingRecipientTokenLifetimeInSeconds the expiration duration in seconds on recipient data access tokens.
         * 
         * @return builder
         * 
         */
        public Builder deltaSharingRecipientTokenLifetimeInSeconds(Integer deltaSharingRecipientTokenLifetimeInSeconds) {
            return deltaSharingRecipientTokenLifetimeInSeconds(Output.of(deltaSharingRecipientTokenLifetimeInSeconds));
        }

        /**
         * @param deltaSharingScope Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL.
         * 
         * @return builder
         * 
         */
        public Builder deltaSharingScope(@Nullable Output<String> deltaSharingScope) {
            $.deltaSharingScope = deltaSharingScope;
            return this;
        }

        /**
         * @param deltaSharingScope Used to enable delta sharing on the metastore. Valid values: INTERNAL, INTERNAL_AND_EXTERNAL.
         * 
         * @return builder
         * 
         */
        public Builder deltaSharingScope(String deltaSharingScope) {
            return deltaSharingScope(Output.of(deltaSharingScope));
        }

        /**
         * @param globalMetastoreId Identifier in form of `&lt;cloud&gt;:&lt;region&gt;:&lt;metastore_id&gt;` for use in Databricks to Databricks Delta Sharing.
         * 
         * @return builder
         * 
         */
        public Builder globalMetastoreId(@Nullable Output<String> globalMetastoreId) {
            $.globalMetastoreId = globalMetastoreId;
            return this;
        }

        /**
         * @param globalMetastoreId Identifier in form of `&lt;cloud&gt;:&lt;region&gt;:&lt;metastore_id&gt;` for use in Databricks to Databricks Delta Sharing.
         * 
         * @return builder
         * 
         */
        public Builder globalMetastoreId(String globalMetastoreId) {
            return globalMetastoreId(Output.of(globalMetastoreId));
        }

        /**
         * @param metastoreId Metastore ID.
         * 
         * @return builder
         * 
         */
        public Builder metastoreId(@Nullable Output<String> metastoreId) {
            $.metastoreId = metastoreId;
            return this;
        }

        /**
         * @param metastoreId Metastore ID.
         * 
         * @return builder
         * 
         */
        public Builder metastoreId(String metastoreId) {
            return metastoreId(Output.of(metastoreId));
        }

        /**
         * @param name Name of metastore.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of metastore.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param owner Username/group name/sp application_id of the metastore owner.
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner Username/group name/sp application_id of the metastore owner.
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param privilegeModelVersion the version of the privilege model used by the metastore.
         * 
         * @return builder
         * 
         */
        public Builder privilegeModelVersion(@Nullable Output<String> privilegeModelVersion) {
            $.privilegeModelVersion = privilegeModelVersion;
            return this;
        }

        /**
         * @param privilegeModelVersion the version of the privilege model used by the metastore.
         * 
         * @return builder
         * 
         */
        public Builder privilegeModelVersion(String privilegeModelVersion) {
            return privilegeModelVersion(Output.of(privilegeModelVersion));
        }

        /**
         * @param region (Mandatory for account-level) The region of the metastore.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region (Mandatory for account-level) The region of the metastore.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param storageRoot Path on cloud storage account, where managed `databricks.Table` are stored.
         * 
         * @return builder
         * 
         */
        public Builder storageRoot(@Nullable Output<String> storageRoot) {
            $.storageRoot = storageRoot;
            return this;
        }

        /**
         * @param storageRoot Path on cloud storage account, where managed `databricks.Table` are stored.
         * 
         * @return builder
         * 
         */
        public Builder storageRoot(String storageRoot) {
            return storageRoot(Output.of(storageRoot));
        }

        /**
         * @param storageRootCredentialId ID of a storage credential used for the `storage_root`.
         * 
         * @return builder
         * 
         */
        public Builder storageRootCredentialId(@Nullable Output<String> storageRootCredentialId) {
            $.storageRootCredentialId = storageRootCredentialId;
            return this;
        }

        /**
         * @param storageRootCredentialId ID of a storage credential used for the `storage_root`.
         * 
         * @return builder
         * 
         */
        public Builder storageRootCredentialId(String storageRootCredentialId) {
            return storageRootCredentialId(Output.of(storageRootCredentialId));
        }

        /**
         * @param storageRootCredentialName Name of a storage credential used for the `storage_root`.
         * 
         * @return builder
         * 
         */
        public Builder storageRootCredentialName(@Nullable Output<String> storageRootCredentialName) {
            $.storageRootCredentialName = storageRootCredentialName;
            return this;
        }

        /**
         * @param storageRootCredentialName Name of a storage credential used for the `storage_root`.
         * 
         * @return builder
         * 
         */
        public Builder storageRootCredentialName(String storageRootCredentialName) {
            return storageRootCredentialName(Output.of(storageRootCredentialName));
        }

        /**
         * @param updatedAt Timestamp (in milliseconds) when the current metastore was updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<Integer> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Timestamp (in milliseconds) when the current metastore was updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(Integer updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param updatedBy the ID of the identity that updated the current metastore.
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(@Nullable Output<String> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        /**
         * @param updatedBy the ID of the identity that updated the current metastore.
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(String updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        public GetCurrentMetastoreMetastoreInfoArgs build() {
            return $;
        }
    }

}
