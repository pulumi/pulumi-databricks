// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetExternalMetadataPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetExternalMetadataPlainArgs Empty = new GetExternalMetadataPlainArgs();

    /**
     * (list of string) - List of columns associated with the external metadata object
     * 
     */
    @Import(name="columns")
    private @Nullable List<String> columns;

    /**
     * @return (list of string) - List of columns associated with the external metadata object
     * 
     */
    public Optional<List<String>> columns() {
        return Optional.ofNullable(this.columns);
    }

    /**
     * (string) - User-provided free-form text description
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return (string) - User-provided free-form text description
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (string) - Type of entity within the external system
     * 
     */
    @Import(name="entityType", required=true)
    private String entityType;

    /**
     * @return (string) - Type of entity within the external system
     * 
     */
    public String entityType() {
        return this.entityType;
    }

    /**
     * Name of the external metadata object
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the external metadata object
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * (string) - Owner of the external metadata object
     * 
     */
    @Import(name="owner")
    private @Nullable String owner;

    /**
     * @return (string) - Owner of the external metadata object
     * 
     */
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * (object) - A map of key-value properties attached to the external metadata object
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,String> properties;

    /**
     * @return (object) - A map of key-value properties attached to the external metadata object
     * 
     */
    public Optional<Map<String,String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * (string) - Type of external system. Possible values are: `AMAZON_REDSHIFT`, `AZURE_SYNAPSE`, `CONFLUENT`, `DATABRICKS`, `GOOGLE_BIGQUERY`, `KAFKA`, `LOOKER`, `MICROSOFT_FABRIC`, `MICROSOFT_SQL_SERVER`, `MONGODB`, `MYSQL`, `ORACLE`, `OTHER`, `POSTGRESQL`, `POWER_BI`, `SALESFORCE`, `SAP`, `SERVICENOW`, `SNOWFLAKE`, `TABLEAU`, `TERADATA`, `WORKDAY`
     * 
     */
    @Import(name="systemType", required=true)
    private String systemType;

    /**
     * @return (string) - Type of external system. Possible values are: `AMAZON_REDSHIFT`, `AZURE_SYNAPSE`, `CONFLUENT`, `DATABRICKS`, `GOOGLE_BIGQUERY`, `KAFKA`, `LOOKER`, `MICROSOFT_FABRIC`, `MICROSOFT_SQL_SERVER`, `MONGODB`, `MYSQL`, `ORACLE`, `OTHER`, `POSTGRESQL`, `POWER_BI`, `SALESFORCE`, `SAP`, `SERVICENOW`, `SNOWFLAKE`, `TABLEAU`, `TERADATA`, `WORKDAY`
     * 
     */
    public String systemType() {
        return this.systemType;
    }

    /**
     * (string) - URL associated with the external metadata object
     * 
     */
    @Import(name="url")
    private @Nullable String url;

    /**
     * @return (string) - URL associated with the external metadata object
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    private GetExternalMetadataPlainArgs() {}

    private GetExternalMetadataPlainArgs(GetExternalMetadataPlainArgs $) {
        this.columns = $.columns;
        this.description = $.description;
        this.entityType = $.entityType;
        this.name = $.name;
        this.owner = $.owner;
        this.properties = $.properties;
        this.systemType = $.systemType;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetExternalMetadataPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetExternalMetadataPlainArgs $;

        public Builder() {
            $ = new GetExternalMetadataPlainArgs();
        }

        public Builder(GetExternalMetadataPlainArgs defaults) {
            $ = new GetExternalMetadataPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columns (list of string) - List of columns associated with the external metadata object
         * 
         * @return builder
         * 
         */
        public Builder columns(@Nullable List<String> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns (list of string) - List of columns associated with the external metadata object
         * 
         * @return builder
         * 
         */
        public Builder columns(String... columns) {
            return columns(List.of(columns));
        }

        /**
         * @param description (string) - User-provided free-form text description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param entityType (string) - Type of entity within the external system
         * 
         * @return builder
         * 
         */
        public Builder entityType(String entityType) {
            $.entityType = entityType;
            return this;
        }

        /**
         * @param name Name of the external metadata object
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param owner (string) - Owner of the external metadata object
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable String owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param properties (object) - A map of key-value properties attached to the external metadata object
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param systemType (string) - Type of external system. Possible values are: `AMAZON_REDSHIFT`, `AZURE_SYNAPSE`, `CONFLUENT`, `DATABRICKS`, `GOOGLE_BIGQUERY`, `KAFKA`, `LOOKER`, `MICROSOFT_FABRIC`, `MICROSOFT_SQL_SERVER`, `MONGODB`, `MYSQL`, `ORACLE`, `OTHER`, `POSTGRESQL`, `POWER_BI`, `SALESFORCE`, `SAP`, `SERVICENOW`, `SNOWFLAKE`, `TABLEAU`, `TERADATA`, `WORKDAY`
         * 
         * @return builder
         * 
         */
        public Builder systemType(String systemType) {
            $.systemType = systemType;
            return this;
        }

        /**
         * @param url (string) - URL associated with the external metadata object
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable String url) {
            $.url = url;
            return this;
        }

        public GetExternalMetadataPlainArgs build() {
            if ($.entityType == null) {
                throw new MissingRequiredPropertyException("GetExternalMetadataPlainArgs", "entityType");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetExternalMetadataPlainArgs", "name");
            }
            if ($.systemType == null) {
                throw new MissingRequiredPropertyException("GetExternalMetadataPlainArgs", "systemType");
            }
            return $;
        }
    }

}
