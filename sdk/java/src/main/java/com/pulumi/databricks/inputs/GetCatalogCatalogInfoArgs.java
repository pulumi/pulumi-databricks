// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetCatalogCatalogInfoEffectivePredictiveOptimizationFlagArgs;
import com.pulumi.databricks.inputs.GetCatalogCatalogInfoProvisioningInfoArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCatalogCatalogInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCatalogCatalogInfoArgs Empty = new GetCatalogCatalogInfoArgs();

    @Import(name="browseOnly")
    private @Nullable Output<Boolean> browseOnly;

    public Optional<Output<Boolean>> browseOnly() {
        return Optional.ofNullable(this.browseOnly);
    }

    /**
     * Type of the catalog, e.g. `MANAGED_CATALOG`, `DELTASHARING_CATALOG`, `SYSTEM_CATALOG`,
     * 
     */
    @Import(name="catalogType")
    private @Nullable Output<String> catalogType;

    /**
     * @return Type of the catalog, e.g. `MANAGED_CATALOG`, `DELTASHARING_CATALOG`, `SYSTEM_CATALOG`,
     * 
     */
    public Optional<Output<String>> catalogType() {
        return Optional.ofNullable(this.catalogType);
    }

    /**
     * Free-form text description
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Free-form text description
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The name of the connection to an external data source.
     * 
     */
    @Import(name="connectionName")
    private @Nullable Output<String> connectionName;

    /**
     * @return The name of the connection to an external data source.
     * 
     */
    public Optional<Output<String>> connectionName() {
        return Optional.ofNullable(this.connectionName);
    }

    /**
     * Time at which this catalog was created, in epoch milliseconds.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<Integer> createdAt;

    /**
     * @return Time at which this catalog was created, in epoch milliseconds.
     * 
     */
    public Optional<Output<Integer>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Username of catalog creator.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return Username of catalog creator.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * object describing applied predictive optimization flag.
     * 
     */
    @Import(name="effectivePredictiveOptimizationFlag")
    private @Nullable Output<GetCatalogCatalogInfoEffectivePredictiveOptimizationFlagArgs> effectivePredictiveOptimizationFlag;

    /**
     * @return object describing applied predictive optimization flag.
     * 
     */
    public Optional<Output<GetCatalogCatalogInfoEffectivePredictiveOptimizationFlagArgs>> effectivePredictiveOptimizationFlag() {
        return Optional.ofNullable(this.effectivePredictiveOptimizationFlag);
    }

    /**
     * Whether predictive optimization should be enabled for this object and objects under it.
     * 
     */
    @Import(name="enablePredictiveOptimization")
    private @Nullable Output<String> enablePredictiveOptimization;

    /**
     * @return Whether predictive optimization should be enabled for this object and objects under it.
     * 
     */
    public Optional<Output<String>> enablePredictiveOptimization() {
        return Optional.ofNullable(this.enablePredictiveOptimization);
    }

    /**
     * The full name of the catalog. Corresponds with the name field.
     * 
     */
    @Import(name="fullName")
    private @Nullable Output<String> fullName;

    /**
     * @return The full name of the catalog. Corresponds with the name field.
     * 
     */
    public Optional<Output<String>> fullName() {
        return Optional.ofNullable(this.fullName);
    }

    /**
     * Whether the current securable is accessible from all workspaces or a  specific set of workspaces.
     * 
     */
    @Import(name="isolationMode")
    private @Nullable Output<String> isolationMode;

    /**
     * @return Whether the current securable is accessible from all workspaces or a  specific set of workspaces.
     * 
     */
    public Optional<Output<String>> isolationMode() {
        return Optional.ofNullable(this.isolationMode);
    }

    /**
     * Unique identifier of parent metastore.
     * 
     */
    @Import(name="metastoreId")
    private @Nullable Output<String> metastoreId;

    /**
     * @return Unique identifier of parent metastore.
     * 
     */
    public Optional<Output<String>> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }

    /**
     * name of the catalog
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return name of the catalog
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A map of key-value properties attached to the securable.
     * 
     */
    @Import(name="options")
    private @Nullable Output<Map<String,String>> options;

    /**
     * @return A map of key-value properties attached to the securable.
     * 
     */
    public Optional<Output<Map<String,String>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * Current owner of the catalog
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return Current owner of the catalog
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * A map of key-value properties attached to the securable.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    /**
     * @return A map of key-value properties attached to the securable.
     * 
     */
    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The name of delta sharing provider.
     * 
     */
    @Import(name="providerName")
    private @Nullable Output<String> providerName;

    /**
     * @return The name of delta sharing provider.
     * 
     */
    public Optional<Output<String>> providerName() {
        return Optional.ofNullable(this.providerName);
    }

    @Import(name="provisioningInfo")
    private @Nullable Output<GetCatalogCatalogInfoProvisioningInfoArgs> provisioningInfo;

    public Optional<Output<GetCatalogCatalogInfoProvisioningInfoArgs>> provisioningInfo() {
        return Optional.ofNullable(this.provisioningInfo);
    }

    /**
     * Securable type.
     * 
     */
    @Import(name="securableType")
    private @Nullable Output<String> securableType;

    /**
     * @return Securable type.
     * 
     */
    public Optional<Output<String>> securableType() {
        return Optional.ofNullable(this.securableType);
    }

    /**
     * The name of the share under the share provider.
     * 
     */
    @Import(name="shareName")
    private @Nullable Output<String> shareName;

    /**
     * @return The name of the share under the share provider.
     * 
     */
    public Optional<Output<String>> shareName() {
        return Optional.ofNullable(this.shareName);
    }

    /**
     * Storage Location URL (full path) for managed tables within catalog.
     * 
     */
    @Import(name="storageLocation")
    private @Nullable Output<String> storageLocation;

    /**
     * @return Storage Location URL (full path) for managed tables within catalog.
     * 
     */
    public Optional<Output<String>> storageLocation() {
        return Optional.ofNullable(this.storageLocation);
    }

    /**
     * Storage root URL for managed tables within catalog.
     * 
     */
    @Import(name="storageRoot")
    private @Nullable Output<String> storageRoot;

    /**
     * @return Storage root URL for managed tables within catalog.
     * 
     */
    public Optional<Output<String>> storageRoot() {
        return Optional.ofNullable(this.storageRoot);
    }

    /**
     * Time at which this catalog was last modified, in epoch milliseconds.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<Integer> updatedAt;

    /**
     * @return Time at which this catalog was last modified, in epoch milliseconds.
     * 
     */
    public Optional<Output<Integer>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * Username of user who last modified catalog.
     * 
     */
    @Import(name="updatedBy")
    private @Nullable Output<String> updatedBy;

    /**
     * @return Username of user who last modified catalog.
     * 
     */
    public Optional<Output<String>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    private GetCatalogCatalogInfoArgs() {}

    private GetCatalogCatalogInfoArgs(GetCatalogCatalogInfoArgs $) {
        this.browseOnly = $.browseOnly;
        this.catalogType = $.catalogType;
        this.comment = $.comment;
        this.connectionName = $.connectionName;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.effectivePredictiveOptimizationFlag = $.effectivePredictiveOptimizationFlag;
        this.enablePredictiveOptimization = $.enablePredictiveOptimization;
        this.fullName = $.fullName;
        this.isolationMode = $.isolationMode;
        this.metastoreId = $.metastoreId;
        this.name = $.name;
        this.options = $.options;
        this.owner = $.owner;
        this.properties = $.properties;
        this.providerName = $.providerName;
        this.provisioningInfo = $.provisioningInfo;
        this.securableType = $.securableType;
        this.shareName = $.shareName;
        this.storageLocation = $.storageLocation;
        this.storageRoot = $.storageRoot;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCatalogCatalogInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCatalogCatalogInfoArgs $;

        public Builder() {
            $ = new GetCatalogCatalogInfoArgs();
        }

        public Builder(GetCatalogCatalogInfoArgs defaults) {
            $ = new GetCatalogCatalogInfoArgs(Objects.requireNonNull(defaults));
        }

        public Builder browseOnly(@Nullable Output<Boolean> browseOnly) {
            $.browseOnly = browseOnly;
            return this;
        }

        public Builder browseOnly(Boolean browseOnly) {
            return browseOnly(Output.of(browseOnly));
        }

        /**
         * @param catalogType Type of the catalog, e.g. `MANAGED_CATALOG`, `DELTASHARING_CATALOG`, `SYSTEM_CATALOG`,
         * 
         * @return builder
         * 
         */
        public Builder catalogType(@Nullable Output<String> catalogType) {
            $.catalogType = catalogType;
            return this;
        }

        /**
         * @param catalogType Type of the catalog, e.g. `MANAGED_CATALOG`, `DELTASHARING_CATALOG`, `SYSTEM_CATALOG`,
         * 
         * @return builder
         * 
         */
        public Builder catalogType(String catalogType) {
            return catalogType(Output.of(catalogType));
        }

        /**
         * @param comment Free-form text description
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Free-form text description
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param connectionName The name of the connection to an external data source.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(@Nullable Output<String> connectionName) {
            $.connectionName = connectionName;
            return this;
        }

        /**
         * @param connectionName The name of the connection to an external data source.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(String connectionName) {
            return connectionName(Output.of(connectionName));
        }

        /**
         * @param createdAt Time at which this catalog was created, in epoch milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<Integer> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Time at which this catalog was created, in epoch milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(Integer createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy Username of catalog creator.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy Username of catalog creator.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param effectivePredictiveOptimizationFlag object describing applied predictive optimization flag.
         * 
         * @return builder
         * 
         */
        public Builder effectivePredictiveOptimizationFlag(@Nullable Output<GetCatalogCatalogInfoEffectivePredictiveOptimizationFlagArgs> effectivePredictiveOptimizationFlag) {
            $.effectivePredictiveOptimizationFlag = effectivePredictiveOptimizationFlag;
            return this;
        }

        /**
         * @param effectivePredictiveOptimizationFlag object describing applied predictive optimization flag.
         * 
         * @return builder
         * 
         */
        public Builder effectivePredictiveOptimizationFlag(GetCatalogCatalogInfoEffectivePredictiveOptimizationFlagArgs effectivePredictiveOptimizationFlag) {
            return effectivePredictiveOptimizationFlag(Output.of(effectivePredictiveOptimizationFlag));
        }

        /**
         * @param enablePredictiveOptimization Whether predictive optimization should be enabled for this object and objects under it.
         * 
         * @return builder
         * 
         */
        public Builder enablePredictiveOptimization(@Nullable Output<String> enablePredictiveOptimization) {
            $.enablePredictiveOptimization = enablePredictiveOptimization;
            return this;
        }

        /**
         * @param enablePredictiveOptimization Whether predictive optimization should be enabled for this object and objects under it.
         * 
         * @return builder
         * 
         */
        public Builder enablePredictiveOptimization(String enablePredictiveOptimization) {
            return enablePredictiveOptimization(Output.of(enablePredictiveOptimization));
        }

        /**
         * @param fullName The full name of the catalog. Corresponds with the name field.
         * 
         * @return builder
         * 
         */
        public Builder fullName(@Nullable Output<String> fullName) {
            $.fullName = fullName;
            return this;
        }

        /**
         * @param fullName The full name of the catalog. Corresponds with the name field.
         * 
         * @return builder
         * 
         */
        public Builder fullName(String fullName) {
            return fullName(Output.of(fullName));
        }

        /**
         * @param isolationMode Whether the current securable is accessible from all workspaces or a  specific set of workspaces.
         * 
         * @return builder
         * 
         */
        public Builder isolationMode(@Nullable Output<String> isolationMode) {
            $.isolationMode = isolationMode;
            return this;
        }

        /**
         * @param isolationMode Whether the current securable is accessible from all workspaces or a  specific set of workspaces.
         * 
         * @return builder
         * 
         */
        public Builder isolationMode(String isolationMode) {
            return isolationMode(Output.of(isolationMode));
        }

        /**
         * @param metastoreId Unique identifier of parent metastore.
         * 
         * @return builder
         * 
         */
        public Builder metastoreId(@Nullable Output<String> metastoreId) {
            $.metastoreId = metastoreId;
            return this;
        }

        /**
         * @param metastoreId Unique identifier of parent metastore.
         * 
         * @return builder
         * 
         */
        public Builder metastoreId(String metastoreId) {
            return metastoreId(Output.of(metastoreId));
        }

        /**
         * @param name name of the catalog
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name name of the catalog
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param options A map of key-value properties attached to the securable.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<Map<String,String>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options A map of key-value properties attached to the securable.
         * 
         * @return builder
         * 
         */
        public Builder options(Map<String,String> options) {
            return options(Output.of(options));
        }

        /**
         * @param owner Current owner of the catalog
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner Current owner of the catalog
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param properties A map of key-value properties attached to the securable.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties A map of key-value properties attached to the securable.
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param providerName The name of delta sharing provider.
         * 
         * @return builder
         * 
         */
        public Builder providerName(@Nullable Output<String> providerName) {
            $.providerName = providerName;
            return this;
        }

        /**
         * @param providerName The name of delta sharing provider.
         * 
         * @return builder
         * 
         */
        public Builder providerName(String providerName) {
            return providerName(Output.of(providerName));
        }

        public Builder provisioningInfo(@Nullable Output<GetCatalogCatalogInfoProvisioningInfoArgs> provisioningInfo) {
            $.provisioningInfo = provisioningInfo;
            return this;
        }

        public Builder provisioningInfo(GetCatalogCatalogInfoProvisioningInfoArgs provisioningInfo) {
            return provisioningInfo(Output.of(provisioningInfo));
        }

        /**
         * @param securableType Securable type.
         * 
         * @return builder
         * 
         */
        public Builder securableType(@Nullable Output<String> securableType) {
            $.securableType = securableType;
            return this;
        }

        /**
         * @param securableType Securable type.
         * 
         * @return builder
         * 
         */
        public Builder securableType(String securableType) {
            return securableType(Output.of(securableType));
        }

        /**
         * @param shareName The name of the share under the share provider.
         * 
         * @return builder
         * 
         */
        public Builder shareName(@Nullable Output<String> shareName) {
            $.shareName = shareName;
            return this;
        }

        /**
         * @param shareName The name of the share under the share provider.
         * 
         * @return builder
         * 
         */
        public Builder shareName(String shareName) {
            return shareName(Output.of(shareName));
        }

        /**
         * @param storageLocation Storage Location URL (full path) for managed tables within catalog.
         * 
         * @return builder
         * 
         */
        public Builder storageLocation(@Nullable Output<String> storageLocation) {
            $.storageLocation = storageLocation;
            return this;
        }

        /**
         * @param storageLocation Storage Location URL (full path) for managed tables within catalog.
         * 
         * @return builder
         * 
         */
        public Builder storageLocation(String storageLocation) {
            return storageLocation(Output.of(storageLocation));
        }

        /**
         * @param storageRoot Storage root URL for managed tables within catalog.
         * 
         * @return builder
         * 
         */
        public Builder storageRoot(@Nullable Output<String> storageRoot) {
            $.storageRoot = storageRoot;
            return this;
        }

        /**
         * @param storageRoot Storage root URL for managed tables within catalog.
         * 
         * @return builder
         * 
         */
        public Builder storageRoot(String storageRoot) {
            return storageRoot(Output.of(storageRoot));
        }

        /**
         * @param updatedAt Time at which this catalog was last modified, in epoch milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<Integer> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Time at which this catalog was last modified, in epoch milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(Integer updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param updatedBy Username of user who last modified catalog.
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(@Nullable Output<String> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        /**
         * @param updatedBy Username of user who last modified catalog.
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(String updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        public GetCatalogCatalogInfoArgs build() {
            return $;
        }
    }

}
