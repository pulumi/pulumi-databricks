// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRecipientFederationPolicyOidcPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetRecipientFederationPolicyOidcPolicyArgs Empty = new GetRecipientFederationPolicyOidcPolicyArgs();

    /**
     * (list of string) - The allowed token audiences, as specified in the &#39;aud&#39; claim of federated tokens.
     * The audience identifier is intended to represent the recipient of the token.
     * Can be any non-empty string value. As long as the audience in the token matches at least one audience in the policy,
     * 
     */
    @Import(name="audiences")
    private @Nullable Output<List<String>> audiences;

    /**
     * @return (list of string) - The allowed token audiences, as specified in the &#39;aud&#39; claim of federated tokens.
     * The audience identifier is intended to represent the recipient of the token.
     * Can be any non-empty string value. As long as the audience in the token matches at least one audience in the policy,
     * 
     */
    public Optional<Output<List<String>>> audiences() {
        return Optional.ofNullable(this.audiences);
    }

    /**
     * (string) - The required token issuer, as specified in the &#39;iss&#39; claim of federated tokens
     * 
     */
    @Import(name="issuer", required=true)
    private Output<String> issuer;

    /**
     * @return (string) - The required token issuer, as specified in the &#39;iss&#39; claim of federated tokens
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }

    /**
     * (string) - The required token subject, as specified in the subject claim of federated tokens.
     * The subject claim identifies the identity of the user or machine accessing the resource.
     * Examples for Entra ID (AAD):
     * - U2M flow (group access): If the subject claim is `groups`, this must be the Object ID of the group in Entra ID.
     * - U2M flow (user access): If the subject claim is `oid`, this must be the Object ID of the user in Entra ID.
     * - M2M flow (OAuth App access): If the subject claim is `azp`, this must be the client ID of the OAuth app registered in Entra ID
     * 
     */
    @Import(name="subject", required=true)
    private Output<String> subject;

    /**
     * @return (string) - The required token subject, as specified in the subject claim of federated tokens.
     * The subject claim identifies the identity of the user or machine accessing the resource.
     * Examples for Entra ID (AAD):
     * - U2M flow (group access): If the subject claim is `groups`, this must be the Object ID of the group in Entra ID.
     * - U2M flow (user access): If the subject claim is `oid`, this must be the Object ID of the user in Entra ID.
     * - M2M flow (OAuth App access): If the subject claim is `azp`, this must be the client ID of the OAuth app registered in Entra ID
     * 
     */
    public Output<String> subject() {
        return this.subject;
    }

    /**
     * (string) - The claim that contains the subject of the token.
     * Depending on the identity provider and the use case (U2M or M2M), this can vary:
     * - For Entra ID (AAD):
     * * U2M flow (group access): Use `groups`.
     * * U2M flow (user access): Use `oid`.
     * * M2M flow (OAuth App access): Use `azp`.
     * - For other IdPs, refer to the specific IdP documentation.
     * 
     */
    @Import(name="subjectClaim", required=true)
    private Output<String> subjectClaim;

    /**
     * @return (string) - The claim that contains the subject of the token.
     * Depending on the identity provider and the use case (U2M or M2M), this can vary:
     * - For Entra ID (AAD):
     * * U2M flow (group access): Use `groups`.
     * * U2M flow (user access): Use `oid`.
     * * M2M flow (OAuth App access): Use `azp`.
     * - For other IdPs, refer to the specific IdP documentation.
     * 
     */
    public Output<String> subjectClaim() {
        return this.subjectClaim;
    }

    private GetRecipientFederationPolicyOidcPolicyArgs() {}

    private GetRecipientFederationPolicyOidcPolicyArgs(GetRecipientFederationPolicyOidcPolicyArgs $) {
        this.audiences = $.audiences;
        this.issuer = $.issuer;
        this.subject = $.subject;
        this.subjectClaim = $.subjectClaim;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRecipientFederationPolicyOidcPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRecipientFederationPolicyOidcPolicyArgs $;

        public Builder() {
            $ = new GetRecipientFederationPolicyOidcPolicyArgs();
        }

        public Builder(GetRecipientFederationPolicyOidcPolicyArgs defaults) {
            $ = new GetRecipientFederationPolicyOidcPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audiences (list of string) - The allowed token audiences, as specified in the &#39;aud&#39; claim of federated tokens.
         * The audience identifier is intended to represent the recipient of the token.
         * Can be any non-empty string value. As long as the audience in the token matches at least one audience in the policy,
         * 
         * @return builder
         * 
         */
        public Builder audiences(@Nullable Output<List<String>> audiences) {
            $.audiences = audiences;
            return this;
        }

        /**
         * @param audiences (list of string) - The allowed token audiences, as specified in the &#39;aud&#39; claim of federated tokens.
         * The audience identifier is intended to represent the recipient of the token.
         * Can be any non-empty string value. As long as the audience in the token matches at least one audience in the policy,
         * 
         * @return builder
         * 
         */
        public Builder audiences(List<String> audiences) {
            return audiences(Output.of(audiences));
        }

        /**
         * @param audiences (list of string) - The allowed token audiences, as specified in the &#39;aud&#39; claim of federated tokens.
         * The audience identifier is intended to represent the recipient of the token.
         * Can be any non-empty string value. As long as the audience in the token matches at least one audience in the policy,
         * 
         * @return builder
         * 
         */
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }

        /**
         * @param issuer (string) - The required token issuer, as specified in the &#39;iss&#39; claim of federated tokens
         * 
         * @return builder
         * 
         */
        public Builder issuer(Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer (string) - The required token issuer, as specified in the &#39;iss&#39; claim of federated tokens
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param subject (string) - The required token subject, as specified in the subject claim of federated tokens.
         * The subject claim identifies the identity of the user or machine accessing the resource.
         * Examples for Entra ID (AAD):
         * - U2M flow (group access): If the subject claim is `groups`, this must be the Object ID of the group in Entra ID.
         * - U2M flow (user access): If the subject claim is `oid`, this must be the Object ID of the user in Entra ID.
         * - M2M flow (OAuth App access): If the subject claim is `azp`, this must be the client ID of the OAuth app registered in Entra ID
         * 
         * @return builder
         * 
         */
        public Builder subject(Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject (string) - The required token subject, as specified in the subject claim of federated tokens.
         * The subject claim identifies the identity of the user or machine accessing the resource.
         * Examples for Entra ID (AAD):
         * - U2M flow (group access): If the subject claim is `groups`, this must be the Object ID of the group in Entra ID.
         * - U2M flow (user access): If the subject claim is `oid`, this must be the Object ID of the user in Entra ID.
         * - M2M flow (OAuth App access): If the subject claim is `azp`, this must be the client ID of the OAuth app registered in Entra ID
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param subjectClaim (string) - The claim that contains the subject of the token.
         * Depending on the identity provider and the use case (U2M or M2M), this can vary:
         * - For Entra ID (AAD):
         * * U2M flow (group access): Use `groups`.
         * * U2M flow (user access): Use `oid`.
         * * M2M flow (OAuth App access): Use `azp`.
         * - For other IdPs, refer to the specific IdP documentation.
         * 
         * @return builder
         * 
         */
        public Builder subjectClaim(Output<String> subjectClaim) {
            $.subjectClaim = subjectClaim;
            return this;
        }

        /**
         * @param subjectClaim (string) - The claim that contains the subject of the token.
         * Depending on the identity provider and the use case (U2M or M2M), this can vary:
         * - For Entra ID (AAD):
         * * U2M flow (group access): Use `groups`.
         * * U2M flow (user access): Use `oid`.
         * * M2M flow (OAuth App access): Use `azp`.
         * - For other IdPs, refer to the specific IdP documentation.
         * 
         * @return builder
         * 
         */
        public Builder subjectClaim(String subjectClaim) {
            return subjectClaim(Output.of(subjectClaim));
        }

        public GetRecipientFederationPolicyOidcPolicyArgs build() {
            if ($.issuer == null) {
                throw new MissingRequiredPropertyException("GetRecipientFederationPolicyOidcPolicyArgs", "issuer");
            }
            if ($.subject == null) {
                throw new MissingRequiredPropertyException("GetRecipientFederationPolicyOidcPolicyArgs", "subject");
            }
            if ($.subjectClaim == null) {
                throw new MissingRequiredPropertyException("GetRecipientFederationPolicyOidcPolicyArgs", "subjectClaim");
            }
            return $;
        }
    }

}
