// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.GitCredentialArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.GitCredentialState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource allows you to manage credentials for [Databricks Repos](https://docs.databricks.com/repos.html) using [Git Credentials API](https://docs.databricks.com/dev-tools/api/latest/gitcredentials.html).
 * 
 * &gt; This resource can only be used with a workspace-level provider!
 * 
 * ## Example Usage
 * 
 * ### Git credential that uses personal access token
 * 
 * You can declare Pulumi-managed Git credential using following code:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.GitCredential;
 * import com.pulumi.databricks.GitCredentialArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var ado = new GitCredential("ado", GitCredentialArgs.builder()
 *             .gitUsername("myuser")
 *             .gitProvider("azureDevOpsServices")
 *             .personalAccessToken("sometoken")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Git credential configuration for Azure Service Principal and Azure DevOps
 * 
 * Databricks now supports Azure service principal federation to Azure DevOps.  Follow the [documentation](https://learn.microsoft.com/en-us/azure/databricks/repos/automate-with-ms-entra) on how to configure service principal federation, and after everything is configured, it could be used as simple as:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.GitCredential;
 * import com.pulumi.databricks.GitCredentialArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var ado = new GitCredential("ado", GitCredentialArgs.builder()
 *             .gitProvider("azureDevOpsServicesAad")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Related Resources
 * 
 * The following resources are often used in the same context:
 * 
 * * databricks.Repo to manage Databricks Repos.
 * 
 * ## Import
 * 
 * The resource cluster can be imported using ID of Git credential that could be obtained via REST API:
 * 
 * hcl
 * 
 * import {
 * 
 *   to = databricks_git_credential.this
 * 
 *   id = &#34;&lt;git-credential-id&gt;&#34;
 * 
 * }
 * 
 * Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import databricks:index/gitCredential:GitCredential this &lt;git-credential-id&gt;
 * ```
 * 
 */
@ResourceType(type="databricks:index/gitCredential:GitCredential")
public class GitCredential extends com.pulumi.resources.CustomResource {
    /**
     * specify if settings need to be enforced.
     * 
     */
    @Export(name="force", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> force;

    /**
     * @return specify if settings need to be enforced.
     * 
     */
    public Output<Optional<Boolean>> force() {
        return Codegen.optional(this.force);
    }
    /**
     * case insensitive name of the Git provider.  Following values are supported right now (could be a subject for a change, consult [Git Credentials API documentation](https://docs.databricks.com/dev-tools/api/latest/gitcredentials.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`, `awsCodeCommit`, `azureDevOpsServicesAad`.
     * 
     */
    @Export(name="gitProvider", refs={String.class}, tree="[0]")
    private Output<String> gitProvider;

    /**
     * @return case insensitive name of the Git provider.  Following values are supported right now (could be a subject for a change, consult [Git Credentials API documentation](https://docs.databricks.com/dev-tools/api/latest/gitcredentials.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`, `awsCodeCommit`, `azureDevOpsServicesAad`.
     * 
     */
    public Output<String> gitProvider() {
        return this.gitProvider;
    }
    /**
     * user name at Git provider.
     * 
     */
    @Export(name="gitUsername", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> gitUsername;

    /**
     * @return user name at Git provider.
     * 
     */
    public Output<Optional<String>> gitUsername() {
        return Codegen.optional(this.gitUsername);
    }
    /**
     * boolean flag specifying if the credential is the default for the given provider type.
     * 
     */
    @Export(name="isDefaultForProvider", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isDefaultForProvider;

    /**
     * @return boolean flag specifying if the credential is the default for the given provider type.
     * 
     */
    public Output<Optional<Boolean>> isDefaultForProvider() {
        return Codegen.optional(this.isDefaultForProvider);
    }
    /**
     * the name of the git credential, used for identification and ease of lookup.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return the name of the git credential, used for identification and ease of lookup.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The personal access token used to authenticate to the corresponding Git provider. If value is not provided, it&#39;s sourced from the first environment variable of `GITHUB_TOKEN`, `GITLAB_TOKEN`, or `AZDO_PERSONAL_ACCESS_TOKEN`, that has a non-empty value.
     * 
     */
    @Export(name="personalAccessToken", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> personalAccessToken;

    /**
     * @return The personal access token used to authenticate to the corresponding Git provider. If value is not provided, it&#39;s sourced from the first environment variable of `GITHUB_TOKEN`, `GITLAB_TOKEN`, or `AZDO_PERSONAL_ACCESS_TOKEN`, that has a non-empty value.
     * 
     */
    public Output<Optional<String>> personalAccessToken() {
        return Codegen.optional(this.personalAccessToken);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GitCredential(java.lang.String name) {
        this(name, GitCredentialArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GitCredential(java.lang.String name, GitCredentialArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GitCredential(java.lang.String name, GitCredentialArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/gitCredential:GitCredential", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private GitCredential(java.lang.String name, Output<java.lang.String> id, @Nullable GitCredentialState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/gitCredential:GitCredential", name, state, makeResourceOptions(options, id), false);
    }

    private static GitCredentialArgs makeArgs(GitCredentialArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GitCredentialArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GitCredential get(java.lang.String name, Output<java.lang.String> id, @Nullable GitCredentialState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GitCredential(name, id, state, options);
    }
}
