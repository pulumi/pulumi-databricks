// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTablesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTablesArgs Empty = new GetTablesArgs();

    /**
     * Name of databricks_catalog
     * 
     */
    @Import(name="catalogName", required=true)
    private Output<String> catalogName;

    /**
     * @return Name of databricks_catalog
     * 
     */
    public Output<String> catalogName() {
        return this.catalogName;
    }

    /**
     * set of databricks.Table full names: *`catalog`.`schema`.`table`*
     * 
     */
    @Import(name="ids")
    private @Nullable Output<List<String>> ids;

    /**
     * @return set of databricks.Table full names: *`catalog`.`schema`.`table`*
     * 
     */
    public Optional<Output<List<String>>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * Name of databricks_schema
     * 
     */
    @Import(name="schemaName", required=true)
    private Output<String> schemaName;

    /**
     * @return Name of databricks_schema
     * 
     */
    public Output<String> schemaName() {
        return this.schemaName;
    }

    private GetTablesArgs() {}

    private GetTablesArgs(GetTablesArgs $) {
        this.catalogName = $.catalogName;
        this.ids = $.ids;
        this.schemaName = $.schemaName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTablesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTablesArgs $;

        public Builder() {
            $ = new GetTablesArgs();
        }

        public Builder(GetTablesArgs defaults) {
            $ = new GetTablesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogName Name of databricks_catalog
         * 
         * @return builder
         * 
         */
        public Builder catalogName(Output<String> catalogName) {
            $.catalogName = catalogName;
            return this;
        }

        /**
         * @param catalogName Name of databricks_catalog
         * 
         * @return builder
         * 
         */
        public Builder catalogName(String catalogName) {
            return catalogName(Output.of(catalogName));
        }

        /**
         * @param ids set of databricks.Table full names: *`catalog`.`schema`.`table`*
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable Output<List<String>> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids set of databricks.Table full names: *`catalog`.`schema`.`table`*
         * 
         * @return builder
         * 
         */
        public Builder ids(List<String> ids) {
            return ids(Output.of(ids));
        }

        /**
         * @param ids set of databricks.Table full names: *`catalog`.`schema`.`table`*
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param schemaName Name of databricks_schema
         * 
         * @return builder
         * 
         */
        public Builder schemaName(Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        /**
         * @param schemaName Name of databricks_schema
         * 
         * @return builder
         * 
         */
        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public GetTablesArgs build() {
            if ($.catalogName == null) {
                throw new MissingRequiredPropertyException("GetTablesArgs", "catalogName");
            }
            if ($.schemaName == null) {
                throw new MissingRequiredPropertyException("GetTablesArgs", "schemaName");
            }
            return $;
        }
    }

}
