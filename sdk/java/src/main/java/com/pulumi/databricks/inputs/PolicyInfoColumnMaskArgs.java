// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.PolicyInfoColumnMaskUsingArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyInfoColumnMaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyInfoColumnMaskArgs Empty = new PolicyInfoColumnMaskArgs();

    @Import(name="functionName", required=true)
    private Output<String> functionName;

    public Output<String> functionName() {
        return this.functionName;
    }

    /**
     * The alias of the column to be masked. The alias must refer to one of matched columns.
     * The values of the column is passed to the column mask function as the first argument.
     * Required on create and update
     * 
     */
    @Import(name="onColumn", required=true)
    private Output<String> onColumn;

    /**
     * @return The alias of the column to be masked. The alias must refer to one of matched columns.
     * The values of the column is passed to the column mask function as the first argument.
     * Required on create and update
     * 
     */
    public Output<String> onColumn() {
        return this.onColumn;
    }

    @Import(name="usings")
    private @Nullable Output<List<PolicyInfoColumnMaskUsingArgs>> usings;

    public Optional<Output<List<PolicyInfoColumnMaskUsingArgs>>> usings() {
        return Optional.ofNullable(this.usings);
    }

    private PolicyInfoColumnMaskArgs() {}

    private PolicyInfoColumnMaskArgs(PolicyInfoColumnMaskArgs $) {
        this.functionName = $.functionName;
        this.onColumn = $.onColumn;
        this.usings = $.usings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyInfoColumnMaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyInfoColumnMaskArgs $;

        public Builder() {
            $ = new PolicyInfoColumnMaskArgs();
        }

        public Builder(PolicyInfoColumnMaskArgs defaults) {
            $ = new PolicyInfoColumnMaskArgs(Objects.requireNonNull(defaults));
        }

        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param onColumn The alias of the column to be masked. The alias must refer to one of matched columns.
         * The values of the column is passed to the column mask function as the first argument.
         * Required on create and update
         * 
         * @return builder
         * 
         */
        public Builder onColumn(Output<String> onColumn) {
            $.onColumn = onColumn;
            return this;
        }

        /**
         * @param onColumn The alias of the column to be masked. The alias must refer to one of matched columns.
         * The values of the column is passed to the column mask function as the first argument.
         * Required on create and update
         * 
         * @return builder
         * 
         */
        public Builder onColumn(String onColumn) {
            return onColumn(Output.of(onColumn));
        }

        public Builder usings(@Nullable Output<List<PolicyInfoColumnMaskUsingArgs>> usings) {
            $.usings = usings;
            return this;
        }

        public Builder usings(List<PolicyInfoColumnMaskUsingArgs> usings) {
            return usings(Output.of(usings));
        }

        public Builder usings(PolicyInfoColumnMaskUsingArgs... usings) {
            return usings(List.of(usings));
        }

        public PolicyInfoColumnMaskArgs build() {
            if ($.functionName == null) {
                throw new MissingRequiredPropertyException("PolicyInfoColumnMaskArgs", "functionName");
            }
            if ($.onColumn == null) {
                throw new MissingRequiredPropertyException("PolicyInfoColumnMaskArgs", "onColumn");
            }
            return $;
        }
    }

}
