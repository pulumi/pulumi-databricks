// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVolumesResult {
    private String catalogName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return a list of databricks.Volume full names: *`catalog`.`schema`.`volume`*
     * 
     */
    private List<String> ids;
    private String schemaName;

    private GetVolumesResult() {}
    public String catalogName() {
        return this.catalogName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return a list of databricks.Volume full names: *`catalog`.`schema`.`volume`*
     * 
     */
    public List<String> ids() {
        return this.ids;
    }
    public String schemaName() {
        return this.schemaName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String catalogName;
        private String id;
        private List<String> ids;
        private String schemaName;
        public Builder() {}
        public Builder(GetVolumesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogName = defaults.catalogName;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.schemaName = defaults.schemaName;
        }

        @CustomType.Setter
        public Builder catalogName(String catalogName) {
            if (catalogName == null) {
              throw new MissingRequiredPropertyException("GetVolumesResult", "catalogName");
            }
            this.catalogName = catalogName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVolumesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ids(List<String> ids) {
            if (ids == null) {
              throw new MissingRequiredPropertyException("GetVolumesResult", "ids");
            }
            this.ids = ids;
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            if (schemaName == null) {
              throw new MissingRequiredPropertyException("GetVolumesResult", "schemaName");
            }
            this.schemaName = schemaName;
            return this;
        }
        public GetVolumesResult build() {
            final var _resultValue = new GetVolumesResult();
            _resultValue.catalogName = catalogName;
            _resultValue.id = id;
            _resultValue.ids = ids;
            _resultValue.schemaName = schemaName;
            return _resultValue;
        }
    }
}
