// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotebookState extends com.pulumi.resources.ResourceArgs {

    public static final NotebookState Empty = new NotebookState();

    @Import(name="contentBase64")
    private @Nullable Output<String> contentBase64;

    public Optional<Output<String>> contentBase64() {
        return Optional.ofNullable(this.contentBase64);
    }

    @Import(name="format")
    private @Nullable Output<String> format;

    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    @Import(name="language")
    private @Nullable Output<String> language;

    public Optional<Output<String>> language() {
        return Optional.ofNullable(this.language);
    }

    @Import(name="md5")
    private @Nullable Output<String> md5;

    public Optional<Output<String>> md5() {
        return Optional.ofNullable(this.md5);
    }

    @Import(name="objectId")
    private @Nullable Output<Integer> objectId;

    public Optional<Output<Integer>> objectId() {
        return Optional.ofNullable(this.objectId);
    }

    /**
     * @deprecated
     * Always is a notebook
     * 
     */
    @Deprecated /* Always is a notebook */
    @Import(name="objectType")
    private @Nullable Output<String> objectType;

    /**
     * @deprecated
     * Always is a notebook
     * 
     */
    @Deprecated /* Always is a notebook */
    public Optional<Output<String>> objectType() {
        return Optional.ofNullable(this.objectType);
    }

    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    @Import(name="source")
    private @Nullable Output<String> source;

    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    @Import(name="url")
    private @Nullable Output<String> url;

    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    @Import(name="workspacePath")
    private @Nullable Output<String> workspacePath;

    public Optional<Output<String>> workspacePath() {
        return Optional.ofNullable(this.workspacePath);
    }

    private NotebookState() {}

    private NotebookState(NotebookState $) {
        this.contentBase64 = $.contentBase64;
        this.format = $.format;
        this.language = $.language;
        this.md5 = $.md5;
        this.objectId = $.objectId;
        this.objectType = $.objectType;
        this.path = $.path;
        this.source = $.source;
        this.url = $.url;
        this.workspacePath = $.workspacePath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotebookState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotebookState $;

        public Builder() {
            $ = new NotebookState();
        }

        public Builder(NotebookState defaults) {
            $ = new NotebookState(Objects.requireNonNull(defaults));
        }

        public Builder contentBase64(@Nullable Output<String> contentBase64) {
            $.contentBase64 = contentBase64;
            return this;
        }

        public Builder contentBase64(String contentBase64) {
            return contentBase64(Output.of(contentBase64));
        }

        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        public Builder format(String format) {
            return format(Output.of(format));
        }

        public Builder language(@Nullable Output<String> language) {
            $.language = language;
            return this;
        }

        public Builder language(String language) {
            return language(Output.of(language));
        }

        public Builder md5(@Nullable Output<String> md5) {
            $.md5 = md5;
            return this;
        }

        public Builder md5(String md5) {
            return md5(Output.of(md5));
        }

        public Builder objectId(@Nullable Output<Integer> objectId) {
            $.objectId = objectId;
            return this;
        }

        public Builder objectId(Integer objectId) {
            return objectId(Output.of(objectId));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Always is a notebook
         * 
         */
        @Deprecated /* Always is a notebook */
        public Builder objectType(@Nullable Output<String> objectType) {
            $.objectType = objectType;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Always is a notebook
         * 
         */
        @Deprecated /* Always is a notebook */
        public Builder objectType(String objectType) {
            return objectType(Output.of(objectType));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        public Builder source(String source) {
            return source(Output.of(source));
        }

        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        public Builder url(String url) {
            return url(Output.of(url));
        }

        public Builder workspacePath(@Nullable Output<String> workspacePath) {
            $.workspacePath = workspacePath;
            return this;
        }

        public Builder workspacePath(String workspacePath) {
            return workspacePath(Output.of(workspacePath));
        }

        public NotebookState build() {
            return $;
        }
    }

}
