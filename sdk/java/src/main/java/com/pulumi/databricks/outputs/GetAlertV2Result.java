// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetAlertV2EffectiveRunAs;
import com.pulumi.databricks.outputs.GetAlertV2Evaluation;
import com.pulumi.databricks.outputs.GetAlertV2RunAs;
import com.pulumi.databricks.outputs.GetAlertV2Schedule;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAlertV2Result {
    /**
     * @return (string) - The timestamp indicating when the alert was created
     * 
     */
    private String createTime;
    /**
     * @return (string) - Custom description for the alert. support mustache template
     * 
     */
    private @Nullable String customDescription;
    /**
     * @return (string) - Custom summary for the alert. support mustache template
     * 
     */
    private @Nullable String customSummary;
    /**
     * @return (string) - The display name of the alert
     * 
     */
    private @Nullable String displayName;
    /**
     * @return (AlertV2RunAs) - The actual identity that will be used to execute the alert.
     * This is an output-only field that shows the resolved run-as identity after applying
     * permissions and defaults
     * 
     */
    private GetAlertV2EffectiveRunAs effectiveRunAs;
    /**
     * @return (AlertV2Evaluation)
     * 
     */
    private @Nullable GetAlertV2Evaluation evaluation;
    /**
     * @return (string) - UUID identifying the alert
     * 
     */
    private String id;
    /**
     * @return (string) - Indicates whether the query is trashed. Possible values are: `ACTIVE`, `TRASHED`
     * 
     */
    private String lifecycleState;
    /**
     * @return (string) - The owner&#39;s username. This field is set to &#34;Unavailable&#34; if the user has been deleted
     * 
     */
    private String ownerUserName;
    /**
     * @return (string) - The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
     * 
     */
    private @Nullable String parentPath;
    /**
     * @return (string) - Text of the query to be run
     * 
     */
    private @Nullable String queryText;
    /**
     * @return (AlertV2RunAs) - Specifies the identity that will be used to run the alert.
     * This field allows you to configure alerts to run as a specific user or service principal.
     * - For user identity: Set `user_name` to the email of an active workspace user. Users can only set this to their own email.
     * - For service principal: Set `service_principal_name` to the application ID. Requires the `servicePrincipal/user` role.
     *   If not specified, the alert will run as the request user
     * 
     */
    private @Nullable GetAlertV2RunAs runAs;
    /**
     * @return (string, deprecated) - The run as username or application ID of service principal.
     * On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role.
     * Deprecated: Use `run_as` field instead. This field will be removed in a future release
     * 
     */
    private @Nullable String runAsUserName;
    /**
     * @return (CronSchedule)
     * 
     */
    private @Nullable GetAlertV2Schedule schedule;
    /**
     * @return (string) - The timestamp indicating when the alert was updated
     * 
     */
    private String updateTime;
    /**
     * @return (string) - ID of the SQL warehouse attached to the alert
     * 
     */
    private @Nullable String warehouseId;
    private @Nullable String workspaceId;

    private GetAlertV2Result() {}
    /**
     * @return (string) - The timestamp indicating when the alert was created
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return (string) - Custom description for the alert. support mustache template
     * 
     */
    public Optional<String> customDescription() {
        return Optional.ofNullable(this.customDescription);
    }
    /**
     * @return (string) - Custom summary for the alert. support mustache template
     * 
     */
    public Optional<String> customSummary() {
        return Optional.ofNullable(this.customSummary);
    }
    /**
     * @return (string) - The display name of the alert
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return (AlertV2RunAs) - The actual identity that will be used to execute the alert.
     * This is an output-only field that shows the resolved run-as identity after applying
     * permissions and defaults
     * 
     */
    public GetAlertV2EffectiveRunAs effectiveRunAs() {
        return this.effectiveRunAs;
    }
    /**
     * @return (AlertV2Evaluation)
     * 
     */
    public Optional<GetAlertV2Evaluation> evaluation() {
        return Optional.ofNullable(this.evaluation);
    }
    /**
     * @return (string) - UUID identifying the alert
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (string) - Indicates whether the query is trashed. Possible values are: `ACTIVE`, `TRASHED`
     * 
     */
    public String lifecycleState() {
        return this.lifecycleState;
    }
    /**
     * @return (string) - The owner&#39;s username. This field is set to &#34;Unavailable&#34; if the user has been deleted
     * 
     */
    public String ownerUserName() {
        return this.ownerUserName;
    }
    /**
     * @return (string) - The workspace path of the folder containing the alert. Can only be set on create, and cannot be updated
     * 
     */
    public Optional<String> parentPath() {
        return Optional.ofNullable(this.parentPath);
    }
    /**
     * @return (string) - Text of the query to be run
     * 
     */
    public Optional<String> queryText() {
        return Optional.ofNullable(this.queryText);
    }
    /**
     * @return (AlertV2RunAs) - Specifies the identity that will be used to run the alert.
     * This field allows you to configure alerts to run as a specific user or service principal.
     * - For user identity: Set `user_name` to the email of an active workspace user. Users can only set this to their own email.
     * - For service principal: Set `service_principal_name` to the application ID. Requires the `servicePrincipal/user` role.
     *   If not specified, the alert will run as the request user
     * 
     */
    public Optional<GetAlertV2RunAs> runAs() {
        return Optional.ofNullable(this.runAs);
    }
    /**
     * @return (string, deprecated) - The run as username or application ID of service principal.
     * On Create and Update, this field can be set to application ID of an active service principal. Setting this field requires the servicePrincipal/user role.
     * Deprecated: Use `run_as` field instead. This field will be removed in a future release
     * 
     */
    public Optional<String> runAsUserName() {
        return Optional.ofNullable(this.runAsUserName);
    }
    /**
     * @return (CronSchedule)
     * 
     */
    public Optional<GetAlertV2Schedule> schedule() {
        return Optional.ofNullable(this.schedule);
    }
    /**
     * @return (string) - The timestamp indicating when the alert was updated
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return (string) - ID of the SQL warehouse attached to the alert
     * 
     */
    public Optional<String> warehouseId() {
        return Optional.ofNullable(this.warehouseId);
    }
    public Optional<String> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlertV2Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private @Nullable String customDescription;
        private @Nullable String customSummary;
        private @Nullable String displayName;
        private GetAlertV2EffectiveRunAs effectiveRunAs;
        private @Nullable GetAlertV2Evaluation evaluation;
        private String id;
        private String lifecycleState;
        private String ownerUserName;
        private @Nullable String parentPath;
        private @Nullable String queryText;
        private @Nullable GetAlertV2RunAs runAs;
        private @Nullable String runAsUserName;
        private @Nullable GetAlertV2Schedule schedule;
        private String updateTime;
        private @Nullable String warehouseId;
        private @Nullable String workspaceId;
        public Builder() {}
        public Builder(GetAlertV2Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.customDescription = defaults.customDescription;
    	      this.customSummary = defaults.customSummary;
    	      this.displayName = defaults.displayName;
    	      this.effectiveRunAs = defaults.effectiveRunAs;
    	      this.evaluation = defaults.evaluation;
    	      this.id = defaults.id;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.ownerUserName = defaults.ownerUserName;
    	      this.parentPath = defaults.parentPath;
    	      this.queryText = defaults.queryText;
    	      this.runAs = defaults.runAs;
    	      this.runAsUserName = defaults.runAsUserName;
    	      this.schedule = defaults.schedule;
    	      this.updateTime = defaults.updateTime;
    	      this.warehouseId = defaults.warehouseId;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetAlertV2Result", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder customDescription(@Nullable String customDescription) {

            this.customDescription = customDescription;
            return this;
        }
        @CustomType.Setter
        public Builder customSummary(@Nullable String customSummary) {

            this.customSummary = customSummary;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveRunAs(GetAlertV2EffectiveRunAs effectiveRunAs) {
            if (effectiveRunAs == null) {
              throw new MissingRequiredPropertyException("GetAlertV2Result", "effectiveRunAs");
            }
            this.effectiveRunAs = effectiveRunAs;
            return this;
        }
        @CustomType.Setter
        public Builder evaluation(@Nullable GetAlertV2Evaluation evaluation) {

            this.evaluation = evaluation;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAlertV2Result", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleState(String lifecycleState) {
            if (lifecycleState == null) {
              throw new MissingRequiredPropertyException("GetAlertV2Result", "lifecycleState");
            }
            this.lifecycleState = lifecycleState;
            return this;
        }
        @CustomType.Setter
        public Builder ownerUserName(String ownerUserName) {
            if (ownerUserName == null) {
              throw new MissingRequiredPropertyException("GetAlertV2Result", "ownerUserName");
            }
            this.ownerUserName = ownerUserName;
            return this;
        }
        @CustomType.Setter
        public Builder parentPath(@Nullable String parentPath) {

            this.parentPath = parentPath;
            return this;
        }
        @CustomType.Setter
        public Builder queryText(@Nullable String queryText) {

            this.queryText = queryText;
            return this;
        }
        @CustomType.Setter
        public Builder runAs(@Nullable GetAlertV2RunAs runAs) {

            this.runAs = runAs;
            return this;
        }
        @CustomType.Setter
        public Builder runAsUserName(@Nullable String runAsUserName) {

            this.runAsUserName = runAsUserName;
            return this;
        }
        @CustomType.Setter
        public Builder schedule(@Nullable GetAlertV2Schedule schedule) {

            this.schedule = schedule;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetAlertV2Result", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder warehouseId(@Nullable String warehouseId) {

            this.warehouseId = warehouseId;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(@Nullable String workspaceId) {

            this.workspaceId = workspaceId;
            return this;
        }
        public GetAlertV2Result build() {
            final var _resultValue = new GetAlertV2Result();
            _resultValue.createTime = createTime;
            _resultValue.customDescription = customDescription;
            _resultValue.customSummary = customSummary;
            _resultValue.displayName = displayName;
            _resultValue.effectiveRunAs = effectiveRunAs;
            _resultValue.evaluation = evaluation;
            _resultValue.id = id;
            _resultValue.lifecycleState = lifecycleState;
            _resultValue.ownerUserName = ownerUserName;
            _resultValue.parentPath = parentPath;
            _resultValue.queryText = queryText;
            _resultValue.runAs = runAs;
            _resultValue.runAsUserName = runAsUserName;
            _resultValue.schedule = schedule;
            _resultValue.updateTime = updateTime;
            _resultValue.warehouseId = warehouseId;
            _resultValue.workspaceId = workspaceId;
            return _resultValue;
        }
    }
}
