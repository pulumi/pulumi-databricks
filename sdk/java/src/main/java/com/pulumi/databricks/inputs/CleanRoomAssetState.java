// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.CleanRoomAssetForeignTableArgs;
import com.pulumi.databricks.inputs.CleanRoomAssetForeignTableLocalDetailsArgs;
import com.pulumi.databricks.inputs.CleanRoomAssetNotebookArgs;
import com.pulumi.databricks.inputs.CleanRoomAssetTableArgs;
import com.pulumi.databricks.inputs.CleanRoomAssetTableLocalDetailsArgs;
import com.pulumi.databricks.inputs.CleanRoomAssetViewArgs;
import com.pulumi.databricks.inputs.CleanRoomAssetViewLocalDetailsArgs;
import com.pulumi.databricks.inputs.CleanRoomAssetVolumeLocalDetailsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CleanRoomAssetState extends com.pulumi.resources.ResourceArgs {

    public static final CleanRoomAssetState Empty = new CleanRoomAssetState();

    /**
     * (integer) - When the asset is added to the clean room, in epoch milliseconds
     * 
     */
    @Import(name="addedAt")
    private @Nullable Output<Integer> addedAt;

    /**
     * @return (integer) - When the asset is added to the clean room, in epoch milliseconds
     * 
     */
    public Optional<Output<Integer>> addedAt() {
        return Optional.ofNullable(this.addedAt);
    }

    /**
     * The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
     * 
     */
    @Import(name="assetType")
    private @Nullable Output<String> assetType;

    /**
     * @return The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
     * 
     */
    public Optional<Output<String>> assetType() {
        return Optional.ofNullable(this.assetType);
    }

    /**
     * The name of the clean room this asset belongs to.
     * This field is required for create operations and populated by the server for responses
     * 
     */
    @Import(name="cleanRoomName")
    private @Nullable Output<String> cleanRoomName;

    /**
     * @return The name of the clean room this asset belongs to.
     * This field is required for create operations and populated by the server for responses
     * 
     */
    public Optional<Output<String>> cleanRoomName() {
        return Optional.ofNullable(this.cleanRoomName);
    }

    /**
     * Foreign table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    @Import(name="foreignTable")
    private @Nullable Output<CleanRoomAssetForeignTableArgs> foreignTable;

    /**
     * @return Foreign table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    public Optional<Output<CleanRoomAssetForeignTableArgs>> foreignTable() {
        return Optional.ofNullable(this.foreignTable);
    }

    /**
     * Local details for a foreign that are only available to its owner.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    @Import(name="foreignTableLocalDetails")
    private @Nullable Output<CleanRoomAssetForeignTableLocalDetailsArgs> foreignTableLocalDetails;

    /**
     * @return Local details for a foreign that are only available to its owner.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    public Optional<Output<CleanRoomAssetForeignTableLocalDetailsArgs>> foreignTableLocalDetails() {
        return Optional.ofNullable(this.foreignTableLocalDetails);
    }

    /**
     * A fully qualified name that uniquely identifies the asset within the clean room.
     * This is also the name displayed in the clean room UI.
     * 
     * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
     * 
     * For notebooks, the name is the notebook file name.
     * For jar analyses, the name is the jar analysis name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A fully qualified name that uniquely identifies the asset within the clean room.
     * This is also the name displayed in the clean room UI.
     * 
     * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
     * 
     * For notebooks, the name is the notebook file name.
     * For jar analyses, the name is the jar analysis name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Notebook details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **NOTEBOOK_FILE**
     * 
     */
    @Import(name="notebook")
    private @Nullable Output<CleanRoomAssetNotebookArgs> notebook;

    /**
     * @return Notebook details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **NOTEBOOK_FILE**
     * 
     */
    public Optional<Output<CleanRoomAssetNotebookArgs>> notebook() {
        return Optional.ofNullable(this.notebook);
    }

    /**
     * (string) - The alias of the collaborator who owns this asset
     * 
     */
    @Import(name="ownerCollaboratorAlias")
    private @Nullable Output<String> ownerCollaboratorAlias;

    /**
     * @return (string) - The alias of the collaborator who owns this asset
     * 
     */
    public Optional<Output<String>> ownerCollaboratorAlias() {
        return Optional.ofNullable(this.ownerCollaboratorAlias);
    }

    /**
     * (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    @Import(name="table")
    private @Nullable Output<CleanRoomAssetTableArgs> table;

    /**
     * @return Table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    public Optional<Output<CleanRoomAssetTableArgs>> table() {
        return Optional.ofNullable(this.table);
    }

    /**
     * Local details for a table that are only available to its owner.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    @Import(name="tableLocalDetails")
    private @Nullable Output<CleanRoomAssetTableLocalDetailsArgs> tableLocalDetails;

    /**
     * @return Local details for a table that are only available to its owner.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    public Optional<Output<CleanRoomAssetTableLocalDetailsArgs>> tableLocalDetails() {
        return Optional.ofNullable(this.tableLocalDetails);
    }

    /**
     * View details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    @Import(name="view")
    private @Nullable Output<CleanRoomAssetViewArgs> view;

    /**
     * @return View details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    public Optional<Output<CleanRoomAssetViewArgs>> view() {
        return Optional.ofNullable(this.view);
    }

    /**
     * Local details for a view that are only available to its owner.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    @Import(name="viewLocalDetails")
    private @Nullable Output<CleanRoomAssetViewLocalDetailsArgs> viewLocalDetails;

    /**
     * @return Local details for a view that are only available to its owner.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    public Optional<Output<CleanRoomAssetViewLocalDetailsArgs>> viewLocalDetails() {
        return Optional.ofNullable(this.viewLocalDetails);
    }

    /**
     * Local details for a volume that are only available to its owner.
     * Present if and only if **asset_type** is **VOLUME**
     * 
     */
    @Import(name="volumeLocalDetails")
    private @Nullable Output<CleanRoomAssetVolumeLocalDetailsArgs> volumeLocalDetails;

    /**
     * @return Local details for a volume that are only available to its owner.
     * Present if and only if **asset_type** is **VOLUME**
     * 
     */
    public Optional<Output<CleanRoomAssetVolumeLocalDetailsArgs>> volumeLocalDetails() {
        return Optional.ofNullable(this.volumeLocalDetails);
    }

    private CleanRoomAssetState() {}

    private CleanRoomAssetState(CleanRoomAssetState $) {
        this.addedAt = $.addedAt;
        this.assetType = $.assetType;
        this.cleanRoomName = $.cleanRoomName;
        this.foreignTable = $.foreignTable;
        this.foreignTableLocalDetails = $.foreignTableLocalDetails;
        this.name = $.name;
        this.notebook = $.notebook;
        this.ownerCollaboratorAlias = $.ownerCollaboratorAlias;
        this.status = $.status;
        this.table = $.table;
        this.tableLocalDetails = $.tableLocalDetails;
        this.view = $.view;
        this.viewLocalDetails = $.viewLocalDetails;
        this.volumeLocalDetails = $.volumeLocalDetails;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CleanRoomAssetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CleanRoomAssetState $;

        public Builder() {
            $ = new CleanRoomAssetState();
        }

        public Builder(CleanRoomAssetState defaults) {
            $ = new CleanRoomAssetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param addedAt (integer) - When the asset is added to the clean room, in epoch milliseconds
         * 
         * @return builder
         * 
         */
        public Builder addedAt(@Nullable Output<Integer> addedAt) {
            $.addedAt = addedAt;
            return this;
        }

        /**
         * @param addedAt (integer) - When the asset is added to the clean room, in epoch milliseconds
         * 
         * @return builder
         * 
         */
        public Builder addedAt(Integer addedAt) {
            return addedAt(Output.of(addedAt));
        }

        /**
         * @param assetType The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
         * 
         * @return builder
         * 
         */
        public Builder assetType(@Nullable Output<String> assetType) {
            $.assetType = assetType;
            return this;
        }

        /**
         * @param assetType The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
         * 
         * @return builder
         * 
         */
        public Builder assetType(String assetType) {
            return assetType(Output.of(assetType));
        }

        /**
         * @param cleanRoomName The name of the clean room this asset belongs to.
         * This field is required for create operations and populated by the server for responses
         * 
         * @return builder
         * 
         */
        public Builder cleanRoomName(@Nullable Output<String> cleanRoomName) {
            $.cleanRoomName = cleanRoomName;
            return this;
        }

        /**
         * @param cleanRoomName The name of the clean room this asset belongs to.
         * This field is required for create operations and populated by the server for responses
         * 
         * @return builder
         * 
         */
        public Builder cleanRoomName(String cleanRoomName) {
            return cleanRoomName(Output.of(cleanRoomName));
        }

        /**
         * @param foreignTable Foreign table details available to all collaborators of the clean room.
         * Present if and only if **asset_type** is **FOREIGN_TABLE**
         * 
         * @return builder
         * 
         */
        public Builder foreignTable(@Nullable Output<CleanRoomAssetForeignTableArgs> foreignTable) {
            $.foreignTable = foreignTable;
            return this;
        }

        /**
         * @param foreignTable Foreign table details available to all collaborators of the clean room.
         * Present if and only if **asset_type** is **FOREIGN_TABLE**
         * 
         * @return builder
         * 
         */
        public Builder foreignTable(CleanRoomAssetForeignTableArgs foreignTable) {
            return foreignTable(Output.of(foreignTable));
        }

        /**
         * @param foreignTableLocalDetails Local details for a foreign that are only available to its owner.
         * Present if and only if **asset_type** is **FOREIGN_TABLE**
         * 
         * @return builder
         * 
         */
        public Builder foreignTableLocalDetails(@Nullable Output<CleanRoomAssetForeignTableLocalDetailsArgs> foreignTableLocalDetails) {
            $.foreignTableLocalDetails = foreignTableLocalDetails;
            return this;
        }

        /**
         * @param foreignTableLocalDetails Local details for a foreign that are only available to its owner.
         * Present if and only if **asset_type** is **FOREIGN_TABLE**
         * 
         * @return builder
         * 
         */
        public Builder foreignTableLocalDetails(CleanRoomAssetForeignTableLocalDetailsArgs foreignTableLocalDetails) {
            return foreignTableLocalDetails(Output.of(foreignTableLocalDetails));
        }

        /**
         * @param name A fully qualified name that uniquely identifies the asset within the clean room.
         * This is also the name displayed in the clean room UI.
         * 
         * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
         * 
         * For notebooks, the name is the notebook file name.
         * For jar analyses, the name is the jar analysis name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A fully qualified name that uniquely identifies the asset within the clean room.
         * This is also the name displayed in the clean room UI.
         * 
         * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
         * 
         * For notebooks, the name is the notebook file name.
         * For jar analyses, the name is the jar analysis name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notebook Notebook details available to all collaborators of the clean room.
         * Present if and only if **asset_type** is **NOTEBOOK_FILE**
         * 
         * @return builder
         * 
         */
        public Builder notebook(@Nullable Output<CleanRoomAssetNotebookArgs> notebook) {
            $.notebook = notebook;
            return this;
        }

        /**
         * @param notebook Notebook details available to all collaborators of the clean room.
         * Present if and only if **asset_type** is **NOTEBOOK_FILE**
         * 
         * @return builder
         * 
         */
        public Builder notebook(CleanRoomAssetNotebookArgs notebook) {
            return notebook(Output.of(notebook));
        }

        /**
         * @param ownerCollaboratorAlias (string) - The alias of the collaborator who owns this asset
         * 
         * @return builder
         * 
         */
        public Builder ownerCollaboratorAlias(@Nullable Output<String> ownerCollaboratorAlias) {
            $.ownerCollaboratorAlias = ownerCollaboratorAlias;
            return this;
        }

        /**
         * @param ownerCollaboratorAlias (string) - The alias of the collaborator who owns this asset
         * 
         * @return builder
         * 
         */
        public Builder ownerCollaboratorAlias(String ownerCollaboratorAlias) {
            return ownerCollaboratorAlias(Output.of(ownerCollaboratorAlias));
        }

        /**
         * @param status (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param table Table details available to all collaborators of the clean room.
         * Present if and only if **asset_type** is **TABLE**
         * 
         * @return builder
         * 
         */
        public Builder table(@Nullable Output<CleanRoomAssetTableArgs> table) {
            $.table = table;
            return this;
        }

        /**
         * @param table Table details available to all collaborators of the clean room.
         * Present if and only if **asset_type** is **TABLE**
         * 
         * @return builder
         * 
         */
        public Builder table(CleanRoomAssetTableArgs table) {
            return table(Output.of(table));
        }

        /**
         * @param tableLocalDetails Local details for a table that are only available to its owner.
         * Present if and only if **asset_type** is **TABLE**
         * 
         * @return builder
         * 
         */
        public Builder tableLocalDetails(@Nullable Output<CleanRoomAssetTableLocalDetailsArgs> tableLocalDetails) {
            $.tableLocalDetails = tableLocalDetails;
            return this;
        }

        /**
         * @param tableLocalDetails Local details for a table that are only available to its owner.
         * Present if and only if **asset_type** is **TABLE**
         * 
         * @return builder
         * 
         */
        public Builder tableLocalDetails(CleanRoomAssetTableLocalDetailsArgs tableLocalDetails) {
            return tableLocalDetails(Output.of(tableLocalDetails));
        }

        /**
         * @param view View details available to all collaborators of the clean room.
         * Present if and only if **asset_type** is **VIEW**
         * 
         * @return builder
         * 
         */
        public Builder view(@Nullable Output<CleanRoomAssetViewArgs> view) {
            $.view = view;
            return this;
        }

        /**
         * @param view View details available to all collaborators of the clean room.
         * Present if and only if **asset_type** is **VIEW**
         * 
         * @return builder
         * 
         */
        public Builder view(CleanRoomAssetViewArgs view) {
            return view(Output.of(view));
        }

        /**
         * @param viewLocalDetails Local details for a view that are only available to its owner.
         * Present if and only if **asset_type** is **VIEW**
         * 
         * @return builder
         * 
         */
        public Builder viewLocalDetails(@Nullable Output<CleanRoomAssetViewLocalDetailsArgs> viewLocalDetails) {
            $.viewLocalDetails = viewLocalDetails;
            return this;
        }

        /**
         * @param viewLocalDetails Local details for a view that are only available to its owner.
         * Present if and only if **asset_type** is **VIEW**
         * 
         * @return builder
         * 
         */
        public Builder viewLocalDetails(CleanRoomAssetViewLocalDetailsArgs viewLocalDetails) {
            return viewLocalDetails(Output.of(viewLocalDetails));
        }

        /**
         * @param volumeLocalDetails Local details for a volume that are only available to its owner.
         * Present if and only if **asset_type** is **VOLUME**
         * 
         * @return builder
         * 
         */
        public Builder volumeLocalDetails(@Nullable Output<CleanRoomAssetVolumeLocalDetailsArgs> volumeLocalDetails) {
            $.volumeLocalDetails = volumeLocalDetails;
            return this;
        }

        /**
         * @param volumeLocalDetails Local details for a volume that are only available to its owner.
         * Present if and only if **asset_type** is **VOLUME**
         * 
         * @return builder
         * 
         */
        public Builder volumeLocalDetails(CleanRoomAssetVolumeLocalDetailsArgs volumeLocalDetails) {
            return volumeLocalDetails(Output.of(volumeLocalDetails));
        }

        public CleanRoomAssetState build() {
            return $;
        }
    }

}
