// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SqlTableColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlTableColumnArgs Empty = new SqlTableColumnArgs();

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="identity")
    private @Nullable Output<String> identity;

    public Optional<Output<String>> identity() {
        return Optional.ofNullable(this.identity);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="nullable")
    private @Nullable Output<Boolean> nullable;

    public Optional<Output<Boolean>> nullable() {
        return Optional.ofNullable(this.nullable);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="typeJson")
    private @Nullable Output<String> typeJson;

    public Optional<Output<String>> typeJson() {
        return Optional.ofNullable(this.typeJson);
    }

    private SqlTableColumnArgs() {}

    private SqlTableColumnArgs(SqlTableColumnArgs $) {
        this.comment = $.comment;
        this.identity = $.identity;
        this.name = $.name;
        this.nullable = $.nullable;
        this.type = $.type;
        this.typeJson = $.typeJson;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlTableColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlTableColumnArgs $;

        public Builder() {
            $ = new SqlTableColumnArgs();
        }

        public Builder(SqlTableColumnArgs defaults) {
            $ = new SqlTableColumnArgs(Objects.requireNonNull(defaults));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder identity(@Nullable Output<String> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(String identity) {
            return identity(Output.of(identity));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder nullable(@Nullable Output<Boolean> nullable) {
            $.nullable = nullable;
            return this;
        }

        public Builder nullable(Boolean nullable) {
            return nullable(Output.of(nullable));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder typeJson(@Nullable Output<String> typeJson) {
            $.typeJson = typeJson;
            return this;
        }

        public Builder typeJson(String typeJson) {
            return typeJson(Output.of(typeJson));
        }

        public SqlTableColumnArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SqlTableColumnArgs", "name");
            }
            return $;
        }
    }

}
