// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterAwsAttributes {
    /**
     * @return Availability type used for all subsequent nodes past the `first_on_demand` ones. Valid values are `SPOT`, `SPOT_WITH_FALLBACK` and `ON_DEMAND`. Note: If `first_on_demand` is zero, this availability type will be used for the entire cluster. Backend default value is `SPOT_WITH_FALLBACK` and could change in the future
     * 
     */
    private @Nullable String availability;
    /**
     * @return The number of volumes launched for each instance. You can choose up to 10 volumes. This feature is only enabled for supported node types. Legacy node types cannot specify custom EBS volumes. For node types with no instance store, at least one EBS volume needs to be specified; otherwise, cluster creation will fail. These EBS volumes will be mounted at /ebs0, /ebs1, and etc. Instance store volumes will be mounted at /local_disk0, /local_disk1, and etc. If EBS volumes are attached, Databricks will configure Spark to use only the EBS volumes for scratch storage because heterogeneously sized scratch devices can lead to inefficient disk utilization. If no EBS volumes are attached, Databricks will configure Spark to use instance store volumes. If EBS volumes are specified, then the Spark configuration spark.local.dir will be overridden.
     * 
     */
    private @Nullable Integer ebsVolumeCount;
    private @Nullable Integer ebsVolumeIops;
    /**
     * @return The size of each EBS volume (in GiB) launched for each instance. For general purpose SSD, this value must be within the range 100 - 4096. For throughput optimized HDD, this value must be within the range 500 - 4096. Custom EBS volumes cannot be specified for the legacy node types (memory-optimized and compute-optimized).
     * 
     */
    private @Nullable Integer ebsVolumeSize;
    private @Nullable Integer ebsVolumeThroughput;
    /**
     * @return The type of EBS volumes that will be launched with this cluster. Valid values are `GENERAL_PURPOSE_SSD` or `THROUGHPUT_OPTIMIZED_HDD`. Use this option only if you&#39;re not picking *Delta Optimized `i3.*`* node types.
     * 
     */
    private @Nullable String ebsVolumeType;
    /**
     * @return The first `first_on_demand` nodes of the cluster will be placed on on-demand instances. If this value is greater than 0, the cluster driver node will be placed on an on-demand instance. If this value is greater than or equal to the current cluster size, all nodes will be placed on on-demand instances. If this value is less than the current cluster size, `first_on_demand` nodes will be placed on on-demand instances, and the remainder will be placed on availability instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster. Backend default value is `1` and could change in the future
     * 
     */
    private @Nullable Integer firstOnDemand;
    private @Nullable String instanceProfileArn;
    /**
     * @return The max price for AWS spot instances, as a percentage of the corresponding instance type’s on-demand price. For example, if this field is set to 50, and the cluster needs a new `i3.xlarge` spot instance, then the max price is half of the price of on-demand `i3.xlarge` instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand `i3.xlarge` instances. If not specified, the default value is `100`. When spot instances are requested for this cluster, only spot instances whose max price percentage matches this field will be considered. For safety, we enforce this field to be no more than `10000`.
     * 
     */
    private @Nullable Integer spotBidPricePercent;
    /**
     * @return Identifier for the availability zone/datacenter in which the cluster resides. This string will be of a form like `us-west-2a`. The provided availability zone must be in the same region as the Databricks deployment. For example, `us-west-2a` is not a valid zone ID if the Databricks deployment resides in the `us-east-1` region. Enable automatic availability zone selection (&#34;Auto-AZ&#34;), by setting the value `auto`. Databricks selects the AZ based on available IPs in the workspace subnets and retries in other availability zones if AWS returns insufficient capacity errors.
     * 
     */
    private @Nullable String zoneId;

    private ClusterAwsAttributes() {}
    /**
     * @return Availability type used for all subsequent nodes past the `first_on_demand` ones. Valid values are `SPOT`, `SPOT_WITH_FALLBACK` and `ON_DEMAND`. Note: If `first_on_demand` is zero, this availability type will be used for the entire cluster. Backend default value is `SPOT_WITH_FALLBACK` and could change in the future
     * 
     */
    public Optional<String> availability() {
        return Optional.ofNullable(this.availability);
    }
    /**
     * @return The number of volumes launched for each instance. You can choose up to 10 volumes. This feature is only enabled for supported node types. Legacy node types cannot specify custom EBS volumes. For node types with no instance store, at least one EBS volume needs to be specified; otherwise, cluster creation will fail. These EBS volumes will be mounted at /ebs0, /ebs1, and etc. Instance store volumes will be mounted at /local_disk0, /local_disk1, and etc. If EBS volumes are attached, Databricks will configure Spark to use only the EBS volumes for scratch storage because heterogeneously sized scratch devices can lead to inefficient disk utilization. If no EBS volumes are attached, Databricks will configure Spark to use instance store volumes. If EBS volumes are specified, then the Spark configuration spark.local.dir will be overridden.
     * 
     */
    public Optional<Integer> ebsVolumeCount() {
        return Optional.ofNullable(this.ebsVolumeCount);
    }
    public Optional<Integer> ebsVolumeIops() {
        return Optional.ofNullable(this.ebsVolumeIops);
    }
    /**
     * @return The size of each EBS volume (in GiB) launched for each instance. For general purpose SSD, this value must be within the range 100 - 4096. For throughput optimized HDD, this value must be within the range 500 - 4096. Custom EBS volumes cannot be specified for the legacy node types (memory-optimized and compute-optimized).
     * 
     */
    public Optional<Integer> ebsVolumeSize() {
        return Optional.ofNullable(this.ebsVolumeSize);
    }
    public Optional<Integer> ebsVolumeThroughput() {
        return Optional.ofNullable(this.ebsVolumeThroughput);
    }
    /**
     * @return The type of EBS volumes that will be launched with this cluster. Valid values are `GENERAL_PURPOSE_SSD` or `THROUGHPUT_OPTIMIZED_HDD`. Use this option only if you&#39;re not picking *Delta Optimized `i3.*`* node types.
     * 
     */
    public Optional<String> ebsVolumeType() {
        return Optional.ofNullable(this.ebsVolumeType);
    }
    /**
     * @return The first `first_on_demand` nodes of the cluster will be placed on on-demand instances. If this value is greater than 0, the cluster driver node will be placed on an on-demand instance. If this value is greater than or equal to the current cluster size, all nodes will be placed on on-demand instances. If this value is less than the current cluster size, `first_on_demand` nodes will be placed on on-demand instances, and the remainder will be placed on availability instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster. Backend default value is `1` and could change in the future
     * 
     */
    public Optional<Integer> firstOnDemand() {
        return Optional.ofNullable(this.firstOnDemand);
    }
    public Optional<String> instanceProfileArn() {
        return Optional.ofNullable(this.instanceProfileArn);
    }
    /**
     * @return The max price for AWS spot instances, as a percentage of the corresponding instance type’s on-demand price. For example, if this field is set to 50, and the cluster needs a new `i3.xlarge` spot instance, then the max price is half of the price of on-demand `i3.xlarge` instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand `i3.xlarge` instances. If not specified, the default value is `100`. When spot instances are requested for this cluster, only spot instances whose max price percentage matches this field will be considered. For safety, we enforce this field to be no more than `10000`.
     * 
     */
    public Optional<Integer> spotBidPricePercent() {
        return Optional.ofNullable(this.spotBidPricePercent);
    }
    /**
     * @return Identifier for the availability zone/datacenter in which the cluster resides. This string will be of a form like `us-west-2a`. The provided availability zone must be in the same region as the Databricks deployment. For example, `us-west-2a` is not a valid zone ID if the Databricks deployment resides in the `us-east-1` region. Enable automatic availability zone selection (&#34;Auto-AZ&#34;), by setting the value `auto`. Databricks selects the AZ based on available IPs in the workspace subnets and retries in other availability zones if AWS returns insufficient capacity errors.
     * 
     */
    public Optional<String> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterAwsAttributes defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String availability;
        private @Nullable Integer ebsVolumeCount;
        private @Nullable Integer ebsVolumeIops;
        private @Nullable Integer ebsVolumeSize;
        private @Nullable Integer ebsVolumeThroughput;
        private @Nullable String ebsVolumeType;
        private @Nullable Integer firstOnDemand;
        private @Nullable String instanceProfileArn;
        private @Nullable Integer spotBidPricePercent;
        private @Nullable String zoneId;
        public Builder() {}
        public Builder(ClusterAwsAttributes defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availability = defaults.availability;
    	      this.ebsVolumeCount = defaults.ebsVolumeCount;
    	      this.ebsVolumeIops = defaults.ebsVolumeIops;
    	      this.ebsVolumeSize = defaults.ebsVolumeSize;
    	      this.ebsVolumeThroughput = defaults.ebsVolumeThroughput;
    	      this.ebsVolumeType = defaults.ebsVolumeType;
    	      this.firstOnDemand = defaults.firstOnDemand;
    	      this.instanceProfileArn = defaults.instanceProfileArn;
    	      this.spotBidPricePercent = defaults.spotBidPricePercent;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder availability(@Nullable String availability) {

            this.availability = availability;
            return this;
        }
        @CustomType.Setter
        public Builder ebsVolumeCount(@Nullable Integer ebsVolumeCount) {

            this.ebsVolumeCount = ebsVolumeCount;
            return this;
        }
        @CustomType.Setter
        public Builder ebsVolumeIops(@Nullable Integer ebsVolumeIops) {

            this.ebsVolumeIops = ebsVolumeIops;
            return this;
        }
        @CustomType.Setter
        public Builder ebsVolumeSize(@Nullable Integer ebsVolumeSize) {

            this.ebsVolumeSize = ebsVolumeSize;
            return this;
        }
        @CustomType.Setter
        public Builder ebsVolumeThroughput(@Nullable Integer ebsVolumeThroughput) {

            this.ebsVolumeThroughput = ebsVolumeThroughput;
            return this;
        }
        @CustomType.Setter
        public Builder ebsVolumeType(@Nullable String ebsVolumeType) {

            this.ebsVolumeType = ebsVolumeType;
            return this;
        }
        @CustomType.Setter
        public Builder firstOnDemand(@Nullable Integer firstOnDemand) {

            this.firstOnDemand = firstOnDemand;
            return this;
        }
        @CustomType.Setter
        public Builder instanceProfileArn(@Nullable String instanceProfileArn) {

            this.instanceProfileArn = instanceProfileArn;
            return this;
        }
        @CustomType.Setter
        public Builder spotBidPricePercent(@Nullable Integer spotBidPricePercent) {

            this.spotBidPricePercent = spotBidPricePercent;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(@Nullable String zoneId) {

            this.zoneId = zoneId;
            return this;
        }
        public ClusterAwsAttributes build() {
            final var _resultValue = new ClusterAwsAttributes();
            _resultValue.availability = availability;
            _resultValue.ebsVolumeCount = ebsVolumeCount;
            _resultValue.ebsVolumeIops = ebsVolumeIops;
            _resultValue.ebsVolumeSize = ebsVolumeSize;
            _resultValue.ebsVolumeThroughput = ebsVolumeThroughput;
            _resultValue.ebsVolumeType = ebsVolumeType;
            _resultValue.firstOnDemand = firstOnDemand;
            _resultValue.instanceProfileArn = instanceProfileArn;
            _resultValue.spotBidPricePercent = spotBidPricePercent;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
