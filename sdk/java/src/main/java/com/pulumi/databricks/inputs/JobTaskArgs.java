// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.JobTaskCleanRoomsNotebookTaskArgs;
import com.pulumi.databricks.inputs.JobTaskConditionTaskArgs;
import com.pulumi.databricks.inputs.JobTaskDbtTaskArgs;
import com.pulumi.databricks.inputs.JobTaskDependsOnArgs;
import com.pulumi.databricks.inputs.JobTaskEmailNotificationsArgs;
import com.pulumi.databricks.inputs.JobTaskForEachTaskArgs;
import com.pulumi.databricks.inputs.JobTaskHealthArgs;
import com.pulumi.databricks.inputs.JobTaskLibraryArgs;
import com.pulumi.databricks.inputs.JobTaskNewClusterArgs;
import com.pulumi.databricks.inputs.JobTaskNotebookTaskArgs;
import com.pulumi.databricks.inputs.JobTaskNotificationSettingsArgs;
import com.pulumi.databricks.inputs.JobTaskPipelineTaskArgs;
import com.pulumi.databricks.inputs.JobTaskPythonWheelTaskArgs;
import com.pulumi.databricks.inputs.JobTaskRunJobTaskArgs;
import com.pulumi.databricks.inputs.JobTaskSparkJarTaskArgs;
import com.pulumi.databricks.inputs.JobTaskSparkPythonTaskArgs;
import com.pulumi.databricks.inputs.JobTaskSparkSubmitTaskArgs;
import com.pulumi.databricks.inputs.JobTaskSqlTaskArgs;
import com.pulumi.databricks.inputs.JobTaskWebhookNotificationsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobTaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobTaskArgs Empty = new JobTaskArgs();

    @Import(name="cleanRoomsNotebookTask")
    private @Nullable Output<JobTaskCleanRoomsNotebookTaskArgs> cleanRoomsNotebookTask;

    public Optional<Output<JobTaskCleanRoomsNotebookTaskArgs>> cleanRoomsNotebookTask() {
        return Optional.ofNullable(this.cleanRoomsNotebookTask);
    }

    @Import(name="conditionTask")
    private @Nullable Output<JobTaskConditionTaskArgs> conditionTask;

    public Optional<Output<JobTaskConditionTaskArgs>> conditionTask() {
        return Optional.ofNullable(this.conditionTask);
    }

    @Import(name="dbtTask")
    private @Nullable Output<JobTaskDbtTaskArgs> dbtTask;

    public Optional<Output<JobTaskDbtTaskArgs>> dbtTask() {
        return Optional.ofNullable(this.dbtTask);
    }

    @Import(name="dependsOns")
    private @Nullable Output<List<JobTaskDependsOnArgs>> dependsOns;

    public Optional<Output<List<JobTaskDependsOnArgs>>> dependsOns() {
        return Optional.ofNullable(this.dependsOns);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="disableAutoOptimization")
    private @Nullable Output<Boolean> disableAutoOptimization;

    public Optional<Output<Boolean>> disableAutoOptimization() {
        return Optional.ofNullable(this.disableAutoOptimization);
    }

    @Import(name="emailNotifications")
    private @Nullable Output<JobTaskEmailNotificationsArgs> emailNotifications;

    public Optional<Output<JobTaskEmailNotificationsArgs>> emailNotifications() {
        return Optional.ofNullable(this.emailNotifications);
    }

    @Import(name="environmentKey")
    private @Nullable Output<String> environmentKey;

    public Optional<Output<String>> environmentKey() {
        return Optional.ofNullable(this.environmentKey);
    }

    @Import(name="existingClusterId")
    private @Nullable Output<String> existingClusterId;

    public Optional<Output<String>> existingClusterId() {
        return Optional.ofNullable(this.existingClusterId);
    }

    @Import(name="forEachTask")
    private @Nullable Output<JobTaskForEachTaskArgs> forEachTask;

    public Optional<Output<JobTaskForEachTaskArgs>> forEachTask() {
        return Optional.ofNullable(this.forEachTask);
    }

    @Import(name="health")
    private @Nullable Output<JobTaskHealthArgs> health;

    public Optional<Output<JobTaskHealthArgs>> health() {
        return Optional.ofNullable(this.health);
    }

    @Import(name="jobClusterKey")
    private @Nullable Output<String> jobClusterKey;

    public Optional<Output<String>> jobClusterKey() {
        return Optional.ofNullable(this.jobClusterKey);
    }

    @Import(name="libraries")
    private @Nullable Output<List<JobTaskLibraryArgs>> libraries;

    public Optional<Output<List<JobTaskLibraryArgs>>> libraries() {
        return Optional.ofNullable(this.libraries);
    }

    @Import(name="maxRetries")
    private @Nullable Output<Integer> maxRetries;

    public Optional<Output<Integer>> maxRetries() {
        return Optional.ofNullable(this.maxRetries);
    }

    @Import(name="minRetryIntervalMillis")
    private @Nullable Output<Integer> minRetryIntervalMillis;

    public Optional<Output<Integer>> minRetryIntervalMillis() {
        return Optional.ofNullable(this.minRetryIntervalMillis);
    }

    @Import(name="newCluster")
    private @Nullable Output<JobTaskNewClusterArgs> newCluster;

    public Optional<Output<JobTaskNewClusterArgs>> newCluster() {
        return Optional.ofNullable(this.newCluster);
    }

    @Import(name="notebookTask")
    private @Nullable Output<JobTaskNotebookTaskArgs> notebookTask;

    public Optional<Output<JobTaskNotebookTaskArgs>> notebookTask() {
        return Optional.ofNullable(this.notebookTask);
    }

    @Import(name="notificationSettings")
    private @Nullable Output<JobTaskNotificationSettingsArgs> notificationSettings;

    public Optional<Output<JobTaskNotificationSettingsArgs>> notificationSettings() {
        return Optional.ofNullable(this.notificationSettings);
    }

    @Import(name="pipelineTask")
    private @Nullable Output<JobTaskPipelineTaskArgs> pipelineTask;

    public Optional<Output<JobTaskPipelineTaskArgs>> pipelineTask() {
        return Optional.ofNullable(this.pipelineTask);
    }

    @Import(name="pythonWheelTask")
    private @Nullable Output<JobTaskPythonWheelTaskArgs> pythonWheelTask;

    public Optional<Output<JobTaskPythonWheelTaskArgs>> pythonWheelTask() {
        return Optional.ofNullable(this.pythonWheelTask);
    }

    @Import(name="retryOnTimeout")
    private @Nullable Output<Boolean> retryOnTimeout;

    public Optional<Output<Boolean>> retryOnTimeout() {
        return Optional.ofNullable(this.retryOnTimeout);
    }

    @Import(name="runIf")
    private @Nullable Output<String> runIf;

    public Optional<Output<String>> runIf() {
        return Optional.ofNullable(this.runIf);
    }

    @Import(name="runJobTask")
    private @Nullable Output<JobTaskRunJobTaskArgs> runJobTask;

    public Optional<Output<JobTaskRunJobTaskArgs>> runJobTask() {
        return Optional.ofNullable(this.runJobTask);
    }

    @Import(name="sparkJarTask")
    private @Nullable Output<JobTaskSparkJarTaskArgs> sparkJarTask;

    public Optional<Output<JobTaskSparkJarTaskArgs>> sparkJarTask() {
        return Optional.ofNullable(this.sparkJarTask);
    }

    @Import(name="sparkPythonTask")
    private @Nullable Output<JobTaskSparkPythonTaskArgs> sparkPythonTask;

    public Optional<Output<JobTaskSparkPythonTaskArgs>> sparkPythonTask() {
        return Optional.ofNullable(this.sparkPythonTask);
    }

    @Import(name="sparkSubmitTask")
    private @Nullable Output<JobTaskSparkSubmitTaskArgs> sparkSubmitTask;

    public Optional<Output<JobTaskSparkSubmitTaskArgs>> sparkSubmitTask() {
        return Optional.ofNullable(this.sparkSubmitTask);
    }

    @Import(name="sqlTask")
    private @Nullable Output<JobTaskSqlTaskArgs> sqlTask;

    public Optional<Output<JobTaskSqlTaskArgs>> sqlTask() {
        return Optional.ofNullable(this.sqlTask);
    }

    @Import(name="taskKey", required=true)
    private Output<String> taskKey;

    public Output<String> taskKey() {
        return this.taskKey;
    }

    @Import(name="timeoutSeconds")
    private @Nullable Output<Integer> timeoutSeconds;

    public Optional<Output<Integer>> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    @Import(name="webhookNotifications")
    private @Nullable Output<JobTaskWebhookNotificationsArgs> webhookNotifications;

    public Optional<Output<JobTaskWebhookNotificationsArgs>> webhookNotifications() {
        return Optional.ofNullable(this.webhookNotifications);
    }

    private JobTaskArgs() {}

    private JobTaskArgs(JobTaskArgs $) {
        this.cleanRoomsNotebookTask = $.cleanRoomsNotebookTask;
        this.conditionTask = $.conditionTask;
        this.dbtTask = $.dbtTask;
        this.dependsOns = $.dependsOns;
        this.description = $.description;
        this.disableAutoOptimization = $.disableAutoOptimization;
        this.emailNotifications = $.emailNotifications;
        this.environmentKey = $.environmentKey;
        this.existingClusterId = $.existingClusterId;
        this.forEachTask = $.forEachTask;
        this.health = $.health;
        this.jobClusterKey = $.jobClusterKey;
        this.libraries = $.libraries;
        this.maxRetries = $.maxRetries;
        this.minRetryIntervalMillis = $.minRetryIntervalMillis;
        this.newCluster = $.newCluster;
        this.notebookTask = $.notebookTask;
        this.notificationSettings = $.notificationSettings;
        this.pipelineTask = $.pipelineTask;
        this.pythonWheelTask = $.pythonWheelTask;
        this.retryOnTimeout = $.retryOnTimeout;
        this.runIf = $.runIf;
        this.runJobTask = $.runJobTask;
        this.sparkJarTask = $.sparkJarTask;
        this.sparkPythonTask = $.sparkPythonTask;
        this.sparkSubmitTask = $.sparkSubmitTask;
        this.sqlTask = $.sqlTask;
        this.taskKey = $.taskKey;
        this.timeoutSeconds = $.timeoutSeconds;
        this.webhookNotifications = $.webhookNotifications;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobTaskArgs $;

        public Builder() {
            $ = new JobTaskArgs();
        }

        public Builder(JobTaskArgs defaults) {
            $ = new JobTaskArgs(Objects.requireNonNull(defaults));
        }

        public Builder cleanRoomsNotebookTask(@Nullable Output<JobTaskCleanRoomsNotebookTaskArgs> cleanRoomsNotebookTask) {
            $.cleanRoomsNotebookTask = cleanRoomsNotebookTask;
            return this;
        }

        public Builder cleanRoomsNotebookTask(JobTaskCleanRoomsNotebookTaskArgs cleanRoomsNotebookTask) {
            return cleanRoomsNotebookTask(Output.of(cleanRoomsNotebookTask));
        }

        public Builder conditionTask(@Nullable Output<JobTaskConditionTaskArgs> conditionTask) {
            $.conditionTask = conditionTask;
            return this;
        }

        public Builder conditionTask(JobTaskConditionTaskArgs conditionTask) {
            return conditionTask(Output.of(conditionTask));
        }

        public Builder dbtTask(@Nullable Output<JobTaskDbtTaskArgs> dbtTask) {
            $.dbtTask = dbtTask;
            return this;
        }

        public Builder dbtTask(JobTaskDbtTaskArgs dbtTask) {
            return dbtTask(Output.of(dbtTask));
        }

        public Builder dependsOns(@Nullable Output<List<JobTaskDependsOnArgs>> dependsOns) {
            $.dependsOns = dependsOns;
            return this;
        }

        public Builder dependsOns(List<JobTaskDependsOnArgs> dependsOns) {
            return dependsOns(Output.of(dependsOns));
        }

        public Builder dependsOns(JobTaskDependsOnArgs... dependsOns) {
            return dependsOns(List.of(dependsOns));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder disableAutoOptimization(@Nullable Output<Boolean> disableAutoOptimization) {
            $.disableAutoOptimization = disableAutoOptimization;
            return this;
        }

        public Builder disableAutoOptimization(Boolean disableAutoOptimization) {
            return disableAutoOptimization(Output.of(disableAutoOptimization));
        }

        public Builder emailNotifications(@Nullable Output<JobTaskEmailNotificationsArgs> emailNotifications) {
            $.emailNotifications = emailNotifications;
            return this;
        }

        public Builder emailNotifications(JobTaskEmailNotificationsArgs emailNotifications) {
            return emailNotifications(Output.of(emailNotifications));
        }

        public Builder environmentKey(@Nullable Output<String> environmentKey) {
            $.environmentKey = environmentKey;
            return this;
        }

        public Builder environmentKey(String environmentKey) {
            return environmentKey(Output.of(environmentKey));
        }

        public Builder existingClusterId(@Nullable Output<String> existingClusterId) {
            $.existingClusterId = existingClusterId;
            return this;
        }

        public Builder existingClusterId(String existingClusterId) {
            return existingClusterId(Output.of(existingClusterId));
        }

        public Builder forEachTask(@Nullable Output<JobTaskForEachTaskArgs> forEachTask) {
            $.forEachTask = forEachTask;
            return this;
        }

        public Builder forEachTask(JobTaskForEachTaskArgs forEachTask) {
            return forEachTask(Output.of(forEachTask));
        }

        public Builder health(@Nullable Output<JobTaskHealthArgs> health) {
            $.health = health;
            return this;
        }

        public Builder health(JobTaskHealthArgs health) {
            return health(Output.of(health));
        }

        public Builder jobClusterKey(@Nullable Output<String> jobClusterKey) {
            $.jobClusterKey = jobClusterKey;
            return this;
        }

        public Builder jobClusterKey(String jobClusterKey) {
            return jobClusterKey(Output.of(jobClusterKey));
        }

        public Builder libraries(@Nullable Output<List<JobTaskLibraryArgs>> libraries) {
            $.libraries = libraries;
            return this;
        }

        public Builder libraries(List<JobTaskLibraryArgs> libraries) {
            return libraries(Output.of(libraries));
        }

        public Builder libraries(JobTaskLibraryArgs... libraries) {
            return libraries(List.of(libraries));
        }

        public Builder maxRetries(@Nullable Output<Integer> maxRetries) {
            $.maxRetries = maxRetries;
            return this;
        }

        public Builder maxRetries(Integer maxRetries) {
            return maxRetries(Output.of(maxRetries));
        }

        public Builder minRetryIntervalMillis(@Nullable Output<Integer> minRetryIntervalMillis) {
            $.minRetryIntervalMillis = minRetryIntervalMillis;
            return this;
        }

        public Builder minRetryIntervalMillis(Integer minRetryIntervalMillis) {
            return minRetryIntervalMillis(Output.of(minRetryIntervalMillis));
        }

        public Builder newCluster(@Nullable Output<JobTaskNewClusterArgs> newCluster) {
            $.newCluster = newCluster;
            return this;
        }

        public Builder newCluster(JobTaskNewClusterArgs newCluster) {
            return newCluster(Output.of(newCluster));
        }

        public Builder notebookTask(@Nullable Output<JobTaskNotebookTaskArgs> notebookTask) {
            $.notebookTask = notebookTask;
            return this;
        }

        public Builder notebookTask(JobTaskNotebookTaskArgs notebookTask) {
            return notebookTask(Output.of(notebookTask));
        }

        public Builder notificationSettings(@Nullable Output<JobTaskNotificationSettingsArgs> notificationSettings) {
            $.notificationSettings = notificationSettings;
            return this;
        }

        public Builder notificationSettings(JobTaskNotificationSettingsArgs notificationSettings) {
            return notificationSettings(Output.of(notificationSettings));
        }

        public Builder pipelineTask(@Nullable Output<JobTaskPipelineTaskArgs> pipelineTask) {
            $.pipelineTask = pipelineTask;
            return this;
        }

        public Builder pipelineTask(JobTaskPipelineTaskArgs pipelineTask) {
            return pipelineTask(Output.of(pipelineTask));
        }

        public Builder pythonWheelTask(@Nullable Output<JobTaskPythonWheelTaskArgs> pythonWheelTask) {
            $.pythonWheelTask = pythonWheelTask;
            return this;
        }

        public Builder pythonWheelTask(JobTaskPythonWheelTaskArgs pythonWheelTask) {
            return pythonWheelTask(Output.of(pythonWheelTask));
        }

        public Builder retryOnTimeout(@Nullable Output<Boolean> retryOnTimeout) {
            $.retryOnTimeout = retryOnTimeout;
            return this;
        }

        public Builder retryOnTimeout(Boolean retryOnTimeout) {
            return retryOnTimeout(Output.of(retryOnTimeout));
        }

        public Builder runIf(@Nullable Output<String> runIf) {
            $.runIf = runIf;
            return this;
        }

        public Builder runIf(String runIf) {
            return runIf(Output.of(runIf));
        }

        public Builder runJobTask(@Nullable Output<JobTaskRunJobTaskArgs> runJobTask) {
            $.runJobTask = runJobTask;
            return this;
        }

        public Builder runJobTask(JobTaskRunJobTaskArgs runJobTask) {
            return runJobTask(Output.of(runJobTask));
        }

        public Builder sparkJarTask(@Nullable Output<JobTaskSparkJarTaskArgs> sparkJarTask) {
            $.sparkJarTask = sparkJarTask;
            return this;
        }

        public Builder sparkJarTask(JobTaskSparkJarTaskArgs sparkJarTask) {
            return sparkJarTask(Output.of(sparkJarTask));
        }

        public Builder sparkPythonTask(@Nullable Output<JobTaskSparkPythonTaskArgs> sparkPythonTask) {
            $.sparkPythonTask = sparkPythonTask;
            return this;
        }

        public Builder sparkPythonTask(JobTaskSparkPythonTaskArgs sparkPythonTask) {
            return sparkPythonTask(Output.of(sparkPythonTask));
        }

        public Builder sparkSubmitTask(@Nullable Output<JobTaskSparkSubmitTaskArgs> sparkSubmitTask) {
            $.sparkSubmitTask = sparkSubmitTask;
            return this;
        }

        public Builder sparkSubmitTask(JobTaskSparkSubmitTaskArgs sparkSubmitTask) {
            return sparkSubmitTask(Output.of(sparkSubmitTask));
        }

        public Builder sqlTask(@Nullable Output<JobTaskSqlTaskArgs> sqlTask) {
            $.sqlTask = sqlTask;
            return this;
        }

        public Builder sqlTask(JobTaskSqlTaskArgs sqlTask) {
            return sqlTask(Output.of(sqlTask));
        }

        public Builder taskKey(Output<String> taskKey) {
            $.taskKey = taskKey;
            return this;
        }

        public Builder taskKey(String taskKey) {
            return taskKey(Output.of(taskKey));
        }

        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder timeoutSeconds(Integer timeoutSeconds) {
            return timeoutSeconds(Output.of(timeoutSeconds));
        }

        public Builder webhookNotifications(@Nullable Output<JobTaskWebhookNotificationsArgs> webhookNotifications) {
            $.webhookNotifications = webhookNotifications;
            return this;
        }

        public Builder webhookNotifications(JobTaskWebhookNotificationsArgs webhookNotifications) {
            return webhookNotifications(Output.of(webhookNotifications));
        }

        public JobTaskArgs build() {
            if ($.taskKey == null) {
                throw new MissingRequiredPropertyException("JobTaskArgs", "taskKey");
            }
            return $;
        }
    }

}
