// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.DatabaseSyncedDatabaseTableDataSynchronizationStatusContinuousUpdateStatusArgs;
import com.pulumi.databricks.inputs.DatabaseSyncedDatabaseTableDataSynchronizationStatusFailedStatusArgs;
import com.pulumi.databricks.inputs.DatabaseSyncedDatabaseTableDataSynchronizationStatusLastSyncArgs;
import com.pulumi.databricks.inputs.DatabaseSyncedDatabaseTableDataSynchronizationStatusProvisioningStatusArgs;
import com.pulumi.databricks.inputs.DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs Empty = new DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs();

    @Import(name="continuousUpdateStatus")
    private @Nullable Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusContinuousUpdateStatusArgs> continuousUpdateStatus;

    public Optional<Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusContinuousUpdateStatusArgs>> continuousUpdateStatus() {
        return Optional.ofNullable(this.continuousUpdateStatus);
    }

    /**
     * (string) - The state of the synced table. Possible values are: `SYNCED_TABLED_OFFLINE`, `SYNCED_TABLE_OFFLINE_FAILED`, `SYNCED_TABLE_ONLINE`, `SYNCED_TABLE_ONLINE_CONTINUOUS_UPDATE`, `SYNCED_TABLE_ONLINE_NO_PENDING_UPDATE`, `SYNCED_TABLE_ONLINE_PIPELINE_FAILED`, `SYNCED_TABLE_ONLINE_TRIGGERED_UPDATE`, `SYNCED_TABLE_ONLINE_UPDATING_PIPELINE_RESOURCES`, `SYNCED_TABLE_PROVISIONING`, `SYNCED_TABLE_PROVISIONING_INITIAL_SNAPSHOT`, `SYNCED_TABLE_PROVISIONING_PIPELINE_RESOURCES`
     * 
     */
    @Import(name="detailedState")
    private @Nullable Output<String> detailedState;

    /**
     * @return (string) - The state of the synced table. Possible values are: `SYNCED_TABLED_OFFLINE`, `SYNCED_TABLE_OFFLINE_FAILED`, `SYNCED_TABLE_ONLINE`, `SYNCED_TABLE_ONLINE_CONTINUOUS_UPDATE`, `SYNCED_TABLE_ONLINE_NO_PENDING_UPDATE`, `SYNCED_TABLE_ONLINE_PIPELINE_FAILED`, `SYNCED_TABLE_ONLINE_TRIGGERED_UPDATE`, `SYNCED_TABLE_ONLINE_UPDATING_PIPELINE_RESOURCES`, `SYNCED_TABLE_PROVISIONING`, `SYNCED_TABLE_PROVISIONING_INITIAL_SNAPSHOT`, `SYNCED_TABLE_PROVISIONING_PIPELINE_RESOURCES`
     * 
     */
    public Optional<Output<String>> detailedState() {
        return Optional.ofNullable(this.detailedState);
    }

    @Import(name="failedStatus")
    private @Nullable Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusFailedStatusArgs> failedStatus;

    public Optional<Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusFailedStatusArgs>> failedStatus() {
        return Optional.ofNullable(this.failedStatus);
    }

    /**
     * (SyncedTablePosition) - Summary of the last successful synchronization from source to destination.
     * 
     */
    @Import(name="lastSync")
    private @Nullable Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusLastSyncArgs> lastSync;

    /**
     * @return (SyncedTablePosition) - Summary of the last successful synchronization from source to destination.
     * 
     */
    public Optional<Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusLastSyncArgs>> lastSync() {
        return Optional.ofNullable(this.lastSync);
    }

    /**
     * (string) - A text description of the current state of the synced table
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return (string) - A text description of the current state of the synced table
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * (string) - ID of the associated pipeline. The pipeline ID may have been provided by the client
     * (in the case of bin packing), or generated by the server (when creating a new pipeline)
     * 
     */
    @Import(name="pipelineId")
    private @Nullable Output<String> pipelineId;

    /**
     * @return (string) - ID of the associated pipeline. The pipeline ID may have been provided by the client
     * (in the case of bin packing), or generated by the server (when creating a new pipeline)
     * 
     */
    public Optional<Output<String>> pipelineId() {
        return Optional.ofNullable(this.pipelineId);
    }

    @Import(name="provisioningStatus")
    private @Nullable Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusProvisioningStatusArgs> provisioningStatus;

    public Optional<Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusProvisioningStatusArgs>> provisioningStatus() {
        return Optional.ofNullable(this.provisioningStatus);
    }

    @Import(name="triggeredUpdateStatus")
    private @Nullable Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusArgs> triggeredUpdateStatus;

    public Optional<Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusArgs>> triggeredUpdateStatus() {
        return Optional.ofNullable(this.triggeredUpdateStatus);
    }

    private DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs() {}

    private DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs(DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs $) {
        this.continuousUpdateStatus = $.continuousUpdateStatus;
        this.detailedState = $.detailedState;
        this.failedStatus = $.failedStatus;
        this.lastSync = $.lastSync;
        this.message = $.message;
        this.pipelineId = $.pipelineId;
        this.provisioningStatus = $.provisioningStatus;
        this.triggeredUpdateStatus = $.triggeredUpdateStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs $;

        public Builder() {
            $ = new DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs();
        }

        public Builder(DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs defaults) {
            $ = new DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs(Objects.requireNonNull(defaults));
        }

        public Builder continuousUpdateStatus(@Nullable Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusContinuousUpdateStatusArgs> continuousUpdateStatus) {
            $.continuousUpdateStatus = continuousUpdateStatus;
            return this;
        }

        public Builder continuousUpdateStatus(DatabaseSyncedDatabaseTableDataSynchronizationStatusContinuousUpdateStatusArgs continuousUpdateStatus) {
            return continuousUpdateStatus(Output.of(continuousUpdateStatus));
        }

        /**
         * @param detailedState (string) - The state of the synced table. Possible values are: `SYNCED_TABLED_OFFLINE`, `SYNCED_TABLE_OFFLINE_FAILED`, `SYNCED_TABLE_ONLINE`, `SYNCED_TABLE_ONLINE_CONTINUOUS_UPDATE`, `SYNCED_TABLE_ONLINE_NO_PENDING_UPDATE`, `SYNCED_TABLE_ONLINE_PIPELINE_FAILED`, `SYNCED_TABLE_ONLINE_TRIGGERED_UPDATE`, `SYNCED_TABLE_ONLINE_UPDATING_PIPELINE_RESOURCES`, `SYNCED_TABLE_PROVISIONING`, `SYNCED_TABLE_PROVISIONING_INITIAL_SNAPSHOT`, `SYNCED_TABLE_PROVISIONING_PIPELINE_RESOURCES`
         * 
         * @return builder
         * 
         */
        public Builder detailedState(@Nullable Output<String> detailedState) {
            $.detailedState = detailedState;
            return this;
        }

        /**
         * @param detailedState (string) - The state of the synced table. Possible values are: `SYNCED_TABLED_OFFLINE`, `SYNCED_TABLE_OFFLINE_FAILED`, `SYNCED_TABLE_ONLINE`, `SYNCED_TABLE_ONLINE_CONTINUOUS_UPDATE`, `SYNCED_TABLE_ONLINE_NO_PENDING_UPDATE`, `SYNCED_TABLE_ONLINE_PIPELINE_FAILED`, `SYNCED_TABLE_ONLINE_TRIGGERED_UPDATE`, `SYNCED_TABLE_ONLINE_UPDATING_PIPELINE_RESOURCES`, `SYNCED_TABLE_PROVISIONING`, `SYNCED_TABLE_PROVISIONING_INITIAL_SNAPSHOT`, `SYNCED_TABLE_PROVISIONING_PIPELINE_RESOURCES`
         * 
         * @return builder
         * 
         */
        public Builder detailedState(String detailedState) {
            return detailedState(Output.of(detailedState));
        }

        public Builder failedStatus(@Nullable Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusFailedStatusArgs> failedStatus) {
            $.failedStatus = failedStatus;
            return this;
        }

        public Builder failedStatus(DatabaseSyncedDatabaseTableDataSynchronizationStatusFailedStatusArgs failedStatus) {
            return failedStatus(Output.of(failedStatus));
        }

        /**
         * @param lastSync (SyncedTablePosition) - Summary of the last successful synchronization from source to destination.
         * 
         * @return builder
         * 
         */
        public Builder lastSync(@Nullable Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusLastSyncArgs> lastSync) {
            $.lastSync = lastSync;
            return this;
        }

        /**
         * @param lastSync (SyncedTablePosition) - Summary of the last successful synchronization from source to destination.
         * 
         * @return builder
         * 
         */
        public Builder lastSync(DatabaseSyncedDatabaseTableDataSynchronizationStatusLastSyncArgs lastSync) {
            return lastSync(Output.of(lastSync));
        }

        /**
         * @param message (string) - A text description of the current state of the synced table
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message (string) - A text description of the current state of the synced table
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param pipelineId (string) - ID of the associated pipeline. The pipeline ID may have been provided by the client
         * (in the case of bin packing), or generated by the server (when creating a new pipeline)
         * 
         * @return builder
         * 
         */
        public Builder pipelineId(@Nullable Output<String> pipelineId) {
            $.pipelineId = pipelineId;
            return this;
        }

        /**
         * @param pipelineId (string) - ID of the associated pipeline. The pipeline ID may have been provided by the client
         * (in the case of bin packing), or generated by the server (when creating a new pipeline)
         * 
         * @return builder
         * 
         */
        public Builder pipelineId(String pipelineId) {
            return pipelineId(Output.of(pipelineId));
        }

        public Builder provisioningStatus(@Nullable Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusProvisioningStatusArgs> provisioningStatus) {
            $.provisioningStatus = provisioningStatus;
            return this;
        }

        public Builder provisioningStatus(DatabaseSyncedDatabaseTableDataSynchronizationStatusProvisioningStatusArgs provisioningStatus) {
            return provisioningStatus(Output.of(provisioningStatus));
        }

        public Builder triggeredUpdateStatus(@Nullable Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusArgs> triggeredUpdateStatus) {
            $.triggeredUpdateStatus = triggeredUpdateStatus;
            return this;
        }

        public Builder triggeredUpdateStatus(DatabaseSyncedDatabaseTableDataSynchronizationStatusTriggeredUpdateStatusArgs triggeredUpdateStatus) {
            return triggeredUpdateStatus(Output.of(triggeredUpdateStatus));
        }

        public DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs build() {
            return $;
        }
    }

}
