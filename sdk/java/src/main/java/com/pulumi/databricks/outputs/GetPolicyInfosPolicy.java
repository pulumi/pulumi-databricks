// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetPolicyInfosPolicyColumnMask;
import com.pulumi.databricks.outputs.GetPolicyInfosPolicyMatchColumn;
import com.pulumi.databricks.outputs.GetPolicyInfosPolicyRowFilter;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPolicyInfosPolicy {
    /**
     * @return (ColumnMaskOptions) - Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    private @Nullable GetPolicyInfosPolicyColumnMask columnMask;
    /**
     * @return (string) - Optional description of the policy
     * 
     */
    private @Nullable String comment;
    /**
     * @return (integer) - Time at which the policy was created, in epoch milliseconds. Output only
     * 
     */
    private Integer createdAt;
    /**
     * @return (string) - Username of the user who created the policy. Output only
     * 
     */
    private String createdBy;
    /**
     * @return (list of string) - Optional list of user or group names that should be excluded from the policy
     * 
     */
    private @Nullable List<String> exceptPrincipals;
    /**
     * @return (string) - Type of securables that the policy should take effect on.
     * Only `table` is supported at this moment.
     * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    private String forSecurableType;
    /**
     * @return (string) - Unique identifier of the policy. This field is output only and is generated by the system
     * 
     */
    private String id;
    /**
     * @return (list of MatchColumn) - Optional list of condition expressions used to match table columns.
     * Only valid when `for_securable_type` is `table`.
     * When specified, the policy only applies to tables whose columns satisfy all match conditions
     * 
     */
    private @Nullable List<GetPolicyInfosPolicyMatchColumn> matchColumns;
    /**
     * @return (string) - Name of the policy. Required on create and ignored on update.
     * To update the name, use the `new_name` field
     * 
     */
    private @Nullable String name;
    /**
     * @return Required. The fully qualified name of securable to list policies for
     * 
     */
    private @Nullable String onSecurableFullname;
    /**
     * @return Required. The type of the securable to list policies for
     * 
     */
    private @Nullable String onSecurableType;
    /**
     * @return (string) - Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
     * 
     */
    private String policyType;
    /**
     * @return (RowFilterOptions) - Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    private @Nullable GetPolicyInfosPolicyRowFilter rowFilter;
    /**
     * @return (list of string) - List of user or group names that the policy applies to.
     * Required on create and optional on update
     * 
     */
    private List<String> toPrincipals;
    /**
     * @return (integer) - Time at which the policy was last modified, in epoch milliseconds. Output only
     * 
     */
    private Integer updatedAt;
    /**
     * @return (string) - Username of the user who last modified the policy. Output only
     * 
     */
    private String updatedBy;
    /**
     * @return (string) - Optional condition when the policy should take effect
     * 
     */
    private @Nullable String whenCondition;

    private GetPolicyInfosPolicy() {}
    /**
     * @return (ColumnMaskOptions) - Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    public Optional<GetPolicyInfosPolicyColumnMask> columnMask() {
        return Optional.ofNullable(this.columnMask);
    }
    /**
     * @return (string) - Optional description of the policy
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    /**
     * @return (integer) - Time at which the policy was created, in epoch milliseconds. Output only
     * 
     */
    public Integer createdAt() {
        return this.createdAt;
    }
    /**
     * @return (string) - Username of the user who created the policy. Output only
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return (list of string) - Optional list of user or group names that should be excluded from the policy
     * 
     */
    public List<String> exceptPrincipals() {
        return this.exceptPrincipals == null ? List.of() : this.exceptPrincipals;
    }
    /**
     * @return (string) - Type of securables that the policy should take effect on.
     * Only `table` is supported at this moment.
     * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    public String forSecurableType() {
        return this.forSecurableType;
    }
    /**
     * @return (string) - Unique identifier of the policy. This field is output only and is generated by the system
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (list of MatchColumn) - Optional list of condition expressions used to match table columns.
     * Only valid when `for_securable_type` is `table`.
     * When specified, the policy only applies to tables whose columns satisfy all match conditions
     * 
     */
    public List<GetPolicyInfosPolicyMatchColumn> matchColumns() {
        return this.matchColumns == null ? List.of() : this.matchColumns;
    }
    /**
     * @return (string) - Name of the policy. Required on create and ignored on update.
     * To update the name, use the `new_name` field
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Required. The fully qualified name of securable to list policies for
     * 
     */
    public Optional<String> onSecurableFullname() {
        return Optional.ofNullable(this.onSecurableFullname);
    }
    /**
     * @return Required. The type of the securable to list policies for
     * 
     */
    public Optional<String> onSecurableType() {
        return Optional.ofNullable(this.onSecurableType);
    }
    /**
     * @return (string) - Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
     * 
     */
    public String policyType() {
        return this.policyType;
    }
    /**
     * @return (RowFilterOptions) - Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    public Optional<GetPolicyInfosPolicyRowFilter> rowFilter() {
        return Optional.ofNullable(this.rowFilter);
    }
    /**
     * @return (list of string) - List of user or group names that the policy applies to.
     * Required on create and optional on update
     * 
     */
    public List<String> toPrincipals() {
        return this.toPrincipals;
    }
    /**
     * @return (integer) - Time at which the policy was last modified, in epoch milliseconds. Output only
     * 
     */
    public Integer updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return (string) - Username of the user who last modified the policy. Output only
     * 
     */
    public String updatedBy() {
        return this.updatedBy;
    }
    /**
     * @return (string) - Optional condition when the policy should take effect
     * 
     */
    public Optional<String> whenCondition() {
        return Optional.ofNullable(this.whenCondition);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPolicyInfosPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetPolicyInfosPolicyColumnMask columnMask;
        private @Nullable String comment;
        private Integer createdAt;
        private String createdBy;
        private @Nullable List<String> exceptPrincipals;
        private String forSecurableType;
        private String id;
        private @Nullable List<GetPolicyInfosPolicyMatchColumn> matchColumns;
        private @Nullable String name;
        private @Nullable String onSecurableFullname;
        private @Nullable String onSecurableType;
        private String policyType;
        private @Nullable GetPolicyInfosPolicyRowFilter rowFilter;
        private List<String> toPrincipals;
        private Integer updatedAt;
        private String updatedBy;
        private @Nullable String whenCondition;
        public Builder() {}
        public Builder(GetPolicyInfosPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnMask = defaults.columnMask;
    	      this.comment = defaults.comment;
    	      this.createdAt = defaults.createdAt;
    	      this.createdBy = defaults.createdBy;
    	      this.exceptPrincipals = defaults.exceptPrincipals;
    	      this.forSecurableType = defaults.forSecurableType;
    	      this.id = defaults.id;
    	      this.matchColumns = defaults.matchColumns;
    	      this.name = defaults.name;
    	      this.onSecurableFullname = defaults.onSecurableFullname;
    	      this.onSecurableType = defaults.onSecurableType;
    	      this.policyType = defaults.policyType;
    	      this.rowFilter = defaults.rowFilter;
    	      this.toPrincipals = defaults.toPrincipals;
    	      this.updatedAt = defaults.updatedAt;
    	      this.updatedBy = defaults.updatedBy;
    	      this.whenCondition = defaults.whenCondition;
        }

        @CustomType.Setter
        public Builder columnMask(@Nullable GetPolicyInfosPolicyColumnMask columnMask) {

            this.columnMask = columnMask;
            return this;
        }
        @CustomType.Setter
        public Builder comment(@Nullable String comment) {

            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(Integer createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetPolicyInfosPolicy", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetPolicyInfosPolicy", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder exceptPrincipals(@Nullable List<String> exceptPrincipals) {

            this.exceptPrincipals = exceptPrincipals;
            return this;
        }
        public Builder exceptPrincipals(String... exceptPrincipals) {
            return exceptPrincipals(List.of(exceptPrincipals));
        }
        @CustomType.Setter
        public Builder forSecurableType(String forSecurableType) {
            if (forSecurableType == null) {
              throw new MissingRequiredPropertyException("GetPolicyInfosPolicy", "forSecurableType");
            }
            this.forSecurableType = forSecurableType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPolicyInfosPolicy", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder matchColumns(@Nullable List<GetPolicyInfosPolicyMatchColumn> matchColumns) {

            this.matchColumns = matchColumns;
            return this;
        }
        public Builder matchColumns(GetPolicyInfosPolicyMatchColumn... matchColumns) {
            return matchColumns(List.of(matchColumns));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder onSecurableFullname(@Nullable String onSecurableFullname) {

            this.onSecurableFullname = onSecurableFullname;
            return this;
        }
        @CustomType.Setter
        public Builder onSecurableType(@Nullable String onSecurableType) {

            this.onSecurableType = onSecurableType;
            return this;
        }
        @CustomType.Setter
        public Builder policyType(String policyType) {
            if (policyType == null) {
              throw new MissingRequiredPropertyException("GetPolicyInfosPolicy", "policyType");
            }
            this.policyType = policyType;
            return this;
        }
        @CustomType.Setter
        public Builder rowFilter(@Nullable GetPolicyInfosPolicyRowFilter rowFilter) {

            this.rowFilter = rowFilter;
            return this;
        }
        @CustomType.Setter
        public Builder toPrincipals(List<String> toPrincipals) {
            if (toPrincipals == null) {
              throw new MissingRequiredPropertyException("GetPolicyInfosPolicy", "toPrincipals");
            }
            this.toPrincipals = toPrincipals;
            return this;
        }
        public Builder toPrincipals(String... toPrincipals) {
            return toPrincipals(List.of(toPrincipals));
        }
        @CustomType.Setter
        public Builder updatedAt(Integer updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetPolicyInfosPolicy", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBy(String updatedBy) {
            if (updatedBy == null) {
              throw new MissingRequiredPropertyException("GetPolicyInfosPolicy", "updatedBy");
            }
            this.updatedBy = updatedBy;
            return this;
        }
        @CustomType.Setter
        public Builder whenCondition(@Nullable String whenCondition) {

            this.whenCondition = whenCondition;
            return this;
        }
        public GetPolicyInfosPolicy build() {
            final var _resultValue = new GetPolicyInfosPolicy();
            _resultValue.columnMask = columnMask;
            _resultValue.comment = comment;
            _resultValue.createdAt = createdAt;
            _resultValue.createdBy = createdBy;
            _resultValue.exceptPrincipals = exceptPrincipals;
            _resultValue.forSecurableType = forSecurableType;
            _resultValue.id = id;
            _resultValue.matchColumns = matchColumns;
            _resultValue.name = name;
            _resultValue.onSecurableFullname = onSecurableFullname;
            _resultValue.onSecurableType = onSecurableType;
            _resultValue.policyType = policyType;
            _resultValue.rowFilter = rowFilter;
            _resultValue.toPrincipals = toPrincipals;
            _resultValue.updatedAt = updatedAt;
            _resultValue.updatedBy = updatedBy;
            _resultValue.whenCondition = whenCondition;
            return _resultValue;
        }
    }
}
