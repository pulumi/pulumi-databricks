// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QualityMonitorScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final QualityMonitorScheduleArgs Empty = new QualityMonitorScheduleArgs();

    /**
     * optional string field that indicates whether a schedule is paused (`PAUSED`) or not (`UNPAUSED`).
     * 
     */
    @Import(name="pauseStatus")
    private @Nullable Output<String> pauseStatus;

    /**
     * @return optional string field that indicates whether a schedule is paused (`PAUSED`) or not (`UNPAUSED`).
     * 
     */
    public Optional<Output<String>> pauseStatus() {
        return Optional.ofNullable(this.pauseStatus);
    }

    /**
     * string expression that determines when to run the monitor. See [Quartz documentation](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) for examples.
     * 
     */
    @Import(name="quartzCronExpression", required=true)
    private Output<String> quartzCronExpression;

    /**
     * @return string expression that determines when to run the monitor. See [Quartz documentation](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) for examples.
     * 
     */
    public Output<String> quartzCronExpression() {
        return this.quartzCronExpression;
    }

    /**
     * string with timezone id (e.g., `PST`) in which to evaluate the Quartz expression.
     * 
     */
    @Import(name="timezoneId", required=true)
    private Output<String> timezoneId;

    /**
     * @return string with timezone id (e.g., `PST`) in which to evaluate the Quartz expression.
     * 
     */
    public Output<String> timezoneId() {
        return this.timezoneId;
    }

    private QualityMonitorScheduleArgs() {}

    private QualityMonitorScheduleArgs(QualityMonitorScheduleArgs $) {
        this.pauseStatus = $.pauseStatus;
        this.quartzCronExpression = $.quartzCronExpression;
        this.timezoneId = $.timezoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QualityMonitorScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QualityMonitorScheduleArgs $;

        public Builder() {
            $ = new QualityMonitorScheduleArgs();
        }

        public Builder(QualityMonitorScheduleArgs defaults) {
            $ = new QualityMonitorScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param pauseStatus optional string field that indicates whether a schedule is paused (`PAUSED`) or not (`UNPAUSED`).
         * 
         * @return builder
         * 
         */
        public Builder pauseStatus(@Nullable Output<String> pauseStatus) {
            $.pauseStatus = pauseStatus;
            return this;
        }

        /**
         * @param pauseStatus optional string field that indicates whether a schedule is paused (`PAUSED`) or not (`UNPAUSED`).
         * 
         * @return builder
         * 
         */
        public Builder pauseStatus(String pauseStatus) {
            return pauseStatus(Output.of(pauseStatus));
        }

        /**
         * @param quartzCronExpression string expression that determines when to run the monitor. See [Quartz documentation](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) for examples.
         * 
         * @return builder
         * 
         */
        public Builder quartzCronExpression(Output<String> quartzCronExpression) {
            $.quartzCronExpression = quartzCronExpression;
            return this;
        }

        /**
         * @param quartzCronExpression string expression that determines when to run the monitor. See [Quartz documentation](https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) for examples.
         * 
         * @return builder
         * 
         */
        public Builder quartzCronExpression(String quartzCronExpression) {
            return quartzCronExpression(Output.of(quartzCronExpression));
        }

        /**
         * @param timezoneId string with timezone id (e.g., `PST`) in which to evaluate the Quartz expression.
         * 
         * @return builder
         * 
         */
        public Builder timezoneId(Output<String> timezoneId) {
            $.timezoneId = timezoneId;
            return this;
        }

        /**
         * @param timezoneId string with timezone id (e.g., `PST`) in which to evaluate the Quartz expression.
         * 
         * @return builder
         * 
         */
        public Builder timezoneId(String timezoneId) {
            return timezoneId(Output.of(timezoneId));
        }

        public QualityMonitorScheduleArgs build() {
            if ($.quartzCronExpression == null) {
                throw new MissingRequiredPropertyException("QualityMonitorScheduleArgs", "quartzCronExpression");
            }
            if ($.timezoneId == null) {
                throw new MissingRequiredPropertyException("QualityMonitorScheduleArgs", "timezoneId");
            }
            return $;
        }
    }

}
