// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetCleanRoomAssetsAssetForeignTableColumnMask;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCleanRoomAssetsAssetForeignTableColumn {
    /**
     * @return (string) - User-provided free-form text description
     * 
     */
    private @Nullable String comment;
    /**
     * @return (ColumnMask)
     * 
     */
    private @Nullable GetCleanRoomAssetsAssetForeignTableColumnMask mask;
    /**
     * @return (string) - The name of the partition column
     * 
     */
    private @Nullable String name;
    /**
     * @return (boolean) - Whether field may be Null (default: true)
     * 
     */
    private @Nullable Boolean nullable;
    /**
     * @return (integer) - Partition index for column
     * 
     */
    private @Nullable Integer partitionIndex;
    /**
     * @return (integer) - Ordinal position of column (starting at position 0)
     * 
     */
    private @Nullable Integer position;
    /**
     * @return (string) - Format of IntervalType
     * 
     */
    private @Nullable String typeIntervalType;
    /**
     * @return (string) - Full data type specification, JSON-serialized
     * 
     */
    private @Nullable String typeJson;
    /**
     * @return (string) - . Possible values are: `ARRAY`, `BINARY`, `BOOLEAN`, `BYTE`, `CHAR`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `GEOGRAPHY`, `GEOMETRY`, `INT`, `INTERVAL`, `LONG`, `MAP`, `NULL`, `SHORT`, `STRING`, `STRUCT`, `TABLE_TYPE`, `TIMESTAMP`, `TIMESTAMP_NTZ`, `USER_DEFINED_TYPE`, `VARIANT`
     * 
     */
    private @Nullable String typeName;
    /**
     * @return (integer) - Digits of precision; required for DecimalTypes
     * 
     */
    private @Nullable Integer typePrecision;
    /**
     * @return (integer) - Digits to right of decimal; Required for DecimalTypes
     * 
     */
    private @Nullable Integer typeScale;
    /**
     * @return (string) - Full data type specification as SQL/catalogString text
     * 
     */
    private @Nullable String typeText;

    private GetCleanRoomAssetsAssetForeignTableColumn() {}
    /**
     * @return (string) - User-provided free-form text description
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    /**
     * @return (ColumnMask)
     * 
     */
    public Optional<GetCleanRoomAssetsAssetForeignTableColumnMask> mask() {
        return Optional.ofNullable(this.mask);
    }
    /**
     * @return (string) - The name of the partition column
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return (boolean) - Whether field may be Null (default: true)
     * 
     */
    public Optional<Boolean> nullable() {
        return Optional.ofNullable(this.nullable);
    }
    /**
     * @return (integer) - Partition index for column
     * 
     */
    public Optional<Integer> partitionIndex() {
        return Optional.ofNullable(this.partitionIndex);
    }
    /**
     * @return (integer) - Ordinal position of column (starting at position 0)
     * 
     */
    public Optional<Integer> position() {
        return Optional.ofNullable(this.position);
    }
    /**
     * @return (string) - Format of IntervalType
     * 
     */
    public Optional<String> typeIntervalType() {
        return Optional.ofNullable(this.typeIntervalType);
    }
    /**
     * @return (string) - Full data type specification, JSON-serialized
     * 
     */
    public Optional<String> typeJson() {
        return Optional.ofNullable(this.typeJson);
    }
    /**
     * @return (string) - . Possible values are: `ARRAY`, `BINARY`, `BOOLEAN`, `BYTE`, `CHAR`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `GEOGRAPHY`, `GEOMETRY`, `INT`, `INTERVAL`, `LONG`, `MAP`, `NULL`, `SHORT`, `STRING`, `STRUCT`, `TABLE_TYPE`, `TIMESTAMP`, `TIMESTAMP_NTZ`, `USER_DEFINED_TYPE`, `VARIANT`
     * 
     */
    public Optional<String> typeName() {
        return Optional.ofNullable(this.typeName);
    }
    /**
     * @return (integer) - Digits of precision; required for DecimalTypes
     * 
     */
    public Optional<Integer> typePrecision() {
        return Optional.ofNullable(this.typePrecision);
    }
    /**
     * @return (integer) - Digits to right of decimal; Required for DecimalTypes
     * 
     */
    public Optional<Integer> typeScale() {
        return Optional.ofNullable(this.typeScale);
    }
    /**
     * @return (string) - Full data type specification as SQL/catalogString text
     * 
     */
    public Optional<String> typeText() {
        return Optional.ofNullable(this.typeText);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCleanRoomAssetsAssetForeignTableColumn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String comment;
        private @Nullable GetCleanRoomAssetsAssetForeignTableColumnMask mask;
        private @Nullable String name;
        private @Nullable Boolean nullable;
        private @Nullable Integer partitionIndex;
        private @Nullable Integer position;
        private @Nullable String typeIntervalType;
        private @Nullable String typeJson;
        private @Nullable String typeName;
        private @Nullable Integer typePrecision;
        private @Nullable Integer typeScale;
        private @Nullable String typeText;
        public Builder() {}
        public Builder(GetCleanRoomAssetsAssetForeignTableColumn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comment = defaults.comment;
    	      this.mask = defaults.mask;
    	      this.name = defaults.name;
    	      this.nullable = defaults.nullable;
    	      this.partitionIndex = defaults.partitionIndex;
    	      this.position = defaults.position;
    	      this.typeIntervalType = defaults.typeIntervalType;
    	      this.typeJson = defaults.typeJson;
    	      this.typeName = defaults.typeName;
    	      this.typePrecision = defaults.typePrecision;
    	      this.typeScale = defaults.typeScale;
    	      this.typeText = defaults.typeText;
        }

        @CustomType.Setter
        public Builder comment(@Nullable String comment) {

            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder mask(@Nullable GetCleanRoomAssetsAssetForeignTableColumnMask mask) {

            this.mask = mask;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nullable(@Nullable Boolean nullable) {

            this.nullable = nullable;
            return this;
        }
        @CustomType.Setter
        public Builder partitionIndex(@Nullable Integer partitionIndex) {

            this.partitionIndex = partitionIndex;
            return this;
        }
        @CustomType.Setter
        public Builder position(@Nullable Integer position) {

            this.position = position;
            return this;
        }
        @CustomType.Setter
        public Builder typeIntervalType(@Nullable String typeIntervalType) {

            this.typeIntervalType = typeIntervalType;
            return this;
        }
        @CustomType.Setter
        public Builder typeJson(@Nullable String typeJson) {

            this.typeJson = typeJson;
            return this;
        }
        @CustomType.Setter
        public Builder typeName(@Nullable String typeName) {

            this.typeName = typeName;
            return this;
        }
        @CustomType.Setter
        public Builder typePrecision(@Nullable Integer typePrecision) {

            this.typePrecision = typePrecision;
            return this;
        }
        @CustomType.Setter
        public Builder typeScale(@Nullable Integer typeScale) {

            this.typeScale = typeScale;
            return this;
        }
        @CustomType.Setter
        public Builder typeText(@Nullable String typeText) {

            this.typeText = typeText;
            return this;
        }
        public GetCleanRoomAssetsAssetForeignTableColumn build() {
            final var _resultValue = new GetCleanRoomAssetsAssetForeignTableColumn();
            _resultValue.comment = comment;
            _resultValue.mask = mask;
            _resultValue.name = name;
            _resultValue.nullable = nullable;
            _resultValue.partitionIndex = partitionIndex;
            _resultValue.position = position;
            _resultValue.typeIntervalType = typeIntervalType;
            _resultValue.typeJson = typeJson;
            _resultValue.typeName = typeName;
            _resultValue.typePrecision = typePrecision;
            _resultValue.typeScale = typeScale;
            _resultValue.typeText = typeText;
            return _resultValue;
        }
    }
}
