// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetTableTableInfoColumn;
import com.pulumi.databricks.outputs.GetTableTableInfoDeltaRuntimePropertiesKvpairs;
import com.pulumi.databricks.outputs.GetTableTableInfoEffectivePredictiveOptimizationFlag;
import com.pulumi.databricks.outputs.GetTableTableInfoEncryptionDetails;
import com.pulumi.databricks.outputs.GetTableTableInfoRowFilter;
import com.pulumi.databricks.outputs.GetTableTableInfoSecurableKindManifest;
import com.pulumi.databricks.outputs.GetTableTableInfoTableConstraint;
import com.pulumi.databricks.outputs.GetTableTableInfoViewDependencies;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTableTableInfo {
    private @Nullable String accessPoint;
    private @Nullable Boolean browseOnly;
    /**
     * @return Name of parent catalog.
     * 
     */
    private @Nullable String catalogName;
    /**
     * @return Array of ColumnInfo objects of the table&#39;s columns
     * 
     */
    private @Nullable List<GetTableTableInfoColumn> columns;
    /**
     * @return Free-form text description
     * 
     */
    private @Nullable String comment;
    private @Nullable Integer createdAt;
    private @Nullable String createdBy;
    private @Nullable String dataAccessConfigurationId;
    /**
     * @return Table format, e.g. DELTA, CSV, JSON
     * 
     */
    private @Nullable String dataSourceFormat;
    private @Nullable Integer deletedAt;
    private @Nullable GetTableTableInfoDeltaRuntimePropertiesKvpairs deltaRuntimePropertiesKvpairs;
    private @Nullable GetTableTableInfoEffectivePredictiveOptimizationFlag effectivePredictiveOptimizationFlag;
    private @Nullable String enablePredictiveOptimization;
    private @Nullable GetTableTableInfoEncryptionDetails encryptionDetails;
    private @Nullable String fullName;
    private @Nullable String metastoreId;
    /**
     * @return Full name of the databricks_table: _`catalog`.`schema`.`table`_
     * 
     */
    private @Nullable String name;
    /**
     * @return Current owner of the table
     * 
     */
    private @Nullable String owner;
    private @Nullable String pipelineId;
    private @Nullable Map<String,String> properties;
    private @Nullable GetTableTableInfoRowFilter rowFilter;
    /**
     * @return Name of parent schema relative to its parent catalog.
     * 
     */
    private @Nullable String schemaName;
    private @Nullable GetTableTableInfoSecurableKindManifest securableKindManifest;
    private @Nullable String sqlPath;
    private @Nullable String storageCredentialName;
    private @Nullable String storageLocation;
    private @Nullable List<GetTableTableInfoTableConstraint> tableConstraints;
    private @Nullable String tableId;
    /**
     * @return Table type, e.g. MANAGED, EXTERNAL, VIEW
     * 
     */
    private @Nullable String tableType;
    private @Nullable Integer updatedAt;
    private @Nullable String updatedBy;
    /**
     * @return View definition SQL (when `table_type` is VIEW, MATERIALIZED_VIEW, or STREAMING_TABLE)
     * 
     */
    private @Nullable String viewDefinition;
    /**
     * @return View dependencies (when `table_type` is VIEW or MATERIALIZED_VIEW, STREAMING_TABLE)
     * 
     */
    private @Nullable GetTableTableInfoViewDependencies viewDependencies;

    private GetTableTableInfo() {}
    public Optional<String> accessPoint() {
        return Optional.ofNullable(this.accessPoint);
    }
    public Optional<Boolean> browseOnly() {
        return Optional.ofNullable(this.browseOnly);
    }
    /**
     * @return Name of parent catalog.
     * 
     */
    public Optional<String> catalogName() {
        return Optional.ofNullable(this.catalogName);
    }
    /**
     * @return Array of ColumnInfo objects of the table&#39;s columns
     * 
     */
    public List<GetTableTableInfoColumn> columns() {
        return this.columns == null ? List.of() : this.columns;
    }
    /**
     * @return Free-form text description
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    public Optional<Integer> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }
    public Optional<String> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }
    public Optional<String> dataAccessConfigurationId() {
        return Optional.ofNullable(this.dataAccessConfigurationId);
    }
    /**
     * @return Table format, e.g. DELTA, CSV, JSON
     * 
     */
    public Optional<String> dataSourceFormat() {
        return Optional.ofNullable(this.dataSourceFormat);
    }
    public Optional<Integer> deletedAt() {
        return Optional.ofNullable(this.deletedAt);
    }
    public Optional<GetTableTableInfoDeltaRuntimePropertiesKvpairs> deltaRuntimePropertiesKvpairs() {
        return Optional.ofNullable(this.deltaRuntimePropertiesKvpairs);
    }
    public Optional<GetTableTableInfoEffectivePredictiveOptimizationFlag> effectivePredictiveOptimizationFlag() {
        return Optional.ofNullable(this.effectivePredictiveOptimizationFlag);
    }
    public Optional<String> enablePredictiveOptimization() {
        return Optional.ofNullable(this.enablePredictiveOptimization);
    }
    public Optional<GetTableTableInfoEncryptionDetails> encryptionDetails() {
        return Optional.ofNullable(this.encryptionDetails);
    }
    public Optional<String> fullName() {
        return Optional.ofNullable(this.fullName);
    }
    public Optional<String> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }
    /**
     * @return Full name of the databricks_table: _`catalog`.`schema`.`table`_
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Current owner of the table
     * 
     */
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }
    public Optional<String> pipelineId() {
        return Optional.ofNullable(this.pipelineId);
    }
    public Map<String,String> properties() {
        return this.properties == null ? Map.of() : this.properties;
    }
    public Optional<GetTableTableInfoRowFilter> rowFilter() {
        return Optional.ofNullable(this.rowFilter);
    }
    /**
     * @return Name of parent schema relative to its parent catalog.
     * 
     */
    public Optional<String> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }
    public Optional<GetTableTableInfoSecurableKindManifest> securableKindManifest() {
        return Optional.ofNullable(this.securableKindManifest);
    }
    public Optional<String> sqlPath() {
        return Optional.ofNullable(this.sqlPath);
    }
    public Optional<String> storageCredentialName() {
        return Optional.ofNullable(this.storageCredentialName);
    }
    public Optional<String> storageLocation() {
        return Optional.ofNullable(this.storageLocation);
    }
    public List<GetTableTableInfoTableConstraint> tableConstraints() {
        return this.tableConstraints == null ? List.of() : this.tableConstraints;
    }
    public Optional<String> tableId() {
        return Optional.ofNullable(this.tableId);
    }
    /**
     * @return Table type, e.g. MANAGED, EXTERNAL, VIEW
     * 
     */
    public Optional<String> tableType() {
        return Optional.ofNullable(this.tableType);
    }
    public Optional<Integer> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }
    public Optional<String> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }
    /**
     * @return View definition SQL (when `table_type` is VIEW, MATERIALIZED_VIEW, or STREAMING_TABLE)
     * 
     */
    public Optional<String> viewDefinition() {
        return Optional.ofNullable(this.viewDefinition);
    }
    /**
     * @return View dependencies (when `table_type` is VIEW or MATERIALIZED_VIEW, STREAMING_TABLE)
     * 
     */
    public Optional<GetTableTableInfoViewDependencies> viewDependencies() {
        return Optional.ofNullable(this.viewDependencies);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableTableInfo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessPoint;
        private @Nullable Boolean browseOnly;
        private @Nullable String catalogName;
        private @Nullable List<GetTableTableInfoColumn> columns;
        private @Nullable String comment;
        private @Nullable Integer createdAt;
        private @Nullable String createdBy;
        private @Nullable String dataAccessConfigurationId;
        private @Nullable String dataSourceFormat;
        private @Nullable Integer deletedAt;
        private @Nullable GetTableTableInfoDeltaRuntimePropertiesKvpairs deltaRuntimePropertiesKvpairs;
        private @Nullable GetTableTableInfoEffectivePredictiveOptimizationFlag effectivePredictiveOptimizationFlag;
        private @Nullable String enablePredictiveOptimization;
        private @Nullable GetTableTableInfoEncryptionDetails encryptionDetails;
        private @Nullable String fullName;
        private @Nullable String metastoreId;
        private @Nullable String name;
        private @Nullable String owner;
        private @Nullable String pipelineId;
        private @Nullable Map<String,String> properties;
        private @Nullable GetTableTableInfoRowFilter rowFilter;
        private @Nullable String schemaName;
        private @Nullable GetTableTableInfoSecurableKindManifest securableKindManifest;
        private @Nullable String sqlPath;
        private @Nullable String storageCredentialName;
        private @Nullable String storageLocation;
        private @Nullable List<GetTableTableInfoTableConstraint> tableConstraints;
        private @Nullable String tableId;
        private @Nullable String tableType;
        private @Nullable Integer updatedAt;
        private @Nullable String updatedBy;
        private @Nullable String viewDefinition;
        private @Nullable GetTableTableInfoViewDependencies viewDependencies;
        public Builder() {}
        public Builder(GetTableTableInfo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPoint = defaults.accessPoint;
    	      this.browseOnly = defaults.browseOnly;
    	      this.catalogName = defaults.catalogName;
    	      this.columns = defaults.columns;
    	      this.comment = defaults.comment;
    	      this.createdAt = defaults.createdAt;
    	      this.createdBy = defaults.createdBy;
    	      this.dataAccessConfigurationId = defaults.dataAccessConfigurationId;
    	      this.dataSourceFormat = defaults.dataSourceFormat;
    	      this.deletedAt = defaults.deletedAt;
    	      this.deltaRuntimePropertiesKvpairs = defaults.deltaRuntimePropertiesKvpairs;
    	      this.effectivePredictiveOptimizationFlag = defaults.effectivePredictiveOptimizationFlag;
    	      this.enablePredictiveOptimization = defaults.enablePredictiveOptimization;
    	      this.encryptionDetails = defaults.encryptionDetails;
    	      this.fullName = defaults.fullName;
    	      this.metastoreId = defaults.metastoreId;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.pipelineId = defaults.pipelineId;
    	      this.properties = defaults.properties;
    	      this.rowFilter = defaults.rowFilter;
    	      this.schemaName = defaults.schemaName;
    	      this.securableKindManifest = defaults.securableKindManifest;
    	      this.sqlPath = defaults.sqlPath;
    	      this.storageCredentialName = defaults.storageCredentialName;
    	      this.storageLocation = defaults.storageLocation;
    	      this.tableConstraints = defaults.tableConstraints;
    	      this.tableId = defaults.tableId;
    	      this.tableType = defaults.tableType;
    	      this.updatedAt = defaults.updatedAt;
    	      this.updatedBy = defaults.updatedBy;
    	      this.viewDefinition = defaults.viewDefinition;
    	      this.viewDependencies = defaults.viewDependencies;
        }

        @CustomType.Setter
        public Builder accessPoint(@Nullable String accessPoint) {

            this.accessPoint = accessPoint;
            return this;
        }
        @CustomType.Setter
        public Builder browseOnly(@Nullable Boolean browseOnly) {

            this.browseOnly = browseOnly;
            return this;
        }
        @CustomType.Setter
        public Builder catalogName(@Nullable String catalogName) {

            this.catalogName = catalogName;
            return this;
        }
        @CustomType.Setter
        public Builder columns(@Nullable List<GetTableTableInfoColumn> columns) {

            this.columns = columns;
            return this;
        }
        public Builder columns(GetTableTableInfoColumn... columns) {
            return columns(List.of(columns));
        }
        @CustomType.Setter
        public Builder comment(@Nullable String comment) {

            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(@Nullable Integer createdAt) {

            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(@Nullable String createdBy) {

            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder dataAccessConfigurationId(@Nullable String dataAccessConfigurationId) {

            this.dataAccessConfigurationId = dataAccessConfigurationId;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceFormat(@Nullable String dataSourceFormat) {

            this.dataSourceFormat = dataSourceFormat;
            return this;
        }
        @CustomType.Setter
        public Builder deletedAt(@Nullable Integer deletedAt) {

            this.deletedAt = deletedAt;
            return this;
        }
        @CustomType.Setter
        public Builder deltaRuntimePropertiesKvpairs(@Nullable GetTableTableInfoDeltaRuntimePropertiesKvpairs deltaRuntimePropertiesKvpairs) {

            this.deltaRuntimePropertiesKvpairs = deltaRuntimePropertiesKvpairs;
            return this;
        }
        @CustomType.Setter
        public Builder effectivePredictiveOptimizationFlag(@Nullable GetTableTableInfoEffectivePredictiveOptimizationFlag effectivePredictiveOptimizationFlag) {

            this.effectivePredictiveOptimizationFlag = effectivePredictiveOptimizationFlag;
            return this;
        }
        @CustomType.Setter
        public Builder enablePredictiveOptimization(@Nullable String enablePredictiveOptimization) {

            this.enablePredictiveOptimization = enablePredictiveOptimization;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionDetails(@Nullable GetTableTableInfoEncryptionDetails encryptionDetails) {

            this.encryptionDetails = encryptionDetails;
            return this;
        }
        @CustomType.Setter
        public Builder fullName(@Nullable String fullName) {

            this.fullName = fullName;
            return this;
        }
        @CustomType.Setter
        public Builder metastoreId(@Nullable String metastoreId) {

            this.metastoreId = metastoreId;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(@Nullable String owner) {

            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder pipelineId(@Nullable String pipelineId) {

            this.pipelineId = pipelineId;
            return this;
        }
        @CustomType.Setter
        public Builder properties(@Nullable Map<String,String> properties) {

            this.properties = properties;
            return this;
        }
        @CustomType.Setter
        public Builder rowFilter(@Nullable GetTableTableInfoRowFilter rowFilter) {

            this.rowFilter = rowFilter;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(@Nullable String schemaName) {

            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder securableKindManifest(@Nullable GetTableTableInfoSecurableKindManifest securableKindManifest) {

            this.securableKindManifest = securableKindManifest;
            return this;
        }
        @CustomType.Setter
        public Builder sqlPath(@Nullable String sqlPath) {

            this.sqlPath = sqlPath;
            return this;
        }
        @CustomType.Setter
        public Builder storageCredentialName(@Nullable String storageCredentialName) {

            this.storageCredentialName = storageCredentialName;
            return this;
        }
        @CustomType.Setter
        public Builder storageLocation(@Nullable String storageLocation) {

            this.storageLocation = storageLocation;
            return this;
        }
        @CustomType.Setter
        public Builder tableConstraints(@Nullable List<GetTableTableInfoTableConstraint> tableConstraints) {

            this.tableConstraints = tableConstraints;
            return this;
        }
        public Builder tableConstraints(GetTableTableInfoTableConstraint... tableConstraints) {
            return tableConstraints(List.of(tableConstraints));
        }
        @CustomType.Setter
        public Builder tableId(@Nullable String tableId) {

            this.tableId = tableId;
            return this;
        }
        @CustomType.Setter
        public Builder tableType(@Nullable String tableType) {

            this.tableType = tableType;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(@Nullable Integer updatedAt) {

            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBy(@Nullable String updatedBy) {

            this.updatedBy = updatedBy;
            return this;
        }
        @CustomType.Setter
        public Builder viewDefinition(@Nullable String viewDefinition) {

            this.viewDefinition = viewDefinition;
            return this;
        }
        @CustomType.Setter
        public Builder viewDependencies(@Nullable GetTableTableInfoViewDependencies viewDependencies) {

            this.viewDependencies = viewDependencies;
            return this;
        }
        public GetTableTableInfo build() {
            final var _resultValue = new GetTableTableInfo();
            _resultValue.accessPoint = accessPoint;
            _resultValue.browseOnly = browseOnly;
            _resultValue.catalogName = catalogName;
            _resultValue.columns = columns;
            _resultValue.comment = comment;
            _resultValue.createdAt = createdAt;
            _resultValue.createdBy = createdBy;
            _resultValue.dataAccessConfigurationId = dataAccessConfigurationId;
            _resultValue.dataSourceFormat = dataSourceFormat;
            _resultValue.deletedAt = deletedAt;
            _resultValue.deltaRuntimePropertiesKvpairs = deltaRuntimePropertiesKvpairs;
            _resultValue.effectivePredictiveOptimizationFlag = effectivePredictiveOptimizationFlag;
            _resultValue.enablePredictiveOptimization = enablePredictiveOptimization;
            _resultValue.encryptionDetails = encryptionDetails;
            _resultValue.fullName = fullName;
            _resultValue.metastoreId = metastoreId;
            _resultValue.name = name;
            _resultValue.owner = owner;
            _resultValue.pipelineId = pipelineId;
            _resultValue.properties = properties;
            _resultValue.rowFilter = rowFilter;
            _resultValue.schemaName = schemaName;
            _resultValue.securableKindManifest = securableKindManifest;
            _resultValue.sqlPath = sqlPath;
            _resultValue.storageCredentialName = storageCredentialName;
            _resultValue.storageLocation = storageLocation;
            _resultValue.tableConstraints = tableConstraints;
            _resultValue.tableId = tableId;
            _resultValue.tableType = tableType;
            _resultValue.updatedAt = updatedAt;
            _resultValue.updatedBy = updatedBy;
            _resultValue.viewDefinition = viewDefinition;
            _resultValue.viewDependencies = viewDependencies;
            return _resultValue;
        }
    }
}
