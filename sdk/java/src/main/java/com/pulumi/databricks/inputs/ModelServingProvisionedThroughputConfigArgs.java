// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.ModelServingProvisionedThroughputConfigServedEntityArgs;
import com.pulumi.databricks.inputs.ModelServingProvisionedThroughputConfigTrafficConfigArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelServingProvisionedThroughputConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelServingProvisionedThroughputConfigArgs Empty = new ModelServingProvisionedThroughputConfigArgs();

    /**
     * A list of served entities for the endpoint to serve.
     * 
     */
    @Import(name="servedEntities")
    private @Nullable Output<List<ModelServingProvisionedThroughputConfigServedEntityArgs>> servedEntities;

    /**
     * @return A list of served entities for the endpoint to serve.
     * 
     */
    public Optional<Output<List<ModelServingProvisionedThroughputConfigServedEntityArgs>>> servedEntities() {
        return Optional.ofNullable(this.servedEntities);
    }

    /**
     * A single block represents the traffic split configuration amongst the served models.
     * 
     */
    @Import(name="trafficConfig")
    private @Nullable Output<ModelServingProvisionedThroughputConfigTrafficConfigArgs> trafficConfig;

    /**
     * @return A single block represents the traffic split configuration amongst the served models.
     * 
     */
    public Optional<Output<ModelServingProvisionedThroughputConfigTrafficConfigArgs>> trafficConfig() {
        return Optional.ofNullable(this.trafficConfig);
    }

    private ModelServingProvisionedThroughputConfigArgs() {}

    private ModelServingProvisionedThroughputConfigArgs(ModelServingProvisionedThroughputConfigArgs $) {
        this.servedEntities = $.servedEntities;
        this.trafficConfig = $.trafficConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelServingProvisionedThroughputConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelServingProvisionedThroughputConfigArgs $;

        public Builder() {
            $ = new ModelServingProvisionedThroughputConfigArgs();
        }

        public Builder(ModelServingProvisionedThroughputConfigArgs defaults) {
            $ = new ModelServingProvisionedThroughputConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param servedEntities A list of served entities for the endpoint to serve.
         * 
         * @return builder
         * 
         */
        public Builder servedEntities(@Nullable Output<List<ModelServingProvisionedThroughputConfigServedEntityArgs>> servedEntities) {
            $.servedEntities = servedEntities;
            return this;
        }

        /**
         * @param servedEntities A list of served entities for the endpoint to serve.
         * 
         * @return builder
         * 
         */
        public Builder servedEntities(List<ModelServingProvisionedThroughputConfigServedEntityArgs> servedEntities) {
            return servedEntities(Output.of(servedEntities));
        }

        /**
         * @param servedEntities A list of served entities for the endpoint to serve.
         * 
         * @return builder
         * 
         */
        public Builder servedEntities(ModelServingProvisionedThroughputConfigServedEntityArgs... servedEntities) {
            return servedEntities(List.of(servedEntities));
        }

        /**
         * @param trafficConfig A single block represents the traffic split configuration amongst the served models.
         * 
         * @return builder
         * 
         */
        public Builder trafficConfig(@Nullable Output<ModelServingProvisionedThroughputConfigTrafficConfigArgs> trafficConfig) {
            $.trafficConfig = trafficConfig;
            return this;
        }

        /**
         * @param trafficConfig A single block represents the traffic split configuration amongst the served models.
         * 
         * @return builder
         * 
         */
        public Builder trafficConfig(ModelServingProvisionedThroughputConfigTrafficConfigArgs trafficConfig) {
            return trafficConfig(Output.of(trafficConfig));
        }

        public ModelServingProvisionedThroughputConfigArgs build() {
            return $;
        }
    }

}
