// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.DatabaseSyncedDatabaseTableSpecNewPipelineSpec;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseSyncedDatabaseTableSpec {
    /**
     * @return If true, the synced table&#39;s logical database and schema resources in PG
     * will be created if they do not already exist
     * 
     */
    private @Nullable Boolean createDatabaseObjectsIfMissing;
    /**
     * @return At most one of existing_pipeline_id and new_pipeline_spec should be defined.
     * 
     * If existing_pipeline_id is defined, the synced table will be bin packed into the existing pipeline
     * referenced. This avoids creating a new pipeline and allows sharing existing compute.
     * In this case, the scheduling_policy of this synced table must match the scheduling policy of the existing pipeline
     * 
     */
    private @Nullable String existingPipelineId;
    /**
     * @return At most one of existing_pipeline_id and new_pipeline_spec should be defined.
     * 
     * If new_pipeline_spec is defined, a new pipeline is created for this synced table. The location pointed to is used
     * to store intermediate files (checkpoints, event logs etc). The caller must have write permissions to create Delta
     * tables in the specified catalog and schema. Again, note this requires write permissions, whereas the source table
     * only requires read permissions
     * 
     */
    private @Nullable DatabaseSyncedDatabaseTableSpecNewPipelineSpec newPipelineSpec;
    /**
     * @return Primary Key columns to be used for data insert/update in the destination
     * 
     */
    private @Nullable List<String> primaryKeyColumns;
    /**
     * @return Scheduling policy of the underlying pipeline. Possible values are: `CONTINUOUS`, `SNAPSHOT`, `TRIGGERED`
     * 
     */
    private @Nullable String schedulingPolicy;
    /**
     * @return Three-part (catalog, schema, table) name of the source Delta table
     * 
     */
    private @Nullable String sourceTableFullName;
    /**
     * @return Time series key to deduplicate (tie-break) rows with the same primary key
     * 
     */
    private @Nullable String timeseriesKey;

    private DatabaseSyncedDatabaseTableSpec() {}
    /**
     * @return If true, the synced table&#39;s logical database and schema resources in PG
     * will be created if they do not already exist
     * 
     */
    public Optional<Boolean> createDatabaseObjectsIfMissing() {
        return Optional.ofNullable(this.createDatabaseObjectsIfMissing);
    }
    /**
     * @return At most one of existing_pipeline_id and new_pipeline_spec should be defined.
     * 
     * If existing_pipeline_id is defined, the synced table will be bin packed into the existing pipeline
     * referenced. This avoids creating a new pipeline and allows sharing existing compute.
     * In this case, the scheduling_policy of this synced table must match the scheduling policy of the existing pipeline
     * 
     */
    public Optional<String> existingPipelineId() {
        return Optional.ofNullable(this.existingPipelineId);
    }
    /**
     * @return At most one of existing_pipeline_id and new_pipeline_spec should be defined.
     * 
     * If new_pipeline_spec is defined, a new pipeline is created for this synced table. The location pointed to is used
     * to store intermediate files (checkpoints, event logs etc). The caller must have write permissions to create Delta
     * tables in the specified catalog and schema. Again, note this requires write permissions, whereas the source table
     * only requires read permissions
     * 
     */
    public Optional<DatabaseSyncedDatabaseTableSpecNewPipelineSpec> newPipelineSpec() {
        return Optional.ofNullable(this.newPipelineSpec);
    }
    /**
     * @return Primary Key columns to be used for data insert/update in the destination
     * 
     */
    public List<String> primaryKeyColumns() {
        return this.primaryKeyColumns == null ? List.of() : this.primaryKeyColumns;
    }
    /**
     * @return Scheduling policy of the underlying pipeline. Possible values are: `CONTINUOUS`, `SNAPSHOT`, `TRIGGERED`
     * 
     */
    public Optional<String> schedulingPolicy() {
        return Optional.ofNullable(this.schedulingPolicy);
    }
    /**
     * @return Three-part (catalog, schema, table) name of the source Delta table
     * 
     */
    public Optional<String> sourceTableFullName() {
        return Optional.ofNullable(this.sourceTableFullName);
    }
    /**
     * @return Time series key to deduplicate (tie-break) rows with the same primary key
     * 
     */
    public Optional<String> timeseriesKey() {
        return Optional.ofNullable(this.timeseriesKey);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseSyncedDatabaseTableSpec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean createDatabaseObjectsIfMissing;
        private @Nullable String existingPipelineId;
        private @Nullable DatabaseSyncedDatabaseTableSpecNewPipelineSpec newPipelineSpec;
        private @Nullable List<String> primaryKeyColumns;
        private @Nullable String schedulingPolicy;
        private @Nullable String sourceTableFullName;
        private @Nullable String timeseriesKey;
        public Builder() {}
        public Builder(DatabaseSyncedDatabaseTableSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createDatabaseObjectsIfMissing = defaults.createDatabaseObjectsIfMissing;
    	      this.existingPipelineId = defaults.existingPipelineId;
    	      this.newPipelineSpec = defaults.newPipelineSpec;
    	      this.primaryKeyColumns = defaults.primaryKeyColumns;
    	      this.schedulingPolicy = defaults.schedulingPolicy;
    	      this.sourceTableFullName = defaults.sourceTableFullName;
    	      this.timeseriesKey = defaults.timeseriesKey;
        }

        @CustomType.Setter
        public Builder createDatabaseObjectsIfMissing(@Nullable Boolean createDatabaseObjectsIfMissing) {

            this.createDatabaseObjectsIfMissing = createDatabaseObjectsIfMissing;
            return this;
        }
        @CustomType.Setter
        public Builder existingPipelineId(@Nullable String existingPipelineId) {

            this.existingPipelineId = existingPipelineId;
            return this;
        }
        @CustomType.Setter
        public Builder newPipelineSpec(@Nullable DatabaseSyncedDatabaseTableSpecNewPipelineSpec newPipelineSpec) {

            this.newPipelineSpec = newPipelineSpec;
            return this;
        }
        @CustomType.Setter
        public Builder primaryKeyColumns(@Nullable List<String> primaryKeyColumns) {

            this.primaryKeyColumns = primaryKeyColumns;
            return this;
        }
        public Builder primaryKeyColumns(String... primaryKeyColumns) {
            return primaryKeyColumns(List.of(primaryKeyColumns));
        }
        @CustomType.Setter
        public Builder schedulingPolicy(@Nullable String schedulingPolicy) {

            this.schedulingPolicy = schedulingPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder sourceTableFullName(@Nullable String sourceTableFullName) {

            this.sourceTableFullName = sourceTableFullName;
            return this;
        }
        @CustomType.Setter
        public Builder timeseriesKey(@Nullable String timeseriesKey) {

            this.timeseriesKey = timeseriesKey;
            return this;
        }
        public DatabaseSyncedDatabaseTableSpec build() {
            final var _resultValue = new DatabaseSyncedDatabaseTableSpec();
            _resultValue.createDatabaseObjectsIfMissing = createDatabaseObjectsIfMissing;
            _resultValue.existingPipelineId = existingPipelineId;
            _resultValue.newPipelineSpec = newPipelineSpec;
            _resultValue.primaryKeyColumns = primaryKeyColumns;
            _resultValue.schedulingPolicy = schedulingPolicy;
            _resultValue.sourceTableFullName = sourceTableFullName;
            _resultValue.timeseriesKey = timeseriesKey;
            return _resultValue;
        }
    }
}
