// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.SqlAlertArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.SqlAlertState;
import com.pulumi.databricks.outputs.SqlAlertOptions;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource allows you to manage [Databricks SQL Alerts](https://docs.databricks.com/sql/user/queries/index.html).
 * 
 * **Note:** To manage [SQLA resources](https://docs.databricks.com/sql/get-started/concepts.html) you must have `databricks_sql_access` on your databricks.Group or databricks_user.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.Directory;
 * import com.pulumi.databricks.DirectoryArgs;
 * import com.pulumi.databricks.SqlQuery;
 * import com.pulumi.databricks.SqlQueryArgs;
 * import com.pulumi.databricks.SqlAlert;
 * import com.pulumi.databricks.SqlAlertArgs;
 * import com.pulumi.databricks.inputs.SqlAlertOptionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sharedDir = new Directory("sharedDir", DirectoryArgs.builder()
 *             .path("/Shared/Queries")
 *             .build());
 * 
 *         var this_ = new SqlQuery("this", SqlQueryArgs.builder()
 *             .dataSourceId(example.dataSourceId())
 *             .name("My Query Name")
 *             .query("SELECT 1 AS p1, 2 as p2")
 *             .parent(sharedDir.objectId().applyValue(objectId -> String.format("folders/%s", objectId)))
 *             .build());
 * 
 *         var alert = new SqlAlert("alert", SqlAlertArgs.builder()
 *             .queryId(this_.id())
 *             .name("My Alert")
 *             .parent(sharedDir.objectId().applyValue(objectId -> String.format("folders/%s", objectId)))
 *             .rearm(1)
 *             .options(SqlAlertOptionsArgs.builder()
 *                 .column("p1")
 *                 .op("==")
 *                 .value("2")
 *                 .muted(false)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Related Resources
 * 
 * The following resources are often used in the same context:
 * 
 * * End to end workspace management guide.
 * * databricks.SqlQuery to manage Databricks SQL [Queries](https://docs.databricks.com/sql/user/queries/index.html).
 * * databricks.SqlEndpoint to manage Databricks SQL [Endpoints](https://docs.databricks.com/sql/admin/sql-endpoints.html).
 * * databricks.Directory to manage directories in [Databricks Workpace](https://docs.databricks.com/workspace/workspace-objects.html).
 * 
 */
@ResourceType(type="databricks:index/sqlAlert:SqlAlert")
public class SqlAlert extends com.pulumi.resources.CustomResource {
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Name of the alert.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the alert.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Alert configuration options.
     * 
     */
    @Export(name="options", refs={SqlAlertOptions.class}, tree="[0]")
    private Output<SqlAlertOptions> options;

    /**
     * @return Alert configuration options.
     * 
     */
    public Output<SqlAlertOptions> options() {
        return this.options;
    }
    /**
     * The identifier of the workspace folder containing the alert. The default is ther user&#39;s home folder. The folder identifier is formatted as `folder/&lt;folder_id&gt;`.
     * 
     */
    @Export(name="parent", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> parent;

    /**
     * @return The identifier of the workspace folder containing the alert. The default is ther user&#39;s home folder. The folder identifier is formatted as `folder/&lt;folder_id&gt;`.
     * 
     */
    public Output<Optional<String>> parent() {
        return Codegen.optional(this.parent);
    }
    /**
     * ID of the query evaluated by the alert.
     * 
     */
    @Export(name="queryId", refs={String.class}, tree="[0]")
    private Output<String> queryId;

    /**
     * @return ID of the query evaluated by the alert.
     * 
     */
    public Output<String> queryId() {
        return this.queryId;
    }
    /**
     * Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
     * 
     */
    @Export(name="rearm", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> rearm;

    /**
     * @return Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
     * 
     */
    public Output<Optional<Integer>> rearm() {
        return Codegen.optional(this.rearm);
    }
    @Export(name="updatedAt", refs={String.class}, tree="[0]")
    private Output<String> updatedAt;

    public Output<String> updatedAt() {
        return this.updatedAt;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SqlAlert(String name) {
        this(name, SqlAlertArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SqlAlert(String name, SqlAlertArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SqlAlert(String name, SqlAlertArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/sqlAlert:SqlAlert", name, args == null ? SqlAlertArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SqlAlert(String name, Output<String> id, @Nullable SqlAlertState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/sqlAlert:SqlAlert", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SqlAlert get(String name, Output<String> id, @Nullable SqlAlertState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SqlAlert(name, id, state, options);
    }
}
