// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEntityTagAssignmentsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEntityTagAssignmentsPlainArgs Empty = new GetEntityTagAssignmentsPlainArgs();

    /**
     * The fully qualified name of the entity to which the tag is assigned
     * 
     */
    @Import(name="entityName", required=true)
    private String entityName;

    /**
     * @return The fully qualified name of the entity to which the tag is assigned
     * 
     */
    public String entityName() {
        return this.entityName;
    }

    /**
     * The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
     * 
     */
    @Import(name="entityType", required=true)
    private String entityType;

    /**
     * @return The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
     * 
     */
    public String entityType() {
        return this.entityType;
    }

    /**
     * Workspace ID of the resource
     * 
     */
    @Import(name="workspaceId")
    private @Nullable String workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Optional<String> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private GetEntityTagAssignmentsPlainArgs() {}

    private GetEntityTagAssignmentsPlainArgs(GetEntityTagAssignmentsPlainArgs $) {
        this.entityName = $.entityName;
        this.entityType = $.entityType;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEntityTagAssignmentsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEntityTagAssignmentsPlainArgs $;

        public Builder() {
            $ = new GetEntityTagAssignmentsPlainArgs();
        }

        public Builder(GetEntityTagAssignmentsPlainArgs defaults) {
            $ = new GetEntityTagAssignmentsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param entityName The fully qualified name of the entity to which the tag is assigned
         * 
         * @return builder
         * 
         */
        public Builder entityName(String entityName) {
            $.entityName = entityName;
            return this;
        }

        /**
         * @param entityType The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
         * 
         * @return builder
         * 
         */
        public Builder entityType(String entityType) {
            $.entityType = entityType;
            return this;
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable String workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        public GetEntityTagAssignmentsPlainArgs build() {
            if ($.entityName == null) {
                throw new MissingRequiredPropertyException("GetEntityTagAssignmentsPlainArgs", "entityName");
            }
            if ($.entityType == null) {
                throw new MissingRequiredPropertyException("GetEntityTagAssignmentsPlainArgs", "entityType");
            }
            return $;
        }
    }

}
