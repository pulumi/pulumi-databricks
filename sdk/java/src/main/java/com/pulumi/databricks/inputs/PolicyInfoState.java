// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.PolicyInfoColumnMaskArgs;
import com.pulumi.databricks.inputs.PolicyInfoMatchColumnArgs;
import com.pulumi.databricks.inputs.PolicyInfoRowFilterArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyInfoState extends com.pulumi.resources.ResourceArgs {

    public static final PolicyInfoState Empty = new PolicyInfoState();

    /**
     * Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    @Import(name="columnMask")
    private @Nullable Output<PolicyInfoColumnMaskArgs> columnMask;

    /**
     * @return Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    public Optional<Output<PolicyInfoColumnMaskArgs>> columnMask() {
        return Optional.ofNullable(this.columnMask);
    }

    /**
     * Optional description of the policy
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Optional description of the policy
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * (integer) - Time at which the policy was created, in epoch milliseconds. Output only
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<Integer> createdAt;

    /**
     * @return (integer) - Time at which the policy was created, in epoch milliseconds. Output only
     * 
     */
    public Optional<Output<Integer>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * (string) - Username of the user who created the policy. Output only
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return (string) - Username of the user who created the policy. Output only
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * Optional list of user or group names that should be excluded from the policy
     * 
     */
    @Import(name="exceptPrincipals")
    private @Nullable Output<List<String>> exceptPrincipals;

    /**
     * @return Optional list of user or group names that should be excluded from the policy
     * 
     */
    public Optional<Output<List<String>>> exceptPrincipals() {
        return Optional.ofNullable(this.exceptPrincipals);
    }

    /**
     * Type of securables that the policy should take effect on.
     * Only `TABLE` is supported at this moment.
     * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    @Import(name="forSecurableType")
    private @Nullable Output<String> forSecurableType;

    /**
     * @return Type of securables that the policy should take effect on.
     * Only `TABLE` is supported at this moment.
     * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    public Optional<Output<String>> forSecurableType() {
        return Optional.ofNullable(this.forSecurableType);
    }

    /**
     * Optional list of condition expressions used to match table columns.
     * Only valid when `for_securable_type` is `TABLE`.
     * When specified, the policy only applies to tables whose columns satisfy all match conditions
     * 
     */
    @Import(name="matchColumns")
    private @Nullable Output<List<PolicyInfoMatchColumnArgs>> matchColumns;

    /**
     * @return Optional list of condition expressions used to match table columns.
     * Only valid when `for_securable_type` is `TABLE`.
     * When specified, the policy only applies to tables whose columns satisfy all match conditions
     * 
     */
    public Optional<Output<List<PolicyInfoMatchColumnArgs>>> matchColumns() {
        return Optional.ofNullable(this.matchColumns);
    }

    /**
     * Name of the policy. Required on create and optional on update.
     * To rename the policy, set `name` to a different value on update
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the policy. Required on create and optional on update.
     * To rename the policy, set `name` to a different value on update
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Full name of the securable on which the policy is defined.
     * Required on create and ignored on update
     * 
     */
    @Import(name="onSecurableFullname")
    private @Nullable Output<String> onSecurableFullname;

    /**
     * @return Full name of the securable on which the policy is defined.
     * Required on create and ignored on update
     * 
     */
    public Optional<Output<String>> onSecurableFullname() {
        return Optional.ofNullable(this.onSecurableFullname);
    }

    /**
     * Type of the securable on which the policy is defined.
     * Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
     * Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    @Import(name="onSecurableType")
    private @Nullable Output<String> onSecurableType;

    /**
     * @return Type of the securable on which the policy is defined.
     * Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
     * Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    public Optional<Output<String>> onSecurableType() {
        return Optional.ofNullable(this.onSecurableType);
    }

    /**
     * Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
     * 
     */
    @Import(name="policyType")
    private @Nullable Output<String> policyType;

    /**
     * @return Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
     * 
     */
    public Optional<Output<String>> policyType() {
        return Optional.ofNullable(this.policyType);
    }

    /**
     * Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    @Import(name="rowFilter")
    private @Nullable Output<PolicyInfoRowFilterArgs> rowFilter;

    /**
     * @return Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    public Optional<Output<PolicyInfoRowFilterArgs>> rowFilter() {
        return Optional.ofNullable(this.rowFilter);
    }

    /**
     * List of user or group names that the policy applies to.
     * Required on create and optional on update
     * 
     */
    @Import(name="toPrincipals")
    private @Nullable Output<List<String>> toPrincipals;

    /**
     * @return List of user or group names that the policy applies to.
     * Required on create and optional on update
     * 
     */
    public Optional<Output<List<String>>> toPrincipals() {
        return Optional.ofNullable(this.toPrincipals);
    }

    /**
     * (integer) - Time at which the policy was last modified, in epoch milliseconds. Output only
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<Integer> updatedAt;

    /**
     * @return (integer) - Time at which the policy was last modified, in epoch milliseconds. Output only
     * 
     */
    public Optional<Output<Integer>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * (string) - Username of the user who last modified the policy. Output only
     * 
     */
    @Import(name="updatedBy")
    private @Nullable Output<String> updatedBy;

    /**
     * @return (string) - Username of the user who last modified the policy. Output only
     * 
     */
    public Optional<Output<String>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    /**
     * Optional condition when the policy should take effect
     * 
     */
    @Import(name="whenCondition")
    private @Nullable Output<String> whenCondition;

    /**
     * @return Optional condition when the policy should take effect
     * 
     */
    public Optional<Output<String>> whenCondition() {
        return Optional.ofNullable(this.whenCondition);
    }

    /**
     * Workspace ID of the resource
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private PolicyInfoState() {}

    private PolicyInfoState(PolicyInfoState $) {
        this.columnMask = $.columnMask;
        this.comment = $.comment;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.exceptPrincipals = $.exceptPrincipals;
        this.forSecurableType = $.forSecurableType;
        this.matchColumns = $.matchColumns;
        this.name = $.name;
        this.onSecurableFullname = $.onSecurableFullname;
        this.onSecurableType = $.onSecurableType;
        this.policyType = $.policyType;
        this.rowFilter = $.rowFilter;
        this.toPrincipals = $.toPrincipals;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
        this.whenCondition = $.whenCondition;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyInfoState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyInfoState $;

        public Builder() {
            $ = new PolicyInfoState();
        }

        public Builder(PolicyInfoState defaults) {
            $ = new PolicyInfoState(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnMask Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
         * Required on create and optional on update. When specified on update,
         * the new options will replace the existing options as a whole
         * 
         * @return builder
         * 
         */
        public Builder columnMask(@Nullable Output<PolicyInfoColumnMaskArgs> columnMask) {
            $.columnMask = columnMask;
            return this;
        }

        /**
         * @param columnMask Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
         * Required on create and optional on update. When specified on update,
         * the new options will replace the existing options as a whole
         * 
         * @return builder
         * 
         */
        public Builder columnMask(PolicyInfoColumnMaskArgs columnMask) {
            return columnMask(Output.of(columnMask));
        }

        /**
         * @param comment Optional description of the policy
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Optional description of the policy
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param createdAt (integer) - Time at which the policy was created, in epoch milliseconds. Output only
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<Integer> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt (integer) - Time at which the policy was created, in epoch milliseconds. Output only
         * 
         * @return builder
         * 
         */
        public Builder createdAt(Integer createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy (string) - Username of the user who created the policy. Output only
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy (string) - Username of the user who created the policy. Output only
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param exceptPrincipals Optional list of user or group names that should be excluded from the policy
         * 
         * @return builder
         * 
         */
        public Builder exceptPrincipals(@Nullable Output<List<String>> exceptPrincipals) {
            $.exceptPrincipals = exceptPrincipals;
            return this;
        }

        /**
         * @param exceptPrincipals Optional list of user or group names that should be excluded from the policy
         * 
         * @return builder
         * 
         */
        public Builder exceptPrincipals(List<String> exceptPrincipals) {
            return exceptPrincipals(Output.of(exceptPrincipals));
        }

        /**
         * @param exceptPrincipals Optional list of user or group names that should be excluded from the policy
         * 
         * @return builder
         * 
         */
        public Builder exceptPrincipals(String... exceptPrincipals) {
            return exceptPrincipals(List.of(exceptPrincipals));
        }

        /**
         * @param forSecurableType Type of securables that the policy should take effect on.
         * Only `TABLE` is supported at this moment.
         * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
         * 
         * @return builder
         * 
         */
        public Builder forSecurableType(@Nullable Output<String> forSecurableType) {
            $.forSecurableType = forSecurableType;
            return this;
        }

        /**
         * @param forSecurableType Type of securables that the policy should take effect on.
         * Only `TABLE` is supported at this moment.
         * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
         * 
         * @return builder
         * 
         */
        public Builder forSecurableType(String forSecurableType) {
            return forSecurableType(Output.of(forSecurableType));
        }

        /**
         * @param matchColumns Optional list of condition expressions used to match table columns.
         * Only valid when `for_securable_type` is `TABLE`.
         * When specified, the policy only applies to tables whose columns satisfy all match conditions
         * 
         * @return builder
         * 
         */
        public Builder matchColumns(@Nullable Output<List<PolicyInfoMatchColumnArgs>> matchColumns) {
            $.matchColumns = matchColumns;
            return this;
        }

        /**
         * @param matchColumns Optional list of condition expressions used to match table columns.
         * Only valid when `for_securable_type` is `TABLE`.
         * When specified, the policy only applies to tables whose columns satisfy all match conditions
         * 
         * @return builder
         * 
         */
        public Builder matchColumns(List<PolicyInfoMatchColumnArgs> matchColumns) {
            return matchColumns(Output.of(matchColumns));
        }

        /**
         * @param matchColumns Optional list of condition expressions used to match table columns.
         * Only valid when `for_securable_type` is `TABLE`.
         * When specified, the policy only applies to tables whose columns satisfy all match conditions
         * 
         * @return builder
         * 
         */
        public Builder matchColumns(PolicyInfoMatchColumnArgs... matchColumns) {
            return matchColumns(List.of(matchColumns));
        }

        /**
         * @param name Name of the policy. Required on create and optional on update.
         * To rename the policy, set `name` to a different value on update
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the policy. Required on create and optional on update.
         * To rename the policy, set `name` to a different value on update
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param onSecurableFullname Full name of the securable on which the policy is defined.
         * Required on create and ignored on update
         * 
         * @return builder
         * 
         */
        public Builder onSecurableFullname(@Nullable Output<String> onSecurableFullname) {
            $.onSecurableFullname = onSecurableFullname;
            return this;
        }

        /**
         * @param onSecurableFullname Full name of the securable on which the policy is defined.
         * Required on create and ignored on update
         * 
         * @return builder
         * 
         */
        public Builder onSecurableFullname(String onSecurableFullname) {
            return onSecurableFullname(Output.of(onSecurableFullname));
        }

        /**
         * @param onSecurableType Type of the securable on which the policy is defined.
         * Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
         * Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
         * 
         * @return builder
         * 
         */
        public Builder onSecurableType(@Nullable Output<String> onSecurableType) {
            $.onSecurableType = onSecurableType;
            return this;
        }

        /**
         * @param onSecurableType Type of the securable on which the policy is defined.
         * Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
         * Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
         * 
         * @return builder
         * 
         */
        public Builder onSecurableType(String onSecurableType) {
            return onSecurableType(Output.of(onSecurableType));
        }

        /**
         * @param policyType Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
         * 
         * @return builder
         * 
         */
        public Builder policyType(@Nullable Output<String> policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param policyType Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            return policyType(Output.of(policyType));
        }

        /**
         * @param rowFilter Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
         * Required on create and optional on update. When specified on update,
         * the new options will replace the existing options as a whole
         * 
         * @return builder
         * 
         */
        public Builder rowFilter(@Nullable Output<PolicyInfoRowFilterArgs> rowFilter) {
            $.rowFilter = rowFilter;
            return this;
        }

        /**
         * @param rowFilter Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
         * Required on create and optional on update. When specified on update,
         * the new options will replace the existing options as a whole
         * 
         * @return builder
         * 
         */
        public Builder rowFilter(PolicyInfoRowFilterArgs rowFilter) {
            return rowFilter(Output.of(rowFilter));
        }

        /**
         * @param toPrincipals List of user or group names that the policy applies to.
         * Required on create and optional on update
         * 
         * @return builder
         * 
         */
        public Builder toPrincipals(@Nullable Output<List<String>> toPrincipals) {
            $.toPrincipals = toPrincipals;
            return this;
        }

        /**
         * @param toPrincipals List of user or group names that the policy applies to.
         * Required on create and optional on update
         * 
         * @return builder
         * 
         */
        public Builder toPrincipals(List<String> toPrincipals) {
            return toPrincipals(Output.of(toPrincipals));
        }

        /**
         * @param toPrincipals List of user or group names that the policy applies to.
         * Required on create and optional on update
         * 
         * @return builder
         * 
         */
        public Builder toPrincipals(String... toPrincipals) {
            return toPrincipals(List.of(toPrincipals));
        }

        /**
         * @param updatedAt (integer) - Time at which the policy was last modified, in epoch milliseconds. Output only
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<Integer> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt (integer) - Time at which the policy was last modified, in epoch milliseconds. Output only
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(Integer updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param updatedBy (string) - Username of the user who last modified the policy. Output only
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(@Nullable Output<String> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        /**
         * @param updatedBy (string) - Username of the user who last modified the policy. Output only
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(String updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        /**
         * @param whenCondition Optional condition when the policy should take effect
         * 
         * @return builder
         * 
         */
        public Builder whenCondition(@Nullable Output<String> whenCondition) {
            $.whenCondition = whenCondition;
            return this;
        }

        /**
         * @param whenCondition Optional condition when the policy should take effect
         * 
         * @return builder
         * 
         */
        public Builder whenCondition(String whenCondition) {
            return whenCondition(Output.of(whenCondition));
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public PolicyInfoState build() {
            return $;
        }
    }

}
