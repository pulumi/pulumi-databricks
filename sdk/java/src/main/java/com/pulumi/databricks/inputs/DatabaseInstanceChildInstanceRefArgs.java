// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseInstanceChildInstanceRefArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceChildInstanceRefArgs Empty = new DatabaseInstanceChildInstanceRefArgs();

    /**
     * Branch time of the ref database instance.
     * For a parent ref instance, this is the point in time on the parent instance from which the
     * instance was created.
     * For a child ref instance, this is the point in time on the instance from which the child
     * instance was created.
     * Input: For specifying the point in time to create a child instance. Optional.
     * Output: Only populated if provided as input to create a child instance
     * 
     */
    @Import(name="branchTime")
    private @Nullable Output<String> branchTime;

    /**
     * @return Branch time of the ref database instance.
     * For a parent ref instance, this is the point in time on the parent instance from which the
     * instance was created.
     * For a child ref instance, this is the point in time on the instance from which the child
     * instance was created.
     * Input: For specifying the point in time to create a child instance. Optional.
     * Output: Only populated if provided as input to create a child instance
     * 
     */
    public Optional<Output<String>> branchTime() {
        return Optional.ofNullable(this.branchTime);
    }

    /**
     * (string) - xref AIP-129. `lsn` is owned by the client, while `effectiveLsn` is owned by the server.
     * `lsn` will only be set in Create/Update response messages if and only if the user provides the field via the request.
     * `effectiveLsn` on the other hand will always bet set in all response messages (Create/Update/Get/List).
     * For a parent ref instance, this is the LSN on the parent instance from which the
     * instance was created.
     * For a child ref instance, this is the LSN on the instance from which the child instance
     * was created
     * 
     */
    @Import(name="effectiveLsn")
    private @Nullable Output<String> effectiveLsn;

    /**
     * @return (string) - xref AIP-129. `lsn` is owned by the client, while `effectiveLsn` is owned by the server.
     * `lsn` will only be set in Create/Update response messages if and only if the user provides the field via the request.
     * `effectiveLsn` on the other hand will always bet set in all response messages (Create/Update/Get/List).
     * For a parent ref instance, this is the LSN on the parent instance from which the
     * instance was created.
     * For a child ref instance, this is the LSN on the instance from which the child instance
     * was created
     * 
     */
    public Optional<Output<String>> effectiveLsn() {
        return Optional.ofNullable(this.effectiveLsn);
    }

    /**
     * User-specified WAL LSN of the ref database instance.
     * 
     * Input: For specifying the WAL LSN to create a child instance. Optional.
     * Output: Only populated if provided as input to create a child instance
     * 
     */
    @Import(name="lsn")
    private @Nullable Output<String> lsn;

    /**
     * @return User-specified WAL LSN of the ref database instance.
     * 
     * Input: For specifying the WAL LSN to create a child instance. Optional.
     * Output: Only populated if provided as input to create a child instance
     * 
     */
    public Optional<Output<String>> lsn() {
        return Optional.ofNullable(this.lsn);
    }

    /**
     * The name of the instance. This is the unique identifier for the instance
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the instance. This is the unique identifier for the instance
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (string) - Id of the ref database instance
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return (string) - Id of the ref database instance
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private DatabaseInstanceChildInstanceRefArgs() {}

    private DatabaseInstanceChildInstanceRefArgs(DatabaseInstanceChildInstanceRefArgs $) {
        this.branchTime = $.branchTime;
        this.effectiveLsn = $.effectiveLsn;
        this.lsn = $.lsn;
        this.name = $.name;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseInstanceChildInstanceRefArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseInstanceChildInstanceRefArgs $;

        public Builder() {
            $ = new DatabaseInstanceChildInstanceRefArgs();
        }

        public Builder(DatabaseInstanceChildInstanceRefArgs defaults) {
            $ = new DatabaseInstanceChildInstanceRefArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchTime Branch time of the ref database instance.
         * For a parent ref instance, this is the point in time on the parent instance from which the
         * instance was created.
         * For a child ref instance, this is the point in time on the instance from which the child
         * instance was created.
         * Input: For specifying the point in time to create a child instance. Optional.
         * Output: Only populated if provided as input to create a child instance
         * 
         * @return builder
         * 
         */
        public Builder branchTime(@Nullable Output<String> branchTime) {
            $.branchTime = branchTime;
            return this;
        }

        /**
         * @param branchTime Branch time of the ref database instance.
         * For a parent ref instance, this is the point in time on the parent instance from which the
         * instance was created.
         * For a child ref instance, this is the point in time on the instance from which the child
         * instance was created.
         * Input: For specifying the point in time to create a child instance. Optional.
         * Output: Only populated if provided as input to create a child instance
         * 
         * @return builder
         * 
         */
        public Builder branchTime(String branchTime) {
            return branchTime(Output.of(branchTime));
        }

        /**
         * @param effectiveLsn (string) - xref AIP-129. `lsn` is owned by the client, while `effectiveLsn` is owned by the server.
         * `lsn` will only be set in Create/Update response messages if and only if the user provides the field via the request.
         * `effectiveLsn` on the other hand will always bet set in all response messages (Create/Update/Get/List).
         * For a parent ref instance, this is the LSN on the parent instance from which the
         * instance was created.
         * For a child ref instance, this is the LSN on the instance from which the child instance
         * was created
         * 
         * @return builder
         * 
         */
        public Builder effectiveLsn(@Nullable Output<String> effectiveLsn) {
            $.effectiveLsn = effectiveLsn;
            return this;
        }

        /**
         * @param effectiveLsn (string) - xref AIP-129. `lsn` is owned by the client, while `effectiveLsn` is owned by the server.
         * `lsn` will only be set in Create/Update response messages if and only if the user provides the field via the request.
         * `effectiveLsn` on the other hand will always bet set in all response messages (Create/Update/Get/List).
         * For a parent ref instance, this is the LSN on the parent instance from which the
         * instance was created.
         * For a child ref instance, this is the LSN on the instance from which the child instance
         * was created
         * 
         * @return builder
         * 
         */
        public Builder effectiveLsn(String effectiveLsn) {
            return effectiveLsn(Output.of(effectiveLsn));
        }

        /**
         * @param lsn User-specified WAL LSN of the ref database instance.
         * 
         * Input: For specifying the WAL LSN to create a child instance. Optional.
         * Output: Only populated if provided as input to create a child instance
         * 
         * @return builder
         * 
         */
        public Builder lsn(@Nullable Output<String> lsn) {
            $.lsn = lsn;
            return this;
        }

        /**
         * @param lsn User-specified WAL LSN of the ref database instance.
         * 
         * Input: For specifying the WAL LSN to create a child instance. Optional.
         * Output: Only populated if provided as input to create a child instance
         * 
         * @return builder
         * 
         */
        public Builder lsn(String lsn) {
            return lsn(Output.of(lsn));
        }

        /**
         * @param name The name of the instance. This is the unique identifier for the instance
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the instance. This is the unique identifier for the instance
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param uid (string) - Id of the ref database instance
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid (string) - Id of the ref database instance
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public DatabaseInstanceChildInstanceRefArgs build() {
            return $;
        }
    }

}
