// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetServicePrincipalArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetServicePrincipalArgs Empty = new GetServicePrincipalArgs();

    @Import(name="aclPrincipalId")
    private @Nullable Output<String> aclPrincipalId;

    public Optional<Output<String>> aclPrincipalId() {
        return Optional.ofNullable(this.aclPrincipalId);
    }

    @Import(name="active")
    private @Nullable Output<Boolean> active;

    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    @Import(name="home")
    private @Nullable Output<String> home;

    public Optional<Output<String>> home() {
        return Optional.ofNullable(this.home);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="repos")
    private @Nullable Output<String> repos;

    public Optional<Output<String>> repos() {
        return Optional.ofNullable(this.repos);
    }

    @Import(name="spId")
    private @Nullable Output<String> spId;

    public Optional<Output<String>> spId() {
        return Optional.ofNullable(this.spId);
    }

    private GetServicePrincipalArgs() {}

    private GetServicePrincipalArgs(GetServicePrincipalArgs $) {
        this.aclPrincipalId = $.aclPrincipalId;
        this.active = $.active;
        this.applicationId = $.applicationId;
        this.displayName = $.displayName;
        this.externalId = $.externalId;
        this.home = $.home;
        this.id = $.id;
        this.repos = $.repos;
        this.spId = $.spId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServicePrincipalArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServicePrincipalArgs $;

        public Builder() {
            $ = new GetServicePrincipalArgs();
        }

        public Builder(GetServicePrincipalArgs defaults) {
            $ = new GetServicePrincipalArgs(Objects.requireNonNull(defaults));
        }

        public Builder aclPrincipalId(@Nullable Output<String> aclPrincipalId) {
            $.aclPrincipalId = aclPrincipalId;
            return this;
        }

        public Builder aclPrincipalId(String aclPrincipalId) {
            return aclPrincipalId(Output.of(aclPrincipalId));
        }

        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        public Builder home(@Nullable Output<String> home) {
            $.home = home;
            return this;
        }

        public Builder home(String home) {
            return home(Output.of(home));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder repos(@Nullable Output<String> repos) {
            $.repos = repos;
            return this;
        }

        public Builder repos(String repos) {
            return repos(Output.of(repos));
        }

        public Builder spId(@Nullable Output<String> spId) {
            $.spId = spId;
            return this;
        }

        public Builder spId(String spId) {
            return spId(Output.of(spId));
        }

        public GetServicePrincipalArgs build() {
            return $;
        }
    }

}
