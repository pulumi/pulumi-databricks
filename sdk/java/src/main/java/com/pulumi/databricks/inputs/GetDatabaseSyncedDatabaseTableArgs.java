// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetDatabaseSyncedDatabaseTableSpecArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDatabaseSyncedDatabaseTableArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDatabaseSyncedDatabaseTableArgs Empty = new GetDatabaseSyncedDatabaseTableArgs();

    /**
     * (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
     * This is optional when creating synced database tables in registered catalogs. If this field is specified
     * when creating synced database tables in registered catalogs, the database instance name MUST
     * match that of the registered catalog (or the request will be rejected)
     * 
     */
    @Import(name="databaseInstanceName")
    private @Nullable Output<String> databaseInstanceName;

    /**
     * @return (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
     * This is optional when creating synced database tables in registered catalogs. If this field is specified
     * when creating synced database tables in registered catalogs, the database instance name MUST
     * match that of the registered catalog (or the request will be rejected)
     * 
     */
    public Optional<Output<String>> databaseInstanceName() {
        return Optional.ofNullable(this.databaseInstanceName);
    }

    /**
     * (string) - Target Postgres database object (logical database) name for this table.
     * 
     */
    @Import(name="logicalDatabaseName")
    private @Nullable Output<String> logicalDatabaseName;

    /**
     * @return (string) - Target Postgres database object (logical database) name for this table.
     * 
     */
    public Optional<Output<String>> logicalDatabaseName() {
        return Optional.ofNullable(this.logicalDatabaseName);
    }

    /**
     * Full three-part (catalog, schema, table) name of the table
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Full three-part (catalog, schema, table) name of the table
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * (SyncedTableSpec)
     * 
     */
    @Import(name="spec")
    private @Nullable Output<GetDatabaseSyncedDatabaseTableSpecArgs> spec;

    /**
     * @return (SyncedTableSpec)
     * 
     */
    public Optional<Output<GetDatabaseSyncedDatabaseTableSpecArgs>> spec() {
        return Optional.ofNullable(this.spec);
    }

    /**
     * Workspace ID of the resource
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private GetDatabaseSyncedDatabaseTableArgs() {}

    private GetDatabaseSyncedDatabaseTableArgs(GetDatabaseSyncedDatabaseTableArgs $) {
        this.databaseInstanceName = $.databaseInstanceName;
        this.logicalDatabaseName = $.logicalDatabaseName;
        this.name = $.name;
        this.spec = $.spec;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatabaseSyncedDatabaseTableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatabaseSyncedDatabaseTableArgs $;

        public Builder() {
            $ = new GetDatabaseSyncedDatabaseTableArgs();
        }

        public Builder(GetDatabaseSyncedDatabaseTableArgs defaults) {
            $ = new GetDatabaseSyncedDatabaseTableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseInstanceName (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
         * This is optional when creating synced database tables in registered catalogs. If this field is specified
         * when creating synced database tables in registered catalogs, the database instance name MUST
         * match that of the registered catalog (or the request will be rejected)
         * 
         * @return builder
         * 
         */
        public Builder databaseInstanceName(@Nullable Output<String> databaseInstanceName) {
            $.databaseInstanceName = databaseInstanceName;
            return this;
        }

        /**
         * @param databaseInstanceName (string) - Name of the target database instance. This is required when creating synced database tables in standard catalogs.
         * This is optional when creating synced database tables in registered catalogs. If this field is specified
         * when creating synced database tables in registered catalogs, the database instance name MUST
         * match that of the registered catalog (or the request will be rejected)
         * 
         * @return builder
         * 
         */
        public Builder databaseInstanceName(String databaseInstanceName) {
            return databaseInstanceName(Output.of(databaseInstanceName));
        }

        /**
         * @param logicalDatabaseName (string) - Target Postgres database object (logical database) name for this table.
         * 
         * @return builder
         * 
         */
        public Builder logicalDatabaseName(@Nullable Output<String> logicalDatabaseName) {
            $.logicalDatabaseName = logicalDatabaseName;
            return this;
        }

        /**
         * @param logicalDatabaseName (string) - Target Postgres database object (logical database) name for this table.
         * 
         * @return builder
         * 
         */
        public Builder logicalDatabaseName(String logicalDatabaseName) {
            return logicalDatabaseName(Output.of(logicalDatabaseName));
        }

        /**
         * @param name Full three-part (catalog, schema, table) name of the table
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Full three-part (catalog, schema, table) name of the table
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param spec (SyncedTableSpec)
         * 
         * @return builder
         * 
         */
        public Builder spec(@Nullable Output<GetDatabaseSyncedDatabaseTableSpecArgs> spec) {
            $.spec = spec;
            return this;
        }

        /**
         * @param spec (SyncedTableSpec)
         * 
         * @return builder
         * 
         */
        public Builder spec(GetDatabaseSyncedDatabaseTableSpecArgs spec) {
            return spec(Output.of(spec));
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public GetDatabaseSyncedDatabaseTableArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTableArgs", "name");
            }
            return $;
        }
    }

}
