// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTask;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTask;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOn;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotifications;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskHealth;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskLibrary;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNewCluster;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTask;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettings;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTask;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTask;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTask;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTask;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTask;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTask;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTask;
import com.pulumi.databricks.outputs.GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotifications;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetJobJobSettingsSettingsTaskForEachTaskTask {
    private @Nullable String computeKey;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTask conditionTask;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTask dbtTask;
    private @Nullable List<GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOn> dependsOns;
    private @Nullable String description;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotifications emailNotifications;
    private @Nullable String existingClusterId;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskHealth health;
    private @Nullable String jobClusterKey;
    private @Nullable List<GetJobJobSettingsSettingsTaskForEachTaskTaskLibrary> libraries;
    private @Nullable Integer maxRetries;
    private @Nullable Integer minRetryIntervalMillis;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskNewCluster newCluster;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTask notebookTask;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettings notificationSettings;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTask pipelineTask;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTask pythonWheelTask;
    private Boolean retryOnTimeout;
    private @Nullable String runIf;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTask runJobTask;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTask sparkJarTask;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTask sparkPythonTask;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTask sparkSubmitTask;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTask sqlTask;
    private @Nullable String taskKey;
    private @Nullable Integer timeoutSeconds;
    private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotifications webhookNotifications;

    private GetJobJobSettingsSettingsTaskForEachTaskTask() {}
    public Optional<String> computeKey() {
        return Optional.ofNullable(this.computeKey);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTask> conditionTask() {
        return Optional.ofNullable(this.conditionTask);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTask> dbtTask() {
        return Optional.ofNullable(this.dbtTask);
    }
    public List<GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOn> dependsOns() {
        return this.dependsOns == null ? List.of() : this.dependsOns;
    }
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotifications> emailNotifications() {
        return Optional.ofNullable(this.emailNotifications);
    }
    public Optional<String> existingClusterId() {
        return Optional.ofNullable(this.existingClusterId);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskHealth> health() {
        return Optional.ofNullable(this.health);
    }
    public Optional<String> jobClusterKey() {
        return Optional.ofNullable(this.jobClusterKey);
    }
    public List<GetJobJobSettingsSettingsTaskForEachTaskTaskLibrary> libraries() {
        return this.libraries == null ? List.of() : this.libraries;
    }
    public Optional<Integer> maxRetries() {
        return Optional.ofNullable(this.maxRetries);
    }
    public Optional<Integer> minRetryIntervalMillis() {
        return Optional.ofNullable(this.minRetryIntervalMillis);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskNewCluster> newCluster() {
        return Optional.ofNullable(this.newCluster);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTask> notebookTask() {
        return Optional.ofNullable(this.notebookTask);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettings> notificationSettings() {
        return Optional.ofNullable(this.notificationSettings);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTask> pipelineTask() {
        return Optional.ofNullable(this.pipelineTask);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTask> pythonWheelTask() {
        return Optional.ofNullable(this.pythonWheelTask);
    }
    public Boolean retryOnTimeout() {
        return this.retryOnTimeout;
    }
    public Optional<String> runIf() {
        return Optional.ofNullable(this.runIf);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTask> runJobTask() {
        return Optional.ofNullable(this.runJobTask);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTask> sparkJarTask() {
        return Optional.ofNullable(this.sparkJarTask);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTask> sparkPythonTask() {
        return Optional.ofNullable(this.sparkPythonTask);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTask> sparkSubmitTask() {
        return Optional.ofNullable(this.sparkSubmitTask);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTask> sqlTask() {
        return Optional.ofNullable(this.sqlTask);
    }
    public Optional<String> taskKey() {
        return Optional.ofNullable(this.taskKey);
    }
    public Optional<Integer> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }
    public Optional<GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotifications> webhookNotifications() {
        return Optional.ofNullable(this.webhookNotifications);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobJobSettingsSettingsTaskForEachTaskTask defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String computeKey;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTask conditionTask;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTask dbtTask;
        private @Nullable List<GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOn> dependsOns;
        private @Nullable String description;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotifications emailNotifications;
        private @Nullable String existingClusterId;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskHealth health;
        private @Nullable String jobClusterKey;
        private @Nullable List<GetJobJobSettingsSettingsTaskForEachTaskTaskLibrary> libraries;
        private @Nullable Integer maxRetries;
        private @Nullable Integer minRetryIntervalMillis;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskNewCluster newCluster;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTask notebookTask;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettings notificationSettings;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTask pipelineTask;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTask pythonWheelTask;
        private Boolean retryOnTimeout;
        private @Nullable String runIf;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTask runJobTask;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTask sparkJarTask;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTask sparkPythonTask;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTask sparkSubmitTask;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTask sqlTask;
        private @Nullable String taskKey;
        private @Nullable Integer timeoutSeconds;
        private @Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotifications webhookNotifications;
        public Builder() {}
        public Builder(GetJobJobSettingsSettingsTaskForEachTaskTask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computeKey = defaults.computeKey;
    	      this.conditionTask = defaults.conditionTask;
    	      this.dbtTask = defaults.dbtTask;
    	      this.dependsOns = defaults.dependsOns;
    	      this.description = defaults.description;
    	      this.emailNotifications = defaults.emailNotifications;
    	      this.existingClusterId = defaults.existingClusterId;
    	      this.health = defaults.health;
    	      this.jobClusterKey = defaults.jobClusterKey;
    	      this.libraries = defaults.libraries;
    	      this.maxRetries = defaults.maxRetries;
    	      this.minRetryIntervalMillis = defaults.minRetryIntervalMillis;
    	      this.newCluster = defaults.newCluster;
    	      this.notebookTask = defaults.notebookTask;
    	      this.notificationSettings = defaults.notificationSettings;
    	      this.pipelineTask = defaults.pipelineTask;
    	      this.pythonWheelTask = defaults.pythonWheelTask;
    	      this.retryOnTimeout = defaults.retryOnTimeout;
    	      this.runIf = defaults.runIf;
    	      this.runJobTask = defaults.runJobTask;
    	      this.sparkJarTask = defaults.sparkJarTask;
    	      this.sparkPythonTask = defaults.sparkPythonTask;
    	      this.sparkSubmitTask = defaults.sparkSubmitTask;
    	      this.sqlTask = defaults.sqlTask;
    	      this.taskKey = defaults.taskKey;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
    	      this.webhookNotifications = defaults.webhookNotifications;
        }

        @CustomType.Setter
        public Builder computeKey(@Nullable String computeKey) {

            this.computeKey = computeKey;
            return this;
        }
        @CustomType.Setter
        public Builder conditionTask(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskConditionTask conditionTask) {

            this.conditionTask = conditionTask;
            return this;
        }
        @CustomType.Setter
        public Builder dbtTask(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskDbtTask dbtTask) {

            this.dbtTask = dbtTask;
            return this;
        }
        @CustomType.Setter
        public Builder dependsOns(@Nullable List<GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOn> dependsOns) {

            this.dependsOns = dependsOns;
            return this;
        }
        public Builder dependsOns(GetJobJobSettingsSettingsTaskForEachTaskTaskDependsOn... dependsOns) {
            return dependsOns(List.of(dependsOns));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder emailNotifications(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskEmailNotifications emailNotifications) {

            this.emailNotifications = emailNotifications;
            return this;
        }
        @CustomType.Setter
        public Builder existingClusterId(@Nullable String existingClusterId) {

            this.existingClusterId = existingClusterId;
            return this;
        }
        @CustomType.Setter
        public Builder health(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskHealth health) {

            this.health = health;
            return this;
        }
        @CustomType.Setter
        public Builder jobClusterKey(@Nullable String jobClusterKey) {

            this.jobClusterKey = jobClusterKey;
            return this;
        }
        @CustomType.Setter
        public Builder libraries(@Nullable List<GetJobJobSettingsSettingsTaskForEachTaskTaskLibrary> libraries) {

            this.libraries = libraries;
            return this;
        }
        public Builder libraries(GetJobJobSettingsSettingsTaskForEachTaskTaskLibrary... libraries) {
            return libraries(List.of(libraries));
        }
        @CustomType.Setter
        public Builder maxRetries(@Nullable Integer maxRetries) {

            this.maxRetries = maxRetries;
            return this;
        }
        @CustomType.Setter
        public Builder minRetryIntervalMillis(@Nullable Integer minRetryIntervalMillis) {

            this.minRetryIntervalMillis = minRetryIntervalMillis;
            return this;
        }
        @CustomType.Setter
        public Builder newCluster(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskNewCluster newCluster) {

            this.newCluster = newCluster;
            return this;
        }
        @CustomType.Setter
        public Builder notebookTask(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskNotebookTask notebookTask) {

            this.notebookTask = notebookTask;
            return this;
        }
        @CustomType.Setter
        public Builder notificationSettings(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskNotificationSettings notificationSettings) {

            this.notificationSettings = notificationSettings;
            return this;
        }
        @CustomType.Setter
        public Builder pipelineTask(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskPipelineTask pipelineTask) {

            this.pipelineTask = pipelineTask;
            return this;
        }
        @CustomType.Setter
        public Builder pythonWheelTask(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskPythonWheelTask pythonWheelTask) {

            this.pythonWheelTask = pythonWheelTask;
            return this;
        }
        @CustomType.Setter
        public Builder retryOnTimeout(Boolean retryOnTimeout) {
            if (retryOnTimeout == null) {
              throw new MissingRequiredPropertyException("GetJobJobSettingsSettingsTaskForEachTaskTask", "retryOnTimeout");
            }
            this.retryOnTimeout = retryOnTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder runIf(@Nullable String runIf) {

            this.runIf = runIf;
            return this;
        }
        @CustomType.Setter
        public Builder runJobTask(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskRunJobTask runJobTask) {

            this.runJobTask = runJobTask;
            return this;
        }
        @CustomType.Setter
        public Builder sparkJarTask(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskSparkJarTask sparkJarTask) {

            this.sparkJarTask = sparkJarTask;
            return this;
        }
        @CustomType.Setter
        public Builder sparkPythonTask(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskSparkPythonTask sparkPythonTask) {

            this.sparkPythonTask = sparkPythonTask;
            return this;
        }
        @CustomType.Setter
        public Builder sparkSubmitTask(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskSparkSubmitTask sparkSubmitTask) {

            this.sparkSubmitTask = sparkSubmitTask;
            return this;
        }
        @CustomType.Setter
        public Builder sqlTask(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskSqlTask sqlTask) {

            this.sqlTask = sqlTask;
            return this;
        }
        @CustomType.Setter
        public Builder taskKey(@Nullable String taskKey) {

            this.taskKey = taskKey;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutSeconds(@Nullable Integer timeoutSeconds) {

            this.timeoutSeconds = timeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder webhookNotifications(@Nullable GetJobJobSettingsSettingsTaskForEachTaskTaskWebhookNotifications webhookNotifications) {

            this.webhookNotifications = webhookNotifications;
            return this;
        }
        public GetJobJobSettingsSettingsTaskForEachTaskTask build() {
            final var _resultValue = new GetJobJobSettingsSettingsTaskForEachTaskTask();
            _resultValue.computeKey = computeKey;
            _resultValue.conditionTask = conditionTask;
            _resultValue.dbtTask = dbtTask;
            _resultValue.dependsOns = dependsOns;
            _resultValue.description = description;
            _resultValue.emailNotifications = emailNotifications;
            _resultValue.existingClusterId = existingClusterId;
            _resultValue.health = health;
            _resultValue.jobClusterKey = jobClusterKey;
            _resultValue.libraries = libraries;
            _resultValue.maxRetries = maxRetries;
            _resultValue.minRetryIntervalMillis = minRetryIntervalMillis;
            _resultValue.newCluster = newCluster;
            _resultValue.notebookTask = notebookTask;
            _resultValue.notificationSettings = notificationSettings;
            _resultValue.pipelineTask = pipelineTask;
            _resultValue.pythonWheelTask = pythonWheelTask;
            _resultValue.retryOnTimeout = retryOnTimeout;
            _resultValue.runIf = runIf;
            _resultValue.runJobTask = runJobTask;
            _resultValue.sparkJarTask = sparkJarTask;
            _resultValue.sparkPythonTask = sparkPythonTask;
            _resultValue.sparkSubmitTask = sparkSubmitTask;
            _resultValue.sqlTask = sqlTask;
            _resultValue.taskKey = taskKey;
            _resultValue.timeoutSeconds = timeoutSeconds;
            _resultValue.webhookNotifications = webhookNotifications;
            return _resultValue;
        }
    }
}
