// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetCleanRoomAssetForeignTable;
import com.pulumi.databricks.outputs.GetCleanRoomAssetForeignTableLocalDetails;
import com.pulumi.databricks.outputs.GetCleanRoomAssetNotebook;
import com.pulumi.databricks.outputs.GetCleanRoomAssetTable;
import com.pulumi.databricks.outputs.GetCleanRoomAssetTableLocalDetails;
import com.pulumi.databricks.outputs.GetCleanRoomAssetView;
import com.pulumi.databricks.outputs.GetCleanRoomAssetViewLocalDetails;
import com.pulumi.databricks.outputs.GetCleanRoomAssetVolumeLocalDetails;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCleanRoomAssetResult {
    /**
     * @return (integer) - When the asset is added to the clean room, in epoch milliseconds
     * 
     */
    private Integer addedAt;
    /**
     * @return (string) - The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
     * 
     */
    private String assetType;
    /**
     * @return (string) - The name of the clean room this asset belongs to.
     * This field is required for create operations and populated by the server for responses
     * 
     */
    private @Nullable String cleanRoomName;
    /**
     * @return (CleanRoomAssetForeignTable) - Foreign table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    private @Nullable GetCleanRoomAssetForeignTable foreignTable;
    /**
     * @return (CleanRoomAssetForeignTableLocalDetails) - Local details for a foreign that are only available to its owner.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    private @Nullable GetCleanRoomAssetForeignTableLocalDetails foreignTableLocalDetails;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (string) - The name of the partition column
     * 
     */
    private String name;
    /**
     * @return (CleanRoomAssetNotebook) - Notebook details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **NOTEBOOK_FILE**
     * 
     */
    private @Nullable GetCleanRoomAssetNotebook notebook;
    /**
     * @return (string) - The alias of the collaborator who owns this asset
     * 
     */
    private String ownerCollaboratorAlias;
    /**
     * @return (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
     * 
     */
    private String status;
    /**
     * @return (CleanRoomAssetTable) - Table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    private @Nullable GetCleanRoomAssetTable table;
    /**
     * @return (CleanRoomAssetTableLocalDetails) - Local details for a table that are only available to its owner.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    private @Nullable GetCleanRoomAssetTableLocalDetails tableLocalDetails;
    /**
     * @return (CleanRoomAssetView) - View details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    private @Nullable GetCleanRoomAssetView view;
    /**
     * @return (CleanRoomAssetViewLocalDetails) - Local details for a view that are only available to its owner.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    private @Nullable GetCleanRoomAssetViewLocalDetails viewLocalDetails;
    /**
     * @return (CleanRoomAssetVolumeLocalDetails) - Local details for a volume that are only available to its owner.
     * Present if and only if **asset_type** is **VOLUME**
     * 
     */
    private @Nullable GetCleanRoomAssetVolumeLocalDetails volumeLocalDetails;
    private @Nullable String workspaceId;

    private GetCleanRoomAssetResult() {}
    /**
     * @return (integer) - When the asset is added to the clean room, in epoch milliseconds
     * 
     */
    public Integer addedAt() {
        return this.addedAt;
    }
    /**
     * @return (string) - The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
     * 
     */
    public String assetType() {
        return this.assetType;
    }
    /**
     * @return (string) - The name of the clean room this asset belongs to.
     * This field is required for create operations and populated by the server for responses
     * 
     */
    public Optional<String> cleanRoomName() {
        return Optional.ofNullable(this.cleanRoomName);
    }
    /**
     * @return (CleanRoomAssetForeignTable) - Foreign table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    public Optional<GetCleanRoomAssetForeignTable> foreignTable() {
        return Optional.ofNullable(this.foreignTable);
    }
    /**
     * @return (CleanRoomAssetForeignTableLocalDetails) - Local details for a foreign that are only available to its owner.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    public Optional<GetCleanRoomAssetForeignTableLocalDetails> foreignTableLocalDetails() {
        return Optional.ofNullable(this.foreignTableLocalDetails);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (string) - The name of the partition column
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (CleanRoomAssetNotebook) - Notebook details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **NOTEBOOK_FILE**
     * 
     */
    public Optional<GetCleanRoomAssetNotebook> notebook() {
        return Optional.ofNullable(this.notebook);
    }
    /**
     * @return (string) - The alias of the collaborator who owns this asset
     * 
     */
    public String ownerCollaboratorAlias() {
        return this.ownerCollaboratorAlias;
    }
    /**
     * @return (string) - Status of the asset. Possible values are: `ACTIVE`, `PENDING`, `PERMISSION_DENIED`
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return (CleanRoomAssetTable) - Table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    public Optional<GetCleanRoomAssetTable> table() {
        return Optional.ofNullable(this.table);
    }
    /**
     * @return (CleanRoomAssetTableLocalDetails) - Local details for a table that are only available to its owner.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    public Optional<GetCleanRoomAssetTableLocalDetails> tableLocalDetails() {
        return Optional.ofNullable(this.tableLocalDetails);
    }
    /**
     * @return (CleanRoomAssetView) - View details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    public Optional<GetCleanRoomAssetView> view() {
        return Optional.ofNullable(this.view);
    }
    /**
     * @return (CleanRoomAssetViewLocalDetails) - Local details for a view that are only available to its owner.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    public Optional<GetCleanRoomAssetViewLocalDetails> viewLocalDetails() {
        return Optional.ofNullable(this.viewLocalDetails);
    }
    /**
     * @return (CleanRoomAssetVolumeLocalDetails) - Local details for a volume that are only available to its owner.
     * Present if and only if **asset_type** is **VOLUME**
     * 
     */
    public Optional<GetCleanRoomAssetVolumeLocalDetails> volumeLocalDetails() {
        return Optional.ofNullable(this.volumeLocalDetails);
    }
    public Optional<String> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCleanRoomAssetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer addedAt;
        private String assetType;
        private @Nullable String cleanRoomName;
        private @Nullable GetCleanRoomAssetForeignTable foreignTable;
        private @Nullable GetCleanRoomAssetForeignTableLocalDetails foreignTableLocalDetails;
        private String id;
        private String name;
        private @Nullable GetCleanRoomAssetNotebook notebook;
        private String ownerCollaboratorAlias;
        private String status;
        private @Nullable GetCleanRoomAssetTable table;
        private @Nullable GetCleanRoomAssetTableLocalDetails tableLocalDetails;
        private @Nullable GetCleanRoomAssetView view;
        private @Nullable GetCleanRoomAssetViewLocalDetails viewLocalDetails;
        private @Nullable GetCleanRoomAssetVolumeLocalDetails volumeLocalDetails;
        private @Nullable String workspaceId;
        public Builder() {}
        public Builder(GetCleanRoomAssetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addedAt = defaults.addedAt;
    	      this.assetType = defaults.assetType;
    	      this.cleanRoomName = defaults.cleanRoomName;
    	      this.foreignTable = defaults.foreignTable;
    	      this.foreignTableLocalDetails = defaults.foreignTableLocalDetails;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.notebook = defaults.notebook;
    	      this.ownerCollaboratorAlias = defaults.ownerCollaboratorAlias;
    	      this.status = defaults.status;
    	      this.table = defaults.table;
    	      this.tableLocalDetails = defaults.tableLocalDetails;
    	      this.view = defaults.view;
    	      this.viewLocalDetails = defaults.viewLocalDetails;
    	      this.volumeLocalDetails = defaults.volumeLocalDetails;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder addedAt(Integer addedAt) {
            if (addedAt == null) {
              throw new MissingRequiredPropertyException("GetCleanRoomAssetResult", "addedAt");
            }
            this.addedAt = addedAt;
            return this;
        }
        @CustomType.Setter
        public Builder assetType(String assetType) {
            if (assetType == null) {
              throw new MissingRequiredPropertyException("GetCleanRoomAssetResult", "assetType");
            }
            this.assetType = assetType;
            return this;
        }
        @CustomType.Setter
        public Builder cleanRoomName(@Nullable String cleanRoomName) {

            this.cleanRoomName = cleanRoomName;
            return this;
        }
        @CustomType.Setter
        public Builder foreignTable(@Nullable GetCleanRoomAssetForeignTable foreignTable) {

            this.foreignTable = foreignTable;
            return this;
        }
        @CustomType.Setter
        public Builder foreignTableLocalDetails(@Nullable GetCleanRoomAssetForeignTableLocalDetails foreignTableLocalDetails) {

            this.foreignTableLocalDetails = foreignTableLocalDetails;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCleanRoomAssetResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCleanRoomAssetResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notebook(@Nullable GetCleanRoomAssetNotebook notebook) {

            this.notebook = notebook;
            return this;
        }
        @CustomType.Setter
        public Builder ownerCollaboratorAlias(String ownerCollaboratorAlias) {
            if (ownerCollaboratorAlias == null) {
              throw new MissingRequiredPropertyException("GetCleanRoomAssetResult", "ownerCollaboratorAlias");
            }
            this.ownerCollaboratorAlias = ownerCollaboratorAlias;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetCleanRoomAssetResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder table(@Nullable GetCleanRoomAssetTable table) {

            this.table = table;
            return this;
        }
        @CustomType.Setter
        public Builder tableLocalDetails(@Nullable GetCleanRoomAssetTableLocalDetails tableLocalDetails) {

            this.tableLocalDetails = tableLocalDetails;
            return this;
        }
        @CustomType.Setter
        public Builder view(@Nullable GetCleanRoomAssetView view) {

            this.view = view;
            return this;
        }
        @CustomType.Setter
        public Builder viewLocalDetails(@Nullable GetCleanRoomAssetViewLocalDetails viewLocalDetails) {

            this.viewLocalDetails = viewLocalDetails;
            return this;
        }
        @CustomType.Setter
        public Builder volumeLocalDetails(@Nullable GetCleanRoomAssetVolumeLocalDetails volumeLocalDetails) {

            this.volumeLocalDetails = volumeLocalDetails;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(@Nullable String workspaceId) {

            this.workspaceId = workspaceId;
            return this;
        }
        public GetCleanRoomAssetResult build() {
            final var _resultValue = new GetCleanRoomAssetResult();
            _resultValue.addedAt = addedAt;
            _resultValue.assetType = assetType;
            _resultValue.cleanRoomName = cleanRoomName;
            _resultValue.foreignTable = foreignTable;
            _resultValue.foreignTableLocalDetails = foreignTableLocalDetails;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.notebook = notebook;
            _resultValue.ownerCollaboratorAlias = ownerCollaboratorAlias;
            _resultValue.status = status;
            _resultValue.table = table;
            _resultValue.tableLocalDetails = tableLocalDetails;
            _resultValue.view = view;
            _resultValue.viewLocalDetails = viewLocalDetails;
            _resultValue.volumeLocalDetails = volumeLocalDetails;
            _resultValue.workspaceId = workspaceId;
            return _resultValue;
        }
    }
}
