// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetClusterClusterInfoSpecAutoscale;
import com.pulumi.databricks.inputs.GetClusterClusterInfoSpecAwsAttributes;
import com.pulumi.databricks.inputs.GetClusterClusterInfoSpecAzureAttributes;
import com.pulumi.databricks.inputs.GetClusterClusterInfoSpecClusterLogConf;
import com.pulumi.databricks.inputs.GetClusterClusterInfoSpecClusterMountInfo;
import com.pulumi.databricks.inputs.GetClusterClusterInfoSpecDockerImage;
import com.pulumi.databricks.inputs.GetClusterClusterInfoSpecGcpAttributes;
import com.pulumi.databricks.inputs.GetClusterClusterInfoSpecInitScript;
import com.pulumi.databricks.inputs.GetClusterClusterInfoSpecLibrary;
import com.pulumi.databricks.inputs.GetClusterClusterInfoSpecWorkloadType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetClusterClusterInfoSpec extends com.pulumi.resources.InvokeArgs {

    public static final GetClusterClusterInfoSpec Empty = new GetClusterClusterInfoSpec();

    @Import(name="applyPolicyDefaultValues")
    private @Nullable Boolean applyPolicyDefaultValues;

    public Optional<Boolean> applyPolicyDefaultValues() {
        return Optional.ofNullable(this.applyPolicyDefaultValues);
    }

    @Import(name="autoscale")
    private @Nullable GetClusterClusterInfoSpecAutoscale autoscale;

    public Optional<GetClusterClusterInfoSpecAutoscale> autoscale() {
        return Optional.ofNullable(this.autoscale);
    }

    @Import(name="awsAttributes")
    private @Nullable GetClusterClusterInfoSpecAwsAttributes awsAttributes;

    public Optional<GetClusterClusterInfoSpecAwsAttributes> awsAttributes() {
        return Optional.ofNullable(this.awsAttributes);
    }

    @Import(name="azureAttributes")
    private @Nullable GetClusterClusterInfoSpecAzureAttributes azureAttributes;

    public Optional<GetClusterClusterInfoSpecAzureAttributes> azureAttributes() {
        return Optional.ofNullable(this.azureAttributes);
    }

    @Import(name="clusterId", required=true)
    private String clusterId;

    public String clusterId() {
        return this.clusterId;
    }

    @Import(name="clusterLogConf")
    private @Nullable GetClusterClusterInfoSpecClusterLogConf clusterLogConf;

    public Optional<GetClusterClusterInfoSpecClusterLogConf> clusterLogConf() {
        return Optional.ofNullable(this.clusterLogConf);
    }

    @Import(name="clusterMountInfos")
    private @Nullable List<GetClusterClusterInfoSpecClusterMountInfo> clusterMountInfos;

    public Optional<List<GetClusterClusterInfoSpecClusterMountInfo>> clusterMountInfos() {
        return Optional.ofNullable(this.clusterMountInfos);
    }

    @Import(name="clusterName")
    private @Nullable String clusterName;

    public Optional<String> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    @Import(name="customTags")
    private @Nullable Map<String,String> customTags;

    public Optional<Map<String,String>> customTags() {
        return Optional.ofNullable(this.customTags);
    }

    @Import(name="dataSecurityMode")
    private @Nullable String dataSecurityMode;

    public Optional<String> dataSecurityMode() {
        return Optional.ofNullable(this.dataSecurityMode);
    }

    @Import(name="dockerImage")
    private @Nullable GetClusterClusterInfoSpecDockerImage dockerImage;

    public Optional<GetClusterClusterInfoSpecDockerImage> dockerImage() {
        return Optional.ofNullable(this.dockerImage);
    }

    @Import(name="driverInstancePoolId", required=true)
    private String driverInstancePoolId;

    public String driverInstancePoolId() {
        return this.driverInstancePoolId;
    }

    @Import(name="driverNodeTypeId", required=true)
    private String driverNodeTypeId;

    public String driverNodeTypeId() {
        return this.driverNodeTypeId;
    }

    @Import(name="enableElasticDisk", required=true)
    private Boolean enableElasticDisk;

    public Boolean enableElasticDisk() {
        return this.enableElasticDisk;
    }

    @Import(name="enableLocalDiskEncryption", required=true)
    private Boolean enableLocalDiskEncryption;

    public Boolean enableLocalDiskEncryption() {
        return this.enableLocalDiskEncryption;
    }

    @Import(name="gcpAttributes")
    private @Nullable GetClusterClusterInfoSpecGcpAttributes gcpAttributes;

    public Optional<GetClusterClusterInfoSpecGcpAttributes> gcpAttributes() {
        return Optional.ofNullable(this.gcpAttributes);
    }

    @Import(name="idempotencyToken")
    private @Nullable String idempotencyToken;

    public Optional<String> idempotencyToken() {
        return Optional.ofNullable(this.idempotencyToken);
    }

    @Import(name="initScripts")
    private @Nullable List<GetClusterClusterInfoSpecInitScript> initScripts;

    public Optional<List<GetClusterClusterInfoSpecInitScript>> initScripts() {
        return Optional.ofNullable(this.initScripts);
    }

    @Import(name="instancePoolId")
    private @Nullable String instancePoolId;

    public Optional<String> instancePoolId() {
        return Optional.ofNullable(this.instancePoolId);
    }

    @Import(name="isSingleNode")
    private @Nullable Boolean isSingleNode;

    public Optional<Boolean> isSingleNode() {
        return Optional.ofNullable(this.isSingleNode);
    }

    @Import(name="kind")
    private @Nullable String kind;

    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }

    @Import(name="libraries")
    private @Nullable List<GetClusterClusterInfoSpecLibrary> libraries;

    public Optional<List<GetClusterClusterInfoSpecLibrary>> libraries() {
        return Optional.ofNullable(this.libraries);
    }

    @Import(name="nodeTypeId", required=true)
    private String nodeTypeId;

    public String nodeTypeId() {
        return this.nodeTypeId;
    }

    @Import(name="numWorkers")
    private @Nullable Integer numWorkers;

    public Optional<Integer> numWorkers() {
        return Optional.ofNullable(this.numWorkers);
    }

    @Import(name="policyId")
    private @Nullable String policyId;

    public Optional<String> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    @Import(name="runtimeEngine")
    private @Nullable String runtimeEngine;

    public Optional<String> runtimeEngine() {
        return Optional.ofNullable(this.runtimeEngine);
    }

    @Import(name="singleUserName")
    private @Nullable String singleUserName;

    public Optional<String> singleUserName() {
        return Optional.ofNullable(this.singleUserName);
    }

    @Import(name="sparkConf")
    private @Nullable Map<String,String> sparkConf;

    public Optional<Map<String,String>> sparkConf() {
        return Optional.ofNullable(this.sparkConf);
    }

    @Import(name="sparkEnvVars")
    private @Nullable Map<String,String> sparkEnvVars;

    public Optional<Map<String,String>> sparkEnvVars() {
        return Optional.ofNullable(this.sparkEnvVars);
    }

    @Import(name="sparkVersion", required=true)
    private String sparkVersion;

    public String sparkVersion() {
        return this.sparkVersion;
    }

    @Import(name="sshPublicKeys")
    private @Nullable List<String> sshPublicKeys;

    public Optional<List<String>> sshPublicKeys() {
        return Optional.ofNullable(this.sshPublicKeys);
    }

    @Import(name="useMlRuntime")
    private @Nullable Boolean useMlRuntime;

    public Optional<Boolean> useMlRuntime() {
        return Optional.ofNullable(this.useMlRuntime);
    }

    @Import(name="workloadType")
    private @Nullable GetClusterClusterInfoSpecWorkloadType workloadType;

    public Optional<GetClusterClusterInfoSpecWorkloadType> workloadType() {
        return Optional.ofNullable(this.workloadType);
    }

    private GetClusterClusterInfoSpec() {}

    private GetClusterClusterInfoSpec(GetClusterClusterInfoSpec $) {
        this.applyPolicyDefaultValues = $.applyPolicyDefaultValues;
        this.autoscale = $.autoscale;
        this.awsAttributes = $.awsAttributes;
        this.azureAttributes = $.azureAttributes;
        this.clusterId = $.clusterId;
        this.clusterLogConf = $.clusterLogConf;
        this.clusterMountInfos = $.clusterMountInfos;
        this.clusterName = $.clusterName;
        this.customTags = $.customTags;
        this.dataSecurityMode = $.dataSecurityMode;
        this.dockerImage = $.dockerImage;
        this.driverInstancePoolId = $.driverInstancePoolId;
        this.driverNodeTypeId = $.driverNodeTypeId;
        this.enableElasticDisk = $.enableElasticDisk;
        this.enableLocalDiskEncryption = $.enableLocalDiskEncryption;
        this.gcpAttributes = $.gcpAttributes;
        this.idempotencyToken = $.idempotencyToken;
        this.initScripts = $.initScripts;
        this.instancePoolId = $.instancePoolId;
        this.isSingleNode = $.isSingleNode;
        this.kind = $.kind;
        this.libraries = $.libraries;
        this.nodeTypeId = $.nodeTypeId;
        this.numWorkers = $.numWorkers;
        this.policyId = $.policyId;
        this.runtimeEngine = $.runtimeEngine;
        this.singleUserName = $.singleUserName;
        this.sparkConf = $.sparkConf;
        this.sparkEnvVars = $.sparkEnvVars;
        this.sparkVersion = $.sparkVersion;
        this.sshPublicKeys = $.sshPublicKeys;
        this.useMlRuntime = $.useMlRuntime;
        this.workloadType = $.workloadType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetClusterClusterInfoSpec defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetClusterClusterInfoSpec $;

        public Builder() {
            $ = new GetClusterClusterInfoSpec();
        }

        public Builder(GetClusterClusterInfoSpec defaults) {
            $ = new GetClusterClusterInfoSpec(Objects.requireNonNull(defaults));
        }

        public Builder applyPolicyDefaultValues(@Nullable Boolean applyPolicyDefaultValues) {
            $.applyPolicyDefaultValues = applyPolicyDefaultValues;
            return this;
        }

        public Builder autoscale(@Nullable GetClusterClusterInfoSpecAutoscale autoscale) {
            $.autoscale = autoscale;
            return this;
        }

        public Builder awsAttributes(@Nullable GetClusterClusterInfoSpecAwsAttributes awsAttributes) {
            $.awsAttributes = awsAttributes;
            return this;
        }

        public Builder azureAttributes(@Nullable GetClusterClusterInfoSpecAzureAttributes azureAttributes) {
            $.azureAttributes = azureAttributes;
            return this;
        }

        public Builder clusterId(String clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        public Builder clusterLogConf(@Nullable GetClusterClusterInfoSpecClusterLogConf clusterLogConf) {
            $.clusterLogConf = clusterLogConf;
            return this;
        }

        public Builder clusterMountInfos(@Nullable List<GetClusterClusterInfoSpecClusterMountInfo> clusterMountInfos) {
            $.clusterMountInfos = clusterMountInfos;
            return this;
        }

        public Builder clusterMountInfos(GetClusterClusterInfoSpecClusterMountInfo... clusterMountInfos) {
            return clusterMountInfos(List.of(clusterMountInfos));
        }

        public Builder clusterName(@Nullable String clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        public Builder customTags(@Nullable Map<String,String> customTags) {
            $.customTags = customTags;
            return this;
        }

        public Builder dataSecurityMode(@Nullable String dataSecurityMode) {
            $.dataSecurityMode = dataSecurityMode;
            return this;
        }

        public Builder dockerImage(@Nullable GetClusterClusterInfoSpecDockerImage dockerImage) {
            $.dockerImage = dockerImage;
            return this;
        }

        public Builder driverInstancePoolId(String driverInstancePoolId) {
            $.driverInstancePoolId = driverInstancePoolId;
            return this;
        }

        public Builder driverNodeTypeId(String driverNodeTypeId) {
            $.driverNodeTypeId = driverNodeTypeId;
            return this;
        }

        public Builder enableElasticDisk(Boolean enableElasticDisk) {
            $.enableElasticDisk = enableElasticDisk;
            return this;
        }

        public Builder enableLocalDiskEncryption(Boolean enableLocalDiskEncryption) {
            $.enableLocalDiskEncryption = enableLocalDiskEncryption;
            return this;
        }

        public Builder gcpAttributes(@Nullable GetClusterClusterInfoSpecGcpAttributes gcpAttributes) {
            $.gcpAttributes = gcpAttributes;
            return this;
        }

        public Builder idempotencyToken(@Nullable String idempotencyToken) {
            $.idempotencyToken = idempotencyToken;
            return this;
        }

        public Builder initScripts(@Nullable List<GetClusterClusterInfoSpecInitScript> initScripts) {
            $.initScripts = initScripts;
            return this;
        }

        public Builder initScripts(GetClusterClusterInfoSpecInitScript... initScripts) {
            return initScripts(List.of(initScripts));
        }

        public Builder instancePoolId(@Nullable String instancePoolId) {
            $.instancePoolId = instancePoolId;
            return this;
        }

        public Builder isSingleNode(@Nullable Boolean isSingleNode) {
            $.isSingleNode = isSingleNode;
            return this;
        }

        public Builder kind(@Nullable String kind) {
            $.kind = kind;
            return this;
        }

        public Builder libraries(@Nullable List<GetClusterClusterInfoSpecLibrary> libraries) {
            $.libraries = libraries;
            return this;
        }

        public Builder libraries(GetClusterClusterInfoSpecLibrary... libraries) {
            return libraries(List.of(libraries));
        }

        public Builder nodeTypeId(String nodeTypeId) {
            $.nodeTypeId = nodeTypeId;
            return this;
        }

        public Builder numWorkers(@Nullable Integer numWorkers) {
            $.numWorkers = numWorkers;
            return this;
        }

        public Builder policyId(@Nullable String policyId) {
            $.policyId = policyId;
            return this;
        }

        public Builder runtimeEngine(@Nullable String runtimeEngine) {
            $.runtimeEngine = runtimeEngine;
            return this;
        }

        public Builder singleUserName(@Nullable String singleUserName) {
            $.singleUserName = singleUserName;
            return this;
        }

        public Builder sparkConf(@Nullable Map<String,String> sparkConf) {
            $.sparkConf = sparkConf;
            return this;
        }

        public Builder sparkEnvVars(@Nullable Map<String,String> sparkEnvVars) {
            $.sparkEnvVars = sparkEnvVars;
            return this;
        }

        public Builder sparkVersion(String sparkVersion) {
            $.sparkVersion = sparkVersion;
            return this;
        }

        public Builder sshPublicKeys(@Nullable List<String> sshPublicKeys) {
            $.sshPublicKeys = sshPublicKeys;
            return this;
        }

        public Builder sshPublicKeys(String... sshPublicKeys) {
            return sshPublicKeys(List.of(sshPublicKeys));
        }

        public Builder useMlRuntime(@Nullable Boolean useMlRuntime) {
            $.useMlRuntime = useMlRuntime;
            return this;
        }

        public Builder workloadType(@Nullable GetClusterClusterInfoSpecWorkloadType workloadType) {
            $.workloadType = workloadType;
            return this;
        }

        public GetClusterClusterInfoSpec build() {
            if ($.clusterId == null) {
                throw new MissingRequiredPropertyException("GetClusterClusterInfoSpec", "clusterId");
            }
            if ($.driverInstancePoolId == null) {
                throw new MissingRequiredPropertyException("GetClusterClusterInfoSpec", "driverInstancePoolId");
            }
            if ($.driverNodeTypeId == null) {
                throw new MissingRequiredPropertyException("GetClusterClusterInfoSpec", "driverNodeTypeId");
            }
            if ($.enableElasticDisk == null) {
                throw new MissingRequiredPropertyException("GetClusterClusterInfoSpec", "enableElasticDisk");
            }
            if ($.enableLocalDiskEncryption == null) {
                throw new MissingRequiredPropertyException("GetClusterClusterInfoSpec", "enableLocalDiskEncryption");
            }
            if ($.nodeTypeId == null) {
                throw new MissingRequiredPropertyException("GetClusterClusterInfoSpec", "nodeTypeId");
            }
            if ($.sparkVersion == null) {
                throw new MissingRequiredPropertyException("GetClusterClusterInfoSpec", "sparkVersion");
            }
            return $;
        }
    }

}
