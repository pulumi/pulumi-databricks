// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetRegisteredModelVersionsModelVersionAlias;
import com.pulumi.databricks.outputs.GetRegisteredModelVersionsModelVersionModelVersionDependency;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRegisteredModelVersionsModelVersion {
    /**
     * @return the list of aliases associated with this model. Each item is object consisting of following attributes:
     * 
     */
    private @Nullable List<GetRegisteredModelVersionsModelVersionAlias> aliases;
    private @Nullable Boolean browseOnly;
    /**
     * @return The name of the catalog where the schema and the registered model reside.
     * 
     */
    private @Nullable String catalogName;
    /**
     * @return The comment attached to the registered model.
     * 
     */
    private @Nullable String comment;
    /**
     * @return the Unix timestamp at the model&#39;s creation
     * 
     */
    private @Nullable Integer createdAt;
    /**
     * @return the identifier of the user who created the model
     * 
     */
    private @Nullable String createdBy;
    /**
     * @return The unique identifier of the model version
     * 
     */
    private @Nullable String id;
    /**
     * @return the unique identifier of the metastore
     * 
     */
    private @Nullable String metastoreId;
    private @Nullable String modelName;
    /**
     * @return block describing model version dependencies, for feature-store packaged models. Consists of following attributes:
     * 
     */
    private @Nullable List<GetRegisteredModelVersionsModelVersionModelVersionDependency> modelVersionDependencies;
    /**
     * @return MLflow run ID used when creating the model version, if `source` was generated by an experiment run stored in an MLflow tracking server
     * 
     */
    private @Nullable String runId;
    /**
     * @return ID of the Databricks workspace containing the MLflow run that generated this model version, if applicable
     * 
     */
    private @Nullable Integer runWorkspaceId;
    /**
     * @return The name of the schema where the registered model resides.
     * 
     */
    private @Nullable String schemaName;
    /**
     * @return URI indicating the location of the source artifacts (files) for the model version.
     * 
     */
    private @Nullable String source;
    /**
     * @return Current status of the model version.
     * 
     */
    private @Nullable String status;
    /**
     * @return The storage location under which model version data files are stored.
     * 
     */
    private @Nullable String storageLocation;
    /**
     * @return the timestamp of the last time changes were made to the model
     * 
     */
    private @Nullable Integer updatedAt;
    /**
     * @return the identifier of the user who updated the model last time
     * 
     */
    private @Nullable String updatedBy;
    /**
     * @return Integer model version number, used to reference the model version in API requests.
     * 
     */
    private @Nullable Integer version;

    private GetRegisteredModelVersionsModelVersion() {}
    /**
     * @return the list of aliases associated with this model. Each item is object consisting of following attributes:
     * 
     */
    public List<GetRegisteredModelVersionsModelVersionAlias> aliases() {
        return this.aliases == null ? List.of() : this.aliases;
    }
    public Optional<Boolean> browseOnly() {
        return Optional.ofNullable(this.browseOnly);
    }
    /**
     * @return The name of the catalog where the schema and the registered model reside.
     * 
     */
    public Optional<String> catalogName() {
        return Optional.ofNullable(this.catalogName);
    }
    /**
     * @return The comment attached to the registered model.
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    /**
     * @return the Unix timestamp at the model&#39;s creation
     * 
     */
    public Optional<Integer> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }
    /**
     * @return the identifier of the user who created the model
     * 
     */
    public Optional<String> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }
    /**
     * @return The unique identifier of the model version
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return the unique identifier of the metastore
     * 
     */
    public Optional<String> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }
    public Optional<String> modelName() {
        return Optional.ofNullable(this.modelName);
    }
    /**
     * @return block describing model version dependencies, for feature-store packaged models. Consists of following attributes:
     * 
     */
    public List<GetRegisteredModelVersionsModelVersionModelVersionDependency> modelVersionDependencies() {
        return this.modelVersionDependencies == null ? List.of() : this.modelVersionDependencies;
    }
    /**
     * @return MLflow run ID used when creating the model version, if `source` was generated by an experiment run stored in an MLflow tracking server
     * 
     */
    public Optional<String> runId() {
        return Optional.ofNullable(this.runId);
    }
    /**
     * @return ID of the Databricks workspace containing the MLflow run that generated this model version, if applicable
     * 
     */
    public Optional<Integer> runWorkspaceId() {
        return Optional.ofNullable(this.runWorkspaceId);
    }
    /**
     * @return The name of the schema where the registered model resides.
     * 
     */
    public Optional<String> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }
    /**
     * @return URI indicating the location of the source artifacts (files) for the model version.
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }
    /**
     * @return Current status of the model version.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The storage location under which model version data files are stored.
     * 
     */
    public Optional<String> storageLocation() {
        return Optional.ofNullable(this.storageLocation);
    }
    /**
     * @return the timestamp of the last time changes were made to the model
     * 
     */
    public Optional<Integer> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }
    /**
     * @return the identifier of the user who updated the model last time
     * 
     */
    public Optional<String> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }
    /**
     * @return Integer model version number, used to reference the model version in API requests.
     * 
     */
    public Optional<Integer> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegisteredModelVersionsModelVersion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetRegisteredModelVersionsModelVersionAlias> aliases;
        private @Nullable Boolean browseOnly;
        private @Nullable String catalogName;
        private @Nullable String comment;
        private @Nullable Integer createdAt;
        private @Nullable String createdBy;
        private @Nullable String id;
        private @Nullable String metastoreId;
        private @Nullable String modelName;
        private @Nullable List<GetRegisteredModelVersionsModelVersionModelVersionDependency> modelVersionDependencies;
        private @Nullable String runId;
        private @Nullable Integer runWorkspaceId;
        private @Nullable String schemaName;
        private @Nullable String source;
        private @Nullable String status;
        private @Nullable String storageLocation;
        private @Nullable Integer updatedAt;
        private @Nullable String updatedBy;
        private @Nullable Integer version;
        public Builder() {}
        public Builder(GetRegisteredModelVersionsModelVersion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aliases = defaults.aliases;
    	      this.browseOnly = defaults.browseOnly;
    	      this.catalogName = defaults.catalogName;
    	      this.comment = defaults.comment;
    	      this.createdAt = defaults.createdAt;
    	      this.createdBy = defaults.createdBy;
    	      this.id = defaults.id;
    	      this.metastoreId = defaults.metastoreId;
    	      this.modelName = defaults.modelName;
    	      this.modelVersionDependencies = defaults.modelVersionDependencies;
    	      this.runId = defaults.runId;
    	      this.runWorkspaceId = defaults.runWorkspaceId;
    	      this.schemaName = defaults.schemaName;
    	      this.source = defaults.source;
    	      this.status = defaults.status;
    	      this.storageLocation = defaults.storageLocation;
    	      this.updatedAt = defaults.updatedAt;
    	      this.updatedBy = defaults.updatedBy;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder aliases(@Nullable List<GetRegisteredModelVersionsModelVersionAlias> aliases) {

            this.aliases = aliases;
            return this;
        }
        public Builder aliases(GetRegisteredModelVersionsModelVersionAlias... aliases) {
            return aliases(List.of(aliases));
        }
        @CustomType.Setter
        public Builder browseOnly(@Nullable Boolean browseOnly) {

            this.browseOnly = browseOnly;
            return this;
        }
        @CustomType.Setter
        public Builder catalogName(@Nullable String catalogName) {

            this.catalogName = catalogName;
            return this;
        }
        @CustomType.Setter
        public Builder comment(@Nullable String comment) {

            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(@Nullable Integer createdAt) {

            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(@Nullable String createdBy) {

            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder metastoreId(@Nullable String metastoreId) {

            this.metastoreId = metastoreId;
            return this;
        }
        @CustomType.Setter
        public Builder modelName(@Nullable String modelName) {

            this.modelName = modelName;
            return this;
        }
        @CustomType.Setter
        public Builder modelVersionDependencies(@Nullable List<GetRegisteredModelVersionsModelVersionModelVersionDependency> modelVersionDependencies) {

            this.modelVersionDependencies = modelVersionDependencies;
            return this;
        }
        public Builder modelVersionDependencies(GetRegisteredModelVersionsModelVersionModelVersionDependency... modelVersionDependencies) {
            return modelVersionDependencies(List.of(modelVersionDependencies));
        }
        @CustomType.Setter
        public Builder runId(@Nullable String runId) {

            this.runId = runId;
            return this;
        }
        @CustomType.Setter
        public Builder runWorkspaceId(@Nullable Integer runWorkspaceId) {

            this.runWorkspaceId = runWorkspaceId;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(@Nullable String schemaName) {

            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {

            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storageLocation(@Nullable String storageLocation) {

            this.storageLocation = storageLocation;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(@Nullable Integer updatedAt) {

            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBy(@Nullable String updatedBy) {

            this.updatedBy = updatedBy;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable Integer version) {

            this.version = version;
            return this;
        }
        public GetRegisteredModelVersionsModelVersion build() {
            final var _resultValue = new GetRegisteredModelVersionsModelVersion();
            _resultValue.aliases = aliases;
            _resultValue.browseOnly = browseOnly;
            _resultValue.catalogName = catalogName;
            _resultValue.comment = comment;
            _resultValue.createdAt = createdAt;
            _resultValue.createdBy = createdBy;
            _resultValue.id = id;
            _resultValue.metastoreId = metastoreId;
            _resultValue.modelName = modelName;
            _resultValue.modelVersionDependencies = modelVersionDependencies;
            _resultValue.runId = runId;
            _resultValue.runWorkspaceId = runWorkspaceId;
            _resultValue.schemaName = schemaName;
            _resultValue.source = source;
            _resultValue.status = status;
            _resultValue.storageLocation = storageLocation;
            _resultValue.updatedAt = updatedAt;
            _resultValue.updatedBy = updatedBy;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
