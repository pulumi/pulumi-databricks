// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserResult {
    /**
     * @return identifier for use in databricks_access_control_rule_set, e.g. `users/mr.foo@example.com`.
     * 
     */
    private String aclPrincipalId;
    /**
     * @return Alphanumeric representation of user local name. e.g. `mr_foo`.
     * 
     */
    private String alphanumeric;
    private String applicationId;
    /**
     * @return Display name of the user, e.g. `Mr Foo`.
     * 
     */
    private String displayName;
    /**
     * @return ID of the user in an external identity provider.
     * 
     */
    private String externalId;
    /**
     * @return Home folder of the user, e.g. `/Users/mr.foo@example.com`.
     * 
     */
    private String home;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Personal Repos location of the user, e.g. `/Repos/mr.foo@example.com`.
     * 
     */
    private String repos;
    private @Nullable String userId;
    /**
     * @return Name of the user, e.g. `mr.foo@example.com`.
     * 
     */
    private @Nullable String userName;

    private GetUserResult() {}
    /**
     * @return identifier for use in databricks_access_control_rule_set, e.g. `users/mr.foo@example.com`.
     * 
     */
    public String aclPrincipalId() {
        return this.aclPrincipalId;
    }
    /**
     * @return Alphanumeric representation of user local name. e.g. `mr_foo`.
     * 
     */
    public String alphanumeric() {
        return this.alphanumeric;
    }
    public String applicationId() {
        return this.applicationId;
    }
    /**
     * @return Display name of the user, e.g. `Mr Foo`.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return ID of the user in an external identity provider.
     * 
     */
    public String externalId() {
        return this.externalId;
    }
    /**
     * @return Home folder of the user, e.g. `/Users/mr.foo@example.com`.
     * 
     */
    public String home() {
        return this.home;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Personal Repos location of the user, e.g. `/Repos/mr.foo@example.com`.
     * 
     */
    public String repos() {
        return this.repos;
    }
    public Optional<String> userId() {
        return Optional.ofNullable(this.userId);
    }
    /**
     * @return Name of the user, e.g. `mr.foo@example.com`.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aclPrincipalId;
        private String alphanumeric;
        private String applicationId;
        private String displayName;
        private String externalId;
        private String home;
        private String id;
        private String repos;
        private @Nullable String userId;
        private @Nullable String userName;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclPrincipalId = defaults.aclPrincipalId;
    	      this.alphanumeric = defaults.alphanumeric;
    	      this.applicationId = defaults.applicationId;
    	      this.displayName = defaults.displayName;
    	      this.externalId = defaults.externalId;
    	      this.home = defaults.home;
    	      this.id = defaults.id;
    	      this.repos = defaults.repos;
    	      this.userId = defaults.userId;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder aclPrincipalId(String aclPrincipalId) {
            if (aclPrincipalId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "aclPrincipalId");
            }
            this.aclPrincipalId = aclPrincipalId;
            return this;
        }
        @CustomType.Setter
        public Builder alphanumeric(String alphanumeric) {
            if (alphanumeric == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "alphanumeric");
            }
            this.alphanumeric = alphanumeric;
            return this;
        }
        @CustomType.Setter
        public Builder applicationId(String applicationId) {
            if (applicationId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "applicationId");
            }
            this.applicationId = applicationId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder externalId(String externalId) {
            if (externalId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "externalId");
            }
            this.externalId = externalId;
            return this;
        }
        @CustomType.Setter
        public Builder home(String home) {
            if (home == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "home");
            }
            this.home = home;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder repos(String repos) {
            if (repos == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "repos");
            }
            this.repos = repos;
            return this;
        }
        @CustomType.Setter
        public Builder userId(@Nullable String userId) {

            this.userId = userId;
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {

            this.userName = userName;
            return this;
        }
        public GetUserResult build() {
            final var _resultValue = new GetUserResult();
            _resultValue.aclPrincipalId = aclPrincipalId;
            _resultValue.alphanumeric = alphanumeric;
            _resultValue.applicationId = applicationId;
            _resultValue.displayName = displayName;
            _resultValue.externalId = externalId;
            _resultValue.home = home;
            _resultValue.id = id;
            _resultValue.repos = repos;
            _resultValue.userId = userId;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
