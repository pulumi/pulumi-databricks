// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MwsPermissionAssignmentState extends com.pulumi.resources.ResourceArgs {

    public static final MwsPermissionAssignmentState Empty = new MwsPermissionAssignmentState();

    /**
     * The list of workspace permissions to assign to the principal:
     * * `&#34;USER&#34;` - Can access the workspace with basic privileges.
     * * `&#34;ADMIN&#34;` - Can access the workspace and has workspace admin privileges to manage users and groups, workspace configurations, and more.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<String>> permissions;

    /**
     * @return The list of workspace permissions to assign to the principal:
     * * `&#34;USER&#34;` - Can access the workspace with basic privileges.
     * * `&#34;ADMIN&#34;` - Can access the workspace and has workspace admin privileges to manage users and groups, workspace configurations, and more.
     * 
     */
    public Optional<Output<List<String>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * Databricks ID of the user, service principal, or group. The principal ID can be retrieved using the SCIM API, or using databricks_user, databricks.ServicePrincipal or databricks.Group data sources.
     * 
     */
    @Import(name="principalId")
    private @Nullable Output<Integer> principalId;

    /**
     * @return Databricks ID of the user, service principal, or group. The principal ID can be retrieved using the SCIM API, or using databricks_user, databricks.ServicePrincipal or databricks.Group data sources.
     * 
     */
    public Optional<Output<Integer>> principalId() {
        return Optional.ofNullable(this.principalId);
    }

    /**
     * Databricks workspace ID.
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return Databricks workspace ID.
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private MwsPermissionAssignmentState() {}

    private MwsPermissionAssignmentState(MwsPermissionAssignmentState $) {
        this.permissions = $.permissions;
        this.principalId = $.principalId;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MwsPermissionAssignmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MwsPermissionAssignmentState $;

        public Builder() {
            $ = new MwsPermissionAssignmentState();
        }

        public Builder(MwsPermissionAssignmentState defaults) {
            $ = new MwsPermissionAssignmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param permissions The list of workspace permissions to assign to the principal:
         * * `&#34;USER&#34;` - Can access the workspace with basic privileges.
         * * `&#34;ADMIN&#34;` - Can access the workspace and has workspace admin privileges to manage users and groups, workspace configurations, and more.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions The list of workspace permissions to assign to the principal:
         * * `&#34;USER&#34;` - Can access the workspace with basic privileges.
         * * `&#34;ADMIN&#34;` - Can access the workspace and has workspace admin privileges to manage users and groups, workspace configurations, and more.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<String> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions The list of workspace permissions to assign to the principal:
         * * `&#34;USER&#34;` - Can access the workspace with basic privileges.
         * * `&#34;ADMIN&#34;` - Can access the workspace and has workspace admin privileges to manage users and groups, workspace configurations, and more.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param principalId Databricks ID of the user, service principal, or group. The principal ID can be retrieved using the SCIM API, or using databricks_user, databricks.ServicePrincipal or databricks.Group data sources.
         * 
         * @return builder
         * 
         */
        public Builder principalId(@Nullable Output<Integer> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId Databricks ID of the user, service principal, or group. The principal ID can be retrieved using the SCIM API, or using databricks_user, databricks.ServicePrincipal or databricks.Group data sources.
         * 
         * @return builder
         * 
         */
        public Builder principalId(Integer principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param workspaceId Databricks workspace ID.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId Databricks workspace ID.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public MwsPermissionAssignmentState build() {
            return $;
        }
    }

}
