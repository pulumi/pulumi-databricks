// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AzureAdlsGen1MountArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureAdlsGen1MountArgs Empty = new AzureAdlsGen1MountArgs();

    @Import(name="clientId", required=true)
    private Output<String> clientId;

    public Output<String> clientId() {
        return this.clientId;
    }

    @Import(name="clientSecretKey", required=true)
    private Output<String> clientSecretKey;

    public Output<String> clientSecretKey() {
        return this.clientSecretKey;
    }

    @Import(name="clientSecretScope", required=true)
    private Output<String> clientSecretScope;

    public Output<String> clientSecretScope() {
        return this.clientSecretScope;
    }

    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    @Import(name="directory")
    private @Nullable Output<String> directory;

    public Optional<Output<String>> directory() {
        return Optional.ofNullable(this.directory);
    }

    @Import(name="mountName", required=true)
    private Output<String> mountName;

    public Output<String> mountName() {
        return this.mountName;
    }

    @Import(name="sparkConfPrefix")
    private @Nullable Output<String> sparkConfPrefix;

    public Optional<Output<String>> sparkConfPrefix() {
        return Optional.ofNullable(this.sparkConfPrefix);
    }

    @Import(name="storageResourceName", required=true)
    private Output<String> storageResourceName;

    public Output<String> storageResourceName() {
        return this.storageResourceName;
    }

    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    public Output<String> tenantId() {
        return this.tenantId;
    }

    private AzureAdlsGen1MountArgs() {}

    private AzureAdlsGen1MountArgs(AzureAdlsGen1MountArgs $) {
        this.clientId = $.clientId;
        this.clientSecretKey = $.clientSecretKey;
        this.clientSecretScope = $.clientSecretScope;
        this.clusterId = $.clusterId;
        this.directory = $.directory;
        this.mountName = $.mountName;
        this.sparkConfPrefix = $.sparkConfPrefix;
        this.storageResourceName = $.storageResourceName;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureAdlsGen1MountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureAdlsGen1MountArgs $;

        public Builder() {
            $ = new AzureAdlsGen1MountArgs();
        }

        public Builder(AzureAdlsGen1MountArgs defaults) {
            $ = new AzureAdlsGen1MountArgs(Objects.requireNonNull(defaults));
        }

        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder clientSecretKey(Output<String> clientSecretKey) {
            $.clientSecretKey = clientSecretKey;
            return this;
        }

        public Builder clientSecretKey(String clientSecretKey) {
            return clientSecretKey(Output.of(clientSecretKey));
        }

        public Builder clientSecretScope(Output<String> clientSecretScope) {
            $.clientSecretScope = clientSecretScope;
            return this;
        }

        public Builder clientSecretScope(String clientSecretScope) {
            return clientSecretScope(Output.of(clientSecretScope));
        }

        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        public Builder directory(@Nullable Output<String> directory) {
            $.directory = directory;
            return this;
        }

        public Builder directory(String directory) {
            return directory(Output.of(directory));
        }

        public Builder mountName(Output<String> mountName) {
            $.mountName = mountName;
            return this;
        }

        public Builder mountName(String mountName) {
            return mountName(Output.of(mountName));
        }

        public Builder sparkConfPrefix(@Nullable Output<String> sparkConfPrefix) {
            $.sparkConfPrefix = sparkConfPrefix;
            return this;
        }

        public Builder sparkConfPrefix(String sparkConfPrefix) {
            return sparkConfPrefix(Output.of(sparkConfPrefix));
        }

        public Builder storageResourceName(Output<String> storageResourceName) {
            $.storageResourceName = storageResourceName;
            return this;
        }

        public Builder storageResourceName(String storageResourceName) {
            return storageResourceName(Output.of(storageResourceName));
        }

        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public AzureAdlsGen1MountArgs build() {
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.clientSecretKey = Objects.requireNonNull($.clientSecretKey, "expected parameter 'clientSecretKey' to be non-null");
            $.clientSecretScope = Objects.requireNonNull($.clientSecretScope, "expected parameter 'clientSecretScope' to be non-null");
            $.mountName = Objects.requireNonNull($.mountName, "expected parameter 'mountName' to be non-null");
            $.storageResourceName = Objects.requireNonNull($.storageResourceName, "expected parameter 'storageResourceName' to be non-null");
            $.tenantId = Objects.requireNonNull($.tenantId, "expected parameter 'tenantId' to be non-null");
            return $;
        }
    }

}
