// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.GrantArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.GrantState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="databricks:index/grant:Grant")
public class Grant extends com.pulumi.resources.CustomResource {
    @Export(name="catalog", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> catalog;

    public Output<Optional<String>> catalog() {
        return Codegen.optional(this.catalog);
    }
    @Export(name="externalLocation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> externalLocation;

    public Output<Optional<String>> externalLocation() {
        return Codegen.optional(this.externalLocation);
    }
    @Export(name="foreignConnection", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> foreignConnection;

    public Output<Optional<String>> foreignConnection() {
        return Codegen.optional(this.foreignConnection);
    }
    @Export(name="function", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> function;

    public Output<Optional<String>> function() {
        return Codegen.optional(this.function);
    }
    @Export(name="metastore", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> metastore;

    public Output<Optional<String>> metastore() {
        return Codegen.optional(this.metastore);
    }
    @Export(name="model", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> model;

    public Output<Optional<String>> model() {
        return Codegen.optional(this.model);
    }
    @Export(name="pipeline", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> pipeline;

    public Output<Optional<String>> pipeline() {
        return Codegen.optional(this.pipeline);
    }
    @Export(name="principal", refs={String.class}, tree="[0]")
    private Output<String> principal;

    public Output<String> principal() {
        return this.principal;
    }
    @Export(name="privileges", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> privileges;

    public Output<List<String>> privileges() {
        return this.privileges;
    }
    @Export(name="recipient", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> recipient;

    public Output<Optional<String>> recipient() {
        return Codegen.optional(this.recipient);
    }
    @Export(name="schema", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> schema;

    public Output<Optional<String>> schema() {
        return Codegen.optional(this.schema);
    }
    @Export(name="share", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> share;

    public Output<Optional<String>> share() {
        return Codegen.optional(this.share);
    }
    @Export(name="storageCredential", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> storageCredential;

    public Output<Optional<String>> storageCredential() {
        return Codegen.optional(this.storageCredential);
    }
    @Export(name="table", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> table;

    public Output<Optional<String>> table() {
        return Codegen.optional(this.table);
    }
    @Export(name="volume", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> volume;

    public Output<Optional<String>> volume() {
        return Codegen.optional(this.volume);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Grant(String name) {
        this(name, GrantArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Grant(String name, GrantArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Grant(String name, GrantArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/grant:Grant", name, args == null ? GrantArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Grant(String name, Output<String> id, @Nullable GrantState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/grant:Grant", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Grant get(String name, Output<String> id, @Nullable GrantState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Grant(name, id, state, options);
    }
}
