// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetRegisteredModelModelInfoAliasArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRegisteredModelModelInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetRegisteredModelModelInfoArgs Empty = new GetRegisteredModelModelInfoArgs();

    /**
     * the list of aliases associated with this model. Each item is object consisting of following attributes:
     * 
     */
    @Import(name="aliases")
    private @Nullable Output<List<GetRegisteredModelModelInfoAliasArgs>> aliases;

    /**
     * @return the list of aliases associated with this model. Each item is object consisting of following attributes:
     * 
     */
    public Optional<Output<List<GetRegisteredModelModelInfoAliasArgs>>> aliases() {
        return Optional.ofNullable(this.aliases);
    }

    @Import(name="browseOnly")
    private @Nullable Output<Boolean> browseOnly;

    public Optional<Output<Boolean>> browseOnly() {
        return Optional.ofNullable(this.browseOnly);
    }

    /**
     * The name of the catalog where the schema and the registered model reside.
     * 
     */
    @Import(name="catalogName")
    private @Nullable Output<String> catalogName;

    /**
     * @return The name of the catalog where the schema and the registered model reside.
     * 
     */
    public Optional<Output<String>> catalogName() {
        return Optional.ofNullable(this.catalogName);
    }

    /**
     * The comment attached to the registered model.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return The comment attached to the registered model.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * the Unix timestamp at the model&#39;s creation
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<Integer> createdAt;

    /**
     * @return the Unix timestamp at the model&#39;s creation
     * 
     */
    public Optional<Output<Integer>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * the identifier of the user who created the model
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return the identifier of the user who created the model
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The fully-qualified name of the registered model (`catalog_name.schema_name.name`).
     * 
     */
    @Import(name="fullName")
    private @Nullable Output<String> fullName;

    /**
     * @return The fully-qualified name of the registered model (`catalog_name.schema_name.name`).
     * 
     */
    public Optional<Output<String>> fullName() {
        return Optional.ofNullable(this.fullName);
    }

    /**
     * the unique identifier of the metastore
     * 
     */
    @Import(name="metastoreId")
    private @Nullable Output<String> metastoreId;

    /**
     * @return the unique identifier of the metastore
     * 
     */
    public Optional<Output<String>> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }

    /**
     * The name of the registered model.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the registered model.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Name of the registered model owner.
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return Name of the registered model owner.
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * The name of the schema where the registered model resides.
     * 
     */
    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    /**
     * @return The name of the schema where the registered model resides.
     * 
     */
    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    /**
     * The storage location under which model version data files are stored.
     * 
     */
    @Import(name="storageLocation")
    private @Nullable Output<String> storageLocation;

    /**
     * @return The storage location under which model version data files are stored.
     * 
     */
    public Optional<Output<String>> storageLocation() {
        return Optional.ofNullable(this.storageLocation);
    }

    /**
     * the timestamp of the last time changes were made to the model
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<Integer> updatedAt;

    /**
     * @return the timestamp of the last time changes were made to the model
     * 
     */
    public Optional<Output<Integer>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * the identifier of the user who updated the model last time
     * 
     */
    @Import(name="updatedBy")
    private @Nullable Output<String> updatedBy;

    /**
     * @return the identifier of the user who updated the model last time
     * 
     */
    public Optional<Output<String>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    private GetRegisteredModelModelInfoArgs() {}

    private GetRegisteredModelModelInfoArgs(GetRegisteredModelModelInfoArgs $) {
        this.aliases = $.aliases;
        this.browseOnly = $.browseOnly;
        this.catalogName = $.catalogName;
        this.comment = $.comment;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.fullName = $.fullName;
        this.metastoreId = $.metastoreId;
        this.name = $.name;
        this.owner = $.owner;
        this.schemaName = $.schemaName;
        this.storageLocation = $.storageLocation;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRegisteredModelModelInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRegisteredModelModelInfoArgs $;

        public Builder() {
            $ = new GetRegisteredModelModelInfoArgs();
        }

        public Builder(GetRegisteredModelModelInfoArgs defaults) {
            $ = new GetRegisteredModelModelInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aliases the list of aliases associated with this model. Each item is object consisting of following attributes:
         * 
         * @return builder
         * 
         */
        public Builder aliases(@Nullable Output<List<GetRegisteredModelModelInfoAliasArgs>> aliases) {
            $.aliases = aliases;
            return this;
        }

        /**
         * @param aliases the list of aliases associated with this model. Each item is object consisting of following attributes:
         * 
         * @return builder
         * 
         */
        public Builder aliases(List<GetRegisteredModelModelInfoAliasArgs> aliases) {
            return aliases(Output.of(aliases));
        }

        /**
         * @param aliases the list of aliases associated with this model. Each item is object consisting of following attributes:
         * 
         * @return builder
         * 
         */
        public Builder aliases(GetRegisteredModelModelInfoAliasArgs... aliases) {
            return aliases(List.of(aliases));
        }

        public Builder browseOnly(@Nullable Output<Boolean> browseOnly) {
            $.browseOnly = browseOnly;
            return this;
        }

        public Builder browseOnly(Boolean browseOnly) {
            return browseOnly(Output.of(browseOnly));
        }

        /**
         * @param catalogName The name of the catalog where the schema and the registered model reside.
         * 
         * @return builder
         * 
         */
        public Builder catalogName(@Nullable Output<String> catalogName) {
            $.catalogName = catalogName;
            return this;
        }

        /**
         * @param catalogName The name of the catalog where the schema and the registered model reside.
         * 
         * @return builder
         * 
         */
        public Builder catalogName(String catalogName) {
            return catalogName(Output.of(catalogName));
        }

        /**
         * @param comment The comment attached to the registered model.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment The comment attached to the registered model.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param createdAt the Unix timestamp at the model&#39;s creation
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<Integer> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt the Unix timestamp at the model&#39;s creation
         * 
         * @return builder
         * 
         */
        public Builder createdAt(Integer createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy the identifier of the user who created the model
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy the identifier of the user who created the model
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param fullName The fully-qualified name of the registered model (`catalog_name.schema_name.name`).
         * 
         * @return builder
         * 
         */
        public Builder fullName(@Nullable Output<String> fullName) {
            $.fullName = fullName;
            return this;
        }

        /**
         * @param fullName The fully-qualified name of the registered model (`catalog_name.schema_name.name`).
         * 
         * @return builder
         * 
         */
        public Builder fullName(String fullName) {
            return fullName(Output.of(fullName));
        }

        /**
         * @param metastoreId the unique identifier of the metastore
         * 
         * @return builder
         * 
         */
        public Builder metastoreId(@Nullable Output<String> metastoreId) {
            $.metastoreId = metastoreId;
            return this;
        }

        /**
         * @param metastoreId the unique identifier of the metastore
         * 
         * @return builder
         * 
         */
        public Builder metastoreId(String metastoreId) {
            return metastoreId(Output.of(metastoreId));
        }

        /**
         * @param name The name of the registered model.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the registered model.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param owner Name of the registered model owner.
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner Name of the registered model owner.
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param schemaName The name of the schema where the registered model resides.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        /**
         * @param schemaName The name of the schema where the registered model resides.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        /**
         * @param storageLocation The storage location under which model version data files are stored.
         * 
         * @return builder
         * 
         */
        public Builder storageLocation(@Nullable Output<String> storageLocation) {
            $.storageLocation = storageLocation;
            return this;
        }

        /**
         * @param storageLocation The storage location under which model version data files are stored.
         * 
         * @return builder
         * 
         */
        public Builder storageLocation(String storageLocation) {
            return storageLocation(Output.of(storageLocation));
        }

        /**
         * @param updatedAt the timestamp of the last time changes were made to the model
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<Integer> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt the timestamp of the last time changes were made to the model
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(Integer updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param updatedBy the identifier of the user who updated the model last time
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(@Nullable Output<String> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        /**
         * @param updatedBy the identifier of the user who updated the model last time
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(String updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        public GetRegisteredModelModelInfoArgs build() {
            return $;
        }
    }

}
