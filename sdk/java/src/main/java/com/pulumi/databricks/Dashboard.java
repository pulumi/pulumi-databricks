// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.DashboardArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.DashboardState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource allows you to manage Databricks [Dashboards](https://docs.databricks.com/en/dashboards/index.html). To manage [Dashboards](https://docs.databricks.com/en/dashboards/index.html) you must have a warehouse access on your databricks workspace.
 * 
 * ## Example Usage
 * 
 * Dashboard using `serialized_dashboard` attribute:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.DatabricksFunctions;
 * import com.pulumi.databricks.inputs.GetSqlWarehouseArgs;
 * import com.pulumi.databricks.Dashboard;
 * import com.pulumi.databricks.DashboardArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var starter = DatabricksFunctions.getSqlWarehouse(GetSqlWarehouseArgs.builder()
 *             .name("Starter Warehouse")
 *             .build());
 * 
 *         var dashboard = new Dashboard("dashboard", DashboardArgs.builder()
 *             .displayName("New Dashboard")
 *             .warehouseId(starter.id())
 *             .serializedDashboard("{\"pages\":[{\"name\":\"new_name\",\"displayName\":\"New Page\"}]}")
 *             .embedCredentials(false)
 *             .parentPath("/Shared/provider-test")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Dashboard using `file_path` attribute:
 * 
 * ## Import
 * 
 * You can import a `databricks_dashboard` resource with ID like the following:
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import databricks:index/dashboard:Dashboard this &lt;dashboard-id&gt;
 * ```
 * 
 */
@ResourceType(type="databricks:index/dashboard:Dashboard")
public class Dashboard extends com.pulumi.resources.CustomResource {
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    public Output<String> createTime() {
        return this.createTime;
    }
    @Export(name="dashboardChangeDetected", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> dashboardChangeDetected;

    public Output<Optional<Boolean>> dashboardChangeDetected() {
        return Codegen.optional(this.dashboardChangeDetected);
    }
    @Export(name="dashboardId", refs={String.class}, tree="[0]")
    private Output<String> dashboardId;

    public Output<String> dashboardId() {
        return this.dashboardId;
    }
    /**
     * The display name of the dashboard.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The display name of the dashboard.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Whether to embed credentials in the dashboard. Default is `true`.
     * 
     */
    @Export(name="embedCredentials", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> embedCredentials;

    /**
     * @return Whether to embed credentials in the dashboard. Default is `true`.
     * 
     */
    public Output<Optional<Boolean>> embedCredentials() {
        return Codegen.optional(this.embedCredentials);
    }
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    public Output<String> etag() {
        return this.etag;
    }
    /**
     * The path to the dashboard JSON file. Conflicts with `serialized_dashboard`.
     * 
     */
    @Export(name="filePath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> filePath;

    /**
     * @return The path to the dashboard JSON file. Conflicts with `serialized_dashboard`.
     * 
     */
    public Output<Optional<String>> filePath() {
        return Codegen.optional(this.filePath);
    }
    @Export(name="lifecycleState", refs={String.class}, tree="[0]")
    private Output<String> lifecycleState;

    public Output<String> lifecycleState() {
        return this.lifecycleState;
    }
    @Export(name="md5", refs={String.class}, tree="[0]")
    private Output<String> md5;

    public Output<String> md5() {
        return this.md5;
    }
    /**
     * The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn&#39;t exist, it will be created.
     * 
     */
    @Export(name="parentPath", refs={String.class}, tree="[0]")
    private Output<String> parentPath;

    /**
     * @return The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn&#39;t exist, it will be created.
     * 
     */
    public Output<String> parentPath() {
        return this.parentPath;
    }
    @Export(name="path", refs={String.class}, tree="[0]")
    private Output<String> path;

    public Output<String> path() {
        return this.path;
    }
    /**
     * The contents of the dashboard in serialized string form. Conflicts with `file_path`.
     * 
     */
    @Export(name="serializedDashboard", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serializedDashboard;

    /**
     * @return The contents of the dashboard in serialized string form. Conflicts with `file_path`.
     * 
     */
    public Output<Optional<String>> serializedDashboard() {
        return Codegen.optional(this.serializedDashboard);
    }
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * The warehouse ID used to run the dashboard.
     * 
     */
    @Export(name="warehouseId", refs={String.class}, tree="[0]")
    private Output<String> warehouseId;

    /**
     * @return The warehouse ID used to run the dashboard.
     * 
     */
    public Output<String> warehouseId() {
        return this.warehouseId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Dashboard(java.lang.String name) {
        this(name, DashboardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Dashboard(java.lang.String name, DashboardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Dashboard(java.lang.String name, DashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/dashboard:Dashboard", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Dashboard(java.lang.String name, Output<java.lang.String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/dashboard:Dashboard", name, state, makeResourceOptions(options, id), false);
    }

    private static DashboardArgs makeArgs(DashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DashboardArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Dashboard get(java.lang.String name, Output<java.lang.String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Dashboard(name, id, state, options);
    }
}
