// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseInstancesDatabaseInstance {
    /**
     * @return (string) - Password for admin user to create. If not provided, no user will be created
     * 
     */
    private @Nullable String adminPassword;
    /**
     * @return (string) - Name of the admin role for the instance. If not provided, defaults to &#39;databricks_admin&#39;
     * 
     */
    private @Nullable String adminRolename;
    /**
     * @return (string) - The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;
     * 
     */
    private @Nullable String capacity;
    /**
     * @return (string) - The timestamp when the instance was created
     * 
     */
    private String creationTime;
    /**
     * @return (string) - The email of the creator of the instance
     * 
     */
    private String creator;
    /**
     * @return (string) - The name of the instance. This is the unique identifier for the instance
     * 
     */
    private String name;
    /**
     * @return (string) - The version of Postgres running on the instance
     * 
     */
    private String pgVersion;
    /**
     * @return (string) - The DNS endpoint to connect to the instance for read+write access
     * 
     */
    private String readWriteDns;
    /**
     * @return (string) - The current state of the instance. Possible values are: AVAILABLE, DELETING, FAILING_OVER, STARTING, STOPPED, UPDATING
     * 
     */
    private String state;
    /**
     * @return (boolean) - Whether the instance is stopped
     * 
     */
    private @Nullable Boolean stopped;
    /**
     * @return (string) - An immutable UUID identifier for the instance
     * 
     */
    private String uid;

    private GetDatabaseInstancesDatabaseInstance() {}
    /**
     * @return (string) - Password for admin user to create. If not provided, no user will be created
     * 
     */
    public Optional<String> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }
    /**
     * @return (string) - Name of the admin role for the instance. If not provided, defaults to &#39;databricks_admin&#39;
     * 
     */
    public Optional<String> adminRolename() {
        return Optional.ofNullable(this.adminRolename);
    }
    /**
     * @return (string) - The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;
     * 
     */
    public Optional<String> capacity() {
        return Optional.ofNullable(this.capacity);
    }
    /**
     * @return (string) - The timestamp when the instance was created
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return (string) - The email of the creator of the instance
     * 
     */
    public String creator() {
        return this.creator;
    }
    /**
     * @return (string) - The name of the instance. This is the unique identifier for the instance
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (string) - The version of Postgres running on the instance
     * 
     */
    public String pgVersion() {
        return this.pgVersion;
    }
    /**
     * @return (string) - The DNS endpoint to connect to the instance for read+write access
     * 
     */
    public String readWriteDns() {
        return this.readWriteDns;
    }
    /**
     * @return (string) - The current state of the instance. Possible values are: AVAILABLE, DELETING, FAILING_OVER, STARTING, STOPPED, UPDATING
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return (boolean) - Whether the instance is stopped
     * 
     */
    public Optional<Boolean> stopped() {
        return Optional.ofNullable(this.stopped);
    }
    /**
     * @return (string) - An immutable UUID identifier for the instance
     * 
     */
    public String uid() {
        return this.uid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstancesDatabaseInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adminPassword;
        private @Nullable String adminRolename;
        private @Nullable String capacity;
        private String creationTime;
        private String creator;
        private String name;
        private String pgVersion;
        private String readWriteDns;
        private String state;
        private @Nullable Boolean stopped;
        private String uid;
        public Builder() {}
        public Builder(GetDatabaseInstancesDatabaseInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.adminRolename = defaults.adminRolename;
    	      this.capacity = defaults.capacity;
    	      this.creationTime = defaults.creationTime;
    	      this.creator = defaults.creator;
    	      this.name = defaults.name;
    	      this.pgVersion = defaults.pgVersion;
    	      this.readWriteDns = defaults.readWriteDns;
    	      this.state = defaults.state;
    	      this.stopped = defaults.stopped;
    	      this.uid = defaults.uid;
        }

        @CustomType.Setter
        public Builder adminPassword(@Nullable String adminPassword) {

            this.adminPassword = adminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder adminRolename(@Nullable String adminRolename) {

            this.adminRolename = adminRolename;
            return this;
        }
        @CustomType.Setter
        public Builder capacity(@Nullable String capacity) {

            this.capacity = capacity;
            return this;
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesDatabaseInstance", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder creator(String creator) {
            if (creator == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesDatabaseInstance", "creator");
            }
            this.creator = creator;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesDatabaseInstance", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pgVersion(String pgVersion) {
            if (pgVersion == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesDatabaseInstance", "pgVersion");
            }
            this.pgVersion = pgVersion;
            return this;
        }
        @CustomType.Setter
        public Builder readWriteDns(String readWriteDns) {
            if (readWriteDns == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesDatabaseInstance", "readWriteDns");
            }
            this.readWriteDns = readWriteDns;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesDatabaseInstance", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder stopped(@Nullable Boolean stopped) {

            this.stopped = stopped;
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesDatabaseInstance", "uid");
            }
            this.uid = uid;
            return this;
        }
        public GetDatabaseInstancesDatabaseInstance build() {
            final var _resultValue = new GetDatabaseInstancesDatabaseInstance();
            _resultValue.adminPassword = adminPassword;
            _resultValue.adminRolename = adminRolename;
            _resultValue.capacity = capacity;
            _resultValue.creationTime = creationTime;
            _resultValue.creator = creator;
            _resultValue.name = name;
            _resultValue.pgVersion = pgVersion;
            _resultValue.readWriteDns = readWriteDns;
            _resultValue.state = state;
            _resultValue.stopped = stopped;
            _resultValue.uid = uid;
            return _resultValue;
        }
    }
}
