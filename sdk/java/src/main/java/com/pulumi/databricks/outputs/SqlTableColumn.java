// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SqlTableColumn {
    private @Nullable String comment;
    private @Nullable String identity;
    private String name;
    private @Nullable Boolean nullable;
    private @Nullable String type;
    private @Nullable String typeJson;

    private SqlTableColumn() {}
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    public Optional<String> identity() {
        return Optional.ofNullable(this.identity);
    }
    public String name() {
        return this.name;
    }
    public Optional<Boolean> nullable() {
        return Optional.ofNullable(this.nullable);
    }
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    public Optional<String> typeJson() {
        return Optional.ofNullable(this.typeJson);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlTableColumn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String comment;
        private @Nullable String identity;
        private String name;
        private @Nullable Boolean nullable;
        private @Nullable String type;
        private @Nullable String typeJson;
        public Builder() {}
        public Builder(SqlTableColumn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comment = defaults.comment;
    	      this.identity = defaults.identity;
    	      this.name = defaults.name;
    	      this.nullable = defaults.nullable;
    	      this.type = defaults.type;
    	      this.typeJson = defaults.typeJson;
        }

        @CustomType.Setter
        public Builder comment(@Nullable String comment) {

            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder identity(@Nullable String identity) {

            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("SqlTableColumn", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nullable(@Nullable Boolean nullable) {

            this.nullable = nullable;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder typeJson(@Nullable String typeJson) {

            this.typeJson = typeJson;
            return this;
        }
        public SqlTableColumn build() {
            final var _resultValue = new SqlTableColumn();
            _resultValue.comment = comment;
            _resultValue.identity = identity;
            _resultValue.name = name;
            _resultValue.nullable = nullable;
            _resultValue.type = type;
            _resultValue.typeJson = typeJson;
            return _resultValue;
        }
    }
}
