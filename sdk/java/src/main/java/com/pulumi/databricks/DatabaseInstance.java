// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.DatabaseInstanceArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.DatabaseInstanceState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * As of terraform v1.5, resources can be imported through configuration.
 * 
 * hcl
 * 
 * import {
 * 
 *   id = name
 * 
 *   to = databricks_database_instance.this
 * 
 * }
 * 
 * If you are using an older version of terraform, you can import the resource using cli as follows:
 * 
 * ```sh
 * $ pulumi import databricks:index/databaseInstance:DatabaseInstance databricks_database_instance name
 * ```
 * 
 */
@ResourceType(type="databricks:index/databaseInstance:DatabaseInstance")
public class DatabaseInstance extends com.pulumi.resources.CustomResource {
    /**
     * Password for admin user to create. If not provided, no user will be created
     * 
     */
    @Export(name="adminPassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> adminPassword;

    /**
     * @return Password for admin user to create. If not provided, no user will be created
     * 
     */
    public Output<Optional<String>> adminPassword() {
        return Codegen.optional(this.adminPassword);
    }
    /**
     * Name of the admin role for the instance. If not provided, defaults to &#39;databricks_admin&#39;
     * 
     */
    @Export(name="adminRolename", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> adminRolename;

    /**
     * @return Name of the admin role for the instance. If not provided, defaults to &#39;databricks_admin&#39;
     * 
     */
    public Output<Optional<String>> adminRolename() {
        return Codegen.optional(this.adminRolename);
    }
    /**
     * The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;
     * 
     */
    @Export(name="capacity", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> capacity;

    /**
     * @return The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;
     * 
     */
    public Output<Optional<String>> capacity() {
        return Codegen.optional(this.capacity);
    }
    /**
     * (string) - The timestamp when the instance was created
     * 
     */
    @Export(name="creationTime", refs={String.class}, tree="[0]")
    private Output<String> creationTime;

    /**
     * @return (string) - The timestamp when the instance was created
     * 
     */
    public Output<String> creationTime() {
        return this.creationTime;
    }
    /**
     * (string) - The email of the creator of the instance
     * 
     */
    @Export(name="creator", refs={String.class}, tree="[0]")
    private Output<String> creator;

    /**
     * @return (string) - The email of the creator of the instance
     * 
     */
    public Output<String> creator() {
        return this.creator;
    }
    /**
     * The name of the instance. This is the unique identifier for the instance
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the instance. This is the unique identifier for the instance
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * (string) - The version of Postgres running on the instance
     * 
     */
    @Export(name="pgVersion", refs={String.class}, tree="[0]")
    private Output<String> pgVersion;

    /**
     * @return (string) - The version of Postgres running on the instance
     * 
     */
    public Output<String> pgVersion() {
        return this.pgVersion;
    }
    /**
     * (string) - The DNS endpoint to connect to the instance for read+write access
     * 
     */
    @Export(name="readWriteDns", refs={String.class}, tree="[0]")
    private Output<String> readWriteDns;

    /**
     * @return (string) - The DNS endpoint to connect to the instance for read+write access
     * 
     */
    public Output<String> readWriteDns() {
        return this.readWriteDns;
    }
    /**
     * (string) - The current state of the instance. Possible values are: AVAILABLE, DELETING, FAILING_OVER, STARTING, STOPPED, UPDATING
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return (string) - The current state of the instance. Possible values are: AVAILABLE, DELETING, FAILING_OVER, STARTING, STOPPED, UPDATING
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Whether the instance is stopped
     * 
     */
    @Export(name="stopped", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> stopped;

    /**
     * @return Whether the instance is stopped
     * 
     */
    public Output<Optional<Boolean>> stopped() {
        return Codegen.optional(this.stopped);
    }
    /**
     * (string) - An immutable UUID identifier for the instance
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return (string) - An immutable UUID identifier for the instance
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DatabaseInstance(java.lang.String name) {
        this(name, DatabaseInstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DatabaseInstance(java.lang.String name, @Nullable DatabaseInstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DatabaseInstance(java.lang.String name, @Nullable DatabaseInstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/databaseInstance:DatabaseInstance", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DatabaseInstance(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseInstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/databaseInstance:DatabaseInstance", name, state, makeResourceOptions(options, id), false);
    }

    private static DatabaseInstanceArgs makeArgs(@Nullable DatabaseInstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DatabaseInstanceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DatabaseInstance get(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseInstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DatabaseInstance(name, id, state, options);
    }
}
