// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFunctionsFunctionReturnParamParameter extends com.pulumi.resources.InvokeArgs {

    public static final GetFunctionsFunctionReturnParamParameter Empty = new GetFunctionsFunctionReturnParamParameter();

    @Import(name="comment")
    private @Nullable String comment;

    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    @Import(name="parameterDefault")
    private @Nullable String parameterDefault;

    public Optional<String> parameterDefault() {
        return Optional.ofNullable(this.parameterDefault);
    }

    @Import(name="parameterMode")
    private @Nullable String parameterMode;

    public Optional<String> parameterMode() {
        return Optional.ofNullable(this.parameterMode);
    }

    @Import(name="parameterType")
    private @Nullable String parameterType;

    public Optional<String> parameterType() {
        return Optional.ofNullable(this.parameterType);
    }

    @Import(name="position", required=true)
    private Integer position;

    public Integer position() {
        return this.position;
    }

    @Import(name="typeIntervalType")
    private @Nullable String typeIntervalType;

    public Optional<String> typeIntervalType() {
        return Optional.ofNullable(this.typeIntervalType);
    }

    @Import(name="typeJson")
    private @Nullable String typeJson;

    public Optional<String> typeJson() {
        return Optional.ofNullable(this.typeJson);
    }

    @Import(name="typeName", required=true)
    private String typeName;

    public String typeName() {
        return this.typeName;
    }

    @Import(name="typePrecision")
    private @Nullable Integer typePrecision;

    public Optional<Integer> typePrecision() {
        return Optional.ofNullable(this.typePrecision);
    }

    @Import(name="typeScale")
    private @Nullable Integer typeScale;

    public Optional<Integer> typeScale() {
        return Optional.ofNullable(this.typeScale);
    }

    @Import(name="typeText", required=true)
    private String typeText;

    public String typeText() {
        return this.typeText;
    }

    private GetFunctionsFunctionReturnParamParameter() {}

    private GetFunctionsFunctionReturnParamParameter(GetFunctionsFunctionReturnParamParameter $) {
        this.comment = $.comment;
        this.name = $.name;
        this.parameterDefault = $.parameterDefault;
        this.parameterMode = $.parameterMode;
        this.parameterType = $.parameterType;
        this.position = $.position;
        this.typeIntervalType = $.typeIntervalType;
        this.typeJson = $.typeJson;
        this.typeName = $.typeName;
        this.typePrecision = $.typePrecision;
        this.typeScale = $.typeScale;
        this.typeText = $.typeText;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFunctionsFunctionReturnParamParameter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFunctionsFunctionReturnParamParameter $;

        public Builder() {
            $ = new GetFunctionsFunctionReturnParamParameter();
        }

        public Builder(GetFunctionsFunctionReturnParamParameter defaults) {
            $ = new GetFunctionsFunctionReturnParamParameter(Objects.requireNonNull(defaults));
        }

        public Builder comment(@Nullable String comment) {
            $.comment = comment;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder parameterDefault(@Nullable String parameterDefault) {
            $.parameterDefault = parameterDefault;
            return this;
        }

        public Builder parameterMode(@Nullable String parameterMode) {
            $.parameterMode = parameterMode;
            return this;
        }

        public Builder parameterType(@Nullable String parameterType) {
            $.parameterType = parameterType;
            return this;
        }

        public Builder position(Integer position) {
            $.position = position;
            return this;
        }

        public Builder typeIntervalType(@Nullable String typeIntervalType) {
            $.typeIntervalType = typeIntervalType;
            return this;
        }

        public Builder typeJson(@Nullable String typeJson) {
            $.typeJson = typeJson;
            return this;
        }

        public Builder typeName(String typeName) {
            $.typeName = typeName;
            return this;
        }

        public Builder typePrecision(@Nullable Integer typePrecision) {
            $.typePrecision = typePrecision;
            return this;
        }

        public Builder typeScale(@Nullable Integer typeScale) {
            $.typeScale = typeScale;
            return this;
        }

        public Builder typeText(String typeText) {
            $.typeText = typeText;
            return this;
        }

        public GetFunctionsFunctionReturnParamParameter build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetFunctionsFunctionReturnParamParameter", "name");
            }
            if ($.position == null) {
                throw new MissingRequiredPropertyException("GetFunctionsFunctionReturnParamParameter", "position");
            }
            if ($.typeName == null) {
                throw new MissingRequiredPropertyException("GetFunctionsFunctionReturnParamParameter", "typeName");
            }
            if ($.typeText == null) {
                throw new MissingRequiredPropertyException("GetFunctionsFunctionReturnParamParameter", "typeText");
            }
            return $;
        }
    }

}
