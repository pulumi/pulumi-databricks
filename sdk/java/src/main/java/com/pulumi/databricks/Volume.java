// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.VolumeArgs;
import com.pulumi.databricks.inputs.VolumeState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * &gt; **Public Preview** This feature is in [Public Preview](https://docs.databricks.com/release-notes/release-types.html).
 * 
 * &gt; **Note** This resource could be only used with workspace-level provider!
 * 
 * Volumes are Unity Catalog objects representing a logical volume of storage in a cloud object storage location. Volumes provide capabilities for accessing, storing, governing, and organizing files. While tables provide governance over tabular datasets, volumes add governance over non-tabular datasets. You can use volumes to store and access files in any format, including structured, semi-structured, and unstructured data.
 * 
 * A volume resides in the third layer of Unity Catalogâ€™s three-level namespace. Volumes are siblings to tables, views, and other objects organized under a schema in Unity Catalog.
 * 
 * A volume can be **managed** or **external**.
 * 
 * A **managed volume** is a Unity Catalog-governed storage volume created within the default storage location of the containing schema. Managed volumes allow the creation of governed storage for working with files without the overhead of external locations and storage credentials. You do not need to specify a location when creating a managed volume, and all file access for data in managed volumes is through paths managed by Unity Catalog.
 * 
 * An **external volume** is a Unity Catalog-governed storage volume registered against a directory within an external location.
 * 
 * A volume can be referenced using its identifier: ```&lt;catalogName&gt;.&lt;schemaName&gt;.&lt;volumeName&gt;```, where:
 * 
 * * ```&lt;catalogName&gt;```: The name of the catalog containing the Volume.
 * * ```&lt;schemaName&gt;```: The name of the schema containing the Volume.
 * * ```&lt;volumeName&gt;```: The name of the Volume. It identifies the volume object.
 * 
 * The path to access files in volumes uses the following format:
 * 
 * This resource manages Volumes in Unity Catalog.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.Catalog;
 * import com.pulumi.databricks.CatalogArgs;
 * import com.pulumi.databricks.Schema;
 * import com.pulumi.databricks.SchemaArgs;
 * import com.pulumi.databricks.StorageCredential;
 * import com.pulumi.databricks.StorageCredentialArgs;
 * import com.pulumi.databricks.inputs.StorageCredentialAwsIamRoleArgs;
 * import com.pulumi.databricks.ExternalLocation;
 * import com.pulumi.databricks.ExternalLocationArgs;
 * import com.pulumi.databricks.Volume;
 * import com.pulumi.databricks.VolumeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sandbox = new Catalog(&#34;sandbox&#34;, CatalogArgs.builder()        
 *             .comment(&#34;this catalog is managed by terraform&#34;)
 *             .properties(Map.of(&#34;purpose&#34;, &#34;testing&#34;))
 *             .build());
 * 
 *         var things = new Schema(&#34;things&#34;, SchemaArgs.builder()        
 *             .catalogName(sandbox.name())
 *             .comment(&#34;this schema is managed by terraform&#34;)
 *             .properties(Map.of(&#34;kind&#34;, &#34;various&#34;))
 *             .build());
 * 
 *         var external = new StorageCredential(&#34;external&#34;, StorageCredentialArgs.builder()        
 *             .awsIamRole(StorageCredentialAwsIamRoleArgs.builder()
 *                 .roleArn(aws_iam_role.external_data_access().arn())
 *                 .build())
 *             .build());
 * 
 *         var some = new ExternalLocation(&#34;some&#34;, ExternalLocationArgs.builder()        
 *             .url(String.format(&#34;s3://%s/some&#34;, aws_s3_bucket.external().id()))
 *             .credentialName(external.name())
 *             .build());
 * 
 *         var this_ = new Volume(&#34;this&#34;, VolumeArgs.builder()        
 *             .catalogName(sandbox.name())
 *             .schemaName(things.name())
 *             .volumeType(&#34;EXTERNAL&#34;)
 *             .storageLocation(some.url())
 *             .comment(&#34;this volume is managed by terraform&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * This resource can be imported by `full_name` which is the 3-level Volume identifier`&lt;catalog&gt;.&lt;schema&gt;.&lt;name&gt;` bash
 * 
 * ```sh
 *  $ pulumi import databricks:index/volume:Volume this &lt;catalog_name&gt;.&lt;schema_name&gt;.&lt;name&gt;
 * ```
 * 
 */
@ResourceType(type="databricks:index/volume:Volume")
public class Volume extends com.pulumi.resources.CustomResource {
    /**
     * Name of parent Catalog. Change forces creation of a new resource.
     * 
     */
    @Export(name="catalogName", refs={String.class}, tree="[0]")
    private Output<String> catalogName;

    /**
     * @return Name of parent Catalog. Change forces creation of a new resource.
     * 
     */
    public Output<String> catalogName() {
        return this.catalogName;
    }
    /**
     * Free-form text.
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return Free-form text.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * Name of the Volume
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the Volume
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Name of the volume owner.
     * 
     */
    @Export(name="owner", refs={String.class}, tree="[0]")
    private Output<String> owner;

    /**
     * @return Name of the volume owner.
     * 
     */
    public Output<String> owner() {
        return this.owner;
    }
    /**
     * Name of parent Schema relative to parent Catalog. Change forces creation of a new resource.
     * 
     */
    @Export(name="schemaName", refs={String.class}, tree="[0]")
    private Output<String> schemaName;

    /**
     * @return Name of parent Schema relative to parent Catalog. Change forces creation of a new resource.
     * 
     */
    public Output<String> schemaName() {
        return this.schemaName;
    }
    /**
     * Path inside an External Location. Only used for `EXTERNAL` Volumes. Change forces creation of a new resource.
     * 
     */
    @Export(name="storageLocation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> storageLocation;

    /**
     * @return Path inside an External Location. Only used for `EXTERNAL` Volumes. Change forces creation of a new resource.
     * 
     */
    public Output<Optional<String>> storageLocation() {
        return Codegen.optional(this.storageLocation);
    }
    /**
     * Volume type. `EXTERNAL` or `MANAGED`. Change forces creation of a new resource.
     * 
     */
    @Export(name="volumeType", refs={String.class}, tree="[0]")
    private Output<String> volumeType;

    /**
     * @return Volume type. `EXTERNAL` or `MANAGED`. Change forces creation of a new resource.
     * 
     */
    public Output<String> volumeType() {
        return this.volumeType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Volume(String name) {
        this(name, VolumeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Volume(String name, VolumeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Volume(String name, VolumeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/volume:Volume", name, args == null ? VolumeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Volume(String name, Output<String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/volume:Volume", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Volume get(String name, Output<String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Volume(name, id, state, options);
    }
}
