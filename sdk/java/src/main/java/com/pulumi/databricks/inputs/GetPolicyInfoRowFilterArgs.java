// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetPolicyInfoRowFilterUsingArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPolicyInfoRowFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPolicyInfoRowFilterArgs Empty = new GetPolicyInfoRowFilterArgs();

    /**
     * (string) - The fully qualified name of the row filter function.
     * The function is called on each row of the target table. It should return a boolean value
     * indicating whether the row should be visible to the user.
     * Required on create and update
     * 
     */
    @Import(name="functionName", required=true)
    private Output<String> functionName;

    /**
     * @return (string) - The fully qualified name of the row filter function.
     * The function is called on each row of the target table. It should return a boolean value
     * indicating whether the row should be visible to the user.
     * Required on create and update
     * 
     */
    public Output<String> functionName() {
        return this.functionName;
    }

    /**
     * (list of FunctionArgument) - Optional list of column aliases or constant literals to be passed as arguments to the row filter function.
     * The type of each column should match the positional argument of the row filter function
     * 
     */
    @Import(name="usings")
    private @Nullable Output<List<GetPolicyInfoRowFilterUsingArgs>> usings;

    /**
     * @return (list of FunctionArgument) - Optional list of column aliases or constant literals to be passed as arguments to the row filter function.
     * The type of each column should match the positional argument of the row filter function
     * 
     */
    public Optional<Output<List<GetPolicyInfoRowFilterUsingArgs>>> usings() {
        return Optional.ofNullable(this.usings);
    }

    private GetPolicyInfoRowFilterArgs() {}

    private GetPolicyInfoRowFilterArgs(GetPolicyInfoRowFilterArgs $) {
        this.functionName = $.functionName;
        this.usings = $.usings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPolicyInfoRowFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPolicyInfoRowFilterArgs $;

        public Builder() {
            $ = new GetPolicyInfoRowFilterArgs();
        }

        public Builder(GetPolicyInfoRowFilterArgs defaults) {
            $ = new GetPolicyInfoRowFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param functionName (string) - The fully qualified name of the row filter function.
         * The function is called on each row of the target table. It should return a boolean value
         * indicating whether the row should be visible to the user.
         * Required on create and update
         * 
         * @return builder
         * 
         */
        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName (string) - The fully qualified name of the row filter function.
         * The function is called on each row of the target table. It should return a boolean value
         * indicating whether the row should be visible to the user.
         * Required on create and update
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param usings (list of FunctionArgument) - Optional list of column aliases or constant literals to be passed as arguments to the row filter function.
         * The type of each column should match the positional argument of the row filter function
         * 
         * @return builder
         * 
         */
        public Builder usings(@Nullable Output<List<GetPolicyInfoRowFilterUsingArgs>> usings) {
            $.usings = usings;
            return this;
        }

        /**
         * @param usings (list of FunctionArgument) - Optional list of column aliases or constant literals to be passed as arguments to the row filter function.
         * The type of each column should match the positional argument of the row filter function
         * 
         * @return builder
         * 
         */
        public Builder usings(List<GetPolicyInfoRowFilterUsingArgs> usings) {
            return usings(Output.of(usings));
        }

        /**
         * @param usings (list of FunctionArgument) - Optional list of column aliases or constant literals to be passed as arguments to the row filter function.
         * The type of each column should match the positional argument of the row filter function
         * 
         * @return builder
         * 
         */
        public Builder usings(GetPolicyInfoRowFilterUsingArgs... usings) {
            return usings(List.of(usings));
        }

        public GetPolicyInfoRowFilterArgs build() {
            if ($.functionName == null) {
                throw new MissingRequiredPropertyException("GetPolicyInfoRowFilterArgs", "functionName");
            }
            return $;
        }
    }

}
