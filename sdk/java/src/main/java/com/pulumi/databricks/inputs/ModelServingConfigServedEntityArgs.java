// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.ModelServingConfigServedEntityExternalModelArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelServingConfigServedEntityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelServingConfigServedEntityArgs Empty = new ModelServingConfigServedEntityArgs();

    /**
     * The name of the entity to be served. The entity may be a model in the Databricks Model Registry, a model in the Unity Catalog (UC), or a function of type `FEATURE_SPEC` in the UC. If it is a UC object, the full name of the object should be given in the form of `catalog_name.schema_name.model_name`.
     * 
     */
    @Import(name="entityName")
    private @Nullable Output<String> entityName;

    /**
     * @return The name of the entity to be served. The entity may be a model in the Databricks Model Registry, a model in the Unity Catalog (UC), or a function of type `FEATURE_SPEC` in the UC. If it is a UC object, the full name of the object should be given in the form of `catalog_name.schema_name.model_name`.
     * 
     */
    public Optional<Output<String>> entityName() {
        return Optional.ofNullable(this.entityName);
    }

    /**
     * The version of the model in Databricks Model Registry to be served or empty if the entity is a `FEATURE_SPEC`.
     * 
     */
    @Import(name="entityVersion")
    private @Nullable Output<String> entityVersion;

    /**
     * @return The version of the model in Databricks Model Registry to be served or empty if the entity is a `FEATURE_SPEC`.
     * 
     */
    public Optional<Output<String>> entityVersion() {
        return Optional.ofNullable(this.entityVersion);
    }

    /**
     * An object containing a set of optional, user-specified environment variable key-value pairs used for serving this entity. Note: this is an experimental feature and subject to change. Example entity environment variables that refer to Databricks secrets: ```{&#34;OPENAI_API_KEY&#34;: &#34;{{secrets/my_scope/my_key}}&#34;, &#34;DATABRICKS_TOKEN&#34;: &#34;{{secrets/my_scope2/my_key2}}&#34;}```
     * 
     */
    @Import(name="environmentVars")
    private @Nullable Output<Map<String,Object>> environmentVars;

    /**
     * @return An object containing a set of optional, user-specified environment variable key-value pairs used for serving this entity. Note: this is an experimental feature and subject to change. Example entity environment variables that refer to Databricks secrets: ```{&#34;OPENAI_API_KEY&#34;: &#34;{{secrets/my_scope/my_key}}&#34;, &#34;DATABRICKS_TOKEN&#34;: &#34;{{secrets/my_scope2/my_key2}}&#34;}```
     * 
     */
    public Optional<Output<Map<String,Object>>> environmentVars() {
        return Optional.ofNullable(this.environmentVars);
    }

    /**
     * The external model to be served. NOTE: Only one of `external_model` and (`entity_name`, `entity_version`, `workload_size`, `workload_type`, and `scale_to_zero_enabled`) can be specified with the latter set being used for custom model serving for a Databricks registered model. When an `external_model` is present, the served entities list can only have one `served_entity` object. For an existing endpoint with `external_model`, it can not be updated to an endpoint without `external_model`. If the endpoint is created without `external_model`, users cannot update it to add `external_model` later.
     * 
     */
    @Import(name="externalModel")
    private @Nullable Output<ModelServingConfigServedEntityExternalModelArgs> externalModel;

    /**
     * @return The external model to be served. NOTE: Only one of `external_model` and (`entity_name`, `entity_version`, `workload_size`, `workload_type`, and `scale_to_zero_enabled`) can be specified with the latter set being used for custom model serving for a Databricks registered model. When an `external_model` is present, the served entities list can only have one `served_entity` object. For an existing endpoint with `external_model`, it can not be updated to an endpoint without `external_model`. If the endpoint is created without `external_model`, users cannot update it to add `external_model` later.
     * 
     */
    public Optional<Output<ModelServingConfigServedEntityExternalModelArgs>> externalModel() {
        return Optional.ofNullable(this.externalModel);
    }

    /**
     * ARN of the instance profile that the served entity uses to access AWS resources.
     * 
     */
    @Import(name="instanceProfileArn")
    private @Nullable Output<String> instanceProfileArn;

    /**
     * @return ARN of the instance profile that the served entity uses to access AWS resources.
     * 
     */
    public Optional<Output<String>> instanceProfileArn() {
        return Optional.ofNullable(this.instanceProfileArn);
    }

    /**
     * The maximum tokens per second that the endpoint can scale up to.
     * 
     */
    @Import(name="maxProvisionedThroughput")
    private @Nullable Output<Integer> maxProvisionedThroughput;

    /**
     * @return The maximum tokens per second that the endpoint can scale up to.
     * 
     */
    public Optional<Output<Integer>> maxProvisionedThroughput() {
        return Optional.ofNullable(this.maxProvisionedThroughput);
    }

    /**
     * The minimum tokens per second that the endpoint can scale down to.
     * 
     */
    @Import(name="minProvisionedThroughput")
    private @Nullable Output<Integer> minProvisionedThroughput;

    /**
     * @return The minimum tokens per second that the endpoint can scale down to.
     * 
     */
    public Optional<Output<Integer>> minProvisionedThroughput() {
        return Optional.ofNullable(this.minProvisionedThroughput);
    }

    /**
     * The name of the external model.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the external model.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether the compute resources for the served entity should scale down to zero.
     * 
     */
    @Import(name="scaleToZeroEnabled")
    private @Nullable Output<Boolean> scaleToZeroEnabled;

    /**
     * @return Whether the compute resources for the served entity should scale down to zero.
     * 
     */
    public Optional<Output<Boolean>> scaleToZeroEnabled() {
        return Optional.ofNullable(this.scaleToZeroEnabled);
    }

    /**
     * The workload size of the served entity. The workload size corresponds to a range of provisioned concurrency that the compute autoscales between. A single unit of provisioned concurrency can process one request at a time. Valid workload sizes are `Small` (4 - 4 provisioned concurrency), `Medium` (8 - 16 provisioned concurrency), and `Large` (16 - 64 provisioned concurrency). If `scale-to-zero` is enabled, the lower bound of the provisioned concurrency for each workload size is 0.
     * 
     */
    @Import(name="workloadSize")
    private @Nullable Output<String> workloadSize;

    /**
     * @return The workload size of the served entity. The workload size corresponds to a range of provisioned concurrency that the compute autoscales between. A single unit of provisioned concurrency can process one request at a time. Valid workload sizes are `Small` (4 - 4 provisioned concurrency), `Medium` (8 - 16 provisioned concurrency), and `Large` (16 - 64 provisioned concurrency). If `scale-to-zero` is enabled, the lower bound of the provisioned concurrency for each workload size is 0.
     * 
     */
    public Optional<Output<String>> workloadSize() {
        return Optional.ofNullable(this.workloadSize);
    }

    /**
     * The workload type of the served entity. The workload type selects which type of compute to use in the endpoint. The default value for this parameter is `CPU`. For deep learning workloads, GPU acceleration is available by selecting workload types like `GPU_SMALL` and others. See the available [GPU types](https://docs.databricks.com/machine-learning/model-serving/create-manage-serving-endpoints.html#gpu-workload-types).
     * 
     */
    @Import(name="workloadType")
    private @Nullable Output<String> workloadType;

    /**
     * @return The workload type of the served entity. The workload type selects which type of compute to use in the endpoint. The default value for this parameter is `CPU`. For deep learning workloads, GPU acceleration is available by selecting workload types like `GPU_SMALL` and others. See the available [GPU types](https://docs.databricks.com/machine-learning/model-serving/create-manage-serving-endpoints.html#gpu-workload-types).
     * 
     */
    public Optional<Output<String>> workloadType() {
        return Optional.ofNullable(this.workloadType);
    }

    private ModelServingConfigServedEntityArgs() {}

    private ModelServingConfigServedEntityArgs(ModelServingConfigServedEntityArgs $) {
        this.entityName = $.entityName;
        this.entityVersion = $.entityVersion;
        this.environmentVars = $.environmentVars;
        this.externalModel = $.externalModel;
        this.instanceProfileArn = $.instanceProfileArn;
        this.maxProvisionedThroughput = $.maxProvisionedThroughput;
        this.minProvisionedThroughput = $.minProvisionedThroughput;
        this.name = $.name;
        this.scaleToZeroEnabled = $.scaleToZeroEnabled;
        this.workloadSize = $.workloadSize;
        this.workloadType = $.workloadType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelServingConfigServedEntityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelServingConfigServedEntityArgs $;

        public Builder() {
            $ = new ModelServingConfigServedEntityArgs();
        }

        public Builder(ModelServingConfigServedEntityArgs defaults) {
            $ = new ModelServingConfigServedEntityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param entityName The name of the entity to be served. The entity may be a model in the Databricks Model Registry, a model in the Unity Catalog (UC), or a function of type `FEATURE_SPEC` in the UC. If it is a UC object, the full name of the object should be given in the form of `catalog_name.schema_name.model_name`.
         * 
         * @return builder
         * 
         */
        public Builder entityName(@Nullable Output<String> entityName) {
            $.entityName = entityName;
            return this;
        }

        /**
         * @param entityName The name of the entity to be served. The entity may be a model in the Databricks Model Registry, a model in the Unity Catalog (UC), or a function of type `FEATURE_SPEC` in the UC. If it is a UC object, the full name of the object should be given in the form of `catalog_name.schema_name.model_name`.
         * 
         * @return builder
         * 
         */
        public Builder entityName(String entityName) {
            return entityName(Output.of(entityName));
        }

        /**
         * @param entityVersion The version of the model in Databricks Model Registry to be served or empty if the entity is a `FEATURE_SPEC`.
         * 
         * @return builder
         * 
         */
        public Builder entityVersion(@Nullable Output<String> entityVersion) {
            $.entityVersion = entityVersion;
            return this;
        }

        /**
         * @param entityVersion The version of the model in Databricks Model Registry to be served or empty if the entity is a `FEATURE_SPEC`.
         * 
         * @return builder
         * 
         */
        public Builder entityVersion(String entityVersion) {
            return entityVersion(Output.of(entityVersion));
        }

        /**
         * @param environmentVars An object containing a set of optional, user-specified environment variable key-value pairs used for serving this entity. Note: this is an experimental feature and subject to change. Example entity environment variables that refer to Databricks secrets: ```{&#34;OPENAI_API_KEY&#34;: &#34;{{secrets/my_scope/my_key}}&#34;, &#34;DATABRICKS_TOKEN&#34;: &#34;{{secrets/my_scope2/my_key2}}&#34;}```
         * 
         * @return builder
         * 
         */
        public Builder environmentVars(@Nullable Output<Map<String,Object>> environmentVars) {
            $.environmentVars = environmentVars;
            return this;
        }

        /**
         * @param environmentVars An object containing a set of optional, user-specified environment variable key-value pairs used for serving this entity. Note: this is an experimental feature and subject to change. Example entity environment variables that refer to Databricks secrets: ```{&#34;OPENAI_API_KEY&#34;: &#34;{{secrets/my_scope/my_key}}&#34;, &#34;DATABRICKS_TOKEN&#34;: &#34;{{secrets/my_scope2/my_key2}}&#34;}```
         * 
         * @return builder
         * 
         */
        public Builder environmentVars(Map<String,Object> environmentVars) {
            return environmentVars(Output.of(environmentVars));
        }

        /**
         * @param externalModel The external model to be served. NOTE: Only one of `external_model` and (`entity_name`, `entity_version`, `workload_size`, `workload_type`, and `scale_to_zero_enabled`) can be specified with the latter set being used for custom model serving for a Databricks registered model. When an `external_model` is present, the served entities list can only have one `served_entity` object. For an existing endpoint with `external_model`, it can not be updated to an endpoint without `external_model`. If the endpoint is created without `external_model`, users cannot update it to add `external_model` later.
         * 
         * @return builder
         * 
         */
        public Builder externalModel(@Nullable Output<ModelServingConfigServedEntityExternalModelArgs> externalModel) {
            $.externalModel = externalModel;
            return this;
        }

        /**
         * @param externalModel The external model to be served. NOTE: Only one of `external_model` and (`entity_name`, `entity_version`, `workload_size`, `workload_type`, and `scale_to_zero_enabled`) can be specified with the latter set being used for custom model serving for a Databricks registered model. When an `external_model` is present, the served entities list can only have one `served_entity` object. For an existing endpoint with `external_model`, it can not be updated to an endpoint without `external_model`. If the endpoint is created without `external_model`, users cannot update it to add `external_model` later.
         * 
         * @return builder
         * 
         */
        public Builder externalModel(ModelServingConfigServedEntityExternalModelArgs externalModel) {
            return externalModel(Output.of(externalModel));
        }

        /**
         * @param instanceProfileArn ARN of the instance profile that the served entity uses to access AWS resources.
         * 
         * @return builder
         * 
         */
        public Builder instanceProfileArn(@Nullable Output<String> instanceProfileArn) {
            $.instanceProfileArn = instanceProfileArn;
            return this;
        }

        /**
         * @param instanceProfileArn ARN of the instance profile that the served entity uses to access AWS resources.
         * 
         * @return builder
         * 
         */
        public Builder instanceProfileArn(String instanceProfileArn) {
            return instanceProfileArn(Output.of(instanceProfileArn));
        }

        /**
         * @param maxProvisionedThroughput The maximum tokens per second that the endpoint can scale up to.
         * 
         * @return builder
         * 
         */
        public Builder maxProvisionedThroughput(@Nullable Output<Integer> maxProvisionedThroughput) {
            $.maxProvisionedThroughput = maxProvisionedThroughput;
            return this;
        }

        /**
         * @param maxProvisionedThroughput The maximum tokens per second that the endpoint can scale up to.
         * 
         * @return builder
         * 
         */
        public Builder maxProvisionedThroughput(Integer maxProvisionedThroughput) {
            return maxProvisionedThroughput(Output.of(maxProvisionedThroughput));
        }

        /**
         * @param minProvisionedThroughput The minimum tokens per second that the endpoint can scale down to.
         * 
         * @return builder
         * 
         */
        public Builder minProvisionedThroughput(@Nullable Output<Integer> minProvisionedThroughput) {
            $.minProvisionedThroughput = minProvisionedThroughput;
            return this;
        }

        /**
         * @param minProvisionedThroughput The minimum tokens per second that the endpoint can scale down to.
         * 
         * @return builder
         * 
         */
        public Builder minProvisionedThroughput(Integer minProvisionedThroughput) {
            return minProvisionedThroughput(Output.of(minProvisionedThroughput));
        }

        /**
         * @param name The name of the external model.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the external model.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scaleToZeroEnabled Whether the compute resources for the served entity should scale down to zero.
         * 
         * @return builder
         * 
         */
        public Builder scaleToZeroEnabled(@Nullable Output<Boolean> scaleToZeroEnabled) {
            $.scaleToZeroEnabled = scaleToZeroEnabled;
            return this;
        }

        /**
         * @param scaleToZeroEnabled Whether the compute resources for the served entity should scale down to zero.
         * 
         * @return builder
         * 
         */
        public Builder scaleToZeroEnabled(Boolean scaleToZeroEnabled) {
            return scaleToZeroEnabled(Output.of(scaleToZeroEnabled));
        }

        /**
         * @param workloadSize The workload size of the served entity. The workload size corresponds to a range of provisioned concurrency that the compute autoscales between. A single unit of provisioned concurrency can process one request at a time. Valid workload sizes are `Small` (4 - 4 provisioned concurrency), `Medium` (8 - 16 provisioned concurrency), and `Large` (16 - 64 provisioned concurrency). If `scale-to-zero` is enabled, the lower bound of the provisioned concurrency for each workload size is 0.
         * 
         * @return builder
         * 
         */
        public Builder workloadSize(@Nullable Output<String> workloadSize) {
            $.workloadSize = workloadSize;
            return this;
        }

        /**
         * @param workloadSize The workload size of the served entity. The workload size corresponds to a range of provisioned concurrency that the compute autoscales between. A single unit of provisioned concurrency can process one request at a time. Valid workload sizes are `Small` (4 - 4 provisioned concurrency), `Medium` (8 - 16 provisioned concurrency), and `Large` (16 - 64 provisioned concurrency). If `scale-to-zero` is enabled, the lower bound of the provisioned concurrency for each workload size is 0.
         * 
         * @return builder
         * 
         */
        public Builder workloadSize(String workloadSize) {
            return workloadSize(Output.of(workloadSize));
        }

        /**
         * @param workloadType The workload type of the served entity. The workload type selects which type of compute to use in the endpoint. The default value for this parameter is `CPU`. For deep learning workloads, GPU acceleration is available by selecting workload types like `GPU_SMALL` and others. See the available [GPU types](https://docs.databricks.com/machine-learning/model-serving/create-manage-serving-endpoints.html#gpu-workload-types).
         * 
         * @return builder
         * 
         */
        public Builder workloadType(@Nullable Output<String> workloadType) {
            $.workloadType = workloadType;
            return this;
        }

        /**
         * @param workloadType The workload type of the served entity. The workload type selects which type of compute to use in the endpoint. The default value for this parameter is `CPU`. For deep learning workloads, GPU acceleration is available by selecting workload types like `GPU_SMALL` and others. See the available [GPU types](https://docs.databricks.com/machine-learning/model-serving/create-manage-serving-endpoints.html#gpu-workload-types).
         * 
         * @return builder
         * 
         */
        public Builder workloadType(String workloadType) {
            return workloadType(Output.of(workloadType));
        }

        public ModelServingConfigServedEntityArgs build() {
            return $;
        }
    }

}
