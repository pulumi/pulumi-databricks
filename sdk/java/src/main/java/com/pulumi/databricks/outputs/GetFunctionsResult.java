// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetFunctionsFunction;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFunctionsResult {
    /**
     * @return Name of parent catalog.
     * 
     */
    private String catalogName;
    /**
     * @return list of objects describing individual UDF. Each object consists of the following attributes (refer to [REST API documentation](https://docs.databricks.com/api/workspace/functions/list#functions) for up-to-date list of attributes. Default type is String):
     * 
     */
    private List<GetFunctionsFunction> functions;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean includeBrowse;
    /**
     * @return Name of parent schema relative to its parent catalog.
     * 
     */
    private String schemaName;

    private GetFunctionsResult() {}
    /**
     * @return Name of parent catalog.
     * 
     */
    public String catalogName() {
        return this.catalogName;
    }
    /**
     * @return list of objects describing individual UDF. Each object consists of the following attributes (refer to [REST API documentation](https://docs.databricks.com/api/workspace/functions/list#functions) for up-to-date list of attributes. Default type is String):
     * 
     */
    public List<GetFunctionsFunction> functions() {
        return this.functions;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> includeBrowse() {
        return Optional.ofNullable(this.includeBrowse);
    }
    /**
     * @return Name of parent schema relative to its parent catalog.
     * 
     */
    public String schemaName() {
        return this.schemaName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String catalogName;
        private List<GetFunctionsFunction> functions;
        private String id;
        private @Nullable Boolean includeBrowse;
        private String schemaName;
        public Builder() {}
        public Builder(GetFunctionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogName = defaults.catalogName;
    	      this.functions = defaults.functions;
    	      this.id = defaults.id;
    	      this.includeBrowse = defaults.includeBrowse;
    	      this.schemaName = defaults.schemaName;
        }

        @CustomType.Setter
        public Builder catalogName(String catalogName) {
            if (catalogName == null) {
              throw new MissingRequiredPropertyException("GetFunctionsResult", "catalogName");
            }
            this.catalogName = catalogName;
            return this;
        }
        @CustomType.Setter
        public Builder functions(List<GetFunctionsFunction> functions) {
            if (functions == null) {
              throw new MissingRequiredPropertyException("GetFunctionsResult", "functions");
            }
            this.functions = functions;
            return this;
        }
        public Builder functions(GetFunctionsFunction... functions) {
            return functions(List.of(functions));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFunctionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includeBrowse(@Nullable Boolean includeBrowse) {

            this.includeBrowse = includeBrowse;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            if (schemaName == null) {
              throw new MissingRequiredPropertyException("GetFunctionsResult", "schemaName");
            }
            this.schemaName = schemaName;
            return this;
        }
        public GetFunctionsResult build() {
            final var _resultValue = new GetFunctionsResult();
            _resultValue.catalogName = catalogName;
            _resultValue.functions = functions;
            _resultValue.id = id;
            _resultValue.includeBrowse = includeBrowse;
            _resultValue.schemaName = schemaName;
            return _resultValue;
        }
    }
}
