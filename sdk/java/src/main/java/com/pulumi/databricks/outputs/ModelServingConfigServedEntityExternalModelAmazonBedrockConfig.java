// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ModelServingConfigServedEntityExternalModelAmazonBedrockConfig {
    /**
     * @return The Databricks secret key reference for an AWS Access Key ID with permissions to interact with Bedrock services.
     * 
     */
    private String awsAccessKeyId;
    /**
     * @return The AWS region to use. Bedrock has to be enabled there.
     * 
     */
    private String awsRegion;
    /**
     * @return The Databricks secret key reference for an AWS Secret Access Key paired with the access key ID, with permissions to interact with Bedrock services.
     * 
     */
    private String awsSecretAccessKey;
    /**
     * @return The underlying provider in Amazon Bedrock. Supported values (case insensitive) include: `Anthropic`, `Cohere`, `AI21Labs`, `Amazon`.
     * 
     */
    private String bedrockProvider;

    private ModelServingConfigServedEntityExternalModelAmazonBedrockConfig() {}
    /**
     * @return The Databricks secret key reference for an AWS Access Key ID with permissions to interact with Bedrock services.
     * 
     */
    public String awsAccessKeyId() {
        return this.awsAccessKeyId;
    }
    /**
     * @return The AWS region to use. Bedrock has to be enabled there.
     * 
     */
    public String awsRegion() {
        return this.awsRegion;
    }
    /**
     * @return The Databricks secret key reference for an AWS Secret Access Key paired with the access key ID, with permissions to interact with Bedrock services.
     * 
     */
    public String awsSecretAccessKey() {
        return this.awsSecretAccessKey;
    }
    /**
     * @return The underlying provider in Amazon Bedrock. Supported values (case insensitive) include: `Anthropic`, `Cohere`, `AI21Labs`, `Amazon`.
     * 
     */
    public String bedrockProvider() {
        return this.bedrockProvider;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelServingConfigServedEntityExternalModelAmazonBedrockConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String awsAccessKeyId;
        private String awsRegion;
        private String awsSecretAccessKey;
        private String bedrockProvider;
        public Builder() {}
        public Builder(ModelServingConfigServedEntityExternalModelAmazonBedrockConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsAccessKeyId = defaults.awsAccessKeyId;
    	      this.awsRegion = defaults.awsRegion;
    	      this.awsSecretAccessKey = defaults.awsSecretAccessKey;
    	      this.bedrockProvider = defaults.bedrockProvider;
        }

        @CustomType.Setter
        public Builder awsAccessKeyId(String awsAccessKeyId) {
            if (awsAccessKeyId == null) {
              throw new MissingRequiredPropertyException("ModelServingConfigServedEntityExternalModelAmazonBedrockConfig", "awsAccessKeyId");
            }
            this.awsAccessKeyId = awsAccessKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder awsRegion(String awsRegion) {
            if (awsRegion == null) {
              throw new MissingRequiredPropertyException("ModelServingConfigServedEntityExternalModelAmazonBedrockConfig", "awsRegion");
            }
            this.awsRegion = awsRegion;
            return this;
        }
        @CustomType.Setter
        public Builder awsSecretAccessKey(String awsSecretAccessKey) {
            if (awsSecretAccessKey == null) {
              throw new MissingRequiredPropertyException("ModelServingConfigServedEntityExternalModelAmazonBedrockConfig", "awsSecretAccessKey");
            }
            this.awsSecretAccessKey = awsSecretAccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder bedrockProvider(String bedrockProvider) {
            if (bedrockProvider == null) {
              throw new MissingRequiredPropertyException("ModelServingConfigServedEntityExternalModelAmazonBedrockConfig", "bedrockProvider");
            }
            this.bedrockProvider = bedrockProvider;
            return this;
        }
        public ModelServingConfigServedEntityExternalModelAmazonBedrockConfig build() {
            final var _resultValue = new ModelServingConfigServedEntityExternalModelAmazonBedrockConfig();
            _resultValue.awsAccessKeyId = awsAccessKeyId;
            _resultValue.awsRegion = awsRegion;
            _resultValue.awsSecretAccessKey = awsSecretAccessKey;
            _resultValue.bedrockProvider = bedrockProvider;
            return _resultValue;
        }
    }
}
