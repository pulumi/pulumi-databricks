// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetAppsSettingsCustomTemplateManifestArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAppsSettingsCustomTemplateArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAppsSettingsCustomTemplateArgs Empty = new GetAppsSettingsCustomTemplateArgs();

    /**
     * (string) - Description of the App Resource
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (string) - Description of the App Resource
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (string) - The Git provider of the template
     * 
     */
    @Import(name="gitProvider", required=true)
    private Output<String> gitProvider;

    /**
     * @return (string) - The Git provider of the template
     * 
     */
    public Output<String> gitProvider() {
        return this.gitProvider;
    }

    /**
     * (string) - The Git repository URL that the template resides in
     * 
     */
    @Import(name="gitRepo", required=true)
    private Output<String> gitRepo;

    /**
     * @return (string) - The Git repository URL that the template resides in
     * 
     */
    public Output<String> gitRepo() {
        return this.gitRepo;
    }

    /**
     * (AppManifest) - The manifest of the template. It defines fields and default values when installing the template
     * 
     */
    @Import(name="manifest", required=true)
    private Output<GetAppsSettingsCustomTemplateManifestArgs> manifest;

    /**
     * @return (AppManifest) - The manifest of the template. It defines fields and default values when installing the template
     * 
     */
    public Output<GetAppsSettingsCustomTemplateManifestArgs> manifest() {
        return this.manifest;
    }

    /**
     * The name of the template. It must contain only alphanumeric characters, hyphens, underscores, and whitespaces.
     * It must be unique within the workspace
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the template. It must contain only alphanumeric characters, hyphens, underscores, and whitespaces.
     * It must be unique within the workspace
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * (string) - The path to the template within the Git repository
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return (string) - The path to the template within the Git repository
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Workspace ID of the resource
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private GetAppsSettingsCustomTemplateArgs() {}

    private GetAppsSettingsCustomTemplateArgs(GetAppsSettingsCustomTemplateArgs $) {
        this.description = $.description;
        this.gitProvider = $.gitProvider;
        this.gitRepo = $.gitRepo;
        this.manifest = $.manifest;
        this.name = $.name;
        this.path = $.path;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAppsSettingsCustomTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAppsSettingsCustomTemplateArgs $;

        public Builder() {
            $ = new GetAppsSettingsCustomTemplateArgs();
        }

        public Builder(GetAppsSettingsCustomTemplateArgs defaults) {
            $ = new GetAppsSettingsCustomTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description (string) - Description of the App Resource
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (string) - Description of the App Resource
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param gitProvider (string) - The Git provider of the template
         * 
         * @return builder
         * 
         */
        public Builder gitProvider(Output<String> gitProvider) {
            $.gitProvider = gitProvider;
            return this;
        }

        /**
         * @param gitProvider (string) - The Git provider of the template
         * 
         * @return builder
         * 
         */
        public Builder gitProvider(String gitProvider) {
            return gitProvider(Output.of(gitProvider));
        }

        /**
         * @param gitRepo (string) - The Git repository URL that the template resides in
         * 
         * @return builder
         * 
         */
        public Builder gitRepo(Output<String> gitRepo) {
            $.gitRepo = gitRepo;
            return this;
        }

        /**
         * @param gitRepo (string) - The Git repository URL that the template resides in
         * 
         * @return builder
         * 
         */
        public Builder gitRepo(String gitRepo) {
            return gitRepo(Output.of(gitRepo));
        }

        /**
         * @param manifest (AppManifest) - The manifest of the template. It defines fields and default values when installing the template
         * 
         * @return builder
         * 
         */
        public Builder manifest(Output<GetAppsSettingsCustomTemplateManifestArgs> manifest) {
            $.manifest = manifest;
            return this;
        }

        /**
         * @param manifest (AppManifest) - The manifest of the template. It defines fields and default values when installing the template
         * 
         * @return builder
         * 
         */
        public Builder manifest(GetAppsSettingsCustomTemplateManifestArgs manifest) {
            return manifest(Output.of(manifest));
        }

        /**
         * @param name The name of the template. It must contain only alphanumeric characters, hyphens, underscores, and whitespaces.
         * It must be unique within the workspace
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the template. It must contain only alphanumeric characters, hyphens, underscores, and whitespaces.
         * It must be unique within the workspace
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param path (string) - The path to the template within the Git repository
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path (string) - The path to the template within the Git repository
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public GetAppsSettingsCustomTemplateArgs build() {
            if ($.gitProvider == null) {
                throw new MissingRequiredPropertyException("GetAppsSettingsCustomTemplateArgs", "gitProvider");
            }
            if ($.gitRepo == null) {
                throw new MissingRequiredPropertyException("GetAppsSettingsCustomTemplateArgs", "gitRepo");
            }
            if ($.manifest == null) {
                throw new MissingRequiredPropertyException("GetAppsSettingsCustomTemplateArgs", "manifest");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetAppsSettingsCustomTemplateArgs", "name");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("GetAppsSettingsCustomTemplateArgs", "path");
            }
            return $;
        }
    }

}
