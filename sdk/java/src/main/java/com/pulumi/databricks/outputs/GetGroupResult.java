// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGroupResult {
    /**
     * @return identifier for use in databricks_access_control_rule_set, e.g. `groups/Some Group`.
     * 
     */
    private String aclPrincipalId;
    /**
     * @return True if group members can create clusters
     * 
     */
    private @Nullable Boolean allowClusterCreate;
    /**
     * @return True if group members can create instance pools
     * 
     */
    private @Nullable Boolean allowInstancePoolCreate;
    /**
     * @return Set of databricks.Group identifiers, that can be modified with databricks.GroupMember resource.
     * 
     */
    private List<String> childGroups;
    private @Nullable Boolean databricksSqlAccess;
    private String displayName;
    /**
     * @return ID of the group in an external identity provider.
     * 
     */
    private String externalId;
    /**
     * @return Set of group identifiers, that can be modified with databricks.GroupMember resource.
     * 
     */
    private List<String> groups;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Set of instance profile ARNs, that can be modified by databricks.GroupInstanceProfile resource.
     * 
     */
    private List<String> instanceProfiles;
    /**
     * @deprecated
     * Please use `users`, `service_principals`, and `child_groups` instead
     * 
     */
    @Deprecated /* Please use `users`, `service_principals`, and `child_groups` instead */
    private List<String> members;
    private @Nullable Boolean recursive;
    /**
     * @return Set of databricks.ServicePrincipal identifiers, that can be modified with databricks.GroupMember resource.
     * 
     */
    private List<String> servicePrincipals;
    /**
     * @return Set of databricks.User identifiers, that can be modified with databricks.GroupMember resource.
     * 
     */
    private List<String> users;
    private @Nullable Boolean workspaceAccess;

    private GetGroupResult() {}
    /**
     * @return identifier for use in databricks_access_control_rule_set, e.g. `groups/Some Group`.
     * 
     */
    public String aclPrincipalId() {
        return this.aclPrincipalId;
    }
    /**
     * @return True if group members can create clusters
     * 
     */
    public Optional<Boolean> allowClusterCreate() {
        return Optional.ofNullable(this.allowClusterCreate);
    }
    /**
     * @return True if group members can create instance pools
     * 
     */
    public Optional<Boolean> allowInstancePoolCreate() {
        return Optional.ofNullable(this.allowInstancePoolCreate);
    }
    /**
     * @return Set of databricks.Group identifiers, that can be modified with databricks.GroupMember resource.
     * 
     */
    public List<String> childGroups() {
        return this.childGroups;
    }
    public Optional<Boolean> databricksSqlAccess() {
        return Optional.ofNullable(this.databricksSqlAccess);
    }
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return ID of the group in an external identity provider.
     * 
     */
    public String externalId() {
        return this.externalId;
    }
    /**
     * @return Set of group identifiers, that can be modified with databricks.GroupMember resource.
     * 
     */
    public List<String> groups() {
        return this.groups;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set of instance profile ARNs, that can be modified by databricks.GroupInstanceProfile resource.
     * 
     */
    public List<String> instanceProfiles() {
        return this.instanceProfiles;
    }
    /**
     * @deprecated
     * Please use `users`, `service_principals`, and `child_groups` instead
     * 
     */
    @Deprecated /* Please use `users`, `service_principals`, and `child_groups` instead */
    public List<String> members() {
        return this.members;
    }
    public Optional<Boolean> recursive() {
        return Optional.ofNullable(this.recursive);
    }
    /**
     * @return Set of databricks.ServicePrincipal identifiers, that can be modified with databricks.GroupMember resource.
     * 
     */
    public List<String> servicePrincipals() {
        return this.servicePrincipals;
    }
    /**
     * @return Set of databricks.User identifiers, that can be modified with databricks.GroupMember resource.
     * 
     */
    public List<String> users() {
        return this.users;
    }
    public Optional<Boolean> workspaceAccess() {
        return Optional.ofNullable(this.workspaceAccess);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aclPrincipalId;
        private @Nullable Boolean allowClusterCreate;
        private @Nullable Boolean allowInstancePoolCreate;
        private List<String> childGroups;
        private @Nullable Boolean databricksSqlAccess;
        private String displayName;
        private String externalId;
        private List<String> groups;
        private String id;
        private List<String> instanceProfiles;
        private List<String> members;
        private @Nullable Boolean recursive;
        private List<String> servicePrincipals;
        private List<String> users;
        private @Nullable Boolean workspaceAccess;
        public Builder() {}
        public Builder(GetGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclPrincipalId = defaults.aclPrincipalId;
    	      this.allowClusterCreate = defaults.allowClusterCreate;
    	      this.allowInstancePoolCreate = defaults.allowInstancePoolCreate;
    	      this.childGroups = defaults.childGroups;
    	      this.databricksSqlAccess = defaults.databricksSqlAccess;
    	      this.displayName = defaults.displayName;
    	      this.externalId = defaults.externalId;
    	      this.groups = defaults.groups;
    	      this.id = defaults.id;
    	      this.instanceProfiles = defaults.instanceProfiles;
    	      this.members = defaults.members;
    	      this.recursive = defaults.recursive;
    	      this.servicePrincipals = defaults.servicePrincipals;
    	      this.users = defaults.users;
    	      this.workspaceAccess = defaults.workspaceAccess;
        }

        @CustomType.Setter
        public Builder aclPrincipalId(String aclPrincipalId) {
            if (aclPrincipalId == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "aclPrincipalId");
            }
            this.aclPrincipalId = aclPrincipalId;
            return this;
        }
        @CustomType.Setter
        public Builder allowClusterCreate(@Nullable Boolean allowClusterCreate) {

            this.allowClusterCreate = allowClusterCreate;
            return this;
        }
        @CustomType.Setter
        public Builder allowInstancePoolCreate(@Nullable Boolean allowInstancePoolCreate) {

            this.allowInstancePoolCreate = allowInstancePoolCreate;
            return this;
        }
        @CustomType.Setter
        public Builder childGroups(List<String> childGroups) {
            if (childGroups == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "childGroups");
            }
            this.childGroups = childGroups;
            return this;
        }
        public Builder childGroups(String... childGroups) {
            return childGroups(List.of(childGroups));
        }
        @CustomType.Setter
        public Builder databricksSqlAccess(@Nullable Boolean databricksSqlAccess) {

            this.databricksSqlAccess = databricksSqlAccess;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder externalId(String externalId) {
            if (externalId == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "externalId");
            }
            this.externalId = externalId;
            return this;
        }
        @CustomType.Setter
        public Builder groups(List<String> groups) {
            if (groups == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "groups");
            }
            this.groups = groups;
            return this;
        }
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceProfiles(List<String> instanceProfiles) {
            if (instanceProfiles == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "instanceProfiles");
            }
            this.instanceProfiles = instanceProfiles;
            return this;
        }
        public Builder instanceProfiles(String... instanceProfiles) {
            return instanceProfiles(List.of(instanceProfiles));
        }
        @CustomType.Setter
        public Builder members(List<String> members) {
            if (members == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "members");
            }
            this.members = members;
            return this;
        }
        public Builder members(String... members) {
            return members(List.of(members));
        }
        @CustomType.Setter
        public Builder recursive(@Nullable Boolean recursive) {

            this.recursive = recursive;
            return this;
        }
        @CustomType.Setter
        public Builder servicePrincipals(List<String> servicePrincipals) {
            if (servicePrincipals == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "servicePrincipals");
            }
            this.servicePrincipals = servicePrincipals;
            return this;
        }
        public Builder servicePrincipals(String... servicePrincipals) {
            return servicePrincipals(List.of(servicePrincipals));
        }
        @CustomType.Setter
        public Builder users(List<String> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(String... users) {
            return users(List.of(users));
        }
        @CustomType.Setter
        public Builder workspaceAccess(@Nullable Boolean workspaceAccess) {

            this.workspaceAccess = workspaceAccess;
            return this;
        }
        public GetGroupResult build() {
            final var _resultValue = new GetGroupResult();
            _resultValue.aclPrincipalId = aclPrincipalId;
            _resultValue.allowClusterCreate = allowClusterCreate;
            _resultValue.allowInstancePoolCreate = allowInstancePoolCreate;
            _resultValue.childGroups = childGroups;
            _resultValue.databricksSqlAccess = databricksSqlAccess;
            _resultValue.displayName = displayName;
            _resultValue.externalId = externalId;
            _resultValue.groups = groups;
            _resultValue.id = id;
            _resultValue.instanceProfiles = instanceProfiles;
            _resultValue.members = members;
            _resultValue.recursive = recursive;
            _resultValue.servicePrincipals = servicePrincipals;
            _resultValue.users = users;
            _resultValue.workspaceAccess = workspaceAccess;
            return _resultValue;
        }
    }
}
