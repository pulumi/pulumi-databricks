// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetSqlWarehouseChannel;
import com.pulumi.databricks.inputs.GetSqlWarehouseHealth;
import com.pulumi.databricks.inputs.GetSqlWarehouseOdbcParams;
import com.pulumi.databricks.inputs.GetSqlWarehouseTags;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSqlWarehousePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSqlWarehousePlainArgs Empty = new GetSqlWarehousePlainArgs();

    /**
     * Time in minutes until an idle SQL warehouse terminates all clusters and stops.
     * 
     */
    @Import(name="autoStopMins")
    private @Nullable Integer autoStopMins;

    /**
     * @return Time in minutes until an idle SQL warehouse terminates all clusters and stops.
     * 
     */
    public Optional<Integer> autoStopMins() {
        return Optional.ofNullable(this.autoStopMins);
    }

    /**
     * block, consisting of following fields:
     * 
     */
    @Import(name="channel")
    private @Nullable GetSqlWarehouseChannel channel;

    /**
     * @return block, consisting of following fields:
     * 
     */
    public Optional<GetSqlWarehouseChannel> channel() {
        return Optional.ofNullable(this.channel);
    }

    /**
     * The size of the clusters allocated to the warehouse: &#34;2X-Small&#34;, &#34;X-Small&#34;, &#34;Small&#34;, &#34;Medium&#34;, &#34;Large&#34;, &#34;X-Large&#34;, &#34;2X-Large&#34;, &#34;3X-Large&#34;, &#34;4X-Large&#34;.
     * 
     */
    @Import(name="clusterSize")
    private @Nullable String clusterSize;

    /**
     * @return The size of the clusters allocated to the warehouse: &#34;2X-Small&#34;, &#34;X-Small&#34;, &#34;Small&#34;, &#34;Medium&#34;, &#34;Large&#34;, &#34;X-Large&#34;, &#34;2X-Large&#34;, &#34;3X-Large&#34;, &#34;4X-Large&#34;.
     * 
     */
    public Optional<String> clusterSize() {
        return Optional.ofNullable(this.clusterSize);
    }

    /**
     * The username of the user who created the endpoint.
     * 
     */
    @Import(name="creatorName")
    private @Nullable String creatorName;

    /**
     * @return The username of the user who created the endpoint.
     * 
     */
    public Optional<String> creatorName() {
        return Optional.ofNullable(this.creatorName);
    }

    /**
     * ID of the data source for this warehouse. This is used to bind an Databricks SQL query to an warehouse.
     * 
     */
    @Import(name="dataSourceId")
    private @Nullable String dataSourceId;

    /**
     * @return ID of the data source for this warehouse. This is used to bind an Databricks SQL query to an warehouse.
     * 
     */
    public Optional<String> dataSourceId() {
        return Optional.ofNullable(this.dataSourceId);
    }

    /**
     * Whether [Photon](https://databricks.com/product/delta-engine) is enabled.
     * 
     */
    @Import(name="enablePhoton")
    private @Nullable Boolean enablePhoton;

    /**
     * @return Whether [Photon](https://databricks.com/product/delta-engine) is enabled.
     * 
     */
    public Optional<Boolean> enablePhoton() {
        return Optional.ofNullable(this.enablePhoton);
    }

    /**
     * Whether this SQL warehouse is a serverless SQL warehouse.
     * 
     */
    @Import(name="enableServerlessCompute")
    private @Nullable Boolean enableServerlessCompute;

    /**
     * @return Whether this SQL warehouse is a serverless SQL warehouse.
     * 
     */
    public Optional<Boolean> enableServerlessCompute() {
        return Optional.ofNullable(this.enableServerlessCompute);
    }

    /**
     * Health status of the endpoint.
     * 
     */
    @Import(name="health")
    private @Nullable GetSqlWarehouseHealth health;

    /**
     * @return Health status of the endpoint.
     * 
     */
    public Optional<GetSqlWarehouseHealth> health() {
        return Optional.ofNullable(this.health);
    }

    /**
     * The ID of the SQL warehouse.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return The ID of the SQL warehouse.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="instanceProfileArn")
    private @Nullable String instanceProfileArn;

    public Optional<String> instanceProfileArn() {
        return Optional.ofNullable(this.instanceProfileArn);
    }

    /**
     * JDBC connection string.
     * 
     */
    @Import(name="jdbcUrl")
    private @Nullable String jdbcUrl;

    /**
     * @return JDBC connection string.
     * 
     */
    public Optional<String> jdbcUrl() {
        return Optional.ofNullable(this.jdbcUrl);
    }

    /**
     * Maximum number of clusters available when a SQL warehouse is running.
     * 
     */
    @Import(name="maxNumClusters")
    private @Nullable Integer maxNumClusters;

    /**
     * @return Maximum number of clusters available when a SQL warehouse is running.
     * 
     */
    public Optional<Integer> maxNumClusters() {
        return Optional.ofNullable(this.maxNumClusters);
    }

    /**
     * Minimum number of clusters available when a SQL warehouse is running.
     * 
     */
    @Import(name="minNumClusters")
    private @Nullable Integer minNumClusters;

    /**
     * @return Minimum number of clusters available when a SQL warehouse is running.
     * 
     */
    public Optional<Integer> minNumClusters() {
        return Optional.ofNullable(this.minNumClusters);
    }

    /**
     * Name of the SQL warehouse to search (case-sensitive).
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the SQL warehouse to search (case-sensitive).
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The current number of clusters used by the endpoint.
     * 
     */
    @Import(name="numActiveSessions")
    private @Nullable Integer numActiveSessions;

    /**
     * @return The current number of clusters used by the endpoint.
     * 
     */
    public Optional<Integer> numActiveSessions() {
        return Optional.ofNullable(this.numActiveSessions);
    }

    /**
     * The current number of clusters used by the endpoint.
     * 
     */
    @Import(name="numClusters")
    private @Nullable Integer numClusters;

    /**
     * @return The current number of clusters used by the endpoint.
     * 
     */
    public Optional<Integer> numClusters() {
        return Optional.ofNullable(this.numClusters);
    }

    /**
     * ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
     * 
     */
    @Import(name="odbcParams")
    private @Nullable GetSqlWarehouseOdbcParams odbcParams;

    /**
     * @return ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
     * 
     */
    public Optional<GetSqlWarehouseOdbcParams> odbcParams() {
        return Optional.ofNullable(this.odbcParams);
    }

    /**
     * The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`.
     * 
     */
    @Import(name="spotInstancePolicy")
    private @Nullable String spotInstancePolicy;

    /**
     * @return The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`.
     * 
     */
    public Optional<String> spotInstancePolicy() {
        return Optional.ofNullable(this.spotInstancePolicy);
    }

    /**
     * The current state of the endpoint.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return The current state of the endpoint.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * tags used for SQL warehouse resources.
     * 
     */
    @Import(name="tags")
    private @Nullable GetSqlWarehouseTags tags;

    /**
     * @return tags used for SQL warehouse resources.
     * 
     */
    public Optional<GetSqlWarehouseTags> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * SQL warehouse type. See for [AWS](https://docs.databricks.com/sql/index.html#warehouse-types) or [Azure](https://learn.microsoft.com/azure/databricks/sql/#warehouse-types).
     * 
     */
    @Import(name="warehouseType")
    private @Nullable String warehouseType;

    /**
     * @return SQL warehouse type. See for [AWS](https://docs.databricks.com/sql/index.html#warehouse-types) or [Azure](https://learn.microsoft.com/azure/databricks/sql/#warehouse-types).
     * 
     */
    public Optional<String> warehouseType() {
        return Optional.ofNullable(this.warehouseType);
    }

    private GetSqlWarehousePlainArgs() {}

    private GetSqlWarehousePlainArgs(GetSqlWarehousePlainArgs $) {
        this.autoStopMins = $.autoStopMins;
        this.channel = $.channel;
        this.clusterSize = $.clusterSize;
        this.creatorName = $.creatorName;
        this.dataSourceId = $.dataSourceId;
        this.enablePhoton = $.enablePhoton;
        this.enableServerlessCompute = $.enableServerlessCompute;
        this.health = $.health;
        this.id = $.id;
        this.instanceProfileArn = $.instanceProfileArn;
        this.jdbcUrl = $.jdbcUrl;
        this.maxNumClusters = $.maxNumClusters;
        this.minNumClusters = $.minNumClusters;
        this.name = $.name;
        this.numActiveSessions = $.numActiveSessions;
        this.numClusters = $.numClusters;
        this.odbcParams = $.odbcParams;
        this.spotInstancePolicy = $.spotInstancePolicy;
        this.state = $.state;
        this.tags = $.tags;
        this.warehouseType = $.warehouseType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSqlWarehousePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSqlWarehousePlainArgs $;

        public Builder() {
            $ = new GetSqlWarehousePlainArgs();
        }

        public Builder(GetSqlWarehousePlainArgs defaults) {
            $ = new GetSqlWarehousePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoStopMins Time in minutes until an idle SQL warehouse terminates all clusters and stops.
         * 
         * @return builder
         * 
         */
        public Builder autoStopMins(@Nullable Integer autoStopMins) {
            $.autoStopMins = autoStopMins;
            return this;
        }

        /**
         * @param channel block, consisting of following fields:
         * 
         * @return builder
         * 
         */
        public Builder channel(@Nullable GetSqlWarehouseChannel channel) {
            $.channel = channel;
            return this;
        }

        /**
         * @param clusterSize The size of the clusters allocated to the warehouse: &#34;2X-Small&#34;, &#34;X-Small&#34;, &#34;Small&#34;, &#34;Medium&#34;, &#34;Large&#34;, &#34;X-Large&#34;, &#34;2X-Large&#34;, &#34;3X-Large&#34;, &#34;4X-Large&#34;.
         * 
         * @return builder
         * 
         */
        public Builder clusterSize(@Nullable String clusterSize) {
            $.clusterSize = clusterSize;
            return this;
        }

        /**
         * @param creatorName The username of the user who created the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder creatorName(@Nullable String creatorName) {
            $.creatorName = creatorName;
            return this;
        }

        /**
         * @param dataSourceId ID of the data source for this warehouse. This is used to bind an Databricks SQL query to an warehouse.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(@Nullable String dataSourceId) {
            $.dataSourceId = dataSourceId;
            return this;
        }

        /**
         * @param enablePhoton Whether [Photon](https://databricks.com/product/delta-engine) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enablePhoton(@Nullable Boolean enablePhoton) {
            $.enablePhoton = enablePhoton;
            return this;
        }

        /**
         * @param enableServerlessCompute Whether this SQL warehouse is a serverless SQL warehouse.
         * 
         * @return builder
         * 
         */
        public Builder enableServerlessCompute(@Nullable Boolean enableServerlessCompute) {
            $.enableServerlessCompute = enableServerlessCompute;
            return this;
        }

        /**
         * @param health Health status of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder health(@Nullable GetSqlWarehouseHealth health) {
            $.health = health;
            return this;
        }

        /**
         * @param id The ID of the SQL warehouse.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder instanceProfileArn(@Nullable String instanceProfileArn) {
            $.instanceProfileArn = instanceProfileArn;
            return this;
        }

        /**
         * @param jdbcUrl JDBC connection string.
         * 
         * @return builder
         * 
         */
        public Builder jdbcUrl(@Nullable String jdbcUrl) {
            $.jdbcUrl = jdbcUrl;
            return this;
        }

        /**
         * @param maxNumClusters Maximum number of clusters available when a SQL warehouse is running.
         * 
         * @return builder
         * 
         */
        public Builder maxNumClusters(@Nullable Integer maxNumClusters) {
            $.maxNumClusters = maxNumClusters;
            return this;
        }

        /**
         * @param minNumClusters Minimum number of clusters available when a SQL warehouse is running.
         * 
         * @return builder
         * 
         */
        public Builder minNumClusters(@Nullable Integer minNumClusters) {
            $.minNumClusters = minNumClusters;
            return this;
        }

        /**
         * @param name Name of the SQL warehouse to search (case-sensitive).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param numActiveSessions The current number of clusters used by the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder numActiveSessions(@Nullable Integer numActiveSessions) {
            $.numActiveSessions = numActiveSessions;
            return this;
        }

        /**
         * @param numClusters The current number of clusters used by the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder numClusters(@Nullable Integer numClusters) {
            $.numClusters = numClusters;
            return this;
        }

        /**
         * @param odbcParams ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
         * 
         * @return builder
         * 
         */
        public Builder odbcParams(@Nullable GetSqlWarehouseOdbcParams odbcParams) {
            $.odbcParams = odbcParams;
            return this;
        }

        /**
         * @param spotInstancePolicy The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`.
         * 
         * @return builder
         * 
         */
        public Builder spotInstancePolicy(@Nullable String spotInstancePolicy) {
            $.spotInstancePolicy = spotInstancePolicy;
            return this;
        }

        /**
         * @param state The current state of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param tags tags used for SQL warehouse resources.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable GetSqlWarehouseTags tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param warehouseType SQL warehouse type. See for [AWS](https://docs.databricks.com/sql/index.html#warehouse-types) or [Azure](https://learn.microsoft.com/azure/databricks/sql/#warehouse-types).
         * 
         * @return builder
         * 
         */
        public Builder warehouseType(@Nullable String warehouseType) {
            $.warehouseType = warehouseType;
            return this;
        }

        public GetSqlWarehousePlainArgs build() {
            return $;
        }
    }

}
