// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetFunctionsFunctionInputParam;
import com.pulumi.databricks.inputs.GetFunctionsFunctionReturnParam;
import com.pulumi.databricks.inputs.GetFunctionsFunctionRoutineDependency;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFunctionsFunction extends com.pulumi.resources.InvokeArgs {

    public static final GetFunctionsFunction Empty = new GetFunctionsFunction();

    @Import(name="browseOnly")
    private @Nullable Boolean browseOnly;

    public Optional<Boolean> browseOnly() {
        return Optional.ofNullable(this.browseOnly);
    }

    @Import(name="catalogName")
    private @Nullable String catalogName;

    public Optional<String> catalogName() {
        return Optional.ofNullable(this.catalogName);
    }

    @Import(name="comment")
    private @Nullable String comment;

    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="createdAt")
    private @Nullable Integer createdAt;

    public Optional<Integer> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="createdBy")
    private @Nullable String createdBy;

    public Optional<String> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    @Import(name="dataType")
    private @Nullable String dataType;

    public Optional<String> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    @Import(name="externalLanguage")
    private @Nullable String externalLanguage;

    public Optional<String> externalLanguage() {
        return Optional.ofNullable(this.externalLanguage);
    }

    @Import(name="externalName")
    private @Nullable String externalName;

    public Optional<String> externalName() {
        return Optional.ofNullable(this.externalName);
    }

    @Import(name="fullDataType")
    private @Nullable String fullDataType;

    public Optional<String> fullDataType() {
        return Optional.ofNullable(this.fullDataType);
    }

    @Import(name="fullName")
    private @Nullable String fullName;

    public Optional<String> fullName() {
        return Optional.ofNullable(this.fullName);
    }

    @Import(name="functionId")
    private @Nullable String functionId;

    public Optional<String> functionId() {
        return Optional.ofNullable(this.functionId);
    }

    @Import(name="inputParams")
    private @Nullable List<GetFunctionsFunctionInputParam> inputParams;

    public Optional<List<GetFunctionsFunctionInputParam>> inputParams() {
        return Optional.ofNullable(this.inputParams);
    }

    @Import(name="isDeterministic")
    private @Nullable Boolean isDeterministic;

    public Optional<Boolean> isDeterministic() {
        return Optional.ofNullable(this.isDeterministic);
    }

    @Import(name="isNullCall")
    private @Nullable Boolean isNullCall;

    public Optional<Boolean> isNullCall() {
        return Optional.ofNullable(this.isNullCall);
    }

    @Import(name="metastoreId")
    private @Nullable String metastoreId;

    public Optional<String> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }

    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="owner")
    private @Nullable String owner;

    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="parameterStyle")
    private @Nullable String parameterStyle;

    public Optional<String> parameterStyle() {
        return Optional.ofNullable(this.parameterStyle);
    }

    @Import(name="properties")
    private @Nullable String properties;

    public Optional<String> properties() {
        return Optional.ofNullable(this.properties);
    }

    @Import(name="returnParams")
    private @Nullable List<GetFunctionsFunctionReturnParam> returnParams;

    public Optional<List<GetFunctionsFunctionReturnParam>> returnParams() {
        return Optional.ofNullable(this.returnParams);
    }

    @Import(name="routineBody")
    private @Nullable String routineBody;

    public Optional<String> routineBody() {
        return Optional.ofNullable(this.routineBody);
    }

    @Import(name="routineDefinition")
    private @Nullable String routineDefinition;

    public Optional<String> routineDefinition() {
        return Optional.ofNullable(this.routineDefinition);
    }

    @Import(name="routineDependencies")
    private @Nullable List<GetFunctionsFunctionRoutineDependency> routineDependencies;

    public Optional<List<GetFunctionsFunctionRoutineDependency>> routineDependencies() {
        return Optional.ofNullable(this.routineDependencies);
    }

    @Import(name="schemaName")
    private @Nullable String schemaName;

    public Optional<String> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    @Import(name="securityType")
    private @Nullable String securityType;

    public Optional<String> securityType() {
        return Optional.ofNullable(this.securityType);
    }

    @Import(name="specificName")
    private @Nullable String specificName;

    public Optional<String> specificName() {
        return Optional.ofNullable(this.specificName);
    }

    @Import(name="sqlDataAccess")
    private @Nullable String sqlDataAccess;

    public Optional<String> sqlDataAccess() {
        return Optional.ofNullable(this.sqlDataAccess);
    }

    @Import(name="sqlPath")
    private @Nullable String sqlPath;

    public Optional<String> sqlPath() {
        return Optional.ofNullable(this.sqlPath);
    }

    @Import(name="updatedAt")
    private @Nullable Integer updatedAt;

    public Optional<Integer> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    @Import(name="updatedBy")
    private @Nullable String updatedBy;

    public Optional<String> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    private GetFunctionsFunction() {}

    private GetFunctionsFunction(GetFunctionsFunction $) {
        this.browseOnly = $.browseOnly;
        this.catalogName = $.catalogName;
        this.comment = $.comment;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.dataType = $.dataType;
        this.externalLanguage = $.externalLanguage;
        this.externalName = $.externalName;
        this.fullDataType = $.fullDataType;
        this.fullName = $.fullName;
        this.functionId = $.functionId;
        this.inputParams = $.inputParams;
        this.isDeterministic = $.isDeterministic;
        this.isNullCall = $.isNullCall;
        this.metastoreId = $.metastoreId;
        this.name = $.name;
        this.owner = $.owner;
        this.parameterStyle = $.parameterStyle;
        this.properties = $.properties;
        this.returnParams = $.returnParams;
        this.routineBody = $.routineBody;
        this.routineDefinition = $.routineDefinition;
        this.routineDependencies = $.routineDependencies;
        this.schemaName = $.schemaName;
        this.securityType = $.securityType;
        this.specificName = $.specificName;
        this.sqlDataAccess = $.sqlDataAccess;
        this.sqlPath = $.sqlPath;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFunctionsFunction defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFunctionsFunction $;

        public Builder() {
            $ = new GetFunctionsFunction();
        }

        public Builder(GetFunctionsFunction defaults) {
            $ = new GetFunctionsFunction(Objects.requireNonNull(defaults));
        }

        public Builder browseOnly(@Nullable Boolean browseOnly) {
            $.browseOnly = browseOnly;
            return this;
        }

        public Builder catalogName(@Nullable String catalogName) {
            $.catalogName = catalogName;
            return this;
        }

        public Builder comment(@Nullable String comment) {
            $.comment = comment;
            return this;
        }

        public Builder createdAt(@Nullable Integer createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdBy(@Nullable String createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        public Builder dataType(@Nullable String dataType) {
            $.dataType = dataType;
            return this;
        }

        public Builder externalLanguage(@Nullable String externalLanguage) {
            $.externalLanguage = externalLanguage;
            return this;
        }

        public Builder externalName(@Nullable String externalName) {
            $.externalName = externalName;
            return this;
        }

        public Builder fullDataType(@Nullable String fullDataType) {
            $.fullDataType = fullDataType;
            return this;
        }

        public Builder fullName(@Nullable String fullName) {
            $.fullName = fullName;
            return this;
        }

        public Builder functionId(@Nullable String functionId) {
            $.functionId = functionId;
            return this;
        }

        public Builder inputParams(@Nullable List<GetFunctionsFunctionInputParam> inputParams) {
            $.inputParams = inputParams;
            return this;
        }

        public Builder inputParams(GetFunctionsFunctionInputParam... inputParams) {
            return inputParams(List.of(inputParams));
        }

        public Builder isDeterministic(@Nullable Boolean isDeterministic) {
            $.isDeterministic = isDeterministic;
            return this;
        }

        public Builder isNullCall(@Nullable Boolean isNullCall) {
            $.isNullCall = isNullCall;
            return this;
        }

        public Builder metastoreId(@Nullable String metastoreId) {
            $.metastoreId = metastoreId;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder owner(@Nullable String owner) {
            $.owner = owner;
            return this;
        }

        public Builder parameterStyle(@Nullable String parameterStyle) {
            $.parameterStyle = parameterStyle;
            return this;
        }

        public Builder properties(@Nullable String properties) {
            $.properties = properties;
            return this;
        }

        public Builder returnParams(@Nullable List<GetFunctionsFunctionReturnParam> returnParams) {
            $.returnParams = returnParams;
            return this;
        }

        public Builder returnParams(GetFunctionsFunctionReturnParam... returnParams) {
            return returnParams(List.of(returnParams));
        }

        public Builder routineBody(@Nullable String routineBody) {
            $.routineBody = routineBody;
            return this;
        }

        public Builder routineDefinition(@Nullable String routineDefinition) {
            $.routineDefinition = routineDefinition;
            return this;
        }

        public Builder routineDependencies(@Nullable List<GetFunctionsFunctionRoutineDependency> routineDependencies) {
            $.routineDependencies = routineDependencies;
            return this;
        }

        public Builder routineDependencies(GetFunctionsFunctionRoutineDependency... routineDependencies) {
            return routineDependencies(List.of(routineDependencies));
        }

        public Builder schemaName(@Nullable String schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder securityType(@Nullable String securityType) {
            $.securityType = securityType;
            return this;
        }

        public Builder specificName(@Nullable String specificName) {
            $.specificName = specificName;
            return this;
        }

        public Builder sqlDataAccess(@Nullable String sqlDataAccess) {
            $.sqlDataAccess = sqlDataAccess;
            return this;
        }

        public Builder sqlPath(@Nullable String sqlPath) {
            $.sqlPath = sqlPath;
            return this;
        }

        public Builder updatedAt(@Nullable Integer updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedBy(@Nullable String updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        public GetFunctionsFunction build() {
            return $;
        }
    }

}
