// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetSqlWarehouseChannel;
import com.pulumi.databricks.outputs.GetSqlWarehouseOdbcParams;
import com.pulumi.databricks.outputs.GetSqlWarehouseTags;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSqlWarehouseResult {
    /**
     * @return Time in minutes until an idle SQL warehouse terminates all clusters and stops.
     * 
     */
    private Integer autoStopMins;
    /**
     * @return block, consisting of following fields:
     * 
     */
    private GetSqlWarehouseChannel channel;
    /**
     * @return The size of the clusters allocated to the warehouse: &#34;2X-Small&#34;, &#34;X-Small&#34;, &#34;Small&#34;, &#34;Medium&#34;, &#34;Large&#34;, &#34;X-Large&#34;, &#34;2X-Large&#34;, &#34;3X-Large&#34;, &#34;4X-Large&#34;.
     * 
     */
    private String clusterSize;
    /**
     * @return ID of the data source for this warehouse. This is used to bind an Databricks SQL query to an warehouse.
     * 
     */
    private String dataSourceId;
    /**
     * @return Whether [Photon](https://databricks.com/product/delta-engine) is enabled.
     * 
     */
    private Boolean enablePhoton;
    /**
     * @return Whether this SQL warehouse is a serverless SQL warehouse.
     * 
     */
    private Boolean enableServerlessCompute;
    /**
     * @return The ID of the SQL warehouse.
     * 
     */
    private String id;
    private String instanceProfileArn;
    /**
     * @return JDBC connection string.
     * 
     */
    private String jdbcUrl;
    /**
     * @return Maximum number of clusters available when a SQL warehouse is running.
     * 
     */
    private Integer maxNumClusters;
    /**
     * @return Minimum number of clusters available when a SQL warehouse is running.
     * 
     */
    private Integer minNumClusters;
    /**
     * @return Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
     * 
     */
    private String name;
    private Integer numClusters;
    /**
     * @return ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
     * 
     */
    private GetSqlWarehouseOdbcParams odbcParams;
    /**
     * @return The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`.
     * 
     */
    private String spotInstancePolicy;
    private String state;
    /**
     * @return tags used for SQL warehouse resources.
     * 
     */
    private GetSqlWarehouseTags tags;

    private GetSqlWarehouseResult() {}
    /**
     * @return Time in minutes until an idle SQL warehouse terminates all clusters and stops.
     * 
     */
    public Integer autoStopMins() {
        return this.autoStopMins;
    }
    /**
     * @return block, consisting of following fields:
     * 
     */
    public GetSqlWarehouseChannel channel() {
        return this.channel;
    }
    /**
     * @return The size of the clusters allocated to the warehouse: &#34;2X-Small&#34;, &#34;X-Small&#34;, &#34;Small&#34;, &#34;Medium&#34;, &#34;Large&#34;, &#34;X-Large&#34;, &#34;2X-Large&#34;, &#34;3X-Large&#34;, &#34;4X-Large&#34;.
     * 
     */
    public String clusterSize() {
        return this.clusterSize;
    }
    /**
     * @return ID of the data source for this warehouse. This is used to bind an Databricks SQL query to an warehouse.
     * 
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }
    /**
     * @return Whether [Photon](https://databricks.com/product/delta-engine) is enabled.
     * 
     */
    public Boolean enablePhoton() {
        return this.enablePhoton;
    }
    /**
     * @return Whether this SQL warehouse is a serverless SQL warehouse.
     * 
     */
    public Boolean enableServerlessCompute() {
        return this.enableServerlessCompute;
    }
    /**
     * @return The ID of the SQL warehouse.
     * 
     */
    public String id() {
        return this.id;
    }
    public String instanceProfileArn() {
        return this.instanceProfileArn;
    }
    /**
     * @return JDBC connection string.
     * 
     */
    public String jdbcUrl() {
        return this.jdbcUrl;
    }
    /**
     * @return Maximum number of clusters available when a SQL warehouse is running.
     * 
     */
    public Integer maxNumClusters() {
        return this.maxNumClusters;
    }
    /**
     * @return Minimum number of clusters available when a SQL warehouse is running.
     * 
     */
    public Integer minNumClusters() {
        return this.minNumClusters;
    }
    /**
     * @return Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
     * 
     */
    public String name() {
        return this.name;
    }
    public Integer numClusters() {
        return this.numClusters;
    }
    /**
     * @return ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
     * 
     */
    public GetSqlWarehouseOdbcParams odbcParams() {
        return this.odbcParams;
    }
    /**
     * @return The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`.
     * 
     */
    public String spotInstancePolicy() {
        return this.spotInstancePolicy;
    }
    public String state() {
        return this.state;
    }
    /**
     * @return tags used for SQL warehouse resources.
     * 
     */
    public GetSqlWarehouseTags tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSqlWarehouseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer autoStopMins;
        private GetSqlWarehouseChannel channel;
        private String clusterSize;
        private String dataSourceId;
        private Boolean enablePhoton;
        private Boolean enableServerlessCompute;
        private String id;
        private String instanceProfileArn;
        private String jdbcUrl;
        private Integer maxNumClusters;
        private Integer minNumClusters;
        private String name;
        private Integer numClusters;
        private GetSqlWarehouseOdbcParams odbcParams;
        private String spotInstancePolicy;
        private String state;
        private GetSqlWarehouseTags tags;
        public Builder() {}
        public Builder(GetSqlWarehouseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoStopMins = defaults.autoStopMins;
    	      this.channel = defaults.channel;
    	      this.clusterSize = defaults.clusterSize;
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.enablePhoton = defaults.enablePhoton;
    	      this.enableServerlessCompute = defaults.enableServerlessCompute;
    	      this.id = defaults.id;
    	      this.instanceProfileArn = defaults.instanceProfileArn;
    	      this.jdbcUrl = defaults.jdbcUrl;
    	      this.maxNumClusters = defaults.maxNumClusters;
    	      this.minNumClusters = defaults.minNumClusters;
    	      this.name = defaults.name;
    	      this.numClusters = defaults.numClusters;
    	      this.odbcParams = defaults.odbcParams;
    	      this.spotInstancePolicy = defaults.spotInstancePolicy;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder autoStopMins(Integer autoStopMins) {
            this.autoStopMins = Objects.requireNonNull(autoStopMins);
            return this;
        }
        @CustomType.Setter
        public Builder channel(GetSqlWarehouseChannel channel) {
            this.channel = Objects.requireNonNull(channel);
            return this;
        }
        @CustomType.Setter
        public Builder clusterSize(String clusterSize) {
            this.clusterSize = Objects.requireNonNull(clusterSize);
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceId(String dataSourceId) {
            this.dataSourceId = Objects.requireNonNull(dataSourceId);
            return this;
        }
        @CustomType.Setter
        public Builder enablePhoton(Boolean enablePhoton) {
            this.enablePhoton = Objects.requireNonNull(enablePhoton);
            return this;
        }
        @CustomType.Setter
        public Builder enableServerlessCompute(Boolean enableServerlessCompute) {
            this.enableServerlessCompute = Objects.requireNonNull(enableServerlessCompute);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instanceProfileArn(String instanceProfileArn) {
            this.instanceProfileArn = Objects.requireNonNull(instanceProfileArn);
            return this;
        }
        @CustomType.Setter
        public Builder jdbcUrl(String jdbcUrl) {
            this.jdbcUrl = Objects.requireNonNull(jdbcUrl);
            return this;
        }
        @CustomType.Setter
        public Builder maxNumClusters(Integer maxNumClusters) {
            this.maxNumClusters = Objects.requireNonNull(maxNumClusters);
            return this;
        }
        @CustomType.Setter
        public Builder minNumClusters(Integer minNumClusters) {
            this.minNumClusters = Objects.requireNonNull(minNumClusters);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder numClusters(Integer numClusters) {
            this.numClusters = Objects.requireNonNull(numClusters);
            return this;
        }
        @CustomType.Setter
        public Builder odbcParams(GetSqlWarehouseOdbcParams odbcParams) {
            this.odbcParams = Objects.requireNonNull(odbcParams);
            return this;
        }
        @CustomType.Setter
        public Builder spotInstancePolicy(String spotInstancePolicy) {
            this.spotInstancePolicy = Objects.requireNonNull(spotInstancePolicy);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder tags(GetSqlWarehouseTags tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public GetSqlWarehouseResult build() {
            final var o = new GetSqlWarehouseResult();
            o.autoStopMins = autoStopMins;
            o.channel = channel;
            o.clusterSize = clusterSize;
            o.dataSourceId = dataSourceId;
            o.enablePhoton = enablePhoton;
            o.enableServerlessCompute = enableServerlessCompute;
            o.id = id;
            o.instanceProfileArn = instanceProfileArn;
            o.jdbcUrl = jdbcUrl;
            o.maxNumClusters = maxNumClusters;
            o.minNumClusters = minNumClusters;
            o.name = name;
            o.numClusters = numClusters;
            o.odbcParams = odbcParams;
            o.spotInstancePolicy = spotInstancePolicy;
            o.state = state;
            o.tags = tags;
            return o;
        }
    }
}
