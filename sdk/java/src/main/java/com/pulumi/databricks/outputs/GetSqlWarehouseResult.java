// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetSqlWarehouseChannel;
import com.pulumi.databricks.outputs.GetSqlWarehouseHealth;
import com.pulumi.databricks.outputs.GetSqlWarehouseOdbcParams;
import com.pulumi.databricks.outputs.GetSqlWarehouseTags;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSqlWarehouseResult {
    /**
     * @return Time in minutes until an idle SQL warehouse terminates all clusters and stops.
     * 
     */
    private Integer autoStopMins;
    /**
     * @return block, consisting of following fields:
     * 
     */
    private GetSqlWarehouseChannel channel;
    /**
     * @return The size of the clusters allocated to the warehouse: &#34;2X-Small&#34;, &#34;X-Small&#34;, &#34;Small&#34;, &#34;Medium&#34;, &#34;Large&#34;, &#34;X-Large&#34;, &#34;2X-Large&#34;, &#34;3X-Large&#34;, &#34;4X-Large&#34;.
     * 
     */
    private String clusterSize;
    /**
     * @return The username of the user who created the endpoint.
     * 
     */
    private String creatorName;
    /**
     * @return ID of the data source for this warehouse. This is used to bind an Databricks SQL query to an warehouse.
     * 
     */
    private String dataSourceId;
    /**
     * @return Whether [Photon](https://databricks.com/product/delta-engine) is enabled.
     * 
     */
    private Boolean enablePhoton;
    /**
     * @return Whether this SQL warehouse is a serverless SQL warehouse.
     * 
     */
    private Boolean enableServerlessCompute;
    /**
     * @return Health status of the endpoint.
     * 
     */
    private GetSqlWarehouseHealth health;
    /**
     * @return The ID of the SQL warehouse.
     * 
     */
    private String id;
    private String instanceProfileArn;
    /**
     * @return JDBC connection string.
     * 
     */
    private String jdbcUrl;
    /**
     * @return Maximum number of clusters available when a SQL warehouse is running.
     * 
     */
    private Integer maxNumClusters;
    /**
     * @return Minimum number of clusters available when a SQL warehouse is running.
     * 
     */
    private Integer minNumClusters;
    /**
     * @return Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
     * 
     */
    private String name;
    /**
     * @return The current number of clusters used by the endpoint.
     * 
     */
    private Integer numActiveSessions;
    /**
     * @return The current number of clusters used by the endpoint.
     * 
     */
    private Integer numClusters;
    /**
     * @return ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
     * 
     */
    private GetSqlWarehouseOdbcParams odbcParams;
    /**
     * @return The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`.
     * 
     */
    private String spotInstancePolicy;
    /**
     * @return The current state of the endpoint.
     * 
     */
    private String state;
    /**
     * @return tags used for SQL warehouse resources.
     * 
     */
    private GetSqlWarehouseTags tags;
    /**
     * @return SQL warehouse type. See for [AWS](https://docs.databricks.com/sql/index.html#warehouse-types) or [Azure](https://learn.microsoft.com/azure/databricks/sql/#warehouse-types).
     * 
     */
    private String warehouseType;

    private GetSqlWarehouseResult() {}
    /**
     * @return Time in minutes until an idle SQL warehouse terminates all clusters and stops.
     * 
     */
    public Integer autoStopMins() {
        return this.autoStopMins;
    }
    /**
     * @return block, consisting of following fields:
     * 
     */
    public GetSqlWarehouseChannel channel() {
        return this.channel;
    }
    /**
     * @return The size of the clusters allocated to the warehouse: &#34;2X-Small&#34;, &#34;X-Small&#34;, &#34;Small&#34;, &#34;Medium&#34;, &#34;Large&#34;, &#34;X-Large&#34;, &#34;2X-Large&#34;, &#34;3X-Large&#34;, &#34;4X-Large&#34;.
     * 
     */
    public String clusterSize() {
        return this.clusterSize;
    }
    /**
     * @return The username of the user who created the endpoint.
     * 
     */
    public String creatorName() {
        return this.creatorName;
    }
    /**
     * @return ID of the data source for this warehouse. This is used to bind an Databricks SQL query to an warehouse.
     * 
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }
    /**
     * @return Whether [Photon](https://databricks.com/product/delta-engine) is enabled.
     * 
     */
    public Boolean enablePhoton() {
        return this.enablePhoton;
    }
    /**
     * @return Whether this SQL warehouse is a serverless SQL warehouse.
     * 
     */
    public Boolean enableServerlessCompute() {
        return this.enableServerlessCompute;
    }
    /**
     * @return Health status of the endpoint.
     * 
     */
    public GetSqlWarehouseHealth health() {
        return this.health;
    }
    /**
     * @return The ID of the SQL warehouse.
     * 
     */
    public String id() {
        return this.id;
    }
    public String instanceProfileArn() {
        return this.instanceProfileArn;
    }
    /**
     * @return JDBC connection string.
     * 
     */
    public String jdbcUrl() {
        return this.jdbcUrl;
    }
    /**
     * @return Maximum number of clusters available when a SQL warehouse is running.
     * 
     */
    public Integer maxNumClusters() {
        return this.maxNumClusters;
    }
    /**
     * @return Minimum number of clusters available when a SQL warehouse is running.
     * 
     */
    public Integer minNumClusters() {
        return this.minNumClusters;
    }
    /**
     * @return Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The current number of clusters used by the endpoint.
     * 
     */
    public Integer numActiveSessions() {
        return this.numActiveSessions;
    }
    /**
     * @return The current number of clusters used by the endpoint.
     * 
     */
    public Integer numClusters() {
        return this.numClusters;
    }
    /**
     * @return ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
     * 
     */
    public GetSqlWarehouseOdbcParams odbcParams() {
        return this.odbcParams;
    }
    /**
     * @return The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`.
     * 
     */
    public String spotInstancePolicy() {
        return this.spotInstancePolicy;
    }
    /**
     * @return The current state of the endpoint.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return tags used for SQL warehouse resources.
     * 
     */
    public GetSqlWarehouseTags tags() {
        return this.tags;
    }
    /**
     * @return SQL warehouse type. See for [AWS](https://docs.databricks.com/sql/index.html#warehouse-types) or [Azure](https://learn.microsoft.com/azure/databricks/sql/#warehouse-types).
     * 
     */
    public String warehouseType() {
        return this.warehouseType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSqlWarehouseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer autoStopMins;
        private GetSqlWarehouseChannel channel;
        private String clusterSize;
        private String creatorName;
        private String dataSourceId;
        private Boolean enablePhoton;
        private Boolean enableServerlessCompute;
        private GetSqlWarehouseHealth health;
        private String id;
        private String instanceProfileArn;
        private String jdbcUrl;
        private Integer maxNumClusters;
        private Integer minNumClusters;
        private String name;
        private Integer numActiveSessions;
        private Integer numClusters;
        private GetSqlWarehouseOdbcParams odbcParams;
        private String spotInstancePolicy;
        private String state;
        private GetSqlWarehouseTags tags;
        private String warehouseType;
        public Builder() {}
        public Builder(GetSqlWarehouseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoStopMins = defaults.autoStopMins;
    	      this.channel = defaults.channel;
    	      this.clusterSize = defaults.clusterSize;
    	      this.creatorName = defaults.creatorName;
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.enablePhoton = defaults.enablePhoton;
    	      this.enableServerlessCompute = defaults.enableServerlessCompute;
    	      this.health = defaults.health;
    	      this.id = defaults.id;
    	      this.instanceProfileArn = defaults.instanceProfileArn;
    	      this.jdbcUrl = defaults.jdbcUrl;
    	      this.maxNumClusters = defaults.maxNumClusters;
    	      this.minNumClusters = defaults.minNumClusters;
    	      this.name = defaults.name;
    	      this.numActiveSessions = defaults.numActiveSessions;
    	      this.numClusters = defaults.numClusters;
    	      this.odbcParams = defaults.odbcParams;
    	      this.spotInstancePolicy = defaults.spotInstancePolicy;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.warehouseType = defaults.warehouseType;
        }

        @CustomType.Setter
        public Builder autoStopMins(Integer autoStopMins) {
            if (autoStopMins == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "autoStopMins");
            }
            this.autoStopMins = autoStopMins;
            return this;
        }
        @CustomType.Setter
        public Builder channel(GetSqlWarehouseChannel channel) {
            if (channel == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "channel");
            }
            this.channel = channel;
            return this;
        }
        @CustomType.Setter
        public Builder clusterSize(String clusterSize) {
            if (clusterSize == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "clusterSize");
            }
            this.clusterSize = clusterSize;
            return this;
        }
        @CustomType.Setter
        public Builder creatorName(String creatorName) {
            if (creatorName == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "creatorName");
            }
            this.creatorName = creatorName;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceId(String dataSourceId) {
            if (dataSourceId == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "dataSourceId");
            }
            this.dataSourceId = dataSourceId;
            return this;
        }
        @CustomType.Setter
        public Builder enablePhoton(Boolean enablePhoton) {
            if (enablePhoton == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "enablePhoton");
            }
            this.enablePhoton = enablePhoton;
            return this;
        }
        @CustomType.Setter
        public Builder enableServerlessCompute(Boolean enableServerlessCompute) {
            if (enableServerlessCompute == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "enableServerlessCompute");
            }
            this.enableServerlessCompute = enableServerlessCompute;
            return this;
        }
        @CustomType.Setter
        public Builder health(GetSqlWarehouseHealth health) {
            if (health == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "health");
            }
            this.health = health;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceProfileArn(String instanceProfileArn) {
            if (instanceProfileArn == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "instanceProfileArn");
            }
            this.instanceProfileArn = instanceProfileArn;
            return this;
        }
        @CustomType.Setter
        public Builder jdbcUrl(String jdbcUrl) {
            if (jdbcUrl == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "jdbcUrl");
            }
            this.jdbcUrl = jdbcUrl;
            return this;
        }
        @CustomType.Setter
        public Builder maxNumClusters(Integer maxNumClusters) {
            if (maxNumClusters == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "maxNumClusters");
            }
            this.maxNumClusters = maxNumClusters;
            return this;
        }
        @CustomType.Setter
        public Builder minNumClusters(Integer minNumClusters) {
            if (minNumClusters == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "minNumClusters");
            }
            this.minNumClusters = minNumClusters;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder numActiveSessions(Integer numActiveSessions) {
            if (numActiveSessions == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "numActiveSessions");
            }
            this.numActiveSessions = numActiveSessions;
            return this;
        }
        @CustomType.Setter
        public Builder numClusters(Integer numClusters) {
            if (numClusters == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "numClusters");
            }
            this.numClusters = numClusters;
            return this;
        }
        @CustomType.Setter
        public Builder odbcParams(GetSqlWarehouseOdbcParams odbcParams) {
            if (odbcParams == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "odbcParams");
            }
            this.odbcParams = odbcParams;
            return this;
        }
        @CustomType.Setter
        public Builder spotInstancePolicy(String spotInstancePolicy) {
            if (spotInstancePolicy == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "spotInstancePolicy");
            }
            this.spotInstancePolicy = spotInstancePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tags(GetSqlWarehouseTags tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder warehouseType(String warehouseType) {
            if (warehouseType == null) {
              throw new MissingRequiredPropertyException("GetSqlWarehouseResult", "warehouseType");
            }
            this.warehouseType = warehouseType;
            return this;
        }
        public GetSqlWarehouseResult build() {
            final var _resultValue = new GetSqlWarehouseResult();
            _resultValue.autoStopMins = autoStopMins;
            _resultValue.channel = channel;
            _resultValue.clusterSize = clusterSize;
            _resultValue.creatorName = creatorName;
            _resultValue.dataSourceId = dataSourceId;
            _resultValue.enablePhoton = enablePhoton;
            _resultValue.enableServerlessCompute = enableServerlessCompute;
            _resultValue.health = health;
            _resultValue.id = id;
            _resultValue.instanceProfileArn = instanceProfileArn;
            _resultValue.jdbcUrl = jdbcUrl;
            _resultValue.maxNumClusters = maxNumClusters;
            _resultValue.minNumClusters = minNumClusters;
            _resultValue.name = name;
            _resultValue.numActiveSessions = numActiveSessions;
            _resultValue.numClusters = numClusters;
            _resultValue.odbcParams = odbcParams;
            _resultValue.spotInstancePolicy = spotInstancePolicy;
            _resultValue.state = state;
            _resultValue.tags = tags;
            _resultValue.warehouseType = warehouseType;
            return _resultValue;
        }
    }
}
