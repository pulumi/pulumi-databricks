// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetVolumeVolumeInfoEncryptionDetailsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVolumeVolumeInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetVolumeVolumeInfoArgs Empty = new GetVolumeVolumeInfoArgs();

    /**
     * the AWS access point to use when accessing s3 bucket for this volume&#39;s external location
     * 
     */
    @Import(name="accessPoint")
    private @Nullable Output<String> accessPoint;

    /**
     * @return the AWS access point to use when accessing s3 bucket for this volume&#39;s external location
     * 
     */
    public Optional<Output<String>> accessPoint() {
        return Optional.ofNullable(this.accessPoint);
    }

    /**
     * indicates whether the principal is limited to retrieving metadata for the volume through the BROWSE privilege when include_browse is enabled in the request.
     * 
     */
    @Import(name="browseOnly")
    private @Nullable Output<Boolean> browseOnly;

    /**
     * @return indicates whether the principal is limited to retrieving metadata for the volume through the BROWSE privilege when include_browse is enabled in the request.
     * 
     */
    public Optional<Output<Boolean>> browseOnly() {
        return Optional.ofNullable(this.browseOnly);
    }

    /**
     * the name of the catalog where the schema and the volume are
     * 
     */
    @Import(name="catalogName")
    private @Nullable Output<String> catalogName;

    /**
     * @return the name of the catalog where the schema and the volume are
     * 
     */
    public Optional<Output<String>> catalogName() {
        return Optional.ofNullable(this.catalogName);
    }

    /**
     * the comment attached to the volume
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return the comment attached to the volume
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * the Unix timestamp at the volume&#39;s creation
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<Integer> createdAt;

    /**
     * @return the Unix timestamp at the volume&#39;s creation
     * 
     */
    public Optional<Output<Integer>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * the identifier of the user who created the volume
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return the identifier of the user who created the volume
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * encryption options that apply to clients connecting to cloud storage
     * 
     */
    @Import(name="encryptionDetails")
    private @Nullable Output<GetVolumeVolumeInfoEncryptionDetailsArgs> encryptionDetails;

    /**
     * @return encryption options that apply to clients connecting to cloud storage
     * 
     */
    public Optional<Output<GetVolumeVolumeInfoEncryptionDetailsArgs>> encryptionDetails() {
        return Optional.ofNullable(this.encryptionDetails);
    }

    /**
     * the three-level (fully qualified) name of the volume
     * 
     */
    @Import(name="fullName")
    private @Nullable Output<String> fullName;

    /**
     * @return the three-level (fully qualified) name of the volume
     * 
     */
    public Optional<Output<String>> fullName() {
        return Optional.ofNullable(this.fullName);
    }

    /**
     * the unique identifier of the metastore
     * 
     */
    @Import(name="metastoreId")
    private @Nullable Output<String> metastoreId;

    /**
     * @return the unique identifier of the metastore
     * 
     */
    public Optional<Output<String>> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }

    /**
     * a fully qualified name of databricks_volume: *`catalog`.`schema`.`volume`*
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return a fully qualified name of databricks_volume: *`catalog`.`schema`.`volume`*
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * the identifier of the user who owns the volume
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return the identifier of the user who owns the volume
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * the name of the schema where the volume is
     * 
     */
    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    /**
     * @return the name of the schema where the volume is
     * 
     */
    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    /**
     * the storage location on the cloud
     * 
     */
    @Import(name="storageLocation")
    private @Nullable Output<String> storageLocation;

    /**
     * @return the storage location on the cloud
     * 
     */
    public Optional<Output<String>> storageLocation() {
        return Optional.ofNullable(this.storageLocation);
    }

    /**
     * the timestamp of the last time changes were made to the volume
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<Integer> updatedAt;

    /**
     * @return the timestamp of the last time changes were made to the volume
     * 
     */
    public Optional<Output<Integer>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * the identifier of the user who updated the volume last time
     * 
     */
    @Import(name="updatedBy")
    private @Nullable Output<String> updatedBy;

    /**
     * @return the identifier of the user who updated the volume last time
     * 
     */
    public Optional<Output<String>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    /**
     * the unique identifier of the volume
     * 
     */
    @Import(name="volumeId")
    private @Nullable Output<String> volumeId;

    /**
     * @return the unique identifier of the volume
     * 
     */
    public Optional<Output<String>> volumeId() {
        return Optional.ofNullable(this.volumeId);
    }

    /**
     * whether the volume is `MANAGED` or `EXTERNAL`
     * 
     */
    @Import(name="volumeType")
    private @Nullable Output<String> volumeType;

    /**
     * @return whether the volume is `MANAGED` or `EXTERNAL`
     * 
     */
    public Optional<Output<String>> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    private GetVolumeVolumeInfoArgs() {}

    private GetVolumeVolumeInfoArgs(GetVolumeVolumeInfoArgs $) {
        this.accessPoint = $.accessPoint;
        this.browseOnly = $.browseOnly;
        this.catalogName = $.catalogName;
        this.comment = $.comment;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.encryptionDetails = $.encryptionDetails;
        this.fullName = $.fullName;
        this.metastoreId = $.metastoreId;
        this.name = $.name;
        this.owner = $.owner;
        this.schemaName = $.schemaName;
        this.storageLocation = $.storageLocation;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
        this.volumeId = $.volumeId;
        this.volumeType = $.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVolumeVolumeInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVolumeVolumeInfoArgs $;

        public Builder() {
            $ = new GetVolumeVolumeInfoArgs();
        }

        public Builder(GetVolumeVolumeInfoArgs defaults) {
            $ = new GetVolumeVolumeInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessPoint the AWS access point to use when accessing s3 bucket for this volume&#39;s external location
         * 
         * @return builder
         * 
         */
        public Builder accessPoint(@Nullable Output<String> accessPoint) {
            $.accessPoint = accessPoint;
            return this;
        }

        /**
         * @param accessPoint the AWS access point to use when accessing s3 bucket for this volume&#39;s external location
         * 
         * @return builder
         * 
         */
        public Builder accessPoint(String accessPoint) {
            return accessPoint(Output.of(accessPoint));
        }

        /**
         * @param browseOnly indicates whether the principal is limited to retrieving metadata for the volume through the BROWSE privilege when include_browse is enabled in the request.
         * 
         * @return builder
         * 
         */
        public Builder browseOnly(@Nullable Output<Boolean> browseOnly) {
            $.browseOnly = browseOnly;
            return this;
        }

        /**
         * @param browseOnly indicates whether the principal is limited to retrieving metadata for the volume through the BROWSE privilege when include_browse is enabled in the request.
         * 
         * @return builder
         * 
         */
        public Builder browseOnly(Boolean browseOnly) {
            return browseOnly(Output.of(browseOnly));
        }

        /**
         * @param catalogName the name of the catalog where the schema and the volume are
         * 
         * @return builder
         * 
         */
        public Builder catalogName(@Nullable Output<String> catalogName) {
            $.catalogName = catalogName;
            return this;
        }

        /**
         * @param catalogName the name of the catalog where the schema and the volume are
         * 
         * @return builder
         * 
         */
        public Builder catalogName(String catalogName) {
            return catalogName(Output.of(catalogName));
        }

        /**
         * @param comment the comment attached to the volume
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment the comment attached to the volume
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param createdAt the Unix timestamp at the volume&#39;s creation
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<Integer> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt the Unix timestamp at the volume&#39;s creation
         * 
         * @return builder
         * 
         */
        public Builder createdAt(Integer createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy the identifier of the user who created the volume
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy the identifier of the user who created the volume
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param encryptionDetails encryption options that apply to clients connecting to cloud storage
         * 
         * @return builder
         * 
         */
        public Builder encryptionDetails(@Nullable Output<GetVolumeVolumeInfoEncryptionDetailsArgs> encryptionDetails) {
            $.encryptionDetails = encryptionDetails;
            return this;
        }

        /**
         * @param encryptionDetails encryption options that apply to clients connecting to cloud storage
         * 
         * @return builder
         * 
         */
        public Builder encryptionDetails(GetVolumeVolumeInfoEncryptionDetailsArgs encryptionDetails) {
            return encryptionDetails(Output.of(encryptionDetails));
        }

        /**
         * @param fullName the three-level (fully qualified) name of the volume
         * 
         * @return builder
         * 
         */
        public Builder fullName(@Nullable Output<String> fullName) {
            $.fullName = fullName;
            return this;
        }

        /**
         * @param fullName the three-level (fully qualified) name of the volume
         * 
         * @return builder
         * 
         */
        public Builder fullName(String fullName) {
            return fullName(Output.of(fullName));
        }

        /**
         * @param metastoreId the unique identifier of the metastore
         * 
         * @return builder
         * 
         */
        public Builder metastoreId(@Nullable Output<String> metastoreId) {
            $.metastoreId = metastoreId;
            return this;
        }

        /**
         * @param metastoreId the unique identifier of the metastore
         * 
         * @return builder
         * 
         */
        public Builder metastoreId(String metastoreId) {
            return metastoreId(Output.of(metastoreId));
        }

        /**
         * @param name a fully qualified name of databricks_volume: *`catalog`.`schema`.`volume`*
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name a fully qualified name of databricks_volume: *`catalog`.`schema`.`volume`*
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param owner the identifier of the user who owns the volume
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner the identifier of the user who owns the volume
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param schemaName the name of the schema where the volume is
         * 
         * @return builder
         * 
         */
        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        /**
         * @param schemaName the name of the schema where the volume is
         * 
         * @return builder
         * 
         */
        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        /**
         * @param storageLocation the storage location on the cloud
         * 
         * @return builder
         * 
         */
        public Builder storageLocation(@Nullable Output<String> storageLocation) {
            $.storageLocation = storageLocation;
            return this;
        }

        /**
         * @param storageLocation the storage location on the cloud
         * 
         * @return builder
         * 
         */
        public Builder storageLocation(String storageLocation) {
            return storageLocation(Output.of(storageLocation));
        }

        /**
         * @param updatedAt the timestamp of the last time changes were made to the volume
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<Integer> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt the timestamp of the last time changes were made to the volume
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(Integer updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param updatedBy the identifier of the user who updated the volume last time
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(@Nullable Output<String> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        /**
         * @param updatedBy the identifier of the user who updated the volume last time
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(String updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        /**
         * @param volumeId the unique identifier of the volume
         * 
         * @return builder
         * 
         */
        public Builder volumeId(@Nullable Output<String> volumeId) {
            $.volumeId = volumeId;
            return this;
        }

        /**
         * @param volumeId the unique identifier of the volume
         * 
         * @return builder
         * 
         */
        public Builder volumeId(String volumeId) {
            return volumeId(Output.of(volumeId));
        }

        /**
         * @param volumeType whether the volume is `MANAGED` or `EXTERNAL`
         * 
         * @return builder
         * 
         */
        public Builder volumeType(@Nullable Output<String> volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        /**
         * @param volumeType whether the volume is `MANAGED` or `EXTERNAL`
         * 
         * @return builder
         * 
         */
        public Builder volumeType(String volumeType) {
            return volumeType(Output.of(volumeType));
        }

        public GetVolumeVolumeInfoArgs build() {
            return $;
        }
    }

}
