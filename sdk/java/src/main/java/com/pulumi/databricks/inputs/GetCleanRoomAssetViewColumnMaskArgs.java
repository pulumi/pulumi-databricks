// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCleanRoomAssetViewColumnMaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCleanRoomAssetViewColumnMaskArgs Empty = new GetCleanRoomAssetViewColumnMaskArgs();

    /**
     * (string) - The full name of the column mask SQL UDF
     * 
     */
    @Import(name="functionName")
    private @Nullable Output<String> functionName;

    /**
     * @return (string) - The full name of the column mask SQL UDF
     * 
     */
    public Optional<Output<String>> functionName() {
        return Optional.ofNullable(this.functionName);
    }

    /**
     * (list of string) - The list of additional table columns to be passed as input to the column mask function. The
     * first arg of the mask function should be of the type of the column being masked and the
     * types of the rest of the args should match the types of columns in &#39;using_column_names&#39;
     * 
     */
    @Import(name="usingColumnNames")
    private @Nullable Output<List<String>> usingColumnNames;

    /**
     * @return (list of string) - The list of additional table columns to be passed as input to the column mask function. The
     * first arg of the mask function should be of the type of the column being masked and the
     * types of the rest of the args should match the types of columns in &#39;using_column_names&#39;
     * 
     */
    public Optional<Output<List<String>>> usingColumnNames() {
        return Optional.ofNullable(this.usingColumnNames);
    }

    private GetCleanRoomAssetViewColumnMaskArgs() {}

    private GetCleanRoomAssetViewColumnMaskArgs(GetCleanRoomAssetViewColumnMaskArgs $) {
        this.functionName = $.functionName;
        this.usingColumnNames = $.usingColumnNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCleanRoomAssetViewColumnMaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCleanRoomAssetViewColumnMaskArgs $;

        public Builder() {
            $ = new GetCleanRoomAssetViewColumnMaskArgs();
        }

        public Builder(GetCleanRoomAssetViewColumnMaskArgs defaults) {
            $ = new GetCleanRoomAssetViewColumnMaskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param functionName (string) - The full name of the column mask SQL UDF
         * 
         * @return builder
         * 
         */
        public Builder functionName(@Nullable Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName (string) - The full name of the column mask SQL UDF
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param usingColumnNames (list of string) - The list of additional table columns to be passed as input to the column mask function. The
         * first arg of the mask function should be of the type of the column being masked and the
         * types of the rest of the args should match the types of columns in &#39;using_column_names&#39;
         * 
         * @return builder
         * 
         */
        public Builder usingColumnNames(@Nullable Output<List<String>> usingColumnNames) {
            $.usingColumnNames = usingColumnNames;
            return this;
        }

        /**
         * @param usingColumnNames (list of string) - The list of additional table columns to be passed as input to the column mask function. The
         * first arg of the mask function should be of the type of the column being masked and the
         * types of the rest of the args should match the types of columns in &#39;using_column_names&#39;
         * 
         * @return builder
         * 
         */
        public Builder usingColumnNames(List<String> usingColumnNames) {
            return usingColumnNames(Output.of(usingColumnNames));
        }

        /**
         * @param usingColumnNames (list of string) - The list of additional table columns to be passed as input to the column mask function. The
         * first arg of the mask function should be of the type of the column being masked and the
         * types of the rest of the args should match the types of columns in &#39;using_column_names&#39;
         * 
         * @return builder
         * 
         */
        public Builder usingColumnNames(String... usingColumnNames) {
            return usingColumnNames(List.of(usingColumnNames));
        }

        public GetCleanRoomAssetViewColumnMaskArgs build() {
            return $;
        }
    }

}
