// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAccountNetworkPolicyEgressNetworkAccessPolicyEnforcement extends com.pulumi.resources.InvokeArgs {

    public static final GetAccountNetworkPolicyEgressNetworkAccessPolicyEnforcement Empty = new GetAccountNetworkPolicyEgressNetworkAccessPolicyEnforcement();

    /**
     * (list of ) - When empty, it means dry run for all products.
     * When non-empty, it means dry run for specific products and for the other products, they will run in enforced mode
     * 
     */
    @Import(name="dryRunModeProductFilters")
    private @Nullable List<String> dryRunModeProductFilters;

    /**
     * @return (list of ) - When empty, it means dry run for all products.
     * When non-empty, it means dry run for specific products and for the other products, they will run in enforced mode
     * 
     */
    public Optional<List<String>> dryRunModeProductFilters() {
        return Optional.ofNullable(this.dryRunModeProductFilters);
    }

    /**
     * (string) - The mode of policy enforcement. ENFORCED blocks traffic that violates policy,
     * while DRY_RUN only logs violations without blocking. When not specified,
     * defaults to ENFORCED. Possible values are: `DRY_RUN`, `ENFORCED`
     * 
     */
    @Import(name="enforcementMode")
    private @Nullable String enforcementMode;

    /**
     * @return (string) - The mode of policy enforcement. ENFORCED blocks traffic that violates policy,
     * while DRY_RUN only logs violations without blocking. When not specified,
     * defaults to ENFORCED. Possible values are: `DRY_RUN`, `ENFORCED`
     * 
     */
    public Optional<String> enforcementMode() {
        return Optional.ofNullable(this.enforcementMode);
    }

    private GetAccountNetworkPolicyEgressNetworkAccessPolicyEnforcement() {}

    private GetAccountNetworkPolicyEgressNetworkAccessPolicyEnforcement(GetAccountNetworkPolicyEgressNetworkAccessPolicyEnforcement $) {
        this.dryRunModeProductFilters = $.dryRunModeProductFilters;
        this.enforcementMode = $.enforcementMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAccountNetworkPolicyEgressNetworkAccessPolicyEnforcement defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAccountNetworkPolicyEgressNetworkAccessPolicyEnforcement $;

        public Builder() {
            $ = new GetAccountNetworkPolicyEgressNetworkAccessPolicyEnforcement();
        }

        public Builder(GetAccountNetworkPolicyEgressNetworkAccessPolicyEnforcement defaults) {
            $ = new GetAccountNetworkPolicyEgressNetworkAccessPolicyEnforcement(Objects.requireNonNull(defaults));
        }

        /**
         * @param dryRunModeProductFilters (list of ) - When empty, it means dry run for all products.
         * When non-empty, it means dry run for specific products and for the other products, they will run in enforced mode
         * 
         * @return builder
         * 
         */
        public Builder dryRunModeProductFilters(@Nullable List<String> dryRunModeProductFilters) {
            $.dryRunModeProductFilters = dryRunModeProductFilters;
            return this;
        }

        /**
         * @param dryRunModeProductFilters (list of ) - When empty, it means dry run for all products.
         * When non-empty, it means dry run for specific products and for the other products, they will run in enforced mode
         * 
         * @return builder
         * 
         */
        public Builder dryRunModeProductFilters(String... dryRunModeProductFilters) {
            return dryRunModeProductFilters(List.of(dryRunModeProductFilters));
        }

        /**
         * @param enforcementMode (string) - The mode of policy enforcement. ENFORCED blocks traffic that violates policy,
         * while DRY_RUN only logs violations without blocking. When not specified,
         * defaults to ENFORCED. Possible values are: `DRY_RUN`, `ENFORCED`
         * 
         * @return builder
         * 
         */
        public Builder enforcementMode(@Nullable String enforcementMode) {
            $.enforcementMode = enforcementMode;
            return this;
        }

        public GetAccountNetworkPolicyEgressNetworkAccessPolicyEnforcement build() {
            return $;
        }
    }

}
