// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.ClusterClusterMountInfoNetworkFilesystemInfo;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterClusterMountInfo {
    /**
     * @return path inside the Spark container.
     * 
     * For example, you can mount Azure Data Lake Storage container using the following code:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.databricks.Cluster;
     * import com.pulumi.databricks.ClusterArgs;
     * import com.pulumi.databricks.inputs.ClusterClusterMountInfoArgs;
     * import com.pulumi.databricks.inputs.ClusterClusterMountInfoNetworkFilesystemInfoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var storageAccount = "ewfw3ggwegwg";
     * 
     *         final var storageContainer = "test";
     * 
     *         var withNfs = new Cluster("withNfs", ClusterArgs.builder()
     *             .clusterMountInfos(ClusterClusterMountInfoArgs.builder()
     *                 .networkFilesystemInfo(ClusterClusterMountInfoNetworkFilesystemInfoArgs.builder()
     *                     .serverAddress(String.format("%s.blob.core.windows.net", storageAccount))
     *                     .mountOptions("sec=sys,vers=3,nolock,proto=tcp")
     *                     .build())
     *                 .remoteMountDirPath(String.format("%s/%s", storageAccount,storageContainer))
     *                 .localMountDirPath("/mnt/nfs-test")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    private String localMountDirPath;
    /**
     * @return block specifying connection. It consists of:
     * 
     */
    private ClusterClusterMountInfoNetworkFilesystemInfo networkFilesystemInfo;
    /**
     * @return string specifying path to mount on the remote service.
     * 
     */
    private @Nullable String remoteMountDirPath;

    private ClusterClusterMountInfo() {}
    /**
     * @return path inside the Spark container.
     * 
     * For example, you can mount Azure Data Lake Storage container using the following code:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.databricks.Cluster;
     * import com.pulumi.databricks.ClusterArgs;
     * import com.pulumi.databricks.inputs.ClusterClusterMountInfoArgs;
     * import com.pulumi.databricks.inputs.ClusterClusterMountInfoNetworkFilesystemInfoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var storageAccount = "ewfw3ggwegwg";
     * 
     *         final var storageContainer = "test";
     * 
     *         var withNfs = new Cluster("withNfs", ClusterArgs.builder()
     *             .clusterMountInfos(ClusterClusterMountInfoArgs.builder()
     *                 .networkFilesystemInfo(ClusterClusterMountInfoNetworkFilesystemInfoArgs.builder()
     *                     .serverAddress(String.format("%s.blob.core.windows.net", storageAccount))
     *                     .mountOptions("sec=sys,vers=3,nolock,proto=tcp")
     *                     .build())
     *                 .remoteMountDirPath(String.format("%s/%s", storageAccount,storageContainer))
     *                 .localMountDirPath("/mnt/nfs-test")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public String localMountDirPath() {
        return this.localMountDirPath;
    }
    /**
     * @return block specifying connection. It consists of:
     * 
     */
    public ClusterClusterMountInfoNetworkFilesystemInfo networkFilesystemInfo() {
        return this.networkFilesystemInfo;
    }
    /**
     * @return string specifying path to mount on the remote service.
     * 
     */
    public Optional<String> remoteMountDirPath() {
        return Optional.ofNullable(this.remoteMountDirPath);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterClusterMountInfo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String localMountDirPath;
        private ClusterClusterMountInfoNetworkFilesystemInfo networkFilesystemInfo;
        private @Nullable String remoteMountDirPath;
        public Builder() {}
        public Builder(ClusterClusterMountInfo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.localMountDirPath = defaults.localMountDirPath;
    	      this.networkFilesystemInfo = defaults.networkFilesystemInfo;
    	      this.remoteMountDirPath = defaults.remoteMountDirPath;
        }

        @CustomType.Setter
        public Builder localMountDirPath(String localMountDirPath) {
            if (localMountDirPath == null) {
              throw new MissingRequiredPropertyException("ClusterClusterMountInfo", "localMountDirPath");
            }
            this.localMountDirPath = localMountDirPath;
            return this;
        }
        @CustomType.Setter
        public Builder networkFilesystemInfo(ClusterClusterMountInfoNetworkFilesystemInfo networkFilesystemInfo) {
            if (networkFilesystemInfo == null) {
              throw new MissingRequiredPropertyException("ClusterClusterMountInfo", "networkFilesystemInfo");
            }
            this.networkFilesystemInfo = networkFilesystemInfo;
            return this;
        }
        @CustomType.Setter
        public Builder remoteMountDirPath(@Nullable String remoteMountDirPath) {

            this.remoteMountDirPath = remoteMountDirPath;
            return this;
        }
        public ClusterClusterMountInfo build() {
            final var _resultValue = new ClusterClusterMountInfo();
            _resultValue.localMountDirPath = localMountDirPath;
            _resultValue.networkFilesystemInfo = networkFilesystemInfo;
            _resultValue.remoteMountDirPath = remoteMountDirPath;
            return _resultValue;
        }
    }
}
