// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNodeTypePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNodeTypePlainArgs Empty = new GetNodeTypePlainArgs();

    @Import(name="category")
    private @Nullable String category;

    public Optional<String> category() {
        return Optional.ofNullable(this.category);
    }

    @Import(name="fleet")
    private @Nullable Boolean fleet;

    public Optional<Boolean> fleet() {
        return Optional.ofNullable(this.fleet);
    }

    @Import(name="gbPerCore")
    private @Nullable Integer gbPerCore;

    public Optional<Integer> gbPerCore() {
        return Optional.ofNullable(this.gbPerCore);
    }

    @Import(name="graviton")
    private @Nullable Boolean graviton;

    public Optional<Boolean> graviton() {
        return Optional.ofNullable(this.graviton);
    }

    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="isIoCacheEnabled")
    private @Nullable Boolean isIoCacheEnabled;

    public Optional<Boolean> isIoCacheEnabled() {
        return Optional.ofNullable(this.isIoCacheEnabled);
    }

    @Import(name="localDisk")
    private @Nullable Boolean localDisk;

    public Optional<Boolean> localDisk() {
        return Optional.ofNullable(this.localDisk);
    }

    @Import(name="localDiskMinSize")
    private @Nullable Integer localDiskMinSize;

    public Optional<Integer> localDiskMinSize() {
        return Optional.ofNullable(this.localDiskMinSize);
    }

    @Import(name="minCores")
    private @Nullable Integer minCores;

    public Optional<Integer> minCores() {
        return Optional.ofNullable(this.minCores);
    }

    @Import(name="minGpus")
    private @Nullable Integer minGpus;

    public Optional<Integer> minGpus() {
        return Optional.ofNullable(this.minGpus);
    }

    @Import(name="minMemoryGb")
    private @Nullable Integer minMemoryGb;

    public Optional<Integer> minMemoryGb() {
        return Optional.ofNullable(this.minMemoryGb);
    }

    @Import(name="photonDriverCapable")
    private @Nullable Boolean photonDriverCapable;

    public Optional<Boolean> photonDriverCapable() {
        return Optional.ofNullable(this.photonDriverCapable);
    }

    @Import(name="photonWorkerCapable")
    private @Nullable Boolean photonWorkerCapable;

    public Optional<Boolean> photonWorkerCapable() {
        return Optional.ofNullable(this.photonWorkerCapable);
    }

    @Import(name="supportPortForwarding")
    private @Nullable Boolean supportPortForwarding;

    public Optional<Boolean> supportPortForwarding() {
        return Optional.ofNullable(this.supportPortForwarding);
    }

    private GetNodeTypePlainArgs() {}

    private GetNodeTypePlainArgs(GetNodeTypePlainArgs $) {
        this.category = $.category;
        this.fleet = $.fleet;
        this.gbPerCore = $.gbPerCore;
        this.graviton = $.graviton;
        this.id = $.id;
        this.isIoCacheEnabled = $.isIoCacheEnabled;
        this.localDisk = $.localDisk;
        this.localDiskMinSize = $.localDiskMinSize;
        this.minCores = $.minCores;
        this.minGpus = $.minGpus;
        this.minMemoryGb = $.minMemoryGb;
        this.photonDriverCapable = $.photonDriverCapable;
        this.photonWorkerCapable = $.photonWorkerCapable;
        this.supportPortForwarding = $.supportPortForwarding;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodeTypePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodeTypePlainArgs $;

        public Builder() {
            $ = new GetNodeTypePlainArgs();
        }

        public Builder(GetNodeTypePlainArgs defaults) {
            $ = new GetNodeTypePlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder category(@Nullable String category) {
            $.category = category;
            return this;
        }

        public Builder fleet(@Nullable Boolean fleet) {
            $.fleet = fleet;
            return this;
        }

        public Builder gbPerCore(@Nullable Integer gbPerCore) {
            $.gbPerCore = gbPerCore;
            return this;
        }

        public Builder graviton(@Nullable Boolean graviton) {
            $.graviton = graviton;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder isIoCacheEnabled(@Nullable Boolean isIoCacheEnabled) {
            $.isIoCacheEnabled = isIoCacheEnabled;
            return this;
        }

        public Builder localDisk(@Nullable Boolean localDisk) {
            $.localDisk = localDisk;
            return this;
        }

        public Builder localDiskMinSize(@Nullable Integer localDiskMinSize) {
            $.localDiskMinSize = localDiskMinSize;
            return this;
        }

        public Builder minCores(@Nullable Integer minCores) {
            $.minCores = minCores;
            return this;
        }

        public Builder minGpus(@Nullable Integer minGpus) {
            $.minGpus = minGpus;
            return this;
        }

        public Builder minMemoryGb(@Nullable Integer minMemoryGb) {
            $.minMemoryGb = minMemoryGb;
            return this;
        }

        public Builder photonDriverCapable(@Nullable Boolean photonDriverCapable) {
            $.photonDriverCapable = photonDriverCapable;
            return this;
        }

        public Builder photonWorkerCapable(@Nullable Boolean photonWorkerCapable) {
            $.photonWorkerCapable = photonWorkerCapable;
            return this;
        }

        public Builder supportPortForwarding(@Nullable Boolean supportPortForwarding) {
            $.supportPortForwarding = supportPortForwarding;
            return this;
        }

        public GetNodeTypePlainArgs build() {
            return $;
        }
    }

}
