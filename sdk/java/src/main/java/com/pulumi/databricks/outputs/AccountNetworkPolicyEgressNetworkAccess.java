// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.AccountNetworkPolicyEgressNetworkAccessAllowedInternetDestination;
import com.pulumi.databricks.outputs.AccountNetworkPolicyEgressNetworkAccessAllowedStorageDestination;
import com.pulumi.databricks.outputs.AccountNetworkPolicyEgressNetworkAccessPolicyEnforcement;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccountNetworkPolicyEgressNetworkAccess {
    /**
     * @return List of internet destinations that serverless workloads are allowed to access when in RESTRICTED_ACCESS mode
     * 
     */
    private @Nullable List<AccountNetworkPolicyEgressNetworkAccessAllowedInternetDestination> allowedInternetDestinations;
    /**
     * @return List of storage destinations that serverless workloads are allowed to access when in RESTRICTED_ACCESS mode
     * 
     */
    private @Nullable List<AccountNetworkPolicyEgressNetworkAccessAllowedStorageDestination> allowedStorageDestinations;
    /**
     * @return Optional. When policy_enforcement is not provided, we default to ENFORCE_MODE_ALL_SERVICES
     * 
     */
    private @Nullable AccountNetworkPolicyEgressNetworkAccessPolicyEnforcement policyEnforcement;
    /**
     * @return The restriction mode that controls how serverless workloads can access the internet. Possible values are: `FULL_ACCESS`, `RESTRICTED_ACCESS`
     * 
     */
    private String restrictionMode;

    private AccountNetworkPolicyEgressNetworkAccess() {}
    /**
     * @return List of internet destinations that serverless workloads are allowed to access when in RESTRICTED_ACCESS mode
     * 
     */
    public List<AccountNetworkPolicyEgressNetworkAccessAllowedInternetDestination> allowedInternetDestinations() {
        return this.allowedInternetDestinations == null ? List.of() : this.allowedInternetDestinations;
    }
    /**
     * @return List of storage destinations that serverless workloads are allowed to access when in RESTRICTED_ACCESS mode
     * 
     */
    public List<AccountNetworkPolicyEgressNetworkAccessAllowedStorageDestination> allowedStorageDestinations() {
        return this.allowedStorageDestinations == null ? List.of() : this.allowedStorageDestinations;
    }
    /**
     * @return Optional. When policy_enforcement is not provided, we default to ENFORCE_MODE_ALL_SERVICES
     * 
     */
    public Optional<AccountNetworkPolicyEgressNetworkAccessPolicyEnforcement> policyEnforcement() {
        return Optional.ofNullable(this.policyEnforcement);
    }
    /**
     * @return The restriction mode that controls how serverless workloads can access the internet. Possible values are: `FULL_ACCESS`, `RESTRICTED_ACCESS`
     * 
     */
    public String restrictionMode() {
        return this.restrictionMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountNetworkPolicyEgressNetworkAccess defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<AccountNetworkPolicyEgressNetworkAccessAllowedInternetDestination> allowedInternetDestinations;
        private @Nullable List<AccountNetworkPolicyEgressNetworkAccessAllowedStorageDestination> allowedStorageDestinations;
        private @Nullable AccountNetworkPolicyEgressNetworkAccessPolicyEnforcement policyEnforcement;
        private String restrictionMode;
        public Builder() {}
        public Builder(AccountNetworkPolicyEgressNetworkAccess defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedInternetDestinations = defaults.allowedInternetDestinations;
    	      this.allowedStorageDestinations = defaults.allowedStorageDestinations;
    	      this.policyEnforcement = defaults.policyEnforcement;
    	      this.restrictionMode = defaults.restrictionMode;
        }

        @CustomType.Setter
        public Builder allowedInternetDestinations(@Nullable List<AccountNetworkPolicyEgressNetworkAccessAllowedInternetDestination> allowedInternetDestinations) {

            this.allowedInternetDestinations = allowedInternetDestinations;
            return this;
        }
        public Builder allowedInternetDestinations(AccountNetworkPolicyEgressNetworkAccessAllowedInternetDestination... allowedInternetDestinations) {
            return allowedInternetDestinations(List.of(allowedInternetDestinations));
        }
        @CustomType.Setter
        public Builder allowedStorageDestinations(@Nullable List<AccountNetworkPolicyEgressNetworkAccessAllowedStorageDestination> allowedStorageDestinations) {

            this.allowedStorageDestinations = allowedStorageDestinations;
            return this;
        }
        public Builder allowedStorageDestinations(AccountNetworkPolicyEgressNetworkAccessAllowedStorageDestination... allowedStorageDestinations) {
            return allowedStorageDestinations(List.of(allowedStorageDestinations));
        }
        @CustomType.Setter
        public Builder policyEnforcement(@Nullable AccountNetworkPolicyEgressNetworkAccessPolicyEnforcement policyEnforcement) {

            this.policyEnforcement = policyEnforcement;
            return this;
        }
        @CustomType.Setter
        public Builder restrictionMode(String restrictionMode) {
            if (restrictionMode == null) {
              throw new MissingRequiredPropertyException("AccountNetworkPolicyEgressNetworkAccess", "restrictionMode");
            }
            this.restrictionMode = restrictionMode;
            return this;
        }
        public AccountNetworkPolicyEgressNetworkAccess build() {
            final var _resultValue = new AccountNetworkPolicyEgressNetworkAccess();
            _resultValue.allowedInternetDestinations = allowedInternetDestinations;
            _resultValue.allowedStorageDestinations = allowedStorageDestinations;
            _resultValue.policyEnforcement = policyEnforcement;
            _resultValue.restrictionMode = restrictionMode;
            return _resultValue;
        }
    }
}
