// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetAppAppActiveDeployment;
import com.pulumi.databricks.outputs.GetAppAppAppStatus;
import com.pulumi.databricks.outputs.GetAppAppComputeStatus;
import com.pulumi.databricks.outputs.GetAppAppPendingDeployment;
import com.pulumi.databricks.outputs.GetAppAppResource;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAppApp {
    private GetAppAppActiveDeployment activeDeployment;
    /**
     * @return attribute
     * 
     */
    private GetAppAppAppStatus appStatus;
    /**
     * @return attribute
     * 
     */
    private GetAppAppComputeStatus computeStatus;
    /**
     * @return The creation time of the app.
     * 
     */
    private String createTime;
    /**
     * @return The email of the user that created the app.
     * 
     */
    private String creator;
    /**
     * @return The default workspace file system path of the source code from which app deployment are created. This field tracks the workspace source code path of the last active deployment.
     * 
     */
    private String defaultSourceCodePath;
    /**
     * @return The description of the resource.
     * 
     */
    private @Nullable String description;
    /**
     * @return The name of the app.
     * 
     */
    private String name;
    private GetAppAppPendingDeployment pendingDeployment;
    /**
     * @return A list of resources that the app have access to.
     * 
     */
    private @Nullable List<GetAppAppResource> resources;
    private String servicePrincipalClientId;
    /**
     * @return id of the app service principal
     * 
     */
    private Integer servicePrincipalId;
    /**
     * @return name of the app service principal
     * 
     */
    private String servicePrincipalName;
    /**
     * @return The update time of the app.
     * 
     */
    private String updateTime;
    /**
     * @return The email of the user that last updated the app.
     * 
     */
    private String updater;
    /**
     * @return The URL of the app once it is deployed.
     * 
     */
    private String url;

    private GetAppApp() {}
    public GetAppAppActiveDeployment activeDeployment() {
        return this.activeDeployment;
    }
    /**
     * @return attribute
     * 
     */
    public GetAppAppAppStatus appStatus() {
        return this.appStatus;
    }
    /**
     * @return attribute
     * 
     */
    public GetAppAppComputeStatus computeStatus() {
        return this.computeStatus;
    }
    /**
     * @return The creation time of the app.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The email of the user that created the app.
     * 
     */
    public String creator() {
        return this.creator;
    }
    /**
     * @return The default workspace file system path of the source code from which app deployment are created. This field tracks the workspace source code path of the last active deployment.
     * 
     */
    public String defaultSourceCodePath() {
        return this.defaultSourceCodePath;
    }
    /**
     * @return The description of the resource.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The name of the app.
     * 
     */
    public String name() {
        return this.name;
    }
    public GetAppAppPendingDeployment pendingDeployment() {
        return this.pendingDeployment;
    }
    /**
     * @return A list of resources that the app have access to.
     * 
     */
    public List<GetAppAppResource> resources() {
        return this.resources == null ? List.of() : this.resources;
    }
    public String servicePrincipalClientId() {
        return this.servicePrincipalClientId;
    }
    /**
     * @return id of the app service principal
     * 
     */
    public Integer servicePrincipalId() {
        return this.servicePrincipalId;
    }
    /**
     * @return name of the app service principal
     * 
     */
    public String servicePrincipalName() {
        return this.servicePrincipalName;
    }
    /**
     * @return The update time of the app.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return The email of the user that last updated the app.
     * 
     */
    public String updater() {
        return this.updater;
    }
    /**
     * @return The URL of the app once it is deployed.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAppApp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetAppAppActiveDeployment activeDeployment;
        private GetAppAppAppStatus appStatus;
        private GetAppAppComputeStatus computeStatus;
        private String createTime;
        private String creator;
        private String defaultSourceCodePath;
        private @Nullable String description;
        private String name;
        private GetAppAppPendingDeployment pendingDeployment;
        private @Nullable List<GetAppAppResource> resources;
        private String servicePrincipalClientId;
        private Integer servicePrincipalId;
        private String servicePrincipalName;
        private String updateTime;
        private String updater;
        private String url;
        public Builder() {}
        public Builder(GetAppApp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDeployment = defaults.activeDeployment;
    	      this.appStatus = defaults.appStatus;
    	      this.computeStatus = defaults.computeStatus;
    	      this.createTime = defaults.createTime;
    	      this.creator = defaults.creator;
    	      this.defaultSourceCodePath = defaults.defaultSourceCodePath;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.pendingDeployment = defaults.pendingDeployment;
    	      this.resources = defaults.resources;
    	      this.servicePrincipalClientId = defaults.servicePrincipalClientId;
    	      this.servicePrincipalId = defaults.servicePrincipalId;
    	      this.servicePrincipalName = defaults.servicePrincipalName;
    	      this.updateTime = defaults.updateTime;
    	      this.updater = defaults.updater;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder activeDeployment(GetAppAppActiveDeployment activeDeployment) {
            if (activeDeployment == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "activeDeployment");
            }
            this.activeDeployment = activeDeployment;
            return this;
        }
        @CustomType.Setter
        public Builder appStatus(GetAppAppAppStatus appStatus) {
            if (appStatus == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "appStatus");
            }
            this.appStatus = appStatus;
            return this;
        }
        @CustomType.Setter
        public Builder computeStatus(GetAppAppComputeStatus computeStatus) {
            if (computeStatus == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "computeStatus");
            }
            this.computeStatus = computeStatus;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder creator(String creator) {
            if (creator == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "creator");
            }
            this.creator = creator;
            return this;
        }
        @CustomType.Setter
        public Builder defaultSourceCodePath(String defaultSourceCodePath) {
            if (defaultSourceCodePath == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "defaultSourceCodePath");
            }
            this.defaultSourceCodePath = defaultSourceCodePath;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pendingDeployment(GetAppAppPendingDeployment pendingDeployment) {
            if (pendingDeployment == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "pendingDeployment");
            }
            this.pendingDeployment = pendingDeployment;
            return this;
        }
        @CustomType.Setter
        public Builder resources(@Nullable List<GetAppAppResource> resources) {

            this.resources = resources;
            return this;
        }
        public Builder resources(GetAppAppResource... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder servicePrincipalClientId(String servicePrincipalClientId) {
            if (servicePrincipalClientId == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "servicePrincipalClientId");
            }
            this.servicePrincipalClientId = servicePrincipalClientId;
            return this;
        }
        @CustomType.Setter
        public Builder servicePrincipalId(Integer servicePrincipalId) {
            if (servicePrincipalId == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "servicePrincipalId");
            }
            this.servicePrincipalId = servicePrincipalId;
            return this;
        }
        @CustomType.Setter
        public Builder servicePrincipalName(String servicePrincipalName) {
            if (servicePrincipalName == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "servicePrincipalName");
            }
            this.servicePrincipalName = servicePrincipalName;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder updater(String updater) {
            if (updater == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "updater");
            }
            this.updater = updater;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetAppApp", "url");
            }
            this.url = url;
            return this;
        }
        public GetAppApp build() {
            final var _resultValue = new GetAppApp();
            _resultValue.activeDeployment = activeDeployment;
            _resultValue.appStatus = appStatus;
            _resultValue.computeStatus = computeStatus;
            _resultValue.createTime = createTime;
            _resultValue.creator = creator;
            _resultValue.defaultSourceCodePath = defaultSourceCodePath;
            _resultValue.description = description;
            _resultValue.name = name;
            _resultValue.pendingDeployment = pendingDeployment;
            _resultValue.resources = resources;
            _resultValue.servicePrincipalClientId = servicePrincipalClientId;
            _resultValue.servicePrincipalId = servicePrincipalId;
            _resultValue.servicePrincipalName = servicePrincipalName;
            _resultValue.updateTime = updateTime;
            _resultValue.updater = updater;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
