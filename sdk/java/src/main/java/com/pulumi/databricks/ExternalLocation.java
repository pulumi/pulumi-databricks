// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.ExternalLocationArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.ExternalLocationState;
import com.pulumi.databricks.outputs.ExternalLocationEncryptionDetails;
import com.pulumi.databricks.outputs.ExternalLocationFileEventQueue;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * To work with external tables, Unity Catalog introduces two new objects to access and work with external cloud storage:
 * 
 * - databricks.StorageCredential represent authentication methods to access cloud storage (e.g. an IAM role for Amazon S3 or a service principal for Azure Storage). Storage credentials are access-controlled to determine which users can use the credential.
 * - `databricks.ExternalLocation` are objects that combine a cloud storage path with a Storage Credential that can be used to access the location.
 * 
 * &gt; This resource can only be used with a workspace-level provider!
 * 
 * ## Example Usage
 * 
 * For AWS
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.StorageCredential;
 * import com.pulumi.databricks.StorageCredentialArgs;
 * import com.pulumi.databricks.inputs.StorageCredentialAwsIamRoleArgs;
 * import com.pulumi.databricks.ExternalLocation;
 * import com.pulumi.databricks.ExternalLocationArgs;
 * import com.pulumi.databricks.Grants;
 * import com.pulumi.databricks.GrantsArgs;
 * import com.pulumi.databricks.inputs.GrantsGrantArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var external = new StorageCredential("external", StorageCredentialArgs.builder()
 *             .name(externalDataAccess.name())
 *             .awsIamRole(StorageCredentialAwsIamRoleArgs.builder()
 *                 .roleArn(externalDataAccess.arn())
 *                 .build())
 *             .comment("Managed by TF")
 *             .build());
 * 
 *         var some = new ExternalLocation("some", ExternalLocationArgs.builder()
 *             .name("external")
 *             .url(String.format("s3://%s/some", externalAwsS3Bucket.id()))
 *             .credentialName(external.id())
 *             .comment("Managed by TF")
 *             .build());
 * 
 *         var someGrants = new Grants("someGrants", GrantsArgs.builder()
 *             .externalLocation(some.id())
 *             .grants(GrantsGrantArgs.builder()
 *                 .principal("Data Engineers")
 *                 .privileges(                
 *                     "CREATE_EXTERNAL_TABLE",
 *                     "READ_FILES")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * For Azure
 * 
 * ## Import
 * 
 * This resource can be imported by `name`:
 * 
 * hcl
 * 
 * import {
 * 
 *   to = databricks_external_location.this
 * 
 *   id = &#34;&lt;name&gt;&#34;
 * 
 * }
 * 
 * Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import databricks:index/externalLocation:ExternalLocation this &lt;name&gt;
 * ```
 * 
 */
@ResourceType(type="databricks:index/externalLocation:ExternalLocation")
public class ExternalLocation extends com.pulumi.resources.CustomResource {
    @Export(name="browseOnly", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> browseOnly;

    public Output<Boolean> browseOnly() {
        return this.browseOnly;
    }
    /**
     * User-supplied free-form text.
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return User-supplied free-form text.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * Time at which this external location was created, in epoch milliseconds.
     * 
     */
    @Export(name="createdAt", refs={Integer.class}, tree="[0]")
    private Output<Integer> createdAt;

    /**
     * @return Time at which this external location was created, in epoch milliseconds.
     * 
     */
    public Output<Integer> createdAt() {
        return this.createdAt;
    }
    /**
     * Username of external location creator.
     * 
     */
    @Export(name="createdBy", refs={String.class}, tree="[0]")
    private Output<String> createdBy;

    /**
     * @return Username of external location creator.
     * 
     */
    public Output<String> createdBy() {
        return this.createdBy;
    }
    /**
     * Unique ID of the location&#39;s storage credential.
     * 
     */
    @Export(name="credentialId", refs={String.class}, tree="[0]")
    private Output<String> credentialId;

    /**
     * @return Unique ID of the location&#39;s storage credential.
     * 
     */
    public Output<String> credentialId() {
        return this.credentialId;
    }
    /**
     * Name of the databricks.StorageCredential to use with this external location.
     * 
     */
    @Export(name="credentialName", refs={String.class}, tree="[0]")
    private Output<String> credentialName;

    /**
     * @return Name of the databricks.StorageCredential to use with this external location.
     * 
     */
    public Output<String> credentialName() {
        return this.credentialName;
    }
    /**
     * indicates if managed file events are enabled for this external location.  Requires `file_event_queue` block.
     * 
     */
    @Export(name="enableFileEvents", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableFileEvents;

    /**
     * @return indicates if managed file events are enabled for this external location.  Requires `file_event_queue` block.
     * 
     */
    public Output<Optional<Boolean>> enableFileEvents() {
        return Codegen.optional(this.enableFileEvents);
    }
    @Export(name="encryptionDetails", refs={ExternalLocationEncryptionDetails.class}, tree="[0]")
    private Output</* @Nullable */ ExternalLocationEncryptionDetails> encryptionDetails;

    public Output<Optional<ExternalLocationEncryptionDetails>> encryptionDetails() {
        return Codegen.optional(this.encryptionDetails);
    }
    /**
     * Indicates whether fallback mode is enabled for this external location. When fallback mode is enabled (disabled by default), the access to the location falls back to cluster credentials if UC credentials are not sufficient.
     * 
     */
    @Export(name="fallback", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> fallback;

    /**
     * @return Indicates whether fallback mode is enabled for this external location. When fallback mode is enabled (disabled by default), the access to the location falls back to cluster credentials if UC credentials are not sufficient.
     * 
     */
    public Output<Optional<Boolean>> fallback() {
        return Codegen.optional(this.fallback);
    }
    @Export(name="fileEventQueue", refs={ExternalLocationFileEventQueue.class}, tree="[0]")
    private Output</* @Nullable */ ExternalLocationFileEventQueue> fileEventQueue;

    public Output<Optional<ExternalLocationFileEventQueue>> fileEventQueue() {
        return Codegen.optional(this.fileEventQueue);
    }
    /**
     * Destroy external location regardless of its dependents.
     * 
     */
    @Export(name="forceDestroy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceDestroy;

    /**
     * @return Destroy external location regardless of its dependents.
     * 
     */
    public Output<Optional<Boolean>> forceDestroy() {
        return Codegen.optional(this.forceDestroy);
    }
    /**
     * Update external location regardless of its dependents.
     * 
     */
    @Export(name="forceUpdate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceUpdate;

    /**
     * @return Update external location regardless of its dependents.
     * 
     */
    public Output<Optional<Boolean>> forceUpdate() {
        return Codegen.optional(this.forceUpdate);
    }
    /**
     * Whether the external location is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the external location to `ISOLATION_MODE_ISOLATED` will automatically allow access from the current workspace.
     * 
     */
    @Export(name="isolationMode", refs={String.class}, tree="[0]")
    private Output<String> isolationMode;

    /**
     * @return Whether the external location is accessible from all workspaces or a specific set of workspaces. Can be `ISOLATION_MODE_ISOLATED` or `ISOLATION_MODE_OPEN`. Setting the external location to `ISOLATION_MODE_ISOLATED` will automatically allow access from the current workspace.
     * 
     */
    public Output<String> isolationMode() {
        return this.isolationMode;
    }
    @Export(name="metastoreId", refs={String.class}, tree="[0]")
    private Output<String> metastoreId;

    public Output<String> metastoreId() {
        return this.metastoreId;
    }
    /**
     * Name of External Location, which must be unique within the databricks_metastore. Change forces creation of a new resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of External Location, which must be unique within the databricks_metastore. Change forces creation of a new resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Username/groupname/sp application_id of the external location owner.
     * 
     */
    @Export(name="owner", refs={String.class}, tree="[0]")
    private Output<String> owner;

    /**
     * @return Username/groupname/sp application_id of the external location owner.
     * 
     */
    public Output<String> owner() {
        return this.owner;
    }
    /**
     * Indicates whether the external location is read-only.
     * 
     */
    @Export(name="readOnly", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> readOnly;

    /**
     * @return Indicates whether the external location is read-only.
     * 
     */
    public Output<Optional<Boolean>> readOnly() {
        return Codegen.optional(this.readOnly);
    }
    /**
     * Suppress validation errors if any &amp; force save the external location
     * 
     */
    @Export(name="skipValidation", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> skipValidation;

    /**
     * @return Suppress validation errors if any &amp; force save the external location
     * 
     */
    public Output<Optional<Boolean>> skipValidation() {
        return Codegen.optional(this.skipValidation);
    }
    /**
     * Time at which external location this was last modified, in epoch milliseconds.
     * 
     */
    @Export(name="updatedAt", refs={Integer.class}, tree="[0]")
    private Output<Integer> updatedAt;

    /**
     * @return Time at which external location this was last modified, in epoch milliseconds.
     * 
     */
    public Output<Integer> updatedAt() {
        return this.updatedAt;
    }
    /**
     * Username of user who last modified the external location.
     * 
     */
    @Export(name="updatedBy", refs={String.class}, tree="[0]")
    private Output<String> updatedBy;

    /**
     * @return Username of user who last modified the external location.
     * 
     */
    public Output<String> updatedBy() {
        return this.updatedBy;
    }
    /**
     * Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]{@literal @}[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]{@literal @}[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ExternalLocation(java.lang.String name) {
        this(name, ExternalLocationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ExternalLocation(java.lang.String name, ExternalLocationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ExternalLocation(java.lang.String name, ExternalLocationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/externalLocation:ExternalLocation", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ExternalLocation(java.lang.String name, Output<java.lang.String> id, @Nullable ExternalLocationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/externalLocation:ExternalLocation", name, state, makeResourceOptions(options, id), false);
    }

    private static ExternalLocationArgs makeArgs(ExternalLocationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ExternalLocationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ExternalLocation get(java.lang.String name, Output<java.lang.String> id, @Nullable ExternalLocationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ExternalLocation(name, id, state, options);
    }
}
