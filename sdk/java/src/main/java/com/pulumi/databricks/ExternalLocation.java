// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.ExternalLocationArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.ExternalLocationState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * To work with external tables, Unity Catalog introduces two new objects to access and work with external cloud storage:
 * 
 * - databricks.StorageCredential represent authentication methods to access cloud storage (e.g. an IAM role for Amazon S3 or a service principal for Azure Storage). Storage credentials are access-controlled to determine which users can use the credential.
 * - `databricks.ExternalLocation` are objects that combine a cloud storage path with a Storage Credential that can be used to access the location.
 * 
 * ## Import
 * 
 * This resource can be imported by namebash
 * 
 * ```sh
 *  $ pulumi import databricks:index/externalLocation:ExternalLocation this &lt;name&gt;
 * ```
 * 
 */
@ResourceType(type="databricks:index/externalLocation:ExternalLocation")
public class ExternalLocation extends com.pulumi.resources.CustomResource {
    /**
     * User-supplied free-form text.
     * 
     */
    @Export(name="comment", type=String.class, parameters={})
    private Output</* @Nullable */ String> comment;

    /**
     * @return User-supplied free-form text.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * Name of the databricks.StorageCredential to use with this External Location.
     * 
     */
    @Export(name="credentialName", type=String.class, parameters={})
    private Output<String> credentialName;

    /**
     * @return Name of the databricks.StorageCredential to use with this External Location.
     * 
     */
    public Output<String> credentialName() {
        return this.credentialName;
    }
    /**
     * Destroy external location regardless of its dependents.
     * 
     */
    @Export(name="forceDestroy", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> forceDestroy;

    /**
     * @return Destroy external location regardless of its dependents.
     * 
     */
    public Output<Optional<Boolean>> forceDestroy() {
        return Codegen.optional(this.forceDestroy);
    }
    @Export(name="metastoreId", type=String.class, parameters={})
    private Output<String> metastoreId;

    public Output<String> metastoreId() {
        return this.metastoreId;
    }
    /**
     * Name of External Location, which must be unique within the databricks_metastore. Change forces creation of a new resource.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of External Location, which must be unique within the databricks_metastore. Change forces creation of a new resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Username/groupname/sp application_id of the external Location owner.
     * 
     */
    @Export(name="owner", type=String.class, parameters={})
    private Output<String> owner;

    /**
     * @return Username/groupname/sp application_id of the external Location owner.
     * 
     */
    public Output<String> owner() {
        return this.owner;
    }
    /**
     * Indicates whether the external location is read-only.
     * 
     */
    @Export(name="readOnly", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> readOnly;

    /**
     * @return Indicates whether the external location is read-only.
     * 
     */
    public Output<Optional<Boolean>> readOnly() {
        return Codegen.optional(this.readOnly);
    }
    /**
     * Suppress validation errors if any &amp; force save the external location
     * 
     */
    @Export(name="skipValidation", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> skipValidation;

    /**
     * @return Suppress validation errors if any &amp; force save the external location
     * 
     */
    public Output<Optional<Boolean>> skipValidation() {
        return Codegen.optional(this.skipValidation);
    }
    /**
     * Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
     * 
     */
    @Export(name="url", type=String.class, parameters={})
    private Output<String> url;

    /**
     * @return Path URL in cloud storage, of the form: `s3://[bucket-host]/[bucket-dir]` (AWS), `abfss://[user]@[host]/[path]` (Azure), `gs://[bucket-host]/[bucket-dir]` (GCP).
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ExternalLocation(String name) {
        this(name, ExternalLocationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ExternalLocation(String name, ExternalLocationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ExternalLocation(String name, ExternalLocationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/externalLocation:ExternalLocation", name, args == null ? ExternalLocationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ExternalLocation(String name, Output<String> id, @Nullable ExternalLocationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/externalLocation:ExternalLocation", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ExternalLocation get(String name, Output<String> id, @Nullable ExternalLocationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ExternalLocation(name, id, state, options);
    }
}
