// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.AppsSettingsCustomTemplateManifestArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppsSettingsCustomTemplateState extends com.pulumi.resources.ResourceArgs {

    public static final AppsSettingsCustomTemplateState Empty = new AppsSettingsCustomTemplateState();

    /**
     * (string)
     * 
     */
    @Import(name="creator")
    private @Nullable Output<String> creator;

    /**
     * @return (string)
     * 
     */
    public Optional<Output<String>> creator() {
        return Optional.ofNullable(this.creator);
    }

    /**
     * The description of the template
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the template
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Git provider of the template
     * 
     */
    @Import(name="gitProvider")
    private @Nullable Output<String> gitProvider;

    /**
     * @return The Git provider of the template
     * 
     */
    public Optional<Output<String>> gitProvider() {
        return Optional.ofNullable(this.gitProvider);
    }

    /**
     * The Git repository URL that the template resides in
     * 
     */
    @Import(name="gitRepo")
    private @Nullable Output<String> gitRepo;

    /**
     * @return The Git repository URL that the template resides in
     * 
     */
    public Optional<Output<String>> gitRepo() {
        return Optional.ofNullable(this.gitRepo);
    }

    /**
     * The manifest of the template. It defines fields and default values when installing the template
     * 
     */
    @Import(name="manifest")
    private @Nullable Output<AppsSettingsCustomTemplateManifestArgs> manifest;

    /**
     * @return The manifest of the template. It defines fields and default values when installing the template
     * 
     */
    public Optional<Output<AppsSettingsCustomTemplateManifestArgs>> manifest() {
        return Optional.ofNullable(this.manifest);
    }

    /**
     * The name of the template. It must contain only alphanumeric characters, hyphens, underscores, and whitespaces.
     * It must be unique within the workspace
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the template. It must contain only alphanumeric characters, hyphens, underscores, and whitespaces.
     * It must be unique within the workspace
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The path to the template within the Git repository
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The path to the template within the Git repository
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Workspace ID of the resource
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private AppsSettingsCustomTemplateState() {}

    private AppsSettingsCustomTemplateState(AppsSettingsCustomTemplateState $) {
        this.creator = $.creator;
        this.description = $.description;
        this.gitProvider = $.gitProvider;
        this.gitRepo = $.gitRepo;
        this.manifest = $.manifest;
        this.name = $.name;
        this.path = $.path;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppsSettingsCustomTemplateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppsSettingsCustomTemplateState $;

        public Builder() {
            $ = new AppsSettingsCustomTemplateState();
        }

        public Builder(AppsSettingsCustomTemplateState defaults) {
            $ = new AppsSettingsCustomTemplateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param creator (string)
         * 
         * @return builder
         * 
         */
        public Builder creator(@Nullable Output<String> creator) {
            $.creator = creator;
            return this;
        }

        /**
         * @param creator (string)
         * 
         * @return builder
         * 
         */
        public Builder creator(String creator) {
            return creator(Output.of(creator));
        }

        /**
         * @param description The description of the template
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param gitProvider The Git provider of the template
         * 
         * @return builder
         * 
         */
        public Builder gitProvider(@Nullable Output<String> gitProvider) {
            $.gitProvider = gitProvider;
            return this;
        }

        /**
         * @param gitProvider The Git provider of the template
         * 
         * @return builder
         * 
         */
        public Builder gitProvider(String gitProvider) {
            return gitProvider(Output.of(gitProvider));
        }

        /**
         * @param gitRepo The Git repository URL that the template resides in
         * 
         * @return builder
         * 
         */
        public Builder gitRepo(@Nullable Output<String> gitRepo) {
            $.gitRepo = gitRepo;
            return this;
        }

        /**
         * @param gitRepo The Git repository URL that the template resides in
         * 
         * @return builder
         * 
         */
        public Builder gitRepo(String gitRepo) {
            return gitRepo(Output.of(gitRepo));
        }

        /**
         * @param manifest The manifest of the template. It defines fields and default values when installing the template
         * 
         * @return builder
         * 
         */
        public Builder manifest(@Nullable Output<AppsSettingsCustomTemplateManifestArgs> manifest) {
            $.manifest = manifest;
            return this;
        }

        /**
         * @param manifest The manifest of the template. It defines fields and default values when installing the template
         * 
         * @return builder
         * 
         */
        public Builder manifest(AppsSettingsCustomTemplateManifestArgs manifest) {
            return manifest(Output.of(manifest));
        }

        /**
         * @param name The name of the template. It must contain only alphanumeric characters, hyphens, underscores, and whitespaces.
         * It must be unique within the workspace
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the template. It must contain only alphanumeric characters, hyphens, underscores, and whitespaces.
         * It must be unique within the workspace
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param path The path to the template within the Git repository
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path to the template within the Git repository
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public AppsSettingsCustomTemplateState build() {
            return $;
        }
    }

}
