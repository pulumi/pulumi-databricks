// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetFunctionsFunctionInputParamArgs;
import com.pulumi.databricks.inputs.GetFunctionsFunctionReturnParamArgs;
import com.pulumi.databricks.inputs.GetFunctionsFunctionRoutineDependencyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFunctionsFunctionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetFunctionsFunctionArgs Empty = new GetFunctionsFunctionArgs();

    @Import(name="browseOnly")
    private @Nullable Output<Boolean> browseOnly;

    public Optional<Output<Boolean>> browseOnly() {
        return Optional.ofNullable(this.browseOnly);
    }

    @Import(name="catalogName")
    private @Nullable Output<String> catalogName;

    public Optional<Output<String>> catalogName() {
        return Optional.ofNullable(this.catalogName);
    }

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="createdAt")
    private @Nullable Output<Integer> createdAt;

    public Optional<Output<Integer>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    @Import(name="dataType")
    private @Nullable Output<String> dataType;

    public Optional<Output<String>> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    @Import(name="externalLanguage")
    private @Nullable Output<String> externalLanguage;

    public Optional<Output<String>> externalLanguage() {
        return Optional.ofNullable(this.externalLanguage);
    }

    @Import(name="externalName")
    private @Nullable Output<String> externalName;

    public Optional<Output<String>> externalName() {
        return Optional.ofNullable(this.externalName);
    }

    @Import(name="fullDataType")
    private @Nullable Output<String> fullDataType;

    public Optional<Output<String>> fullDataType() {
        return Optional.ofNullable(this.fullDataType);
    }

    @Import(name="fullName")
    private @Nullable Output<String> fullName;

    public Optional<Output<String>> fullName() {
        return Optional.ofNullable(this.fullName);
    }

    @Import(name="functionId")
    private @Nullable Output<String> functionId;

    public Optional<Output<String>> functionId() {
        return Optional.ofNullable(this.functionId);
    }

    @Import(name="inputParams")
    private @Nullable Output<List<GetFunctionsFunctionInputParamArgs>> inputParams;

    public Optional<Output<List<GetFunctionsFunctionInputParamArgs>>> inputParams() {
        return Optional.ofNullable(this.inputParams);
    }

    @Import(name="isDeterministic")
    private @Nullable Output<Boolean> isDeterministic;

    public Optional<Output<Boolean>> isDeterministic() {
        return Optional.ofNullable(this.isDeterministic);
    }

    @Import(name="isNullCall")
    private @Nullable Output<Boolean> isNullCall;

    public Optional<Output<Boolean>> isNullCall() {
        return Optional.ofNullable(this.isNullCall);
    }

    @Import(name="metastoreId")
    private @Nullable Output<String> metastoreId;

    public Optional<Output<String>> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="parameterStyle")
    private @Nullable Output<String> parameterStyle;

    public Optional<Output<String>> parameterStyle() {
        return Optional.ofNullable(this.parameterStyle);
    }

    @Import(name="properties")
    private @Nullable Output<String> properties;

    public Optional<Output<String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    @Import(name="returnParams")
    private @Nullable Output<List<GetFunctionsFunctionReturnParamArgs>> returnParams;

    public Optional<Output<List<GetFunctionsFunctionReturnParamArgs>>> returnParams() {
        return Optional.ofNullable(this.returnParams);
    }

    @Import(name="routineBody")
    private @Nullable Output<String> routineBody;

    public Optional<Output<String>> routineBody() {
        return Optional.ofNullable(this.routineBody);
    }

    @Import(name="routineDefinition")
    private @Nullable Output<String> routineDefinition;

    public Optional<Output<String>> routineDefinition() {
        return Optional.ofNullable(this.routineDefinition);
    }

    @Import(name="routineDependencies")
    private @Nullable Output<List<GetFunctionsFunctionRoutineDependencyArgs>> routineDependencies;

    public Optional<Output<List<GetFunctionsFunctionRoutineDependencyArgs>>> routineDependencies() {
        return Optional.ofNullable(this.routineDependencies);
    }

    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    @Import(name="securityType")
    private @Nullable Output<String> securityType;

    public Optional<Output<String>> securityType() {
        return Optional.ofNullable(this.securityType);
    }

    @Import(name="specificName")
    private @Nullable Output<String> specificName;

    public Optional<Output<String>> specificName() {
        return Optional.ofNullable(this.specificName);
    }

    @Import(name="sqlDataAccess")
    private @Nullable Output<String> sqlDataAccess;

    public Optional<Output<String>> sqlDataAccess() {
        return Optional.ofNullable(this.sqlDataAccess);
    }

    @Import(name="sqlPath")
    private @Nullable Output<String> sqlPath;

    public Optional<Output<String>> sqlPath() {
        return Optional.ofNullable(this.sqlPath);
    }

    @Import(name="updatedAt")
    private @Nullable Output<Integer> updatedAt;

    public Optional<Output<Integer>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    @Import(name="updatedBy")
    private @Nullable Output<String> updatedBy;

    public Optional<Output<String>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    private GetFunctionsFunctionArgs() {}

    private GetFunctionsFunctionArgs(GetFunctionsFunctionArgs $) {
        this.browseOnly = $.browseOnly;
        this.catalogName = $.catalogName;
        this.comment = $.comment;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.dataType = $.dataType;
        this.externalLanguage = $.externalLanguage;
        this.externalName = $.externalName;
        this.fullDataType = $.fullDataType;
        this.fullName = $.fullName;
        this.functionId = $.functionId;
        this.inputParams = $.inputParams;
        this.isDeterministic = $.isDeterministic;
        this.isNullCall = $.isNullCall;
        this.metastoreId = $.metastoreId;
        this.name = $.name;
        this.owner = $.owner;
        this.parameterStyle = $.parameterStyle;
        this.properties = $.properties;
        this.returnParams = $.returnParams;
        this.routineBody = $.routineBody;
        this.routineDefinition = $.routineDefinition;
        this.routineDependencies = $.routineDependencies;
        this.schemaName = $.schemaName;
        this.securityType = $.securityType;
        this.specificName = $.specificName;
        this.sqlDataAccess = $.sqlDataAccess;
        this.sqlPath = $.sqlPath;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFunctionsFunctionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFunctionsFunctionArgs $;

        public Builder() {
            $ = new GetFunctionsFunctionArgs();
        }

        public Builder(GetFunctionsFunctionArgs defaults) {
            $ = new GetFunctionsFunctionArgs(Objects.requireNonNull(defaults));
        }

        public Builder browseOnly(@Nullable Output<Boolean> browseOnly) {
            $.browseOnly = browseOnly;
            return this;
        }

        public Builder browseOnly(Boolean browseOnly) {
            return browseOnly(Output.of(browseOnly));
        }

        public Builder catalogName(@Nullable Output<String> catalogName) {
            $.catalogName = catalogName;
            return this;
        }

        public Builder catalogName(String catalogName) {
            return catalogName(Output.of(catalogName));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder createdAt(@Nullable Output<Integer> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(Integer createdAt) {
            return createdAt(Output.of(createdAt));
        }

        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        public Builder dataType(@Nullable Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        public Builder externalLanguage(@Nullable Output<String> externalLanguage) {
            $.externalLanguage = externalLanguage;
            return this;
        }

        public Builder externalLanguage(String externalLanguage) {
            return externalLanguage(Output.of(externalLanguage));
        }

        public Builder externalName(@Nullable Output<String> externalName) {
            $.externalName = externalName;
            return this;
        }

        public Builder externalName(String externalName) {
            return externalName(Output.of(externalName));
        }

        public Builder fullDataType(@Nullable Output<String> fullDataType) {
            $.fullDataType = fullDataType;
            return this;
        }

        public Builder fullDataType(String fullDataType) {
            return fullDataType(Output.of(fullDataType));
        }

        public Builder fullName(@Nullable Output<String> fullName) {
            $.fullName = fullName;
            return this;
        }

        public Builder fullName(String fullName) {
            return fullName(Output.of(fullName));
        }

        public Builder functionId(@Nullable Output<String> functionId) {
            $.functionId = functionId;
            return this;
        }

        public Builder functionId(String functionId) {
            return functionId(Output.of(functionId));
        }

        public Builder inputParams(@Nullable Output<List<GetFunctionsFunctionInputParamArgs>> inputParams) {
            $.inputParams = inputParams;
            return this;
        }

        public Builder inputParams(List<GetFunctionsFunctionInputParamArgs> inputParams) {
            return inputParams(Output.of(inputParams));
        }

        public Builder inputParams(GetFunctionsFunctionInputParamArgs... inputParams) {
            return inputParams(List.of(inputParams));
        }

        public Builder isDeterministic(@Nullable Output<Boolean> isDeterministic) {
            $.isDeterministic = isDeterministic;
            return this;
        }

        public Builder isDeterministic(Boolean isDeterministic) {
            return isDeterministic(Output.of(isDeterministic));
        }

        public Builder isNullCall(@Nullable Output<Boolean> isNullCall) {
            $.isNullCall = isNullCall;
            return this;
        }

        public Builder isNullCall(Boolean isNullCall) {
            return isNullCall(Output.of(isNullCall));
        }

        public Builder metastoreId(@Nullable Output<String> metastoreId) {
            $.metastoreId = metastoreId;
            return this;
        }

        public Builder metastoreId(String metastoreId) {
            return metastoreId(Output.of(metastoreId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder parameterStyle(@Nullable Output<String> parameterStyle) {
            $.parameterStyle = parameterStyle;
            return this;
        }

        public Builder parameterStyle(String parameterStyle) {
            return parameterStyle(Output.of(parameterStyle));
        }

        public Builder properties(@Nullable Output<String> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(String properties) {
            return properties(Output.of(properties));
        }

        public Builder returnParams(@Nullable Output<List<GetFunctionsFunctionReturnParamArgs>> returnParams) {
            $.returnParams = returnParams;
            return this;
        }

        public Builder returnParams(List<GetFunctionsFunctionReturnParamArgs> returnParams) {
            return returnParams(Output.of(returnParams));
        }

        public Builder returnParams(GetFunctionsFunctionReturnParamArgs... returnParams) {
            return returnParams(List.of(returnParams));
        }

        public Builder routineBody(@Nullable Output<String> routineBody) {
            $.routineBody = routineBody;
            return this;
        }

        public Builder routineBody(String routineBody) {
            return routineBody(Output.of(routineBody));
        }

        public Builder routineDefinition(@Nullable Output<String> routineDefinition) {
            $.routineDefinition = routineDefinition;
            return this;
        }

        public Builder routineDefinition(String routineDefinition) {
            return routineDefinition(Output.of(routineDefinition));
        }

        public Builder routineDependencies(@Nullable Output<List<GetFunctionsFunctionRoutineDependencyArgs>> routineDependencies) {
            $.routineDependencies = routineDependencies;
            return this;
        }

        public Builder routineDependencies(List<GetFunctionsFunctionRoutineDependencyArgs> routineDependencies) {
            return routineDependencies(Output.of(routineDependencies));
        }

        public Builder routineDependencies(GetFunctionsFunctionRoutineDependencyArgs... routineDependencies) {
            return routineDependencies(List.of(routineDependencies));
        }

        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public Builder securityType(@Nullable Output<String> securityType) {
            $.securityType = securityType;
            return this;
        }

        public Builder securityType(String securityType) {
            return securityType(Output.of(securityType));
        }

        public Builder specificName(@Nullable Output<String> specificName) {
            $.specificName = specificName;
            return this;
        }

        public Builder specificName(String specificName) {
            return specificName(Output.of(specificName));
        }

        public Builder sqlDataAccess(@Nullable Output<String> sqlDataAccess) {
            $.sqlDataAccess = sqlDataAccess;
            return this;
        }

        public Builder sqlDataAccess(String sqlDataAccess) {
            return sqlDataAccess(Output.of(sqlDataAccess));
        }

        public Builder sqlPath(@Nullable Output<String> sqlPath) {
            $.sqlPath = sqlPath;
            return this;
        }

        public Builder sqlPath(String sqlPath) {
            return sqlPath(Output.of(sqlPath));
        }

        public Builder updatedAt(@Nullable Output<Integer> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(Integer updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public Builder updatedBy(@Nullable Output<String> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        public Builder updatedBy(String updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        public GetFunctionsFunctionArgs build() {
            return $;
        }
    }

}
