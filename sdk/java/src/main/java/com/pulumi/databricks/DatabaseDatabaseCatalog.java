// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.DatabaseDatabaseCatalogArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.DatabaseDatabaseCatalogState;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Database Catalogs are databases inside a Lakebase Database Instance which are synced into a Postgres Catalog inside Unity Catalog.
 * 
 * ## Example Usage
 * 
 * ### Example
 * 
 * This example creates a Database Catalog based on an existing database in the Database Instance
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.DatabaseDatabaseCatalog;
 * import com.pulumi.databricks.DatabaseDatabaseCatalogArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var this_ = new DatabaseDatabaseCatalog("this", DatabaseDatabaseCatalogArgs.builder()
 *             .name("my_registered_catalog")
 *             .databaseInstanceName("my-database-instance")
 *             .databaseName("databricks_postgres")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * This example creates a Database Catalog along with a new database inside an existing Database Instance
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.DatabaseDatabaseCatalog;
 * import com.pulumi.databricks.DatabaseDatabaseCatalogArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var this_ = new DatabaseDatabaseCatalog("this", DatabaseDatabaseCatalogArgs.builder()
 *             .name("my_registered_catalog")
 *             .databaseInstanceName("my-database-instance")
 *             .databaseName("new_registered_catalog_database")
 *             .createDatabaseIfNotExists(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * This example creates a DatabaseInstance and then a Database Catalog inside it
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.DatabaseInstance;
 * import com.pulumi.databricks.DatabaseInstanceArgs;
 * import com.pulumi.databricks.DatabaseDatabaseCatalog;
 * import com.pulumi.databricks.DatabaseDatabaseCatalogArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var instance = new DatabaseInstance("instance", DatabaseInstanceArgs.builder()
 *             .name("my-database-instance")
 *             .capacity("CU_1")
 *             .build());
 * 
 *         var catalog = new DatabaseDatabaseCatalog("catalog", DatabaseDatabaseCatalogArgs.builder()
 *             .name("my_registered_catalog")
 *             .databaseInstanceName(instance.name())
 *             .databaseName("new_registered_catalog_database")
 *             .createDatabaseIfNotExists(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * As of Pulumi v1.5, resources can be imported through configuration.
 * 
 * hcl
 * 
 * import {
 * 
 *   id = name
 * 
 *   to = databricks_database_database_catalog.this
 * 
 * }
 * 
 * If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
 * 
 * ```sh
 * $ pulumi import databricks:index/databaseDatabaseCatalog:DatabaseDatabaseCatalog databricks_database_database_catalog name
 * ```
 * 
 */
@ResourceType(type="databricks:index/databaseDatabaseCatalog:DatabaseDatabaseCatalog")
public class DatabaseDatabaseCatalog extends com.pulumi.resources.CustomResource {
    @Export(name="createDatabaseIfNotExists", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> createDatabaseIfNotExists;

    public Output<Boolean> createDatabaseIfNotExists() {
        return this.createDatabaseIfNotExists;
    }
    /**
     * The name of the DatabaseInstance housing the database
     * 
     */
    @Export(name="databaseInstanceName", refs={String.class}, tree="[0]")
    private Output<String> databaseInstanceName;

    /**
     * @return The name of the DatabaseInstance housing the database
     * 
     */
    public Output<String> databaseInstanceName() {
        return this.databaseInstanceName;
    }
    /**
     * The name of the database (in a instance) associated with the catalog
     * 
     */
    @Export(name="databaseName", refs={String.class}, tree="[0]")
    private Output<String> databaseName;

    /**
     * @return The name of the database (in a instance) associated with the catalog
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }
    /**
     * The name of the catalog in UC
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the catalog in UC
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * (string)
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return (string)
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DatabaseDatabaseCatalog(java.lang.String name) {
        this(name, DatabaseDatabaseCatalogArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DatabaseDatabaseCatalog(java.lang.String name, DatabaseDatabaseCatalogArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DatabaseDatabaseCatalog(java.lang.String name, DatabaseDatabaseCatalogArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/databaseDatabaseCatalog:DatabaseDatabaseCatalog", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DatabaseDatabaseCatalog(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseDatabaseCatalogState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/databaseDatabaseCatalog:DatabaseDatabaseCatalog", name, state, makeResourceOptions(options, id), false);
    }

    private static DatabaseDatabaseCatalogArgs makeArgs(DatabaseDatabaseCatalogArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DatabaseDatabaseCatalogArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DatabaseDatabaseCatalog get(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseDatabaseCatalogState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DatabaseDatabaseCatalog(name, id, state, options);
    }
}
