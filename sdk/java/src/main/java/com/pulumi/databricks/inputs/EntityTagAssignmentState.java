// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntityTagAssignmentState extends com.pulumi.resources.ResourceArgs {

    public static final EntityTagAssignmentState Empty = new EntityTagAssignmentState();

    /**
     * The fully qualified name of the entity to which the tag is assigned
     * 
     */
    @Import(name="entityName")
    private @Nullable Output<String> entityName;

    /**
     * @return The fully qualified name of the entity to which the tag is assigned
     * 
     */
    public Optional<Output<String>> entityName() {
        return Optional.ofNullable(this.entityName);
    }

    /**
     * The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
     * 
     */
    @Import(name="entityType")
    private @Nullable Output<String> entityType;

    /**
     * @return The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
     * 
     */
    public Optional<Output<String>> entityType() {
        return Optional.ofNullable(this.entityType);
    }

    /**
     * The key of the tag
     * 
     */
    @Import(name="tagKey")
    private @Nullable Output<String> tagKey;

    /**
     * @return The key of the tag
     * 
     */
    public Optional<Output<String>> tagKey() {
        return Optional.ofNullable(this.tagKey);
    }

    /**
     * The value of the tag
     * 
     */
    @Import(name="tagValue")
    private @Nullable Output<String> tagValue;

    /**
     * @return The value of the tag
     * 
     */
    public Optional<Output<String>> tagValue() {
        return Optional.ofNullable(this.tagValue);
    }

    /**
     * Workspace ID of the resource
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private EntityTagAssignmentState() {}

    private EntityTagAssignmentState(EntityTagAssignmentState $) {
        this.entityName = $.entityName;
        this.entityType = $.entityType;
        this.tagKey = $.tagKey;
        this.tagValue = $.tagValue;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntityTagAssignmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntityTagAssignmentState $;

        public Builder() {
            $ = new EntityTagAssignmentState();
        }

        public Builder(EntityTagAssignmentState defaults) {
            $ = new EntityTagAssignmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param entityName The fully qualified name of the entity to which the tag is assigned
         * 
         * @return builder
         * 
         */
        public Builder entityName(@Nullable Output<String> entityName) {
            $.entityName = entityName;
            return this;
        }

        /**
         * @param entityName The fully qualified name of the entity to which the tag is assigned
         * 
         * @return builder
         * 
         */
        public Builder entityName(String entityName) {
            return entityName(Output.of(entityName));
        }

        /**
         * @param entityType The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
         * 
         * @return builder
         * 
         */
        public Builder entityType(@Nullable Output<String> entityType) {
            $.entityType = entityType;
            return this;
        }

        /**
         * @param entityType The type of the entity to which the tag is assigned. Allowed values are: catalogs, schemas, tables, columns, volumes
         * 
         * @return builder
         * 
         */
        public Builder entityType(String entityType) {
            return entityType(Output.of(entityType));
        }

        /**
         * @param tagKey The key of the tag
         * 
         * @return builder
         * 
         */
        public Builder tagKey(@Nullable Output<String> tagKey) {
            $.tagKey = tagKey;
            return this;
        }

        /**
         * @param tagKey The key of the tag
         * 
         * @return builder
         * 
         */
        public Builder tagKey(String tagKey) {
            return tagKey(Output.of(tagKey));
        }

        /**
         * @param tagValue The value of the tag
         * 
         * @return builder
         * 
         */
        public Builder tagValue(@Nullable Output<String> tagValue) {
            $.tagValue = tagValue;
            return this;
        }

        /**
         * @param tagValue The value of the tag
         * 
         * @return builder
         * 
         */
        public Builder tagValue(String tagValue) {
            return tagValue(Output.of(tagValue));
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public EntityTagAssignmentState build() {
            return $;
        }
    }

}
