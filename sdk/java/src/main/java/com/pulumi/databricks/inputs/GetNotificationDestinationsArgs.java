// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetNotificationDestinationsNotificationDestinationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNotificationDestinationsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNotificationDestinationsArgs Empty = new GetNotificationDestinationsArgs();

    /**
     * A **case-insensitive** substring to filter Notification Destinations by their display name.
     * 
     */
    @Import(name="displayNameContains")
    private @Nullable Output<String> displayNameContains;

    /**
     * @return A **case-insensitive** substring to filter Notification Destinations by their display name.
     * 
     */
    public Optional<Output<String>> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }

    /**
     * A list of Notification Destinations matching the specified criteria. Each element contains the following attributes:
     * 
     */
    @Import(name="notificationDestinations")
    private @Nullable Output<List<GetNotificationDestinationsNotificationDestinationArgs>> notificationDestinations;

    /**
     * @return A list of Notification Destinations matching the specified criteria. Each element contains the following attributes:
     * 
     */
    public Optional<Output<List<GetNotificationDestinationsNotificationDestinationArgs>>> notificationDestinations() {
        return Optional.ofNullable(this.notificationDestinations);
    }

    /**
     * The type of the Notification Destination to filter by. Valid values are:
     * * `EMAIL` - Filters Notification Destinations of type Email.
     * * `MICROSOFT_TEAMS` - Filters Notification Destinations of type Microsoft Teams.
     * * `PAGERDUTY` - Filters Notification Destinations of type PagerDuty.
     * * `SLACK` - Filters Notification Destinations of type Slack.
     * * `WEBHOOK` - Filters Notification Destinations of type Webhook.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the Notification Destination to filter by. Valid values are:
     * * `EMAIL` - Filters Notification Destinations of type Email.
     * * `MICROSOFT_TEAMS` - Filters Notification Destinations of type Microsoft Teams.
     * * `PAGERDUTY` - Filters Notification Destinations of type PagerDuty.
     * * `SLACK` - Filters Notification Destinations of type Slack.
     * * `WEBHOOK` - Filters Notification Destinations of type Webhook.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private GetNotificationDestinationsArgs() {}

    private GetNotificationDestinationsArgs(GetNotificationDestinationsArgs $) {
        this.displayNameContains = $.displayNameContains;
        this.notificationDestinations = $.notificationDestinations;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNotificationDestinationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNotificationDestinationsArgs $;

        public Builder() {
            $ = new GetNotificationDestinationsArgs();
        }

        public Builder(GetNotificationDestinationsArgs defaults) {
            $ = new GetNotificationDestinationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayNameContains A **case-insensitive** substring to filter Notification Destinations by their display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(@Nullable Output<String> displayNameContains) {
            $.displayNameContains = displayNameContains;
            return this;
        }

        /**
         * @param displayNameContains A **case-insensitive** substring to filter Notification Destinations by their display name.
         * 
         * @return builder
         * 
         */
        public Builder displayNameContains(String displayNameContains) {
            return displayNameContains(Output.of(displayNameContains));
        }

        /**
         * @param notificationDestinations A list of Notification Destinations matching the specified criteria. Each element contains the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder notificationDestinations(@Nullable Output<List<GetNotificationDestinationsNotificationDestinationArgs>> notificationDestinations) {
            $.notificationDestinations = notificationDestinations;
            return this;
        }

        /**
         * @param notificationDestinations A list of Notification Destinations matching the specified criteria. Each element contains the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder notificationDestinations(List<GetNotificationDestinationsNotificationDestinationArgs> notificationDestinations) {
            return notificationDestinations(Output.of(notificationDestinations));
        }

        /**
         * @param notificationDestinations A list of Notification Destinations matching the specified criteria. Each element contains the following attributes:
         * 
         * @return builder
         * 
         */
        public Builder notificationDestinations(GetNotificationDestinationsNotificationDestinationArgs... notificationDestinations) {
            return notificationDestinations(List.of(notificationDestinations));
        }

        /**
         * @param type The type of the Notification Destination to filter by. Valid values are:
         * * `EMAIL` - Filters Notification Destinations of type Email.
         * * `MICROSOFT_TEAMS` - Filters Notification Destinations of type Microsoft Teams.
         * * `PAGERDUTY` - Filters Notification Destinations of type PagerDuty.
         * * `SLACK` - Filters Notification Destinations of type Slack.
         * * `WEBHOOK` - Filters Notification Destinations of type Webhook.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the Notification Destination to filter by. Valid values are:
         * * `EMAIL` - Filters Notification Destinations of type Email.
         * * `MICROSOFT_TEAMS` - Filters Notification Destinations of type Microsoft Teams.
         * * `PAGERDUTY` - Filters Notification Destinations of type PagerDuty.
         * * `SLACK` - Filters Notification Destinations of type Slack.
         * * `WEBHOOK` - Filters Notification Destinations of type Webhook.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GetNotificationDestinationsArgs build() {
            return $;
        }
    }

}
