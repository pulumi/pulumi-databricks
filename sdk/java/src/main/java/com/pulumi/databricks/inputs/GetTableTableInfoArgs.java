// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetTableTableInfoColumnArgs;
import com.pulumi.databricks.inputs.GetTableTableInfoDeltaRuntimePropertiesKvpairsArgs;
import com.pulumi.databricks.inputs.GetTableTableInfoEffectivePredictiveOptimizationFlagArgs;
import com.pulumi.databricks.inputs.GetTableTableInfoEncryptionDetailsArgs;
import com.pulumi.databricks.inputs.GetTableTableInfoRowFilterArgs;
import com.pulumi.databricks.inputs.GetTableTableInfoTableConstraintArgs;
import com.pulumi.databricks.inputs.GetTableTableInfoViewDependenciesArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTableTableInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetTableTableInfoArgs Empty = new GetTableTableInfoArgs();

    @Import(name="accessPoint")
    private @Nullable Output<String> accessPoint;

    public Optional<Output<String>> accessPoint() {
        return Optional.ofNullable(this.accessPoint);
    }

    @Import(name="browseOnly")
    private @Nullable Output<Boolean> browseOnly;

    public Optional<Output<Boolean>> browseOnly() {
        return Optional.ofNullable(this.browseOnly);
    }

    @Import(name="catalogName")
    private @Nullable Output<String> catalogName;

    public Optional<Output<String>> catalogName() {
        return Optional.ofNullable(this.catalogName);
    }

    @Import(name="columns")
    private @Nullable Output<List<GetTableTableInfoColumnArgs>> columns;

    public Optional<Output<List<GetTableTableInfoColumnArgs>>> columns() {
        return Optional.ofNullable(this.columns);
    }

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="createdAt")
    private @Nullable Output<Integer> createdAt;

    public Optional<Output<Integer>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    @Import(name="dataAccessConfigurationId")
    private @Nullable Output<String> dataAccessConfigurationId;

    public Optional<Output<String>> dataAccessConfigurationId() {
        return Optional.ofNullable(this.dataAccessConfigurationId);
    }

    @Import(name="dataSourceFormat")
    private @Nullable Output<String> dataSourceFormat;

    public Optional<Output<String>> dataSourceFormat() {
        return Optional.ofNullable(this.dataSourceFormat);
    }

    @Import(name="deletedAt")
    private @Nullable Output<Integer> deletedAt;

    public Optional<Output<Integer>> deletedAt() {
        return Optional.ofNullable(this.deletedAt);
    }

    @Import(name="deltaRuntimePropertiesKvpairs")
    private @Nullable Output<GetTableTableInfoDeltaRuntimePropertiesKvpairsArgs> deltaRuntimePropertiesKvpairs;

    public Optional<Output<GetTableTableInfoDeltaRuntimePropertiesKvpairsArgs>> deltaRuntimePropertiesKvpairs() {
        return Optional.ofNullable(this.deltaRuntimePropertiesKvpairs);
    }

    @Import(name="effectivePredictiveOptimizationFlag")
    private @Nullable Output<GetTableTableInfoEffectivePredictiveOptimizationFlagArgs> effectivePredictiveOptimizationFlag;

    public Optional<Output<GetTableTableInfoEffectivePredictiveOptimizationFlagArgs>> effectivePredictiveOptimizationFlag() {
        return Optional.ofNullable(this.effectivePredictiveOptimizationFlag);
    }

    @Import(name="enablePredictiveOptimization")
    private @Nullable Output<String> enablePredictiveOptimization;

    public Optional<Output<String>> enablePredictiveOptimization() {
        return Optional.ofNullable(this.enablePredictiveOptimization);
    }

    @Import(name="encryptionDetails")
    private @Nullable Output<GetTableTableInfoEncryptionDetailsArgs> encryptionDetails;

    public Optional<Output<GetTableTableInfoEncryptionDetailsArgs>> encryptionDetails() {
        return Optional.ofNullable(this.encryptionDetails);
    }

    @Import(name="fullName")
    private @Nullable Output<String> fullName;

    public Optional<Output<String>> fullName() {
        return Optional.ofNullable(this.fullName);
    }

    @Import(name="metastoreId")
    private @Nullable Output<String> metastoreId;

    public Optional<Output<String>> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="pipelineId")
    private @Nullable Output<String> pipelineId;

    public Optional<Output<String>> pipelineId() {
        return Optional.ofNullable(this.pipelineId);
    }

    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    @Import(name="rowFilter")
    private @Nullable Output<GetTableTableInfoRowFilterArgs> rowFilter;

    public Optional<Output<GetTableTableInfoRowFilterArgs>> rowFilter() {
        return Optional.ofNullable(this.rowFilter);
    }

    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    @Import(name="sqlPath")
    private @Nullable Output<String> sqlPath;

    public Optional<Output<String>> sqlPath() {
        return Optional.ofNullable(this.sqlPath);
    }

    @Import(name="storageCredentialName")
    private @Nullable Output<String> storageCredentialName;

    public Optional<Output<String>> storageCredentialName() {
        return Optional.ofNullable(this.storageCredentialName);
    }

    @Import(name="storageLocation")
    private @Nullable Output<String> storageLocation;

    public Optional<Output<String>> storageLocation() {
        return Optional.ofNullable(this.storageLocation);
    }

    @Import(name="tableConstraints")
    private @Nullable Output<List<GetTableTableInfoTableConstraintArgs>> tableConstraints;

    public Optional<Output<List<GetTableTableInfoTableConstraintArgs>>> tableConstraints() {
        return Optional.ofNullable(this.tableConstraints);
    }

    @Import(name="tableId")
    private @Nullable Output<String> tableId;

    public Optional<Output<String>> tableId() {
        return Optional.ofNullable(this.tableId);
    }

    @Import(name="tableType")
    private @Nullable Output<String> tableType;

    public Optional<Output<String>> tableType() {
        return Optional.ofNullable(this.tableType);
    }

    @Import(name="updatedAt")
    private @Nullable Output<Integer> updatedAt;

    public Optional<Output<Integer>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    @Import(name="updatedBy")
    private @Nullable Output<String> updatedBy;

    public Optional<Output<String>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    @Import(name="viewDefinition")
    private @Nullable Output<String> viewDefinition;

    public Optional<Output<String>> viewDefinition() {
        return Optional.ofNullable(this.viewDefinition);
    }

    @Import(name="viewDependencies")
    private @Nullable Output<GetTableTableInfoViewDependenciesArgs> viewDependencies;

    public Optional<Output<GetTableTableInfoViewDependenciesArgs>> viewDependencies() {
        return Optional.ofNullable(this.viewDependencies);
    }

    private GetTableTableInfoArgs() {}

    private GetTableTableInfoArgs(GetTableTableInfoArgs $) {
        this.accessPoint = $.accessPoint;
        this.browseOnly = $.browseOnly;
        this.catalogName = $.catalogName;
        this.columns = $.columns;
        this.comment = $.comment;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.dataAccessConfigurationId = $.dataAccessConfigurationId;
        this.dataSourceFormat = $.dataSourceFormat;
        this.deletedAt = $.deletedAt;
        this.deltaRuntimePropertiesKvpairs = $.deltaRuntimePropertiesKvpairs;
        this.effectivePredictiveOptimizationFlag = $.effectivePredictiveOptimizationFlag;
        this.enablePredictiveOptimization = $.enablePredictiveOptimization;
        this.encryptionDetails = $.encryptionDetails;
        this.fullName = $.fullName;
        this.metastoreId = $.metastoreId;
        this.name = $.name;
        this.owner = $.owner;
        this.pipelineId = $.pipelineId;
        this.properties = $.properties;
        this.rowFilter = $.rowFilter;
        this.schemaName = $.schemaName;
        this.sqlPath = $.sqlPath;
        this.storageCredentialName = $.storageCredentialName;
        this.storageLocation = $.storageLocation;
        this.tableConstraints = $.tableConstraints;
        this.tableId = $.tableId;
        this.tableType = $.tableType;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
        this.viewDefinition = $.viewDefinition;
        this.viewDependencies = $.viewDependencies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTableTableInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTableTableInfoArgs $;

        public Builder() {
            $ = new GetTableTableInfoArgs();
        }

        public Builder(GetTableTableInfoArgs defaults) {
            $ = new GetTableTableInfoArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessPoint(@Nullable Output<String> accessPoint) {
            $.accessPoint = accessPoint;
            return this;
        }

        public Builder accessPoint(String accessPoint) {
            return accessPoint(Output.of(accessPoint));
        }

        public Builder browseOnly(@Nullable Output<Boolean> browseOnly) {
            $.browseOnly = browseOnly;
            return this;
        }

        public Builder browseOnly(Boolean browseOnly) {
            return browseOnly(Output.of(browseOnly));
        }

        public Builder catalogName(@Nullable Output<String> catalogName) {
            $.catalogName = catalogName;
            return this;
        }

        public Builder catalogName(String catalogName) {
            return catalogName(Output.of(catalogName));
        }

        public Builder columns(@Nullable Output<List<GetTableTableInfoColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        public Builder columns(List<GetTableTableInfoColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        public Builder columns(GetTableTableInfoColumnArgs... columns) {
            return columns(List.of(columns));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder createdAt(@Nullable Output<Integer> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(Integer createdAt) {
            return createdAt(Output.of(createdAt));
        }

        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        public Builder dataAccessConfigurationId(@Nullable Output<String> dataAccessConfigurationId) {
            $.dataAccessConfigurationId = dataAccessConfigurationId;
            return this;
        }

        public Builder dataAccessConfigurationId(String dataAccessConfigurationId) {
            return dataAccessConfigurationId(Output.of(dataAccessConfigurationId));
        }

        public Builder dataSourceFormat(@Nullable Output<String> dataSourceFormat) {
            $.dataSourceFormat = dataSourceFormat;
            return this;
        }

        public Builder dataSourceFormat(String dataSourceFormat) {
            return dataSourceFormat(Output.of(dataSourceFormat));
        }

        public Builder deletedAt(@Nullable Output<Integer> deletedAt) {
            $.deletedAt = deletedAt;
            return this;
        }

        public Builder deletedAt(Integer deletedAt) {
            return deletedAt(Output.of(deletedAt));
        }

        public Builder deltaRuntimePropertiesKvpairs(@Nullable Output<GetTableTableInfoDeltaRuntimePropertiesKvpairsArgs> deltaRuntimePropertiesKvpairs) {
            $.deltaRuntimePropertiesKvpairs = deltaRuntimePropertiesKvpairs;
            return this;
        }

        public Builder deltaRuntimePropertiesKvpairs(GetTableTableInfoDeltaRuntimePropertiesKvpairsArgs deltaRuntimePropertiesKvpairs) {
            return deltaRuntimePropertiesKvpairs(Output.of(deltaRuntimePropertiesKvpairs));
        }

        public Builder effectivePredictiveOptimizationFlag(@Nullable Output<GetTableTableInfoEffectivePredictiveOptimizationFlagArgs> effectivePredictiveOptimizationFlag) {
            $.effectivePredictiveOptimizationFlag = effectivePredictiveOptimizationFlag;
            return this;
        }

        public Builder effectivePredictiveOptimizationFlag(GetTableTableInfoEffectivePredictiveOptimizationFlagArgs effectivePredictiveOptimizationFlag) {
            return effectivePredictiveOptimizationFlag(Output.of(effectivePredictiveOptimizationFlag));
        }

        public Builder enablePredictiveOptimization(@Nullable Output<String> enablePredictiveOptimization) {
            $.enablePredictiveOptimization = enablePredictiveOptimization;
            return this;
        }

        public Builder enablePredictiveOptimization(String enablePredictiveOptimization) {
            return enablePredictiveOptimization(Output.of(enablePredictiveOptimization));
        }

        public Builder encryptionDetails(@Nullable Output<GetTableTableInfoEncryptionDetailsArgs> encryptionDetails) {
            $.encryptionDetails = encryptionDetails;
            return this;
        }

        public Builder encryptionDetails(GetTableTableInfoEncryptionDetailsArgs encryptionDetails) {
            return encryptionDetails(Output.of(encryptionDetails));
        }

        public Builder fullName(@Nullable Output<String> fullName) {
            $.fullName = fullName;
            return this;
        }

        public Builder fullName(String fullName) {
            return fullName(Output.of(fullName));
        }

        public Builder metastoreId(@Nullable Output<String> metastoreId) {
            $.metastoreId = metastoreId;
            return this;
        }

        public Builder metastoreId(String metastoreId) {
            return metastoreId(Output.of(metastoreId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder pipelineId(@Nullable Output<String> pipelineId) {
            $.pipelineId = pipelineId;
            return this;
        }

        public Builder pipelineId(String pipelineId) {
            return pipelineId(Output.of(pipelineId));
        }

        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        public Builder rowFilter(@Nullable Output<GetTableTableInfoRowFilterArgs> rowFilter) {
            $.rowFilter = rowFilter;
            return this;
        }

        public Builder rowFilter(GetTableTableInfoRowFilterArgs rowFilter) {
            return rowFilter(Output.of(rowFilter));
        }

        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public Builder sqlPath(@Nullable Output<String> sqlPath) {
            $.sqlPath = sqlPath;
            return this;
        }

        public Builder sqlPath(String sqlPath) {
            return sqlPath(Output.of(sqlPath));
        }

        public Builder storageCredentialName(@Nullable Output<String> storageCredentialName) {
            $.storageCredentialName = storageCredentialName;
            return this;
        }

        public Builder storageCredentialName(String storageCredentialName) {
            return storageCredentialName(Output.of(storageCredentialName));
        }

        public Builder storageLocation(@Nullable Output<String> storageLocation) {
            $.storageLocation = storageLocation;
            return this;
        }

        public Builder storageLocation(String storageLocation) {
            return storageLocation(Output.of(storageLocation));
        }

        public Builder tableConstraints(@Nullable Output<List<GetTableTableInfoTableConstraintArgs>> tableConstraints) {
            $.tableConstraints = tableConstraints;
            return this;
        }

        public Builder tableConstraints(List<GetTableTableInfoTableConstraintArgs> tableConstraints) {
            return tableConstraints(Output.of(tableConstraints));
        }

        public Builder tableConstraints(GetTableTableInfoTableConstraintArgs... tableConstraints) {
            return tableConstraints(List.of(tableConstraints));
        }

        public Builder tableId(@Nullable Output<String> tableId) {
            $.tableId = tableId;
            return this;
        }

        public Builder tableId(String tableId) {
            return tableId(Output.of(tableId));
        }

        public Builder tableType(@Nullable Output<String> tableType) {
            $.tableType = tableType;
            return this;
        }

        public Builder tableType(String tableType) {
            return tableType(Output.of(tableType));
        }

        public Builder updatedAt(@Nullable Output<Integer> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(Integer updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public Builder updatedBy(@Nullable Output<String> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        public Builder updatedBy(String updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        public Builder viewDefinition(@Nullable Output<String> viewDefinition) {
            $.viewDefinition = viewDefinition;
            return this;
        }

        public Builder viewDefinition(String viewDefinition) {
            return viewDefinition(Output.of(viewDefinition));
        }

        public Builder viewDependencies(@Nullable Output<GetTableTableInfoViewDependenciesArgs> viewDependencies) {
            $.viewDependencies = viewDependencies;
            return this;
        }

        public Builder viewDependencies(GetTableTableInfoViewDependenciesArgs viewDependencies) {
            return viewDependencies(Output.of(viewDependencies));
        }

        public GetTableTableInfoArgs build() {
            return $;
        }
    }

}
