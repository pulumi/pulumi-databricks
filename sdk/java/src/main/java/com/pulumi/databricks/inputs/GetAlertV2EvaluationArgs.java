// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetAlertV2EvaluationNotificationArgs;
import com.pulumi.databricks.inputs.GetAlertV2EvaluationSourceArgs;
import com.pulumi.databricks.inputs.GetAlertV2EvaluationThresholdArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAlertV2EvaluationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetAlertV2EvaluationArgs Empty = new GetAlertV2EvaluationArgs();

    /**
     * (string) - Operator used for comparison in alert evaluation. Possible values are: `EQUAL`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `IS_NOT_NULL`, `IS_NULL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `NOT_EQUAL`
     * 
     */
    @Import(name="comparisonOperator")
    private @Nullable Output<String> comparisonOperator;

    /**
     * @return (string) - Operator used for comparison in alert evaluation. Possible values are: `EQUAL`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `IS_NOT_NULL`, `IS_NULL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `NOT_EQUAL`
     * 
     */
    public Optional<Output<String>> comparisonOperator() {
        return Optional.ofNullable(this.comparisonOperator);
    }

    /**
     * (string) - Alert state if result is empty. Possible values are: `ERROR`, `OK`, `TRIGGERED`, `UNKNOWN`
     * 
     */
    @Import(name="emptyResultState")
    private @Nullable Output<String> emptyResultState;

    /**
     * @return (string) - Alert state if result is empty. Possible values are: `ERROR`, `OK`, `TRIGGERED`, `UNKNOWN`
     * 
     */
    public Optional<Output<String>> emptyResultState() {
        return Optional.ofNullable(this.emptyResultState);
    }

    /**
     * (string) - Timestamp of the last evaluation
     * 
     */
    @Import(name="lastEvaluatedAt", required=true)
    private Output<String> lastEvaluatedAt;

    /**
     * @return (string) - Timestamp of the last evaluation
     * 
     */
    public Output<String> lastEvaluatedAt() {
        return this.lastEvaluatedAt;
    }

    /**
     * (AlertV2Notification) - User or Notification Destination to notify when alert is triggered
     * 
     */
    @Import(name="notification")
    private @Nullable Output<GetAlertV2EvaluationNotificationArgs> notification;

    /**
     * @return (AlertV2Notification) - User or Notification Destination to notify when alert is triggered
     * 
     */
    public Optional<Output<GetAlertV2EvaluationNotificationArgs>> notification() {
        return Optional.ofNullable(this.notification);
    }

    /**
     * (AlertV2OperandColumn) - Source column from result to use to evaluate alert
     * 
     */
    @Import(name="source")
    private @Nullable Output<GetAlertV2EvaluationSourceArgs> source;

    /**
     * @return (AlertV2OperandColumn) - Source column from result to use to evaluate alert
     * 
     */
    public Optional<Output<GetAlertV2EvaluationSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * (string) - Latest state of alert evaluation. Possible values are: `ERROR`, `OK`, `TRIGGERED`, `UNKNOWN`
     * 
     */
    @Import(name="state", required=true)
    private Output<String> state;

    /**
     * @return (string) - Latest state of alert evaluation. Possible values are: `ERROR`, `OK`, `TRIGGERED`, `UNKNOWN`
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     * (AlertV2Operand) - Threshold to user for alert evaluation, can be a column or a value
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<GetAlertV2EvaluationThresholdArgs> threshold;

    /**
     * @return (AlertV2Operand) - Threshold to user for alert evaluation, can be a column or a value
     * 
     */
    public Optional<Output<GetAlertV2EvaluationThresholdArgs>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    private GetAlertV2EvaluationArgs() {}

    private GetAlertV2EvaluationArgs(GetAlertV2EvaluationArgs $) {
        this.comparisonOperator = $.comparisonOperator;
        this.emptyResultState = $.emptyResultState;
        this.lastEvaluatedAt = $.lastEvaluatedAt;
        this.notification = $.notification;
        this.source = $.source;
        this.state = $.state;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAlertV2EvaluationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAlertV2EvaluationArgs $;

        public Builder() {
            $ = new GetAlertV2EvaluationArgs();
        }

        public Builder(GetAlertV2EvaluationArgs defaults) {
            $ = new GetAlertV2EvaluationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comparisonOperator (string) - Operator used for comparison in alert evaluation. Possible values are: `EQUAL`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `IS_NOT_NULL`, `IS_NULL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `NOT_EQUAL`
         * 
         * @return builder
         * 
         */
        public Builder comparisonOperator(@Nullable Output<String> comparisonOperator) {
            $.comparisonOperator = comparisonOperator;
            return this;
        }

        /**
         * @param comparisonOperator (string) - Operator used for comparison in alert evaluation. Possible values are: `EQUAL`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `IS_NOT_NULL`, `IS_NULL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `NOT_EQUAL`
         * 
         * @return builder
         * 
         */
        public Builder comparisonOperator(String comparisonOperator) {
            return comparisonOperator(Output.of(comparisonOperator));
        }

        /**
         * @param emptyResultState (string) - Alert state if result is empty. Possible values are: `ERROR`, `OK`, `TRIGGERED`, `UNKNOWN`
         * 
         * @return builder
         * 
         */
        public Builder emptyResultState(@Nullable Output<String> emptyResultState) {
            $.emptyResultState = emptyResultState;
            return this;
        }

        /**
         * @param emptyResultState (string) - Alert state if result is empty. Possible values are: `ERROR`, `OK`, `TRIGGERED`, `UNKNOWN`
         * 
         * @return builder
         * 
         */
        public Builder emptyResultState(String emptyResultState) {
            return emptyResultState(Output.of(emptyResultState));
        }

        /**
         * @param lastEvaluatedAt (string) - Timestamp of the last evaluation
         * 
         * @return builder
         * 
         */
        public Builder lastEvaluatedAt(Output<String> lastEvaluatedAt) {
            $.lastEvaluatedAt = lastEvaluatedAt;
            return this;
        }

        /**
         * @param lastEvaluatedAt (string) - Timestamp of the last evaluation
         * 
         * @return builder
         * 
         */
        public Builder lastEvaluatedAt(String lastEvaluatedAt) {
            return lastEvaluatedAt(Output.of(lastEvaluatedAt));
        }

        /**
         * @param notification (AlertV2Notification) - User or Notification Destination to notify when alert is triggered
         * 
         * @return builder
         * 
         */
        public Builder notification(@Nullable Output<GetAlertV2EvaluationNotificationArgs> notification) {
            $.notification = notification;
            return this;
        }

        /**
         * @param notification (AlertV2Notification) - User or Notification Destination to notify when alert is triggered
         * 
         * @return builder
         * 
         */
        public Builder notification(GetAlertV2EvaluationNotificationArgs notification) {
            return notification(Output.of(notification));
        }

        /**
         * @param source (AlertV2OperandColumn) - Source column from result to use to evaluate alert
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<GetAlertV2EvaluationSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source (AlertV2OperandColumn) - Source column from result to use to evaluate alert
         * 
         * @return builder
         * 
         */
        public Builder source(GetAlertV2EvaluationSourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param state (string) - Latest state of alert evaluation. Possible values are: `ERROR`, `OK`, `TRIGGERED`, `UNKNOWN`
         * 
         * @return builder
         * 
         */
        public Builder state(Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (string) - Latest state of alert evaluation. Possible values are: `ERROR`, `OK`, `TRIGGERED`, `UNKNOWN`
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param threshold (AlertV2Operand) - Threshold to user for alert evaluation, can be a column or a value
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<GetAlertV2EvaluationThresholdArgs> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold (AlertV2Operand) - Threshold to user for alert evaluation, can be a column or a value
         * 
         * @return builder
         * 
         */
        public Builder threshold(GetAlertV2EvaluationThresholdArgs threshold) {
            return threshold(Output.of(threshold));
        }

        public GetAlertV2EvaluationArgs build() {
            if ($.lastEvaluatedAt == null) {
                throw new MissingRequiredPropertyException("GetAlertV2EvaluationArgs", "lastEvaluatedAt");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("GetAlertV2EvaluationArgs", "state");
            }
            return $;
        }
    }

}
