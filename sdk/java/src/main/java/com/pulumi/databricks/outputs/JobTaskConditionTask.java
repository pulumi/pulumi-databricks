// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class JobTaskConditionTask {
    /**
     * @return The left operand of the condition task. It could be a string value, job state, or a parameter reference.
     * 
     */
    private String left;
    /**
     * @return The string specifying the operation used to compare operands.  Currently, following operators are supported: `EQUAL_TO`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `NOT_EQUAL`. (Check the [API docs](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
     * 
     * This task does not require a cluster to execute and does not support retries or notifications.
     * 
     */
    private String op;
    /**
     * @return The right operand of the condition task. It could be a string value, job state, or parameter reference.
     * 
     */
    private String right;

    private JobTaskConditionTask() {}
    /**
     * @return The left operand of the condition task. It could be a string value, job state, or a parameter reference.
     * 
     */
    public String left() {
        return this.left;
    }
    /**
     * @return The string specifying the operation used to compare operands.  Currently, following operators are supported: `EQUAL_TO`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `NOT_EQUAL`. (Check the [API docs](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
     * 
     * This task does not require a cluster to execute and does not support retries or notifications.
     * 
     */
    public String op() {
        return this.op;
    }
    /**
     * @return The right operand of the condition task. It could be a string value, job state, or parameter reference.
     * 
     */
    public String right() {
        return this.right;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobTaskConditionTask defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String left;
        private String op;
        private String right;
        public Builder() {}
        public Builder(JobTaskConditionTask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.left = defaults.left;
    	      this.op = defaults.op;
    	      this.right = defaults.right;
        }

        @CustomType.Setter
        public Builder left(String left) {
            if (left == null) {
              throw new MissingRequiredPropertyException("JobTaskConditionTask", "left");
            }
            this.left = left;
            return this;
        }
        @CustomType.Setter
        public Builder op(String op) {
            if (op == null) {
              throw new MissingRequiredPropertyException("JobTaskConditionTask", "op");
            }
            this.op = op;
            return this;
        }
        @CustomType.Setter
        public Builder right(String right) {
            if (right == null) {
              throw new MissingRequiredPropertyException("JobTaskConditionTask", "right");
            }
            this.right = right;
            return this;
        }
        public JobTaskConditionTask build() {
            final var _resultValue = new JobTaskConditionTask();
            _resultValue.left = left;
            _resultValue.op = op;
            _resultValue.right = right;
            return _resultValue;
        }
    }
}
