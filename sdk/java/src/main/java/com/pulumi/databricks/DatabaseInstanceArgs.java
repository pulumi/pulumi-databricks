// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.DatabaseInstanceParentInstanceRefArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceArgs Empty = new DatabaseInstanceArgs();

    /**
     * The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;, &#34;CU_8&#34;
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<String> capacity;

    /**
     * @return The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;, &#34;CU_8&#34;
     * 
     */
    public Optional<Output<String>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * Whether the instance has PG native password login enabled. Defaults to true
     * 
     */
    @Import(name="enablePgNativeLogin")
    private @Nullable Output<Boolean> enablePgNativeLogin;

    /**
     * @return Whether the instance has PG native password login enabled. Defaults to true
     * 
     */
    public Optional<Output<Boolean>> enablePgNativeLogin() {
        return Optional.ofNullable(this.enablePgNativeLogin);
    }

    /**
     * Whether to enable secondaries to serve read-only traffic. Defaults to false
     * 
     */
    @Import(name="enableReadableSecondaries")
    private @Nullable Output<Boolean> enableReadableSecondaries;

    /**
     * @return Whether to enable secondaries to serve read-only traffic. Defaults to false
     * 
     */
    public Optional<Output<Boolean>> enableReadableSecondaries() {
        return Optional.ofNullable(this.enableReadableSecondaries);
    }

    /**
     * The name of the instance. This is the unique identifier for the instance
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the instance. This is the unique identifier for the instance
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
     * 1 primary and 0 secondaries
     * 
     */
    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    /**
     * @return The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
     * 1 primary and 0 secondaries
     * 
     */
    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * The ref of the parent instance. This is only available if the instance is
     * child instance.
     * Input: For specifying the parent instance to create a child instance. Optional.
     * Output: Only populated if provided as input to create a child instance
     * 
     */
    @Import(name="parentInstanceRef")
    private @Nullable Output<DatabaseInstanceParentInstanceRefArgs> parentInstanceRef;

    /**
     * @return The ref of the parent instance. This is only available if the instance is
     * child instance.
     * Input: For specifying the parent instance to create a child instance. Optional.
     * Output: Only populated if provided as input to create a child instance
     * 
     */
    public Optional<Output<DatabaseInstanceParentInstanceRefArgs>> parentInstanceRef() {
        return Optional.ofNullable(this.parentInstanceRef);
    }

    /**
     * Purge the resource on delete
     * 
     */
    @Import(name="purgeOnDelete")
    private @Nullable Output<Boolean> purgeOnDelete;

    /**
     * @return Purge the resource on delete
     * 
     */
    public Optional<Output<Boolean>> purgeOnDelete() {
        return Optional.ofNullable(this.purgeOnDelete);
    }

    /**
     * The retention window for the instance. This is the time window in days
     * for which the historical data is retained. The default value is 7 days.
     * Valid values are 2 to 35 days
     * 
     */
    @Import(name="retentionWindowInDays")
    private @Nullable Output<Integer> retentionWindowInDays;

    /**
     * @return The retention window for the instance. This is the time window in days
     * for which the historical data is retained. The default value is 7 days.
     * Valid values are 2 to 35 days
     * 
     */
    public Optional<Output<Integer>> retentionWindowInDays() {
        return Optional.ofNullable(this.retentionWindowInDays);
    }

    /**
     * Whether the instance is stopped
     * 
     */
    @Import(name="stopped")
    private @Nullable Output<Boolean> stopped;

    /**
     * @return Whether the instance is stopped
     * 
     */
    public Optional<Output<Boolean>> stopped() {
        return Optional.ofNullable(this.stopped);
    }

    /**
     * Workspace ID of the resource
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private DatabaseInstanceArgs() {}

    private DatabaseInstanceArgs(DatabaseInstanceArgs $) {
        this.capacity = $.capacity;
        this.enablePgNativeLogin = $.enablePgNativeLogin;
        this.enableReadableSecondaries = $.enableReadableSecondaries;
        this.name = $.name;
        this.nodeCount = $.nodeCount;
        this.parentInstanceRef = $.parentInstanceRef;
        this.purgeOnDelete = $.purgeOnDelete;
        this.retentionWindowInDays = $.retentionWindowInDays;
        this.stopped = $.stopped;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseInstanceArgs $;

        public Builder() {
            $ = new DatabaseInstanceArgs();
        }

        public Builder(DatabaseInstanceArgs defaults) {
            $ = new DatabaseInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacity The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;, &#34;CU_8&#34;
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<String> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;, &#34;CU_8&#34;
         * 
         * @return builder
         * 
         */
        public Builder capacity(String capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param enablePgNativeLogin Whether the instance has PG native password login enabled. Defaults to true
         * 
         * @return builder
         * 
         */
        public Builder enablePgNativeLogin(@Nullable Output<Boolean> enablePgNativeLogin) {
            $.enablePgNativeLogin = enablePgNativeLogin;
            return this;
        }

        /**
         * @param enablePgNativeLogin Whether the instance has PG native password login enabled. Defaults to true
         * 
         * @return builder
         * 
         */
        public Builder enablePgNativeLogin(Boolean enablePgNativeLogin) {
            return enablePgNativeLogin(Output.of(enablePgNativeLogin));
        }

        /**
         * @param enableReadableSecondaries Whether to enable secondaries to serve read-only traffic. Defaults to false
         * 
         * @return builder
         * 
         */
        public Builder enableReadableSecondaries(@Nullable Output<Boolean> enableReadableSecondaries) {
            $.enableReadableSecondaries = enableReadableSecondaries;
            return this;
        }

        /**
         * @param enableReadableSecondaries Whether to enable secondaries to serve read-only traffic. Defaults to false
         * 
         * @return builder
         * 
         */
        public Builder enableReadableSecondaries(Boolean enableReadableSecondaries) {
            return enableReadableSecondaries(Output.of(enableReadableSecondaries));
        }

        /**
         * @param name The name of the instance. This is the unique identifier for the instance
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the instance. This is the unique identifier for the instance
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeCount The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
         * 1 primary and 0 secondaries
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
         * 1 primary and 0 secondaries
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param parentInstanceRef The ref of the parent instance. This is only available if the instance is
         * child instance.
         * Input: For specifying the parent instance to create a child instance. Optional.
         * Output: Only populated if provided as input to create a child instance
         * 
         * @return builder
         * 
         */
        public Builder parentInstanceRef(@Nullable Output<DatabaseInstanceParentInstanceRefArgs> parentInstanceRef) {
            $.parentInstanceRef = parentInstanceRef;
            return this;
        }

        /**
         * @param parentInstanceRef The ref of the parent instance. This is only available if the instance is
         * child instance.
         * Input: For specifying the parent instance to create a child instance. Optional.
         * Output: Only populated if provided as input to create a child instance
         * 
         * @return builder
         * 
         */
        public Builder parentInstanceRef(DatabaseInstanceParentInstanceRefArgs parentInstanceRef) {
            return parentInstanceRef(Output.of(parentInstanceRef));
        }

        /**
         * @param purgeOnDelete Purge the resource on delete
         * 
         * @return builder
         * 
         */
        public Builder purgeOnDelete(@Nullable Output<Boolean> purgeOnDelete) {
            $.purgeOnDelete = purgeOnDelete;
            return this;
        }

        /**
         * @param purgeOnDelete Purge the resource on delete
         * 
         * @return builder
         * 
         */
        public Builder purgeOnDelete(Boolean purgeOnDelete) {
            return purgeOnDelete(Output.of(purgeOnDelete));
        }

        /**
         * @param retentionWindowInDays The retention window for the instance. This is the time window in days
         * for which the historical data is retained. The default value is 7 days.
         * Valid values are 2 to 35 days
         * 
         * @return builder
         * 
         */
        public Builder retentionWindowInDays(@Nullable Output<Integer> retentionWindowInDays) {
            $.retentionWindowInDays = retentionWindowInDays;
            return this;
        }

        /**
         * @param retentionWindowInDays The retention window for the instance. This is the time window in days
         * for which the historical data is retained. The default value is 7 days.
         * Valid values are 2 to 35 days
         * 
         * @return builder
         * 
         */
        public Builder retentionWindowInDays(Integer retentionWindowInDays) {
            return retentionWindowInDays(Output.of(retentionWindowInDays));
        }

        /**
         * @param stopped Whether the instance is stopped
         * 
         * @return builder
         * 
         */
        public Builder stopped(@Nullable Output<Boolean> stopped) {
            $.stopped = stopped;
            return this;
        }

        /**
         * @param stopped Whether the instance is stopped
         * 
         * @return builder
         * 
         */
        public Builder stopped(Boolean stopped) {
            return stopped(Output.of(stopped));
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public DatabaseInstanceArgs build() {
            return $;
        }
    }

}
