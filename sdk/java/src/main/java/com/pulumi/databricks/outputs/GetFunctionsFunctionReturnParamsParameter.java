// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFunctionsFunctionReturnParamsParameter {
    /**
     * @return User-provided free-form text description.
     * 
     */
    private @Nullable String comment;
    /**
     * @return Name of parameter.
     * 
     */
    private String name;
    /**
     * @return Default value of the parameter.
     * 
     */
    private @Nullable String parameterDefault;
    /**
     * @return The mode of the function parameter.
     * 
     */
    private @Nullable String parameterMode;
    /**
     * @return The type of function parameter (`PARAM` or `COLUMN`).
     * 
     */
    private @Nullable String parameterType;
    /**
     * @return Ordinal position of column (starting at position 0).
     * 
     */
    private Integer position;
    /**
     * @return Format of IntervalType.
     * 
     */
    private @Nullable String typeIntervalType;
    /**
     * @return Full data type spec, JSON-serialized.
     * 
     */
    private @Nullable String typeJson;
    /**
     * @return Name of type (INT, STRUCT, MAP, etc.).
     * 
     */
    private String typeName;
    /**
     * @return Digits of precision; required on Create for DecimalTypes.
     * 
     */
    private @Nullable Integer typePrecision;
    /**
     * @return Digits to right of decimal; Required on Create for DecimalTypes.
     * 
     */
    private @Nullable Integer typeScale;
    /**
     * @return Full data type spec, SQL/catalogString text.
     * 
     */
    private String typeText;

    private GetFunctionsFunctionReturnParamsParameter() {}
    /**
     * @return User-provided free-form text description.
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    /**
     * @return Name of parameter.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Default value of the parameter.
     * 
     */
    public Optional<String> parameterDefault() {
        return Optional.ofNullable(this.parameterDefault);
    }
    /**
     * @return The mode of the function parameter.
     * 
     */
    public Optional<String> parameterMode() {
        return Optional.ofNullable(this.parameterMode);
    }
    /**
     * @return The type of function parameter (`PARAM` or `COLUMN`).
     * 
     */
    public Optional<String> parameterType() {
        return Optional.ofNullable(this.parameterType);
    }
    /**
     * @return Ordinal position of column (starting at position 0).
     * 
     */
    public Integer position() {
        return this.position;
    }
    /**
     * @return Format of IntervalType.
     * 
     */
    public Optional<String> typeIntervalType() {
        return Optional.ofNullable(this.typeIntervalType);
    }
    /**
     * @return Full data type spec, JSON-serialized.
     * 
     */
    public Optional<String> typeJson() {
        return Optional.ofNullable(this.typeJson);
    }
    /**
     * @return Name of type (INT, STRUCT, MAP, etc.).
     * 
     */
    public String typeName() {
        return this.typeName;
    }
    /**
     * @return Digits of precision; required on Create for DecimalTypes.
     * 
     */
    public Optional<Integer> typePrecision() {
        return Optional.ofNullable(this.typePrecision);
    }
    /**
     * @return Digits to right of decimal; Required on Create for DecimalTypes.
     * 
     */
    public Optional<Integer> typeScale() {
        return Optional.ofNullable(this.typeScale);
    }
    /**
     * @return Full data type spec, SQL/catalogString text.
     * 
     */
    public String typeText() {
        return this.typeText;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionsFunctionReturnParamsParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String comment;
        private String name;
        private @Nullable String parameterDefault;
        private @Nullable String parameterMode;
        private @Nullable String parameterType;
        private Integer position;
        private @Nullable String typeIntervalType;
        private @Nullable String typeJson;
        private String typeName;
        private @Nullable Integer typePrecision;
        private @Nullable Integer typeScale;
        private String typeText;
        public Builder() {}
        public Builder(GetFunctionsFunctionReturnParamsParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comment = defaults.comment;
    	      this.name = defaults.name;
    	      this.parameterDefault = defaults.parameterDefault;
    	      this.parameterMode = defaults.parameterMode;
    	      this.parameterType = defaults.parameterType;
    	      this.position = defaults.position;
    	      this.typeIntervalType = defaults.typeIntervalType;
    	      this.typeJson = defaults.typeJson;
    	      this.typeName = defaults.typeName;
    	      this.typePrecision = defaults.typePrecision;
    	      this.typeScale = defaults.typeScale;
    	      this.typeText = defaults.typeText;
        }

        @CustomType.Setter
        public Builder comment(@Nullable String comment) {

            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetFunctionsFunctionReturnParamsParameter", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parameterDefault(@Nullable String parameterDefault) {

            this.parameterDefault = parameterDefault;
            return this;
        }
        @CustomType.Setter
        public Builder parameterMode(@Nullable String parameterMode) {

            this.parameterMode = parameterMode;
            return this;
        }
        @CustomType.Setter
        public Builder parameterType(@Nullable String parameterType) {

            this.parameterType = parameterType;
            return this;
        }
        @CustomType.Setter
        public Builder position(Integer position) {
            if (position == null) {
              throw new MissingRequiredPropertyException("GetFunctionsFunctionReturnParamsParameter", "position");
            }
            this.position = position;
            return this;
        }
        @CustomType.Setter
        public Builder typeIntervalType(@Nullable String typeIntervalType) {

            this.typeIntervalType = typeIntervalType;
            return this;
        }
        @CustomType.Setter
        public Builder typeJson(@Nullable String typeJson) {

            this.typeJson = typeJson;
            return this;
        }
        @CustomType.Setter
        public Builder typeName(String typeName) {
            if (typeName == null) {
              throw new MissingRequiredPropertyException("GetFunctionsFunctionReturnParamsParameter", "typeName");
            }
            this.typeName = typeName;
            return this;
        }
        @CustomType.Setter
        public Builder typePrecision(@Nullable Integer typePrecision) {

            this.typePrecision = typePrecision;
            return this;
        }
        @CustomType.Setter
        public Builder typeScale(@Nullable Integer typeScale) {

            this.typeScale = typeScale;
            return this;
        }
        @CustomType.Setter
        public Builder typeText(String typeText) {
            if (typeText == null) {
              throw new MissingRequiredPropertyException("GetFunctionsFunctionReturnParamsParameter", "typeText");
            }
            this.typeText = typeText;
            return this;
        }
        public GetFunctionsFunctionReturnParamsParameter build() {
            final var _resultValue = new GetFunctionsFunctionReturnParamsParameter();
            _resultValue.comment = comment;
            _resultValue.name = name;
            _resultValue.parameterDefault = parameterDefault;
            _resultValue.parameterMode = parameterMode;
            _resultValue.parameterType = parameterType;
            _resultValue.position = position;
            _resultValue.typeIntervalType = typeIntervalType;
            _resultValue.typeJson = typeJson;
            _resultValue.typeName = typeName;
            _resultValue.typePrecision = typePrecision;
            _resultValue.typeScale = typeScale;
            _resultValue.typeText = typeText;
            return _resultValue;
        }
    }
}
