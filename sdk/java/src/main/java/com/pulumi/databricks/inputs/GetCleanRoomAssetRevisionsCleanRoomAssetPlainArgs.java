// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetCleanRoomAssetRevisionsCleanRoomAssetForeignTable;
import com.pulumi.databricks.inputs.GetCleanRoomAssetRevisionsCleanRoomAssetForeignTableLocalDetails;
import com.pulumi.databricks.inputs.GetCleanRoomAssetRevisionsCleanRoomAssetNotebook;
import com.pulumi.databricks.inputs.GetCleanRoomAssetRevisionsCleanRoomAssetTable;
import com.pulumi.databricks.inputs.GetCleanRoomAssetRevisionsCleanRoomAssetTableLocalDetails;
import com.pulumi.databricks.inputs.GetCleanRoomAssetRevisionsCleanRoomAssetView;
import com.pulumi.databricks.inputs.GetCleanRoomAssetRevisionsCleanRoomAssetViewLocalDetails;
import com.pulumi.databricks.inputs.GetCleanRoomAssetRevisionsCleanRoomAssetVolumeLocalDetails;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs Empty = new GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs();

    /**
     * (string) - The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
     * 
     */
    @Import(name="assetType", required=true)
    private String assetType;

    /**
     * @return (string) - The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
     * 
     */
    public String assetType() {
        return this.assetType;
    }

    /**
     * (string) - The name of the clean room this asset belongs to.
     * This field is required for create operations and populated by the server for responses
     * 
     */
    @Import(name="cleanRoomName")
    private @Nullable String cleanRoomName;

    /**
     * @return (string) - The name of the clean room this asset belongs to.
     * This field is required for create operations and populated by the server for responses
     * 
     */
    public Optional<String> cleanRoomName() {
        return Optional.ofNullable(this.cleanRoomName);
    }

    /**
     * (CleanRoomAssetForeignTable) - Foreign table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    @Import(name="foreignTable")
    private @Nullable GetCleanRoomAssetRevisionsCleanRoomAssetForeignTable foreignTable;

    /**
     * @return (CleanRoomAssetForeignTable) - Foreign table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    public Optional<GetCleanRoomAssetRevisionsCleanRoomAssetForeignTable> foreignTable() {
        return Optional.ofNullable(this.foreignTable);
    }

    /**
     * (CleanRoomAssetForeignTableLocalDetails) - Local details for a foreign that are only available to its owner.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    @Import(name="foreignTableLocalDetails")
    private @Nullable GetCleanRoomAssetRevisionsCleanRoomAssetForeignTableLocalDetails foreignTableLocalDetails;

    /**
     * @return (CleanRoomAssetForeignTableLocalDetails) - Local details for a foreign that are only available to its owner.
     * Present if and only if **asset_type** is **FOREIGN_TABLE**
     * 
     */
    public Optional<GetCleanRoomAssetRevisionsCleanRoomAssetForeignTableLocalDetails> foreignTableLocalDetails() {
        return Optional.ofNullable(this.foreignTableLocalDetails);
    }

    /**
     * A fully qualified name that uniquely identifies the asset within the clean room.
     * This is also the name displayed in the clean room UI.
     * 
     * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
     * 
     * For notebooks, the name is the notebook file name.
     * For jar analyses, the name is the jar analysis name
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return A fully qualified name that uniquely identifies the asset within the clean room.
     * This is also the name displayed in the clean room UI.
     * 
     * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
     * 
     * For notebooks, the name is the notebook file name.
     * For jar analyses, the name is the jar analysis name
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * (CleanRoomAssetNotebook) - Notebook details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **NOTEBOOK_FILE**
     * 
     */
    @Import(name="notebook")
    private @Nullable GetCleanRoomAssetRevisionsCleanRoomAssetNotebook notebook;

    /**
     * @return (CleanRoomAssetNotebook) - Notebook details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **NOTEBOOK_FILE**
     * 
     */
    public Optional<GetCleanRoomAssetRevisionsCleanRoomAssetNotebook> notebook() {
        return Optional.ofNullable(this.notebook);
    }

    /**
     * (CleanRoomAssetTable) - Table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    @Import(name="table")
    private @Nullable GetCleanRoomAssetRevisionsCleanRoomAssetTable table;

    /**
     * @return (CleanRoomAssetTable) - Table details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    public Optional<GetCleanRoomAssetRevisionsCleanRoomAssetTable> table() {
        return Optional.ofNullable(this.table);
    }

    /**
     * (CleanRoomAssetTableLocalDetails) - Local details for a table that are only available to its owner.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    @Import(name="tableLocalDetails")
    private @Nullable GetCleanRoomAssetRevisionsCleanRoomAssetTableLocalDetails tableLocalDetails;

    /**
     * @return (CleanRoomAssetTableLocalDetails) - Local details for a table that are only available to its owner.
     * Present if and only if **asset_type** is **TABLE**
     * 
     */
    public Optional<GetCleanRoomAssetRevisionsCleanRoomAssetTableLocalDetails> tableLocalDetails() {
        return Optional.ofNullable(this.tableLocalDetails);
    }

    /**
     * (CleanRoomAssetView) - View details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    @Import(name="view")
    private @Nullable GetCleanRoomAssetRevisionsCleanRoomAssetView view;

    /**
     * @return (CleanRoomAssetView) - View details available to all collaborators of the clean room.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    public Optional<GetCleanRoomAssetRevisionsCleanRoomAssetView> view() {
        return Optional.ofNullable(this.view);
    }

    /**
     * (CleanRoomAssetViewLocalDetails) - Local details for a view that are only available to its owner.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    @Import(name="viewLocalDetails")
    private @Nullable GetCleanRoomAssetRevisionsCleanRoomAssetViewLocalDetails viewLocalDetails;

    /**
     * @return (CleanRoomAssetViewLocalDetails) - Local details for a view that are only available to its owner.
     * Present if and only if **asset_type** is **VIEW**
     * 
     */
    public Optional<GetCleanRoomAssetRevisionsCleanRoomAssetViewLocalDetails> viewLocalDetails() {
        return Optional.ofNullable(this.viewLocalDetails);
    }

    /**
     * (CleanRoomAssetVolumeLocalDetails) - Local details for a volume that are only available to its owner.
     * Present if and only if **asset_type** is **VOLUME**
     * 
     */
    @Import(name="volumeLocalDetails")
    private @Nullable GetCleanRoomAssetRevisionsCleanRoomAssetVolumeLocalDetails volumeLocalDetails;

    /**
     * @return (CleanRoomAssetVolumeLocalDetails) - Local details for a volume that are only available to its owner.
     * Present if and only if **asset_type** is **VOLUME**
     * 
     */
    public Optional<GetCleanRoomAssetRevisionsCleanRoomAssetVolumeLocalDetails> volumeLocalDetails() {
        return Optional.ofNullable(this.volumeLocalDetails);
    }

    /**
     * Workspace ID of the resource
     * 
     */
    @Import(name="workspaceId")
    private @Nullable String workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Optional<String> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs() {}

    private GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs(GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs $) {
        this.assetType = $.assetType;
        this.cleanRoomName = $.cleanRoomName;
        this.foreignTable = $.foreignTable;
        this.foreignTableLocalDetails = $.foreignTableLocalDetails;
        this.name = $.name;
        this.notebook = $.notebook;
        this.table = $.table;
        this.tableLocalDetails = $.tableLocalDetails;
        this.view = $.view;
        this.viewLocalDetails = $.viewLocalDetails;
        this.volumeLocalDetails = $.volumeLocalDetails;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs $;

        public Builder() {
            $ = new GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs();
        }

        public Builder(GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs defaults) {
            $ = new GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assetType (string) - The type of the asset. Possible values are: `FOREIGN_TABLE`, `NOTEBOOK_FILE`, `TABLE`, `VIEW`, `VOLUME`
         * 
         * @return builder
         * 
         */
        public Builder assetType(String assetType) {
            $.assetType = assetType;
            return this;
        }

        /**
         * @param cleanRoomName (string) - The name of the clean room this asset belongs to.
         * This field is required for create operations and populated by the server for responses
         * 
         * @return builder
         * 
         */
        public Builder cleanRoomName(@Nullable String cleanRoomName) {
            $.cleanRoomName = cleanRoomName;
            return this;
        }

        /**
         * @param foreignTable (CleanRoomAssetForeignTable) - Foreign table details available to all collaborators of the clean room.
         * Present if and only if **asset_type** is **FOREIGN_TABLE**
         * 
         * @return builder
         * 
         */
        public Builder foreignTable(@Nullable GetCleanRoomAssetRevisionsCleanRoomAssetForeignTable foreignTable) {
            $.foreignTable = foreignTable;
            return this;
        }

        /**
         * @param foreignTableLocalDetails (CleanRoomAssetForeignTableLocalDetails) - Local details for a foreign that are only available to its owner.
         * Present if and only if **asset_type** is **FOREIGN_TABLE**
         * 
         * @return builder
         * 
         */
        public Builder foreignTableLocalDetails(@Nullable GetCleanRoomAssetRevisionsCleanRoomAssetForeignTableLocalDetails foreignTableLocalDetails) {
            $.foreignTableLocalDetails = foreignTableLocalDetails;
            return this;
        }

        /**
         * @param name A fully qualified name that uniquely identifies the asset within the clean room.
         * This is also the name displayed in the clean room UI.
         * 
         * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
         * 
         * For notebooks, the name is the notebook file name.
         * For jar analyses, the name is the jar analysis name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param notebook (CleanRoomAssetNotebook) - Notebook details available to all collaborators of the clean room.
         * Present if and only if **asset_type** is **NOTEBOOK_FILE**
         * 
         * @return builder
         * 
         */
        public Builder notebook(@Nullable GetCleanRoomAssetRevisionsCleanRoomAssetNotebook notebook) {
            $.notebook = notebook;
            return this;
        }

        /**
         * @param table (CleanRoomAssetTable) - Table details available to all collaborators of the clean room.
         * Present if and only if **asset_type** is **TABLE**
         * 
         * @return builder
         * 
         */
        public Builder table(@Nullable GetCleanRoomAssetRevisionsCleanRoomAssetTable table) {
            $.table = table;
            return this;
        }

        /**
         * @param tableLocalDetails (CleanRoomAssetTableLocalDetails) - Local details for a table that are only available to its owner.
         * Present if and only if **asset_type** is **TABLE**
         * 
         * @return builder
         * 
         */
        public Builder tableLocalDetails(@Nullable GetCleanRoomAssetRevisionsCleanRoomAssetTableLocalDetails tableLocalDetails) {
            $.tableLocalDetails = tableLocalDetails;
            return this;
        }

        /**
         * @param view (CleanRoomAssetView) - View details available to all collaborators of the clean room.
         * Present if and only if **asset_type** is **VIEW**
         * 
         * @return builder
         * 
         */
        public Builder view(@Nullable GetCleanRoomAssetRevisionsCleanRoomAssetView view) {
            $.view = view;
            return this;
        }

        /**
         * @param viewLocalDetails (CleanRoomAssetViewLocalDetails) - Local details for a view that are only available to its owner.
         * Present if and only if **asset_type** is **VIEW**
         * 
         * @return builder
         * 
         */
        public Builder viewLocalDetails(@Nullable GetCleanRoomAssetRevisionsCleanRoomAssetViewLocalDetails viewLocalDetails) {
            $.viewLocalDetails = viewLocalDetails;
            return this;
        }

        /**
         * @param volumeLocalDetails (CleanRoomAssetVolumeLocalDetails) - Local details for a volume that are only available to its owner.
         * Present if and only if **asset_type** is **VOLUME**
         * 
         * @return builder
         * 
         */
        public Builder volumeLocalDetails(@Nullable GetCleanRoomAssetRevisionsCleanRoomAssetVolumeLocalDetails volumeLocalDetails) {
            $.volumeLocalDetails = volumeLocalDetails;
            return this;
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable String workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        public GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs build() {
            if ($.assetType == null) {
                throw new MissingRequiredPropertyException("GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs", "assetType");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetCleanRoomAssetRevisionsCleanRoomAssetPlainArgs", "name");
            }
            return $;
        }
    }

}
