// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.SqlWidgetParameterArgs;
import com.pulumi.databricks.inputs.SqlWidgetPositionArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SqlWidgetArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlWidgetArgs Empty = new SqlWidgetArgs();

    @Import(name="dashboardId", required=true)
    private Output<String> dashboardId;

    public Output<String> dashboardId() {
        return this.dashboardId;
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="parameters")
    private @Nullable Output<List<SqlWidgetParameterArgs>> parameters;

    public Optional<Output<List<SqlWidgetParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    @Import(name="position")
    private @Nullable Output<SqlWidgetPositionArgs> position;

    public Optional<Output<SqlWidgetPositionArgs>> position() {
        return Optional.ofNullable(this.position);
    }

    @Import(name="text")
    private @Nullable Output<String> text;

    public Optional<Output<String>> text() {
        return Optional.ofNullable(this.text);
    }

    @Import(name="title")
    private @Nullable Output<String> title;

    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    @Import(name="visualizationId")
    private @Nullable Output<String> visualizationId;

    public Optional<Output<String>> visualizationId() {
        return Optional.ofNullable(this.visualizationId);
    }

    @Import(name="widgetId")
    private @Nullable Output<String> widgetId;

    public Optional<Output<String>> widgetId() {
        return Optional.ofNullable(this.widgetId);
    }

    private SqlWidgetArgs() {}

    private SqlWidgetArgs(SqlWidgetArgs $) {
        this.dashboardId = $.dashboardId;
        this.description = $.description;
        this.parameters = $.parameters;
        this.position = $.position;
        this.text = $.text;
        this.title = $.title;
        this.visualizationId = $.visualizationId;
        this.widgetId = $.widgetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlWidgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlWidgetArgs $;

        public Builder() {
            $ = new SqlWidgetArgs();
        }

        public Builder(SqlWidgetArgs defaults) {
            $ = new SqlWidgetArgs(Objects.requireNonNull(defaults));
        }

        public Builder dashboardId(Output<String> dashboardId) {
            $.dashboardId = dashboardId;
            return this;
        }

        public Builder dashboardId(String dashboardId) {
            return dashboardId(Output.of(dashboardId));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder parameters(@Nullable Output<List<SqlWidgetParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(List<SqlWidgetParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder parameters(SqlWidgetParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        public Builder position(@Nullable Output<SqlWidgetPositionArgs> position) {
            $.position = position;
            return this;
        }

        public Builder position(SqlWidgetPositionArgs position) {
            return position(Output.of(position));
        }

        public Builder text(@Nullable Output<String> text) {
            $.text = text;
            return this;
        }

        public Builder text(String text) {
            return text(Output.of(text));
        }

        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder visualizationId(@Nullable Output<String> visualizationId) {
            $.visualizationId = visualizationId;
            return this;
        }

        public Builder visualizationId(String visualizationId) {
            return visualizationId(Output.of(visualizationId));
        }

        public Builder widgetId(@Nullable Output<String> widgetId) {
            $.widgetId = widgetId;
            return this;
        }

        public Builder widgetId(String widgetId) {
            return widgetId(Output.of(widgetId));
        }

        public SqlWidgetArgs build() {
            if ($.dashboardId == null) {
                throw new MissingRequiredPropertyException("SqlWidgetArgs", "dashboardId");
            }
            return $;
        }
    }

}
