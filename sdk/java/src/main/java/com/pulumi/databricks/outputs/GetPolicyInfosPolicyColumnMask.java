// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetPolicyInfosPolicyColumnMaskUsing;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetPolicyInfosPolicyColumnMask {
    /**
     * @return (string) - The fully qualified name of the row filter function.
     * The function is called on each row of the target table. It should return a boolean value
     * indicating whether the row should be visible to the user.
     * Required on create and update
     * 
     */
    private String functionName;
    /**
     * @return (string) - The alias of the column to be masked. The alias must refer to one of matched columns.
     * The values of the column is passed to the column mask function as the first argument.
     * Required on create and update
     * 
     */
    private String onColumn;
    /**
     * @return (list of FunctionArgument) - Optional list of column aliases or constant literals to be passed as arguments to the row filter function.
     * The type of each column should match the positional argument of the row filter function
     * 
     */
    private @Nullable List<GetPolicyInfosPolicyColumnMaskUsing> usings;

    private GetPolicyInfosPolicyColumnMask() {}
    /**
     * @return (string) - The fully qualified name of the row filter function.
     * The function is called on each row of the target table. It should return a boolean value
     * indicating whether the row should be visible to the user.
     * Required on create and update
     * 
     */
    public String functionName() {
        return this.functionName;
    }
    /**
     * @return (string) - The alias of the column to be masked. The alias must refer to one of matched columns.
     * The values of the column is passed to the column mask function as the first argument.
     * Required on create and update
     * 
     */
    public String onColumn() {
        return this.onColumn;
    }
    /**
     * @return (list of FunctionArgument) - Optional list of column aliases or constant literals to be passed as arguments to the row filter function.
     * The type of each column should match the positional argument of the row filter function
     * 
     */
    public List<GetPolicyInfosPolicyColumnMaskUsing> usings() {
        return this.usings == null ? List.of() : this.usings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPolicyInfosPolicyColumnMask defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String functionName;
        private String onColumn;
        private @Nullable List<GetPolicyInfosPolicyColumnMaskUsing> usings;
        public Builder() {}
        public Builder(GetPolicyInfosPolicyColumnMask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.functionName = defaults.functionName;
    	      this.onColumn = defaults.onColumn;
    	      this.usings = defaults.usings;
        }

        @CustomType.Setter
        public Builder functionName(String functionName) {
            if (functionName == null) {
              throw new MissingRequiredPropertyException("GetPolicyInfosPolicyColumnMask", "functionName");
            }
            this.functionName = functionName;
            return this;
        }
        @CustomType.Setter
        public Builder onColumn(String onColumn) {
            if (onColumn == null) {
              throw new MissingRequiredPropertyException("GetPolicyInfosPolicyColumnMask", "onColumn");
            }
            this.onColumn = onColumn;
            return this;
        }
        @CustomType.Setter
        public Builder usings(@Nullable List<GetPolicyInfosPolicyColumnMaskUsing> usings) {

            this.usings = usings;
            return this;
        }
        public Builder usings(GetPolicyInfosPolicyColumnMaskUsing... usings) {
            return usings(List.of(usings));
        }
        public GetPolicyInfosPolicyColumnMask build() {
            final var _resultValue = new GetPolicyInfosPolicyColumnMask();
            _resultValue.functionName = functionName;
            _resultValue.onColumn = onColumn;
            _resultValue.usings = usings;
            return _resultValue;
        }
    }
}
