// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SqlQueryScheduleContinuousArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlQueryScheduleContinuousArgs Empty = new SqlQueryScheduleContinuousArgs();

    @Import(name="intervalSeconds", required=true)
    private Output<Integer> intervalSeconds;

    public Output<Integer> intervalSeconds() {
        return this.intervalSeconds;
    }

    @Import(name="untilDate")
    private @Nullable Output<String> untilDate;

    public Optional<Output<String>> untilDate() {
        return Optional.ofNullable(this.untilDate);
    }

    private SqlQueryScheduleContinuousArgs() {}

    private SqlQueryScheduleContinuousArgs(SqlQueryScheduleContinuousArgs $) {
        this.intervalSeconds = $.intervalSeconds;
        this.untilDate = $.untilDate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlQueryScheduleContinuousArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlQueryScheduleContinuousArgs $;

        public Builder() {
            $ = new SqlQueryScheduleContinuousArgs();
        }

        public Builder(SqlQueryScheduleContinuousArgs defaults) {
            $ = new SqlQueryScheduleContinuousArgs(Objects.requireNonNull(defaults));
        }

        public Builder intervalSeconds(Output<Integer> intervalSeconds) {
            $.intervalSeconds = intervalSeconds;
            return this;
        }

        public Builder intervalSeconds(Integer intervalSeconds) {
            return intervalSeconds(Output.of(intervalSeconds));
        }

        public Builder untilDate(@Nullable Output<String> untilDate) {
            $.untilDate = untilDate;
            return this;
        }

        public Builder untilDate(String untilDate) {
            return untilDate(Output.of(untilDate));
        }

        public SqlQueryScheduleContinuousArgs build() {
            if ($.intervalSeconds == null) {
                throw new MissingRequiredPropertyException("SqlQueryScheduleContinuousArgs", "intervalSeconds");
            }
            return $;
        }
    }

}
