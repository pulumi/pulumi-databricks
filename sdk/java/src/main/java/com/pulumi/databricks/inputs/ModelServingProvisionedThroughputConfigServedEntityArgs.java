// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelServingProvisionedThroughputConfigServedEntityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelServingProvisionedThroughputConfigServedEntityArgs Empty = new ModelServingProvisionedThroughputConfigServedEntityArgs();

    /**
     * The full path of the UC model to be served, given in the form of `catalog_name.schema_name.model_name`.
     * 
     */
    @Import(name="entityName", required=true)
    private Output<String> entityName;

    /**
     * @return The full path of the UC model to be served, given in the form of `catalog_name.schema_name.model_name`.
     * 
     */
    public Output<String> entityName() {
        return this.entityName;
    }

    /**
     * The version of the model in UC to be served.
     * 
     */
    @Import(name="entityVersion", required=true)
    private Output<String> entityVersion;

    /**
     * @return The version of the model in UC to be served.
     * 
     */
    public Output<String> entityVersion() {
        return this.entityVersion;
    }

    /**
     * The name of a served entity. It must be unique across an endpoint. A served entity name can consist of alphanumeric characters, dashes, and underscores. If not specified for an external model, this field will be created from the `entity_name` and `entity_version`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of a served entity. It must be unique across an endpoint. A served entity name can consist of alphanumeric characters, dashes, and underscores. If not specified for an external model, this field will be created from the `entity_name` and `entity_version`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of model units to be provisioned.
     * 
     */
    @Import(name="provisionedModelUnits", required=true)
    private Output<Integer> provisionedModelUnits;

    /**
     * @return The number of model units to be provisioned.
     * 
     */
    public Output<Integer> provisionedModelUnits() {
        return this.provisionedModelUnits;
    }

    private ModelServingProvisionedThroughputConfigServedEntityArgs() {}

    private ModelServingProvisionedThroughputConfigServedEntityArgs(ModelServingProvisionedThroughputConfigServedEntityArgs $) {
        this.entityName = $.entityName;
        this.entityVersion = $.entityVersion;
        this.name = $.name;
        this.provisionedModelUnits = $.provisionedModelUnits;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelServingProvisionedThroughputConfigServedEntityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelServingProvisionedThroughputConfigServedEntityArgs $;

        public Builder() {
            $ = new ModelServingProvisionedThroughputConfigServedEntityArgs();
        }

        public Builder(ModelServingProvisionedThroughputConfigServedEntityArgs defaults) {
            $ = new ModelServingProvisionedThroughputConfigServedEntityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param entityName The full path of the UC model to be served, given in the form of `catalog_name.schema_name.model_name`.
         * 
         * @return builder
         * 
         */
        public Builder entityName(Output<String> entityName) {
            $.entityName = entityName;
            return this;
        }

        /**
         * @param entityName The full path of the UC model to be served, given in the form of `catalog_name.schema_name.model_name`.
         * 
         * @return builder
         * 
         */
        public Builder entityName(String entityName) {
            return entityName(Output.of(entityName));
        }

        /**
         * @param entityVersion The version of the model in UC to be served.
         * 
         * @return builder
         * 
         */
        public Builder entityVersion(Output<String> entityVersion) {
            $.entityVersion = entityVersion;
            return this;
        }

        /**
         * @param entityVersion The version of the model in UC to be served.
         * 
         * @return builder
         * 
         */
        public Builder entityVersion(String entityVersion) {
            return entityVersion(Output.of(entityVersion));
        }

        /**
         * @param name The name of a served entity. It must be unique across an endpoint. A served entity name can consist of alphanumeric characters, dashes, and underscores. If not specified for an external model, this field will be created from the `entity_name` and `entity_version`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of a served entity. It must be unique across an endpoint. A served entity name can consist of alphanumeric characters, dashes, and underscores. If not specified for an external model, this field will be created from the `entity_name` and `entity_version`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param provisionedModelUnits The number of model units to be provisioned.
         * 
         * @return builder
         * 
         */
        public Builder provisionedModelUnits(Output<Integer> provisionedModelUnits) {
            $.provisionedModelUnits = provisionedModelUnits;
            return this;
        }

        /**
         * @param provisionedModelUnits The number of model units to be provisioned.
         * 
         * @return builder
         * 
         */
        public Builder provisionedModelUnits(Integer provisionedModelUnits) {
            return provisionedModelUnits(Output.of(provisionedModelUnits));
        }

        public ModelServingProvisionedThroughputConfigServedEntityArgs build() {
            if ($.entityName == null) {
                throw new MissingRequiredPropertyException("ModelServingProvisionedThroughputConfigServedEntityArgs", "entityName");
            }
            if ($.entityVersion == null) {
                throw new MissingRequiredPropertyException("ModelServingProvisionedThroughputConfigServedEntityArgs", "entityVersion");
            }
            if ($.provisionedModelUnits == null) {
                throw new MissingRequiredPropertyException("ModelServingProvisionedThroughputConfigServedEntityArgs", "provisionedModelUnits");
            }
            return $;
        }
    }

}
