// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.RepoSparseCheckoutArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepoState extends com.pulumi.resources.ResourceArgs {

    public static final RepoState Empty = new RepoState();

    @Import(name="branch")
    private @Nullable Output<String> branch;

    public Optional<Output<String>> branch() {
        return Optional.ofNullable(this.branch);
    }

    @Import(name="commitHash")
    private @Nullable Output<String> commitHash;

    public Optional<Output<String>> commitHash() {
        return Optional.ofNullable(this.commitHash);
    }

    @Import(name="gitProvider")
    private @Nullable Output<String> gitProvider;

    public Optional<Output<String>> gitProvider() {
        return Optional.ofNullable(this.gitProvider);
    }

    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    @Import(name="sparseCheckout")
    private @Nullable Output<RepoSparseCheckoutArgs> sparseCheckout;

    public Optional<Output<RepoSparseCheckoutArgs>> sparseCheckout() {
        return Optional.ofNullable(this.sparseCheckout);
    }

    @Import(name="tag")
    private @Nullable Output<String> tag;

    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    @Import(name="url")
    private @Nullable Output<String> url;

    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    @Import(name="workspacePath")
    private @Nullable Output<String> workspacePath;

    public Optional<Output<String>> workspacePath() {
        return Optional.ofNullable(this.workspacePath);
    }

    private RepoState() {}

    private RepoState(RepoState $) {
        this.branch = $.branch;
        this.commitHash = $.commitHash;
        this.gitProvider = $.gitProvider;
        this.path = $.path;
        this.sparseCheckout = $.sparseCheckout;
        this.tag = $.tag;
        this.url = $.url;
        this.workspacePath = $.workspacePath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepoState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepoState $;

        public Builder() {
            $ = new RepoState();
        }

        public Builder(RepoState defaults) {
            $ = new RepoState(Objects.requireNonNull(defaults));
        }

        public Builder branch(@Nullable Output<String> branch) {
            $.branch = branch;
            return this;
        }

        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        public Builder commitHash(@Nullable Output<String> commitHash) {
            $.commitHash = commitHash;
            return this;
        }

        public Builder commitHash(String commitHash) {
            return commitHash(Output.of(commitHash));
        }

        public Builder gitProvider(@Nullable Output<String> gitProvider) {
            $.gitProvider = gitProvider;
            return this;
        }

        public Builder gitProvider(String gitProvider) {
            return gitProvider(Output.of(gitProvider));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder sparseCheckout(@Nullable Output<RepoSparseCheckoutArgs> sparseCheckout) {
            $.sparseCheckout = sparseCheckout;
            return this;
        }

        public Builder sparseCheckout(RepoSparseCheckoutArgs sparseCheckout) {
            return sparseCheckout(Output.of(sparseCheckout));
        }

        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        public Builder url(String url) {
            return url(Output.of(url));
        }

        public Builder workspacePath(@Nullable Output<String> workspacePath) {
            $.workspacePath = workspacePath;
            return this;
        }

        public Builder workspacePath(String workspacePath) {
            return workspacePath(Output.of(workspacePath));
        }

        public RepoState build() {
            return $;
        }
    }

}
