// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTableTableInfoTableConstraintForeignKeyConstraintArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetTableTableInfoTableConstraintForeignKeyConstraintArgs Empty = new GetTableTableInfoTableConstraintForeignKeyConstraintArgs();

    @Import(name="childColumns", required=true)
    private Output<List<String>> childColumns;

    public Output<List<String>> childColumns() {
        return this.childColumns;
    }

    /**
     * Full name of the databricks_table: _`catalog`.`schema`.`table`_
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Full name of the databricks_table: _`catalog`.`schema`.`table`_
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="parentColumns", required=true)
    private Output<List<String>> parentColumns;

    public Output<List<String>> parentColumns() {
        return this.parentColumns;
    }

    @Import(name="parentTable", required=true)
    private Output<String> parentTable;

    public Output<String> parentTable() {
        return this.parentTable;
    }

    @Import(name="rely")
    private @Nullable Output<Boolean> rely;

    public Optional<Output<Boolean>> rely() {
        return Optional.ofNullable(this.rely);
    }

    private GetTableTableInfoTableConstraintForeignKeyConstraintArgs() {}

    private GetTableTableInfoTableConstraintForeignKeyConstraintArgs(GetTableTableInfoTableConstraintForeignKeyConstraintArgs $) {
        this.childColumns = $.childColumns;
        this.name = $.name;
        this.parentColumns = $.parentColumns;
        this.parentTable = $.parentTable;
        this.rely = $.rely;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTableTableInfoTableConstraintForeignKeyConstraintArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTableTableInfoTableConstraintForeignKeyConstraintArgs $;

        public Builder() {
            $ = new GetTableTableInfoTableConstraintForeignKeyConstraintArgs();
        }

        public Builder(GetTableTableInfoTableConstraintForeignKeyConstraintArgs defaults) {
            $ = new GetTableTableInfoTableConstraintForeignKeyConstraintArgs(Objects.requireNonNull(defaults));
        }

        public Builder childColumns(Output<List<String>> childColumns) {
            $.childColumns = childColumns;
            return this;
        }

        public Builder childColumns(List<String> childColumns) {
            return childColumns(Output.of(childColumns));
        }

        public Builder childColumns(String... childColumns) {
            return childColumns(List.of(childColumns));
        }

        /**
         * @param name Full name of the databricks_table: _`catalog`.`schema`.`table`_
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Full name of the databricks_table: _`catalog`.`schema`.`table`_
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parentColumns(Output<List<String>> parentColumns) {
            $.parentColumns = parentColumns;
            return this;
        }

        public Builder parentColumns(List<String> parentColumns) {
            return parentColumns(Output.of(parentColumns));
        }

        public Builder parentColumns(String... parentColumns) {
            return parentColumns(List.of(parentColumns));
        }

        public Builder parentTable(Output<String> parentTable) {
            $.parentTable = parentTable;
            return this;
        }

        public Builder parentTable(String parentTable) {
            return parentTable(Output.of(parentTable));
        }

        public Builder rely(@Nullable Output<Boolean> rely) {
            $.rely = rely;
            return this;
        }

        public Builder rely(Boolean rely) {
            return rely(Output.of(rely));
        }

        public GetTableTableInfoTableConstraintForeignKeyConstraintArgs build() {
            if ($.childColumns == null) {
                throw new MissingRequiredPropertyException("GetTableTableInfoTableConstraintForeignKeyConstraintArgs", "childColumns");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetTableTableInfoTableConstraintForeignKeyConstraintArgs", "name");
            }
            if ($.parentColumns == null) {
                throw new MissingRequiredPropertyException("GetTableTableInfoTableConstraintForeignKeyConstraintArgs", "parentColumns");
            }
            if ($.parentTable == null) {
                throw new MissingRequiredPropertyException("GetTableTableInfoTableConstraintForeignKeyConstraintArgs", "parentTable");
            }
            return $;
        }
    }

}
