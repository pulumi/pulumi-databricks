// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetTableTableInfoColumnMask;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTableTableInfoColumn extends com.pulumi.resources.InvokeArgs {

    public static final GetTableTableInfoColumn Empty = new GetTableTableInfoColumn();

    /**
     * Free-form text description
     * 
     */
    @Import(name="comment")
    private @Nullable String comment;

    /**
     * @return Free-form text description
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="mask")
    private @Nullable GetTableTableInfoColumnMask mask;

    public Optional<GetTableTableInfoColumnMask> mask() {
        return Optional.ofNullable(this.mask);
    }

    /**
     * Full name of the databricks_table: _`catalog`.`schema`.`table`_
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Full name of the databricks_table: _`catalog`.`schema`.`table`_
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="nullable")
    private @Nullable Boolean nullable;

    public Optional<Boolean> nullable() {
        return Optional.ofNullable(this.nullable);
    }

    @Import(name="partitionIndex")
    private @Nullable Integer partitionIndex;

    public Optional<Integer> partitionIndex() {
        return Optional.ofNullable(this.partitionIndex);
    }

    @Import(name="position")
    private @Nullable Integer position;

    public Optional<Integer> position() {
        return Optional.ofNullable(this.position);
    }

    @Import(name="typeIntervalType")
    private @Nullable String typeIntervalType;

    public Optional<String> typeIntervalType() {
        return Optional.ofNullable(this.typeIntervalType);
    }

    @Import(name="typeJson")
    private @Nullable String typeJson;

    public Optional<String> typeJson() {
        return Optional.ofNullable(this.typeJson);
    }

    @Import(name="typeName")
    private @Nullable String typeName;

    public Optional<String> typeName() {
        return Optional.ofNullable(this.typeName);
    }

    @Import(name="typePrecision")
    private @Nullable Integer typePrecision;

    public Optional<Integer> typePrecision() {
        return Optional.ofNullable(this.typePrecision);
    }

    @Import(name="typeScale")
    private @Nullable Integer typeScale;

    public Optional<Integer> typeScale() {
        return Optional.ofNullable(this.typeScale);
    }

    @Import(name="typeText")
    private @Nullable String typeText;

    public Optional<String> typeText() {
        return Optional.ofNullable(this.typeText);
    }

    private GetTableTableInfoColumn() {}

    private GetTableTableInfoColumn(GetTableTableInfoColumn $) {
        this.comment = $.comment;
        this.mask = $.mask;
        this.name = $.name;
        this.nullable = $.nullable;
        this.partitionIndex = $.partitionIndex;
        this.position = $.position;
        this.typeIntervalType = $.typeIntervalType;
        this.typeJson = $.typeJson;
        this.typeName = $.typeName;
        this.typePrecision = $.typePrecision;
        this.typeScale = $.typeScale;
        this.typeText = $.typeText;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTableTableInfoColumn defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTableTableInfoColumn $;

        public Builder() {
            $ = new GetTableTableInfoColumn();
        }

        public Builder(GetTableTableInfoColumn defaults) {
            $ = new GetTableTableInfoColumn(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Free-form text description
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable String comment) {
            $.comment = comment;
            return this;
        }

        public Builder mask(@Nullable GetTableTableInfoColumnMask mask) {
            $.mask = mask;
            return this;
        }

        /**
         * @param name Full name of the databricks_table: _`catalog`.`schema`.`table`_
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder nullable(@Nullable Boolean nullable) {
            $.nullable = nullable;
            return this;
        }

        public Builder partitionIndex(@Nullable Integer partitionIndex) {
            $.partitionIndex = partitionIndex;
            return this;
        }

        public Builder position(@Nullable Integer position) {
            $.position = position;
            return this;
        }

        public Builder typeIntervalType(@Nullable String typeIntervalType) {
            $.typeIntervalType = typeIntervalType;
            return this;
        }

        public Builder typeJson(@Nullable String typeJson) {
            $.typeJson = typeJson;
            return this;
        }

        public Builder typeName(@Nullable String typeName) {
            $.typeName = typeName;
            return this;
        }

        public Builder typePrecision(@Nullable Integer typePrecision) {
            $.typePrecision = typePrecision;
            return this;
        }

        public Builder typeScale(@Nullable Integer typeScale) {
            $.typeScale = typeScale;
            return this;
        }

        public Builder typeText(@Nullable String typeText) {
            $.typeText = typeText;
            return this;
        }

        public GetTableTableInfoColumn build() {
            return $;
        }
    }

}
