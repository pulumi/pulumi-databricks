// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs;
import com.pulumi.databricks.inputs.DatabaseSyncedDatabaseTableSpecArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseSyncedDatabaseTableState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseSyncedDatabaseTableState Empty = new DatabaseSyncedDatabaseTableState();

    /**
     * (SyncedTableStatus) - Synced Table data synchronization status
     * 
     */
    @Import(name="dataSynchronizationStatus")
    private @Nullable Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs> dataSynchronizationStatus;

    /**
     * @return (SyncedTableStatus) - Synced Table data synchronization status
     * 
     */
    public Optional<Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs>> dataSynchronizationStatus() {
        return Optional.ofNullable(this.dataSynchronizationStatus);
    }

    /**
     * Name of the target database instance. This is required when creating synced database tables in standard catalogs.
     * This is optional when creating synced database tables in registered catalogs. If this field is specified
     * when creating synced database tables in registered catalogs, the database instance name MUST
     * match that of the registered catalog (or the request will be rejected)
     * 
     */
    @Import(name="databaseInstanceName")
    private @Nullable Output<String> databaseInstanceName;

    /**
     * @return Name of the target database instance. This is required when creating synced database tables in standard catalogs.
     * This is optional when creating synced database tables in registered catalogs. If this field is specified
     * when creating synced database tables in registered catalogs, the database instance name MUST
     * match that of the registered catalog (or the request will be rejected)
     * 
     */
    public Optional<Output<String>> databaseInstanceName() {
        return Optional.ofNullable(this.databaseInstanceName);
    }

    /**
     * (string) - The name of the database instance that this table is registered to. This field is always returned, and for
     * tables inside database catalogs is inferred database instance associated with the catalog
     * 
     */
    @Import(name="effectiveDatabaseInstanceName")
    private @Nullable Output<String> effectiveDatabaseInstanceName;

    /**
     * @return (string) - The name of the database instance that this table is registered to. This field is always returned, and for
     * tables inside database catalogs is inferred database instance associated with the catalog
     * 
     */
    public Optional<Output<String>> effectiveDatabaseInstanceName() {
        return Optional.ofNullable(this.effectiveDatabaseInstanceName);
    }

    /**
     * (string) - The name of the logical database that this table is registered to
     * 
     */
    @Import(name="effectiveLogicalDatabaseName")
    private @Nullable Output<String> effectiveLogicalDatabaseName;

    /**
     * @return (string) - The name of the logical database that this table is registered to
     * 
     */
    public Optional<Output<String>> effectiveLogicalDatabaseName() {
        return Optional.ofNullable(this.effectiveLogicalDatabaseName);
    }

    /**
     * Target Postgres database object (logical database) name for this table.
     * 
     * When creating a synced table in a registered Postgres catalog, the
     * target Postgres database name is inferred to be that of the registered catalog.
     * If this field is specified in this scenario, the Postgres database name MUST
     * match that of the registered catalog (or the request will be rejected).
     * 
     * When creating a synced table in a standard catalog, this field is required.
     * In this scenario, specifying this field will allow targeting an arbitrary postgres database.
     * Note that this has implications for the `create_database_objects_is_missing` field in `spec`
     * 
     */
    @Import(name="logicalDatabaseName")
    private @Nullable Output<String> logicalDatabaseName;

    /**
     * @return Target Postgres database object (logical database) name for this table.
     * 
     * When creating a synced table in a registered Postgres catalog, the
     * target Postgres database name is inferred to be that of the registered catalog.
     * If this field is specified in this scenario, the Postgres database name MUST
     * match that of the registered catalog (or the request will be rejected).
     * 
     * When creating a synced table in a standard catalog, this field is required.
     * In this scenario, specifying this field will allow targeting an arbitrary postgres database.
     * Note that this has implications for the `create_database_objects_is_missing` field in `spec`
     * 
     */
    public Optional<Output<String>> logicalDatabaseName() {
        return Optional.ofNullable(this.logicalDatabaseName);
    }

    /**
     * Full three-part (catalog, schema, table) name of the table
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Full three-part (catalog, schema, table) name of the table
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="spec")
    private @Nullable Output<DatabaseSyncedDatabaseTableSpecArgs> spec;

    public Optional<Output<DatabaseSyncedDatabaseTableSpecArgs>> spec() {
        return Optional.ofNullable(this.spec);
    }

    /**
     * (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
     * state of the data synchronization pipeline (i.e. the table may be in &#34;ACTIVE&#34; but the pipeline
     * may be in &#34;PROVISIONING&#34; as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
     * 
     */
    @Import(name="unityCatalogProvisioningState")
    private @Nullable Output<String> unityCatalogProvisioningState;

    /**
     * @return (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
     * state of the data synchronization pipeline (i.e. the table may be in &#34;ACTIVE&#34; but the pipeline
     * may be in &#34;PROVISIONING&#34; as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
     * 
     */
    public Optional<Output<String>> unityCatalogProvisioningState() {
        return Optional.ofNullable(this.unityCatalogProvisioningState);
    }

    /**
     * Workspace ID of the resource
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private DatabaseSyncedDatabaseTableState() {}

    private DatabaseSyncedDatabaseTableState(DatabaseSyncedDatabaseTableState $) {
        this.dataSynchronizationStatus = $.dataSynchronizationStatus;
        this.databaseInstanceName = $.databaseInstanceName;
        this.effectiveDatabaseInstanceName = $.effectiveDatabaseInstanceName;
        this.effectiveLogicalDatabaseName = $.effectiveLogicalDatabaseName;
        this.logicalDatabaseName = $.logicalDatabaseName;
        this.name = $.name;
        this.spec = $.spec;
        this.unityCatalogProvisioningState = $.unityCatalogProvisioningState;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseSyncedDatabaseTableState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseSyncedDatabaseTableState $;

        public Builder() {
            $ = new DatabaseSyncedDatabaseTableState();
        }

        public Builder(DatabaseSyncedDatabaseTableState defaults) {
            $ = new DatabaseSyncedDatabaseTableState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataSynchronizationStatus (SyncedTableStatus) - Synced Table data synchronization status
         * 
         * @return builder
         * 
         */
        public Builder dataSynchronizationStatus(@Nullable Output<DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs> dataSynchronizationStatus) {
            $.dataSynchronizationStatus = dataSynchronizationStatus;
            return this;
        }

        /**
         * @param dataSynchronizationStatus (SyncedTableStatus) - Synced Table data synchronization status
         * 
         * @return builder
         * 
         */
        public Builder dataSynchronizationStatus(DatabaseSyncedDatabaseTableDataSynchronizationStatusArgs dataSynchronizationStatus) {
            return dataSynchronizationStatus(Output.of(dataSynchronizationStatus));
        }

        /**
         * @param databaseInstanceName Name of the target database instance. This is required when creating synced database tables in standard catalogs.
         * This is optional when creating synced database tables in registered catalogs. If this field is specified
         * when creating synced database tables in registered catalogs, the database instance name MUST
         * match that of the registered catalog (or the request will be rejected)
         * 
         * @return builder
         * 
         */
        public Builder databaseInstanceName(@Nullable Output<String> databaseInstanceName) {
            $.databaseInstanceName = databaseInstanceName;
            return this;
        }

        /**
         * @param databaseInstanceName Name of the target database instance. This is required when creating synced database tables in standard catalogs.
         * This is optional when creating synced database tables in registered catalogs. If this field is specified
         * when creating synced database tables in registered catalogs, the database instance name MUST
         * match that of the registered catalog (or the request will be rejected)
         * 
         * @return builder
         * 
         */
        public Builder databaseInstanceName(String databaseInstanceName) {
            return databaseInstanceName(Output.of(databaseInstanceName));
        }

        /**
         * @param effectiveDatabaseInstanceName (string) - The name of the database instance that this table is registered to. This field is always returned, and for
         * tables inside database catalogs is inferred database instance associated with the catalog
         * 
         * @return builder
         * 
         */
        public Builder effectiveDatabaseInstanceName(@Nullable Output<String> effectiveDatabaseInstanceName) {
            $.effectiveDatabaseInstanceName = effectiveDatabaseInstanceName;
            return this;
        }

        /**
         * @param effectiveDatabaseInstanceName (string) - The name of the database instance that this table is registered to. This field is always returned, and for
         * tables inside database catalogs is inferred database instance associated with the catalog
         * 
         * @return builder
         * 
         */
        public Builder effectiveDatabaseInstanceName(String effectiveDatabaseInstanceName) {
            return effectiveDatabaseInstanceName(Output.of(effectiveDatabaseInstanceName));
        }

        /**
         * @param effectiveLogicalDatabaseName (string) - The name of the logical database that this table is registered to
         * 
         * @return builder
         * 
         */
        public Builder effectiveLogicalDatabaseName(@Nullable Output<String> effectiveLogicalDatabaseName) {
            $.effectiveLogicalDatabaseName = effectiveLogicalDatabaseName;
            return this;
        }

        /**
         * @param effectiveLogicalDatabaseName (string) - The name of the logical database that this table is registered to
         * 
         * @return builder
         * 
         */
        public Builder effectiveLogicalDatabaseName(String effectiveLogicalDatabaseName) {
            return effectiveLogicalDatabaseName(Output.of(effectiveLogicalDatabaseName));
        }

        /**
         * @param logicalDatabaseName Target Postgres database object (logical database) name for this table.
         * 
         * When creating a synced table in a registered Postgres catalog, the
         * target Postgres database name is inferred to be that of the registered catalog.
         * If this field is specified in this scenario, the Postgres database name MUST
         * match that of the registered catalog (or the request will be rejected).
         * 
         * When creating a synced table in a standard catalog, this field is required.
         * In this scenario, specifying this field will allow targeting an arbitrary postgres database.
         * Note that this has implications for the `create_database_objects_is_missing` field in `spec`
         * 
         * @return builder
         * 
         */
        public Builder logicalDatabaseName(@Nullable Output<String> logicalDatabaseName) {
            $.logicalDatabaseName = logicalDatabaseName;
            return this;
        }

        /**
         * @param logicalDatabaseName Target Postgres database object (logical database) name for this table.
         * 
         * When creating a synced table in a registered Postgres catalog, the
         * target Postgres database name is inferred to be that of the registered catalog.
         * If this field is specified in this scenario, the Postgres database name MUST
         * match that of the registered catalog (or the request will be rejected).
         * 
         * When creating a synced table in a standard catalog, this field is required.
         * In this scenario, specifying this field will allow targeting an arbitrary postgres database.
         * Note that this has implications for the `create_database_objects_is_missing` field in `spec`
         * 
         * @return builder
         * 
         */
        public Builder logicalDatabaseName(String logicalDatabaseName) {
            return logicalDatabaseName(Output.of(logicalDatabaseName));
        }

        /**
         * @param name Full three-part (catalog, schema, table) name of the table
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Full three-part (catalog, schema, table) name of the table
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder spec(@Nullable Output<DatabaseSyncedDatabaseTableSpecArgs> spec) {
            $.spec = spec;
            return this;
        }

        public Builder spec(DatabaseSyncedDatabaseTableSpecArgs spec) {
            return spec(Output.of(spec));
        }

        /**
         * @param unityCatalogProvisioningState (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
         * state of the data synchronization pipeline (i.e. the table may be in &#34;ACTIVE&#34; but the pipeline
         * may be in &#34;PROVISIONING&#34; as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
         * 
         * @return builder
         * 
         */
        public Builder unityCatalogProvisioningState(@Nullable Output<String> unityCatalogProvisioningState) {
            $.unityCatalogProvisioningState = unityCatalogProvisioningState;
            return this;
        }

        /**
         * @param unityCatalogProvisioningState (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
         * state of the data synchronization pipeline (i.e. the table may be in &#34;ACTIVE&#34; but the pipeline
         * may be in &#34;PROVISIONING&#34; as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
         * 
         * @return builder
         * 
         */
        public Builder unityCatalogProvisioningState(String unityCatalogProvisioningState) {
            return unityCatalogProvisioningState(Output.of(unityCatalogProvisioningState));
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public DatabaseSyncedDatabaseTableState build() {
            return $;
        }
    }

}
