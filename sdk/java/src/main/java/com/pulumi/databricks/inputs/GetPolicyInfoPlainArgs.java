// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetPolicyInfoColumnMask;
import com.pulumi.databricks.inputs.GetPolicyInfoMatchColumn;
import com.pulumi.databricks.inputs.GetPolicyInfoRowFilter;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPolicyInfoPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPolicyInfoPlainArgs Empty = new GetPolicyInfoPlainArgs();

    /**
     * (ColumnMaskOptions) - Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    @Import(name="columnMask")
    private @Nullable GetPolicyInfoColumnMask columnMask;

    /**
     * @return (ColumnMaskOptions) - Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    public Optional<GetPolicyInfoColumnMask> columnMask() {
        return Optional.ofNullable(this.columnMask);
    }

    /**
     * (string) - Optional description of the policy
     * 
     */
    @Import(name="comment")
    private @Nullable String comment;

    /**
     * @return (string) - Optional description of the policy
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * (list of string) - Optional list of user or group names that should be excluded from the policy
     * 
     */
    @Import(name="exceptPrincipals")
    private @Nullable List<String> exceptPrincipals;

    /**
     * @return (list of string) - Optional list of user or group names that should be excluded from the policy
     * 
     */
    public Optional<List<String>> exceptPrincipals() {
        return Optional.ofNullable(this.exceptPrincipals);
    }

    /**
     * (string) - Type of securables that the policy should take effect on.
     * Only `table` is supported at this moment.
     * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    @Import(name="forSecurableType", required=true)
    private String forSecurableType;

    /**
     * @return (string) - Type of securables that the policy should take effect on.
     * Only `table` is supported at this moment.
     * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    public String forSecurableType() {
        return this.forSecurableType;
    }

    /**
     * (list of MatchColumn) - Optional list of condition expressions used to match table columns.
     * Only valid when `for_securable_type` is `table`.
     * When specified, the policy only applies to tables whose columns satisfy all match conditions
     * 
     */
    @Import(name="matchColumns")
    private @Nullable List<GetPolicyInfoMatchColumn> matchColumns;

    /**
     * @return (list of MatchColumn) - Optional list of condition expressions used to match table columns.
     * Only valid when `for_securable_type` is `table`.
     * When specified, the policy only applies to tables whose columns satisfy all match conditions
     * 
     */
    public Optional<List<GetPolicyInfoMatchColumn>> matchColumns() {
        return Optional.ofNullable(this.matchColumns);
    }

    /**
     * Name of the policy. Required on create and ignored on update.
     * To update the name, use the `new_name` field
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the policy. Required on create and ignored on update.
     * To update the name, use the `new_name` field
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Full name of the securable on which the policy is defined.
     * Required on create and ignored on update
     * 
     */
    @Import(name="onSecurableFullname")
    private @Nullable String onSecurableFullname;

    /**
     * @return Full name of the securable on which the policy is defined.
     * Required on create and ignored on update
     * 
     */
    public Optional<String> onSecurableFullname() {
        return Optional.ofNullable(this.onSecurableFullname);
    }

    /**
     * Type of the securable on which the policy is defined.
     * Only `catalog`, `schema` and `table` are supported at this moment.
     * Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    @Import(name="onSecurableType")
    private @Nullable String onSecurableType;

    /**
     * @return Type of the securable on which the policy is defined.
     * Only `catalog`, `schema` and `table` are supported at this moment.
     * Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    public Optional<String> onSecurableType() {
        return Optional.ofNullable(this.onSecurableType);
    }

    /**
     * (string) - Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
     * 
     */
    @Import(name="policyType", required=true)
    private String policyType;

    /**
     * @return (string) - Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
     * 
     */
    public String policyType() {
        return this.policyType;
    }

    /**
     * (RowFilterOptions) - Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    @Import(name="rowFilter")
    private @Nullable GetPolicyInfoRowFilter rowFilter;

    /**
     * @return (RowFilterOptions) - Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    public Optional<GetPolicyInfoRowFilter> rowFilter() {
        return Optional.ofNullable(this.rowFilter);
    }

    /**
     * (list of string) - List of user or group names that the policy applies to.
     * Required on create and optional on update
     * 
     */
    @Import(name="toPrincipals", required=true)
    private List<String> toPrincipals;

    /**
     * @return (list of string) - List of user or group names that the policy applies to.
     * Required on create and optional on update
     * 
     */
    public List<String> toPrincipals() {
        return this.toPrincipals;
    }

    /**
     * (string) - Optional condition when the policy should take effect
     * 
     */
    @Import(name="whenCondition")
    private @Nullable String whenCondition;

    /**
     * @return (string) - Optional condition when the policy should take effect
     * 
     */
    public Optional<String> whenCondition() {
        return Optional.ofNullable(this.whenCondition);
    }

    private GetPolicyInfoPlainArgs() {}

    private GetPolicyInfoPlainArgs(GetPolicyInfoPlainArgs $) {
        this.columnMask = $.columnMask;
        this.comment = $.comment;
        this.exceptPrincipals = $.exceptPrincipals;
        this.forSecurableType = $.forSecurableType;
        this.matchColumns = $.matchColumns;
        this.name = $.name;
        this.onSecurableFullname = $.onSecurableFullname;
        this.onSecurableType = $.onSecurableType;
        this.policyType = $.policyType;
        this.rowFilter = $.rowFilter;
        this.toPrincipals = $.toPrincipals;
        this.whenCondition = $.whenCondition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPolicyInfoPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPolicyInfoPlainArgs $;

        public Builder() {
            $ = new GetPolicyInfoPlainArgs();
        }

        public Builder(GetPolicyInfoPlainArgs defaults) {
            $ = new GetPolicyInfoPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnMask (ColumnMaskOptions) - Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
         * Required on create and optional on update. When specified on update,
         * the new options will replace the existing options as a whole
         * 
         * @return builder
         * 
         */
        public Builder columnMask(@Nullable GetPolicyInfoColumnMask columnMask) {
            $.columnMask = columnMask;
            return this;
        }

        /**
         * @param comment (string) - Optional description of the policy
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable String comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param exceptPrincipals (list of string) - Optional list of user or group names that should be excluded from the policy
         * 
         * @return builder
         * 
         */
        public Builder exceptPrincipals(@Nullable List<String> exceptPrincipals) {
            $.exceptPrincipals = exceptPrincipals;
            return this;
        }

        /**
         * @param exceptPrincipals (list of string) - Optional list of user or group names that should be excluded from the policy
         * 
         * @return builder
         * 
         */
        public Builder exceptPrincipals(String... exceptPrincipals) {
            return exceptPrincipals(List.of(exceptPrincipals));
        }

        /**
         * @param forSecurableType (string) - Type of securables that the policy should take effect on.
         * Only `table` is supported at this moment.
         * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
         * 
         * @return builder
         * 
         */
        public Builder forSecurableType(String forSecurableType) {
            $.forSecurableType = forSecurableType;
            return this;
        }

        /**
         * @param matchColumns (list of MatchColumn) - Optional list of condition expressions used to match table columns.
         * Only valid when `for_securable_type` is `table`.
         * When specified, the policy only applies to tables whose columns satisfy all match conditions
         * 
         * @return builder
         * 
         */
        public Builder matchColumns(@Nullable List<GetPolicyInfoMatchColumn> matchColumns) {
            $.matchColumns = matchColumns;
            return this;
        }

        /**
         * @param matchColumns (list of MatchColumn) - Optional list of condition expressions used to match table columns.
         * Only valid when `for_securable_type` is `table`.
         * When specified, the policy only applies to tables whose columns satisfy all match conditions
         * 
         * @return builder
         * 
         */
        public Builder matchColumns(GetPolicyInfoMatchColumn... matchColumns) {
            return matchColumns(List.of(matchColumns));
        }

        /**
         * @param name Name of the policy. Required on create and ignored on update.
         * To update the name, use the `new_name` field
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param onSecurableFullname Full name of the securable on which the policy is defined.
         * Required on create and ignored on update
         * 
         * @return builder
         * 
         */
        public Builder onSecurableFullname(@Nullable String onSecurableFullname) {
            $.onSecurableFullname = onSecurableFullname;
            return this;
        }

        /**
         * @param onSecurableType Type of the securable on which the policy is defined.
         * Only `catalog`, `schema` and `table` are supported at this moment.
         * Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
         * 
         * @return builder
         * 
         */
        public Builder onSecurableType(@Nullable String onSecurableType) {
            $.onSecurableType = onSecurableType;
            return this;
        }

        /**
         * @param policyType (string) - Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param rowFilter (RowFilterOptions) - Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
         * Required on create and optional on update. When specified on update,
         * the new options will replace the existing options as a whole
         * 
         * @return builder
         * 
         */
        public Builder rowFilter(@Nullable GetPolicyInfoRowFilter rowFilter) {
            $.rowFilter = rowFilter;
            return this;
        }

        /**
         * @param toPrincipals (list of string) - List of user or group names that the policy applies to.
         * Required on create and optional on update
         * 
         * @return builder
         * 
         */
        public Builder toPrincipals(List<String> toPrincipals) {
            $.toPrincipals = toPrincipals;
            return this;
        }

        /**
         * @param toPrincipals (list of string) - List of user or group names that the policy applies to.
         * Required on create and optional on update
         * 
         * @return builder
         * 
         */
        public Builder toPrincipals(String... toPrincipals) {
            return toPrincipals(List.of(toPrincipals));
        }

        /**
         * @param whenCondition (string) - Optional condition when the policy should take effect
         * 
         * @return builder
         * 
         */
        public Builder whenCondition(@Nullable String whenCondition) {
            $.whenCondition = whenCondition;
            return this;
        }

        public GetPolicyInfoPlainArgs build() {
            if ($.forSecurableType == null) {
                throw new MissingRequiredPropertyException("GetPolicyInfoPlainArgs", "forSecurableType");
            }
            if ($.policyType == null) {
                throw new MissingRequiredPropertyException("GetPolicyInfoPlainArgs", "policyType");
            }
            if ($.toPrincipals == null) {
                throw new MissingRequiredPropertyException("GetPolicyInfoPlainArgs", "toPrincipals");
            }
            return $;
        }
    }

}
