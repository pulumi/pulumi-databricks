// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class StorageCredentialCloudflareApiTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final StorageCredentialCloudflareApiTokenArgs Empty = new StorageCredentialCloudflareApiTokenArgs();

    /**
     * R2 API token access key ID
     * 
     */
    @Import(name="accessKeyId", required=true)
    private Output<String> accessKeyId;

    /**
     * @return R2 API token access key ID
     * 
     */
    public Output<String> accessKeyId() {
        return this.accessKeyId;
    }

    /**
     * R2 account ID
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return R2 account ID
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * R2 API token secret access key
     * 
     * `azure_service_principal` optional configuration block to use service principal as credential details for Azure (Legacy):
     * 
     */
    @Import(name="secretAccessKey", required=true)
    private Output<String> secretAccessKey;

    /**
     * @return R2 API token secret access key
     * 
     * `azure_service_principal` optional configuration block to use service principal as credential details for Azure (Legacy):
     * 
     */
    public Output<String> secretAccessKey() {
        return this.secretAccessKey;
    }

    private StorageCredentialCloudflareApiTokenArgs() {}

    private StorageCredentialCloudflareApiTokenArgs(StorageCredentialCloudflareApiTokenArgs $) {
        this.accessKeyId = $.accessKeyId;
        this.accountId = $.accountId;
        this.secretAccessKey = $.secretAccessKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageCredentialCloudflareApiTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageCredentialCloudflareApiTokenArgs $;

        public Builder() {
            $ = new StorageCredentialCloudflareApiTokenArgs();
        }

        public Builder(StorageCredentialCloudflareApiTokenArgs defaults) {
            $ = new StorageCredentialCloudflareApiTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId R2 API token access key ID
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId R2 API token access key ID
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param accountId R2 account ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId R2 account ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param secretAccessKey R2 API token secret access key
         * 
         * `azure_service_principal` optional configuration block to use service principal as credential details for Azure (Legacy):
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(Output<String> secretAccessKey) {
            $.secretAccessKey = secretAccessKey;
            return this;
        }

        /**
         * @param secretAccessKey R2 API token secret access key
         * 
         * `azure_service_principal` optional configuration block to use service principal as credential details for Azure (Legacy):
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(String secretAccessKey) {
            return secretAccessKey(Output.of(secretAccessKey));
        }

        public StorageCredentialCloudflareApiTokenArgs build() {
            if ($.accessKeyId == null) {
                throw new MissingRequiredPropertyException("StorageCredentialCloudflareApiTokenArgs", "accessKeyId");
            }
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("StorageCredentialCloudflareApiTokenArgs", "accountId");
            }
            if ($.secretAccessKey == null) {
                throw new MissingRequiredPropertyException("StorageCredentialCloudflareApiTokenArgs", "secretAccessKey");
            }
            return $;
        }
    }

}
