// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.DatabaseSyncedDatabaseTableArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.DatabaseSyncedDatabaseTableState;
import com.pulumi.databricks.outputs.DatabaseSyncedDatabaseTableDataSynchronizationStatus;
import com.pulumi.databricks.outputs.DatabaseSyncedDatabaseTableSpec;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Lakebase Synced Database Tables are Postgres tables automatically synced from a source table inside Unity Catalog.
 * They can be used to serve realtime queries without the operational overhead of managing ETL pipelines.
 * 
 * Synced Database Tables can be configured inside either Database Catalogs or Standard Catalogs. Multiple
 * Synced Database Tables can be bin packed inside a single pipeline to optimize costs.
 * 
 * ## Example Usage
 * 
 * ### Creating a Synced Database Table inside a Database Catalog
 * 
 * This example creates a Synced Database Table inside a Database Catalog.
 * 
 * ### Creating a Synced Database Table inside a Standard Catalog
 * 
 * This example creates a Synced Database Table inside a Standard Catalog.
 * 
 * ### Creating multiple Synced Database Tables and bin packing them into a single pipeline
 * 
 * This example creates two Synced Database Tables. The first one specifies a new pipeline spec,
 * which generates a new pipeline. The second one utilizes the pipeline ID of the first table.
 * 
 * ## Import
 * 
 * As of Pulumi v1.5, resources can be imported through configuration.
 * 
 * hcl
 * 
 * import {
 * 
 *   id = &#34;name&#34;
 * 
 *   to = databricks_database_synced_database_table.this
 * 
 * }
 * 
 * If you are using an older version of Pulumi, import the resource using the `pulumi import` command as follows:
 * 
 * ```sh
 * $ pulumi import databricks:index/databaseSyncedDatabaseTable:DatabaseSyncedDatabaseTable databricks_database_synced_database_table &#34;name&#34;
 * ```
 * 
 */
@ResourceType(type="databricks:index/databaseSyncedDatabaseTable:DatabaseSyncedDatabaseTable")
public class DatabaseSyncedDatabaseTable extends com.pulumi.resources.CustomResource {
    /**
     * (SyncedTableStatus) - Synced Table data synchronization status
     * 
     */
    @Export(name="dataSynchronizationStatus", refs={DatabaseSyncedDatabaseTableDataSynchronizationStatus.class}, tree="[0]")
    private Output<DatabaseSyncedDatabaseTableDataSynchronizationStatus> dataSynchronizationStatus;

    /**
     * @return (SyncedTableStatus) - Synced Table data synchronization status
     * 
     */
    public Output<DatabaseSyncedDatabaseTableDataSynchronizationStatus> dataSynchronizationStatus() {
        return this.dataSynchronizationStatus;
    }
    /**
     * Name of the target database instance. This is required when creating synced database tables in standard catalogs.
     * This is optional when creating synced database tables in registered catalogs. If this field is specified
     * when creating synced database tables in registered catalogs, the database instance name MUST
     * match that of the registered catalog (or the request will be rejected)
     * 
     */
    @Export(name="databaseInstanceName", refs={String.class}, tree="[0]")
    private Output<String> databaseInstanceName;

    /**
     * @return Name of the target database instance. This is required when creating synced database tables in standard catalogs.
     * This is optional when creating synced database tables in registered catalogs. If this field is specified
     * when creating synced database tables in registered catalogs, the database instance name MUST
     * match that of the registered catalog (or the request will be rejected)
     * 
     */
    public Output<String> databaseInstanceName() {
        return this.databaseInstanceName;
    }
    /**
     * (string) - The name of the database instance that this table is registered to. This field is always returned, and for
     * tables inside database catalogs is inferred database instance associated with the catalog
     * 
     */
    @Export(name="effectiveDatabaseInstanceName", refs={String.class}, tree="[0]")
    private Output<String> effectiveDatabaseInstanceName;

    /**
     * @return (string) - The name of the database instance that this table is registered to. This field is always returned, and for
     * tables inside database catalogs is inferred database instance associated with the catalog
     * 
     */
    public Output<String> effectiveDatabaseInstanceName() {
        return this.effectiveDatabaseInstanceName;
    }
    /**
     * (string) - The name of the logical database that this table is registered to
     * 
     */
    @Export(name="effectiveLogicalDatabaseName", refs={String.class}, tree="[0]")
    private Output<String> effectiveLogicalDatabaseName;

    /**
     * @return (string) - The name of the logical database that this table is registered to
     * 
     */
    public Output<String> effectiveLogicalDatabaseName() {
        return this.effectiveLogicalDatabaseName;
    }
    /**
     * Target Postgres database object (logical database) name for this table.
     * 
     * When creating a synced table in a registered Postgres catalog, the
     * target Postgres database name is inferred to be that of the registered catalog.
     * If this field is specified in this scenario, the Postgres database name MUST
     * match that of the registered catalog (or the request will be rejected).
     * 
     * When creating a synced table in a standard catalog, this field is required.
     * In this scenario, specifying this field will allow targeting an arbitrary postgres database.
     * Note that this has implications for the `createDatabaseObjectsIsMissing` field in `spec`
     * 
     */
    @Export(name="logicalDatabaseName", refs={String.class}, tree="[0]")
    private Output<String> logicalDatabaseName;

    /**
     * @return Target Postgres database object (logical database) name for this table.
     * 
     * When creating a synced table in a registered Postgres catalog, the
     * target Postgres database name is inferred to be that of the registered catalog.
     * If this field is specified in this scenario, the Postgres database name MUST
     * match that of the registered catalog (or the request will be rejected).
     * 
     * When creating a synced table in a standard catalog, this field is required.
     * In this scenario, specifying this field will allow targeting an arbitrary postgres database.
     * Note that this has implications for the `createDatabaseObjectsIsMissing` field in `spec`
     * 
     */
    public Output<String> logicalDatabaseName() {
        return this.logicalDatabaseName;
    }
    /**
     * Full three-part (catalog, schema, table) name of the table
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Full three-part (catalog, schema, table) name of the table
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="spec", refs={DatabaseSyncedDatabaseTableSpec.class}, tree="[0]")
    private Output</* @Nullable */ DatabaseSyncedDatabaseTableSpec> spec;

    public Output<Optional<DatabaseSyncedDatabaseTableSpec>> spec() {
        return Codegen.optional(this.spec);
    }
    /**
     * (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
     * state of the data synchronization pipeline (i.e. the table may be in &#34;ACTIVE&#34; but the pipeline
     * may be in &#34;PROVISIONING&#34; as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
     * 
     */
    @Export(name="unityCatalogProvisioningState", refs={String.class}, tree="[0]")
    private Output<String> unityCatalogProvisioningState;

    /**
     * @return (string) - The provisioning state of the synced table entity in Unity Catalog. This is distinct from the
     * state of the data synchronization pipeline (i.e. the table may be in &#34;ACTIVE&#34; but the pipeline
     * may be in &#34;PROVISIONING&#34; as it runs asynchronously). Possible values are: `ACTIVE`, `DEGRADED`, `DELETING`, `FAILED`, `PROVISIONING`, `UPDATING`
     * 
     */
    public Output<String> unityCatalogProvisioningState() {
        return this.unityCatalogProvisioningState;
    }
    /**
     * Workspace ID of the resource
     * 
     */
    @Export(name="workspaceId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Output<Optional<String>> workspaceId() {
        return Codegen.optional(this.workspaceId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DatabaseSyncedDatabaseTable(java.lang.String name) {
        this(name, DatabaseSyncedDatabaseTableArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DatabaseSyncedDatabaseTable(java.lang.String name, @Nullable DatabaseSyncedDatabaseTableArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DatabaseSyncedDatabaseTable(java.lang.String name, @Nullable DatabaseSyncedDatabaseTableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/databaseSyncedDatabaseTable:DatabaseSyncedDatabaseTable", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DatabaseSyncedDatabaseTable(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseSyncedDatabaseTableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/databaseSyncedDatabaseTable:DatabaseSyncedDatabaseTable", name, state, makeResourceOptions(options, id), false);
    }

    private static DatabaseSyncedDatabaseTableArgs makeArgs(@Nullable DatabaseSyncedDatabaseTableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DatabaseSyncedDatabaseTableArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DatabaseSyncedDatabaseTable get(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseSyncedDatabaseTableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DatabaseSyncedDatabaseTable(name, id, state, options);
    }
}
