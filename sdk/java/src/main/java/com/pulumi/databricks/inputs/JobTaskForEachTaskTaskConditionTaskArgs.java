// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobTaskForEachTaskTaskConditionTaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobTaskForEachTaskTaskConditionTaskArgs Empty = new JobTaskForEachTaskTaskConditionTaskArgs();

    /**
     * The left operand of the condition task. It could be a string value, job state, or a parameter reference.
     * 
     */
    @Import(name="left")
    private @Nullable Output<String> left;

    /**
     * @return The left operand of the condition task. It could be a string value, job state, or a parameter reference.
     * 
     */
    public Optional<Output<String>> left() {
        return Optional.ofNullable(this.left);
    }

    /**
     * The string specifying the operation used to compare operands.  Currently, following operators are supported: `EQUAL_TO`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `NOT_EQUAL`. (Check the [API docs](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
     * 
     * This task does not require a cluster to execute and does not support retries or notifications.
     * 
     */
    @Import(name="op")
    private @Nullable Output<String> op;

    /**
     * @return The string specifying the operation used to compare operands.  Currently, following operators are supported: `EQUAL_TO`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `NOT_EQUAL`. (Check the [API docs](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
     * 
     * This task does not require a cluster to execute and does not support retries or notifications.
     * 
     */
    public Optional<Output<String>> op() {
        return Optional.ofNullable(this.op);
    }

    /**
     * The right operand of the condition task. It could be a string value, job state, or parameter reference.
     * 
     */
    @Import(name="right")
    private @Nullable Output<String> right;

    /**
     * @return The right operand of the condition task. It could be a string value, job state, or parameter reference.
     * 
     */
    public Optional<Output<String>> right() {
        return Optional.ofNullable(this.right);
    }

    private JobTaskForEachTaskTaskConditionTaskArgs() {}

    private JobTaskForEachTaskTaskConditionTaskArgs(JobTaskForEachTaskTaskConditionTaskArgs $) {
        this.left = $.left;
        this.op = $.op;
        this.right = $.right;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobTaskForEachTaskTaskConditionTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobTaskForEachTaskTaskConditionTaskArgs $;

        public Builder() {
            $ = new JobTaskForEachTaskTaskConditionTaskArgs();
        }

        public Builder(JobTaskForEachTaskTaskConditionTaskArgs defaults) {
            $ = new JobTaskForEachTaskTaskConditionTaskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param left The left operand of the condition task. It could be a string value, job state, or a parameter reference.
         * 
         * @return builder
         * 
         */
        public Builder left(@Nullable Output<String> left) {
            $.left = left;
            return this;
        }

        /**
         * @param left The left operand of the condition task. It could be a string value, job state, or a parameter reference.
         * 
         * @return builder
         * 
         */
        public Builder left(String left) {
            return left(Output.of(left));
        }

        /**
         * @param op The string specifying the operation used to compare operands.  Currently, following operators are supported: `EQUAL_TO`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `NOT_EQUAL`. (Check the [API docs](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
         * 
         * This task does not require a cluster to execute and does not support retries or notifications.
         * 
         * @return builder
         * 
         */
        public Builder op(@Nullable Output<String> op) {
            $.op = op;
            return this;
        }

        /**
         * @param op The string specifying the operation used to compare operands.  Currently, following operators are supported: `EQUAL_TO`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `NOT_EQUAL`. (Check the [API docs](https://docs.databricks.com/api/workspace/jobs/create) for the latest information).
         * 
         * This task does not require a cluster to execute and does not support retries or notifications.
         * 
         * @return builder
         * 
         */
        public Builder op(String op) {
            return op(Output.of(op));
        }

        /**
         * @param right The right operand of the condition task. It could be a string value, job state, or parameter reference.
         * 
         * @return builder
         * 
         */
        public Builder right(@Nullable Output<String> right) {
            $.right = right;
            return this;
        }

        /**
         * @param right The right operand of the condition task. It could be a string value, job state, or parameter reference.
         * 
         * @return builder
         * 
         */
        public Builder right(String right) {
            return right(Output.of(right));
        }

        public JobTaskForEachTaskTaskConditionTaskArgs build() {
            return $;
        }
    }

}
