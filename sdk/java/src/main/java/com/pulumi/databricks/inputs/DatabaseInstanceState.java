// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceState Empty = new DatabaseInstanceState();

    /**
     * Password for admin user to create. If not provided, no user will be created
     * 
     */
    @Import(name="adminPassword")
    private @Nullable Output<String> adminPassword;

    /**
     * @return Password for admin user to create. If not provided, no user will be created
     * 
     */
    public Optional<Output<String>> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }

    /**
     * Name of the admin role for the instance. If not provided, defaults to &#39;databricks_admin&#39;
     * 
     */
    @Import(name="adminRolename")
    private @Nullable Output<String> adminRolename;

    /**
     * @return Name of the admin role for the instance. If not provided, defaults to &#39;databricks_admin&#39;
     * 
     */
    public Optional<Output<String>> adminRolename() {
        return Optional.ofNullable(this.adminRolename);
    }

    /**
     * The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<String> capacity;

    /**
     * @return The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;
     * 
     */
    public Optional<Output<String>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * (string) - The timestamp when the instance was created
     * 
     */
    @Import(name="creationTime")
    private @Nullable Output<String> creationTime;

    /**
     * @return (string) - The timestamp when the instance was created
     * 
     */
    public Optional<Output<String>> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }

    /**
     * (string) - The email of the creator of the instance
     * 
     */
    @Import(name="creator")
    private @Nullable Output<String> creator;

    /**
     * @return (string) - The email of the creator of the instance
     * 
     */
    public Optional<Output<String>> creator() {
        return Optional.ofNullable(this.creator);
    }

    /**
     * The name of the instance. This is the unique identifier for the instance
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the instance. This is the unique identifier for the instance
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (string) - The version of Postgres running on the instance
     * 
     */
    @Import(name="pgVersion")
    private @Nullable Output<String> pgVersion;

    /**
     * @return (string) - The version of Postgres running on the instance
     * 
     */
    public Optional<Output<String>> pgVersion() {
        return Optional.ofNullable(this.pgVersion);
    }

    /**
     * (string) - The DNS endpoint to connect to the instance for read+write access
     * 
     */
    @Import(name="readWriteDns")
    private @Nullable Output<String> readWriteDns;

    /**
     * @return (string) - The DNS endpoint to connect to the instance for read+write access
     * 
     */
    public Optional<Output<String>> readWriteDns() {
        return Optional.ofNullable(this.readWriteDns);
    }

    /**
     * (string) - The current state of the instance. Possible values are: AVAILABLE, DELETING, FAILING_OVER, STARTING, STOPPED, UPDATING
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (string) - The current state of the instance. Possible values are: AVAILABLE, DELETING, FAILING_OVER, STARTING, STOPPED, UPDATING
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Whether the instance is stopped
     * 
     */
    @Import(name="stopped")
    private @Nullable Output<Boolean> stopped;

    /**
     * @return Whether the instance is stopped
     * 
     */
    public Optional<Output<Boolean>> stopped() {
        return Optional.ofNullable(this.stopped);
    }

    /**
     * (string) - An immutable UUID identifier for the instance
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return (string) - An immutable UUID identifier for the instance
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private DatabaseInstanceState() {}

    private DatabaseInstanceState(DatabaseInstanceState $) {
        this.adminPassword = $.adminPassword;
        this.adminRolename = $.adminRolename;
        this.capacity = $.capacity;
        this.creationTime = $.creationTime;
        this.creator = $.creator;
        this.name = $.name;
        this.pgVersion = $.pgVersion;
        this.readWriteDns = $.readWriteDns;
        this.state = $.state;
        this.stopped = $.stopped;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseInstanceState $;

        public Builder() {
            $ = new DatabaseInstanceState();
        }

        public Builder(DatabaseInstanceState defaults) {
            $ = new DatabaseInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminPassword Password for admin user to create. If not provided, no user will be created
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        /**
         * @param adminPassword Password for admin user to create. If not provided, no user will be created
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param adminRolename Name of the admin role for the instance. If not provided, defaults to &#39;databricks_admin&#39;
         * 
         * @return builder
         * 
         */
        public Builder adminRolename(@Nullable Output<String> adminRolename) {
            $.adminRolename = adminRolename;
            return this;
        }

        /**
         * @param adminRolename Name of the admin role for the instance. If not provided, defaults to &#39;databricks_admin&#39;
         * 
         * @return builder
         * 
         */
        public Builder adminRolename(String adminRolename) {
            return adminRolename(Output.of(adminRolename));
        }

        /**
         * @param capacity The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<String> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;
         * 
         * @return builder
         * 
         */
        public Builder capacity(String capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param creationTime (string) - The timestamp when the instance was created
         * 
         * @return builder
         * 
         */
        public Builder creationTime(@Nullable Output<String> creationTime) {
            $.creationTime = creationTime;
            return this;
        }

        /**
         * @param creationTime (string) - The timestamp when the instance was created
         * 
         * @return builder
         * 
         */
        public Builder creationTime(String creationTime) {
            return creationTime(Output.of(creationTime));
        }

        /**
         * @param creator (string) - The email of the creator of the instance
         * 
         * @return builder
         * 
         */
        public Builder creator(@Nullable Output<String> creator) {
            $.creator = creator;
            return this;
        }

        /**
         * @param creator (string) - The email of the creator of the instance
         * 
         * @return builder
         * 
         */
        public Builder creator(String creator) {
            return creator(Output.of(creator));
        }

        /**
         * @param name The name of the instance. This is the unique identifier for the instance
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the instance. This is the unique identifier for the instance
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pgVersion (string) - The version of Postgres running on the instance
         * 
         * @return builder
         * 
         */
        public Builder pgVersion(@Nullable Output<String> pgVersion) {
            $.pgVersion = pgVersion;
            return this;
        }

        /**
         * @param pgVersion (string) - The version of Postgres running on the instance
         * 
         * @return builder
         * 
         */
        public Builder pgVersion(String pgVersion) {
            return pgVersion(Output.of(pgVersion));
        }

        /**
         * @param readWriteDns (string) - The DNS endpoint to connect to the instance for read+write access
         * 
         * @return builder
         * 
         */
        public Builder readWriteDns(@Nullable Output<String> readWriteDns) {
            $.readWriteDns = readWriteDns;
            return this;
        }

        /**
         * @param readWriteDns (string) - The DNS endpoint to connect to the instance for read+write access
         * 
         * @return builder
         * 
         */
        public Builder readWriteDns(String readWriteDns) {
            return readWriteDns(Output.of(readWriteDns));
        }

        /**
         * @param state (string) - The current state of the instance. Possible values are: AVAILABLE, DELETING, FAILING_OVER, STARTING, STOPPED, UPDATING
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (string) - The current state of the instance. Possible values are: AVAILABLE, DELETING, FAILING_OVER, STARTING, STOPPED, UPDATING
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param stopped Whether the instance is stopped
         * 
         * @return builder
         * 
         */
        public Builder stopped(@Nullable Output<Boolean> stopped) {
            $.stopped = stopped;
            return this;
        }

        /**
         * @param stopped Whether the instance is stopped
         * 
         * @return builder
         * 
         */
        public Builder stopped(Boolean stopped) {
            return stopped(Output.of(stopped));
        }

        /**
         * @param uid (string) - An immutable UUID identifier for the instance
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid (string) - An immutable UUID identifier for the instance
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public DatabaseInstanceState build() {
            return $;
        }
    }

}
