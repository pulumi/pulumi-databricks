// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.DatabaseInstanceChildInstanceRefArgs;
import com.pulumi.databricks.inputs.DatabaseInstanceParentInstanceRefArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceState Empty = new DatabaseInstanceState();

    /**
     * The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;, &#34;CU_8&#34;
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<String> capacity;

    /**
     * @return The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;, &#34;CU_8&#34;
     * 
     */
    public Optional<Output<String>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * (list of DatabaseInstanceRef) - The refs of the child instances. This is only available if the instance is
     * parent instance
     * 
     */
    @Import(name="childInstanceRefs")
    private @Nullable Output<List<DatabaseInstanceChildInstanceRefArgs>> childInstanceRefs;

    /**
     * @return (list of DatabaseInstanceRef) - The refs of the child instances. This is only available if the instance is
     * parent instance
     * 
     */
    public Optional<Output<List<DatabaseInstanceChildInstanceRefArgs>>> childInstanceRefs() {
        return Optional.ofNullable(this.childInstanceRefs);
    }

    /**
     * (string) - The timestamp when the instance was created
     * 
     */
    @Import(name="creationTime")
    private @Nullable Output<String> creationTime;

    /**
     * @return (string) - The timestamp when the instance was created
     * 
     */
    public Optional<Output<String>> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }

    /**
     * (string) - The email of the creator of the instance
     * 
     */
    @Import(name="creator")
    private @Nullable Output<String> creator;

    /**
     * @return (string) - The email of the creator of the instance
     * 
     */
    public Optional<Output<String>> creator() {
        return Optional.ofNullable(this.creator);
    }

    /**
     * (boolean) - xref AIP-129. `enable_readable_secondaries` is owned by the client, while `effective_enable_readable_secondaries` is owned by the server.
     * `enable_readable_secondaries` will only be set in Create/Update response messages if and only if the user provides the field via the request.
     * `effective_enable_readable_secondaries` on the other hand will always bet set in all response messages (Create/Update/Get/List)
     * 
     */
    @Import(name="effectiveEnableReadableSecondaries")
    private @Nullable Output<Boolean> effectiveEnableReadableSecondaries;

    /**
     * @return (boolean) - xref AIP-129. `enable_readable_secondaries` is owned by the client, while `effective_enable_readable_secondaries` is owned by the server.
     * `enable_readable_secondaries` will only be set in Create/Update response messages if and only if the user provides the field via the request.
     * `effective_enable_readable_secondaries` on the other hand will always bet set in all response messages (Create/Update/Get/List)
     * 
     */
    public Optional<Output<Boolean>> effectiveEnableReadableSecondaries() {
        return Optional.ofNullable(this.effectiveEnableReadableSecondaries);
    }

    /**
     * (integer) - xref AIP-129. `node_count` is owned by the client, while `effective_node_count` is owned by the server.
     * `node_count` will only be set in Create/Update response messages if and only if the user provides the field via the request.
     * `effective_node_count` on the other hand will always bet set in all response messages (Create/Update/Get/List)
     * 
     */
    @Import(name="effectiveNodeCount")
    private @Nullable Output<Integer> effectiveNodeCount;

    /**
     * @return (integer) - xref AIP-129. `node_count` is owned by the client, while `effective_node_count` is owned by the server.
     * `node_count` will only be set in Create/Update response messages if and only if the user provides the field via the request.
     * `effective_node_count` on the other hand will always bet set in all response messages (Create/Update/Get/List)
     * 
     */
    public Optional<Output<Integer>> effectiveNodeCount() {
        return Optional.ofNullable(this.effectiveNodeCount);
    }

    /**
     * (integer) - xref AIP-129. `retention_window_in_days` is owned by the client, while `effective_retention_window_in_days` is owned by the server.
     * `retention_window_in_days` will only be set in Create/Update response messages if and only if the user provides the field via the request.
     * `effective_retention_window_in_days` on the other hand will always bet set in all response messages (Create/Update/Get/List)
     * 
     */
    @Import(name="effectiveRetentionWindowInDays")
    private @Nullable Output<Integer> effectiveRetentionWindowInDays;

    /**
     * @return (integer) - xref AIP-129. `retention_window_in_days` is owned by the client, while `effective_retention_window_in_days` is owned by the server.
     * `retention_window_in_days` will only be set in Create/Update response messages if and only if the user provides the field via the request.
     * `effective_retention_window_in_days` on the other hand will always bet set in all response messages (Create/Update/Get/List)
     * 
     */
    public Optional<Output<Integer>> effectiveRetentionWindowInDays() {
        return Optional.ofNullable(this.effectiveRetentionWindowInDays);
    }

    /**
     * (boolean) - xref AIP-129. `stopped` is owned by the client, while `effective_stopped` is owned by the server.
     * `stopped` will only be set in Create/Update response messages if and only if the user provides the field via the request.
     * `effective_stopped` on the other hand will always bet set in all response messages (Create/Update/Get/List)
     * 
     */
    @Import(name="effectiveStopped")
    private @Nullable Output<Boolean> effectiveStopped;

    /**
     * @return (boolean) - xref AIP-129. `stopped` is owned by the client, while `effective_stopped` is owned by the server.
     * `stopped` will only be set in Create/Update response messages if and only if the user provides the field via the request.
     * `effective_stopped` on the other hand will always bet set in all response messages (Create/Update/Get/List)
     * 
     */
    public Optional<Output<Boolean>> effectiveStopped() {
        return Optional.ofNullable(this.effectiveStopped);
    }

    /**
     * Whether to enable secondaries to serve read-only traffic. Defaults to false
     * 
     */
    @Import(name="enableReadableSecondaries")
    private @Nullable Output<Boolean> enableReadableSecondaries;

    /**
     * @return Whether to enable secondaries to serve read-only traffic. Defaults to false
     * 
     */
    public Optional<Output<Boolean>> enableReadableSecondaries() {
        return Optional.ofNullable(this.enableReadableSecondaries);
    }

    /**
     * The name of the instance. This is the unique identifier for the instance
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the instance. This is the unique identifier for the instance
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
     * 1 primary and 0 secondaries
     * 
     */
    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    /**
     * @return The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
     * 1 primary and 0 secondaries
     * 
     */
    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * The ref of the parent instance. This is only available if the instance is
     * child instance.
     * Input: For specifying the parent instance to create a child instance. Optional.
     * Output: Only populated if provided as input to create a child instance
     * 
     */
    @Import(name="parentInstanceRef")
    private @Nullable Output<DatabaseInstanceParentInstanceRefArgs> parentInstanceRef;

    /**
     * @return The ref of the parent instance. This is only available if the instance is
     * child instance.
     * Input: For specifying the parent instance to create a child instance. Optional.
     * Output: Only populated if provided as input to create a child instance
     * 
     */
    public Optional<Output<DatabaseInstanceParentInstanceRefArgs>> parentInstanceRef() {
        return Optional.ofNullable(this.parentInstanceRef);
    }

    /**
     * (string) - The version of Postgres running on the instance
     * 
     */
    @Import(name="pgVersion")
    private @Nullable Output<String> pgVersion;

    /**
     * @return (string) - The version of Postgres running on the instance
     * 
     */
    public Optional<Output<String>> pgVersion() {
        return Optional.ofNullable(this.pgVersion);
    }

    /**
     * (string) - The DNS endpoint to connect to the instance for read only access. This is only available if
     * enable_readable_secondaries is true
     * 
     */
    @Import(name="readOnlyDns")
    private @Nullable Output<String> readOnlyDns;

    /**
     * @return (string) - The DNS endpoint to connect to the instance for read only access. This is only available if
     * enable_readable_secondaries is true
     * 
     */
    public Optional<Output<String>> readOnlyDns() {
        return Optional.ofNullable(this.readOnlyDns);
    }

    /**
     * (string) - The DNS endpoint to connect to the instance for read+write access
     * 
     */
    @Import(name="readWriteDns")
    private @Nullable Output<String> readWriteDns;

    /**
     * @return (string) - The DNS endpoint to connect to the instance for read+write access
     * 
     */
    public Optional<Output<String>> readWriteDns() {
        return Optional.ofNullable(this.readWriteDns);
    }

    /**
     * The retention window for the instance. This is the time window in days
     * for which the historical data is retained. The default value is 7 days.
     * Valid values are 2 to 35 days
     * 
     */
    @Import(name="retentionWindowInDays")
    private @Nullable Output<Integer> retentionWindowInDays;

    /**
     * @return The retention window for the instance. This is the time window in days
     * for which the historical data is retained. The default value is 7 days.
     * Valid values are 2 to 35 days
     * 
     */
    public Optional<Output<Integer>> retentionWindowInDays() {
        return Optional.ofNullable(this.retentionWindowInDays);
    }

    /**
     * (string) - The current state of the instance. Possible values are: `AVAILABLE`, `DELETING`, `FAILING_OVER`, `STARTING`, `STOPPED`, `UPDATING`
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (string) - The current state of the instance. Possible values are: `AVAILABLE`, `DELETING`, `FAILING_OVER`, `STARTING`, `STOPPED`, `UPDATING`
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Whether the instance is stopped
     * 
     */
    @Import(name="stopped")
    private @Nullable Output<Boolean> stopped;

    /**
     * @return Whether the instance is stopped
     * 
     */
    public Optional<Output<Boolean>> stopped() {
        return Optional.ofNullable(this.stopped);
    }

    /**
     * (string) - Id of the ref database instance
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return (string) - Id of the ref database instance
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private DatabaseInstanceState() {}

    private DatabaseInstanceState(DatabaseInstanceState $) {
        this.capacity = $.capacity;
        this.childInstanceRefs = $.childInstanceRefs;
        this.creationTime = $.creationTime;
        this.creator = $.creator;
        this.effectiveEnableReadableSecondaries = $.effectiveEnableReadableSecondaries;
        this.effectiveNodeCount = $.effectiveNodeCount;
        this.effectiveRetentionWindowInDays = $.effectiveRetentionWindowInDays;
        this.effectiveStopped = $.effectiveStopped;
        this.enableReadableSecondaries = $.enableReadableSecondaries;
        this.name = $.name;
        this.nodeCount = $.nodeCount;
        this.parentInstanceRef = $.parentInstanceRef;
        this.pgVersion = $.pgVersion;
        this.readOnlyDns = $.readOnlyDns;
        this.readWriteDns = $.readWriteDns;
        this.retentionWindowInDays = $.retentionWindowInDays;
        this.state = $.state;
        this.stopped = $.stopped;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseInstanceState $;

        public Builder() {
            $ = new DatabaseInstanceState();
        }

        public Builder(DatabaseInstanceState defaults) {
            $ = new DatabaseInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacity The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;, &#34;CU_8&#34;
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<String> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity The sku of the instance. Valid values are &#34;CU_1&#34;, &#34;CU_2&#34;, &#34;CU_4&#34;, &#34;CU_8&#34;
         * 
         * @return builder
         * 
         */
        public Builder capacity(String capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param childInstanceRefs (list of DatabaseInstanceRef) - The refs of the child instances. This is only available if the instance is
         * parent instance
         * 
         * @return builder
         * 
         */
        public Builder childInstanceRefs(@Nullable Output<List<DatabaseInstanceChildInstanceRefArgs>> childInstanceRefs) {
            $.childInstanceRefs = childInstanceRefs;
            return this;
        }

        /**
         * @param childInstanceRefs (list of DatabaseInstanceRef) - The refs of the child instances. This is only available if the instance is
         * parent instance
         * 
         * @return builder
         * 
         */
        public Builder childInstanceRefs(List<DatabaseInstanceChildInstanceRefArgs> childInstanceRefs) {
            return childInstanceRefs(Output.of(childInstanceRefs));
        }

        /**
         * @param childInstanceRefs (list of DatabaseInstanceRef) - The refs of the child instances. This is only available if the instance is
         * parent instance
         * 
         * @return builder
         * 
         */
        public Builder childInstanceRefs(DatabaseInstanceChildInstanceRefArgs... childInstanceRefs) {
            return childInstanceRefs(List.of(childInstanceRefs));
        }

        /**
         * @param creationTime (string) - The timestamp when the instance was created
         * 
         * @return builder
         * 
         */
        public Builder creationTime(@Nullable Output<String> creationTime) {
            $.creationTime = creationTime;
            return this;
        }

        /**
         * @param creationTime (string) - The timestamp when the instance was created
         * 
         * @return builder
         * 
         */
        public Builder creationTime(String creationTime) {
            return creationTime(Output.of(creationTime));
        }

        /**
         * @param creator (string) - The email of the creator of the instance
         * 
         * @return builder
         * 
         */
        public Builder creator(@Nullable Output<String> creator) {
            $.creator = creator;
            return this;
        }

        /**
         * @param creator (string) - The email of the creator of the instance
         * 
         * @return builder
         * 
         */
        public Builder creator(String creator) {
            return creator(Output.of(creator));
        }

        /**
         * @param effectiveEnableReadableSecondaries (boolean) - xref AIP-129. `enable_readable_secondaries` is owned by the client, while `effective_enable_readable_secondaries` is owned by the server.
         * `enable_readable_secondaries` will only be set in Create/Update response messages if and only if the user provides the field via the request.
         * `effective_enable_readable_secondaries` on the other hand will always bet set in all response messages (Create/Update/Get/List)
         * 
         * @return builder
         * 
         */
        public Builder effectiveEnableReadableSecondaries(@Nullable Output<Boolean> effectiveEnableReadableSecondaries) {
            $.effectiveEnableReadableSecondaries = effectiveEnableReadableSecondaries;
            return this;
        }

        /**
         * @param effectiveEnableReadableSecondaries (boolean) - xref AIP-129. `enable_readable_secondaries` is owned by the client, while `effective_enable_readable_secondaries` is owned by the server.
         * `enable_readable_secondaries` will only be set in Create/Update response messages if and only if the user provides the field via the request.
         * `effective_enable_readable_secondaries` on the other hand will always bet set in all response messages (Create/Update/Get/List)
         * 
         * @return builder
         * 
         */
        public Builder effectiveEnableReadableSecondaries(Boolean effectiveEnableReadableSecondaries) {
            return effectiveEnableReadableSecondaries(Output.of(effectiveEnableReadableSecondaries));
        }

        /**
         * @param effectiveNodeCount (integer) - xref AIP-129. `node_count` is owned by the client, while `effective_node_count` is owned by the server.
         * `node_count` will only be set in Create/Update response messages if and only if the user provides the field via the request.
         * `effective_node_count` on the other hand will always bet set in all response messages (Create/Update/Get/List)
         * 
         * @return builder
         * 
         */
        public Builder effectiveNodeCount(@Nullable Output<Integer> effectiveNodeCount) {
            $.effectiveNodeCount = effectiveNodeCount;
            return this;
        }

        /**
         * @param effectiveNodeCount (integer) - xref AIP-129. `node_count` is owned by the client, while `effective_node_count` is owned by the server.
         * `node_count` will only be set in Create/Update response messages if and only if the user provides the field via the request.
         * `effective_node_count` on the other hand will always bet set in all response messages (Create/Update/Get/List)
         * 
         * @return builder
         * 
         */
        public Builder effectiveNodeCount(Integer effectiveNodeCount) {
            return effectiveNodeCount(Output.of(effectiveNodeCount));
        }

        /**
         * @param effectiveRetentionWindowInDays (integer) - xref AIP-129. `retention_window_in_days` is owned by the client, while `effective_retention_window_in_days` is owned by the server.
         * `retention_window_in_days` will only be set in Create/Update response messages if and only if the user provides the field via the request.
         * `effective_retention_window_in_days` on the other hand will always bet set in all response messages (Create/Update/Get/List)
         * 
         * @return builder
         * 
         */
        public Builder effectiveRetentionWindowInDays(@Nullable Output<Integer> effectiveRetentionWindowInDays) {
            $.effectiveRetentionWindowInDays = effectiveRetentionWindowInDays;
            return this;
        }

        /**
         * @param effectiveRetentionWindowInDays (integer) - xref AIP-129. `retention_window_in_days` is owned by the client, while `effective_retention_window_in_days` is owned by the server.
         * `retention_window_in_days` will only be set in Create/Update response messages if and only if the user provides the field via the request.
         * `effective_retention_window_in_days` on the other hand will always bet set in all response messages (Create/Update/Get/List)
         * 
         * @return builder
         * 
         */
        public Builder effectiveRetentionWindowInDays(Integer effectiveRetentionWindowInDays) {
            return effectiveRetentionWindowInDays(Output.of(effectiveRetentionWindowInDays));
        }

        /**
         * @param effectiveStopped (boolean) - xref AIP-129. `stopped` is owned by the client, while `effective_stopped` is owned by the server.
         * `stopped` will only be set in Create/Update response messages if and only if the user provides the field via the request.
         * `effective_stopped` on the other hand will always bet set in all response messages (Create/Update/Get/List)
         * 
         * @return builder
         * 
         */
        public Builder effectiveStopped(@Nullable Output<Boolean> effectiveStopped) {
            $.effectiveStopped = effectiveStopped;
            return this;
        }

        /**
         * @param effectiveStopped (boolean) - xref AIP-129. `stopped` is owned by the client, while `effective_stopped` is owned by the server.
         * `stopped` will only be set in Create/Update response messages if and only if the user provides the field via the request.
         * `effective_stopped` on the other hand will always bet set in all response messages (Create/Update/Get/List)
         * 
         * @return builder
         * 
         */
        public Builder effectiveStopped(Boolean effectiveStopped) {
            return effectiveStopped(Output.of(effectiveStopped));
        }

        /**
         * @param enableReadableSecondaries Whether to enable secondaries to serve read-only traffic. Defaults to false
         * 
         * @return builder
         * 
         */
        public Builder enableReadableSecondaries(@Nullable Output<Boolean> enableReadableSecondaries) {
            $.enableReadableSecondaries = enableReadableSecondaries;
            return this;
        }

        /**
         * @param enableReadableSecondaries Whether to enable secondaries to serve read-only traffic. Defaults to false
         * 
         * @return builder
         * 
         */
        public Builder enableReadableSecondaries(Boolean enableReadableSecondaries) {
            return enableReadableSecondaries(Output.of(enableReadableSecondaries));
        }

        /**
         * @param name The name of the instance. This is the unique identifier for the instance
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the instance. This is the unique identifier for the instance
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeCount The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
         * 1 primary and 0 secondaries
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount The number of nodes in the instance, composed of 1 primary and 0 or more secondaries. Defaults to
         * 1 primary and 0 secondaries
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param parentInstanceRef The ref of the parent instance. This is only available if the instance is
         * child instance.
         * Input: For specifying the parent instance to create a child instance. Optional.
         * Output: Only populated if provided as input to create a child instance
         * 
         * @return builder
         * 
         */
        public Builder parentInstanceRef(@Nullable Output<DatabaseInstanceParentInstanceRefArgs> parentInstanceRef) {
            $.parentInstanceRef = parentInstanceRef;
            return this;
        }

        /**
         * @param parentInstanceRef The ref of the parent instance. This is only available if the instance is
         * child instance.
         * Input: For specifying the parent instance to create a child instance. Optional.
         * Output: Only populated if provided as input to create a child instance
         * 
         * @return builder
         * 
         */
        public Builder parentInstanceRef(DatabaseInstanceParentInstanceRefArgs parentInstanceRef) {
            return parentInstanceRef(Output.of(parentInstanceRef));
        }

        /**
         * @param pgVersion (string) - The version of Postgres running on the instance
         * 
         * @return builder
         * 
         */
        public Builder pgVersion(@Nullable Output<String> pgVersion) {
            $.pgVersion = pgVersion;
            return this;
        }

        /**
         * @param pgVersion (string) - The version of Postgres running on the instance
         * 
         * @return builder
         * 
         */
        public Builder pgVersion(String pgVersion) {
            return pgVersion(Output.of(pgVersion));
        }

        /**
         * @param readOnlyDns (string) - The DNS endpoint to connect to the instance for read only access. This is only available if
         * enable_readable_secondaries is true
         * 
         * @return builder
         * 
         */
        public Builder readOnlyDns(@Nullable Output<String> readOnlyDns) {
            $.readOnlyDns = readOnlyDns;
            return this;
        }

        /**
         * @param readOnlyDns (string) - The DNS endpoint to connect to the instance for read only access. This is only available if
         * enable_readable_secondaries is true
         * 
         * @return builder
         * 
         */
        public Builder readOnlyDns(String readOnlyDns) {
            return readOnlyDns(Output.of(readOnlyDns));
        }

        /**
         * @param readWriteDns (string) - The DNS endpoint to connect to the instance for read+write access
         * 
         * @return builder
         * 
         */
        public Builder readWriteDns(@Nullable Output<String> readWriteDns) {
            $.readWriteDns = readWriteDns;
            return this;
        }

        /**
         * @param readWriteDns (string) - The DNS endpoint to connect to the instance for read+write access
         * 
         * @return builder
         * 
         */
        public Builder readWriteDns(String readWriteDns) {
            return readWriteDns(Output.of(readWriteDns));
        }

        /**
         * @param retentionWindowInDays The retention window for the instance. This is the time window in days
         * for which the historical data is retained. The default value is 7 days.
         * Valid values are 2 to 35 days
         * 
         * @return builder
         * 
         */
        public Builder retentionWindowInDays(@Nullable Output<Integer> retentionWindowInDays) {
            $.retentionWindowInDays = retentionWindowInDays;
            return this;
        }

        /**
         * @param retentionWindowInDays The retention window for the instance. This is the time window in days
         * for which the historical data is retained. The default value is 7 days.
         * Valid values are 2 to 35 days
         * 
         * @return builder
         * 
         */
        public Builder retentionWindowInDays(Integer retentionWindowInDays) {
            return retentionWindowInDays(Output.of(retentionWindowInDays));
        }

        /**
         * @param state (string) - The current state of the instance. Possible values are: `AVAILABLE`, `DELETING`, `FAILING_OVER`, `STARTING`, `STOPPED`, `UPDATING`
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (string) - The current state of the instance. Possible values are: `AVAILABLE`, `DELETING`, `FAILING_OVER`, `STARTING`, `STOPPED`, `UPDATING`
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param stopped Whether the instance is stopped
         * 
         * @return builder
         * 
         */
        public Builder stopped(@Nullable Output<Boolean> stopped) {
            $.stopped = stopped;
            return this;
        }

        /**
         * @param stopped Whether the instance is stopped
         * 
         * @return builder
         * 
         */
        public Builder stopped(Boolean stopped) {
            return stopped(Output.of(stopped));
        }

        /**
         * @param uid (string) - Id of the ref database instance
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid (string) - Id of the ref database instance
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public DatabaseInstanceState build() {
            return $;
        }
    }

}
