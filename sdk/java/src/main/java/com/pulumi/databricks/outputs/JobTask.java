// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.JobTaskCleanRoomsNotebookTask;
import com.pulumi.databricks.outputs.JobTaskConditionTask;
import com.pulumi.databricks.outputs.JobTaskDbtTask;
import com.pulumi.databricks.outputs.JobTaskDependsOn;
import com.pulumi.databricks.outputs.JobTaskEmailNotifications;
import com.pulumi.databricks.outputs.JobTaskForEachTask;
import com.pulumi.databricks.outputs.JobTaskHealth;
import com.pulumi.databricks.outputs.JobTaskLibrary;
import com.pulumi.databricks.outputs.JobTaskNewCluster;
import com.pulumi.databricks.outputs.JobTaskNotebookTask;
import com.pulumi.databricks.outputs.JobTaskNotificationSettings;
import com.pulumi.databricks.outputs.JobTaskPipelineTask;
import com.pulumi.databricks.outputs.JobTaskPythonWheelTask;
import com.pulumi.databricks.outputs.JobTaskRunJobTask;
import com.pulumi.databricks.outputs.JobTaskSparkJarTask;
import com.pulumi.databricks.outputs.JobTaskSparkPythonTask;
import com.pulumi.databricks.outputs.JobTaskSparkSubmitTask;
import com.pulumi.databricks.outputs.JobTaskSqlTask;
import com.pulumi.databricks.outputs.JobTaskWebhookNotifications;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class JobTask {
    private @Nullable JobTaskCleanRoomsNotebookTask cleanRoomsNotebookTask;
    private @Nullable JobTaskConditionTask conditionTask;
    private @Nullable JobTaskDbtTask dbtTask;
    private @Nullable List<JobTaskDependsOn> dependsOns;
    private @Nullable String description;
    private @Nullable Boolean disableAutoOptimization;
    private @Nullable JobTaskEmailNotifications emailNotifications;
    private @Nullable String environmentKey;
    private @Nullable String existingClusterId;
    private @Nullable JobTaskForEachTask forEachTask;
    private @Nullable JobTaskHealth health;
    private @Nullable String jobClusterKey;
    private @Nullable List<JobTaskLibrary> libraries;
    private @Nullable Integer maxRetries;
    private @Nullable Integer minRetryIntervalMillis;
    private @Nullable JobTaskNewCluster newCluster;
    private @Nullable JobTaskNotebookTask notebookTask;
    private @Nullable JobTaskNotificationSettings notificationSettings;
    private @Nullable JobTaskPipelineTask pipelineTask;
    private @Nullable JobTaskPythonWheelTask pythonWheelTask;
    private @Nullable Boolean retryOnTimeout;
    private @Nullable String runIf;
    private @Nullable JobTaskRunJobTask runJobTask;
    private @Nullable JobTaskSparkJarTask sparkJarTask;
    private @Nullable JobTaskSparkPythonTask sparkPythonTask;
    private @Nullable JobTaskSparkSubmitTask sparkSubmitTask;
    private @Nullable JobTaskSqlTask sqlTask;
    private String taskKey;
    private @Nullable Integer timeoutSeconds;
    private @Nullable JobTaskWebhookNotifications webhookNotifications;

    private JobTask() {}
    public Optional<JobTaskCleanRoomsNotebookTask> cleanRoomsNotebookTask() {
        return Optional.ofNullable(this.cleanRoomsNotebookTask);
    }
    public Optional<JobTaskConditionTask> conditionTask() {
        return Optional.ofNullable(this.conditionTask);
    }
    public Optional<JobTaskDbtTask> dbtTask() {
        return Optional.ofNullable(this.dbtTask);
    }
    public List<JobTaskDependsOn> dependsOns() {
        return this.dependsOns == null ? List.of() : this.dependsOns;
    }
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<Boolean> disableAutoOptimization() {
        return Optional.ofNullable(this.disableAutoOptimization);
    }
    public Optional<JobTaskEmailNotifications> emailNotifications() {
        return Optional.ofNullable(this.emailNotifications);
    }
    public Optional<String> environmentKey() {
        return Optional.ofNullable(this.environmentKey);
    }
    public Optional<String> existingClusterId() {
        return Optional.ofNullable(this.existingClusterId);
    }
    public Optional<JobTaskForEachTask> forEachTask() {
        return Optional.ofNullable(this.forEachTask);
    }
    public Optional<JobTaskHealth> health() {
        return Optional.ofNullable(this.health);
    }
    public Optional<String> jobClusterKey() {
        return Optional.ofNullable(this.jobClusterKey);
    }
    public List<JobTaskLibrary> libraries() {
        return this.libraries == null ? List.of() : this.libraries;
    }
    public Optional<Integer> maxRetries() {
        return Optional.ofNullable(this.maxRetries);
    }
    public Optional<Integer> minRetryIntervalMillis() {
        return Optional.ofNullable(this.minRetryIntervalMillis);
    }
    public Optional<JobTaskNewCluster> newCluster() {
        return Optional.ofNullable(this.newCluster);
    }
    public Optional<JobTaskNotebookTask> notebookTask() {
        return Optional.ofNullable(this.notebookTask);
    }
    public Optional<JobTaskNotificationSettings> notificationSettings() {
        return Optional.ofNullable(this.notificationSettings);
    }
    public Optional<JobTaskPipelineTask> pipelineTask() {
        return Optional.ofNullable(this.pipelineTask);
    }
    public Optional<JobTaskPythonWheelTask> pythonWheelTask() {
        return Optional.ofNullable(this.pythonWheelTask);
    }
    public Optional<Boolean> retryOnTimeout() {
        return Optional.ofNullable(this.retryOnTimeout);
    }
    public Optional<String> runIf() {
        return Optional.ofNullable(this.runIf);
    }
    public Optional<JobTaskRunJobTask> runJobTask() {
        return Optional.ofNullable(this.runJobTask);
    }
    public Optional<JobTaskSparkJarTask> sparkJarTask() {
        return Optional.ofNullable(this.sparkJarTask);
    }
    public Optional<JobTaskSparkPythonTask> sparkPythonTask() {
        return Optional.ofNullable(this.sparkPythonTask);
    }
    public Optional<JobTaskSparkSubmitTask> sparkSubmitTask() {
        return Optional.ofNullable(this.sparkSubmitTask);
    }
    public Optional<JobTaskSqlTask> sqlTask() {
        return Optional.ofNullable(this.sqlTask);
    }
    public String taskKey() {
        return this.taskKey;
    }
    public Optional<Integer> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }
    public Optional<JobTaskWebhookNotifications> webhookNotifications() {
        return Optional.ofNullable(this.webhookNotifications);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobTask defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable JobTaskCleanRoomsNotebookTask cleanRoomsNotebookTask;
        private @Nullable JobTaskConditionTask conditionTask;
        private @Nullable JobTaskDbtTask dbtTask;
        private @Nullable List<JobTaskDependsOn> dependsOns;
        private @Nullable String description;
        private @Nullable Boolean disableAutoOptimization;
        private @Nullable JobTaskEmailNotifications emailNotifications;
        private @Nullable String environmentKey;
        private @Nullable String existingClusterId;
        private @Nullable JobTaskForEachTask forEachTask;
        private @Nullable JobTaskHealth health;
        private @Nullable String jobClusterKey;
        private @Nullable List<JobTaskLibrary> libraries;
        private @Nullable Integer maxRetries;
        private @Nullable Integer minRetryIntervalMillis;
        private @Nullable JobTaskNewCluster newCluster;
        private @Nullable JobTaskNotebookTask notebookTask;
        private @Nullable JobTaskNotificationSettings notificationSettings;
        private @Nullable JobTaskPipelineTask pipelineTask;
        private @Nullable JobTaskPythonWheelTask pythonWheelTask;
        private @Nullable Boolean retryOnTimeout;
        private @Nullable String runIf;
        private @Nullable JobTaskRunJobTask runJobTask;
        private @Nullable JobTaskSparkJarTask sparkJarTask;
        private @Nullable JobTaskSparkPythonTask sparkPythonTask;
        private @Nullable JobTaskSparkSubmitTask sparkSubmitTask;
        private @Nullable JobTaskSqlTask sqlTask;
        private String taskKey;
        private @Nullable Integer timeoutSeconds;
        private @Nullable JobTaskWebhookNotifications webhookNotifications;
        public Builder() {}
        public Builder(JobTask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cleanRoomsNotebookTask = defaults.cleanRoomsNotebookTask;
    	      this.conditionTask = defaults.conditionTask;
    	      this.dbtTask = defaults.dbtTask;
    	      this.dependsOns = defaults.dependsOns;
    	      this.description = defaults.description;
    	      this.disableAutoOptimization = defaults.disableAutoOptimization;
    	      this.emailNotifications = defaults.emailNotifications;
    	      this.environmentKey = defaults.environmentKey;
    	      this.existingClusterId = defaults.existingClusterId;
    	      this.forEachTask = defaults.forEachTask;
    	      this.health = defaults.health;
    	      this.jobClusterKey = defaults.jobClusterKey;
    	      this.libraries = defaults.libraries;
    	      this.maxRetries = defaults.maxRetries;
    	      this.minRetryIntervalMillis = defaults.minRetryIntervalMillis;
    	      this.newCluster = defaults.newCluster;
    	      this.notebookTask = defaults.notebookTask;
    	      this.notificationSettings = defaults.notificationSettings;
    	      this.pipelineTask = defaults.pipelineTask;
    	      this.pythonWheelTask = defaults.pythonWheelTask;
    	      this.retryOnTimeout = defaults.retryOnTimeout;
    	      this.runIf = defaults.runIf;
    	      this.runJobTask = defaults.runJobTask;
    	      this.sparkJarTask = defaults.sparkJarTask;
    	      this.sparkPythonTask = defaults.sparkPythonTask;
    	      this.sparkSubmitTask = defaults.sparkSubmitTask;
    	      this.sqlTask = defaults.sqlTask;
    	      this.taskKey = defaults.taskKey;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
    	      this.webhookNotifications = defaults.webhookNotifications;
        }

        @CustomType.Setter
        public Builder cleanRoomsNotebookTask(@Nullable JobTaskCleanRoomsNotebookTask cleanRoomsNotebookTask) {

            this.cleanRoomsNotebookTask = cleanRoomsNotebookTask;
            return this;
        }
        @CustomType.Setter
        public Builder conditionTask(@Nullable JobTaskConditionTask conditionTask) {

            this.conditionTask = conditionTask;
            return this;
        }
        @CustomType.Setter
        public Builder dbtTask(@Nullable JobTaskDbtTask dbtTask) {

            this.dbtTask = dbtTask;
            return this;
        }
        @CustomType.Setter
        public Builder dependsOns(@Nullable List<JobTaskDependsOn> dependsOns) {

            this.dependsOns = dependsOns;
            return this;
        }
        public Builder dependsOns(JobTaskDependsOn... dependsOns) {
            return dependsOns(List.of(dependsOns));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disableAutoOptimization(@Nullable Boolean disableAutoOptimization) {

            this.disableAutoOptimization = disableAutoOptimization;
            return this;
        }
        @CustomType.Setter
        public Builder emailNotifications(@Nullable JobTaskEmailNotifications emailNotifications) {

            this.emailNotifications = emailNotifications;
            return this;
        }
        @CustomType.Setter
        public Builder environmentKey(@Nullable String environmentKey) {

            this.environmentKey = environmentKey;
            return this;
        }
        @CustomType.Setter
        public Builder existingClusterId(@Nullable String existingClusterId) {

            this.existingClusterId = existingClusterId;
            return this;
        }
        @CustomType.Setter
        public Builder forEachTask(@Nullable JobTaskForEachTask forEachTask) {

            this.forEachTask = forEachTask;
            return this;
        }
        @CustomType.Setter
        public Builder health(@Nullable JobTaskHealth health) {

            this.health = health;
            return this;
        }
        @CustomType.Setter
        public Builder jobClusterKey(@Nullable String jobClusterKey) {

            this.jobClusterKey = jobClusterKey;
            return this;
        }
        @CustomType.Setter
        public Builder libraries(@Nullable List<JobTaskLibrary> libraries) {

            this.libraries = libraries;
            return this;
        }
        public Builder libraries(JobTaskLibrary... libraries) {
            return libraries(List.of(libraries));
        }
        @CustomType.Setter
        public Builder maxRetries(@Nullable Integer maxRetries) {

            this.maxRetries = maxRetries;
            return this;
        }
        @CustomType.Setter
        public Builder minRetryIntervalMillis(@Nullable Integer minRetryIntervalMillis) {

            this.minRetryIntervalMillis = minRetryIntervalMillis;
            return this;
        }
        @CustomType.Setter
        public Builder newCluster(@Nullable JobTaskNewCluster newCluster) {

            this.newCluster = newCluster;
            return this;
        }
        @CustomType.Setter
        public Builder notebookTask(@Nullable JobTaskNotebookTask notebookTask) {

            this.notebookTask = notebookTask;
            return this;
        }
        @CustomType.Setter
        public Builder notificationSettings(@Nullable JobTaskNotificationSettings notificationSettings) {

            this.notificationSettings = notificationSettings;
            return this;
        }
        @CustomType.Setter
        public Builder pipelineTask(@Nullable JobTaskPipelineTask pipelineTask) {

            this.pipelineTask = pipelineTask;
            return this;
        }
        @CustomType.Setter
        public Builder pythonWheelTask(@Nullable JobTaskPythonWheelTask pythonWheelTask) {

            this.pythonWheelTask = pythonWheelTask;
            return this;
        }
        @CustomType.Setter
        public Builder retryOnTimeout(@Nullable Boolean retryOnTimeout) {

            this.retryOnTimeout = retryOnTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder runIf(@Nullable String runIf) {

            this.runIf = runIf;
            return this;
        }
        @CustomType.Setter
        public Builder runJobTask(@Nullable JobTaskRunJobTask runJobTask) {

            this.runJobTask = runJobTask;
            return this;
        }
        @CustomType.Setter
        public Builder sparkJarTask(@Nullable JobTaskSparkJarTask sparkJarTask) {

            this.sparkJarTask = sparkJarTask;
            return this;
        }
        @CustomType.Setter
        public Builder sparkPythonTask(@Nullable JobTaskSparkPythonTask sparkPythonTask) {

            this.sparkPythonTask = sparkPythonTask;
            return this;
        }
        @CustomType.Setter
        public Builder sparkSubmitTask(@Nullable JobTaskSparkSubmitTask sparkSubmitTask) {

            this.sparkSubmitTask = sparkSubmitTask;
            return this;
        }
        @CustomType.Setter
        public Builder sqlTask(@Nullable JobTaskSqlTask sqlTask) {

            this.sqlTask = sqlTask;
            return this;
        }
        @CustomType.Setter
        public Builder taskKey(String taskKey) {
            if (taskKey == null) {
              throw new MissingRequiredPropertyException("JobTask", "taskKey");
            }
            this.taskKey = taskKey;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutSeconds(@Nullable Integer timeoutSeconds) {

            this.timeoutSeconds = timeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder webhookNotifications(@Nullable JobTaskWebhookNotifications webhookNotifications) {

            this.webhookNotifications = webhookNotifications;
            return this;
        }
        public JobTask build() {
            final var _resultValue = new JobTask();
            _resultValue.cleanRoomsNotebookTask = cleanRoomsNotebookTask;
            _resultValue.conditionTask = conditionTask;
            _resultValue.dbtTask = dbtTask;
            _resultValue.dependsOns = dependsOns;
            _resultValue.description = description;
            _resultValue.disableAutoOptimization = disableAutoOptimization;
            _resultValue.emailNotifications = emailNotifications;
            _resultValue.environmentKey = environmentKey;
            _resultValue.existingClusterId = existingClusterId;
            _resultValue.forEachTask = forEachTask;
            _resultValue.health = health;
            _resultValue.jobClusterKey = jobClusterKey;
            _resultValue.libraries = libraries;
            _resultValue.maxRetries = maxRetries;
            _resultValue.minRetryIntervalMillis = minRetryIntervalMillis;
            _resultValue.newCluster = newCluster;
            _resultValue.notebookTask = notebookTask;
            _resultValue.notificationSettings = notificationSettings;
            _resultValue.pipelineTask = pipelineTask;
            _resultValue.pythonWheelTask = pythonWheelTask;
            _resultValue.retryOnTimeout = retryOnTimeout;
            _resultValue.runIf = runIf;
            _resultValue.runJobTask = runJobTask;
            _resultValue.sparkJarTask = sparkJarTask;
            _resultValue.sparkPythonTask = sparkPythonTask;
            _resultValue.sparkSubmitTask = sparkSubmitTask;
            _resultValue.sqlTask = sqlTask;
            _resultValue.taskKey = taskKey;
            _resultValue.timeoutSeconds = timeoutSeconds;
            _resultValue.webhookNotifications = webhookNotifications;
            return _resultValue;
        }
    }
}
