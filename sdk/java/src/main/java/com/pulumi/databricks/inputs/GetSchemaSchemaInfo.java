// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetSchemaSchemaInfoEffectivePredictiveOptimizationFlag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSchemaSchemaInfo extends com.pulumi.resources.InvokeArgs {

    public static final GetSchemaSchemaInfo Empty = new GetSchemaSchemaInfo();

    @Import(name="browseOnly")
    private @Nullable Boolean browseOnly;

    public Optional<Boolean> browseOnly() {
        return Optional.ofNullable(this.browseOnly);
    }

    @Import(name="catalogName")
    private @Nullable String catalogName;

    public Optional<String> catalogName() {
        return Optional.ofNullable(this.catalogName);
    }

    @Import(name="catalogType")
    private @Nullable String catalogType;

    public Optional<String> catalogType() {
        return Optional.ofNullable(this.catalogType);
    }

    @Import(name="comment")
    private @Nullable String comment;

    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="createdAt")
    private @Nullable Integer createdAt;

    public Optional<Integer> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="createdBy")
    private @Nullable String createdBy;

    public Optional<String> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    @Import(name="effectivePredictiveOptimizationFlag")
    private @Nullable GetSchemaSchemaInfoEffectivePredictiveOptimizationFlag effectivePredictiveOptimizationFlag;

    public Optional<GetSchemaSchemaInfoEffectivePredictiveOptimizationFlag> effectivePredictiveOptimizationFlag() {
        return Optional.ofNullable(this.effectivePredictiveOptimizationFlag);
    }

    @Import(name="enablePredictiveOptimization")
    private @Nullable String enablePredictiveOptimization;

    public Optional<String> enablePredictiveOptimization() {
        return Optional.ofNullable(this.enablePredictiveOptimization);
    }

    @Import(name="fullName")
    private @Nullable String fullName;

    public Optional<String> fullName() {
        return Optional.ofNullable(this.fullName);
    }

    @Import(name="metastoreId")
    private @Nullable String metastoreId;

    public Optional<String> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }

    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="owner")
    private @Nullable String owner;

    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="properties")
    private @Nullable Map<String,String> properties;

    public Optional<Map<String,String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    @Import(name="schemaId")
    private @Nullable String schemaId;

    public Optional<String> schemaId() {
        return Optional.ofNullable(this.schemaId);
    }

    @Import(name="storageLocation")
    private @Nullable String storageLocation;

    public Optional<String> storageLocation() {
        return Optional.ofNullable(this.storageLocation);
    }

    @Import(name="storageRoot")
    private @Nullable String storageRoot;

    public Optional<String> storageRoot() {
        return Optional.ofNullable(this.storageRoot);
    }

    @Import(name="updatedAt")
    private @Nullable Integer updatedAt;

    public Optional<Integer> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    @Import(name="updatedBy")
    private @Nullable String updatedBy;

    public Optional<String> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    private GetSchemaSchemaInfo() {}

    private GetSchemaSchemaInfo(GetSchemaSchemaInfo $) {
        this.browseOnly = $.browseOnly;
        this.catalogName = $.catalogName;
        this.catalogType = $.catalogType;
        this.comment = $.comment;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.effectivePredictiveOptimizationFlag = $.effectivePredictiveOptimizationFlag;
        this.enablePredictiveOptimization = $.enablePredictiveOptimization;
        this.fullName = $.fullName;
        this.metastoreId = $.metastoreId;
        this.name = $.name;
        this.owner = $.owner;
        this.properties = $.properties;
        this.schemaId = $.schemaId;
        this.storageLocation = $.storageLocation;
        this.storageRoot = $.storageRoot;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSchemaSchemaInfo defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSchemaSchemaInfo $;

        public Builder() {
            $ = new GetSchemaSchemaInfo();
        }

        public Builder(GetSchemaSchemaInfo defaults) {
            $ = new GetSchemaSchemaInfo(Objects.requireNonNull(defaults));
        }

        public Builder browseOnly(@Nullable Boolean browseOnly) {
            $.browseOnly = browseOnly;
            return this;
        }

        public Builder catalogName(@Nullable String catalogName) {
            $.catalogName = catalogName;
            return this;
        }

        public Builder catalogType(@Nullable String catalogType) {
            $.catalogType = catalogType;
            return this;
        }

        public Builder comment(@Nullable String comment) {
            $.comment = comment;
            return this;
        }

        public Builder createdAt(@Nullable Integer createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdBy(@Nullable String createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        public Builder effectivePredictiveOptimizationFlag(@Nullable GetSchemaSchemaInfoEffectivePredictiveOptimizationFlag effectivePredictiveOptimizationFlag) {
            $.effectivePredictiveOptimizationFlag = effectivePredictiveOptimizationFlag;
            return this;
        }

        public Builder enablePredictiveOptimization(@Nullable String enablePredictiveOptimization) {
            $.enablePredictiveOptimization = enablePredictiveOptimization;
            return this;
        }

        public Builder fullName(@Nullable String fullName) {
            $.fullName = fullName;
            return this;
        }

        public Builder metastoreId(@Nullable String metastoreId) {
            $.metastoreId = metastoreId;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder owner(@Nullable String owner) {
            $.owner = owner;
            return this;
        }

        public Builder properties(@Nullable Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        public Builder schemaId(@Nullable String schemaId) {
            $.schemaId = schemaId;
            return this;
        }

        public Builder storageLocation(@Nullable String storageLocation) {
            $.storageLocation = storageLocation;
            return this;
        }

        public Builder storageRoot(@Nullable String storageRoot) {
            $.storageRoot = storageRoot;
            return this;
        }

        public Builder updatedAt(@Nullable Integer updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedBy(@Nullable String updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        public GetSchemaSchemaInfo build() {
            return $;
        }
    }

}
