// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * identifier for use in databricks_access_control_rule_set, e.g. `users/mr.foo@example.com`.
     * 
     */
    @Import(name="aclPrincipalId")
    private @Nullable Output<String> aclPrincipalId;

    /**
     * @return identifier for use in databricks_access_control_rule_set, e.g. `users/mr.foo@example.com`.
     * 
     */
    public Optional<Output<String>> aclPrincipalId() {
        return Optional.ofNullable(this.aclPrincipalId);
    }

    /**
     * Either user is active or not. True by default, but can be set to false in case of user deactivation with preserving user assets.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return Either user is active or not. True by default, but can be set to false in case of user deactivation with preserving user assets.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Allow the user to have cluster create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and `cluster_id` argument. Everyone without `allow_cluster_create` argument set, but with permission to use Cluster Policy would be able to create clusters, but within boundaries of that specific policy.
     * 
     */
    @Import(name="allowClusterCreate")
    private @Nullable Output<Boolean> allowClusterCreate;

    /**
     * @return Allow the user to have cluster create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and `cluster_id` argument. Everyone without `allow_cluster_create` argument set, but with permission to use Cluster Policy would be able to create clusters, but within boundaries of that specific policy.
     * 
     */
    public Optional<Output<Boolean>> allowClusterCreate() {
        return Optional.ofNullable(this.allowClusterCreate);
    }

    /**
     * Allow the user to have instance pool create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and instance_pool_id argument.
     * 
     */
    @Import(name="allowInstancePoolCreate")
    private @Nullable Output<Boolean> allowInstancePoolCreate;

    /**
     * @return Allow the user to have instance pool create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and instance_pool_id argument.
     * 
     */
    public Optional<Output<Boolean>> allowInstancePoolCreate() {
        return Optional.ofNullable(this.allowInstancePoolCreate);
    }

    /**
     * This is a field to allow the group to have access to [Databricks SQL](https://databricks.com/product/databricks-sql) feature in User Interface and through databricks_sql_endpoint.
     * 
     */
    @Import(name="databricksSqlAccess")
    private @Nullable Output<Boolean> databricksSqlAccess;

    /**
     * @return This is a field to allow the group to have access to [Databricks SQL](https://databricks.com/product/databricks-sql) feature in User Interface and through databricks_sql_endpoint.
     * 
     */
    public Optional<Output<Boolean>> databricksSqlAccess() {
        return Optional.ofNullable(this.databricksSqlAccess);
    }

    /**
     * When deleting a user, set the user&#39;s active flag to false instead of actually deleting the user. This flag is exclusive to force_delete_repos and force_delete_home_dir flags. True by default for accounts SCIM API, false otherwise.
     * 
     */
    @Import(name="disableAsUserDeletion")
    private @Nullable Output<Boolean> disableAsUserDeletion;

    /**
     * @return When deleting a user, set the user&#39;s active flag to false instead of actually deleting the user. This flag is exclusive to force_delete_repos and force_delete_home_dir flags. True by default for accounts SCIM API, false otherwise.
     * 
     */
    public Optional<Output<Boolean>> disableAsUserDeletion() {
        return Optional.ofNullable(this.disableAsUserDeletion);
    }

    /**
     * This is an alias for the username that can be the full name of the user.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return This is an alias for the username that can be the full name of the user.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * ID of the user in an external identity provider.
     * 
     */
    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    /**
     * @return ID of the user in an external identity provider.
     * 
     */
    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    @Import(name="force")
    private @Nullable Output<Boolean> force;

    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * This flag determines whether the user&#39;s home directory is deleted when the user is deleted. It will have not impact when in the accounts SCIM API. False by default.
     * 
     */
    @Import(name="forceDeleteHomeDir")
    private @Nullable Output<Boolean> forceDeleteHomeDir;

    /**
     * @return This flag determines whether the user&#39;s home directory is deleted when the user is deleted. It will have not impact when in the accounts SCIM API. False by default.
     * 
     */
    public Optional<Output<Boolean>> forceDeleteHomeDir() {
        return Optional.ofNullable(this.forceDeleteHomeDir);
    }

    /**
     * This flag determines whether the user&#39;s repo directory is deleted when the user is deleted. It will have no impact when in the accounts SCIM API. False by default.
     * 
     */
    @Import(name="forceDeleteRepos")
    private @Nullable Output<Boolean> forceDeleteRepos;

    /**
     * @return This flag determines whether the user&#39;s repo directory is deleted when the user is deleted. It will have no impact when in the accounts SCIM API. False by default.
     * 
     */
    public Optional<Output<Boolean>> forceDeleteRepos() {
        return Optional.ofNullable(this.forceDeleteRepos);
    }

    /**
     * Home folder of the user, e.g. `/Users/mr.foo@example.com`.
     * 
     */
    @Import(name="home")
    private @Nullable Output<String> home;

    /**
     * @return Home folder of the user, e.g. `/Users/mr.foo@example.com`.
     * 
     */
    public Optional<Output<String>> home() {
        return Optional.ofNullable(this.home);
    }

    /**
     * Personal Repos location of the user, e.g. `/Repos/mr.foo@example.com`.
     * 
     */
    @Import(name="repos")
    private @Nullable Output<String> repos;

    /**
     * @return Personal Repos location of the user, e.g. `/Repos/mr.foo@example.com`.
     * 
     */
    public Optional<Output<String>> repos() {
        return Optional.ofNullable(this.repos);
    }

    /**
     * This is the username of the given user and will be their form of access and identity.  Provided username will be converted to lower case if it contains upper case characters.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return This is the username of the given user and will be their form of access and identity.  Provided username will be converted to lower case if it contains upper case characters.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    @Import(name="workspaceAccess")
    private @Nullable Output<Boolean> workspaceAccess;

    public Optional<Output<Boolean>> workspaceAccess() {
        return Optional.ofNullable(this.workspaceAccess);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.aclPrincipalId = $.aclPrincipalId;
        this.active = $.active;
        this.allowClusterCreate = $.allowClusterCreate;
        this.allowInstancePoolCreate = $.allowInstancePoolCreate;
        this.databricksSqlAccess = $.databricksSqlAccess;
        this.disableAsUserDeletion = $.disableAsUserDeletion;
        this.displayName = $.displayName;
        this.externalId = $.externalId;
        this.force = $.force;
        this.forceDeleteHomeDir = $.forceDeleteHomeDir;
        this.forceDeleteRepos = $.forceDeleteRepos;
        this.home = $.home;
        this.repos = $.repos;
        this.userName = $.userName;
        this.workspaceAccess = $.workspaceAccess;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aclPrincipalId identifier for use in databricks_access_control_rule_set, e.g. `users/mr.foo@example.com`.
         * 
         * @return builder
         * 
         */
        public Builder aclPrincipalId(@Nullable Output<String> aclPrincipalId) {
            $.aclPrincipalId = aclPrincipalId;
            return this;
        }

        /**
         * @param aclPrincipalId identifier for use in databricks_access_control_rule_set, e.g. `users/mr.foo@example.com`.
         * 
         * @return builder
         * 
         */
        public Builder aclPrincipalId(String aclPrincipalId) {
            return aclPrincipalId(Output.of(aclPrincipalId));
        }

        /**
         * @param active Either user is active or not. True by default, but can be set to false in case of user deactivation with preserving user assets.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Either user is active or not. True by default, but can be set to false in case of user deactivation with preserving user assets.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param allowClusterCreate Allow the user to have cluster create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and `cluster_id` argument. Everyone without `allow_cluster_create` argument set, but with permission to use Cluster Policy would be able to create clusters, but within boundaries of that specific policy.
         * 
         * @return builder
         * 
         */
        public Builder allowClusterCreate(@Nullable Output<Boolean> allowClusterCreate) {
            $.allowClusterCreate = allowClusterCreate;
            return this;
        }

        /**
         * @param allowClusterCreate Allow the user to have cluster create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and `cluster_id` argument. Everyone without `allow_cluster_create` argument set, but with permission to use Cluster Policy would be able to create clusters, but within boundaries of that specific policy.
         * 
         * @return builder
         * 
         */
        public Builder allowClusterCreate(Boolean allowClusterCreate) {
            return allowClusterCreate(Output.of(allowClusterCreate));
        }

        /**
         * @param allowInstancePoolCreate Allow the user to have instance pool create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and instance_pool_id argument.
         * 
         * @return builder
         * 
         */
        public Builder allowInstancePoolCreate(@Nullable Output<Boolean> allowInstancePoolCreate) {
            $.allowInstancePoolCreate = allowInstancePoolCreate;
            return this;
        }

        /**
         * @param allowInstancePoolCreate Allow the user to have instance pool create privileges. Defaults to false. More fine grained permissions could be assigned with databricks.Permissions and instance_pool_id argument.
         * 
         * @return builder
         * 
         */
        public Builder allowInstancePoolCreate(Boolean allowInstancePoolCreate) {
            return allowInstancePoolCreate(Output.of(allowInstancePoolCreate));
        }

        /**
         * @param databricksSqlAccess This is a field to allow the group to have access to [Databricks SQL](https://databricks.com/product/databricks-sql) feature in User Interface and through databricks_sql_endpoint.
         * 
         * @return builder
         * 
         */
        public Builder databricksSqlAccess(@Nullable Output<Boolean> databricksSqlAccess) {
            $.databricksSqlAccess = databricksSqlAccess;
            return this;
        }

        /**
         * @param databricksSqlAccess This is a field to allow the group to have access to [Databricks SQL](https://databricks.com/product/databricks-sql) feature in User Interface and through databricks_sql_endpoint.
         * 
         * @return builder
         * 
         */
        public Builder databricksSqlAccess(Boolean databricksSqlAccess) {
            return databricksSqlAccess(Output.of(databricksSqlAccess));
        }

        /**
         * @param disableAsUserDeletion When deleting a user, set the user&#39;s active flag to false instead of actually deleting the user. This flag is exclusive to force_delete_repos and force_delete_home_dir flags. True by default for accounts SCIM API, false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder disableAsUserDeletion(@Nullable Output<Boolean> disableAsUserDeletion) {
            $.disableAsUserDeletion = disableAsUserDeletion;
            return this;
        }

        /**
         * @param disableAsUserDeletion When deleting a user, set the user&#39;s active flag to false instead of actually deleting the user. This flag is exclusive to force_delete_repos and force_delete_home_dir flags. True by default for accounts SCIM API, false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder disableAsUserDeletion(Boolean disableAsUserDeletion) {
            return disableAsUserDeletion(Output.of(disableAsUserDeletion));
        }

        /**
         * @param displayName This is an alias for the username that can be the full name of the user.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName This is an alias for the username that can be the full name of the user.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param externalId ID of the user in an external identity provider.
         * 
         * @return builder
         * 
         */
        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param externalId ID of the user in an external identity provider.
         * 
         * @return builder
         * 
         */
        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        /**
         * @param forceDeleteHomeDir This flag determines whether the user&#39;s home directory is deleted when the user is deleted. It will have not impact when in the accounts SCIM API. False by default.
         * 
         * @return builder
         * 
         */
        public Builder forceDeleteHomeDir(@Nullable Output<Boolean> forceDeleteHomeDir) {
            $.forceDeleteHomeDir = forceDeleteHomeDir;
            return this;
        }

        /**
         * @param forceDeleteHomeDir This flag determines whether the user&#39;s home directory is deleted when the user is deleted. It will have not impact when in the accounts SCIM API. False by default.
         * 
         * @return builder
         * 
         */
        public Builder forceDeleteHomeDir(Boolean forceDeleteHomeDir) {
            return forceDeleteHomeDir(Output.of(forceDeleteHomeDir));
        }

        /**
         * @param forceDeleteRepos This flag determines whether the user&#39;s repo directory is deleted when the user is deleted. It will have no impact when in the accounts SCIM API. False by default.
         * 
         * @return builder
         * 
         */
        public Builder forceDeleteRepos(@Nullable Output<Boolean> forceDeleteRepos) {
            $.forceDeleteRepos = forceDeleteRepos;
            return this;
        }

        /**
         * @param forceDeleteRepos This flag determines whether the user&#39;s repo directory is deleted when the user is deleted. It will have no impact when in the accounts SCIM API. False by default.
         * 
         * @return builder
         * 
         */
        public Builder forceDeleteRepos(Boolean forceDeleteRepos) {
            return forceDeleteRepos(Output.of(forceDeleteRepos));
        }

        /**
         * @param home Home folder of the user, e.g. `/Users/mr.foo@example.com`.
         * 
         * @return builder
         * 
         */
        public Builder home(@Nullable Output<String> home) {
            $.home = home;
            return this;
        }

        /**
         * @param home Home folder of the user, e.g. `/Users/mr.foo@example.com`.
         * 
         * @return builder
         * 
         */
        public Builder home(String home) {
            return home(Output.of(home));
        }

        /**
         * @param repos Personal Repos location of the user, e.g. `/Repos/mr.foo@example.com`.
         * 
         * @return builder
         * 
         */
        public Builder repos(@Nullable Output<String> repos) {
            $.repos = repos;
            return this;
        }

        /**
         * @param repos Personal Repos location of the user, e.g. `/Repos/mr.foo@example.com`.
         * 
         * @return builder
         * 
         */
        public Builder repos(String repos) {
            return repos(Output.of(repos));
        }

        /**
         * @param userName This is the username of the given user and will be their form of access and identity.  Provided username will be converted to lower case if it contains upper case characters.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName This is the username of the given user and will be their form of access and identity.  Provided username will be converted to lower case if it contains upper case characters.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public Builder workspaceAccess(@Nullable Output<Boolean> workspaceAccess) {
            $.workspaceAccess = workspaceAccess;
            return this;
        }

        public Builder workspaceAccess(Boolean workspaceAccess) {
            return workspaceAccess(Output.of(workspaceAccess));
        }

        public UserState build() {
            return $;
        }
    }

}
