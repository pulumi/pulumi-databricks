// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.LakehouseMonitorCustomMetricArgs;
import com.pulumi.databricks.inputs.LakehouseMonitorDataClassificationConfigArgs;
import com.pulumi.databricks.inputs.LakehouseMonitorInferenceLogArgs;
import com.pulumi.databricks.inputs.LakehouseMonitorNotificationsArgs;
import com.pulumi.databricks.inputs.LakehouseMonitorScheduleArgs;
import com.pulumi.databricks.inputs.LakehouseMonitorSnapshotArgs;
import com.pulumi.databricks.inputs.LakehouseMonitorTimeSeriesArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LakehouseMonitorArgs extends com.pulumi.resources.ResourceArgs {

    public static final LakehouseMonitorArgs Empty = new LakehouseMonitorArgs();

    @Import(name="assetsDir", required=true)
    private Output<String> assetsDir;

    public Output<String> assetsDir() {
        return this.assetsDir;
    }

    @Import(name="baselineTableName")
    private @Nullable Output<String> baselineTableName;

    public Optional<Output<String>> baselineTableName() {
        return Optional.ofNullable(this.baselineTableName);
    }

    @Import(name="customMetrics")
    private @Nullable Output<List<LakehouseMonitorCustomMetricArgs>> customMetrics;

    public Optional<Output<List<LakehouseMonitorCustomMetricArgs>>> customMetrics() {
        return Optional.ofNullable(this.customMetrics);
    }

    @Import(name="dataClassificationConfig")
    private @Nullable Output<LakehouseMonitorDataClassificationConfigArgs> dataClassificationConfig;

    public Optional<Output<LakehouseMonitorDataClassificationConfigArgs>> dataClassificationConfig() {
        return Optional.ofNullable(this.dataClassificationConfig);
    }

    @Import(name="inferenceLog")
    private @Nullable Output<LakehouseMonitorInferenceLogArgs> inferenceLog;

    public Optional<Output<LakehouseMonitorInferenceLogArgs>> inferenceLog() {
        return Optional.ofNullable(this.inferenceLog);
    }

    @Import(name="latestMonitorFailureMsg")
    private @Nullable Output<String> latestMonitorFailureMsg;

    public Optional<Output<String>> latestMonitorFailureMsg() {
        return Optional.ofNullable(this.latestMonitorFailureMsg);
    }

    @Import(name="notifications")
    private @Nullable Output<LakehouseMonitorNotificationsArgs> notifications;

    public Optional<Output<LakehouseMonitorNotificationsArgs>> notifications() {
        return Optional.ofNullable(this.notifications);
    }

    @Import(name="outputSchemaName", required=true)
    private Output<String> outputSchemaName;

    public Output<String> outputSchemaName() {
        return this.outputSchemaName;
    }

    @Import(name="schedule")
    private @Nullable Output<LakehouseMonitorScheduleArgs> schedule;

    public Optional<Output<LakehouseMonitorScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    @Import(name="skipBuiltinDashboard")
    private @Nullable Output<Boolean> skipBuiltinDashboard;

    public Optional<Output<Boolean>> skipBuiltinDashboard() {
        return Optional.ofNullable(this.skipBuiltinDashboard);
    }

    @Import(name="slicingExprs")
    private @Nullable Output<List<String>> slicingExprs;

    public Optional<Output<List<String>>> slicingExprs() {
        return Optional.ofNullable(this.slicingExprs);
    }

    @Import(name="snapshot")
    private @Nullable Output<LakehouseMonitorSnapshotArgs> snapshot;

    public Optional<Output<LakehouseMonitorSnapshotArgs>> snapshot() {
        return Optional.ofNullable(this.snapshot);
    }

    @Import(name="tableName", required=true)
    private Output<String> tableName;

    public Output<String> tableName() {
        return this.tableName;
    }

    @Import(name="timeSeries")
    private @Nullable Output<LakehouseMonitorTimeSeriesArgs> timeSeries;

    public Optional<Output<LakehouseMonitorTimeSeriesArgs>> timeSeries() {
        return Optional.ofNullable(this.timeSeries);
    }

    @Import(name="warehouseId")
    private @Nullable Output<String> warehouseId;

    public Optional<Output<String>> warehouseId() {
        return Optional.ofNullable(this.warehouseId);
    }

    private LakehouseMonitorArgs() {}

    private LakehouseMonitorArgs(LakehouseMonitorArgs $) {
        this.assetsDir = $.assetsDir;
        this.baselineTableName = $.baselineTableName;
        this.customMetrics = $.customMetrics;
        this.dataClassificationConfig = $.dataClassificationConfig;
        this.inferenceLog = $.inferenceLog;
        this.latestMonitorFailureMsg = $.latestMonitorFailureMsg;
        this.notifications = $.notifications;
        this.outputSchemaName = $.outputSchemaName;
        this.schedule = $.schedule;
        this.skipBuiltinDashboard = $.skipBuiltinDashboard;
        this.slicingExprs = $.slicingExprs;
        this.snapshot = $.snapshot;
        this.tableName = $.tableName;
        this.timeSeries = $.timeSeries;
        this.warehouseId = $.warehouseId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LakehouseMonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LakehouseMonitorArgs $;

        public Builder() {
            $ = new LakehouseMonitorArgs();
        }

        public Builder(LakehouseMonitorArgs defaults) {
            $ = new LakehouseMonitorArgs(Objects.requireNonNull(defaults));
        }

        public Builder assetsDir(Output<String> assetsDir) {
            $.assetsDir = assetsDir;
            return this;
        }

        public Builder assetsDir(String assetsDir) {
            return assetsDir(Output.of(assetsDir));
        }

        public Builder baselineTableName(@Nullable Output<String> baselineTableName) {
            $.baselineTableName = baselineTableName;
            return this;
        }

        public Builder baselineTableName(String baselineTableName) {
            return baselineTableName(Output.of(baselineTableName));
        }

        public Builder customMetrics(@Nullable Output<List<LakehouseMonitorCustomMetricArgs>> customMetrics) {
            $.customMetrics = customMetrics;
            return this;
        }

        public Builder customMetrics(List<LakehouseMonitorCustomMetricArgs> customMetrics) {
            return customMetrics(Output.of(customMetrics));
        }

        public Builder customMetrics(LakehouseMonitorCustomMetricArgs... customMetrics) {
            return customMetrics(List.of(customMetrics));
        }

        public Builder dataClassificationConfig(@Nullable Output<LakehouseMonitorDataClassificationConfigArgs> dataClassificationConfig) {
            $.dataClassificationConfig = dataClassificationConfig;
            return this;
        }

        public Builder dataClassificationConfig(LakehouseMonitorDataClassificationConfigArgs dataClassificationConfig) {
            return dataClassificationConfig(Output.of(dataClassificationConfig));
        }

        public Builder inferenceLog(@Nullable Output<LakehouseMonitorInferenceLogArgs> inferenceLog) {
            $.inferenceLog = inferenceLog;
            return this;
        }

        public Builder inferenceLog(LakehouseMonitorInferenceLogArgs inferenceLog) {
            return inferenceLog(Output.of(inferenceLog));
        }

        public Builder latestMonitorFailureMsg(@Nullable Output<String> latestMonitorFailureMsg) {
            $.latestMonitorFailureMsg = latestMonitorFailureMsg;
            return this;
        }

        public Builder latestMonitorFailureMsg(String latestMonitorFailureMsg) {
            return latestMonitorFailureMsg(Output.of(latestMonitorFailureMsg));
        }

        public Builder notifications(@Nullable Output<LakehouseMonitorNotificationsArgs> notifications) {
            $.notifications = notifications;
            return this;
        }

        public Builder notifications(LakehouseMonitorNotificationsArgs notifications) {
            return notifications(Output.of(notifications));
        }

        public Builder outputSchemaName(Output<String> outputSchemaName) {
            $.outputSchemaName = outputSchemaName;
            return this;
        }

        public Builder outputSchemaName(String outputSchemaName) {
            return outputSchemaName(Output.of(outputSchemaName));
        }

        public Builder schedule(@Nullable Output<LakehouseMonitorScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        public Builder schedule(LakehouseMonitorScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        public Builder skipBuiltinDashboard(@Nullable Output<Boolean> skipBuiltinDashboard) {
            $.skipBuiltinDashboard = skipBuiltinDashboard;
            return this;
        }

        public Builder skipBuiltinDashboard(Boolean skipBuiltinDashboard) {
            return skipBuiltinDashboard(Output.of(skipBuiltinDashboard));
        }

        public Builder slicingExprs(@Nullable Output<List<String>> slicingExprs) {
            $.slicingExprs = slicingExprs;
            return this;
        }

        public Builder slicingExprs(List<String> slicingExprs) {
            return slicingExprs(Output.of(slicingExprs));
        }

        public Builder slicingExprs(String... slicingExprs) {
            return slicingExprs(List.of(slicingExprs));
        }

        public Builder snapshot(@Nullable Output<LakehouseMonitorSnapshotArgs> snapshot) {
            $.snapshot = snapshot;
            return this;
        }

        public Builder snapshot(LakehouseMonitorSnapshotArgs snapshot) {
            return snapshot(Output.of(snapshot));
        }

        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public Builder timeSeries(@Nullable Output<LakehouseMonitorTimeSeriesArgs> timeSeries) {
            $.timeSeries = timeSeries;
            return this;
        }

        public Builder timeSeries(LakehouseMonitorTimeSeriesArgs timeSeries) {
            return timeSeries(Output.of(timeSeries));
        }

        public Builder warehouseId(@Nullable Output<String> warehouseId) {
            $.warehouseId = warehouseId;
            return this;
        }

        public Builder warehouseId(String warehouseId) {
            return warehouseId(Output.of(warehouseId));
        }

        public LakehouseMonitorArgs build() {
            if ($.assetsDir == null) {
                throw new MissingRequiredPropertyException("LakehouseMonitorArgs", "assetsDir");
            }
            if ($.outputSchemaName == null) {
                throw new MissingRequiredPropertyException("LakehouseMonitorArgs", "outputSchemaName");
            }
            if ($.tableName == null) {
                throw new MissingRequiredPropertyException("LakehouseMonitorArgs", "tableName");
            }
            return $;
        }
    }

}
