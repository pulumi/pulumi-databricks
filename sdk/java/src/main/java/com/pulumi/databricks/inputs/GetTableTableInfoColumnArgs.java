// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetTableTableInfoColumnMaskArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTableTableInfoColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetTableTableInfoColumnArgs Empty = new GetTableTableInfoColumnArgs();

    /**
     * Free-form text description
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Free-form text description
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="mask")
    private @Nullable Output<GetTableTableInfoColumnMaskArgs> mask;

    public Optional<Output<GetTableTableInfoColumnMaskArgs>> mask() {
        return Optional.ofNullable(this.mask);
    }

    /**
     * Full name of the databricks_table: _`catalog`.`schema`.`table`_
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Full name of the databricks_table: _`catalog`.`schema`.`table`_
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="nullable")
    private @Nullable Output<Boolean> nullable;

    public Optional<Output<Boolean>> nullable() {
        return Optional.ofNullable(this.nullable);
    }

    @Import(name="partitionIndex")
    private @Nullable Output<Integer> partitionIndex;

    public Optional<Output<Integer>> partitionIndex() {
        return Optional.ofNullable(this.partitionIndex);
    }

    @Import(name="position")
    private @Nullable Output<Integer> position;

    public Optional<Output<Integer>> position() {
        return Optional.ofNullable(this.position);
    }

    @Import(name="typeIntervalType")
    private @Nullable Output<String> typeIntervalType;

    public Optional<Output<String>> typeIntervalType() {
        return Optional.ofNullable(this.typeIntervalType);
    }

    @Import(name="typeJson")
    private @Nullable Output<String> typeJson;

    public Optional<Output<String>> typeJson() {
        return Optional.ofNullable(this.typeJson);
    }

    @Import(name="typeName")
    private @Nullable Output<String> typeName;

    public Optional<Output<String>> typeName() {
        return Optional.ofNullable(this.typeName);
    }

    @Import(name="typePrecision")
    private @Nullable Output<Integer> typePrecision;

    public Optional<Output<Integer>> typePrecision() {
        return Optional.ofNullable(this.typePrecision);
    }

    @Import(name="typeScale")
    private @Nullable Output<Integer> typeScale;

    public Optional<Output<Integer>> typeScale() {
        return Optional.ofNullable(this.typeScale);
    }

    @Import(name="typeText")
    private @Nullable Output<String> typeText;

    public Optional<Output<String>> typeText() {
        return Optional.ofNullable(this.typeText);
    }

    private GetTableTableInfoColumnArgs() {}

    private GetTableTableInfoColumnArgs(GetTableTableInfoColumnArgs $) {
        this.comment = $.comment;
        this.mask = $.mask;
        this.name = $.name;
        this.nullable = $.nullable;
        this.partitionIndex = $.partitionIndex;
        this.position = $.position;
        this.typeIntervalType = $.typeIntervalType;
        this.typeJson = $.typeJson;
        this.typeName = $.typeName;
        this.typePrecision = $.typePrecision;
        this.typeScale = $.typeScale;
        this.typeText = $.typeText;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTableTableInfoColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTableTableInfoColumnArgs $;

        public Builder() {
            $ = new GetTableTableInfoColumnArgs();
        }

        public Builder(GetTableTableInfoColumnArgs defaults) {
            $ = new GetTableTableInfoColumnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Free-form text description
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Free-form text description
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder mask(@Nullable Output<GetTableTableInfoColumnMaskArgs> mask) {
            $.mask = mask;
            return this;
        }

        public Builder mask(GetTableTableInfoColumnMaskArgs mask) {
            return mask(Output.of(mask));
        }

        /**
         * @param name Full name of the databricks_table: _`catalog`.`schema`.`table`_
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Full name of the databricks_table: _`catalog`.`schema`.`table`_
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder nullable(@Nullable Output<Boolean> nullable) {
            $.nullable = nullable;
            return this;
        }

        public Builder nullable(Boolean nullable) {
            return nullable(Output.of(nullable));
        }

        public Builder partitionIndex(@Nullable Output<Integer> partitionIndex) {
            $.partitionIndex = partitionIndex;
            return this;
        }

        public Builder partitionIndex(Integer partitionIndex) {
            return partitionIndex(Output.of(partitionIndex));
        }

        public Builder position(@Nullable Output<Integer> position) {
            $.position = position;
            return this;
        }

        public Builder position(Integer position) {
            return position(Output.of(position));
        }

        public Builder typeIntervalType(@Nullable Output<String> typeIntervalType) {
            $.typeIntervalType = typeIntervalType;
            return this;
        }

        public Builder typeIntervalType(String typeIntervalType) {
            return typeIntervalType(Output.of(typeIntervalType));
        }

        public Builder typeJson(@Nullable Output<String> typeJson) {
            $.typeJson = typeJson;
            return this;
        }

        public Builder typeJson(String typeJson) {
            return typeJson(Output.of(typeJson));
        }

        public Builder typeName(@Nullable Output<String> typeName) {
            $.typeName = typeName;
            return this;
        }

        public Builder typeName(String typeName) {
            return typeName(Output.of(typeName));
        }

        public Builder typePrecision(@Nullable Output<Integer> typePrecision) {
            $.typePrecision = typePrecision;
            return this;
        }

        public Builder typePrecision(Integer typePrecision) {
            return typePrecision(Output.of(typePrecision));
        }

        public Builder typeScale(@Nullable Output<Integer> typeScale) {
            $.typeScale = typeScale;
            return this;
        }

        public Builder typeScale(Integer typeScale) {
            return typeScale(Output.of(typeScale));
        }

        public Builder typeText(@Nullable Output<String> typeText) {
            $.typeText = typeText;
            return this;
        }

        public Builder typeText(String typeText) {
            return typeText(Output.of(typeText));
        }

        public GetTableTableInfoColumnArgs build() {
            return $;
        }
    }

}
