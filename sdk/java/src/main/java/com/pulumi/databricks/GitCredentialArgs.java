// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitCredentialArgs Empty = new GitCredentialArgs();

    @Import(name="force")
    private @Nullable Output<Boolean> force;

    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    @Import(name="gitProvider", required=true)
    private Output<String> gitProvider;

    public Output<String> gitProvider() {
        return this.gitProvider;
    }

    @Import(name="gitUsername")
    private @Nullable Output<String> gitUsername;

    public Optional<Output<String>> gitUsername() {
        return Optional.ofNullable(this.gitUsername);
    }

    @Import(name="personalAccessToken")
    private @Nullable Output<String> personalAccessToken;

    public Optional<Output<String>> personalAccessToken() {
        return Optional.ofNullable(this.personalAccessToken);
    }

    private GitCredentialArgs() {}

    private GitCredentialArgs(GitCredentialArgs $) {
        this.force = $.force;
        this.gitProvider = $.gitProvider;
        this.gitUsername = $.gitUsername;
        this.personalAccessToken = $.personalAccessToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitCredentialArgs $;

        public Builder() {
            $ = new GitCredentialArgs();
        }

        public Builder(GitCredentialArgs defaults) {
            $ = new GitCredentialArgs(Objects.requireNonNull(defaults));
        }

        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        public Builder gitProvider(Output<String> gitProvider) {
            $.gitProvider = gitProvider;
            return this;
        }

        public Builder gitProvider(String gitProvider) {
            return gitProvider(Output.of(gitProvider));
        }

        public Builder gitUsername(@Nullable Output<String> gitUsername) {
            $.gitUsername = gitUsername;
            return this;
        }

        public Builder gitUsername(String gitUsername) {
            return gitUsername(Output.of(gitUsername));
        }

        public Builder personalAccessToken(@Nullable Output<String> personalAccessToken) {
            $.personalAccessToken = personalAccessToken;
            return this;
        }

        public Builder personalAccessToken(String personalAccessToken) {
            return personalAccessToken(Output.of(personalAccessToken));
        }

        public GitCredentialArgs build() {
            if ($.gitProvider == null) {
                throw new MissingRequiredPropertyException("GitCredentialArgs", "gitProvider");
            }
            return $;
        }
    }

}
