// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlobalInitScriptArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalInitScriptArgs Empty = new GlobalInitScriptArgs();

    @Import(name="contentBase64")
    private @Nullable Output<String> contentBase64;

    public Optional<Output<String>> contentBase64() {
        return Optional.ofNullable(this.contentBase64);
    }

    /**
     * specifies if the script is enabled for execution, or not
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return specifies if the script is enabled for execution, or not
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="md5")
    private @Nullable Output<String> md5;

    public Optional<Output<String>> md5() {
        return Optional.ofNullable(this.md5);
    }

    /**
     * the name of the script.  It should be unique
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return the name of the script.  It should be unique
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * the position of a global init script, where `0` represents the first global init script to run, `1` is the second global init script to run, and so on. When omitted, the script gets the last position.
     * 
     */
    @Import(name="position")
    private @Nullable Output<Integer> position;

    /**
     * @return the position of a global init script, where `0` represents the first global init script to run, `1` is the second global init script to run, and so on. When omitted, the script gets the last position.
     * 
     */
    public Optional<Output<Integer>> position() {
        return Optional.ofNullable(this.position);
    }

    /**
     * Path to script&#39;s source code on local filesystem. Conflicts with `content_base64`
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Path to script&#39;s source code on local filesystem. Conflicts with `content_base64`
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    private GlobalInitScriptArgs() {}

    private GlobalInitScriptArgs(GlobalInitScriptArgs $) {
        this.contentBase64 = $.contentBase64;
        this.enabled = $.enabled;
        this.md5 = $.md5;
        this.name = $.name;
        this.position = $.position;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalInitScriptArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalInitScriptArgs $;

        public Builder() {
            $ = new GlobalInitScriptArgs();
        }

        public Builder(GlobalInitScriptArgs defaults) {
            $ = new GlobalInitScriptArgs(Objects.requireNonNull(defaults));
        }

        public Builder contentBase64(@Nullable Output<String> contentBase64) {
            $.contentBase64 = contentBase64;
            return this;
        }

        public Builder contentBase64(String contentBase64) {
            return contentBase64(Output.of(contentBase64));
        }

        /**
         * @param enabled specifies if the script is enabled for execution, or not
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled specifies if the script is enabled for execution, or not
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder md5(@Nullable Output<String> md5) {
            $.md5 = md5;
            return this;
        }

        public Builder md5(String md5) {
            return md5(Output.of(md5));
        }

        /**
         * @param name the name of the script.  It should be unique
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name the name of the script.  It should be unique
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param position the position of a global init script, where `0` represents the first global init script to run, `1` is the second global init script to run, and so on. When omitted, the script gets the last position.
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Output<Integer> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position the position of a global init script, where `0` represents the first global init script to run, `1` is the second global init script to run, and so on. When omitted, the script gets the last position.
         * 
         * @return builder
         * 
         */
        public Builder position(Integer position) {
            return position(Output.of(position));
        }

        /**
         * @param source Path to script&#39;s source code on local filesystem. Conflicts with `content_base64`
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Path to script&#39;s source code on local filesystem. Conflicts with `content_base64`
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public GlobalInitScriptArgs build() {
            return $;
        }
    }

}
