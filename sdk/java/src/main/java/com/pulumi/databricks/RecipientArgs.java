// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.RecipientIpAccessListArgs;
import com.pulumi.databricks.inputs.RecipientPropertiesKvpairsArgs;
import com.pulumi.databricks.inputs.RecipientTokenArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecipientArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecipientArgs Empty = new RecipientArgs();

    @Import(name="authenticationType", required=true)
    private Output<String> authenticationType;

    public Output<String> authenticationType() {
        return this.authenticationType;
    }

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="dataRecipientGlobalMetastoreId")
    private @Nullable Output<String> dataRecipientGlobalMetastoreId;

    public Optional<Output<String>> dataRecipientGlobalMetastoreId() {
        return Optional.ofNullable(this.dataRecipientGlobalMetastoreId);
    }

    @Import(name="ipAccessList")
    private @Nullable Output<RecipientIpAccessListArgs> ipAccessList;

    public Optional<Output<RecipientIpAccessListArgs>> ipAccessList() {
        return Optional.ofNullable(this.ipAccessList);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="propertiesKvpairs")
    private @Nullable Output<RecipientPropertiesKvpairsArgs> propertiesKvpairs;

    public Optional<Output<RecipientPropertiesKvpairsArgs>> propertiesKvpairs() {
        return Optional.ofNullable(this.propertiesKvpairs);
    }

    @Import(name="sharingCode")
    private @Nullable Output<String> sharingCode;

    public Optional<Output<String>> sharingCode() {
        return Optional.ofNullable(this.sharingCode);
    }

    @Import(name="tokens")
    private @Nullable Output<List<RecipientTokenArgs>> tokens;

    public Optional<Output<List<RecipientTokenArgs>>> tokens() {
        return Optional.ofNullable(this.tokens);
    }

    private RecipientArgs() {}

    private RecipientArgs(RecipientArgs $) {
        this.authenticationType = $.authenticationType;
        this.comment = $.comment;
        this.dataRecipientGlobalMetastoreId = $.dataRecipientGlobalMetastoreId;
        this.ipAccessList = $.ipAccessList;
        this.name = $.name;
        this.owner = $.owner;
        this.propertiesKvpairs = $.propertiesKvpairs;
        this.sharingCode = $.sharingCode;
        this.tokens = $.tokens;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecipientArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecipientArgs $;

        public Builder() {
            $ = new RecipientArgs();
        }

        public Builder(RecipientArgs defaults) {
            $ = new RecipientArgs(Objects.requireNonNull(defaults));
        }

        public Builder authenticationType(Output<String> authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        public Builder authenticationType(String authenticationType) {
            return authenticationType(Output.of(authenticationType));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder dataRecipientGlobalMetastoreId(@Nullable Output<String> dataRecipientGlobalMetastoreId) {
            $.dataRecipientGlobalMetastoreId = dataRecipientGlobalMetastoreId;
            return this;
        }

        public Builder dataRecipientGlobalMetastoreId(String dataRecipientGlobalMetastoreId) {
            return dataRecipientGlobalMetastoreId(Output.of(dataRecipientGlobalMetastoreId));
        }

        public Builder ipAccessList(@Nullable Output<RecipientIpAccessListArgs> ipAccessList) {
            $.ipAccessList = ipAccessList;
            return this;
        }

        public Builder ipAccessList(RecipientIpAccessListArgs ipAccessList) {
            return ipAccessList(Output.of(ipAccessList));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder propertiesKvpairs(@Nullable Output<RecipientPropertiesKvpairsArgs> propertiesKvpairs) {
            $.propertiesKvpairs = propertiesKvpairs;
            return this;
        }

        public Builder propertiesKvpairs(RecipientPropertiesKvpairsArgs propertiesKvpairs) {
            return propertiesKvpairs(Output.of(propertiesKvpairs));
        }

        public Builder sharingCode(@Nullable Output<String> sharingCode) {
            $.sharingCode = sharingCode;
            return this;
        }

        public Builder sharingCode(String sharingCode) {
            return sharingCode(Output.of(sharingCode));
        }

        public Builder tokens(@Nullable Output<List<RecipientTokenArgs>> tokens) {
            $.tokens = tokens;
            return this;
        }

        public Builder tokens(List<RecipientTokenArgs> tokens) {
            return tokens(Output.of(tokens));
        }

        public Builder tokens(RecipientTokenArgs... tokens) {
            return tokens(List.of(tokens));
        }

        public RecipientArgs build() {
            if ($.authenticationType == null) {
                throw new MissingRequiredPropertyException("RecipientArgs", "authenticationType");
            }
            return $;
        }
    }

}
