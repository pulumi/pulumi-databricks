// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetPolicyInfoColumnMaskArgs;
import com.pulumi.databricks.inputs.GetPolicyInfoMatchColumnArgs;
import com.pulumi.databricks.inputs.GetPolicyInfoRowFilterArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPolicyInfoArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPolicyInfoArgs Empty = new GetPolicyInfoArgs();

    /**
     * (ColumnMaskOptions) - Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    @Import(name="columnMask")
    private @Nullable Output<GetPolicyInfoColumnMaskArgs> columnMask;

    /**
     * @return (ColumnMaskOptions) - Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    public Optional<Output<GetPolicyInfoColumnMaskArgs>> columnMask() {
        return Optional.ofNullable(this.columnMask);
    }

    /**
     * (string) - Optional description of the policy
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return (string) - Optional description of the policy
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * (list of string) - Optional list of user or group names that should be excluded from the policy
     * 
     */
    @Import(name="exceptPrincipals")
    private @Nullable Output<List<String>> exceptPrincipals;

    /**
     * @return (list of string) - Optional list of user or group names that should be excluded from the policy
     * 
     */
    public Optional<Output<List<String>>> exceptPrincipals() {
        return Optional.ofNullable(this.exceptPrincipals);
    }

    /**
     * (string) - Type of securables that the policy should take effect on.
     * Only `TABLE` is supported at this moment.
     * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    @Import(name="forSecurableType", required=true)
    private Output<String> forSecurableType;

    /**
     * @return (string) - Type of securables that the policy should take effect on.
     * Only `TABLE` is supported at this moment.
     * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    public Output<String> forSecurableType() {
        return this.forSecurableType;
    }

    /**
     * (list of MatchColumn) - Optional list of condition expressions used to match table columns.
     * Only valid when `for_securable_type` is `TABLE`.
     * When specified, the policy only applies to tables whose columns satisfy all match conditions
     * 
     */
    @Import(name="matchColumns")
    private @Nullable Output<List<GetPolicyInfoMatchColumnArgs>> matchColumns;

    /**
     * @return (list of MatchColumn) - Optional list of condition expressions used to match table columns.
     * Only valid when `for_securable_type` is `TABLE`.
     * When specified, the policy only applies to tables whose columns satisfy all match conditions
     * 
     */
    public Optional<Output<List<GetPolicyInfoMatchColumnArgs>>> matchColumns() {
        return Optional.ofNullable(this.matchColumns);
    }

    /**
     * Name of the policy. Required on create and optional on update.
     * To rename the policy, set `name` to a different value on update
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the policy. Required on create and optional on update.
     * To rename the policy, set `name` to a different value on update
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Full name of the securable on which the policy is defined.
     * Required on create and ignored on update
     * 
     */
    @Import(name="onSecurableFullname")
    private @Nullable Output<String> onSecurableFullname;

    /**
     * @return Full name of the securable on which the policy is defined.
     * Required on create and ignored on update
     * 
     */
    public Optional<Output<String>> onSecurableFullname() {
        return Optional.ofNullable(this.onSecurableFullname);
    }

    /**
     * Type of the securable on which the policy is defined.
     * Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
     * Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    @Import(name="onSecurableType")
    private @Nullable Output<String> onSecurableType;

    /**
     * @return Type of the securable on which the policy is defined.
     * Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
     * Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
     * 
     */
    public Optional<Output<String>> onSecurableType() {
        return Optional.ofNullable(this.onSecurableType);
    }

    /**
     * (string) - Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
     * 
     */
    @Import(name="policyType", required=true)
    private Output<String> policyType;

    /**
     * @return (string) - Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
     * 
     */
    public Output<String> policyType() {
        return this.policyType;
    }

    /**
     * (RowFilterOptions) - Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    @Import(name="rowFilter")
    private @Nullable Output<GetPolicyInfoRowFilterArgs> rowFilter;

    /**
     * @return (RowFilterOptions) - Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
     * Required on create and optional on update. When specified on update,
     * the new options will replace the existing options as a whole
     * 
     */
    public Optional<Output<GetPolicyInfoRowFilterArgs>> rowFilter() {
        return Optional.ofNullable(this.rowFilter);
    }

    /**
     * (list of string) - List of user or group names that the policy applies to.
     * Required on create and optional on update
     * 
     */
    @Import(name="toPrincipals", required=true)
    private Output<List<String>> toPrincipals;

    /**
     * @return (list of string) - List of user or group names that the policy applies to.
     * Required on create and optional on update
     * 
     */
    public Output<List<String>> toPrincipals() {
        return this.toPrincipals;
    }

    /**
     * (string) - Optional condition when the policy should take effect
     * 
     */
    @Import(name="whenCondition")
    private @Nullable Output<String> whenCondition;

    /**
     * @return (string) - Optional condition when the policy should take effect
     * 
     */
    public Optional<Output<String>> whenCondition() {
        return Optional.ofNullable(this.whenCondition);
    }

    /**
     * Workspace ID of the resource
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private GetPolicyInfoArgs() {}

    private GetPolicyInfoArgs(GetPolicyInfoArgs $) {
        this.columnMask = $.columnMask;
        this.comment = $.comment;
        this.exceptPrincipals = $.exceptPrincipals;
        this.forSecurableType = $.forSecurableType;
        this.matchColumns = $.matchColumns;
        this.name = $.name;
        this.onSecurableFullname = $.onSecurableFullname;
        this.onSecurableType = $.onSecurableType;
        this.policyType = $.policyType;
        this.rowFilter = $.rowFilter;
        this.toPrincipals = $.toPrincipals;
        this.whenCondition = $.whenCondition;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPolicyInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPolicyInfoArgs $;

        public Builder() {
            $ = new GetPolicyInfoArgs();
        }

        public Builder(GetPolicyInfoArgs defaults) {
            $ = new GetPolicyInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnMask (ColumnMaskOptions) - Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
         * Required on create and optional on update. When specified on update,
         * the new options will replace the existing options as a whole
         * 
         * @return builder
         * 
         */
        public Builder columnMask(@Nullable Output<GetPolicyInfoColumnMaskArgs> columnMask) {
            $.columnMask = columnMask;
            return this;
        }

        /**
         * @param columnMask (ColumnMaskOptions) - Options for column mask policies. Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`.
         * Required on create and optional on update. When specified on update,
         * the new options will replace the existing options as a whole
         * 
         * @return builder
         * 
         */
        public Builder columnMask(GetPolicyInfoColumnMaskArgs columnMask) {
            return columnMask(Output.of(columnMask));
        }

        /**
         * @param comment (string) - Optional description of the policy
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment (string) - Optional description of the policy
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param exceptPrincipals (list of string) - Optional list of user or group names that should be excluded from the policy
         * 
         * @return builder
         * 
         */
        public Builder exceptPrincipals(@Nullable Output<List<String>> exceptPrincipals) {
            $.exceptPrincipals = exceptPrincipals;
            return this;
        }

        /**
         * @param exceptPrincipals (list of string) - Optional list of user or group names that should be excluded from the policy
         * 
         * @return builder
         * 
         */
        public Builder exceptPrincipals(List<String> exceptPrincipals) {
            return exceptPrincipals(Output.of(exceptPrincipals));
        }

        /**
         * @param exceptPrincipals (list of string) - Optional list of user or group names that should be excluded from the policy
         * 
         * @return builder
         * 
         */
        public Builder exceptPrincipals(String... exceptPrincipals) {
            return exceptPrincipals(List.of(exceptPrincipals));
        }

        /**
         * @param forSecurableType (string) - Type of securables that the policy should take effect on.
         * Only `TABLE` is supported at this moment.
         * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
         * 
         * @return builder
         * 
         */
        public Builder forSecurableType(Output<String> forSecurableType) {
            $.forSecurableType = forSecurableType;
            return this;
        }

        /**
         * @param forSecurableType (string) - Type of securables that the policy should take effect on.
         * Only `TABLE` is supported at this moment.
         * Required on create and optional on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
         * 
         * @return builder
         * 
         */
        public Builder forSecurableType(String forSecurableType) {
            return forSecurableType(Output.of(forSecurableType));
        }

        /**
         * @param matchColumns (list of MatchColumn) - Optional list of condition expressions used to match table columns.
         * Only valid when `for_securable_type` is `TABLE`.
         * When specified, the policy only applies to tables whose columns satisfy all match conditions
         * 
         * @return builder
         * 
         */
        public Builder matchColumns(@Nullable Output<List<GetPolicyInfoMatchColumnArgs>> matchColumns) {
            $.matchColumns = matchColumns;
            return this;
        }

        /**
         * @param matchColumns (list of MatchColumn) - Optional list of condition expressions used to match table columns.
         * Only valid when `for_securable_type` is `TABLE`.
         * When specified, the policy only applies to tables whose columns satisfy all match conditions
         * 
         * @return builder
         * 
         */
        public Builder matchColumns(List<GetPolicyInfoMatchColumnArgs> matchColumns) {
            return matchColumns(Output.of(matchColumns));
        }

        /**
         * @param matchColumns (list of MatchColumn) - Optional list of condition expressions used to match table columns.
         * Only valid when `for_securable_type` is `TABLE`.
         * When specified, the policy only applies to tables whose columns satisfy all match conditions
         * 
         * @return builder
         * 
         */
        public Builder matchColumns(GetPolicyInfoMatchColumnArgs... matchColumns) {
            return matchColumns(List.of(matchColumns));
        }

        /**
         * @param name Name of the policy. Required on create and optional on update.
         * To rename the policy, set `name` to a different value on update
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the policy. Required on create and optional on update.
         * To rename the policy, set `name` to a different value on update
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param onSecurableFullname Full name of the securable on which the policy is defined.
         * Required on create and ignored on update
         * 
         * @return builder
         * 
         */
        public Builder onSecurableFullname(@Nullable Output<String> onSecurableFullname) {
            $.onSecurableFullname = onSecurableFullname;
            return this;
        }

        /**
         * @param onSecurableFullname Full name of the securable on which the policy is defined.
         * Required on create and ignored on update
         * 
         * @return builder
         * 
         */
        public Builder onSecurableFullname(String onSecurableFullname) {
            return onSecurableFullname(Output.of(onSecurableFullname));
        }

        /**
         * @param onSecurableType Type of the securable on which the policy is defined.
         * Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
         * Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
         * 
         * @return builder
         * 
         */
        public Builder onSecurableType(@Nullable Output<String> onSecurableType) {
            $.onSecurableType = onSecurableType;
            return this;
        }

        /**
         * @param onSecurableType Type of the securable on which the policy is defined.
         * Only `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment.
         * Required on create and ignored on update. Possible values are: `CATALOG`, `CLEAN_ROOM`, `CONNECTION`, `CREDENTIAL`, `EXTERNAL_LOCATION`, `EXTERNAL_METADATA`, `FUNCTION`, `METASTORE`, `PIPELINE`, `PROVIDER`, `RECIPIENT`, `SCHEMA`, `SHARE`, `STAGING_TABLE`, `STORAGE_CREDENTIAL`, `TABLE`, `VOLUME`
         * 
         * @return builder
         * 
         */
        public Builder onSecurableType(String onSecurableType) {
            return onSecurableType(Output.of(onSecurableType));
        }

        /**
         * @param policyType (string) - Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
         * 
         * @return builder
         * 
         */
        public Builder policyType(Output<String> policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param policyType (string) - Type of the policy. Required on create and ignored on update. Possible values are: `POLICY_TYPE_COLUMN_MASK`, `POLICY_TYPE_ROW_FILTER`
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            return policyType(Output.of(policyType));
        }

        /**
         * @param rowFilter (RowFilterOptions) - Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
         * Required on create and optional on update. When specified on update,
         * the new options will replace the existing options as a whole
         * 
         * @return builder
         * 
         */
        public Builder rowFilter(@Nullable Output<GetPolicyInfoRowFilterArgs> rowFilter) {
            $.rowFilter = rowFilter;
            return this;
        }

        /**
         * @param rowFilter (RowFilterOptions) - Options for row filter policies. Valid only if `policy_type` is `POLICY_TYPE_ROW_FILTER`.
         * Required on create and optional on update. When specified on update,
         * the new options will replace the existing options as a whole
         * 
         * @return builder
         * 
         */
        public Builder rowFilter(GetPolicyInfoRowFilterArgs rowFilter) {
            return rowFilter(Output.of(rowFilter));
        }

        /**
         * @param toPrincipals (list of string) - List of user or group names that the policy applies to.
         * Required on create and optional on update
         * 
         * @return builder
         * 
         */
        public Builder toPrincipals(Output<List<String>> toPrincipals) {
            $.toPrincipals = toPrincipals;
            return this;
        }

        /**
         * @param toPrincipals (list of string) - List of user or group names that the policy applies to.
         * Required on create and optional on update
         * 
         * @return builder
         * 
         */
        public Builder toPrincipals(List<String> toPrincipals) {
            return toPrincipals(Output.of(toPrincipals));
        }

        /**
         * @param toPrincipals (list of string) - List of user or group names that the policy applies to.
         * Required on create and optional on update
         * 
         * @return builder
         * 
         */
        public Builder toPrincipals(String... toPrincipals) {
            return toPrincipals(List.of(toPrincipals));
        }

        /**
         * @param whenCondition (string) - Optional condition when the policy should take effect
         * 
         * @return builder
         * 
         */
        public Builder whenCondition(@Nullable Output<String> whenCondition) {
            $.whenCondition = whenCondition;
            return this;
        }

        /**
         * @param whenCondition (string) - Optional condition when the policy should take effect
         * 
         * @return builder
         * 
         */
        public Builder whenCondition(String whenCondition) {
            return whenCondition(Output.of(whenCondition));
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public GetPolicyInfoArgs build() {
            if ($.forSecurableType == null) {
                throw new MissingRequiredPropertyException("GetPolicyInfoArgs", "forSecurableType");
            }
            if ($.policyType == null) {
                throw new MissingRequiredPropertyException("GetPolicyInfoArgs", "policyType");
            }
            if ($.toPrincipals == null) {
                throw new MissingRequiredPropertyException("GetPolicyInfoArgs", "toPrincipals");
            }
            return $;
        }
    }

}
