// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.TableColumnArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableArgs Empty = new TableArgs();

    @Import(name="catalogName", required=true)
    private Output<String> catalogName;

    public Output<String> catalogName() {
        return this.catalogName;
    }

    @Import(name="columns", required=true)
    private Output<List<TableColumnArgs>> columns;

    public Output<List<TableColumnArgs>> columns() {
        return this.columns;
    }

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="dataSourceFormat", required=true)
    private Output<String> dataSourceFormat;

    public Output<String> dataSourceFormat() {
        return this.dataSourceFormat;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="properties")
    private @Nullable Output<Map<String,Object>> properties;

    public Optional<Output<Map<String,Object>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    @Import(name="schemaName", required=true)
    private Output<String> schemaName;

    public Output<String> schemaName() {
        return this.schemaName;
    }

    @Import(name="storageCredentialName")
    private @Nullable Output<String> storageCredentialName;

    public Optional<Output<String>> storageCredentialName() {
        return Optional.ofNullable(this.storageCredentialName);
    }

    @Import(name="storageLocation")
    private @Nullable Output<String> storageLocation;

    public Optional<Output<String>> storageLocation() {
        return Optional.ofNullable(this.storageLocation);
    }

    @Import(name="tableType", required=true)
    private Output<String> tableType;

    public Output<String> tableType() {
        return this.tableType;
    }

    @Import(name="viewDefinition")
    private @Nullable Output<String> viewDefinition;

    public Optional<Output<String>> viewDefinition() {
        return Optional.ofNullable(this.viewDefinition);
    }

    private TableArgs() {}

    private TableArgs(TableArgs $) {
        this.catalogName = $.catalogName;
        this.columns = $.columns;
        this.comment = $.comment;
        this.dataSourceFormat = $.dataSourceFormat;
        this.name = $.name;
        this.owner = $.owner;
        this.properties = $.properties;
        this.schemaName = $.schemaName;
        this.storageCredentialName = $.storageCredentialName;
        this.storageLocation = $.storageLocation;
        this.tableType = $.tableType;
        this.viewDefinition = $.viewDefinition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableArgs $;

        public Builder() {
            $ = new TableArgs();
        }

        public Builder(TableArgs defaults) {
            $ = new TableArgs(Objects.requireNonNull(defaults));
        }

        public Builder catalogName(Output<String> catalogName) {
            $.catalogName = catalogName;
            return this;
        }

        public Builder catalogName(String catalogName) {
            return catalogName(Output.of(catalogName));
        }

        public Builder columns(Output<List<TableColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        public Builder columns(List<TableColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        public Builder columns(TableColumnArgs... columns) {
            return columns(List.of(columns));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder dataSourceFormat(Output<String> dataSourceFormat) {
            $.dataSourceFormat = dataSourceFormat;
            return this;
        }

        public Builder dataSourceFormat(String dataSourceFormat) {
            return dataSourceFormat(Output.of(dataSourceFormat));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder properties(@Nullable Output<Map<String,Object>> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(Map<String,Object> properties) {
            return properties(Output.of(properties));
        }

        public Builder schemaName(Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public Builder storageCredentialName(@Nullable Output<String> storageCredentialName) {
            $.storageCredentialName = storageCredentialName;
            return this;
        }

        public Builder storageCredentialName(String storageCredentialName) {
            return storageCredentialName(Output.of(storageCredentialName));
        }

        public Builder storageLocation(@Nullable Output<String> storageLocation) {
            $.storageLocation = storageLocation;
            return this;
        }

        public Builder storageLocation(String storageLocation) {
            return storageLocation(Output.of(storageLocation));
        }

        public Builder tableType(Output<String> tableType) {
            $.tableType = tableType;
            return this;
        }

        public Builder tableType(String tableType) {
            return tableType(Output.of(tableType));
        }

        public Builder viewDefinition(@Nullable Output<String> viewDefinition) {
            $.viewDefinition = viewDefinition;
            return this;
        }

        public Builder viewDefinition(String viewDefinition) {
            return viewDefinition(Output.of(viewDefinition));
        }

        public TableArgs build() {
            $.catalogName = Objects.requireNonNull($.catalogName, "expected parameter 'catalogName' to be non-null");
            $.columns = Objects.requireNonNull($.columns, "expected parameter 'columns' to be non-null");
            $.dataSourceFormat = Objects.requireNonNull($.dataSourceFormat, "expected parameter 'dataSourceFormat' to be non-null");
            $.schemaName = Objects.requireNonNull($.schemaName, "expected parameter 'schemaName' to be non-null");
            $.tableType = Objects.requireNonNull($.tableType, "expected parameter 'tableType' to be non-null");
            return $;
        }
    }

}
