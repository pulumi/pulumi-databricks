// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetRegisteredModelVersionsModelVersionAlias;
import com.pulumi.databricks.inputs.GetRegisteredModelVersionsModelVersionModelVersionDependency;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRegisteredModelVersionsModelVersion extends com.pulumi.resources.InvokeArgs {

    public static final GetRegisteredModelVersionsModelVersion Empty = new GetRegisteredModelVersionsModelVersion();

    /**
     * the list of aliases associated with this model. Each item is object consisting of following attributes:
     * 
     */
    @Import(name="aliases")
    private @Nullable List<GetRegisteredModelVersionsModelVersionAlias> aliases;

    /**
     * @return the list of aliases associated with this model. Each item is object consisting of following attributes:
     * 
     */
    public Optional<List<GetRegisteredModelVersionsModelVersionAlias>> aliases() {
        return Optional.ofNullable(this.aliases);
    }

    @Import(name="browseOnly")
    private @Nullable Boolean browseOnly;

    public Optional<Boolean> browseOnly() {
        return Optional.ofNullable(this.browseOnly);
    }

    /**
     * The name of the catalog where the schema and the registered model reside.
     * 
     */
    @Import(name="catalogName")
    private @Nullable String catalogName;

    /**
     * @return The name of the catalog where the schema and the registered model reside.
     * 
     */
    public Optional<String> catalogName() {
        return Optional.ofNullable(this.catalogName);
    }

    /**
     * The comment attached to the registered model.
     * 
     */
    @Import(name="comment")
    private @Nullable String comment;

    /**
     * @return The comment attached to the registered model.
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * the Unix timestamp at the model&#39;s creation
     * 
     */
    @Import(name="createdAt")
    private @Nullable Integer createdAt;

    /**
     * @return the Unix timestamp at the model&#39;s creation
     * 
     */
    public Optional<Integer> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * the identifier of the user who created the model
     * 
     */
    @Import(name="createdBy")
    private @Nullable String createdBy;

    /**
     * @return the identifier of the user who created the model
     * 
     */
    public Optional<String> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The unique identifier of the model version
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return The unique identifier of the model version
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * the unique identifier of the metastore
     * 
     */
    @Import(name="metastoreId")
    private @Nullable String metastoreId;

    /**
     * @return the unique identifier of the metastore
     * 
     */
    public Optional<String> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }

    @Import(name="modelName")
    private @Nullable String modelName;

    public Optional<String> modelName() {
        return Optional.ofNullable(this.modelName);
    }

    /**
     * block describing model version dependencies, for feature-store packaged models. Consists of following attributes:
     * 
     */
    @Import(name="modelVersionDependencies")
    private @Nullable List<GetRegisteredModelVersionsModelVersionModelVersionDependency> modelVersionDependencies;

    /**
     * @return block describing model version dependencies, for feature-store packaged models. Consists of following attributes:
     * 
     */
    public Optional<List<GetRegisteredModelVersionsModelVersionModelVersionDependency>> modelVersionDependencies() {
        return Optional.ofNullable(this.modelVersionDependencies);
    }

    /**
     * MLflow run ID used when creating the model version, if `source` was generated by an experiment run stored in an MLflow tracking server
     * 
     */
    @Import(name="runId")
    private @Nullable String runId;

    /**
     * @return MLflow run ID used when creating the model version, if `source` was generated by an experiment run stored in an MLflow tracking server
     * 
     */
    public Optional<String> runId() {
        return Optional.ofNullable(this.runId);
    }

    /**
     * ID of the Databricks workspace containing the MLflow run that generated this model version, if applicable
     * 
     */
    @Import(name="runWorkspaceId")
    private @Nullable Integer runWorkspaceId;

    /**
     * @return ID of the Databricks workspace containing the MLflow run that generated this model version, if applicable
     * 
     */
    public Optional<Integer> runWorkspaceId() {
        return Optional.ofNullable(this.runWorkspaceId);
    }

    /**
     * The name of the schema where the registered model resides.
     * 
     */
    @Import(name="schemaName")
    private @Nullable String schemaName;

    /**
     * @return The name of the schema where the registered model resides.
     * 
     */
    public Optional<String> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    /**
     * URI indicating the location of the source artifacts (files) for the model version.
     * 
     */
    @Import(name="source")
    private @Nullable String source;

    /**
     * @return URI indicating the location of the source artifacts (files) for the model version.
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Current status of the model version.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return Current status of the model version.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The storage location under which model version data files are stored.
     * 
     */
    @Import(name="storageLocation")
    private @Nullable String storageLocation;

    /**
     * @return The storage location under which model version data files are stored.
     * 
     */
    public Optional<String> storageLocation() {
        return Optional.ofNullable(this.storageLocation);
    }

    /**
     * the timestamp of the last time changes were made to the model
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Integer updatedAt;

    /**
     * @return the timestamp of the last time changes were made to the model
     * 
     */
    public Optional<Integer> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * the identifier of the user who updated the model last time
     * 
     */
    @Import(name="updatedBy")
    private @Nullable String updatedBy;

    /**
     * @return the identifier of the user who updated the model last time
     * 
     */
    public Optional<String> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    /**
     * Integer model version number, used to reference the model version in API requests.
     * 
     */
    @Import(name="version")
    private @Nullable Integer version;

    /**
     * @return Integer model version number, used to reference the model version in API requests.
     * 
     */
    public Optional<Integer> version() {
        return Optional.ofNullable(this.version);
    }

    private GetRegisteredModelVersionsModelVersion() {}

    private GetRegisteredModelVersionsModelVersion(GetRegisteredModelVersionsModelVersion $) {
        this.aliases = $.aliases;
        this.browseOnly = $.browseOnly;
        this.catalogName = $.catalogName;
        this.comment = $.comment;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.id = $.id;
        this.metastoreId = $.metastoreId;
        this.modelName = $.modelName;
        this.modelVersionDependencies = $.modelVersionDependencies;
        this.runId = $.runId;
        this.runWorkspaceId = $.runWorkspaceId;
        this.schemaName = $.schemaName;
        this.source = $.source;
        this.status = $.status;
        this.storageLocation = $.storageLocation;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRegisteredModelVersionsModelVersion defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRegisteredModelVersionsModelVersion $;

        public Builder() {
            $ = new GetRegisteredModelVersionsModelVersion();
        }

        public Builder(GetRegisteredModelVersionsModelVersion defaults) {
            $ = new GetRegisteredModelVersionsModelVersion(Objects.requireNonNull(defaults));
        }

        /**
         * @param aliases the list of aliases associated with this model. Each item is object consisting of following attributes:
         * 
         * @return builder
         * 
         */
        public Builder aliases(@Nullable List<GetRegisteredModelVersionsModelVersionAlias> aliases) {
            $.aliases = aliases;
            return this;
        }

        /**
         * @param aliases the list of aliases associated with this model. Each item is object consisting of following attributes:
         * 
         * @return builder
         * 
         */
        public Builder aliases(GetRegisteredModelVersionsModelVersionAlias... aliases) {
            return aliases(List.of(aliases));
        }

        public Builder browseOnly(@Nullable Boolean browseOnly) {
            $.browseOnly = browseOnly;
            return this;
        }

        /**
         * @param catalogName The name of the catalog where the schema and the registered model reside.
         * 
         * @return builder
         * 
         */
        public Builder catalogName(@Nullable String catalogName) {
            $.catalogName = catalogName;
            return this;
        }

        /**
         * @param comment The comment attached to the registered model.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable String comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param createdAt the Unix timestamp at the model&#39;s creation
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Integer createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdBy the identifier of the user who created the model
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable String createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param id The unique identifier of the model version
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param metastoreId the unique identifier of the metastore
         * 
         * @return builder
         * 
         */
        public Builder metastoreId(@Nullable String metastoreId) {
            $.metastoreId = metastoreId;
            return this;
        }

        public Builder modelName(@Nullable String modelName) {
            $.modelName = modelName;
            return this;
        }

        /**
         * @param modelVersionDependencies block describing model version dependencies, for feature-store packaged models. Consists of following attributes:
         * 
         * @return builder
         * 
         */
        public Builder modelVersionDependencies(@Nullable List<GetRegisteredModelVersionsModelVersionModelVersionDependency> modelVersionDependencies) {
            $.modelVersionDependencies = modelVersionDependencies;
            return this;
        }

        /**
         * @param modelVersionDependencies block describing model version dependencies, for feature-store packaged models. Consists of following attributes:
         * 
         * @return builder
         * 
         */
        public Builder modelVersionDependencies(GetRegisteredModelVersionsModelVersionModelVersionDependency... modelVersionDependencies) {
            return modelVersionDependencies(List.of(modelVersionDependencies));
        }

        /**
         * @param runId MLflow run ID used when creating the model version, if `source` was generated by an experiment run stored in an MLflow tracking server
         * 
         * @return builder
         * 
         */
        public Builder runId(@Nullable String runId) {
            $.runId = runId;
            return this;
        }

        /**
         * @param runWorkspaceId ID of the Databricks workspace containing the MLflow run that generated this model version, if applicable
         * 
         * @return builder
         * 
         */
        public Builder runWorkspaceId(@Nullable Integer runWorkspaceId) {
            $.runWorkspaceId = runWorkspaceId;
            return this;
        }

        /**
         * @param schemaName The name of the schema where the registered model resides.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(@Nullable String schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        /**
         * @param source URI indicating the location of the source artifacts (files) for the model version.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable String source) {
            $.source = source;
            return this;
        }

        /**
         * @param status Current status of the model version.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param storageLocation The storage location under which model version data files are stored.
         * 
         * @return builder
         * 
         */
        public Builder storageLocation(@Nullable String storageLocation) {
            $.storageLocation = storageLocation;
            return this;
        }

        /**
         * @param updatedAt the timestamp of the last time changes were made to the model
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Integer updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedBy the identifier of the user who updated the model last time
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(@Nullable String updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        /**
         * @param version Integer model version number, used to reference the model version in API requests.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Integer version) {
            $.version = version;
            return this;
        }

        public GetRegisteredModelVersionsModelVersion build() {
            return $;
        }
    }

}
