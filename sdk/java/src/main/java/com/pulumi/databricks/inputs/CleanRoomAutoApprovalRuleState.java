// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CleanRoomAutoApprovalRuleState extends com.pulumi.resources.ResourceArgs {

    public static final CleanRoomAutoApprovalRuleState Empty = new CleanRoomAutoApprovalRuleState();

    /**
     * Collaborator alias of the author covered by the rule.
     * Only one of `author_collaborator_alias` and `author_scope` can be set
     * 
     */
    @Import(name="authorCollaboratorAlias")
    private @Nullable Output<String> authorCollaboratorAlias;

    /**
     * @return Collaborator alias of the author covered by the rule.
     * Only one of `author_collaborator_alias` and `author_scope` can be set
     * 
     */
    public Optional<Output<String>> authorCollaboratorAlias() {
        return Optional.ofNullable(this.authorCollaboratorAlias);
    }

    /**
     * Scope of authors covered by the rule.
     * Only one of `author_collaborator_alias` and `author_scope` can be set. Possible values are: `ANY_AUTHOR`
     * 
     */
    @Import(name="authorScope")
    private @Nullable Output<String> authorScope;

    /**
     * @return Scope of authors covered by the rule.
     * Only one of `author_collaborator_alias` and `author_scope` can be set. Possible values are: `ANY_AUTHOR`
     * 
     */
    public Optional<Output<String>> authorScope() {
        return Optional.ofNullable(this.authorScope);
    }

    /**
     * The name of the clean room this auto-approval rule belongs to
     * 
     */
    @Import(name="cleanRoomName")
    private @Nullable Output<String> cleanRoomName;

    /**
     * @return The name of the clean room this auto-approval rule belongs to
     * 
     */
    public Optional<Output<String>> cleanRoomName() {
        return Optional.ofNullable(this.cleanRoomName);
    }

    /**
     * (integer) - Timestamp of when the rule was created, in epoch milliseconds
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<Integer> createdAt;

    /**
     * @return (integer) - Timestamp of when the rule was created, in epoch milliseconds
     * 
     */
    public Optional<Output<Integer>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * (string) - A generated UUID identifying the rule
     * 
     */
    @Import(name="ruleId")
    private @Nullable Output<String> ruleId;

    /**
     * @return (string) - A generated UUID identifying the rule
     * 
     */
    public Optional<Output<String>> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }

    /**
     * (string) - The owner of the rule to whom the rule applies
     * 
     */
    @Import(name="ruleOwnerCollaboratorAlias")
    private @Nullable Output<String> ruleOwnerCollaboratorAlias;

    /**
     * @return (string) - The owner of the rule to whom the rule applies
     * 
     */
    public Optional<Output<String>> ruleOwnerCollaboratorAlias() {
        return Optional.ofNullable(this.ruleOwnerCollaboratorAlias);
    }

    /**
     * Collaborator alias of the runner covered by the rule
     * 
     */
    @Import(name="runnerCollaboratorAlias")
    private @Nullable Output<String> runnerCollaboratorAlias;

    /**
     * @return Collaborator alias of the runner covered by the rule
     * 
     */
    public Optional<Output<String>> runnerCollaboratorAlias() {
        return Optional.ofNullable(this.runnerCollaboratorAlias);
    }

    private CleanRoomAutoApprovalRuleState() {}

    private CleanRoomAutoApprovalRuleState(CleanRoomAutoApprovalRuleState $) {
        this.authorCollaboratorAlias = $.authorCollaboratorAlias;
        this.authorScope = $.authorScope;
        this.cleanRoomName = $.cleanRoomName;
        this.createdAt = $.createdAt;
        this.ruleId = $.ruleId;
        this.ruleOwnerCollaboratorAlias = $.ruleOwnerCollaboratorAlias;
        this.runnerCollaboratorAlias = $.runnerCollaboratorAlias;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CleanRoomAutoApprovalRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CleanRoomAutoApprovalRuleState $;

        public Builder() {
            $ = new CleanRoomAutoApprovalRuleState();
        }

        public Builder(CleanRoomAutoApprovalRuleState defaults) {
            $ = new CleanRoomAutoApprovalRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorCollaboratorAlias Collaborator alias of the author covered by the rule.
         * Only one of `author_collaborator_alias` and `author_scope` can be set
         * 
         * @return builder
         * 
         */
        public Builder authorCollaboratorAlias(@Nullable Output<String> authorCollaboratorAlias) {
            $.authorCollaboratorAlias = authorCollaboratorAlias;
            return this;
        }

        /**
         * @param authorCollaboratorAlias Collaborator alias of the author covered by the rule.
         * Only one of `author_collaborator_alias` and `author_scope` can be set
         * 
         * @return builder
         * 
         */
        public Builder authorCollaboratorAlias(String authorCollaboratorAlias) {
            return authorCollaboratorAlias(Output.of(authorCollaboratorAlias));
        }

        /**
         * @param authorScope Scope of authors covered by the rule.
         * Only one of `author_collaborator_alias` and `author_scope` can be set. Possible values are: `ANY_AUTHOR`
         * 
         * @return builder
         * 
         */
        public Builder authorScope(@Nullable Output<String> authorScope) {
            $.authorScope = authorScope;
            return this;
        }

        /**
         * @param authorScope Scope of authors covered by the rule.
         * Only one of `author_collaborator_alias` and `author_scope` can be set. Possible values are: `ANY_AUTHOR`
         * 
         * @return builder
         * 
         */
        public Builder authorScope(String authorScope) {
            return authorScope(Output.of(authorScope));
        }

        /**
         * @param cleanRoomName The name of the clean room this auto-approval rule belongs to
         * 
         * @return builder
         * 
         */
        public Builder cleanRoomName(@Nullable Output<String> cleanRoomName) {
            $.cleanRoomName = cleanRoomName;
            return this;
        }

        /**
         * @param cleanRoomName The name of the clean room this auto-approval rule belongs to
         * 
         * @return builder
         * 
         */
        public Builder cleanRoomName(String cleanRoomName) {
            return cleanRoomName(Output.of(cleanRoomName));
        }

        /**
         * @param createdAt (integer) - Timestamp of when the rule was created, in epoch milliseconds
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<Integer> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt (integer) - Timestamp of when the rule was created, in epoch milliseconds
         * 
         * @return builder
         * 
         */
        public Builder createdAt(Integer createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param ruleId (string) - A generated UUID identifying the rule
         * 
         * @return builder
         * 
         */
        public Builder ruleId(@Nullable Output<String> ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        /**
         * @param ruleId (string) - A generated UUID identifying the rule
         * 
         * @return builder
         * 
         */
        public Builder ruleId(String ruleId) {
            return ruleId(Output.of(ruleId));
        }

        /**
         * @param ruleOwnerCollaboratorAlias (string) - The owner of the rule to whom the rule applies
         * 
         * @return builder
         * 
         */
        public Builder ruleOwnerCollaboratorAlias(@Nullable Output<String> ruleOwnerCollaboratorAlias) {
            $.ruleOwnerCollaboratorAlias = ruleOwnerCollaboratorAlias;
            return this;
        }

        /**
         * @param ruleOwnerCollaboratorAlias (string) - The owner of the rule to whom the rule applies
         * 
         * @return builder
         * 
         */
        public Builder ruleOwnerCollaboratorAlias(String ruleOwnerCollaboratorAlias) {
            return ruleOwnerCollaboratorAlias(Output.of(ruleOwnerCollaboratorAlias));
        }

        /**
         * @param runnerCollaboratorAlias Collaborator alias of the runner covered by the rule
         * 
         * @return builder
         * 
         */
        public Builder runnerCollaboratorAlias(@Nullable Output<String> runnerCollaboratorAlias) {
            $.runnerCollaboratorAlias = runnerCollaboratorAlias;
            return this;
        }

        /**
         * @param runnerCollaboratorAlias Collaborator alias of the runner covered by the rule
         * 
         * @return builder
         * 
         */
        public Builder runnerCollaboratorAlias(String runnerCollaboratorAlias) {
            return runnerCollaboratorAlias(Output.of(runnerCollaboratorAlias));
        }

        public CleanRoomAutoApprovalRuleState build() {
            return $;
        }
    }

}
