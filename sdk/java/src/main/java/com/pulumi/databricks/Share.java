// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.ShareArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.ShareState;
import com.pulumi.databricks.outputs.ShareObject;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * &gt; This resource can only be used with a workspace-level provider!
 * 
 * In Delta Sharing, a share is a read-only collection of tables and table partitions that a provider wants to share with one or more recipients. If your recipient uses a Unity Catalog-enabled Databricks workspace, you can also include notebook files, views (including dynamic views that restrict access at the row and column level), Unity Catalog volumes, and Unity Catalog models in a share.
 * 
 * In a Unity Catalog-enabled Databricks workspace, a share is a securable object registered in Unity Catalog. A `databricks.Share` is contained within a databricks_metastore. If you remove a share from your Unity Catalog metastore, all recipients of that share lose the ability to access it.
 * 
 * ## Example Usage
 * 
 * &gt; In Pulumi configuration, it is recommended to define objects in alphabetical order of their `name` arguments, so that you get consistent and readable diff. Whenever objects are added or removed, or `name` is renamed, you&#39;ll observe a change in the majority of tasks. It&#39;s related to the fact that the current version of the provider treats `object` blocks as an ordered list. Alternatively, `object` block could have been an unordered set, though end-users would see the entire block replaced upon a change in single property of the task.
 * 
 * Creating a Delta Sharing share and add some existing tables to it
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Creating a Delta Sharing share and add a schema to it(including all current and future tables).
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.Share;
 * import com.pulumi.databricks.ShareArgs;
 * import com.pulumi.databricks.inputs.ShareObjectArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var schemaShare = new Share("schemaShare", ShareArgs.builder()
 *             .name("schema_share")
 *             .objects(ShareObjectArgs.builder()
 *                 .name("catalog_name.schema_name")
 *                 .dataObjectType("SCHEMA")
 *                 .historyDataSharingStatus("ENABLED")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Creating a Delta Sharing share and share a table with partitions spec and history
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.databricks.Share;
 * import com.pulumi.databricks.ShareArgs;
 * import com.pulumi.databricks.inputs.ShareObjectArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var some = new Share("some", ShareArgs.builder()
 *             .name("my_share")
 *             .objects(ShareObjectArgs.builder()
 *                 .name("my_catalog.my_schema.my_table")
 *                 .dataObjectType("TABLE")
 *                 .historyDataSharingStatus("ENABLED")
 *                 .partitions(                
 *                     ShareObjectPartitionArgs.builder()
 *                         .values(                        
 *                             ShareObjectPartitionValueArgs.builder()
 *                                 .name("year")
 *                                 .op("EQUAL")
 *                                 .value("2009")
 *                                 .build(),
 *                             ShareObjectPartitionValueArgs.builder()
 *                                 .name("month")
 *                                 .op("EQUAL")
 *                                 .value("12")
 *                                 .build())
 *                         .build(),
 *                     ShareObjectPartitionArgs.builder()
 *                         .values(ShareObjectPartitionValueArgs.builder()
 *                             .name("year")
 *                             .op("EQUAL")
 *                             .value("2010")
 *                             .build())
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Related Resources
 * 
 * The following resources are often used in the same context:
 * 
 * * databricks.Recipient to create Delta Sharing recipients.
 * * databricks.Grants to manage Delta Sharing permissions.
 * * databricks.getShares to read existing Delta Sharing shares.
 * 
 */
@ResourceType(type="databricks:index/share:Share")
public class Share extends com.pulumi.resources.CustomResource {
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * Time when the share was created.
     * 
     */
    @Export(name="createdAt", refs={Integer.class}, tree="[0]")
    private Output<Integer> createdAt;

    /**
     * @return Time when the share was created.
     * 
     */
    public Output<Integer> createdAt() {
        return this.createdAt;
    }
    /**
     * The principal that created the share.
     * 
     */
    @Export(name="createdBy", refs={String.class}, tree="[0]")
    private Output<String> createdBy;

    /**
     * @return The principal that created the share.
     * 
     */
    public Output<String> createdBy() {
        return this.createdBy;
    }
    /**
     * Name of share. Change forces creation of a new resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of share. Change forces creation of a new resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="objects", refs={List.class,ShareObject.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ShareObject>> objects;

    public Output<Optional<List<ShareObject>>> objects() {
        return Codegen.optional(this.objects);
    }
    /**
     * User name/group name/sp application_id of the share owner.
     * 
     */
    @Export(name="owner", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> owner;

    /**
     * @return User name/group name/sp application_id of the share owner.
     * 
     */
    public Output<Optional<String>> owner() {
        return Codegen.optional(this.owner);
    }
    @Export(name="storageLocation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> storageLocation;

    public Output<Optional<String>> storageLocation() {
        return Codegen.optional(this.storageLocation);
    }
    @Export(name="storageRoot", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> storageRoot;

    public Output<Optional<String>> storageRoot() {
        return Codegen.optional(this.storageRoot);
    }
    @Export(name="updatedAt", refs={Integer.class}, tree="[0]")
    private Output<Integer> updatedAt;

    public Output<Integer> updatedAt() {
        return this.updatedAt;
    }
    @Export(name="updatedBy", refs={String.class}, tree="[0]")
    private Output<String> updatedBy;

    public Output<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Share(java.lang.String name) {
        this(name, ShareArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Share(java.lang.String name, @Nullable ShareArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Share(java.lang.String name, @Nullable ShareArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/share:Share", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Share(java.lang.String name, Output<java.lang.String> id, @Nullable ShareState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/share:Share", name, state, makeResourceOptions(options, id), false);
    }

    private static ShareArgs makeArgs(@Nullable ShareArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ShareArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Share get(java.lang.String name, Output<java.lang.String> id, @Nullable ShareState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Share(name, id, state, options);
    }
}
