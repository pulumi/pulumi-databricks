// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.databricks.ShareArgs;
import com.pulumi.databricks.Utilities;
import com.pulumi.databricks.inputs.ShareState;
import com.pulumi.databricks.outputs.ShareObject;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * In Delta Sharing, a share is a read-only collection of tables and table partitions that a provider wants to share with one or more recipients. If your recipient uses a Unity Catalog-enabled Databricks workspace, you can also include notebook files, views (including dynamic views that restrict access at the row and column level), Unity Catalog volumes, and Unity Catalog models in a share.
 * 
 * &gt; This resource can only be used with a workspace-level provider!
 * 
 * In a Unity Catalog-enabled Databricks workspace, a share is a securable object registered in Unity Catalog. A `databricks.Share` is contained within a databricks_metastore. If you remove a share from your Unity Catalog metastore, all recipients of that share lose the ability to access it.
 * 
 * ## Import
 * 
 * The share resource can be imported using the name of the share.
 * 
 * hcl
 * 
 * import {
 * 
 *   to = databricks_share.this
 * 
 *   id = &#34;&lt;share_name&gt;&#34;
 * 
 * }
 * 
 * Alternatively, when using `terraform` version 1.4 or earlier, import using the `pulumi import` command:
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import databricks:index/share:Share this &lt;share_name&gt;
 * ```
 * 
 */
@ResourceType(type="databricks:index/share:Share")
public class Share extends com.pulumi.resources.CustomResource {
    /**
     * User-supplied free-form text.
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return User-supplied free-form text.
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    /**
     * Time when the share was created.
     * 
     */
    @Export(name="createdAt", refs={Integer.class}, tree="[0]")
    private Output<Integer> createdAt;

    /**
     * @return Time when the share was created.
     * 
     */
    public Output<Integer> createdAt() {
        return this.createdAt;
    }
    /**
     * The principal that created the share.
     * 
     */
    @Export(name="createdBy", refs={String.class}, tree="[0]")
    private Output<String> createdBy;

    /**
     * @return The principal that created the share.
     * 
     */
    public Output<String> createdBy() {
        return this.createdBy;
    }
    /**
     * Name of share. Change forces creation of a new resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of share. Change forces creation of a new resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="objects", refs={List.class,ShareObject.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ShareObject>> objects;

    public Output<Optional<List<ShareObject>>> objects() {
        return Codegen.optional(this.objects);
    }
    /**
     * User name/group name/sp application_id of the share owner.
     * 
     */
    @Export(name="owner", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> owner;

    /**
     * @return User name/group name/sp application_id of the share owner.
     * 
     */
    public Output<Optional<String>> owner() {
        return Codegen.optional(this.owner);
    }
    @Export(name="storageLocation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> storageLocation;

    public Output<Optional<String>> storageLocation() {
        return Codegen.optional(this.storageLocation);
    }
    @Export(name="storageRoot", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> storageRoot;

    public Output<Optional<String>> storageRoot() {
        return Codegen.optional(this.storageRoot);
    }
    @Export(name="updatedAt", refs={Integer.class}, tree="[0]")
    private Output<Integer> updatedAt;

    public Output<Integer> updatedAt() {
        return this.updatedAt;
    }
    @Export(name="updatedBy", refs={String.class}, tree="[0]")
    private Output<String> updatedBy;

    public Output<String> updatedBy() {
        return this.updatedBy;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Share(java.lang.String name) {
        this(name, ShareArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Share(java.lang.String name, @Nullable ShareArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Share(java.lang.String name, @Nullable ShareArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/share:Share", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Share(java.lang.String name, Output<java.lang.String> id, @Nullable ShareState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("databricks:index/share:Share", name, state, makeResourceOptions(options, id), false);
    }

    private static ShareArgs makeArgs(@Nullable ShareArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ShareArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Share get(java.lang.String name, Output<java.lang.String> id, @Nullable ShareState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Share(name, id, state, options);
    }
}
