// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetCleanRoomsCleanRoomRemoteDetailedInfoCollaborator;
import com.pulumi.databricks.inputs.GetCleanRoomsCleanRoomRemoteDetailedInfoComplianceSecurityProfile;
import com.pulumi.databricks.inputs.GetCleanRoomsCleanRoomRemoteDetailedInfoCreator;
import com.pulumi.databricks.inputs.GetCleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicy;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCleanRoomsCleanRoomRemoteDetailedInfo extends com.pulumi.resources.InvokeArgs {

    public static final GetCleanRoomsCleanRoomRemoteDetailedInfo Empty = new GetCleanRoomsCleanRoomRemoteDetailedInfo();

    /**
     * (string) - Central clean room ID
     * 
     */
    @Import(name="centralCleanRoomId", required=true)
    private String centralCleanRoomId;

    /**
     * @return (string) - Central clean room ID
     * 
     */
    public String centralCleanRoomId() {
        return this.centralCleanRoomId;
    }

    /**
     * (string) - Cloud vendor (aws,azure,gcp) of the central clean room
     * 
     */
    @Import(name="cloudVendor")
    private @Nullable String cloudVendor;

    /**
     * @return (string) - Cloud vendor (aws,azure,gcp) of the central clean room
     * 
     */
    public Optional<String> cloudVendor() {
        return Optional.ofNullable(this.cloudVendor);
    }

    /**
     * (list of CleanRoomCollaborator) - Collaborators in the central clean room. There should one and only one collaborator
     * in the list that satisfies the owner condition:
     * 
     */
    @Import(name="collaborators")
    private @Nullable List<GetCleanRoomsCleanRoomRemoteDetailedInfoCollaborator> collaborators;

    /**
     * @return (list of CleanRoomCollaborator) - Collaborators in the central clean room. There should one and only one collaborator
     * in the list that satisfies the owner condition:
     * 
     */
    public Optional<List<GetCleanRoomsCleanRoomRemoteDetailedInfoCollaborator>> collaborators() {
        return Optional.ofNullable(this.collaborators);
    }

    /**
     * (ComplianceSecurityProfile)
     * 
     */
    @Import(name="complianceSecurityProfile", required=true)
    private GetCleanRoomsCleanRoomRemoteDetailedInfoComplianceSecurityProfile complianceSecurityProfile;

    /**
     * @return (ComplianceSecurityProfile)
     * 
     */
    public GetCleanRoomsCleanRoomRemoteDetailedInfoComplianceSecurityProfile complianceSecurityProfile() {
        return this.complianceSecurityProfile;
    }

    /**
     * (CleanRoomCollaborator) - Collaborator who creates the clean room
     * 
     */
    @Import(name="creator", required=true)
    private GetCleanRoomsCleanRoomRemoteDetailedInfoCreator creator;

    /**
     * @return (CleanRoomCollaborator) - Collaborator who creates the clean room
     * 
     */
    public GetCleanRoomsCleanRoomRemoteDetailedInfoCreator creator() {
        return this.creator;
    }

    /**
     * (EgressNetworkPolicy) - Egress network policy to apply to the central clean room workspace
     * 
     */
    @Import(name="egressNetworkPolicy")
    private @Nullable GetCleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicy egressNetworkPolicy;

    /**
     * @return (EgressNetworkPolicy) - Egress network policy to apply to the central clean room workspace
     * 
     */
    public Optional<GetCleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicy> egressNetworkPolicy() {
        return Optional.ofNullable(this.egressNetworkPolicy);
    }

    /**
     * (string)
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return (string)
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    private GetCleanRoomsCleanRoomRemoteDetailedInfo() {}

    private GetCleanRoomsCleanRoomRemoteDetailedInfo(GetCleanRoomsCleanRoomRemoteDetailedInfo $) {
        this.centralCleanRoomId = $.centralCleanRoomId;
        this.cloudVendor = $.cloudVendor;
        this.collaborators = $.collaborators;
        this.complianceSecurityProfile = $.complianceSecurityProfile;
        this.creator = $.creator;
        this.egressNetworkPolicy = $.egressNetworkPolicy;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCleanRoomsCleanRoomRemoteDetailedInfo defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCleanRoomsCleanRoomRemoteDetailedInfo $;

        public Builder() {
            $ = new GetCleanRoomsCleanRoomRemoteDetailedInfo();
        }

        public Builder(GetCleanRoomsCleanRoomRemoteDetailedInfo defaults) {
            $ = new GetCleanRoomsCleanRoomRemoteDetailedInfo(Objects.requireNonNull(defaults));
        }

        /**
         * @param centralCleanRoomId (string) - Central clean room ID
         * 
         * @return builder
         * 
         */
        public Builder centralCleanRoomId(String centralCleanRoomId) {
            $.centralCleanRoomId = centralCleanRoomId;
            return this;
        }

        /**
         * @param cloudVendor (string) - Cloud vendor (aws,azure,gcp) of the central clean room
         * 
         * @return builder
         * 
         */
        public Builder cloudVendor(@Nullable String cloudVendor) {
            $.cloudVendor = cloudVendor;
            return this;
        }

        /**
         * @param collaborators (list of CleanRoomCollaborator) - Collaborators in the central clean room. There should one and only one collaborator
         * in the list that satisfies the owner condition:
         * 
         * @return builder
         * 
         */
        public Builder collaborators(@Nullable List<GetCleanRoomsCleanRoomRemoteDetailedInfoCollaborator> collaborators) {
            $.collaborators = collaborators;
            return this;
        }

        /**
         * @param collaborators (list of CleanRoomCollaborator) - Collaborators in the central clean room. There should one and only one collaborator
         * in the list that satisfies the owner condition:
         * 
         * @return builder
         * 
         */
        public Builder collaborators(GetCleanRoomsCleanRoomRemoteDetailedInfoCollaborator... collaborators) {
            return collaborators(List.of(collaborators));
        }

        /**
         * @param complianceSecurityProfile (ComplianceSecurityProfile)
         * 
         * @return builder
         * 
         */
        public Builder complianceSecurityProfile(GetCleanRoomsCleanRoomRemoteDetailedInfoComplianceSecurityProfile complianceSecurityProfile) {
            $.complianceSecurityProfile = complianceSecurityProfile;
            return this;
        }

        /**
         * @param creator (CleanRoomCollaborator) - Collaborator who creates the clean room
         * 
         * @return builder
         * 
         */
        public Builder creator(GetCleanRoomsCleanRoomRemoteDetailedInfoCreator creator) {
            $.creator = creator;
            return this;
        }

        /**
         * @param egressNetworkPolicy (EgressNetworkPolicy) - Egress network policy to apply to the central clean room workspace
         * 
         * @return builder
         * 
         */
        public Builder egressNetworkPolicy(@Nullable GetCleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicy egressNetworkPolicy) {
            $.egressNetworkPolicy = egressNetworkPolicy;
            return this;
        }

        /**
         * @param region (string)
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        public GetCleanRoomsCleanRoomRemoteDetailedInfo build() {
            if ($.centralCleanRoomId == null) {
                throw new MissingRequiredPropertyException("GetCleanRoomsCleanRoomRemoteDetailedInfo", "centralCleanRoomId");
            }
            if ($.complianceSecurityProfile == null) {
                throw new MissingRequiredPropertyException("GetCleanRoomsCleanRoomRemoteDetailedInfo", "complianceSecurityProfile");
            }
            if ($.creator == null) {
                throw new MissingRequiredPropertyException("GetCleanRoomsCleanRoomRemoteDetailedInfo", "creator");
            }
            return $;
        }
    }

}
