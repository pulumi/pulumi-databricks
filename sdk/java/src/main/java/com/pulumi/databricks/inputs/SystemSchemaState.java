// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SystemSchemaState extends com.pulumi.resources.ResourceArgs {

    public static final SystemSchemaState Empty = new SystemSchemaState();

    /**
     * the full name of the system schema, in form of `system.&lt;schema&gt;`.
     * 
     */
    @Import(name="fullName")
    private @Nullable Output<String> fullName;

    /**
     * @return the full name of the system schema, in form of `system.&lt;schema&gt;`.
     * 
     */
    public Optional<Output<String>> fullName() {
        return Optional.ofNullable(this.fullName);
    }

    @Import(name="metastoreId")
    private @Nullable Output<String> metastoreId;

    public Optional<Output<String>> metastoreId() {
        return Optional.ofNullable(this.metastoreId);
    }

    /**
     * name of the system schema.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return name of the system schema.
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * The current state of enablement for the system schema.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of enablement for the system schema.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private SystemSchemaState() {}

    private SystemSchemaState(SystemSchemaState $) {
        this.fullName = $.fullName;
        this.metastoreId = $.metastoreId;
        this.schema = $.schema;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SystemSchemaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SystemSchemaState $;

        public Builder() {
            $ = new SystemSchemaState();
        }

        public Builder(SystemSchemaState defaults) {
            $ = new SystemSchemaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param fullName the full name of the system schema, in form of `system.&lt;schema&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder fullName(@Nullable Output<String> fullName) {
            $.fullName = fullName;
            return this;
        }

        /**
         * @param fullName the full name of the system schema, in form of `system.&lt;schema&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder fullName(String fullName) {
            return fullName(Output.of(fullName));
        }

        public Builder metastoreId(@Nullable Output<String> metastoreId) {
            $.metastoreId = metastoreId;
            return this;
        }

        public Builder metastoreId(String metastoreId) {
            return metastoreId(Output.of(metastoreId));
        }

        /**
         * @param schema name of the system schema.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema name of the system schema.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param state The current state of enablement for the system schema.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of enablement for the system schema.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public SystemSchemaState build() {
            return $;
        }
    }

}
