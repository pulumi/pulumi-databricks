// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.SqlQueryParameterDateArgs;
import com.pulumi.databricks.inputs.SqlQueryParameterDateRangeArgs;
import com.pulumi.databricks.inputs.SqlQueryParameterDatetimeArgs;
import com.pulumi.databricks.inputs.SqlQueryParameterDatetimeRangeArgs;
import com.pulumi.databricks.inputs.SqlQueryParameterDatetimesecArgs;
import com.pulumi.databricks.inputs.SqlQueryParameterDatetimesecRangeArgs;
import com.pulumi.databricks.inputs.SqlQueryParameterEnumArgs;
import com.pulumi.databricks.inputs.SqlQueryParameterNumberArgs;
import com.pulumi.databricks.inputs.SqlQueryParameterQueryArgs;
import com.pulumi.databricks.inputs.SqlQueryParameterTextArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SqlQueryParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlQueryParameterArgs Empty = new SqlQueryParameterArgs();

    @Import(name="date")
    private @Nullable Output<SqlQueryParameterDateArgs> date;

    public Optional<Output<SqlQueryParameterDateArgs>> date() {
        return Optional.ofNullable(this.date);
    }

    @Import(name="dateRange")
    private @Nullable Output<SqlQueryParameterDateRangeArgs> dateRange;

    public Optional<Output<SqlQueryParameterDateRangeArgs>> dateRange() {
        return Optional.ofNullable(this.dateRange);
    }

    @Import(name="datetime")
    private @Nullable Output<SqlQueryParameterDatetimeArgs> datetime;

    public Optional<Output<SqlQueryParameterDatetimeArgs>> datetime() {
        return Optional.ofNullable(this.datetime);
    }

    @Import(name="datetimeRange")
    private @Nullable Output<SqlQueryParameterDatetimeRangeArgs> datetimeRange;

    public Optional<Output<SqlQueryParameterDatetimeRangeArgs>> datetimeRange() {
        return Optional.ofNullable(this.datetimeRange);
    }

    @Import(name="datetimesec")
    private @Nullable Output<SqlQueryParameterDatetimesecArgs> datetimesec;

    public Optional<Output<SqlQueryParameterDatetimesecArgs>> datetimesec() {
        return Optional.ofNullable(this.datetimesec);
    }

    @Import(name="datetimesecRange")
    private @Nullable Output<SqlQueryParameterDatetimesecRangeArgs> datetimesecRange;

    public Optional<Output<SqlQueryParameterDatetimesecRangeArgs>> datetimesecRange() {
        return Optional.ofNullable(this.datetimesecRange);
    }

    @Import(name="enum")
    private @Nullable Output<SqlQueryParameterEnumArgs> enum_;

    public Optional<Output<SqlQueryParameterEnumArgs>> enum_() {
        return Optional.ofNullable(this.enum_);
    }

    /**
     * The literal parameter marker that appears between double curly braces in the query text.
     * Parameters can have several different types. Type is specified using one of the following configuration blocks: `text`, `number`, `enum`, `query`, `date`, `datetime`, `datetimesec`, `date_range`, `datetime_range`, `datetimesec_range`.
     * 
     * For `text`, `number`, `date`, `datetime`, `datetimesec` block
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The literal parameter marker that appears between double curly braces in the query text.
     * Parameters can have several different types. Type is specified using one of the following configuration blocks: `text`, `number`, `enum`, `query`, `date`, `datetime`, `datetimesec`, `date_range`, `datetime_range`, `datetimesec_range`.
     * 
     * For `text`, `number`, `date`, `datetime`, `datetimesec` block
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="number")
    private @Nullable Output<SqlQueryParameterNumberArgs> number;

    public Optional<Output<SqlQueryParameterNumberArgs>> number() {
        return Optional.ofNullable(this.number);
    }

    /**
     * The text of the query to be run.
     * 
     */
    @Import(name="query")
    private @Nullable Output<SqlQueryParameterQueryArgs> query;

    /**
     * @return The text of the query to be run.
     * 
     */
    public Optional<Output<SqlQueryParameterQueryArgs>> query() {
        return Optional.ofNullable(this.query);
    }

    @Import(name="text")
    private @Nullable Output<SqlQueryParameterTextArgs> text;

    public Optional<Output<SqlQueryParameterTextArgs>> text() {
        return Optional.ofNullable(this.text);
    }

    /**
     * The text displayed in a parameter picking widget.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The text displayed in a parameter picking widget.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private SqlQueryParameterArgs() {}

    private SqlQueryParameterArgs(SqlQueryParameterArgs $) {
        this.date = $.date;
        this.dateRange = $.dateRange;
        this.datetime = $.datetime;
        this.datetimeRange = $.datetimeRange;
        this.datetimesec = $.datetimesec;
        this.datetimesecRange = $.datetimesecRange;
        this.enum_ = $.enum_;
        this.name = $.name;
        this.number = $.number;
        this.query = $.query;
        this.text = $.text;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlQueryParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlQueryParameterArgs $;

        public Builder() {
            $ = new SqlQueryParameterArgs();
        }

        public Builder(SqlQueryParameterArgs defaults) {
            $ = new SqlQueryParameterArgs(Objects.requireNonNull(defaults));
        }

        public Builder date(@Nullable Output<SqlQueryParameterDateArgs> date) {
            $.date = date;
            return this;
        }

        public Builder date(SqlQueryParameterDateArgs date) {
            return date(Output.of(date));
        }

        public Builder dateRange(@Nullable Output<SqlQueryParameterDateRangeArgs> dateRange) {
            $.dateRange = dateRange;
            return this;
        }

        public Builder dateRange(SqlQueryParameterDateRangeArgs dateRange) {
            return dateRange(Output.of(dateRange));
        }

        public Builder datetime(@Nullable Output<SqlQueryParameterDatetimeArgs> datetime) {
            $.datetime = datetime;
            return this;
        }

        public Builder datetime(SqlQueryParameterDatetimeArgs datetime) {
            return datetime(Output.of(datetime));
        }

        public Builder datetimeRange(@Nullable Output<SqlQueryParameterDatetimeRangeArgs> datetimeRange) {
            $.datetimeRange = datetimeRange;
            return this;
        }

        public Builder datetimeRange(SqlQueryParameterDatetimeRangeArgs datetimeRange) {
            return datetimeRange(Output.of(datetimeRange));
        }

        public Builder datetimesec(@Nullable Output<SqlQueryParameterDatetimesecArgs> datetimesec) {
            $.datetimesec = datetimesec;
            return this;
        }

        public Builder datetimesec(SqlQueryParameterDatetimesecArgs datetimesec) {
            return datetimesec(Output.of(datetimesec));
        }

        public Builder datetimesecRange(@Nullable Output<SqlQueryParameterDatetimesecRangeArgs> datetimesecRange) {
            $.datetimesecRange = datetimesecRange;
            return this;
        }

        public Builder datetimesecRange(SqlQueryParameterDatetimesecRangeArgs datetimesecRange) {
            return datetimesecRange(Output.of(datetimesecRange));
        }

        public Builder enum_(@Nullable Output<SqlQueryParameterEnumArgs> enum_) {
            $.enum_ = enum_;
            return this;
        }

        public Builder enum_(SqlQueryParameterEnumArgs enum_) {
            return enum_(Output.of(enum_));
        }

        /**
         * @param name The literal parameter marker that appears between double curly braces in the query text.
         * Parameters can have several different types. Type is specified using one of the following configuration blocks: `text`, `number`, `enum`, `query`, `date`, `datetime`, `datetimesec`, `date_range`, `datetime_range`, `datetimesec_range`.
         * 
         * For `text`, `number`, `date`, `datetime`, `datetimesec` block
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The literal parameter marker that appears between double curly braces in the query text.
         * Parameters can have several different types. Type is specified using one of the following configuration blocks: `text`, `number`, `enum`, `query`, `date`, `datetime`, `datetimesec`, `date_range`, `datetime_range`, `datetimesec_range`.
         * 
         * For `text`, `number`, `date`, `datetime`, `datetimesec` block
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder number(@Nullable Output<SqlQueryParameterNumberArgs> number) {
            $.number = number;
            return this;
        }

        public Builder number(SqlQueryParameterNumberArgs number) {
            return number(Output.of(number));
        }

        /**
         * @param query The text of the query to be run.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<SqlQueryParameterQueryArgs> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The text of the query to be run.
         * 
         * @return builder
         * 
         */
        public Builder query(SqlQueryParameterQueryArgs query) {
            return query(Output.of(query));
        }

        public Builder text(@Nullable Output<SqlQueryParameterTextArgs> text) {
            $.text = text;
            return this;
        }

        public Builder text(SqlQueryParameterTextArgs text) {
            return text(Output.of(text));
        }

        /**
         * @param title The text displayed in a parameter picking widget.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The text displayed in a parameter picking widget.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public SqlQueryParameterArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SqlQueryParameterArgs", "name");
            }
            return $;
        }
    }

}
