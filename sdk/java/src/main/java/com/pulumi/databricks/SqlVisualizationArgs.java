// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SqlVisualizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlVisualizationArgs Empty = new SqlVisualizationArgs();

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="options", required=true)
    private Output<String> options;

    public Output<String> options() {
        return this.options;
    }

    @Import(name="queryId", required=true)
    private Output<String> queryId;

    public Output<String> queryId() {
        return this.queryId;
    }

    @Import(name="queryPlan")
    private @Nullable Output<String> queryPlan;

    public Optional<Output<String>> queryPlan() {
        return Optional.ofNullable(this.queryPlan);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    @Import(name="visualizationId")
    private @Nullable Output<String> visualizationId;

    public Optional<Output<String>> visualizationId() {
        return Optional.ofNullable(this.visualizationId);
    }

    private SqlVisualizationArgs() {}

    private SqlVisualizationArgs(SqlVisualizationArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.options = $.options;
        this.queryId = $.queryId;
        this.queryPlan = $.queryPlan;
        this.type = $.type;
        this.visualizationId = $.visualizationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlVisualizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlVisualizationArgs $;

        public Builder() {
            $ = new SqlVisualizationArgs();
        }

        public Builder(SqlVisualizationArgs defaults) {
            $ = new SqlVisualizationArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder options(Output<String> options) {
            $.options = options;
            return this;
        }

        public Builder options(String options) {
            return options(Output.of(options));
        }

        public Builder queryId(Output<String> queryId) {
            $.queryId = queryId;
            return this;
        }

        public Builder queryId(String queryId) {
            return queryId(Output.of(queryId));
        }

        public Builder queryPlan(@Nullable Output<String> queryPlan) {
            $.queryPlan = queryPlan;
            return this;
        }

        public Builder queryPlan(String queryPlan) {
            return queryPlan(Output.of(queryPlan));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder visualizationId(@Nullable Output<String> visualizationId) {
            $.visualizationId = visualizationId;
            return this;
        }

        public Builder visualizationId(String visualizationId) {
            return visualizationId(Output.of(visualizationId));
        }

        public SqlVisualizationArgs build() {
            if ($.options == null) {
                throw new MissingRequiredPropertyException("SqlVisualizationArgs", "options");
            }
            if ($.queryId == null) {
                throw new MissingRequiredPropertyException("SqlVisualizationArgs", "queryId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("SqlVisualizationArgs", "type");
            }
            return $;
        }
    }

}
