// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessAllowedInternetDestinationArgs;
import com.pulumi.databricks.inputs.CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessAllowedStorageDestinationArgs;
import com.pulumi.databricks.inputs.CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessLogOnlyModeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessArgs extends com.pulumi.resources.ResourceArgs {

    public static final CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessArgs Empty = new CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessArgs();

    @Import(name="allowedInternetDestinations")
    private @Nullable Output<List<CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessAllowedInternetDestinationArgs>> allowedInternetDestinations;

    public Optional<Output<List<CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessAllowedInternetDestinationArgs>>> allowedInternetDestinations() {
        return Optional.ofNullable(this.allowedInternetDestinations);
    }

    @Import(name="allowedStorageDestinations")
    private @Nullable Output<List<CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessAllowedStorageDestinationArgs>> allowedStorageDestinations;

    public Optional<Output<List<CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessAllowedStorageDestinationArgs>>> allowedStorageDestinations() {
        return Optional.ofNullable(this.allowedStorageDestinations);
    }

    /**
     * Optional. If not specified, assume the policy is enforced for all workloads
     * 
     */
    @Import(name="logOnlyMode")
    private @Nullable Output<CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessLogOnlyModeArgs> logOnlyMode;

    /**
     * @return Optional. If not specified, assume the policy is enforced for all workloads
     * 
     */
    public Optional<Output<CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessLogOnlyModeArgs>> logOnlyMode() {
        return Optional.ofNullable(this.logOnlyMode);
    }

    /**
     * . Possible values are: `FULL_ACCESS`, `PRIVATE_ACCESS_ONLY`, `RESTRICTED_ACCESS`
     * 
     */
    @Import(name="restrictionMode")
    private @Nullable Output<String> restrictionMode;

    /**
     * @return . Possible values are: `FULL_ACCESS`, `PRIVATE_ACCESS_ONLY`, `RESTRICTED_ACCESS`
     * 
     */
    public Optional<Output<String>> restrictionMode() {
        return Optional.ofNullable(this.restrictionMode);
    }

    private CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessArgs() {}

    private CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessArgs(CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessArgs $) {
        this.allowedInternetDestinations = $.allowedInternetDestinations;
        this.allowedStorageDestinations = $.allowedStorageDestinations;
        this.logOnlyMode = $.logOnlyMode;
        this.restrictionMode = $.restrictionMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessArgs $;

        public Builder() {
            $ = new CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessArgs();
        }

        public Builder(CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessArgs defaults) {
            $ = new CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowedInternetDestinations(@Nullable Output<List<CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessAllowedInternetDestinationArgs>> allowedInternetDestinations) {
            $.allowedInternetDestinations = allowedInternetDestinations;
            return this;
        }

        public Builder allowedInternetDestinations(List<CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessAllowedInternetDestinationArgs> allowedInternetDestinations) {
            return allowedInternetDestinations(Output.of(allowedInternetDestinations));
        }

        public Builder allowedInternetDestinations(CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessAllowedInternetDestinationArgs... allowedInternetDestinations) {
            return allowedInternetDestinations(List.of(allowedInternetDestinations));
        }

        public Builder allowedStorageDestinations(@Nullable Output<List<CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessAllowedStorageDestinationArgs>> allowedStorageDestinations) {
            $.allowedStorageDestinations = allowedStorageDestinations;
            return this;
        }

        public Builder allowedStorageDestinations(List<CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessAllowedStorageDestinationArgs> allowedStorageDestinations) {
            return allowedStorageDestinations(Output.of(allowedStorageDestinations));
        }

        public Builder allowedStorageDestinations(CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessAllowedStorageDestinationArgs... allowedStorageDestinations) {
            return allowedStorageDestinations(List.of(allowedStorageDestinations));
        }

        /**
         * @param logOnlyMode Optional. If not specified, assume the policy is enforced for all workloads
         * 
         * @return builder
         * 
         */
        public Builder logOnlyMode(@Nullable Output<CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessLogOnlyModeArgs> logOnlyMode) {
            $.logOnlyMode = logOnlyMode;
            return this;
        }

        /**
         * @param logOnlyMode Optional. If not specified, assume the policy is enforced for all workloads
         * 
         * @return builder
         * 
         */
        public Builder logOnlyMode(CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessLogOnlyModeArgs logOnlyMode) {
            return logOnlyMode(Output.of(logOnlyMode));
        }

        /**
         * @param restrictionMode . Possible values are: `FULL_ACCESS`, `PRIVATE_ACCESS_ONLY`, `RESTRICTED_ACCESS`
         * 
         * @return builder
         * 
         */
        public Builder restrictionMode(@Nullable Output<String> restrictionMode) {
            $.restrictionMode = restrictionMode;
            return this;
        }

        /**
         * @param restrictionMode . Possible values are: `FULL_ACCESS`, `PRIVATE_ACCESS_ONLY`, `RESTRICTED_ACCESS`
         * 
         * @return builder
         * 
         */
        public Builder restrictionMode(String restrictionMode) {
            return restrictionMode(Output.of(restrictionMode));
        }

        public CleanRoomsCleanRoomRemoteDetailedInfoEgressNetworkPolicyInternetAccessArgs build() {
            return $;
        }
    }

}
