// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class AibiDashboardEmbeddingApprovedDomainsSettingAibiDashboardEmbeddingApprovedDomainsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AibiDashboardEmbeddingApprovedDomainsSettingAibiDashboardEmbeddingApprovedDomainsArgs Empty = new AibiDashboardEmbeddingApprovedDomainsSettingAibiDashboardEmbeddingApprovedDomainsArgs();

    /**
     * the list of approved domains. To allow all subdomains for a given domain, use a wildcard symbol (`*`) before the domain name, i.e., `*.databricks.com` will allow to embed into any site under the `databricks.com`.
     * 
     */
    @Import(name="approvedDomains", required=true)
    private Output<List<String>> approvedDomains;

    /**
     * @return the list of approved domains. To allow all subdomains for a given domain, use a wildcard symbol (`*`) before the domain name, i.e., `*.databricks.com` will allow to embed into any site under the `databricks.com`.
     * 
     */
    public Output<List<String>> approvedDomains() {
        return this.approvedDomains;
    }

    private AibiDashboardEmbeddingApprovedDomainsSettingAibiDashboardEmbeddingApprovedDomainsArgs() {}

    private AibiDashboardEmbeddingApprovedDomainsSettingAibiDashboardEmbeddingApprovedDomainsArgs(AibiDashboardEmbeddingApprovedDomainsSettingAibiDashboardEmbeddingApprovedDomainsArgs $) {
        this.approvedDomains = $.approvedDomains;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AibiDashboardEmbeddingApprovedDomainsSettingAibiDashboardEmbeddingApprovedDomainsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AibiDashboardEmbeddingApprovedDomainsSettingAibiDashboardEmbeddingApprovedDomainsArgs $;

        public Builder() {
            $ = new AibiDashboardEmbeddingApprovedDomainsSettingAibiDashboardEmbeddingApprovedDomainsArgs();
        }

        public Builder(AibiDashboardEmbeddingApprovedDomainsSettingAibiDashboardEmbeddingApprovedDomainsArgs defaults) {
            $ = new AibiDashboardEmbeddingApprovedDomainsSettingAibiDashboardEmbeddingApprovedDomainsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param approvedDomains the list of approved domains. To allow all subdomains for a given domain, use a wildcard symbol (`*`) before the domain name, i.e., `*.databricks.com` will allow to embed into any site under the `databricks.com`.
         * 
         * @return builder
         * 
         */
        public Builder approvedDomains(Output<List<String>> approvedDomains) {
            $.approvedDomains = approvedDomains;
            return this;
        }

        /**
         * @param approvedDomains the list of approved domains. To allow all subdomains for a given domain, use a wildcard symbol (`*`) before the domain name, i.e., `*.databricks.com` will allow to embed into any site under the `databricks.com`.
         * 
         * @return builder
         * 
         */
        public Builder approvedDomains(List<String> approvedDomains) {
            return approvedDomains(Output.of(approvedDomains));
        }

        /**
         * @param approvedDomains the list of approved domains. To allow all subdomains for a given domain, use a wildcard symbol (`*`) before the domain name, i.e., `*.databricks.com` will allow to embed into any site under the `databricks.com`.
         * 
         * @return builder
         * 
         */
        public Builder approvedDomains(String... approvedDomains) {
            return approvedDomains(List.of(approvedDomains));
        }

        public AibiDashboardEmbeddingApprovedDomainsSettingAibiDashboardEmbeddingApprovedDomainsArgs build() {
            if ($.approvedDomains == null) {
                throw new MissingRequiredPropertyException("AibiDashboardEmbeddingApprovedDomainsSettingAibiDashboardEmbeddingApprovedDomainsArgs", "approvedDomains");
            }
            return $;
        }
    }

}
