// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDatabaseDatabaseCatalogPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDatabaseDatabaseCatalogPlainArgs Empty = new GetDatabaseDatabaseCatalogPlainArgs();

    /**
     * (boolean)
     * 
     */
    @Import(name="createDatabaseIfNotExists")
    private @Nullable Boolean createDatabaseIfNotExists;

    /**
     * @return (boolean)
     * 
     */
    public Optional<Boolean> createDatabaseIfNotExists() {
        return Optional.ofNullable(this.createDatabaseIfNotExists);
    }

    /**
     * (string) - The name of the DatabaseInstance housing the database
     * 
     */
    @Import(name="databaseInstanceName", required=true)
    private String databaseInstanceName;

    /**
     * @return (string) - The name of the DatabaseInstance housing the database
     * 
     */
    public String databaseInstanceName() {
        return this.databaseInstanceName;
    }

    /**
     * (string) - The name of the database (in a instance) associated with the catalog
     * 
     */
    @Import(name="databaseName", required=true)
    private String databaseName;

    /**
     * @return (string) - The name of the database (in a instance) associated with the catalog
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * The name of the catalog in UC
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the catalog in UC
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Workspace ID of the resource
     * 
     */
    @Import(name="workspaceId")
    private @Nullable String workspaceId;

    /**
     * @return Workspace ID of the resource
     * 
     */
    public Optional<String> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private GetDatabaseDatabaseCatalogPlainArgs() {}

    private GetDatabaseDatabaseCatalogPlainArgs(GetDatabaseDatabaseCatalogPlainArgs $) {
        this.createDatabaseIfNotExists = $.createDatabaseIfNotExists;
        this.databaseInstanceName = $.databaseInstanceName;
        this.databaseName = $.databaseName;
        this.name = $.name;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatabaseDatabaseCatalogPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatabaseDatabaseCatalogPlainArgs $;

        public Builder() {
            $ = new GetDatabaseDatabaseCatalogPlainArgs();
        }

        public Builder(GetDatabaseDatabaseCatalogPlainArgs defaults) {
            $ = new GetDatabaseDatabaseCatalogPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createDatabaseIfNotExists (boolean)
         * 
         * @return builder
         * 
         */
        public Builder createDatabaseIfNotExists(@Nullable Boolean createDatabaseIfNotExists) {
            $.createDatabaseIfNotExists = createDatabaseIfNotExists;
            return this;
        }

        /**
         * @param databaseInstanceName (string) - The name of the DatabaseInstance housing the database
         * 
         * @return builder
         * 
         */
        public Builder databaseInstanceName(String databaseInstanceName) {
            $.databaseInstanceName = databaseInstanceName;
            return this;
        }

        /**
         * @param databaseName (string) - The name of the database (in a instance) associated with the catalog
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param name The name of the catalog in UC
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param workspaceId Workspace ID of the resource
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable String workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        public GetDatabaseDatabaseCatalogPlainArgs build() {
            if ($.databaseInstanceName == null) {
                throw new MissingRequiredPropertyException("GetDatabaseDatabaseCatalogPlainArgs", "databaseInstanceName");
            }
            if ($.databaseName == null) {
                throw new MissingRequiredPropertyException("GetDatabaseDatabaseCatalogPlainArgs", "databaseName");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetDatabaseDatabaseCatalogPlainArgs", "name");
            }
            return $;
        }
    }

}
