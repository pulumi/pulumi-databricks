// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.SqlQueryParameterArgs;
import com.pulumi.databricks.inputs.SqlQueryScheduleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SqlQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlQueryArgs Empty = new SqlQueryArgs();

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="dataSourceId", required=true)
    private Output<String> dataSourceId;

    public Output<String> dataSourceId() {
        return this.dataSourceId;
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="parameters")
    private @Nullable Output<List<SqlQueryParameterArgs>> parameters;

    public Optional<Output<List<SqlQueryParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    @Import(name="parent")
    private @Nullable Output<String> parent;

    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    @Import(name="query", required=true)
    private Output<String> query;

    public Output<String> query() {
        return this.query;
    }

    @Import(name="runAsRole")
    private @Nullable Output<String> runAsRole;

    public Optional<Output<String>> runAsRole() {
        return Optional.ofNullable(this.runAsRole);
    }

    /**
     * @deprecated
     * Operations on `databricks_sql_query` schedules are deprecated. Please use `databricks_job` resource to schedule a `sql_task`.
     * 
     */
    @Deprecated /* Operations on `databricks_sql_query` schedules are deprecated. Please use `databricks_job` resource to schedule a `sql_task`. */
    @Import(name="schedule")
    private @Nullable Output<SqlQueryScheduleArgs> schedule;

    /**
     * @deprecated
     * Operations on `databricks_sql_query` schedules are deprecated. Please use `databricks_job` resource to schedule a `sql_task`.
     * 
     */
    @Deprecated /* Operations on `databricks_sql_query` schedules are deprecated. Please use `databricks_job` resource to schedule a `sql_task`. */
    public Optional<Output<SqlQueryScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private SqlQueryArgs() {}

    private SqlQueryArgs(SqlQueryArgs $) {
        this.createdAt = $.createdAt;
        this.dataSourceId = $.dataSourceId;
        this.description = $.description;
        this.name = $.name;
        this.parameters = $.parameters;
        this.parent = $.parent;
        this.query = $.query;
        this.runAsRole = $.runAsRole;
        this.schedule = $.schedule;
        this.tags = $.tags;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlQueryArgs $;

        public Builder() {
            $ = new SqlQueryArgs();
        }

        public Builder(SqlQueryArgs defaults) {
            $ = new SqlQueryArgs(Objects.requireNonNull(defaults));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        public Builder dataSourceId(Output<String> dataSourceId) {
            $.dataSourceId = dataSourceId;
            return this;
        }

        public Builder dataSourceId(String dataSourceId) {
            return dataSourceId(Output.of(dataSourceId));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parameters(@Nullable Output<List<SqlQueryParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(List<SqlQueryParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder parameters(SqlQueryParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        public Builder query(String query) {
            return query(Output.of(query));
        }

        public Builder runAsRole(@Nullable Output<String> runAsRole) {
            $.runAsRole = runAsRole;
            return this;
        }

        public Builder runAsRole(String runAsRole) {
            return runAsRole(Output.of(runAsRole));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Operations on `databricks_sql_query` schedules are deprecated. Please use `databricks_job` resource to schedule a `sql_task`.
         * 
         */
        @Deprecated /* Operations on `databricks_sql_query` schedules are deprecated. Please use `databricks_job` resource to schedule a `sql_task`. */
        public Builder schedule(@Nullable Output<SqlQueryScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Operations on `databricks_sql_query` schedules are deprecated. Please use `databricks_job` resource to schedule a `sql_task`.
         * 
         */
        @Deprecated /* Operations on `databricks_sql_query` schedules are deprecated. Please use `databricks_job` resource to schedule a `sql_task`. */
        public Builder schedule(SqlQueryScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public SqlQueryArgs build() {
            $.dataSourceId = Objects.requireNonNull($.dataSourceId, "expected parameter 'dataSourceId' to be non-null");
            $.query = Objects.requireNonNull($.query, "expected parameter 'query' to be non-null");
            return $;
        }
    }

}
