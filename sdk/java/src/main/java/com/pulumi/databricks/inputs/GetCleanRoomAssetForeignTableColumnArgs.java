// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetCleanRoomAssetForeignTableColumnMaskArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCleanRoomAssetForeignTableColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCleanRoomAssetForeignTableColumnArgs Empty = new GetCleanRoomAssetForeignTableColumnArgs();

    /**
     * (string) - User-provided free-form text description
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return (string) - User-provided free-form text description
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * (ColumnMask)
     * 
     */
    @Import(name="mask")
    private @Nullable Output<GetCleanRoomAssetForeignTableColumnMaskArgs> mask;

    /**
     * @return (ColumnMask)
     * 
     */
    public Optional<Output<GetCleanRoomAssetForeignTableColumnMaskArgs>> mask() {
        return Optional.ofNullable(this.mask);
    }

    /**
     * A fully qualified name that uniquely identifies the asset within the clean room.
     * This is also the name displayed in the clean room UI.
     * 
     * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
     * 
     * For notebooks, the name is the notebook file name.
     * For jar analyses, the name is the jar analysis name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A fully qualified name that uniquely identifies the asset within the clean room.
     * This is also the name displayed in the clean room UI.
     * 
     * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
     * 
     * For notebooks, the name is the notebook file name.
     * For jar analyses, the name is the jar analysis name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (boolean) - Whether field may be Null (default: true)
     * 
     */
    @Import(name="nullable")
    private @Nullable Output<Boolean> nullable;

    /**
     * @return (boolean) - Whether field may be Null (default: true)
     * 
     */
    public Optional<Output<Boolean>> nullable() {
        return Optional.ofNullable(this.nullable);
    }

    /**
     * (integer) - Partition index for column
     * 
     */
    @Import(name="partitionIndex")
    private @Nullable Output<Integer> partitionIndex;

    /**
     * @return (integer) - Partition index for column
     * 
     */
    public Optional<Output<Integer>> partitionIndex() {
        return Optional.ofNullable(this.partitionIndex);
    }

    /**
     * (integer) - Ordinal position of column (starting at position 0)
     * 
     */
    @Import(name="position")
    private @Nullable Output<Integer> position;

    /**
     * @return (integer) - Ordinal position of column (starting at position 0)
     * 
     */
    public Optional<Output<Integer>> position() {
        return Optional.ofNullable(this.position);
    }

    /**
     * (string) - Format of IntervalType
     * 
     */
    @Import(name="typeIntervalType")
    private @Nullable Output<String> typeIntervalType;

    /**
     * @return (string) - Format of IntervalType
     * 
     */
    public Optional<Output<String>> typeIntervalType() {
        return Optional.ofNullable(this.typeIntervalType);
    }

    /**
     * (string) - Full data type specification, JSON-serialized
     * 
     */
    @Import(name="typeJson")
    private @Nullable Output<String> typeJson;

    /**
     * @return (string) - Full data type specification, JSON-serialized
     * 
     */
    public Optional<Output<String>> typeJson() {
        return Optional.ofNullable(this.typeJson);
    }

    /**
     * (string) - . Possible values are: `ARRAY`, `BINARY`, `BOOLEAN`, `BYTE`, `CHAR`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `GEOGRAPHY`, `GEOMETRY`, `INT`, `INTERVAL`, `LONG`, `MAP`, `NULL`, `SHORT`, `STRING`, `STRUCT`, `TABLE_TYPE`, `TIMESTAMP`, `TIMESTAMP_NTZ`, `USER_DEFINED_TYPE`, `VARIANT`
     * 
     */
    @Import(name="typeName")
    private @Nullable Output<String> typeName;

    /**
     * @return (string) - . Possible values are: `ARRAY`, `BINARY`, `BOOLEAN`, `BYTE`, `CHAR`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `GEOGRAPHY`, `GEOMETRY`, `INT`, `INTERVAL`, `LONG`, `MAP`, `NULL`, `SHORT`, `STRING`, `STRUCT`, `TABLE_TYPE`, `TIMESTAMP`, `TIMESTAMP_NTZ`, `USER_DEFINED_TYPE`, `VARIANT`
     * 
     */
    public Optional<Output<String>> typeName() {
        return Optional.ofNullable(this.typeName);
    }

    /**
     * (integer) - Digits of precision; required for DecimalTypes
     * 
     */
    @Import(name="typePrecision")
    private @Nullable Output<Integer> typePrecision;

    /**
     * @return (integer) - Digits of precision; required for DecimalTypes
     * 
     */
    public Optional<Output<Integer>> typePrecision() {
        return Optional.ofNullable(this.typePrecision);
    }

    /**
     * (integer) - Digits to right of decimal; Required for DecimalTypes
     * 
     */
    @Import(name="typeScale")
    private @Nullable Output<Integer> typeScale;

    /**
     * @return (integer) - Digits to right of decimal; Required for DecimalTypes
     * 
     */
    public Optional<Output<Integer>> typeScale() {
        return Optional.ofNullable(this.typeScale);
    }

    /**
     * (string) - Full data type specification as SQL/catalogString text
     * 
     */
    @Import(name="typeText")
    private @Nullable Output<String> typeText;

    /**
     * @return (string) - Full data type specification as SQL/catalogString text
     * 
     */
    public Optional<Output<String>> typeText() {
        return Optional.ofNullable(this.typeText);
    }

    private GetCleanRoomAssetForeignTableColumnArgs() {}

    private GetCleanRoomAssetForeignTableColumnArgs(GetCleanRoomAssetForeignTableColumnArgs $) {
        this.comment = $.comment;
        this.mask = $.mask;
        this.name = $.name;
        this.nullable = $.nullable;
        this.partitionIndex = $.partitionIndex;
        this.position = $.position;
        this.typeIntervalType = $.typeIntervalType;
        this.typeJson = $.typeJson;
        this.typeName = $.typeName;
        this.typePrecision = $.typePrecision;
        this.typeScale = $.typeScale;
        this.typeText = $.typeText;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCleanRoomAssetForeignTableColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCleanRoomAssetForeignTableColumnArgs $;

        public Builder() {
            $ = new GetCleanRoomAssetForeignTableColumnArgs();
        }

        public Builder(GetCleanRoomAssetForeignTableColumnArgs defaults) {
            $ = new GetCleanRoomAssetForeignTableColumnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment (string) - User-provided free-form text description
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment (string) - User-provided free-form text description
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param mask (ColumnMask)
         * 
         * @return builder
         * 
         */
        public Builder mask(@Nullable Output<GetCleanRoomAssetForeignTableColumnMaskArgs> mask) {
            $.mask = mask;
            return this;
        }

        /**
         * @param mask (ColumnMask)
         * 
         * @return builder
         * 
         */
        public Builder mask(GetCleanRoomAssetForeignTableColumnMaskArgs mask) {
            return mask(Output.of(mask));
        }

        /**
         * @param name A fully qualified name that uniquely identifies the asset within the clean room.
         * This is also the name displayed in the clean room UI.
         * 
         * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
         * 
         * For notebooks, the name is the notebook file name.
         * For jar analyses, the name is the jar analysis name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A fully qualified name that uniquely identifies the asset within the clean room.
         * This is also the name displayed in the clean room UI.
         * 
         * For UC securable assets (tables, volumes, etc.), the format is *shared_catalog*.*shared_schema*.*asset_name*
         * 
         * For notebooks, the name is the notebook file name.
         * For jar analyses, the name is the jar analysis name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nullable (boolean) - Whether field may be Null (default: true)
         * 
         * @return builder
         * 
         */
        public Builder nullable(@Nullable Output<Boolean> nullable) {
            $.nullable = nullable;
            return this;
        }

        /**
         * @param nullable (boolean) - Whether field may be Null (default: true)
         * 
         * @return builder
         * 
         */
        public Builder nullable(Boolean nullable) {
            return nullable(Output.of(nullable));
        }

        /**
         * @param partitionIndex (integer) - Partition index for column
         * 
         * @return builder
         * 
         */
        public Builder partitionIndex(@Nullable Output<Integer> partitionIndex) {
            $.partitionIndex = partitionIndex;
            return this;
        }

        /**
         * @param partitionIndex (integer) - Partition index for column
         * 
         * @return builder
         * 
         */
        public Builder partitionIndex(Integer partitionIndex) {
            return partitionIndex(Output.of(partitionIndex));
        }

        /**
         * @param position (integer) - Ordinal position of column (starting at position 0)
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Output<Integer> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position (integer) - Ordinal position of column (starting at position 0)
         * 
         * @return builder
         * 
         */
        public Builder position(Integer position) {
            return position(Output.of(position));
        }

        /**
         * @param typeIntervalType (string) - Format of IntervalType
         * 
         * @return builder
         * 
         */
        public Builder typeIntervalType(@Nullable Output<String> typeIntervalType) {
            $.typeIntervalType = typeIntervalType;
            return this;
        }

        /**
         * @param typeIntervalType (string) - Format of IntervalType
         * 
         * @return builder
         * 
         */
        public Builder typeIntervalType(String typeIntervalType) {
            return typeIntervalType(Output.of(typeIntervalType));
        }

        /**
         * @param typeJson (string) - Full data type specification, JSON-serialized
         * 
         * @return builder
         * 
         */
        public Builder typeJson(@Nullable Output<String> typeJson) {
            $.typeJson = typeJson;
            return this;
        }

        /**
         * @param typeJson (string) - Full data type specification, JSON-serialized
         * 
         * @return builder
         * 
         */
        public Builder typeJson(String typeJson) {
            return typeJson(Output.of(typeJson));
        }

        /**
         * @param typeName (string) - . Possible values are: `ARRAY`, `BINARY`, `BOOLEAN`, `BYTE`, `CHAR`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `GEOGRAPHY`, `GEOMETRY`, `INT`, `INTERVAL`, `LONG`, `MAP`, `NULL`, `SHORT`, `STRING`, `STRUCT`, `TABLE_TYPE`, `TIMESTAMP`, `TIMESTAMP_NTZ`, `USER_DEFINED_TYPE`, `VARIANT`
         * 
         * @return builder
         * 
         */
        public Builder typeName(@Nullable Output<String> typeName) {
            $.typeName = typeName;
            return this;
        }

        /**
         * @param typeName (string) - . Possible values are: `ARRAY`, `BINARY`, `BOOLEAN`, `BYTE`, `CHAR`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `GEOGRAPHY`, `GEOMETRY`, `INT`, `INTERVAL`, `LONG`, `MAP`, `NULL`, `SHORT`, `STRING`, `STRUCT`, `TABLE_TYPE`, `TIMESTAMP`, `TIMESTAMP_NTZ`, `USER_DEFINED_TYPE`, `VARIANT`
         * 
         * @return builder
         * 
         */
        public Builder typeName(String typeName) {
            return typeName(Output.of(typeName));
        }

        /**
         * @param typePrecision (integer) - Digits of precision; required for DecimalTypes
         * 
         * @return builder
         * 
         */
        public Builder typePrecision(@Nullable Output<Integer> typePrecision) {
            $.typePrecision = typePrecision;
            return this;
        }

        /**
         * @param typePrecision (integer) - Digits of precision; required for DecimalTypes
         * 
         * @return builder
         * 
         */
        public Builder typePrecision(Integer typePrecision) {
            return typePrecision(Output.of(typePrecision));
        }

        /**
         * @param typeScale (integer) - Digits to right of decimal; Required for DecimalTypes
         * 
         * @return builder
         * 
         */
        public Builder typeScale(@Nullable Output<Integer> typeScale) {
            $.typeScale = typeScale;
            return this;
        }

        /**
         * @param typeScale (integer) - Digits to right of decimal; Required for DecimalTypes
         * 
         * @return builder
         * 
         */
        public Builder typeScale(Integer typeScale) {
            return typeScale(Output.of(typeScale));
        }

        /**
         * @param typeText (string) - Full data type specification as SQL/catalogString text
         * 
         * @return builder
         * 
         */
        public Builder typeText(@Nullable Output<String> typeText) {
            $.typeText = typeText;
            return this;
        }

        /**
         * @param typeText (string) - Full data type specification as SQL/catalogString text
         * 
         * @return builder
         * 
         */
        public Builder typeText(String typeText) {
            return typeText(Output.of(typeText));
        }

        public GetCleanRoomAssetForeignTableColumnArgs build() {
            return $;
        }
    }

}
