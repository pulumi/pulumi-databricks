// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.InstancePoolDiskSpecDiskTypeArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstancePoolDiskSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstancePoolDiskSpecArgs Empty = new InstancePoolDiskSpecArgs();

    /**
     * (Integer) The number of disks to attach to each instance. This feature is only enabled for supported node types. Users can choose up to the limit of the disks supported by the node type. For node types with no local disk, at least one disk needs to be specified.
     * 
     */
    @Import(name="diskCount")
    private @Nullable Output<Integer> diskCount;

    /**
     * @return (Integer) The number of disks to attach to each instance. This feature is only enabled for supported node types. Users can choose up to the limit of the disks supported by the node type. For node types with no local disk, at least one disk needs to be specified.
     * 
     */
    public Optional<Output<Integer>> diskCount() {
        return Optional.ofNullable(this.diskCount);
    }

    /**
     * (Integer) The size of each disk (in GiB) to attach.
     * 
     */
    @Import(name="diskSize")
    private @Nullable Output<Integer> diskSize;

    /**
     * @return (Integer) The size of each disk (in GiB) to attach.
     * 
     */
    public Optional<Output<Integer>> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }

    @Import(name="diskType")
    private @Nullable Output<InstancePoolDiskSpecDiskTypeArgs> diskType;

    public Optional<Output<InstancePoolDiskSpecDiskTypeArgs>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    private InstancePoolDiskSpecArgs() {}

    private InstancePoolDiskSpecArgs(InstancePoolDiskSpecArgs $) {
        this.diskCount = $.diskCount;
        this.diskSize = $.diskSize;
        this.diskType = $.diskType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstancePoolDiskSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstancePoolDiskSpecArgs $;

        public Builder() {
            $ = new InstancePoolDiskSpecArgs();
        }

        public Builder(InstancePoolDiskSpecArgs defaults) {
            $ = new InstancePoolDiskSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskCount (Integer) The number of disks to attach to each instance. This feature is only enabled for supported node types. Users can choose up to the limit of the disks supported by the node type. For node types with no local disk, at least one disk needs to be specified.
         * 
         * @return builder
         * 
         */
        public Builder diskCount(@Nullable Output<Integer> diskCount) {
            $.diskCount = diskCount;
            return this;
        }

        /**
         * @param diskCount (Integer) The number of disks to attach to each instance. This feature is only enabled for supported node types. Users can choose up to the limit of the disks supported by the node type. For node types with no local disk, at least one disk needs to be specified.
         * 
         * @return builder
         * 
         */
        public Builder diskCount(Integer diskCount) {
            return diskCount(Output.of(diskCount));
        }

        /**
         * @param diskSize (Integer) The size of each disk (in GiB) to attach.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(@Nullable Output<Integer> diskSize) {
            $.diskSize = diskSize;
            return this;
        }

        /**
         * @param diskSize (Integer) The size of each disk (in GiB) to attach.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(Integer diskSize) {
            return diskSize(Output.of(diskSize));
        }

        public Builder diskType(@Nullable Output<InstancePoolDiskSpecDiskTypeArgs> diskType) {
            $.diskType = diskType;
            return this;
        }

        public Builder diskType(InstancePoolDiskSpecDiskTypeArgs diskType) {
            return diskType(Output.of(diskType));
        }

        public InstancePoolDiskSpecArgs build() {
            return $;
        }
    }

}
