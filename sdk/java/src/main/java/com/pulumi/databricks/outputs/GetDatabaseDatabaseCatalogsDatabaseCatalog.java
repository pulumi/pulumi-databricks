// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabaseDatabaseCatalogsDatabaseCatalog {
    /**
     * @return (boolean)
     * 
     */
    private Boolean createDatabaseIfNotExists;
    /**
     * @return (string) - The name of the DatabaseInstance housing the database
     * 
     */
    private String databaseInstanceName;
    /**
     * @return (string) - The name of the database (in a instance) associated with the catalog
     * 
     */
    private String databaseName;
    /**
     * @return (string) - The name of the catalog in UC
     * 
     */
    private String name;
    /**
     * @return (string)
     * 
     */
    private String uid;

    private GetDatabaseDatabaseCatalogsDatabaseCatalog() {}
    /**
     * @return (boolean)
     * 
     */
    public Boolean createDatabaseIfNotExists() {
        return this.createDatabaseIfNotExists;
    }
    /**
     * @return (string) - The name of the DatabaseInstance housing the database
     * 
     */
    public String databaseInstanceName() {
        return this.databaseInstanceName;
    }
    /**
     * @return (string) - The name of the database (in a instance) associated with the catalog
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return (string) - The name of the catalog in UC
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (string)
     * 
     */
    public String uid() {
        return this.uid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseDatabaseCatalogsDatabaseCatalog defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean createDatabaseIfNotExists;
        private String databaseInstanceName;
        private String databaseName;
        private String name;
        private String uid;
        public Builder() {}
        public Builder(GetDatabaseDatabaseCatalogsDatabaseCatalog defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createDatabaseIfNotExists = defaults.createDatabaseIfNotExists;
    	      this.databaseInstanceName = defaults.databaseInstanceName;
    	      this.databaseName = defaults.databaseName;
    	      this.name = defaults.name;
    	      this.uid = defaults.uid;
        }

        @CustomType.Setter
        public Builder createDatabaseIfNotExists(Boolean createDatabaseIfNotExists) {
            if (createDatabaseIfNotExists == null) {
              throw new MissingRequiredPropertyException("GetDatabaseDatabaseCatalogsDatabaseCatalog", "createDatabaseIfNotExists");
            }
            this.createDatabaseIfNotExists = createDatabaseIfNotExists;
            return this;
        }
        @CustomType.Setter
        public Builder databaseInstanceName(String databaseInstanceName) {
            if (databaseInstanceName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseDatabaseCatalogsDatabaseCatalog", "databaseInstanceName");
            }
            this.databaseInstanceName = databaseInstanceName;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseDatabaseCatalogsDatabaseCatalog", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDatabaseDatabaseCatalogsDatabaseCatalog", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetDatabaseDatabaseCatalogsDatabaseCatalog", "uid");
            }
            this.uid = uid;
            return this;
        }
        public GetDatabaseDatabaseCatalogsDatabaseCatalog build() {
            final var _resultValue = new GetDatabaseDatabaseCatalogsDatabaseCatalog();
            _resultValue.createDatabaseIfNotExists = createDatabaseIfNotExists;
            _resultValue.databaseInstanceName = databaseInstanceName;
            _resultValue.databaseName = databaseName;
            _resultValue.name = name;
            _resultValue.uid = uid;
            return _resultValue;
        }
    }
}
