// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.databricks.inputs.GetDatabaseSyncedDatabaseTableSpecNewPipelineSpec;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDatabaseSyncedDatabaseTableSpec extends com.pulumi.resources.InvokeArgs {

    public static final GetDatabaseSyncedDatabaseTableSpec Empty = new GetDatabaseSyncedDatabaseTableSpec();

    /**
     * (boolean) - If true, the synced table&#39;s logical database and schema resources in PG
     * will be created if they do not already exist
     * 
     */
    @Import(name="createDatabaseObjectsIfMissing", required=true)
    private Boolean createDatabaseObjectsIfMissing;

    /**
     * @return (boolean) - If true, the synced table&#39;s logical database and schema resources in PG
     * will be created if they do not already exist
     * 
     */
    public Boolean createDatabaseObjectsIfMissing() {
        return this.createDatabaseObjectsIfMissing;
    }

    /**
     * (string) - At most one of existing_pipeline_id and new_pipeline_spec should be defined.
     * 
     */
    @Import(name="existingPipelineId", required=true)
    private String existingPipelineId;

    /**
     * @return (string) - At most one of existing_pipeline_id and new_pipeline_spec should be defined.
     * 
     */
    public String existingPipelineId() {
        return this.existingPipelineId;
    }

    /**
     * (NewPipelineSpec) - At most one of existing_pipeline_id and new_pipeline_spec should be defined.
     * 
     */
    @Import(name="newPipelineSpec", required=true)
    private GetDatabaseSyncedDatabaseTableSpecNewPipelineSpec newPipelineSpec;

    /**
     * @return (NewPipelineSpec) - At most one of existing_pipeline_id and new_pipeline_spec should be defined.
     * 
     */
    public GetDatabaseSyncedDatabaseTableSpecNewPipelineSpec newPipelineSpec() {
        return this.newPipelineSpec;
    }

    /**
     * (list of string) - Primary Key columns to be used for data insert/update in the destination
     * 
     */
    @Import(name="primaryKeyColumns")
    private @Nullable List<String> primaryKeyColumns;

    /**
     * @return (list of string) - Primary Key columns to be used for data insert/update in the destination
     * 
     */
    public Optional<List<String>> primaryKeyColumns() {
        return Optional.ofNullable(this.primaryKeyColumns);
    }

    /**
     * (string) - Scheduling policy of the underlying pipeline. Possible values are: `CONTINUOUS`, `SNAPSHOT`, `TRIGGERED`
     * 
     */
    @Import(name="schedulingPolicy")
    private @Nullable String schedulingPolicy;

    /**
     * @return (string) - Scheduling policy of the underlying pipeline. Possible values are: `CONTINUOUS`, `SNAPSHOT`, `TRIGGERED`
     * 
     */
    public Optional<String> schedulingPolicy() {
        return Optional.ofNullable(this.schedulingPolicy);
    }

    /**
     * (string) - Three-part (catalog, schema, table) name of the source Delta table
     * 
     */
    @Import(name="sourceTableFullName")
    private @Nullable String sourceTableFullName;

    /**
     * @return (string) - Three-part (catalog, schema, table) name of the source Delta table
     * 
     */
    public Optional<String> sourceTableFullName() {
        return Optional.ofNullable(this.sourceTableFullName);
    }

    /**
     * (string) - Time series key to deduplicate (tie-break) rows with the same primary key
     * 
     */
    @Import(name="timeseriesKey")
    private @Nullable String timeseriesKey;

    /**
     * @return (string) - Time series key to deduplicate (tie-break) rows with the same primary key
     * 
     */
    public Optional<String> timeseriesKey() {
        return Optional.ofNullable(this.timeseriesKey);
    }

    private GetDatabaseSyncedDatabaseTableSpec() {}

    private GetDatabaseSyncedDatabaseTableSpec(GetDatabaseSyncedDatabaseTableSpec $) {
        this.createDatabaseObjectsIfMissing = $.createDatabaseObjectsIfMissing;
        this.existingPipelineId = $.existingPipelineId;
        this.newPipelineSpec = $.newPipelineSpec;
        this.primaryKeyColumns = $.primaryKeyColumns;
        this.schedulingPolicy = $.schedulingPolicy;
        this.sourceTableFullName = $.sourceTableFullName;
        this.timeseriesKey = $.timeseriesKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatabaseSyncedDatabaseTableSpec defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatabaseSyncedDatabaseTableSpec $;

        public Builder() {
            $ = new GetDatabaseSyncedDatabaseTableSpec();
        }

        public Builder(GetDatabaseSyncedDatabaseTableSpec defaults) {
            $ = new GetDatabaseSyncedDatabaseTableSpec(Objects.requireNonNull(defaults));
        }

        /**
         * @param createDatabaseObjectsIfMissing (boolean) - If true, the synced table&#39;s logical database and schema resources in PG
         * will be created if they do not already exist
         * 
         * @return builder
         * 
         */
        public Builder createDatabaseObjectsIfMissing(Boolean createDatabaseObjectsIfMissing) {
            $.createDatabaseObjectsIfMissing = createDatabaseObjectsIfMissing;
            return this;
        }

        /**
         * @param existingPipelineId (string) - At most one of existing_pipeline_id and new_pipeline_spec should be defined.
         * 
         * @return builder
         * 
         */
        public Builder existingPipelineId(String existingPipelineId) {
            $.existingPipelineId = existingPipelineId;
            return this;
        }

        /**
         * @param newPipelineSpec (NewPipelineSpec) - At most one of existing_pipeline_id and new_pipeline_spec should be defined.
         * 
         * @return builder
         * 
         */
        public Builder newPipelineSpec(GetDatabaseSyncedDatabaseTableSpecNewPipelineSpec newPipelineSpec) {
            $.newPipelineSpec = newPipelineSpec;
            return this;
        }

        /**
         * @param primaryKeyColumns (list of string) - Primary Key columns to be used for data insert/update in the destination
         * 
         * @return builder
         * 
         */
        public Builder primaryKeyColumns(@Nullable List<String> primaryKeyColumns) {
            $.primaryKeyColumns = primaryKeyColumns;
            return this;
        }

        /**
         * @param primaryKeyColumns (list of string) - Primary Key columns to be used for data insert/update in the destination
         * 
         * @return builder
         * 
         */
        public Builder primaryKeyColumns(String... primaryKeyColumns) {
            return primaryKeyColumns(List.of(primaryKeyColumns));
        }

        /**
         * @param schedulingPolicy (string) - Scheduling policy of the underlying pipeline. Possible values are: `CONTINUOUS`, `SNAPSHOT`, `TRIGGERED`
         * 
         * @return builder
         * 
         */
        public Builder schedulingPolicy(@Nullable String schedulingPolicy) {
            $.schedulingPolicy = schedulingPolicy;
            return this;
        }

        /**
         * @param sourceTableFullName (string) - Three-part (catalog, schema, table) name of the source Delta table
         * 
         * @return builder
         * 
         */
        public Builder sourceTableFullName(@Nullable String sourceTableFullName) {
            $.sourceTableFullName = sourceTableFullName;
            return this;
        }

        /**
         * @param timeseriesKey (string) - Time series key to deduplicate (tie-break) rows with the same primary key
         * 
         * @return builder
         * 
         */
        public Builder timeseriesKey(@Nullable String timeseriesKey) {
            $.timeseriesKey = timeseriesKey;
            return this;
        }

        public GetDatabaseSyncedDatabaseTableSpec build() {
            if ($.createDatabaseObjectsIfMissing == null) {
                throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTableSpec", "createDatabaseObjectsIfMissing");
            }
            if ($.existingPipelineId == null) {
                throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTableSpec", "existingPipelineId");
            }
            if ($.newPipelineSpec == null) {
                throw new MissingRequiredPropertyException("GetDatabaseSyncedDatabaseTableSpec", "newPipelineSpec");
            }
            return $;
        }
    }

}
